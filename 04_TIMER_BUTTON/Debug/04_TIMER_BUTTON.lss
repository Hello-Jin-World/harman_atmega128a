
04_TIMER_BUTTON.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000552  000005e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000552  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080010c  0080010c  000005f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d22  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a83  00000000  00000000  00001446  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000661  00000000  00000000  00001ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  0000252c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000513  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bf  00000000  00000000  00002b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002d4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	27 c2       	rjmp	.+1102   	; 0x490 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e5       	ldi	r30, 0x52	; 82
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	17 d2       	rcall	.+1070   	; 0x4f2 <main>
  c4:	44 c2       	rjmp	.+1160   	; 0x54e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_button>:
// 00001111
// DDRD &= 0x0f; // 4, 5, 6, 7을 input. PORTD.4 가독성이 떨어진다.

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN | 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN);
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	08 95       	ret

000000d0 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
  d0:	20 b3       	in	r18, 0x10	; 16
  d2:	42 2f       	mov	r20, r18
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <get_button+0x10>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <get_button+0xc>
  e4:	24 23       	and	r18, r20
  e6:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
  e8:	21 15       	cp	r18, r1
  ea:	31 05       	cpc	r19, r1
  ec:	b9 f0       	breq	.+46     	; 0x11c <get_button+0x4c>
  ee:	fc 01       	movw	r30, r24
  f0:	e4 5f       	subi	r30, 0xF4	; 244
  f2:	fe 4f       	sbci	r31, 0xFE	; 254
  f4:	40 81       	ld	r20, Z
  f6:	41 11       	cpse	r20, r1
  f8:	11 c0       	rjmp	.+34     	; 0x11c <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	3d ee       	ldi	r19, 0xED	; 237
  fe:	42 e0       	ldi	r20, 0x02	; 2
 100:	21 50       	subi	r18, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	40 40       	sbci	r20, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <get_button+0x30>
 108:	00 c0       	rjmp	.+0      	; 0x10a <get_button+0x3a>
 10a:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
 10c:	fc 01       	movw	r30, r24
 10e:	e4 5f       	subi	r30, 0xF4	; 244
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
 11c:	fc 01       	movw	r30, r24
 11e:	e4 5f       	subi	r30, 0xF4	; 244
 120:	fe 4f       	sbci	r31, 0xFE	; 254
 122:	40 81       	ld	r20, Z
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	91 f4       	brne	.+36     	; 0x14c <get_button+0x7c>
 128:	23 2b       	or	r18, r19
 12a:	99 f4       	brne	.+38     	; 0x152 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
 12c:	fc 01       	movw	r30, r24
 12e:	e4 5f       	subi	r30, 0xF4	; 244
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	10 82       	st	Z, r1
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	9d ee       	ldi	r25, 0xED	; 237
 138:	22 e0       	ldi	r18, 0x02	; 2
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	20 40       	sbci	r18, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <get_button+0x6a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <get_button+0x74>
 144:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret

00000158 <shift_left_keep_ledon>:
void shift_left_keep_ledon(void)
{
#if 1
	static int i = 0;

	if (msec_count >= 100)
 158:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <msec_count>
 15c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <msec_count+0x1>
 160:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <msec_count+0x2>
 164:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <msec_count+0x3>
 168:	84 36       	cpi	r24, 0x64	; 100
 16a:	91 05       	cpc	r25, r1
 16c:	a1 05       	cpc	r26, r1
 16e:	b1 05       	cpc	r27, r1
 170:	28 f1       	brcs	.+74     	; 0x1bc <shift_left_keep_ledon+0x64>
	{
		msec_count = 0;
 172:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <msec_count>
 176:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <msec_count+0x1>
 17a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <msec_count+0x2>
 17e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <msec_count+0x3>
		if (i >= 8)
 182:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <i.1753>
 186:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <i.1753+0x1>
 18a:	28 30       	cpi	r18, 0x08	; 8
 18c:	31 05       	cpc	r19, r1
 18e:	34 f0       	brlt	.+12     	; 0x19c <shift_left_keep_ledon+0x44>
		{
			i = 0;
 190:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <i.1753+0x1>
 194:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <i.1753>
			PORTA = 0x00;
 198:	1b ba       	out	0x1b, r1	; 27
 19a:	08 95       	ret
		}
		else
		{
			PORTA |= 0b00000001 << i++;
 19c:	c9 01       	movw	r24, r18
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <i.1753+0x1>
 1a4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <i.1753>
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <shift_left_keep_ledon+0x5a>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	2a 95       	dec	r18
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <shift_left_keep_ledon+0x56>
 1b6:	9b b3       	in	r25, 0x1b	; 27
 1b8:	89 2b       	or	r24, r25
 1ba:	8b bb       	out	0x1b, r24	; 27
 1bc:	08 95       	ret

000001be <shift_right_keep_ledon>:
void shift_right_keep_ledon(void)
{
#if 1
	static int i = 0;

	if (msec_count >= 100) // 100ms 마다 껐다 켰다
 1be:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <msec_count>
 1c2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <msec_count+0x1>
 1c6:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <msec_count+0x2>
 1ca:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <msec_count+0x3>
 1ce:	84 36       	cpi	r24, 0x64	; 100
 1d0:	91 05       	cpc	r25, r1
 1d2:	a1 05       	cpc	r26, r1
 1d4:	b1 05       	cpc	r27, r1
 1d6:	28 f1       	brcs	.+74     	; 0x222 <shift_right_keep_ledon+0x64>
	{
		msec_count = 0;
 1d8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <msec_count>
 1dc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <msec_count+0x1>
 1e0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <msec_count+0x2>
 1e4:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <msec_count+0x3>
		if (i >= 8)
 1e8:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <i.1757>
 1ec:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <i.1757+0x1>
 1f0:	28 30       	cpi	r18, 0x08	; 8
 1f2:	31 05       	cpc	r19, r1
 1f4:	34 f0       	brlt	.+12     	; 0x202 <shift_right_keep_ledon+0x44>
		{
			i = 0;
 1f6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <i.1757+0x1>
 1fa:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <i.1757>
			PORTA = 0x00;
 1fe:	1b ba       	out	0x1b, r1	; 27
 200:	08 95       	ret
		}
		else
		{
			PORTA |= 0b10000000 >> i++;
 202:	c9 01       	movw	r24, r18
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <i.1757+0x1>
 20a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <i.1757>
 20e:	80 e8       	ldi	r24, 0x80	; 128
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <shift_right_keep_ledon+0x5a>
 214:	95 95       	asr	r25
 216:	87 95       	ror	r24
 218:	2a 95       	dec	r18
 21a:	e2 f7       	brpl	.-8      	; 0x214 <shift_right_keep_ledon+0x56>
 21c:	9b b3       	in	r25, 0x1b	; 27
 21e:	89 2b       	or	r24, r25
 220:	8b bb       	out	0x1b, r24	; 27
 222:	08 95       	ret

00000224 <shift_left_ledon>:
void shift_left_ledon(void)
{
#if 1 // for문 제거, _delay_ms 제거
	static int i = 0;
	
	if (msec_count >= 100)
 224:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <msec_count>
 228:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <msec_count+0x1>
 22c:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <msec_count+0x2>
 230:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <msec_count+0x3>
 234:	84 36       	cpi	r24, 0x64	; 100
 236:	91 05       	cpc	r25, r1
 238:	a1 05       	cpc	r26, r1
 23a:	b1 05       	cpc	r27, r1
 23c:	28 f1       	brcs	.+74     	; 0x288 <shift_left_ledon+0x64>
	{
		msec_count = 0; // 0으로 초기화 해줘서 다시 100ms 할 수 있도록
 23e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <msec_count>
 242:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <msec_count+0x1>
 246:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <msec_count+0x2>
 24a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <msec_count+0x3>
		if (i >= 8)
 24e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <i.1761>
 252:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <i.1761+0x1>
 256:	88 30       	cpi	r24, 0x08	; 8
 258:	91 05       	cpc	r25, r1
 25a:	34 f0       	brlt	.+12     	; 0x268 <shift_left_ledon+0x44>
		{
			i = 0;
 25c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <i.1761+0x1>
 260:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <i.1761>
			PORTA = 0x00;
 264:	1b ba       	out	0x1b, r1	; 27
 266:	08 95       	ret
		}
		else
		{
			PORTA = 0b00000001 << i++;
 268:	9c 01       	movw	r18, r24
 26a:	2f 5f       	subi	r18, 0xFF	; 255
 26c:	3f 4f       	sbci	r19, 0xFF	; 255
 26e:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <i.1761+0x1>
 272:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <i.1761>
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	a9 01       	movw	r20, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <shift_left_ledon+0x5e>
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	8a 95       	dec	r24
 284:	e2 f7       	brpl	.-8      	; 0x27e <shift_left_ledon+0x5a>
 286:	4b bb       	out	0x1b, r20	; 27
 288:	08 95       	ret

0000028a <shift_right_ledon>:
void shift_right_ledon(void)
{
#if 1
	static int i = 0;

	if (msec_count >= 100)
 28a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <msec_count>
 28e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <msec_count+0x1>
 292:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <msec_count+0x2>
 296:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <msec_count+0x3>
 29a:	84 36       	cpi	r24, 0x64	; 100
 29c:	91 05       	cpc	r25, r1
 29e:	a1 05       	cpc	r26, r1
 2a0:	b1 05       	cpc	r27, r1
 2a2:	28 f1       	brcs	.+74     	; 0x2ee <shift_right_ledon+0x64>
	{
		msec_count = 0;
 2a4:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <msec_count>
 2a8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <msec_count+0x1>
 2ac:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <msec_count+0x2>
 2b0:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <msec_count+0x3>
		if (i >= 8)
 2b4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <i.1765>
 2b8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <i.1765+0x1>
 2bc:	88 30       	cpi	r24, 0x08	; 8
 2be:	91 05       	cpc	r25, r1
 2c0:	34 f0       	brlt	.+12     	; 0x2ce <shift_right_ledon+0x44>
		{
			i = 0;
 2c2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <i.1765+0x1>
 2c6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <i.1765>
			PORTA = 0x00;
 2ca:	1b ba       	out	0x1b, r1	; 27
 2cc:	08 95       	ret
		}
		else
		{
			PORTA = 0b10000000 >> i++;
 2ce:	9c 01       	movw	r18, r24
 2d0:	2f 5f       	subi	r18, 0xFF	; 255
 2d2:	3f 4f       	sbci	r19, 0xFF	; 255
 2d4:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <i.1765+0x1>
 2d8:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <i.1765>
 2dc:	20 e8       	ldi	r18, 0x80	; 128
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	a9 01       	movw	r20, r18
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <shift_right_ledon+0x5e>
 2e4:	55 95       	asr	r21
 2e6:	47 95       	ror	r20
 2e8:	8a 95       	dec	r24
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <shift_right_ledon+0x5a>
 2ec:	4b bb       	out	0x1b, r20	; 27
 2ee:	08 95       	ret

000002f0 <floweron>:
{

#if 1
	static int i = 0;

	if (msec_count >= 100)
 2f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <msec_count>
 2f4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <msec_count+0x1>
 2f8:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <msec_count+0x2>
 2fc:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <msec_count+0x3>
 300:	84 36       	cpi	r24, 0x64	; 100
 302:	91 05       	cpc	r25, r1
 304:	a1 05       	cpc	r26, r1
 306:	b1 05       	cpc	r27, r1
 308:	90 f1       	brcs	.+100    	; 0x36e <floweron+0x7e>
	{
		msec_count = 0;
 30a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <msec_count>
 30e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <msec_count+0x1>
 312:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <msec_count+0x2>
 316:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <msec_count+0x3>
		if (i >= 4)
 31a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <i.1779>
 31e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <i.1779+0x1>
 322:	24 30       	cpi	r18, 0x04	; 4
 324:	31 05       	cpc	r19, r1
 326:	34 f0       	brlt	.+12     	; 0x334 <floweron+0x44>
		{
			i = 0;
 328:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <i.1779+0x1>
 32c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <i.1779>
			PORTA = 0x00;
 330:	1b ba       	out	0x1b, r1	; 27
 332:	08 95       	ret
		}
		else
		{
			PORTA |= 0x10 << i | 0x08 >> i;
 334:	3b b3       	in	r19, 0x1b	; 27
 336:	80 e1       	ldi	r24, 0x10	; 16
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	ac 01       	movw	r20, r24
 33c:	02 2e       	mov	r0, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <floweron+0x54>
 340:	44 0f       	add	r20, r20
 342:	55 1f       	adc	r21, r21
 344:	0a 94       	dec	r0
 346:	e2 f7       	brpl	.-8      	; 0x340 <floweron+0x50>
 348:	88 e0       	ldi	r24, 0x08	; 8
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <floweron+0x62>
 34e:	95 95       	asr	r25
 350:	87 95       	ror	r24
 352:	2a 95       	dec	r18
 354:	e2 f7       	brpl	.-8      	; 0x34e <floweron+0x5e>
 356:	84 2b       	or	r24, r20
 358:	83 2b       	or	r24, r19
 35a:	8b bb       	out	0x1b, r24	; 27
			i++;
 35c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i.1779>
 360:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <i.1779+0x1>
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <i.1779+0x1>
 36a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <i.1779>
 36e:	08 95       	ret

00000370 <floweroff>:
	unsigned char h=0xf0;
	unsigned char l=0x0f;
#if 1
	static int i = 0;

	if (msec_count >= 100)
 370:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <msec_count>
 374:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <msec_count+0x1>
 378:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <msec_count+0x2>
 37c:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <msec_count+0x3>
 380:	84 36       	cpi	r24, 0x64	; 100
 382:	91 05       	cpc	r25, r1
 384:	a1 05       	cpc	r26, r1
 386:	b1 05       	cpc	r27, r1
 388:	88 f1       	brcs	.+98     	; 0x3ec <floweroff+0x7c>
	{
		msec_count = 0;
 38a:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <msec_count>
 38e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <msec_count+0x1>
 392:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <msec_count+0x2>
 396:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <msec_count+0x3>
		if (i >= 4)
 39a:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <i.1785>
 39e:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <i.1785+0x1>
 3a2:	44 30       	cpi	r20, 0x04	; 4
 3a4:	51 05       	cpc	r21, r1
 3a6:	34 f0       	brlt	.+12     	; 0x3b4 <floweroff+0x44>
		{
			i = 0;
 3a8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <i.1785+0x1>
 3ac:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <i.1785>
			PORTA = 0x00;
 3b0:	1b ba       	out	0x1b, r1	; 27
 3b2:	08 95       	ret
		}
		else
		{
			PORTA = ( ((h >> i) & 0xf0) | ((l << i) & 0x0f));
 3b4:	20 ef       	ldi	r18, 0xF0	; 240
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	04 2e       	mov	r0, r20
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <floweroff+0x50>
 3bc:	35 95       	asr	r19
 3be:	27 95       	ror	r18
 3c0:	0a 94       	dec	r0
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <floweroff+0x4c>
 3c4:	8f e0       	ldi	r24, 0x0F	; 15
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <floweroff+0x5e>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	4a 95       	dec	r20
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <floweroff+0x5a>
 3d2:	20 7f       	andi	r18, 0xF0	; 240
 3d4:	8f 70       	andi	r24, 0x0F	; 15
 3d6:	82 2b       	or	r24, r18
 3d8:	8b bb       	out	0x1b, r24	; 27
			i++;
 3da:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i.1785>
 3de:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <i.1785+0x1>
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <i.1785+0x1>
 3e8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i.1785>
 3ec:	08 95       	ret

000003ee <led_main>:
};

int led_main(void) // 정의
{
	
	init_button();
 3ee:	6c de       	rcall	.-808    	; 0xc8 <init_button>
	
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	8a bb       	out	0x1a, r24	; 26
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN))
 3f4:	64 e0       	ldi	r22, 0x04	; 4
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	69 de       	rcall	.-814    	; 0xd0 <get_button>
 3fe:	89 2b       	or	r24, r25
 400:	61 f0       	breq	.+24     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		{
			state++;
 402:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <state>
 406:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <state+0x1>
 40a:	01 96       	adiw	r24, 0x01	; 1
			state %= 6; // 버튼을 눌렀을 때 상태처리
 40c:	66 e0       	ldi	r22, 0x06	; 6
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	77 d0       	rcall	.+238    	; 0x500 <__divmodhi4>
 412:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <state+0x1>
 416:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <state>
		}
		fp[state]();
 41a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <state>
 41e:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <state+0x1>
 422:	ee 0f       	add	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	e0 50       	subi	r30, 0x00	; 0
 428:	ff 4f       	sbci	r31, 0xFF	; 255
 42a:	01 90       	ld	r0, Z+
 42c:	f0 81       	ld	r31, Z
 42e:	e0 2d       	mov	r30, r0
 430:	09 95       	icall
	}
 432:	e0 cf       	rjmp	.-64     	; 0x3f4 <led_main+0x6>

00000434 <led_all_on>:
	}
}

void led_all_on(void)
{
	PORTA = 0xff;
 434:	8f ef       	ldi	r24, 0xFF	; 255
 436:	8b bb       	out	0x1b, r24	; 27
 438:	08 95       	ret

0000043a <led_all_off>:
}

void led_all_off(void)
{
	PORTA = 0x00;
 43a:	1b ba       	out	0x1b, r1	; 27
 43c:	08 95       	ret

0000043e <led_all_on_off>:

void led_all_on_off(void)
{
	static int led_toggle = 0;
	
	if (msec_count >= 500) // if (mscount == 500) : interrupt에서는 == 주의
 43e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <msec_count>
 442:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <msec_count+0x1>
 446:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <msec_count+0x2>
 44a:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <msec_count+0x3>
 44e:	84 3f       	cpi	r24, 0xF4	; 244
 450:	91 40       	sbci	r25, 0x01	; 1
 452:	a1 05       	cpc	r26, r1
 454:	b1 05       	cpc	r27, r1
 456:	d8 f0       	brcs	.+54     	; 0x48e <led_all_on_off+0x50>
	{
		msec_count = 0; // 다음 500ms를 만나기 위해 0으로
 458:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <msec_count>
 45c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <msec_count+0x1>
 460:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <msec_count+0x2>
 464:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <msec_count+0x3>
		led_toggle = !led_toggle;
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <led_toggle.1769>
 470:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <led_toggle.1769+0x1>
 474:	23 2b       	or	r18, r19
 476:	11 f0       	breq	.+4      	; 0x47c <led_all_on_off+0x3e>
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <led_toggle.1769+0x1>
 480:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <led_toggle.1769>
		if (led_toggle)
 484:	89 2b       	or	r24, r25
 486:	11 f0       	breq	.+4      	; 0x48c <led_all_on_off+0x4e>
			led_all_on();
 488:	d5 cf       	rjmp	.-86     	; 0x434 <led_all_on>
 48a:	08 95       	ret
		else
			led_all_off();
 48c:	d6 cf       	rjmp	.-84     	; 0x43a <led_all_off>
 48e:	08 95       	ret

00000490 <__vector_16>:
// HW 가 SW 한테 interrput가 발생했다는 것을 알려주는 공간
// TIMER0_OVF_vect : interrupt 신호 이름
// 250개의 pulse를 count(1ms)하면 이곳으로 자동으로 들어온다.
// ISR은 가능한 최대한으로 짧게 작성한다.
ISR(TIMER0_OVF_vect) // interrupt service routine :routine은 interrupt 서비스 함수
{
 490:	1f 92       	push	r1
 492:	0f 92       	push	r0
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	0f 92       	push	r0
 498:	11 24       	eor	r1, r1
 49a:	8f 93       	push	r24
 49c:	9f 93       	push	r25
 49e:	af 93       	push	r26
 4a0:	bf 93       	push	r27
	TCNT0 = 6; // 6 ~ 256 : 250개 (1ms) 그래서 TCNT0를 6으로 설정
 4a2:	86 e0       	ldi	r24, 0x06	; 6
 4a4:	82 bf       	out	0x32, r24	; 50
	msec_count++; // 1ms마다 msec_count가 1씩 증가
 4a6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <msec_count>
 4aa:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <msec_count+0x1>
 4ae:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <msec_count+0x2>
 4b2:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <msec_count+0x3>
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	a1 1d       	adc	r26, r1
 4ba:	b1 1d       	adc	r27, r1
 4bc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <msec_count>
 4c0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <msec_count+0x1>
 4c4:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <msec_count+0x2>
 4c8:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <msec_count+0x3>
}
 4cc:	bf 91       	pop	r27
 4ce:	af 91       	pop	r26
 4d0:	9f 91       	pop	r25
 4d2:	8f 91       	pop	r24
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <init_timer0>:
	// 16000000Hz / 64 = 250,000Hz
	// 2. T(주기) 1가 잡아먹는 시간 : 1/f = 1/250,000 ==> 0.000004sec (4us) : 0.004ms
	// 3. 8bit timer overflow : 0.004ms x 256 = 1.024ms
	// 그러면 정확히 1ms를 재고 싶다면 0.004ms x 250개 = 1ms

	TCNT0 = 6; // TCNT : 0 ~ 256 == 1ms마다 TIMER0_OVF_vect로 진입한다.
 4de:	86 e0       	ldi	r24, 0x06	; 6
 4e0:	82 bf       	out	0x32, r24	; 50
	// 6으로 설정 한 이유 : 6~256  250개를 count(정확히 1ms를 맞추기 위해서)
	// 4. 분주비 설정 (250khz)
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
 4e2:	83 b7       	in	r24, 0x33	; 51
 4e4:	84 60       	ori	r24, 0x04	; 4
 4e6:	83 bf       	out	0x33, r24	; 51
	// 5. TIMER0 Overflow enable
	TIMSK |= 1 << TOIE0; // TIMSK |= 0x01;
 4e8:	87 b7       	in	r24, 0x37	; 55
 4ea:	81 60       	ori	r24, 0x01	; 1
 4ec:	87 bf       	out	0x37, r24	; 55
	//6. 전역 인터럽트
	sei(); // 전역적(대문)으로 interrupt 허용
 4ee:	78 94       	sei
 4f0:	08 95       	ret

000004f2 <main>:
	msec_count++; // 1ms마다 msec_count가 1씩 증가
}

int main(void)
{
	init_timer0();
 4f2:	f5 df       	rcall	.-22     	; 0x4de <init_timer0>
	DDRA = 0xff; // led 출력 모드
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00; // led all off
	
	led_main();
 4f8:	1b ba       	out	0x1b, r1	; 27
	
	while (1)
	{
		#if 1
		led_all_on_off();
 4fa:	79 df       	rcall	.-270    	; 0x3ee <led_main>
 4fc:	a0 df       	rcall	.-192    	; 0x43e <led_all_on_off>
 4fe:	fe cf       	rjmp	.-4      	; 0x4fc <main+0xa>

00000500 <__divmodhi4>:
 500:	97 fb       	bst	r25, 7
 502:	07 2e       	mov	r0, r23
 504:	16 f4       	brtc	.+4      	; 0x50a <__divmodhi4+0xa>
 506:	00 94       	com	r0
 508:	06 d0       	rcall	.+12     	; 0x516 <__divmodhi4_neg1>
 50a:	77 fd       	sbrc	r23, 7
 50c:	08 d0       	rcall	.+16     	; 0x51e <__divmodhi4_neg2>
 50e:	0b d0       	rcall	.+22     	; 0x526 <__udivmodhi4>
 510:	07 fc       	sbrc	r0, 7
 512:	05 d0       	rcall	.+10     	; 0x51e <__divmodhi4_neg2>
 514:	3e f4       	brtc	.+14     	; 0x524 <__divmodhi4_exit>

00000516 <__divmodhi4_neg1>:
 516:	90 95       	com	r25
 518:	81 95       	neg	r24
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	08 95       	ret

0000051e <__divmodhi4_neg2>:
 51e:	70 95       	com	r23
 520:	61 95       	neg	r22
 522:	7f 4f       	sbci	r23, 0xFF	; 255

00000524 <__divmodhi4_exit>:
 524:	08 95       	ret

00000526 <__udivmodhi4>:
 526:	aa 1b       	sub	r26, r26
 528:	bb 1b       	sub	r27, r27
 52a:	51 e1       	ldi	r21, 0x11	; 17
 52c:	07 c0       	rjmp	.+14     	; 0x53c <__udivmodhi4_ep>

0000052e <__udivmodhi4_loop>:
 52e:	aa 1f       	adc	r26, r26
 530:	bb 1f       	adc	r27, r27
 532:	a6 17       	cp	r26, r22
 534:	b7 07       	cpc	r27, r23
 536:	10 f0       	brcs	.+4      	; 0x53c <__udivmodhi4_ep>
 538:	a6 1b       	sub	r26, r22
 53a:	b7 0b       	sbc	r27, r23

0000053c <__udivmodhi4_ep>:
 53c:	88 1f       	adc	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	5a 95       	dec	r21
 542:	a9 f7       	brne	.-22     	; 0x52e <__udivmodhi4_loop>
 544:	80 95       	com	r24
 546:	90 95       	com	r25
 548:	bc 01       	movw	r22, r24
 54a:	cd 01       	movw	r24, r26
 54c:	08 95       	ret

0000054e <_exit>:
 54e:	f8 94       	cli

00000550 <__stop_program>:
 550:	ff cf       	rjmp	.-2      	; 0x550 <__stop_program>
