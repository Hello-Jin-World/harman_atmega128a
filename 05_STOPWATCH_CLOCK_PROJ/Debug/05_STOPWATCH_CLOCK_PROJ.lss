
05_STOPWATCH_CLOCK_PROJ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000624  000006b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000624  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800114  00800114  000006cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d60  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a76  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c0  00000000  00000000  00001fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  0000267c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055a  00000000  00000000  000027a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ae  00000000  00000000  00002d02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	85 c2       	rjmp	.+1290   	; 0x54c <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 32       	cpi	r26, 0x28	; 40
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	88 d2       	rcall	.+1296   	; 0x5d4 <main>
  c4:	ad c2       	rjmp	.+1370   	; 0x620 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_button>:
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	08 95       	ret

000000d0 <get_button>:
  d0:	20 b3       	in	r18, 0x10	; 16
  d2:	42 2f       	mov	r20, r18
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <get_button+0x10>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <get_button+0xc>
  e4:	24 23       	and	r18, r20
  e6:	35 23       	and	r19, r21
  e8:	21 15       	cp	r18, r1
  ea:	31 05       	cpc	r19, r1
  ec:	b9 f0       	breq	.+46     	; 0x11c <get_button+0x4c>
  ee:	fc 01       	movw	r30, r24
  f0:	ec 5e       	subi	r30, 0xEC	; 236
  f2:	fe 4f       	sbci	r31, 0xFE	; 254
  f4:	40 81       	ld	r20, Z
  f6:	41 11       	cpse	r20, r1
  f8:	11 c0       	rjmp	.+34     	; 0x11c <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	3d ee       	ldi	r19, 0xED	; 237
  fe:	42 e0       	ldi	r20, 0x02	; 2
 100:	21 50       	subi	r18, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	40 40       	sbci	r20, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <get_button+0x30>
 108:	00 c0       	rjmp	.+0      	; 0x10a <get_button+0x3a>
 10a:	00 00       	nop
 10c:	fc 01       	movw	r30, r24
 10e:	ec 5e       	subi	r30, 0xEC	; 236
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	20 83       	st	Z, r18
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret
 11c:	fc 01       	movw	r30, r24
 11e:	ec 5e       	subi	r30, 0xEC	; 236
 120:	fe 4f       	sbci	r31, 0xFE	; 254
 122:	40 81       	ld	r20, Z
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	91 f4       	brne	.+36     	; 0x14c <get_button+0x7c>
 128:	23 2b       	or	r18, r19
 12a:	99 f4       	brne	.+38     	; 0x152 <get_button+0x82>
 12c:	fc 01       	movw	r30, r24
 12e:	ec 5e       	subi	r30, 0xEC	; 236
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	10 82       	st	Z, r1
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	9d ee       	ldi	r25, 0xED	; 237
 138:	22 e0       	ldi	r18, 0x02	; 2
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	20 40       	sbci	r18, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <get_button+0x6a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <get_button+0x74>
 144:	00 00       	nop
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret

00000158 <init_fnd>:
	}
}

void init_fnd(void)
{
	FND_DATA_DDR = 0xff; // 출력모드로 설정
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	84 bb       	out	0x14, r24	; 20
	//FND_DIGIT_DDR |= 0xf0; //자리 수 선택 핀 4 5 6 7
	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 |
 15c:	87 b3       	in	r24, 0x17	; 23
 15e:	80 6f       	ori	r24, 0xF0	; 240
 160:	87 bb       	out	0x17, r24	; 23
					 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4;

#if 0 // comm 애노우드
	FND_DATA_PORT = ~0x00; // FND를 all off  ~0x00 = 0xff
#else // comm 캐소우드
	FND_DATA_PORT = 0x00; // FND를 all off
 162:	15 ba       	out	0x15, r1	; 21
 164:	08 95       	ret

00000166 <fnd_display>:
}



void fnd_display(void)
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	2b 97       	sbiw	r28, 0x0b	; 11
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
#if 0 // common anode
						 // 0     1     2     3     4     5     6     7     8     9     .
	uint8_t fnd_font[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xd8, 0x80, 0x90, 0x7f};
#else // common cathod
						  // 0      1      2      3      4      5      6      7      8      9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
 17a:	8b e0       	ldi	r24, 0x0B	; 11
 17c:	e8 e0       	ldi	r30, 0x08	; 8
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	de 01       	movw	r26, r28
 182:	11 96       	adiw	r26, 0x01	; 1
 184:	01 90       	ld	r0, Z+
 186:	0d 92       	st	X+, r0
 188:	8a 95       	dec	r24
 18a:	e1 f7       	brne	.-8      	; 0x184 <fnd_display+0x1e>
#endif

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
 18c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <digit_select.1776>
 190:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <digit_select.1776+0x1>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	91 05       	cpc	r25, r1
 198:	19 f1       	breq	.+70     	; 0x1e0 <fnd_display+0x7a>
 19a:	1c f4       	brge	.+6      	; 0x1a2 <fnd_display+0x3c>
 19c:	89 2b       	or	r24, r25
 19e:	41 f0       	breq	.+16     	; 0x1b0 <fnd_display+0x4a>
 1a0:	94 c0       	rjmp	.+296    	; 0x2ca <fnd_display+0x164>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	91 05       	cpc	r25, r1
 1a6:	d9 f1       	breq	.+118    	; 0x21e <fnd_display+0xb8>
 1a8:	03 97       	sbiw	r24, 0x03	; 3
 1aa:	09 f4       	brne	.+2      	; 0x1ae <fnd_display+0x48>
 1ac:	70 c0       	rjmp	.+224    	; 0x28e <fnd_display+0x128>
 1ae:	8d c0       	rjmp	.+282    	; 0x2ca <fnd_display+0x164>
	{
		case 0 :
#if 0 // common anode
			FND_DIGIT_PORT = 0x80;
#else // common cathod
			FND_DIGIT_PORT = ~0x80;
 1b0:	8f e7       	ldi	r24, 0x7F	; 127
 1b2:	88 bb       	out	0x18, r24	; 24
#endif
			FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
 1b4:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <sec_count>
 1b8:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <sec_count+0x1>
 1bc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sec_count+0x2>
 1c0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sec_count+0x3>
 1c4:	2a e0       	ldi	r18, 0x0A	; 10
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	07 d2       	rcall	.+1038   	; 0x5dc <__udivmodsi4>
 1ce:	e1 e0       	ldi	r30, 0x01	; 1
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ec 0f       	add	r30, r28
 1d4:	fd 1f       	adc	r31, r29
 1d6:	e6 0f       	add	r30, r22
 1d8:	f7 1f       	adc	r31, r23
 1da:	80 81       	ld	r24, Z
 1dc:	85 bb       	out	0x15, r24	; 21
		break;
 1de:	75 c0       	rjmp	.+234    	; 0x2ca <fnd_display+0x164>

		case 1 :
#if 0 // common anode
		FND_DIGIT_PORT = 0x40;
#else // common cathod
		FND_DIGIT_PORT = ~0x40;
 1e0:	8f eb       	ldi	r24, 0xBF	; 191
 1e2:	88 bb       	out	0x18, r24	; 24
#endif
		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
 1e4:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <sec_count>
 1e8:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <sec_count+0x1>
 1ec:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sec_count+0x2>
 1f0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sec_count+0x3>
 1f4:	2a e0       	ldi	r18, 0x0A	; 10
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	ef d1       	rcall	.+990    	; 0x5dc <__udivmodsi4>
 1fe:	ca 01       	movw	r24, r20
 200:	b9 01       	movw	r22, r18
 202:	26 e0       	ldi	r18, 0x06	; 6
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	e8 d1       	rcall	.+976    	; 0x5dc <__udivmodsi4>
 20c:	e1 e0       	ldi	r30, 0x01	; 1
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ec 0f       	add	r30, r28
 212:	fd 1f       	adc	r31, r29
 214:	e6 0f       	add	r30, r22
 216:	f7 1f       	adc	r31, r23
 218:	80 81       	ld	r24, Z
 21a:	85 bb       	out	0x15, r24	; 21
		break;
 21c:	56 c0       	rjmp	.+172    	; 0x2ca <fnd_display+0x164>
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] & fnd_font[10]; // 1단위 분
		else
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10]; // 1단위 분
		break;
#else // common cathod
		FND_DIGIT_PORT = ~0x20;
 21e:	8f ed       	ldi	r24, 0xDF	; 223
 220:	88 bb       	out	0x18, r24	; 24
		if (sec_count % 2 == 1)
 222:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <sec_count>
 226:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <sec_count+0x1>
 22a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sec_count+0x2>
 22e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sec_count+0x3>
 232:	60 ff       	sbrs	r22, 0
 234:	17 c0       	rjmp	.+46     	; 0x264 <fnd_display+0xfe>
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
 236:	2c e3       	ldi	r18, 0x3C	; 60
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	ce d1       	rcall	.+924    	; 0x5dc <__udivmodsi4>
 240:	ca 01       	movw	r24, r20
 242:	b9 01       	movw	r22, r18
 244:	2a e0       	ldi	r18, 0x0A	; 10
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	c7 d1       	rcall	.+910    	; 0x5dc <__udivmodsi4>
 24e:	e1 e0       	ldi	r30, 0x01	; 1
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	ec 0f       	add	r30, r28
 254:	fd 1f       	adc	r31, r29
 256:	e6 0f       	add	r30, r22
 258:	f7 1f       	adc	r31, r23
 25a:	90 81       	ld	r25, Z
 25c:	8b 85       	ldd	r24, Y+11	; 0x0b
 25e:	89 2b       	or	r24, r25
 260:	85 bb       	out	0x15, r24	; 21
 262:	33 c0       	rjmp	.+102    	; 0x2ca <fnd_display+0x164>
		else
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10]; // 1단위 분
 264:	2c e3       	ldi	r18, 0x3C	; 60
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	b7 d1       	rcall	.+878    	; 0x5dc <__udivmodsi4>
 26e:	ca 01       	movw	r24, r20
 270:	b9 01       	movw	r22, r18
 272:	2a e0       	ldi	r18, 0x0A	; 10
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	b0 d1       	rcall	.+864    	; 0x5dc <__udivmodsi4>
 27c:	e1 e0       	ldi	r30, 0x01	; 1
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	ec 0f       	add	r30, r28
 282:	fd 1f       	adc	r31, r29
 284:	e6 0f       	add	r30, r22
 286:	f7 1f       	adc	r31, r23
 288:	80 81       	ld	r24, Z
 28a:	85 bb       	out	0x15, r24	; 21
 28c:	1e c0       	rjmp	.+60     	; 0x2ca <fnd_display+0x164>
 28e:	8f ee       	ldi	r24, 0xEF	; 239

		case 3 :
#if 0 // common anode
		FND_DIGIT_PORT = 0x10;
#else // common cathod
		FND_DIGIT_PORT = ~0x10;
 290:	88 bb       	out	0x18, r24	; 24
 292:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <sec_count>
#endif
		FND_DATA_PORT = fnd_font[sec_count / 600 % 6]; // 10단위 분
 296:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <sec_count+0x1>
 29a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <sec_count+0x2>
 29e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <sec_count+0x3>
 2a2:	28 e5       	ldi	r18, 0x58	; 88
 2a4:	32 e0       	ldi	r19, 0x02	; 2
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	98 d1       	rcall	.+816    	; 0x5dc <__udivmodsi4>
 2ac:	ca 01       	movw	r24, r20
 2ae:	b9 01       	movw	r22, r18
 2b0:	26 e0       	ldi	r18, 0x06	; 6
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	91 d1       	rcall	.+802    	; 0x5dc <__udivmodsi4>
 2ba:	e1 e0       	ldi	r30, 0x01	; 1
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ec 0f       	add	r30, r28
 2c0:	fd 1f       	adc	r31, r29
 2c2:	e6 0f       	add	r30, r22
 2c4:	f7 1f       	adc	r31, r23
 2c6:	80 81       	ld	r24, Z
 2c8:	85 bb       	out	0x15, r24	; 21
 2ca:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <digit_select.1776>
		break;
	}
	digit_select++;
 2ce:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <digit_select.1776+0x1>
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	83 70       	andi	r24, 0x03	; 3
	digit_select %= 4; //다음 표시할 자리수 선택
 2d6:	90 78       	andi	r25, 0x80	; 128
 2d8:	99 23       	and	r25, r25
 2da:	24 f4       	brge	.+8      	; 0x2e4 <fnd_display+0x17e>
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	8c 6f       	ori	r24, 0xFC	; 252
 2e0:	9f 6f       	ori	r25, 0xFF	; 255
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <digit_select.1776+0x1>
 2e8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <digit_select.1776>
 2ec:	2b 96       	adiw	r28, 0x0b	; 11
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <display_clock>:
 2fe:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <fnd_refreshrate>
	}
}

void display_clock(void)
{
	if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
 302:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <fnd_refreshrate+0x1>
 306:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <fnd_refreshrate+0x2>
 30a:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <fnd_refreshrate+0x3>
 30e:	02 97       	sbiw	r24, 0x02	; 2
 310:	a1 05       	cpc	r26, r1
 312:	b1 05       	cpc	r27, r1
 314:	48 f0       	brcs	.+18     	; 0x328 <display_clock+0x2a>
	{
		fnd_refreshrate = 0;
 316:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <fnd_refreshrate>
 31a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <fnd_refreshrate+0x1>
 31e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <fnd_refreshrate+0x2>
 322:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <fnd_refreshrate+0x3>
		fnd_display();
 326:	1f cf       	rjmp	.-450    	; 0x166 <fnd_display>
 328:	08 95       	ret

0000032a <stopwatch>:
	}
}

void stopwatch(void)
{
	if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
 32a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <fnd_refreshrate>
 32e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <fnd_refreshrate+0x1>
 332:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <fnd_refreshrate+0x2>
 336:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <fnd_refreshrate+0x3>
 33a:	02 97       	sbiw	r24, 0x02	; 2
 33c:	a1 05       	cpc	r26, r1
 33e:	b1 05       	cpc	r27, r1
 340:	48 f0       	brcs	.+18     	; 0x354 <stopwatch+0x2a>
	{
		fnd_refreshrate = 0;
 342:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <fnd_refreshrate>
 346:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <fnd_refreshrate+0x1>
 34a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <fnd_refreshrate+0x2>
 34e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <fnd_refreshrate+0x3>
		fnd_display();
 352:	09 df       	rcall	.-494    	; 0x166 <fnd_display>
	}
	if (msec_count >= 16)
 354:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <msec_count>
 358:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <msec_count+0x1>
 35c:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <msec_count+0x2>
 360:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <msec_count+0x3>
 364:	40 97       	sbiw	r24, 0x10	; 16
 366:	a1 05       	cpc	r26, r1
 368:	b1 05       	cpc	r27, r1
 36a:	d8 f0       	brcs	.+54     	; 0x3a2 <stopwatch+0x78>
	{
		msec_count = 0;
 36c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <msec_count>
 370:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <msec_count+0x1>
 374:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <msec_count+0x2>
 378:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <msec_count+0x3>
		sec_count++;
 37c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_count>
 380:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_count+0x1>
 384:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <sec_count+0x2>
 388:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <sec_count+0x3>
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	a1 1d       	adc	r26, r1
 390:	b1 1d       	adc	r27, r1
 392:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <sec_count>
 396:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <sec_count+0x1>
 39a:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <sec_count+0x2>
 39e:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <sec_count+0x3>
 3a2:	08 95       	ret

000003a4 <pause_stopwatch>:
	}
}

void pause_stopwatch(void)
{
	if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
 3a4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <fnd_refreshrate>
 3a8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <fnd_refreshrate+0x1>
 3ac:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <fnd_refreshrate+0x2>
 3b0:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <fnd_refreshrate+0x3>
 3b4:	02 97       	sbiw	r24, 0x02	; 2
 3b6:	a1 05       	cpc	r26, r1
 3b8:	b1 05       	cpc	r27, r1
 3ba:	48 f0       	brcs	.+18     	; 0x3ce <pause_stopwatch+0x2a>
	{
		fnd_refreshrate = 0;
 3bc:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <fnd_refreshrate>
 3c0:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <fnd_refreshrate+0x1>
 3c4:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <fnd_refreshrate+0x2>
 3c8:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <fnd_refreshrate+0x3>
		fnd_display();
 3cc:	cc de       	rcall	.-616    	; 0x166 <fnd_display>
	}
	temp1 = sec_count;	
 3ce:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_count>
 3d2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_count+0x1>
 3d6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <temp1+0x1>
 3da:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <temp1>
 3de:	08 95       	ret

000003e0 <clear_stopwatch>:
}

void clear_stopwatch(void)
{
	sec_count = 0;
 3e0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <sec_count>
 3e4:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <sec_count+0x1>
 3e8:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <sec_count+0x2>
 3ec:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <sec_count+0x3>
	if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
 3f0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <fnd_refreshrate>
 3f4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <fnd_refreshrate+0x1>
 3f8:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <fnd_refreshrate+0x2>
 3fc:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <fnd_refreshrate+0x3>
 400:	02 97       	sbiw	r24, 0x02	; 2
 402:	a1 05       	cpc	r26, r1
 404:	b1 05       	cpc	r27, r1
 406:	48 f0       	brcs	.+18     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	{
		fnd_refreshrate = 0;
 408:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <fnd_refreshrate>
 40c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <fnd_refreshrate+0x1>
 410:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <fnd_refreshrate+0x2>
 414:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <fnd_refreshrate+0x3>
		fnd_display();
 418:	a6 ce       	rjmp	.-692    	; 0x166 <fnd_display>
 41a:	08 95       	ret

0000041c <fnd_main>:

int fnd_main(void)
{
	int state = 0; // 모드 선택 변수
	
	DDRA = 0xff;
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	8a bb       	out	0x1a, r24	; 26
	int button0_state = 0; // 버튼0번 상태 변수
	int button1_state = 0; // 버튼1번 상태 변수
	int reset_active = 0; // 리셋이 가능한지 알려주는 토글
	int restart_stopwatch = 0; // 재시작이 가능한지 알려주는 토글
	
	init_fnd(); // fnd 초기화
 420:	9b de       	rcall	.-714    	; 0x158 <init_fnd>
	init_button(); // button 초기화
 422:	52 de       	rcall	.-860    	; 0xc8 <init_button>
 424:	a1 2c       	mov	r10, r1
	
	DDRA = 0xff;
	int button0_state = 0; // 버튼0번 상태 변수
	int button1_state = 0; // 버튼1번 상태 변수
	int reset_active = 0; // 리셋이 가능한지 알려주는 토글
	int restart_stopwatch = 0; // 재시작이 가능한지 알려주는 토글
 426:	b1 2c       	mov	r11, r1
 428:	c1 2c       	mov	r12, r1
	int state = 0; // 모드 선택 변수
	
	DDRA = 0xff;
	int button0_state = 0; // 버튼0번 상태 변수
	int button1_state = 0; // 버튼1번 상태 변수
	int reset_active = 0; // 리셋이 가능한지 알려주는 토글
 42a:	d1 2c       	mov	r13, r1
 42c:	c0 e0       	ldi	r28, 0x00	; 0
{
	int state = 0; // 모드 선택 변수
	
	DDRA = 0xff;
	int button0_state = 0; // 버튼0번 상태 변수
	int button1_state = 0; // 버튼1번 상태 변수
 42e:	d0 e0       	ldi	r29, 0x00	; 0
 430:	e1 2c       	mov	r14, r1
int fnd_main(void)
{
	int state = 0; // 모드 선택 변수
	
	DDRA = 0xff;
	int button0_state = 0; // 버튼0번 상태 변수
 432:	f1 2c       	mov	r15, r1
 434:	00 e0       	ldi	r16, 0x00	; 0
	clear_stopwatch // 3 스톱워치 리셋
};

int fnd_main(void)
{
	int state = 0; // 모드 선택 변수
 436:	10 e0       	ldi	r17, 0x00	; 0
 438:	64 e0       	ldi	r22, 0x04	; 4
	init_fnd(); // fnd 초기화
	init_button(); // button 초기화
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN))
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	47 de       	rcall	.-882    	; 0xd0 <get_button>
 442:	89 2b       	or	r24, r25
 444:	c9 f0       	breq	.+50     	; 0x478 <fnd_main+0x5c>
 446:	81 e0       	ldi	r24, 0x01	; 1
		{
			button0_state = !button0_state;
 448:	e1 14       	cp	r14, r1
 44a:	f1 04       	cpc	r15, r1
 44c:	09 f0       	breq	.+2      	; 0x450 <fnd_main+0x34>
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	ef 28       	or	r14, r15
			
			if (button0_state) // 버튼 0을 처음 누르면 지나간 시간을 임시 변수에 저장하고 시간 리셋 후 스톱워치로 진입
 454:	71 f4       	brne	.+28     	; 0x472 <fnd_main+0x56>
 456:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <sec_count>
			{
				button1_state = 0;
				sec_count = 0;
 45a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <sec_count+0x1>
 45e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <sec_count+0x2>
 462:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <sec_count+0x3>
 466:	7c 01       	movw	r14, r24
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN))
		{
			button0_state = !button0_state;
 468:	c0 e0       	ldi	r28, 0x00	; 0
			
			if (button0_state) // 버튼 0을 처음 누르면 지나간 시간을 임시 변수에 저장하고 시간 리셋 후 스톱워치로 진입
			{
				button1_state = 0;
 46a:	d0 e0       	ldi	r29, 0x00	; 0
 46c:	01 e0       	ldi	r16, 0x01	; 1
				sec_count = 0;
				state = 1;
 46e:	10 e0       	ldi	r17, 0x00	; 0
 470:	03 c0       	rjmp	.+6      	; 0x478 <fnd_main+0x5c>
 472:	7c 01       	movw	r14, r24
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN))
		{
			button0_state = !button0_state;
 474:	00 e0       	ldi	r16, 0x00	; 0
				sec_count = 0;
				state = 1;
			}
			else // 다시 버튼0을 누르면 임시 변수에 저장된 시간을 가져오고 시계로 진입
			{
				state = 0;
 476:	10 e0       	ldi	r17, 0x00	; 0
 478:	65 e0       	ldi	r22, 0x05	; 5
			}
		}
		
		if (get_button(BUTTON1, BUTTON1PIN))
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	27 de       	rcall	.-946    	; 0xd0 <get_button>
 482:	89 2b       	or	r24, r25
 484:	19 f1       	breq	.+70     	; 0x4cc <fnd_main+0xb0>
 486:	81 e0       	ldi	r24, 0x01	; 1
		{
			button1_state = !button1_state;
 488:	20 97       	sbiw	r28, 0x00	; 0
 48a:	09 f0       	breq	.+2      	; 0x48e <fnd_main+0x72>
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	20 97       	sbiw	r28, 0x00	; 0
			
			if (button1_state) // 버튼 1을 처음 누르면 일시정지 모드로 진입하고 리셋을 할 수 있도록 토글 활성화
 492:	29 f4       	brne	.+10     	; 0x49e <fnd_main+0x82>
 494:	cc 24       	eor	r12, r12
			{
				state = 2;
				reset_active = 1;
 496:	c3 94       	inc	r12
 498:	d1 2c       	mov	r13, r1
 49a:	02 e0       	ldi	r16, 0x02	; 2
		{
			button1_state = !button1_state;
			
			if (button1_state) // 버튼 1을 처음 누르면 일시정지 모드로 진입하고 리셋을 할 수 있도록 토글 활성화
			{
				state = 2;
 49c:	10 e0       	ldi	r17, 0x00	; 0
 49e:	cd 2b       	or	r28, r29
				reset_active = 1;
			}
			if (button1_state == 0 || restart_stopwatch == 1) // 다음 버튼 1을 누르면 스톱워치 재시작 후 리셋 토글 비활성화.
 4a0:	31 f4       	brne	.+12     	; 0x4ae <fnd_main+0x92>
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	a2 16       	cp	r10, r18
 4a6:	b1 04       	cpc	r11, r1
 4a8:	51 f0       	breq	.+20     	; 0x4be <fnd_main+0xa2>
 4aa:	ec 01       	movw	r28, r24
			}
		}
		
		if (get_button(BUTTON1, BUTTON1PIN))
		{
			button1_state = !button1_state;
 4ac:	0f c0       	rjmp	.+30     	; 0x4cc <fnd_main+0xb0>
 4ae:	ec 01       	movw	r28, r24
 4b0:	a1 2c       	mov	r10, r1
			}
			if (button1_state == 0 || restart_stopwatch == 1) // 다음 버튼 1을 누르면 스톱워치 재시작 후 리셋 토글 비활성화.
			{
				state = 1;
				reset_active = 0;
				restart_stopwatch = 0;
 4b2:	b1 2c       	mov	r11, r1
 4b4:	c1 2c       	mov	r12, r1
				reset_active = 1;
			}
			if (button1_state == 0 || restart_stopwatch == 1) // 다음 버튼 1을 누르면 스톱워치 재시작 후 리셋 토글 비활성화.
			{
				state = 1;
				reset_active = 0;
 4b6:	d1 2c       	mov	r13, r1
 4b8:	01 e0       	ldi	r16, 0x01	; 1
				state = 2;
				reset_active = 1;
			}
			if (button1_state == 0 || restart_stopwatch == 1) // 다음 버튼 1을 누르면 스톱워치 재시작 후 리셋 토글 비활성화.
			{
				state = 1;
 4ba:	10 e0       	ldi	r17, 0x00	; 0
 4bc:	07 c0       	rjmp	.+14     	; 0x4cc <fnd_main+0xb0>
 4be:	ec 01       	movw	r28, r24
			}
		}
		
		if (get_button(BUTTON1, BUTTON1PIN))
		{
			button1_state = !button1_state;
 4c0:	a1 2c       	mov	r10, r1
			}
			if (button1_state == 0 || restart_stopwatch == 1) // 다음 버튼 1을 누르면 스톱워치 재시작 후 리셋 토글 비활성화.
			{
				state = 1;
				reset_active = 0;
				restart_stopwatch = 0;
 4c2:	b1 2c       	mov	r11, r1
 4c4:	c1 2c       	mov	r12, r1
				reset_active = 1;
			}
			if (button1_state == 0 || restart_stopwatch == 1) // 다음 버튼 1을 누르면 스톱워치 재시작 후 리셋 토글 비활성화.
			{
				state = 1;
				reset_active = 0;
 4c6:	d1 2c       	mov	r13, r1
 4c8:	01 e0       	ldi	r16, 0x01	; 1
				state = 2;
				reset_active = 1;
			}
			if (button1_state == 0 || restart_stopwatch == 1) // 다음 버튼 1을 누르면 스톱워치 재시작 후 리셋 토글 비활성화.
			{
				state = 1;
 4ca:	10 e0       	ldi	r17, 0x00	; 0
 4cc:	66 e0       	ldi	r22, 0x06	; 6
				reset_active = 0;
				restart_stopwatch = 0;
			}
		}
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2를 누르면 리셋 토글이 활성화가 되었는지 확인 후 리셋
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	fd dd       	rcall	.-1030   	; 0xd0 <get_button>
 4d6:	89 2b       	or	r24, r25
 4d8:	39 f0       	breq	.+14     	; 0x4e8 <fnd_main+0xcc>
		{
			if (reset_active)
 4da:	c1 14       	cp	r12, r1
 4dc:	d1 04       	cpc	r13, r1
 4de:	21 f0       	breq	.+8      	; 0x4e8 <fnd_main+0xcc>
			{
				clear_stopwatch();
 4e0:	7f df       	rcall	.-258    	; 0x3e0 <clear_stopwatch>
 4e2:	aa 24       	eor	r10, r10
				restart_stopwatch = 1; // 재시작이 가능하도록 재시작 토글 활성화
 4e4:	a3 94       	inc	r10
 4e6:	b1 2c       	mov	r11, r1
 4e8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <msec_count>
			}
		}
		
		if (msec_count >= 1000)
 4ec:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <msec_count+0x1>
 4f0:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <msec_count+0x2>
 4f4:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <msec_count+0x3>
 4f8:	88 3e       	cpi	r24, 0xE8	; 232
 4fa:	93 40       	sbci	r25, 0x03	; 3
 4fc:	a1 05       	cpc	r26, r1
 4fe:	b1 05       	cpc	r27, r1
 500:	d8 f0       	brcs	.+54     	; 0x538 <fnd_main+0x11c>
 502:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <msec_count>
		{
			msec_count = 0;
 506:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <msec_count+0x1>
 50a:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <msec_count+0x2>
 50e:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <msec_count+0x3>
 512:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <sec_count>
			sec_count++;
 516:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <sec_count+0x1>
 51a:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <sec_count+0x2>
 51e:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <sec_count+0x3>
 522:	01 96       	adiw	r24, 0x01	; 1
 524:	a1 1d       	adc	r26, r1
 526:	b1 1d       	adc	r27, r1
 528:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <sec_count>
 52c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <sec_count+0x1>
 530:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <sec_count+0x2>
 534:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <sec_count+0x3>
 538:	f8 01       	movw	r30, r16
		}
		
		fp[state]();
 53a:	ee 0f       	add	r30, r30
 53c:	ff 1f       	adc	r31, r31
 53e:	e0 50       	subi	r30, 0x00	; 0
 540:	ff 4f       	sbci	r31, 0xFF	; 255
 542:	01 90       	ld	r0, Z+
 544:	f0 81       	ld	r31, Z
 546:	e0 2d       	mov	r30, r0
 548:	09 95       	icall
 54a:	76 cf       	rjmp	.-276    	; 0x438 <fnd_main+0x1c>

0000054c <__vector_16>:
extern int fnd_main(void);

volatile uint32_t msec_count = 0;
volatile uint32_t fnd_refreshrate = 0;
ISR(TIMER0_OVF_vect) // interrupt service routine :routine은 interrupt 서비스 함수
{
 54c:	1f 92       	push	r1
 54e:	0f 92       	push	r0
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	0f 92       	push	r0
 554:	11 24       	eor	r1, r1
 556:	8f 93       	push	r24
 558:	9f 93       	push	r25
 55a:	af 93       	push	r26
 55c:	bf 93       	push	r27
	TCNT0 = 6; // 6 ~ 256 : 250개 (1ms) 그래서 TCNT0를 6으로 설정
 55e:	86 e0       	ldi	r24, 0x06	; 6
 560:	82 bf       	out	0x32, r24	; 50
	msec_count++; // 1ms마다 msec_count가 1씩 증가
 562:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <msec_count>
 566:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <msec_count+0x1>
 56a:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <msec_count+0x2>
 56e:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <msec_count+0x3>
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	a1 1d       	adc	r26, r1
 576:	b1 1d       	adc	r27, r1
 578:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <msec_count>
 57c:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <msec_count+0x1>
 580:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <msec_count+0x2>
 584:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <msec_count+0x3>
	fnd_refreshrate++;
 588:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <fnd_refreshrate>
 58c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <fnd_refreshrate+0x1>
 590:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <fnd_refreshrate+0x2>
 594:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <fnd_refreshrate+0x3>
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	a1 1d       	adc	r26, r1
 59c:	b1 1d       	adc	r27, r1
 59e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <fnd_refreshrate>
 5a2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <fnd_refreshrate+0x1>
 5a6:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <fnd_refreshrate+0x2>
 5aa:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <fnd_refreshrate+0x3>
}
 5ae:	bf 91       	pop	r27
 5b0:	af 91       	pop	r26
 5b2:	9f 91       	pop	r25
 5b4:	8f 91       	pop	r24
 5b6:	0f 90       	pop	r0
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	0f 90       	pop	r0
 5bc:	1f 90       	pop	r1
 5be:	18 95       	reti

000005c0 <init_timer0>:
	}
}

void init_timer0()
{
	TCNT0 = 6;
 5c0:	86 e0       	ldi	r24, 0x06	; 6
 5c2:	82 bf       	out	0x32, r24	; 50

	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
 5c4:	83 b7       	in	r24, 0x33	; 51
 5c6:	84 60       	ori	r24, 0x04	; 4
 5c8:	83 bf       	out	0x33, r24	; 51

	TIMSK |= 1 << TOIE0;
 5ca:	87 b7       	in	r24, 0x37	; 55
 5cc:	81 60       	ori	r24, 0x01	; 1
 5ce:	87 bf       	out	0x37, r24	; 55

	sei();
 5d0:	78 94       	sei
 5d2:	08 95       	ret

000005d4 <main>:
	fnd_refreshrate++;
}

int main(void)
{
	init_timer0();
 5d4:	f5 df       	rcall	.-22     	; 0x5c0 <init_timer0>
	init_fnd();
 5d6:	c0 dd       	rcall	.-1152   	; 0x158 <init_fnd>
	
	fnd_main();
 5d8:	21 df       	rcall	.-446    	; 0x41c <fnd_main>
 5da:	ff cf       	rjmp	.-2      	; 0x5da <main+0x6>

000005dc <__udivmodsi4>:
 5dc:	a1 e2       	ldi	r26, 0x21	; 33
 5de:	1a 2e       	mov	r1, r26
 5e0:	aa 1b       	sub	r26, r26
 5e2:	bb 1b       	sub	r27, r27
 5e4:	fd 01       	movw	r30, r26
 5e6:	0d c0       	rjmp	.+26     	; 0x602 <__udivmodsi4_ep>

000005e8 <__udivmodsi4_loop>:
 5e8:	aa 1f       	adc	r26, r26
 5ea:	bb 1f       	adc	r27, r27
 5ec:	ee 1f       	adc	r30, r30
 5ee:	ff 1f       	adc	r31, r31
 5f0:	a2 17       	cp	r26, r18
 5f2:	b3 07       	cpc	r27, r19
 5f4:	e4 07       	cpc	r30, r20
 5f6:	f5 07       	cpc	r31, r21
 5f8:	20 f0       	brcs	.+8      	; 0x602 <__udivmodsi4_ep>
 5fa:	a2 1b       	sub	r26, r18
 5fc:	b3 0b       	sbc	r27, r19
 5fe:	e4 0b       	sbc	r30, r20
 600:	f5 0b       	sbc	r31, r21

00000602 <__udivmodsi4_ep>:
 602:	66 1f       	adc	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	88 1f       	adc	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	1a 94       	dec	r1
 60c:	69 f7       	brne	.-38     	; 0x5e8 <__udivmodsi4_loop>
 60e:	60 95       	com	r22
 610:	70 95       	com	r23
 612:	80 95       	com	r24
 614:	90 95       	com	r25
 616:	9b 01       	movw	r18, r22
 618:	ac 01       	movw	r20, r24
 61a:	bd 01       	movw	r22, r26
 61c:	cf 01       	movw	r24, r30
 61e:	08 95       	ret

00000620 <_exit>:
 620:	f8 94       	cli

00000622 <__stop_program>:
 622:	ff cf       	rjmp	.-2      	; 0x622 <__stop_program>
