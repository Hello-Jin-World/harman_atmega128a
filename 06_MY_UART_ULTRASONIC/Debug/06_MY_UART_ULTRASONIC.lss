
06_MY_UART_ULTRASONIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000093a  000009ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000093a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000033a  0080011a  0080011a  000009e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001267  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cce  00000000  00000000  00001db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a59  00000000  00000000  00002a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000034e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000650  00000000  00000000  00003748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000575  00000000  00000000  00003d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000430d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	d3 c1       	rjmp	.+934    	; 0x3bc <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c5 c0       	rjmp	.+394    	; 0x1cc <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	27 c1       	rjmp	.+590    	; 0x298 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 31       	cpi	r26, 0x1A	; 26
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	24 e0       	ldi	r18, 0x04	; 4
  b4:	aa e1       	ldi	r26, 0x1A	; 26
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 35       	cpi	r26, 0x54	; 84
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	da d0       	rcall	.+436    	; 0x278 <main>
  c4:	38 c4       	rjmp	.+2160   	; 0x936 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_fnd>:
				restart_stopwatch = 1; // 재시작이 가능하도록 재시작 토글 활성화
			}
		}
		
		fp[state]();
	}
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 bb       	out	0x14, r24	; 20
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	80 6f       	ori	r24, 0xF0	; 240
  d0:	87 bb       	out	0x17, r24	; 23
  d2:	15 ba       	out	0x15, r1	; 21
  d4:	08 95       	ret

000000d6 <fnd_display_us>:
	digit_select++;
	digit_select %= 4; //다음 표시할 자리수 선택
}

void fnd_display_us(int *dis_cm)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	2b 97       	sbiw	r28, 0x0b	; 11
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
  ea:	ac 01       	movw	r20, r24
	// 0      1      2      3      4      5      6      7      8      9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
  ec:	9b e0       	ldi	r25, 0x0B	; 11
  ee:	ee e0       	ldi	r30, 0x0E	; 14
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	de 01       	movw	r26, r28
  f4:	11 96       	adiw	r26, 0x01	; 1
  f6:	01 90       	ld	r0, Z+
  f8:	0d 92       	st	X+, r0
  fa:	9a 95       	dec	r25
  fc:	e1 f7       	brne	.-8      	; 0xf6 <fnd_display_us+0x20>


	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
  fe:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
 102:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
 106:	21 30       	cpi	r18, 0x01	; 1
 108:	31 05       	cpc	r19, r1
 10a:	01 f1       	breq	.+64     	; 0x14c <fnd_display_us+0x76>
 10c:	1c f4       	brge	.+6      	; 0x114 <fnd_display_us+0x3e>
 10e:	23 2b       	or	r18, r19
 110:	41 f0       	breq	.+16     	; 0x122 <fnd_display_us+0x4c>
 112:	42 c0       	rjmp	.+132    	; 0x198 <fnd_display_us+0xc2>
 114:	22 30       	cpi	r18, 0x02	; 2
 116:	31 05       	cpc	r19, r1
 118:	51 f1       	breq	.+84     	; 0x16e <fnd_display_us+0x98>
 11a:	23 30       	cpi	r18, 0x03	; 3
 11c:	31 05       	cpc	r19, r1
 11e:	c1 f1       	breq	.+112    	; 0x190 <fnd_display_us+0xba>
 120:	3b c0       	rjmp	.+118    	; 0x198 <fnd_display_us+0xc2>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
 122:	8f e7       	ldi	r24, 0x7F	; 127
 124:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[*dis_cm /58 % 10];   // 한자리수
 126:	fa 01       	movw	r30, r20
 128:	80 81       	ld	r24, Z
 12a:	91 81       	ldd	r25, Z+1	; 0x01
 12c:	6a e3       	ldi	r22, 0x3A	; 58
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	db d3       	rcall	.+1974   	; 0x8e8 <__divmodhi4>
 132:	cb 01       	movw	r24, r22
 134:	6a e0       	ldi	r22, 0x0A	; 10
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	d7 d3       	rcall	.+1966   	; 0x8e8 <__divmodhi4>
 13a:	e1 e0       	ldi	r30, 0x01	; 1
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	ec 0f       	add	r30, r28
 140:	fd 1f       	adc	r31, r29
 142:	e8 0f       	add	r30, r24
 144:	f9 1f       	adc	r31, r25
 146:	80 81       	ld	r24, Z
 148:	85 bb       	out	0x15, r24	; 21
		break;
 14a:	26 c0       	rjmp	.+76     	; 0x198 <fnd_display_us+0xc2>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
 14c:	8f eb       	ldi	r24, 0xBF	; 191
 14e:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[*dis_cm /58 / 10]; // 두자리수
 150:	fa 01       	movw	r30, r20
 152:	80 81       	ld	r24, Z
 154:	91 81       	ldd	r25, Z+1	; 0x01
 156:	64 e4       	ldi	r22, 0x44	; 68
 158:	72 e0       	ldi	r23, 0x02	; 2
 15a:	c6 d3       	rcall	.+1932   	; 0x8e8 <__divmodhi4>
 15c:	e1 e0       	ldi	r30, 0x01	; 1
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	ec 0f       	add	r30, r28
 162:	fd 1f       	adc	r31, r29
 164:	e6 0f       	add	r30, r22
 166:	f7 1f       	adc	r31, r23
 168:	80 81       	ld	r24, Z
 16a:	85 bb       	out	0x15, r24	; 21
		break;
 16c:	15 c0       	rjmp	.+42     	; 0x198 <fnd_display_us+0xc2>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
 16e:	8f ed       	ldi	r24, 0xDF	; 223
 170:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[*dis_cm /58 / 100]; // 세자리수
 172:	fa 01       	movw	r30, r20
 174:	80 81       	ld	r24, Z
 176:	91 81       	ldd	r25, Z+1	; 0x01
 178:	68 ea       	ldi	r22, 0xA8	; 168
 17a:	76 e1       	ldi	r23, 0x16	; 22
 17c:	b5 d3       	rcall	.+1898   	; 0x8e8 <__divmodhi4>
 17e:	e1 e0       	ldi	r30, 0x01	; 1
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ec 0f       	add	r30, r28
 184:	fd 1f       	adc	r31, r29
 186:	e6 0f       	add	r30, r22
 188:	f7 1f       	adc	r31, r23
 18a:	80 81       	ld	r24, Z
 18c:	85 bb       	out	0x15, r24	; 21
		break;
 18e:	04 c0       	rjmp	.+8      	; 0x198 <fnd_display_us+0xc2>

		case 3 :
		FND_DIGIT_PORT = ~0x10;
 190:	8f ee       	ldi	r24, 0xEF	; 239
 192:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[*dis_cm /58 / 1000]; // 네자리수
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
 198:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 19c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 1a0:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
 1a2:	83 70       	andi	r24, 0x03	; 3
 1a4:	90 78       	andi	r25, 0x80	; 128
 1a6:	99 23       	and	r25, r25
 1a8:	24 f4       	brge	.+8      	; 0x1b2 <fnd_display_us+0xdc>
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	8c 6f       	ori	r24, 0xFC	; 252
 1ae:	9f 6f       	ori	r25, 0xFF	; 255
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 1b6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
}
 1ba:	2b 96       	adiw	r28, 0x0b	; 11
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
	TCNT0=6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
 1de:	86 e0       	ldi	r24, 0x06	; 6
 1e0:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
 1e2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <msec_count>
 1e6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <msec_count+0x1>
 1ea:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <msec_count+0x2>
 1ee:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <msec_count+0x3>
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	a1 1d       	adc	r26, r1
 1f6:	b1 1d       	adc	r27, r1
 1f8:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <msec_count>
 1fc:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <msec_count+0x1>
 200:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <msec_count+0x2>
 204:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <msec_count+0x3>
	fnd_dis++;   // fnd 잔상효과 유지 하기 위한 timer 2ms  	
 208:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <fnd_dis>
 20c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <fnd_dis+0x1>
 210:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <fnd_dis+0x2>
 214:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <fnd_dis+0x3>
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	a1 1d       	adc	r26, r1
 21c:	b1 1d       	adc	r27, r1
 21e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <fnd_dis>
 222:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <fnd_dis+0x1>
 226:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <fnd_dis+0x2>
 22a:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <fnd_dis+0x3>
	ultrasonic_check_timer++;
 22e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <ultrasonic_check_timer>
 232:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <ultrasonic_check_timer+0x1>
 236:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <ultrasonic_check_timer+0x2>
 23a:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <ultrasonic_check_timer+0x3>
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	a1 1d       	adc	r26, r1
 242:	b1 1d       	adc	r27, r1
 244:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <ultrasonic_check_timer>
 248:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <ultrasonic_check_timer+0x1>
 24c:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <ultrasonic_check_timer+0x2>
 250:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <ultrasonic_check_timer+0x3>
}
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <init_timer0>:
    }
}

void init_timer0()
{
	TCNT0 = 6;  
 266:	86 e0       	ldi	r24, 0x06	; 6
 268:	82 bf       	out	0x32, r24	; 50

	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;	
 26a:	83 b7       	in	r24, 0x33	; 51
 26c:	84 60       	ori	r24, 0x04	; 4
 26e:	83 bf       	out	0x33, r24	; 51

	TIMSK |= 1 << TOIE0;  // TIMSK |= 0x01;
 270:	87 b7       	in	r24, 0x37	; 55
 272:	81 60       	ori	r24, 0x01	; 1
 274:	87 bf       	out	0x37, r24	; 55
 276:	08 95       	ret

00000278 <main>:
	ultrasonic_check_timer++;
}

int main(void)
{
	init_fnd();
 278:	27 df       	rcall	.-434    	; 0xc8 <init_fnd>
    init_timer0();
 27a:	f5 df       	rcall	.-22     	; 0x266 <init_timer0>
	init_uart0();
 27c:	8b d0       	rcall	.+278    	; 0x394 <init_uart0>
 27e:	e2 d0       	rcall	.+452    	; 0x444 <init_ultrasonic>
	init_ultrasonic();
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	91 e0       	ldi	r25, 0x01	; 1
	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
 284:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <__iob+0x3>
 288:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <__iob+0x2>
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	8a bb       	out	0x1a, r24	; 26
	                 				 
	DDRA=0xff;   // led를 출력 모드로 
 290:	1b ba       	out	0x1b, r1	; 27
	PORTA = 0x00;
 292:	78 94       	sei
    sei();     // 전역적으로 interrupt 허용
 294:	fc d0       	rcall	.+504    	; 0x48e <ultrasonic_led>
	
    while (1) 
    {
		ultrasonic_led();
 296:	fe cf       	rjmp	.-4      	; 0x294 <main+0x1c>

00000298 <__vector_18>:
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
	shift_left_keep_ledon, // 7
	shift_right_keep_ledon // 8
};

ISR(USART0_RX_vect)
{
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	0b b6       	in	r0, 0x3b	; 59
 2a4:	0f 92       	push	r0
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	1f 92       	push	r1
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
 2c8:	8c b1       	in	r24, 0x0c	; 12
 2ca:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
 2cc:	89 81       	ldd	r24, Y+1	; 0x01
 2ce:	8d 30       	cpi	r24, 0x0D	; 13
 2d0:	19 f0       	breq	.+6      	; 0x2d8 <__vector_18+0x40>
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	8a 30       	cpi	r24, 0x0A	; 10
 2d6:	61 f5       	brne	.+88     	; 0x330 <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
 2d8:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <rear>
 2dc:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <rear+0x1>
 2e0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <i.1892>
 2e4:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <i.1892+0x1>
 2e8:	40 e5       	ldi	r20, 0x50	; 80
 2ea:	42 9f       	mul	r20, r18
 2ec:	f0 01       	movw	r30, r0
 2ee:	43 9f       	mul	r20, r19
 2f0:	f0 0d       	add	r31, r0
 2f2:	11 24       	eor	r1, r1
 2f4:	e2 5d       	subi	r30, 0xD2	; 210
 2f6:	fe 4f       	sbci	r31, 0xFE	; 254
 2f8:	e8 0f       	add	r30, r24
 2fa:	f9 1f       	adc	r31, r25
 2fc:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
 2fe:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <i.1892+0x1>
 302:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <i.1892>
		rear++;
 306:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <rear>
 30a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <rear+0x1>
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <rear+0x1>
 314:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
 318:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <rear>
 31c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <rear+0x1>
 320:	6a e0       	ldi	r22, 0x0A	; 10
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	e1 d2       	rcall	.+1474   	; 0x8e8 <__divmodhi4>
 326:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <rear+0x1>
 32a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <rear>
 32e:	1c c0       	rjmp	.+56     	; 0x368 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
 330:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <rear>
 334:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <rear+0x1>
 338:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <i.1892>
 33c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <i.1892+0x1>
 340:	9c 01       	movw	r18, r24
 342:	2f 5f       	subi	r18, 0xFF	; 255
 344:	3f 4f       	sbci	r19, 0xFF	; 255
 346:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <i.1892+0x1>
 34a:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <i.1892>
 34e:	49 81       	ldd	r20, Y+1	; 0x01
 350:	50 e5       	ldi	r21, 0x50	; 80
 352:	56 9f       	mul	r21, r22
 354:	90 01       	movw	r18, r0
 356:	57 9f       	mul	r21, r23
 358:	30 0d       	add	r19, r0
 35a:	11 24       	eor	r1, r1
 35c:	22 5d       	subi	r18, 0xD2	; 210
 35e:	3e 4f       	sbci	r19, 0xFE	; 254
 360:	f9 01       	movw	r30, r18
 362:	e8 0f       	add	r30, r24
 364:	f9 1f       	adc	r31, r25
 366:	40 83       	st	Z, r20
	}
		  
}
 368:	0f 90       	pop	r0
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	bf 91       	pop	r27
 374:	af 91       	pop	r26
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	7f 91       	pop	r23
 37c:	6f 91       	pop	r22
 37e:	5f 91       	pop	r21
 380:	4f 91       	pop	r20
 382:	3f 91       	pop	r19
 384:	2f 91       	pop	r18
 386:	0f 90       	pop	r0
 388:	0b be       	out	0x3b, r0	; 59
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <init_uart0>:

void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
 394:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
 398:	8f ec       	ldi	r24, 0xCF	; 207
 39a:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
 39c:	8b b1       	in	r24, 0x0b	; 11
 39e:	82 60       	ori	r24, 0x02	; 2
 3a0:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
 3a2:	e5 e9       	ldi	r30, 0x95	; 149
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	86 60       	ori	r24, 0x06	; 6
 3aa:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
 3ac:	8a b1       	in	r24, 0x0a	; 10
 3ae:	88 69       	ori	r24, 0x98	; 152
 3b0:	8a b9       	out	0x0a, r24	; 10
 3b2:	08 95       	ret

000003b4 <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
 3b4:	5d 9b       	sbis	0x0b, 5	; 11
 3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <UART0_transmit>
		;   // no operation NOP
	
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
 3b8:	8c b9       	out	0x0c, r24	; 12
 3ba:	08 95       	ret

000003bc <__vector_5>:
extern volatile uint32_t ultrasonic_check_timer;

volatile int ultrasonic_distance = 0;

ISR(INT4_vect)
{
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	0b b6       	in	r0, 0x3b	; 59
 3c8:	0f 92       	push	r0
 3ca:	2f 93       	push	r18
 3cc:	3f 93       	push	r19
 3ce:	4f 93       	push	r20
 3d0:	5f 93       	push	r21
 3d2:	6f 93       	push	r22
 3d4:	7f 93       	push	r23
 3d6:	8f 93       	push	r24
 3d8:	9f 93       	push	r25
 3da:	af 93       	push	r26
 3dc:	bf 93       	push	r27
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN & (1 << ECHO))
 3e2:	0c 9b       	sbis	0x01, 4	; 1
 3e4:	03 c0       	rjmp	.+6      	; 0x3ec <__vector_5+0x30>
	{
		TCNT1 = 0;
 3e6:	1d bc       	out	0x2d, r1	; 45
 3e8:	1c bc       	out	0x2c, r1	; 44
 3ea:	19 c0       	rjmp	.+50     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
 3ec:	6c b5       	in	r22, 0x2c	; 44
 3ee:	7d b5       	in	r23, 0x2d	; 45
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	88 d1       	rcall	.+784    	; 0x706 <__floatunsisf>
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	34 e2       	ldi	r19, 0x24	; 36
 3fa:	44 e7       	ldi	r20, 0x74	; 116
 3fc:	59 e4       	ldi	r21, 0x49	; 73
 3fe:	11 d2       	rcall	.+1058   	; 0x822 <__mulsf3>
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	40 e8       	ldi	r20, 0x80	; 128
 406:	54 e4       	ldi	r21, 0x44	; 68
 408:	0c d2       	rcall	.+1048   	; 0x822 <__mulsf3>
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	34 e2       	ldi	r19, 0x24	; 36
 40e:	44 e7       	ldi	r20, 0x74	; 116
 410:	5b e4       	ldi	r21, 0x4B	; 75
 412:	e0 d0       	rcall	.+448    	; 0x5d4 <__divsf3>
 414:	47 d1       	rcall	.+654    	; 0x6a4 <__fixsfsi>
 416:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <ultrasonic_distance+0x1>
 41a:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <ultrasonic_distance>
	}
}
 41e:	ff 91       	pop	r31
 420:	ef 91       	pop	r30
 422:	bf 91       	pop	r27
 424:	af 91       	pop	r26
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	7f 91       	pop	r23
 42c:	6f 91       	pop	r22
 42e:	5f 91       	pop	r21
 430:	4f 91       	pop	r20
 432:	3f 91       	pop	r19
 434:	2f 91       	pop	r18
 436:	0f 90       	pop	r0
 438:	0b be       	out	0x3b, r0	; 59
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <init_ultrasonic>:

void init_ultrasonic()
{
	TRIG_DDR |= 1 << TRIG; // output mode로 설정
 444:	e4 e6       	ldi	r30, 0x64	; 100
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	80 61       	ori	r24, 0x10	; 16
 44c:	80 83       	st	Z, r24
	ECHO_DDR &= ~(1 << ECHO); // input mode로 설정
 44e:	82 b1       	in	r24, 0x02	; 2
 450:	8f 7e       	andi	r24, 0xEF	; 239
 452:	82 b9       	out	0x02, r24	; 2
	
	EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
 454:	8a b7       	in	r24, 0x3a	; 58
 456:	81 60       	ori	r24, 0x01	; 1
 458:	8a bf       	out	0x3a, r24	; 58
	
	TCCR1B |=  1 << CS12 | 1 << CS10; // 1024로 분주
 45a:	8e b5       	in	r24, 0x2e	; 46
 45c:	85 60       	ori	r24, 0x05	; 5
 45e:	8e bd       	out	0x2e, r24	; 46
	EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
 460:	89 b7       	in	r24, 0x39	; 57
 462:	80 61       	ori	r24, 0x10	; 16
 464:	89 bf       	out	0x39, r24	; 57
 466:	08 95       	ret

00000468 <ultrasonic_trigger>:
}

void ultrasonic_trigger()
{
	TRIG_PORT &= ~(1 << TRIG); // 해당되는 포트만 LOW로 만듦
 468:	e5 e6       	ldi	r30, 0x65	; 101
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	8f 7e       	andi	r24, 0xEF	; 239
 470:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 472:	85 e0       	ldi	r24, 0x05	; 5
 474:	8a 95       	dec	r24
 476:	f1 f7       	brne	.-4      	; 0x474 <ultrasonic_trigger+0xc>
 478:	00 00       	nop
	_delay_us(1);
	TRIG_PORT |= 1 << TRIG; // HIGH
 47a:	80 81       	ld	r24, Z
 47c:	80 61       	ori	r24, 0x10	; 16
 47e:	80 83       	st	Z, r24
 480:	80 e5       	ldi	r24, 0x50	; 80
 482:	8a 95       	dec	r24
 484:	f1 f7       	brne	.-4      	; 0x482 <ultrasonic_trigger+0x1a>
	_delay_us(15); // 규격에는 10us인데 reduance
	TRIG_PORT &= ~(1 << TRIG); // LOW
 486:	80 81       	ld	r24, Z
 488:	8f 7e       	andi	r24, 0xEF	; 239
 48a:	80 83       	st	Z, r24
 48c:	08 95       	ret

0000048e <ultrasonic_led>:
}

void ultrasonic_led()
{
	if  (ultrasonic_check_timer >= 2)
 48e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <ultrasonic_check_timer>
 492:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <ultrasonic_check_timer+0x1>
 496:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <ultrasonic_check_timer+0x2>
 49a:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <ultrasonic_check_timer+0x3>
 49e:	02 97       	sbiw	r24, 0x02	; 2
 4a0:	a1 05       	cpc	r26, r1
 4a2:	b1 05       	cpc	r27, r1
 4a4:	08 f4       	brcc	.+2      	; 0x4a8 <ultrasonic_led+0x1a>
 4a6:	95 c0       	rjmp	.+298    	; 0x5d2 <ultrasonic_led+0x144>
	{
		ultrasonic_check_timer = 0;
 4a8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <ultrasonic_check_timer>
 4ac:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <ultrasonic_check_timer+0x1>
 4b0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <ultrasonic_check_timer+0x2>
 4b4:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <ultrasonic_check_timer+0x3>
		
		if (ultrasonic_distance / 58 >= 0 && ultrasonic_distance / 58 <= 2) // 0~2cm led 1개 on
 4b8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 4bc:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 4c0:	87 3c       	cpi	r24, 0xC7	; 199
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	54 f0       	brlt	.+20     	; 0x4da <ultrasonic_led+0x4c>
 4c6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 4ca:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 4ce:	8e 3a       	cpi	r24, 0xAE	; 174
 4d0:	91 05       	cpc	r25, r1
 4d2:	1c f4       	brge	.+6      	; 0x4da <ultrasonic_led+0x4c>
		{
			PORTA = 0x01;
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	8b bb       	out	0x1b, r24	; 27
 4d8:	78 c0       	rjmp	.+240    	; 0x5ca <ultrasonic_led+0x13c>
		}
		else if (ultrasonic_distance / 58 > 2 && ultrasonic_distance / 58 <= 4) // 2~4cm led 2개 on
 4da:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 4de:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 4e2:	8e 3a       	cpi	r24, 0xAE	; 174
 4e4:	91 05       	cpc	r25, r1
 4e6:	54 f0       	brlt	.+20     	; 0x4fc <ultrasonic_led+0x6e>
 4e8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 4ec:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 4f0:	82 32       	cpi	r24, 0x22	; 34
 4f2:	91 40       	sbci	r25, 0x01	; 1
 4f4:	1c f4       	brge	.+6      	; 0x4fc <ultrasonic_led+0x6e>
		{
			PORTA = 0x03;
 4f6:	83 e0       	ldi	r24, 0x03	; 3
 4f8:	8b bb       	out	0x1b, r24	; 27
 4fa:	67 c0       	rjmp	.+206    	; 0x5ca <ultrasonic_led+0x13c>
		}
		else if (ultrasonic_distance / 58 > 4 && ultrasonic_distance / 58 <= 6) // 4~6cm led 3개 on
 4fc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 500:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 504:	82 32       	cpi	r24, 0x22	; 34
 506:	91 40       	sbci	r25, 0x01	; 1
 508:	54 f0       	brlt	.+20     	; 0x51e <ultrasonic_led+0x90>
 50a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 50e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 512:	86 39       	cpi	r24, 0x96	; 150
 514:	91 40       	sbci	r25, 0x01	; 1
 516:	1c f4       	brge	.+6      	; 0x51e <ultrasonic_led+0x90>
		{
			PORTA = 0x07;
 518:	87 e0       	ldi	r24, 0x07	; 7
 51a:	8b bb       	out	0x1b, r24	; 27
 51c:	56 c0       	rjmp	.+172    	; 0x5ca <ultrasonic_led+0x13c>
		}
		else if (ultrasonic_distance / 58 > 6 && ultrasonic_distance / 58 <= 8) // 6~8cm led 4개 on
 51e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 522:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 526:	86 39       	cpi	r24, 0x96	; 150
 528:	91 40       	sbci	r25, 0x01	; 1
 52a:	54 f0       	brlt	.+20     	; 0x540 <ultrasonic_led+0xb2>
 52c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 530:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 534:	8a 30       	cpi	r24, 0x0A	; 10
 536:	92 40       	sbci	r25, 0x02	; 2
 538:	1c f4       	brge	.+6      	; 0x540 <ultrasonic_led+0xb2>
		{
			PORTA = 0x0f;
 53a:	8f e0       	ldi	r24, 0x0F	; 15
 53c:	8b bb       	out	0x1b, r24	; 27
 53e:	45 c0       	rjmp	.+138    	; 0x5ca <ultrasonic_led+0x13c>
		}
		else if (ultrasonic_distance / 58 > 8 && ultrasonic_distance / 58 <= 10) // 8~10cm led 5개 on
 540:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 544:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 548:	8a 30       	cpi	r24, 0x0A	; 10
 54a:	92 40       	sbci	r25, 0x02	; 2
 54c:	54 f0       	brlt	.+20     	; 0x562 <ultrasonic_led+0xd4>
 54e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 552:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 556:	8e 37       	cpi	r24, 0x7E	; 126
 558:	92 40       	sbci	r25, 0x02	; 2
 55a:	1c f4       	brge	.+6      	; 0x562 <ultrasonic_led+0xd4>
		{
			PORTA = 0x1f;
 55c:	8f e1       	ldi	r24, 0x1F	; 31
 55e:	8b bb       	out	0x1b, r24	; 27
 560:	34 c0       	rjmp	.+104    	; 0x5ca <ultrasonic_led+0x13c>
		}
		else if (ultrasonic_distance / 58 > 10 && ultrasonic_distance / 58 <= 12) // 10~12cm led 6개 on
 562:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 566:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 56a:	8e 37       	cpi	r24, 0x7E	; 126
 56c:	92 40       	sbci	r25, 0x02	; 2
 56e:	54 f0       	brlt	.+20     	; 0x584 <ultrasonic_led+0xf6>
 570:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 574:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 578:	82 3f       	cpi	r24, 0xF2	; 242
 57a:	92 40       	sbci	r25, 0x02	; 2
 57c:	1c f4       	brge	.+6      	; 0x584 <ultrasonic_led+0xf6>
		{
			PORTA = 0x3f;
 57e:	8f e3       	ldi	r24, 0x3F	; 63
 580:	8b bb       	out	0x1b, r24	; 27
 582:	23 c0       	rjmp	.+70     	; 0x5ca <ultrasonic_led+0x13c>
		}
		else if (ultrasonic_distance / 58 > 12 && ultrasonic_distance / 58 <= 14) // 12~14cm led 7개 on
 584:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 588:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 58c:	82 3f       	cpi	r24, 0xF2	; 242
 58e:	92 40       	sbci	r25, 0x02	; 2
 590:	54 f0       	brlt	.+20     	; 0x5a6 <ultrasonic_led+0x118>
 592:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 596:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 59a:	86 36       	cpi	r24, 0x66	; 102
 59c:	93 40       	sbci	r25, 0x03	; 3
 59e:	1c f4       	brge	.+6      	; 0x5a6 <ultrasonic_led+0x118>
		{
			PORTA = 0x7f;
 5a0:	8f e7       	ldi	r24, 0x7F	; 127
 5a2:	8b bb       	out	0x1b, r24	; 27
 5a4:	12 c0       	rjmp	.+36     	; 0x5ca <ultrasonic_led+0x13c>
		}
		else if (ultrasonic_distance / 58 > 14 && ultrasonic_distance / 58 <= 16) // 14~16cm led 8개 on
 5a6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 5aa:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 5ae:	86 36       	cpi	r24, 0x66	; 102
 5b0:	93 40       	sbci	r25, 0x03	; 3
 5b2:	54 f0       	brlt	.+20     	; 0x5c8 <ultrasonic_led+0x13a>
 5b4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <ultrasonic_distance>
 5b8:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ultrasonic_distance+0x1>
 5bc:	8a 3d       	cpi	r24, 0xDA	; 218
 5be:	93 40       	sbci	r25, 0x03	; 3
 5c0:	1c f4       	brge	.+6      	; 0x5c8 <ultrasonic_led+0x13a>
		{
			PORTA = 0xff;
 5c2:	8f ef       	ldi	r24, 0xFF	; 255
 5c4:	8b bb       	out	0x1b, r24	; 27
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <ultrasonic_led+0x13c>
		}
		else
		{
			PORTA = 0; // 그 외엔 모든 led off
 5c8:	1b ba       	out	0x1b, r1	; 27
		}
		fnd_display_us(&ultrasonic_distance); // 실시간으로 fnd에 거리 display
 5ca:	8c e2       	ldi	r24, 0x2C	; 44
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	83 dd       	rcall	.-1274   	; 0xd6 <fnd_display_us>
		ultrasonic_trigger();		
 5d0:	4b cf       	rjmp	.-362    	; 0x468 <ultrasonic_trigger>
 5d2:	08 95       	ret

000005d4 <__divsf3>:
 5d4:	0c d0       	rcall	.+24     	; 0x5ee <__divsf3x>
 5d6:	eb c0       	rjmp	.+470    	; 0x7ae <__fp_round>
 5d8:	e3 d0       	rcall	.+454    	; 0x7a0 <__fp_pscB>
 5da:	40 f0       	brcs	.+16     	; 0x5ec <__divsf3+0x18>
 5dc:	da d0       	rcall	.+436    	; 0x792 <__fp_pscA>
 5de:	30 f0       	brcs	.+12     	; 0x5ec <__divsf3+0x18>
 5e0:	21 f4       	brne	.+8      	; 0x5ea <__divsf3+0x16>
 5e2:	5f 3f       	cpi	r21, 0xFF	; 255
 5e4:	19 f0       	breq	.+6      	; 0x5ec <__divsf3+0x18>
 5e6:	cc c0       	rjmp	.+408    	; 0x780 <__fp_inf>
 5e8:	51 11       	cpse	r21, r1
 5ea:	15 c1       	rjmp	.+554    	; 0x816 <__fp_szero>
 5ec:	cf c0       	rjmp	.+414    	; 0x78c <__fp_nan>

000005ee <__divsf3x>:
 5ee:	f0 d0       	rcall	.+480    	; 0x7d0 <__fp_split3>
 5f0:	98 f3       	brcs	.-26     	; 0x5d8 <__divsf3+0x4>

000005f2 <__divsf3_pse>:
 5f2:	99 23       	and	r25, r25
 5f4:	c9 f3       	breq	.-14     	; 0x5e8 <__divsf3+0x14>
 5f6:	55 23       	and	r21, r21
 5f8:	b1 f3       	breq	.-20     	; 0x5e6 <__divsf3+0x12>
 5fa:	95 1b       	sub	r25, r21
 5fc:	55 0b       	sbc	r21, r21
 5fe:	bb 27       	eor	r27, r27
 600:	aa 27       	eor	r26, r26
 602:	62 17       	cp	r22, r18
 604:	73 07       	cpc	r23, r19
 606:	84 07       	cpc	r24, r20
 608:	38 f0       	brcs	.+14     	; 0x618 <__divsf3_pse+0x26>
 60a:	9f 5f       	subi	r25, 0xFF	; 255
 60c:	5f 4f       	sbci	r21, 0xFF	; 255
 60e:	22 0f       	add	r18, r18
 610:	33 1f       	adc	r19, r19
 612:	44 1f       	adc	r20, r20
 614:	aa 1f       	adc	r26, r26
 616:	a9 f3       	breq	.-22     	; 0x602 <__divsf3_pse+0x10>
 618:	33 d0       	rcall	.+102    	; 0x680 <__divsf3_pse+0x8e>
 61a:	0e 2e       	mov	r0, r30
 61c:	3a f0       	brmi	.+14     	; 0x62c <__divsf3_pse+0x3a>
 61e:	e0 e8       	ldi	r30, 0x80	; 128
 620:	30 d0       	rcall	.+96     	; 0x682 <__divsf3_pse+0x90>
 622:	91 50       	subi	r25, 0x01	; 1
 624:	50 40       	sbci	r21, 0x00	; 0
 626:	e6 95       	lsr	r30
 628:	00 1c       	adc	r0, r0
 62a:	ca f7       	brpl	.-14     	; 0x61e <__divsf3_pse+0x2c>
 62c:	29 d0       	rcall	.+82     	; 0x680 <__divsf3_pse+0x8e>
 62e:	fe 2f       	mov	r31, r30
 630:	27 d0       	rcall	.+78     	; 0x680 <__divsf3_pse+0x8e>
 632:	66 0f       	add	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	88 1f       	adc	r24, r24
 638:	bb 1f       	adc	r27, r27
 63a:	26 17       	cp	r18, r22
 63c:	37 07       	cpc	r19, r23
 63e:	48 07       	cpc	r20, r24
 640:	ab 07       	cpc	r26, r27
 642:	b0 e8       	ldi	r27, 0x80	; 128
 644:	09 f0       	breq	.+2      	; 0x648 <__divsf3_pse+0x56>
 646:	bb 0b       	sbc	r27, r27
 648:	80 2d       	mov	r24, r0
 64a:	bf 01       	movw	r22, r30
 64c:	ff 27       	eor	r31, r31
 64e:	93 58       	subi	r25, 0x83	; 131
 650:	5f 4f       	sbci	r21, 0xFF	; 255
 652:	2a f0       	brmi	.+10     	; 0x65e <__divsf3_pse+0x6c>
 654:	9e 3f       	cpi	r25, 0xFE	; 254
 656:	51 05       	cpc	r21, r1
 658:	68 f0       	brcs	.+26     	; 0x674 <__divsf3_pse+0x82>
 65a:	92 c0       	rjmp	.+292    	; 0x780 <__fp_inf>
 65c:	dc c0       	rjmp	.+440    	; 0x816 <__fp_szero>
 65e:	5f 3f       	cpi	r21, 0xFF	; 255
 660:	ec f3       	brlt	.-6      	; 0x65c <__divsf3_pse+0x6a>
 662:	98 3e       	cpi	r25, 0xE8	; 232
 664:	dc f3       	brlt	.-10     	; 0x65c <__divsf3_pse+0x6a>
 666:	86 95       	lsr	r24
 668:	77 95       	ror	r23
 66a:	67 95       	ror	r22
 66c:	b7 95       	ror	r27
 66e:	f7 95       	ror	r31
 670:	9f 5f       	subi	r25, 0xFF	; 255
 672:	c9 f7       	brne	.-14     	; 0x666 <__divsf3_pse+0x74>
 674:	88 0f       	add	r24, r24
 676:	91 1d       	adc	r25, r1
 678:	96 95       	lsr	r25
 67a:	87 95       	ror	r24
 67c:	97 f9       	bld	r25, 7
 67e:	08 95       	ret
 680:	e1 e0       	ldi	r30, 0x01	; 1
 682:	66 0f       	add	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	88 1f       	adc	r24, r24
 688:	bb 1f       	adc	r27, r27
 68a:	62 17       	cp	r22, r18
 68c:	73 07       	cpc	r23, r19
 68e:	84 07       	cpc	r24, r20
 690:	ba 07       	cpc	r27, r26
 692:	20 f0       	brcs	.+8      	; 0x69c <__divsf3_pse+0xaa>
 694:	62 1b       	sub	r22, r18
 696:	73 0b       	sbc	r23, r19
 698:	84 0b       	sbc	r24, r20
 69a:	ba 0b       	sbc	r27, r26
 69c:	ee 1f       	adc	r30, r30
 69e:	88 f7       	brcc	.-30     	; 0x682 <__divsf3_pse+0x90>
 6a0:	e0 95       	com	r30
 6a2:	08 95       	ret

000006a4 <__fixsfsi>:
 6a4:	04 d0       	rcall	.+8      	; 0x6ae <__fixunssfsi>
 6a6:	68 94       	set
 6a8:	b1 11       	cpse	r27, r1
 6aa:	b5 c0       	rjmp	.+362    	; 0x816 <__fp_szero>
 6ac:	08 95       	ret

000006ae <__fixunssfsi>:
 6ae:	98 d0       	rcall	.+304    	; 0x7e0 <__fp_splitA>
 6b0:	88 f0       	brcs	.+34     	; 0x6d4 <__fixunssfsi+0x26>
 6b2:	9f 57       	subi	r25, 0x7F	; 127
 6b4:	90 f0       	brcs	.+36     	; 0x6da <__fixunssfsi+0x2c>
 6b6:	b9 2f       	mov	r27, r25
 6b8:	99 27       	eor	r25, r25
 6ba:	b7 51       	subi	r27, 0x17	; 23
 6bc:	a0 f0       	brcs	.+40     	; 0x6e6 <__fixunssfsi+0x38>
 6be:	d1 f0       	breq	.+52     	; 0x6f4 <__fixunssfsi+0x46>
 6c0:	66 0f       	add	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	1a f0       	brmi	.+6      	; 0x6d0 <__fixunssfsi+0x22>
 6ca:	ba 95       	dec	r27
 6cc:	c9 f7       	brne	.-14     	; 0x6c0 <__fixunssfsi+0x12>
 6ce:	12 c0       	rjmp	.+36     	; 0x6f4 <__fixunssfsi+0x46>
 6d0:	b1 30       	cpi	r27, 0x01	; 1
 6d2:	81 f0       	breq	.+32     	; 0x6f4 <__fixunssfsi+0x46>
 6d4:	9f d0       	rcall	.+318    	; 0x814 <__fp_zero>
 6d6:	b1 e0       	ldi	r27, 0x01	; 1
 6d8:	08 95       	ret
 6da:	9c c0       	rjmp	.+312    	; 0x814 <__fp_zero>
 6dc:	67 2f       	mov	r22, r23
 6de:	78 2f       	mov	r23, r24
 6e0:	88 27       	eor	r24, r24
 6e2:	b8 5f       	subi	r27, 0xF8	; 248
 6e4:	39 f0       	breq	.+14     	; 0x6f4 <__fixunssfsi+0x46>
 6e6:	b9 3f       	cpi	r27, 0xF9	; 249
 6e8:	cc f3       	brlt	.-14     	; 0x6dc <__fixunssfsi+0x2e>
 6ea:	86 95       	lsr	r24
 6ec:	77 95       	ror	r23
 6ee:	67 95       	ror	r22
 6f0:	b3 95       	inc	r27
 6f2:	d9 f7       	brne	.-10     	; 0x6ea <__fixunssfsi+0x3c>
 6f4:	3e f4       	brtc	.+14     	; 0x704 <__fixunssfsi+0x56>
 6f6:	90 95       	com	r25
 6f8:	80 95       	com	r24
 6fa:	70 95       	com	r23
 6fc:	61 95       	neg	r22
 6fe:	7f 4f       	sbci	r23, 0xFF	; 255
 700:	8f 4f       	sbci	r24, 0xFF	; 255
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	08 95       	ret

00000706 <__floatunsisf>:
 706:	e8 94       	clt
 708:	09 c0       	rjmp	.+18     	; 0x71c <__floatsisf+0x12>

0000070a <__floatsisf>:
 70a:	97 fb       	bst	r25, 7
 70c:	3e f4       	brtc	.+14     	; 0x71c <__floatsisf+0x12>
 70e:	90 95       	com	r25
 710:	80 95       	com	r24
 712:	70 95       	com	r23
 714:	61 95       	neg	r22
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	8f 4f       	sbci	r24, 0xFF	; 255
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	99 23       	and	r25, r25
 71e:	a9 f0       	breq	.+42     	; 0x74a <__floatsisf+0x40>
 720:	f9 2f       	mov	r31, r25
 722:	96 e9       	ldi	r25, 0x96	; 150
 724:	bb 27       	eor	r27, r27
 726:	93 95       	inc	r25
 728:	f6 95       	lsr	r31
 72a:	87 95       	ror	r24
 72c:	77 95       	ror	r23
 72e:	67 95       	ror	r22
 730:	b7 95       	ror	r27
 732:	f1 11       	cpse	r31, r1
 734:	f8 cf       	rjmp	.-16     	; 0x726 <__floatsisf+0x1c>
 736:	fa f4       	brpl	.+62     	; 0x776 <__floatsisf+0x6c>
 738:	bb 0f       	add	r27, r27
 73a:	11 f4       	brne	.+4      	; 0x740 <__floatsisf+0x36>
 73c:	60 ff       	sbrs	r22, 0
 73e:	1b c0       	rjmp	.+54     	; 0x776 <__floatsisf+0x6c>
 740:	6f 5f       	subi	r22, 0xFF	; 255
 742:	7f 4f       	sbci	r23, 0xFF	; 255
 744:	8f 4f       	sbci	r24, 0xFF	; 255
 746:	9f 4f       	sbci	r25, 0xFF	; 255
 748:	16 c0       	rjmp	.+44     	; 0x776 <__floatsisf+0x6c>
 74a:	88 23       	and	r24, r24
 74c:	11 f0       	breq	.+4      	; 0x752 <__floatsisf+0x48>
 74e:	96 e9       	ldi	r25, 0x96	; 150
 750:	11 c0       	rjmp	.+34     	; 0x774 <__floatsisf+0x6a>
 752:	77 23       	and	r23, r23
 754:	21 f0       	breq	.+8      	; 0x75e <__floatsisf+0x54>
 756:	9e e8       	ldi	r25, 0x8E	; 142
 758:	87 2f       	mov	r24, r23
 75a:	76 2f       	mov	r23, r22
 75c:	05 c0       	rjmp	.+10     	; 0x768 <__floatsisf+0x5e>
 75e:	66 23       	and	r22, r22
 760:	71 f0       	breq	.+28     	; 0x77e <__floatsisf+0x74>
 762:	96 e8       	ldi	r25, 0x86	; 134
 764:	86 2f       	mov	r24, r22
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	2a f0       	brmi	.+10     	; 0x776 <__floatsisf+0x6c>
 76c:	9a 95       	dec	r25
 76e:	66 0f       	add	r22, r22
 770:	77 1f       	adc	r23, r23
 772:	88 1f       	adc	r24, r24
 774:	da f7       	brpl	.-10     	; 0x76c <__floatsisf+0x62>
 776:	88 0f       	add	r24, r24
 778:	96 95       	lsr	r25
 77a:	87 95       	ror	r24
 77c:	97 f9       	bld	r25, 7
 77e:	08 95       	ret

00000780 <__fp_inf>:
 780:	97 f9       	bld	r25, 7
 782:	9f 67       	ori	r25, 0x7F	; 127
 784:	80 e8       	ldi	r24, 0x80	; 128
 786:	70 e0       	ldi	r23, 0x00	; 0
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	08 95       	ret

0000078c <__fp_nan>:
 78c:	9f ef       	ldi	r25, 0xFF	; 255
 78e:	80 ec       	ldi	r24, 0xC0	; 192
 790:	08 95       	ret

00000792 <__fp_pscA>:
 792:	00 24       	eor	r0, r0
 794:	0a 94       	dec	r0
 796:	16 16       	cp	r1, r22
 798:	17 06       	cpc	r1, r23
 79a:	18 06       	cpc	r1, r24
 79c:	09 06       	cpc	r0, r25
 79e:	08 95       	ret

000007a0 <__fp_pscB>:
 7a0:	00 24       	eor	r0, r0
 7a2:	0a 94       	dec	r0
 7a4:	12 16       	cp	r1, r18
 7a6:	13 06       	cpc	r1, r19
 7a8:	14 06       	cpc	r1, r20
 7aa:	05 06       	cpc	r0, r21
 7ac:	08 95       	ret

000007ae <__fp_round>:
 7ae:	09 2e       	mov	r0, r25
 7b0:	03 94       	inc	r0
 7b2:	00 0c       	add	r0, r0
 7b4:	11 f4       	brne	.+4      	; 0x7ba <__fp_round+0xc>
 7b6:	88 23       	and	r24, r24
 7b8:	52 f0       	brmi	.+20     	; 0x7ce <__fp_round+0x20>
 7ba:	bb 0f       	add	r27, r27
 7bc:	40 f4       	brcc	.+16     	; 0x7ce <__fp_round+0x20>
 7be:	bf 2b       	or	r27, r31
 7c0:	11 f4       	brne	.+4      	; 0x7c6 <__fp_round+0x18>
 7c2:	60 ff       	sbrs	r22, 0
 7c4:	04 c0       	rjmp	.+8      	; 0x7ce <__fp_round+0x20>
 7c6:	6f 5f       	subi	r22, 0xFF	; 255
 7c8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ca:	8f 4f       	sbci	r24, 0xFF	; 255
 7cc:	9f 4f       	sbci	r25, 0xFF	; 255
 7ce:	08 95       	ret

000007d0 <__fp_split3>:
 7d0:	57 fd       	sbrc	r21, 7
 7d2:	90 58       	subi	r25, 0x80	; 128
 7d4:	44 0f       	add	r20, r20
 7d6:	55 1f       	adc	r21, r21
 7d8:	59 f0       	breq	.+22     	; 0x7f0 <__fp_splitA+0x10>
 7da:	5f 3f       	cpi	r21, 0xFF	; 255
 7dc:	71 f0       	breq	.+28     	; 0x7fa <__fp_splitA+0x1a>
 7de:	47 95       	ror	r20

000007e0 <__fp_splitA>:
 7e0:	88 0f       	add	r24, r24
 7e2:	97 fb       	bst	r25, 7
 7e4:	99 1f       	adc	r25, r25
 7e6:	61 f0       	breq	.+24     	; 0x800 <__fp_splitA+0x20>
 7e8:	9f 3f       	cpi	r25, 0xFF	; 255
 7ea:	79 f0       	breq	.+30     	; 0x80a <__fp_splitA+0x2a>
 7ec:	87 95       	ror	r24
 7ee:	08 95       	ret
 7f0:	12 16       	cp	r1, r18
 7f2:	13 06       	cpc	r1, r19
 7f4:	14 06       	cpc	r1, r20
 7f6:	55 1f       	adc	r21, r21
 7f8:	f2 cf       	rjmp	.-28     	; 0x7de <__fp_split3+0xe>
 7fa:	46 95       	lsr	r20
 7fc:	f1 df       	rcall	.-30     	; 0x7e0 <__fp_splitA>
 7fe:	08 c0       	rjmp	.+16     	; 0x810 <__fp_splitA+0x30>
 800:	16 16       	cp	r1, r22
 802:	17 06       	cpc	r1, r23
 804:	18 06       	cpc	r1, r24
 806:	99 1f       	adc	r25, r25
 808:	f1 cf       	rjmp	.-30     	; 0x7ec <__fp_splitA+0xc>
 80a:	86 95       	lsr	r24
 80c:	71 05       	cpc	r23, r1
 80e:	61 05       	cpc	r22, r1
 810:	08 94       	sec
 812:	08 95       	ret

00000814 <__fp_zero>:
 814:	e8 94       	clt

00000816 <__fp_szero>:
 816:	bb 27       	eor	r27, r27
 818:	66 27       	eor	r22, r22
 81a:	77 27       	eor	r23, r23
 81c:	cb 01       	movw	r24, r22
 81e:	97 f9       	bld	r25, 7
 820:	08 95       	ret

00000822 <__mulsf3>:
 822:	0b d0       	rcall	.+22     	; 0x83a <__mulsf3x>
 824:	c4 cf       	rjmp	.-120    	; 0x7ae <__fp_round>
 826:	b5 df       	rcall	.-150    	; 0x792 <__fp_pscA>
 828:	28 f0       	brcs	.+10     	; 0x834 <__mulsf3+0x12>
 82a:	ba df       	rcall	.-140    	; 0x7a0 <__fp_pscB>
 82c:	18 f0       	brcs	.+6      	; 0x834 <__mulsf3+0x12>
 82e:	95 23       	and	r25, r21
 830:	09 f0       	breq	.+2      	; 0x834 <__mulsf3+0x12>
 832:	a6 cf       	rjmp	.-180    	; 0x780 <__fp_inf>
 834:	ab cf       	rjmp	.-170    	; 0x78c <__fp_nan>
 836:	11 24       	eor	r1, r1
 838:	ee cf       	rjmp	.-36     	; 0x816 <__fp_szero>

0000083a <__mulsf3x>:
 83a:	ca df       	rcall	.-108    	; 0x7d0 <__fp_split3>
 83c:	a0 f3       	brcs	.-24     	; 0x826 <__mulsf3+0x4>

0000083e <__mulsf3_pse>:
 83e:	95 9f       	mul	r25, r21
 840:	d1 f3       	breq	.-12     	; 0x836 <__mulsf3+0x14>
 842:	95 0f       	add	r25, r21
 844:	50 e0       	ldi	r21, 0x00	; 0
 846:	55 1f       	adc	r21, r21
 848:	62 9f       	mul	r22, r18
 84a:	f0 01       	movw	r30, r0
 84c:	72 9f       	mul	r23, r18
 84e:	bb 27       	eor	r27, r27
 850:	f0 0d       	add	r31, r0
 852:	b1 1d       	adc	r27, r1
 854:	63 9f       	mul	r22, r19
 856:	aa 27       	eor	r26, r26
 858:	f0 0d       	add	r31, r0
 85a:	b1 1d       	adc	r27, r1
 85c:	aa 1f       	adc	r26, r26
 85e:	64 9f       	mul	r22, r20
 860:	66 27       	eor	r22, r22
 862:	b0 0d       	add	r27, r0
 864:	a1 1d       	adc	r26, r1
 866:	66 1f       	adc	r22, r22
 868:	82 9f       	mul	r24, r18
 86a:	22 27       	eor	r18, r18
 86c:	b0 0d       	add	r27, r0
 86e:	a1 1d       	adc	r26, r1
 870:	62 1f       	adc	r22, r18
 872:	73 9f       	mul	r23, r19
 874:	b0 0d       	add	r27, r0
 876:	a1 1d       	adc	r26, r1
 878:	62 1f       	adc	r22, r18
 87a:	83 9f       	mul	r24, r19
 87c:	a0 0d       	add	r26, r0
 87e:	61 1d       	adc	r22, r1
 880:	22 1f       	adc	r18, r18
 882:	74 9f       	mul	r23, r20
 884:	33 27       	eor	r19, r19
 886:	a0 0d       	add	r26, r0
 888:	61 1d       	adc	r22, r1
 88a:	23 1f       	adc	r18, r19
 88c:	84 9f       	mul	r24, r20
 88e:	60 0d       	add	r22, r0
 890:	21 1d       	adc	r18, r1
 892:	82 2f       	mov	r24, r18
 894:	76 2f       	mov	r23, r22
 896:	6a 2f       	mov	r22, r26
 898:	11 24       	eor	r1, r1
 89a:	9f 57       	subi	r25, 0x7F	; 127
 89c:	50 40       	sbci	r21, 0x00	; 0
 89e:	8a f0       	brmi	.+34     	; 0x8c2 <__mulsf3_pse+0x84>
 8a0:	e1 f0       	breq	.+56     	; 0x8da <__mulsf3_pse+0x9c>
 8a2:	88 23       	and	r24, r24
 8a4:	4a f0       	brmi	.+18     	; 0x8b8 <__mulsf3_pse+0x7a>
 8a6:	ee 0f       	add	r30, r30
 8a8:	ff 1f       	adc	r31, r31
 8aa:	bb 1f       	adc	r27, r27
 8ac:	66 1f       	adc	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	88 1f       	adc	r24, r24
 8b2:	91 50       	subi	r25, 0x01	; 1
 8b4:	50 40       	sbci	r21, 0x00	; 0
 8b6:	a9 f7       	brne	.-22     	; 0x8a2 <__mulsf3_pse+0x64>
 8b8:	9e 3f       	cpi	r25, 0xFE	; 254
 8ba:	51 05       	cpc	r21, r1
 8bc:	70 f0       	brcs	.+28     	; 0x8da <__mulsf3_pse+0x9c>
 8be:	60 cf       	rjmp	.-320    	; 0x780 <__fp_inf>
 8c0:	aa cf       	rjmp	.-172    	; 0x816 <__fp_szero>
 8c2:	5f 3f       	cpi	r21, 0xFF	; 255
 8c4:	ec f3       	brlt	.-6      	; 0x8c0 <__mulsf3_pse+0x82>
 8c6:	98 3e       	cpi	r25, 0xE8	; 232
 8c8:	dc f3       	brlt	.-10     	; 0x8c0 <__mulsf3_pse+0x82>
 8ca:	86 95       	lsr	r24
 8cc:	77 95       	ror	r23
 8ce:	67 95       	ror	r22
 8d0:	b7 95       	ror	r27
 8d2:	f7 95       	ror	r31
 8d4:	e7 95       	ror	r30
 8d6:	9f 5f       	subi	r25, 0xFF	; 255
 8d8:	c1 f7       	brne	.-16     	; 0x8ca <__mulsf3_pse+0x8c>
 8da:	fe 2b       	or	r31, r30
 8dc:	88 0f       	add	r24, r24
 8de:	91 1d       	adc	r25, r1
 8e0:	96 95       	lsr	r25
 8e2:	87 95       	ror	r24
 8e4:	97 f9       	bld	r25, 7
 8e6:	08 95       	ret

000008e8 <__divmodhi4>:
 8e8:	97 fb       	bst	r25, 7
 8ea:	07 2e       	mov	r0, r23
 8ec:	16 f4       	brtc	.+4      	; 0x8f2 <__divmodhi4+0xa>
 8ee:	00 94       	com	r0
 8f0:	06 d0       	rcall	.+12     	; 0x8fe <__divmodhi4_neg1>
 8f2:	77 fd       	sbrc	r23, 7
 8f4:	08 d0       	rcall	.+16     	; 0x906 <__divmodhi4_neg2>
 8f6:	0b d0       	rcall	.+22     	; 0x90e <__udivmodhi4>
 8f8:	07 fc       	sbrc	r0, 7
 8fa:	05 d0       	rcall	.+10     	; 0x906 <__divmodhi4_neg2>
 8fc:	3e f4       	brtc	.+14     	; 0x90c <__divmodhi4_exit>

000008fe <__divmodhi4_neg1>:
 8fe:	90 95       	com	r25
 900:	81 95       	neg	r24
 902:	9f 4f       	sbci	r25, 0xFF	; 255
 904:	08 95       	ret

00000906 <__divmodhi4_neg2>:
 906:	70 95       	com	r23
 908:	61 95       	neg	r22
 90a:	7f 4f       	sbci	r23, 0xFF	; 255

0000090c <__divmodhi4_exit>:
 90c:	08 95       	ret

0000090e <__udivmodhi4>:
 90e:	aa 1b       	sub	r26, r26
 910:	bb 1b       	sub	r27, r27
 912:	51 e1       	ldi	r21, 0x11	; 17
 914:	07 c0       	rjmp	.+14     	; 0x924 <__udivmodhi4_ep>

00000916 <__udivmodhi4_loop>:
 916:	aa 1f       	adc	r26, r26
 918:	bb 1f       	adc	r27, r27
 91a:	a6 17       	cp	r26, r22
 91c:	b7 07       	cpc	r27, r23
 91e:	10 f0       	brcs	.+4      	; 0x924 <__udivmodhi4_ep>
 920:	a6 1b       	sub	r26, r22
 922:	b7 0b       	sbc	r27, r23

00000924 <__udivmodhi4_ep>:
 924:	88 1f       	adc	r24, r24
 926:	99 1f       	adc	r25, r25
 928:	5a 95       	dec	r21
 92a:	a9 f7       	brne	.-22     	; 0x916 <__udivmodhi4_loop>
 92c:	80 95       	com	r24
 92e:	90 95       	com	r25
 930:	bc 01       	movw	r22, r24
 932:	cd 01       	movw	r24, r26
 934:	08 95       	ret

00000936 <_exit>:
 936:	f8 94       	cli

00000938 <__stop_program>:
 938:	ff cf       	rjmp	.-2      	; 0x938 <__stop_program>
