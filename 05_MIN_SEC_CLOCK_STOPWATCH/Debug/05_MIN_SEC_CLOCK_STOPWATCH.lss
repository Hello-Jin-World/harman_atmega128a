
05_MIN_SEC_CLOCK_STOPWATCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000003c4  00000458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010c  0080010c  00000464  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a09  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ca  00000000  00000000  00000f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c3  00000000  00000000  00001807  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000aa  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000215a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	55 c1       	rjmp	.+682    	; 0x2ec <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ec       	ldi	r30, 0xC4	; 196
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	58 d1       	rcall	.+688    	; 0x374 <main>
  c4:	7d c1       	rjmp	.+762    	; 0x3c0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_fnd>:
	}
}

void init_fnd(void)
{
	FND_DATA_DDR = 0xff; // 출력모드로 설정
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 bb       	out	0x14, r24	; 20
	//FND_DIGIT_DDR |= 0xf0; //자리 수 선택 핀 4 5 6 7
	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 |
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	80 6f       	ori	r24, 0xF0	; 240
  d0:	87 bb       	out	0x17, r24	; 23
					 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4;

#if 0 // comm 애노우드
	FND_DATA_PORT = ~0x00; // FND를 all off  ~0x00 = 0xff
#else // comm 캐소우드
	FND_DATA_PORT = 0x00; // FND를 all off
  d2:	15 ba       	out	0x15, r1	; 21
  d4:	08 95       	ret

000000d6 <fnd_display>:
}



void fnd_display(void)
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	2b 97       	sbiw	r28, 0x0b	; 11
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
#if 0 // common anode
						 // 0     1     2     3     4     5     6     7     8     9     .
	uint8_t fnd_font[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xd8, 0x80, 0x90, 0x7f};
#else // common cathod
						  // 0      1      2      3      4      5      6      7      8      9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	e0 e0       	ldi	r30, 0x00	; 0
  ee:	f1 e0       	ldi	r31, 0x01	; 1
  f0:	de 01       	movw	r26, r28
  f2:	11 96       	adiw	r26, 0x01	; 1
  f4:	01 90       	ld	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	8a 95       	dec	r24
  fa:	e1 f7       	brne	.-8      	; 0xf4 <fnd_display+0x1e>
#endif

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
  fc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 100:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 05       	cpc	r25, r1
 108:	19 f1       	breq	.+70     	; 0x150 <fnd_display+0x7a>
 10a:	1c f4       	brge	.+6      	; 0x112 <fnd_display+0x3c>
 10c:	89 2b       	or	r24, r25
 10e:	41 f0       	breq	.+16     	; 0x120 <fnd_display+0x4a>
 110:	94 c0       	rjmp	.+296    	; 0x23a <fnd_display+0x164>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	91 05       	cpc	r25, r1
 116:	d9 f1       	breq	.+118    	; 0x18e <fnd_display+0xb8>
 118:	03 97       	sbiw	r24, 0x03	; 3
 11a:	09 f4       	brne	.+2      	; 0x11e <fnd_display+0x48>
 11c:	70 c0       	rjmp	.+224    	; 0x1fe <fnd_display+0x128>
 11e:	8d c0       	rjmp	.+282    	; 0x23a <fnd_display+0x164>
	{
		case 0 :
#if 0 // common anode
			FND_DIGIT_PORT = 0x80;
#else // common cathod
			FND_DIGIT_PORT = ~0x80;
 120:	8f e7       	ldi	r24, 0x7F	; 127
 122:	88 bb       	out	0x18, r24	; 24
#endif
			FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
 124:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <sec_count>
 128:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <sec_count+0x1>
 12c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec_count+0x2>
 130:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sec_count+0x3>
 134:	2a e0       	ldi	r18, 0x0A	; 10
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	1f d1       	rcall	.+574    	; 0x37c <__udivmodsi4>
 13e:	e1 e0       	ldi	r30, 0x01	; 1
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	ec 0f       	add	r30, r28
 144:	fd 1f       	adc	r31, r29
 146:	e6 0f       	add	r30, r22
 148:	f7 1f       	adc	r31, r23
 14a:	80 81       	ld	r24, Z
 14c:	85 bb       	out	0x15, r24	; 21
		break;
 14e:	75 c0       	rjmp	.+234    	; 0x23a <fnd_display+0x164>

		case 1 :
#if 0 // common anode
		FND_DIGIT_PORT = 0x40;
#else // common cathod
		FND_DIGIT_PORT = ~0x40;
 150:	8f eb       	ldi	r24, 0xBF	; 191
 152:	88 bb       	out	0x18, r24	; 24
#endif
		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
 154:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <sec_count>
 158:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <sec_count+0x1>
 15c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec_count+0x2>
 160:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sec_count+0x3>
 164:	2a e0       	ldi	r18, 0x0A	; 10
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	07 d1       	rcall	.+526    	; 0x37c <__udivmodsi4>
 16e:	ca 01       	movw	r24, r20
 170:	b9 01       	movw	r22, r18
 172:	26 e0       	ldi	r18, 0x06	; 6
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	00 d1       	rcall	.+512    	; 0x37c <__udivmodsi4>
 17c:	e1 e0       	ldi	r30, 0x01	; 1
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	ec 0f       	add	r30, r28
 182:	fd 1f       	adc	r31, r29
 184:	e6 0f       	add	r30, r22
 186:	f7 1f       	adc	r31, r23
 188:	80 81       	ld	r24, Z
 18a:	85 bb       	out	0x15, r24	; 21
		break;
 18c:	56 c0       	rjmp	.+172    	; 0x23a <fnd_display+0x164>
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] & fnd_font[10]; // 1단위 분
		else
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10]; // 1단위 분
		break;
#else // common cathod
		FND_DIGIT_PORT = ~0x20;
 18e:	8f ed       	ldi	r24, 0xDF	; 223
 190:	88 bb       	out	0x18, r24	; 24
		if (sec_count % 2 == 1)
 192:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <sec_count>
 196:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <sec_count+0x1>
 19a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec_count+0x2>
 19e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sec_count+0x3>
 1a2:	60 ff       	sbrs	r22, 0
 1a4:	17 c0       	rjmp	.+46     	; 0x1d4 <fnd_display+0xfe>
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
 1a6:	2c e3       	ldi	r18, 0x3C	; 60
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	e6 d0       	rcall	.+460    	; 0x37c <__udivmodsi4>
 1b0:	ca 01       	movw	r24, r20
 1b2:	b9 01       	movw	r22, r18
 1b4:	2a e0       	ldi	r18, 0x0A	; 10
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	df d0       	rcall	.+446    	; 0x37c <__udivmodsi4>
 1be:	e1 e0       	ldi	r30, 0x01	; 1
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	ec 0f       	add	r30, r28
 1c4:	fd 1f       	adc	r31, r29
 1c6:	e6 0f       	add	r30, r22
 1c8:	f7 1f       	adc	r31, r23
 1ca:	90 81       	ld	r25, Z
 1cc:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ce:	89 2b       	or	r24, r25
 1d0:	85 bb       	out	0x15, r24	; 21
 1d2:	33 c0       	rjmp	.+102    	; 0x23a <fnd_display+0x164>
		else
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10]; // 1단위 분
 1d4:	2c e3       	ldi	r18, 0x3C	; 60
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	cf d0       	rcall	.+414    	; 0x37c <__udivmodsi4>
 1de:	ca 01       	movw	r24, r20
 1e0:	b9 01       	movw	r22, r18
 1e2:	2a e0       	ldi	r18, 0x0A	; 10
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	c8 d0       	rcall	.+400    	; 0x37c <__udivmodsi4>
 1ec:	e1 e0       	ldi	r30, 0x01	; 1
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	ec 0f       	add	r30, r28
 1f2:	fd 1f       	adc	r31, r29
 1f4:	e6 0f       	add	r30, r22
 1f6:	f7 1f       	adc	r31, r23
 1f8:	80 81       	ld	r24, Z
 1fa:	85 bb       	out	0x15, r24	; 21
 1fc:	1e c0       	rjmp	.+60     	; 0x23a <fnd_display+0x164>
 1fe:	8f ee       	ldi	r24, 0xEF	; 239

		case 3 :
#if 0 // common anode
		FND_DIGIT_PORT = 0x10;
#else // common cathod
		FND_DIGIT_PORT = ~0x10;
 200:	88 bb       	out	0x18, r24	; 24
 202:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <sec_count>
#endif
		FND_DATA_PORT = fnd_font[sec_count / 600 % 6]; // 10단위 분
 206:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <sec_count+0x1>
 20a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sec_count+0x2>
 20e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sec_count+0x3>
 212:	28 e5       	ldi	r18, 0x58	; 88
 214:	32 e0       	ldi	r19, 0x02	; 2
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	b0 d0       	rcall	.+352    	; 0x37c <__udivmodsi4>
 21c:	ca 01       	movw	r24, r20
 21e:	b9 01       	movw	r22, r18
 220:	26 e0       	ldi	r18, 0x06	; 6
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	a9 d0       	rcall	.+338    	; 0x37c <__udivmodsi4>
 22a:	e1 e0       	ldi	r30, 0x01	; 1
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	ec 0f       	add	r30, r28
 230:	fd 1f       	adc	r31, r29
 232:	e6 0f       	add	r30, r22
 234:	f7 1f       	adc	r31, r23
 236:	80 81       	ld	r24, Z
 238:	85 bb       	out	0x15, r24	; 21
 23a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
		break;
	}
	digit_select++;
 23e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	83 70       	andi	r24, 0x03	; 3
	digit_select %= 4; //다음 표시할 자리수 선택
 246:	90 78       	andi	r25, 0x80	; 128
 248:	99 23       	and	r25, r25
 24a:	24 f4       	brge	.+8      	; 0x254 <fnd_display+0x17e>
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	8c 6f       	ori	r24, 0xFC	; 252
 250:	9f 6f       	ori	r25, 0xFF	; 255
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 258:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 25c:	2b 96       	adiw	r28, 0x0b	; 11
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	f8 94       	cli
 262:	de bf       	out	0x3e, r29	; 62
 264:	0f be       	out	0x3f, r0	; 63
 266:	cd bf       	out	0x3d, r28	; 61
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <fnd_main>:
 26e:	2c df       	rcall	.-424    	; 0xc8 <init_fnd>
int fnd_main(void)
{
	init_fnd();
	while(1)
	{
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
 270:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <fnd_refreshrate>
 274:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <fnd_refreshrate+0x1>
 278:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <fnd_refreshrate+0x2>
 27c:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <fnd_refreshrate+0x3>
 280:	02 97       	sbiw	r24, 0x02	; 2
 282:	a1 05       	cpc	r26, r1
 284:	b1 05       	cpc	r27, r1
 286:	48 f0       	brcs	.+18     	; 0x29a <fnd_main+0x2c>
		{
			fnd_refreshrate = 0;
 288:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <fnd_refreshrate>
 28c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <fnd_refreshrate+0x1>
 290:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <fnd_refreshrate+0x2>
 294:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <fnd_refreshrate+0x3>
			fnd_display();
 298:	1e df       	rcall	.-452    	; 0xd6 <fnd_display>
		}
		if (msec_count >= 100)
 29a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <msec_count>
 29e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <msec_count+0x1>
 2a2:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <msec_count+0x2>
 2a6:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <msec_count+0x3>
 2aa:	84 36       	cpi	r24, 0x64	; 100
 2ac:	91 05       	cpc	r25, r1
 2ae:	a1 05       	cpc	r26, r1
 2b0:	b1 05       	cpc	r27, r1
 2b2:	f0 f2       	brcs	.-68     	; 0x270 <fnd_main+0x2>
		{
			msec_count = 0;
 2b4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <msec_count>
 2b8:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <msec_count+0x1>
 2bc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <msec_count+0x2>
 2c0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <msec_count+0x3>
			sec_count++;
 2c4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sec_count>
 2c8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sec_count+0x1>
 2cc:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <sec_count+0x2>
 2d0:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <sec_count+0x3>
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	a1 1d       	adc	r26, r1
 2d8:	b1 1d       	adc	r27, r1
 2da:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sec_count>
 2de:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <sec_count+0x1>
 2e2:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <sec_count+0x2>
 2e6:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <sec_count+0x3>
 2ea:	c2 cf       	rjmp	.-124    	; 0x270 <fnd_main+0x2>

000002ec <__vector_16>:
extern int fnd_main(void);

volatile uint32_t msec_count = 0;
volatile uint32_t fnd_refreshrate = 0; 
ISR(TIMER0_OVF_vect) // interrupt service routine :routine은 interrupt 서비스 함수
{
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
	TCNT0 = 6; // 6 ~ 256 : 250개 (1ms) 그래서 TCNT0를 6으로 설정
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	82 bf       	out	0x32, r24	; 50
	msec_count++; // 1ms마다 msec_count가 1씩 증가
 302:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <msec_count>
 306:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <msec_count+0x1>
 30a:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <msec_count+0x2>
 30e:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <msec_count+0x3>
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	a1 1d       	adc	r26, r1
 316:	b1 1d       	adc	r27, r1
 318:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <msec_count>
 31c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <msec_count+0x1>
 320:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <msec_count+0x2>
 324:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <msec_count+0x3>
	fnd_refreshrate++;
 328:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <fnd_refreshrate>
 32c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <fnd_refreshrate+0x1>
 330:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <fnd_refreshrate+0x2>
 334:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <fnd_refreshrate+0x3>
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	a1 1d       	adc	r26, r1
 33c:	b1 1d       	adc	r27, r1
 33e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <fnd_refreshrate>
 342:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <fnd_refreshrate+0x1>
 346:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <fnd_refreshrate+0x2>
 34a:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <fnd_refreshrate+0x3>
}
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <init_timer0>:
	}
}

void init_timer0()
{
	TCNT0 = 6; 
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	82 bf       	out	0x32, r24	; 50

	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
 364:	83 b7       	in	r24, 0x33	; 51
 366:	84 60       	ori	r24, 0x04	; 4
 368:	83 bf       	out	0x33, r24	; 51

	TIMSK |= 1 << TOIE0; 
 36a:	87 b7       	in	r24, 0x37	; 55
 36c:	81 60       	ori	r24, 0x01	; 1
 36e:	87 bf       	out	0x37, r24	; 55

	sei(); 
 370:	78 94       	sei
 372:	08 95       	ret

00000374 <main>:
	fnd_refreshrate++;
}

int main(void)
{
	init_timer0();
 374:	f5 df       	rcall	.-22     	; 0x360 <init_timer0>
	init_fnd();
 376:	a8 de       	rcall	.-688    	; 0xc8 <init_fnd>
	
	fnd_main();
 378:	7a df       	rcall	.-268    	; 0x26e <fnd_main>
 37a:	ff cf       	rjmp	.-2      	; 0x37a <main+0x6>

0000037c <__udivmodsi4>:
 37c:	a1 e2       	ldi	r26, 0x21	; 33
 37e:	1a 2e       	mov	r1, r26
 380:	aa 1b       	sub	r26, r26
 382:	bb 1b       	sub	r27, r27
 384:	fd 01       	movw	r30, r26
 386:	0d c0       	rjmp	.+26     	; 0x3a2 <__udivmodsi4_ep>

00000388 <__udivmodsi4_loop>:
 388:	aa 1f       	adc	r26, r26
 38a:	bb 1f       	adc	r27, r27
 38c:	ee 1f       	adc	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	a2 17       	cp	r26, r18
 392:	b3 07       	cpc	r27, r19
 394:	e4 07       	cpc	r30, r20
 396:	f5 07       	cpc	r31, r21
 398:	20 f0       	brcs	.+8      	; 0x3a2 <__udivmodsi4_ep>
 39a:	a2 1b       	sub	r26, r18
 39c:	b3 0b       	sbc	r27, r19
 39e:	e4 0b       	sbc	r30, r20
 3a0:	f5 0b       	sbc	r31, r21

000003a2 <__udivmodsi4_ep>:
 3a2:	66 1f       	adc	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	88 1f       	adc	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	1a 94       	dec	r1
 3ac:	69 f7       	brne	.-38     	; 0x388 <__udivmodsi4_loop>
 3ae:	60 95       	com	r22
 3b0:	70 95       	com	r23
 3b2:	80 95       	com	r24
 3b4:	90 95       	com	r25
 3b6:	9b 01       	movw	r18, r22
 3b8:	ac 01       	movw	r20, r24
 3ba:	bd 01       	movw	r22, r26
 3bc:	cf 01       	movw	r24, r30
 3be:	08 95       	ret

000003c0 <_exit>:
 3c0:	f8 94       	cli

000003c2 <__stop_program>:
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <__stop_program>
