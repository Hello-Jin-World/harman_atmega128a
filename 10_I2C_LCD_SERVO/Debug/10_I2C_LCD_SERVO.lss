
10_I2C_LCD_SERVO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000f32  00000fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000692  0080011e  0080011e  00000fe4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001040  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c6f  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011e8  00000000  00000000  00002ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fa3  00000000  00000000  000040a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  0000504c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077a  00000000  00000000  000054c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1a  00000000  00000000  00005c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	a4 c2       	rjmp	.+1352   	; 0x55e <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f9 c0       	rjmp	.+498    	; 0x234 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	89 c1       	rjmp	.+786    	; 0x35c <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	f3 c1       	rjmp	.+998    	; 0x460 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	ae e1       	ldi	r26, 0x1E	; 30
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 3b       	cpi	r26, 0xB0	; 176
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	05 d1       	rcall	.+522    	; 0x2ce <main>
  c4:	34 c7       	rjmp	.+3688   	; 0xf2e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
  c8:	20 b3       	in	r18, 0x10	; 16
  ca:	42 2f       	mov	r20, r18
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <get_button+0x10>
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <get_button+0xc>
  dc:	24 23       	and	r18, r20
  de:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
  e0:	21 15       	cp	r18, r1
  e2:	31 05       	cpc	r19, r1
  e4:	b9 f0       	breq	.+46     	; 0x114 <get_button+0x4c>
  e6:	fc 01       	movw	r30, r24
  e8:	e2 5e       	subi	r30, 0xE2	; 226
  ea:	fe 4f       	sbci	r31, 0xFE	; 254
  ec:	40 81       	ld	r20, Z
  ee:	41 11       	cpse	r20, r1
  f0:	11 c0       	rjmp	.+34     	; 0x114 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	3d ee       	ldi	r19, 0xED	; 237
  f6:	42 e0       	ldi	r20, 0x02	; 2
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	30 40       	sbci	r19, 0x00	; 0
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <get_button+0x30>
 100:	00 c0       	rjmp	.+0      	; 0x102 <get_button+0x3a>
 102:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
 104:	fc 01       	movw	r30, r24
 106:	e2 5e       	subi	r30, 0xE2	; 226
 108:	fe 4f       	sbci	r31, 0xFE	; 254
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
 114:	fc 01       	movw	r30, r24
 116:	e2 5e       	subi	r30, 0xE2	; 226
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	40 81       	ld	r20, Z
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	91 f4       	brne	.+36     	; 0x144 <get_button+0x7c>
 120:	23 2b       	or	r18, r19
 122:	99 f4       	brne	.+38     	; 0x14a <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
 124:	fc 01       	movw	r30, r24
 126:	e2 5e       	subi	r30, 0xE2	; 226
 128:	fe 4f       	sbci	r31, 0xFE	; 254
 12a:	10 82       	st	Z, r1
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	9d ee       	ldi	r25, 0xED	; 237
 130:	22 e0       	ldi	r18, 0x02	; 2
 132:	81 50       	subi	r24, 0x01	; 1
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	20 40       	sbci	r18, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <get_button+0x6a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <get_button+0x74>
 13c:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	08 95       	ret

00000150 <I2C_init>:
 */ 
#include <avr/io.h>
#include "I2C.h"

void I2C_init(unsigned int baud){
	TWBR = baud;
 150:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 154:	08 95       	ret

00000156 <I2C_start>:
}

void I2C_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 156:	84 ea       	ldi	r24, 0xA4	; 164
 158:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));  // 시작 완료 대기
 15c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 160:	88 23       	and	r24, r24
 162:	e4 f7       	brge	.-8      	; 0x15c <I2C_start+0x6>
}
 164:	08 95       	ret

00000166 <I2C_transmit>:

void I2C_transmit(uint8_t data)
{
	TWDR = data;
 166:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
 16a:	84 e8       	ldi	r24, 0x84	; 132
 16c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
 170:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 174:	88 23       	and	r24, r24
 176:	e4 f7       	brge	.-8      	; 0x170 <I2C_transmit+0xa>
}
 178:	08 95       	ret

0000017a <I2C_stop>:
	I2C_stop();
}

void I2C_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 17a:	84 e9       	ldi	r24, 0x94	; 148
 17c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 180:	08 95       	ret

00000182 <I2C_write_byte>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
}

void I2C_write_byte(uint8_t address, uint8_t data)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	d8 2f       	mov	r29, r24
 188:	c6 2f       	mov	r28, r22
	I2C_start();
 18a:	e5 df       	rcall	.-54     	; 0x156 <I2C_start>
	I2C_transmit(address);
 18c:	8d 2f       	mov	r24, r29
 18e:	eb df       	rcall	.-42     	; 0x166 <I2C_transmit>
	I2C_transmit(data);
 190:	8c 2f       	mov	r24, r28
 192:	e9 df       	rcall	.-46     	; 0x166 <I2C_transmit>
	I2C_stop();
 194:	f2 df       	rcall	.-28     	; 0x17a <I2C_stop>
 196:	df 91       	pop	r29
}
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <I2C_LCD_write_command>:
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	00 d0       	rcall	.+0      	; 0x1a4 <I2C_LCD_write_command+0x8>
 1a4:	00 d0       	rcall	.+0      	; 0x1a6 <I2C_LCD_write_command+0xa>
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	28 2f       	mov	r18, r24
 1ac:	20 7f       	andi	r18, 0xF0	; 240
 1ae:	30 e1       	ldi	r19, 0x10	; 16
 1b0:	83 9f       	mul	r24, r19
 1b2:	c0 01       	movw	r24, r0
 1b4:	11 24       	eor	r1, r1
 1b6:	92 2f       	mov	r25, r18
 1b8:	9c 60       	ori	r25, 0x0C	; 12
 1ba:	99 83       	std	Y+1, r25	; 0x01
 1bc:	28 60       	ori	r18, 0x08	; 8
 1be:	2a 83       	std	Y+2, r18	; 0x02
 1c0:	98 2f       	mov	r25, r24
 1c2:	9c 60       	ori	r25, 0x0C	; 12
 1c4:	9b 83       	std	Y+3, r25	; 0x03
 1c6:	88 60       	ori	r24, 0x08	; 8
 1c8:	8c 83       	std	Y+4, r24	; 0x04
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	0a c0       	rjmp	.+20     	; 0x1e2 <I2C_LCD_write_command+0x46>
 1ce:	e1 e0       	ldi	r30, 0x01	; 1
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ec 0f       	add	r30, r28
 1d4:	fd 1f       	adc	r31, r29
 1d6:	e1 0f       	add	r30, r17
 1d8:	f1 1d       	adc	r31, r1
 1da:	60 81       	ld	r22, Z
 1dc:	8e e4       	ldi	r24, 0x4E	; 78
 1de:	d1 df       	rcall	.-94     	; 0x182 <I2C_write_byte>
 1e0:	1f 5f       	subi	r17, 0xFF	; 255
 1e2:	14 30       	cpi	r17, 0x04	; 4
 1e4:	a0 f3       	brcs	.-24     	; 0x1ce <I2C_LCD_write_command+0x32>
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	08 95       	ret

000001f6 <I2C_LCD_init>:
}

// LCD를 초기화
void I2C_LCD_init(void)
{
	I2C_init(10000);
 1f6:	80 e1       	ldi	r24, 0x10	; 16
 1f8:	97 e2       	ldi	r25, 0x27	; 39
 1fa:	aa df       	rcall	.-172    	; 0x150 <I2C_init>
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	80 e7       	ldi	r24, 0x70	; 112
 200:	92 e0       	ldi	r25, 0x02	; 2
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <I2C_LCD_init+0xc>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <I2C_LCD_init+0x16>
 20c:	00 00       	nop
	_delay_ms(50);
	//Initialization of HD44780-based LCD (4-bit HW)
	I2C_LCD_write_command(0x33);
 20e:	83 e3       	ldi	r24, 0x33	; 51
 210:	c5 df       	rcall	.-118    	; 0x19c <I2C_LCD_write_command>
	I2C_LCD_write_command(0x32);
 212:	82 e3       	ldi	r24, 0x32	; 50
 214:	c3 df       	rcall	.-122    	; 0x19c <I2C_LCD_write_command>
	I2C_LCD_write_command(0x28);   //Function Set 4-bit mode
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	c1 df       	rcall	.-126    	; 0x19c <I2C_LCD_write_command>
	I2C_LCD_write_command(0x0c);   //Display On/Off Control
 21a:	8c e0       	ldi	r24, 0x0C	; 12
 21c:	bf df       	rcall	.-130    	; 0x19c <I2C_LCD_write_command>
	I2C_LCD_write_command(0x06);   //Entry mode set
 21e:	86 e0       	ldi	r24, 0x06	; 6
 220:	bd df       	rcall	.-134    	; 0x19c <I2C_LCD_write_command>
 222:	81 e0       	ldi	r24, 0x01	; 1
	I2C_LCD_write_command(0x01);   //Clear Display
 224:	bb df       	rcall	.-138    	; 0x19c <I2C_LCD_write_command>
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	9c e9       	ldi	r25, 0x9C	; 156
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <I2C_LCD_init+0x34>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <I2C_LCD_init+0x3a>
 230:	00 00       	nop
 232:	08 95       	ret

00000234 <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
	TCNT0=6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
 24a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <msec_count>
 24e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <msec_count+0x1>
 252:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <msec_count+0x2>
 256:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <msec_count+0x3>
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	a1 1d       	adc	r26, r1
 25e:	b1 1d       	adc	r27, r1
 260:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <msec_count>
 264:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <msec_count+0x1>
 268:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <msec_count+0x2>
 26c:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <msec_count+0x3>
	fnd_dis++;   // fnd 잔상효과 유지 하기 위한 timer 2ms
 270:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <fnd_dis>
 274:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <fnd_dis+0x1>
 278:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <fnd_dis+0x2>
 27c:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <fnd_dis+0x3>
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	a1 1d       	adc	r26, r1
 284:	b1 1d       	adc	r27, r1
 286:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <fnd_dis>
 28a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <fnd_dis+0x1>
 28e:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <fnd_dis+0x2>
 292:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <fnd_dis+0x3>
	ultrasonic_check_timer++;
 296:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ultrasonic_check_timer>
 29a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <ultrasonic_check_timer+0x1>
 29e:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <ultrasonic_check_timer+0x2>
 2a2:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <ultrasonic_check_timer+0x3>
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	a1 1d       	adc	r26, r1
 2aa:	b1 1d       	adc	r27, r1
 2ac:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ultrasonic_check_timer>
 2b0:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ultrasonic_check_timer+0x1>
 2b4:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <ultrasonic_check_timer+0x2>
 2b8:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <ultrasonic_check_timer+0x3>
}
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <main>:
{
	//init_timer0();
	//init_uart0();
	//init_uart1();
	//init_ultrasonic();
	I2C_LCD_init();
 2ce:	93 df       	rcall	.-218    	; 0x1f6 <I2C_LCD_init>
	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	90 93 ad 07 	sts	0x07AD, r25	; 0x8007ad <__iob+0x3>
 2d8:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <__iob+0x2>
	
	DDRA=0xff;   // led를 출력 모드로
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	8a bb       	out	0x1a, r24	; 26
	sei();     // 전역적으로 interrupt 허용
	

	servo_main();
 2e0:	78 94       	sei
 2e2:	12 d0       	rcall	.+36     	; 0x308 <servo_main>
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <main+0x16>

000002e6 <init_timer1>:
*/

void init_timer1(void)
{
	//모드14 고속 PWM모드
	TCCR1A |= 1 << WGM11;
 2e6:	8f b5       	in	r24, 0x2f	; 47
 2e8:	82 60       	ori	r24, 0x02	; 2
 2ea:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM12 | 1 << WGM13;	
 2ec:	8e b5       	in	r24, 0x2e	; 46
 2ee:	88 61       	ori	r24, 0x18	; 24
 2f0:	8e bd       	out	0x2e, r24	; 46

	// TOP : ICR1, 비교일치값 : OCR1A
	TCCR1A |= 1 << COM1A1;
 2f2:	8f b5       	in	r24, 0x2f	; 47
 2f4:	80 68       	ori	r24, 0x80	; 128
 2f6:	8f bd       	out	0x2f, r24	; 47
	// 분주비 설정 8 16M/8 ==> 2Mhz
	TCCR1B |= 1 << CS11 | 1 << CS10; // 분주비 64   0.0000000625 * 64 = 0.000004sec 
 2f8:	8e b5       	in	r24, 0x2e	; 46
 2fa:	83 60       	ori	r24, 0x03	; 3
 2fc:	8e bd       	out	0x2e, r24	; 46
	//TCCR1B |= 1 << CS11;
	// T = 1/f (1/16000000) => 0.0000000625sec * 8분주 ==> 0.0000005sec ==> 
	// 16bit timer이므로 최대 65535까지 count할 수 있으므로
	// 최대 65535 * 50us = 0.0327675초 (32.76ms)
	// 0.0000005 * 40000개 ==> 0.02sec(20ms)
	ICR1 = 5000; // -> 20ms 주기    0~39999
 2fe:	88 e8       	ldi	r24, 0x88	; 136
 300:	93 e1       	ldi	r25, 0x13	; 19
 302:	97 bd       	out	0x27, r25	; 39
 304:	86 bd       	out	0x26, r24	; 38
 306:	08 95       	ret

00000308 <servo_main>:
}

int servo_main(void)
{
	// servo 모터가 연결된 pin을 output mode로 설정
	DDRB |= 1 << 5;
 308:	87 b3       	in	r24, 0x17	; 23
 30a:	80 62       	ori	r24, 0x20	; 32
 30c:	87 bb       	out	0x17, r24	; 23
	init_timer1();
 30e:	eb df       	rcall	.-42     	; 0x2e6 <init_timer1>
	OCR1A = 200;
 310:	88 ec       	ldi	r24, 0xC8	; 200
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	9b bd       	out	0x2b, r25	; 43
 316:	8a bd       	out	0x2a, r24	; 42
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN))
 318:	64 e0       	ldi	r22, 0x04	; 4
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	d3 de       	rcall	.-602    	; 0xc8 <get_button>
 322:	89 2b       	or	r24, r25
 324:	21 f0       	breq	.+8      	; 0x32e <servo_main+0x26>
		{
			OCR1A = 200;
 326:	88 ec       	ldi	r24, 0xC8	; 200
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	9b bd       	out	0x2b, r25	; 43
 32c:	8a bd       	out	0x2a, r24	; 42
		}
		if (get_button(BUTTON1, BUTTON1PIN))
 32e:	65 e0       	ldi	r22, 0x05	; 5
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	c8 de       	rcall	.-624    	; 0xc8 <get_button>
 338:	89 2b       	or	r24, r25
 33a:	21 f0       	breq	.+8      	; 0x344 <servo_main+0x3c>
		{
			OCR1A = 400;
 33c:	80 e9       	ldi	r24, 0x90	; 144
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	9b bd       	out	0x2b, r25	; 43
 342:	8a bd       	out	0x2a, r24	; 42
		}
		if (get_button(BUTTON2, BUTTON2PIN))
 344:	66 e0       	ldi	r22, 0x06	; 6
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	bd de       	rcall	.-646    	; 0xc8 <get_button>
 34e:	89 2b       	or	r24, r25
 350:	19 f3       	breq	.-58     	; 0x318 <servo_main+0x10>
		{
			OCR1A = 650;
 352:	8a e8       	ldi	r24, 0x8A	; 138
 354:	92 e0       	ldi	r25, 0x02	; 2
 356:	9b bd       	out	0x2b, r25	; 43
 358:	8a bd       	out	0x2a, r24	; 42
 35a:	de cf       	rjmp	.-68     	; 0x318 <servo_main+0x10>

0000035c <__vector_18>:
	UCSR0A |= 1 << U2X0; // 2배속 통신
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	0b b6       	in	r0, 0x3b	; 59
 368:	0f 92       	push	r0
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	1f 92       	push	r1
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	8c b1       	in	r24, 0x0c	; 12
 38e:	89 83       	std	Y+1, r24	; 0x01
 390:	89 81       	ldd	r24, Y+1	; 0x01
 392:	8d 30       	cpi	r24, 0x0D	; 13
 394:	19 f0       	breq	.+6      	; 0x39c <__vector_18+0x40>
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	8a 30       	cpi	r24, 0x0A	; 10
 39a:	61 f5       	brne	.+88     	; 0x3f4 <__vector_18+0x98>
 39c:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <rear>
 3a0:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <rear+0x1>
 3a4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <i.1894>
 3a8:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <i.1894+0x1>
 3ac:	40 e5       	ldi	r20, 0x50	; 80
 3ae:	42 9f       	mul	r20, r18
 3b0:	f0 01       	movw	r30, r0
 3b2:	43 9f       	mul	r20, r19
 3b4:	f0 0d       	add	r31, r0
 3b6:	11 24       	eor	r1, r1
 3b8:	e8 5c       	subi	r30, 0xC8	; 200
 3ba:	fe 4f       	sbci	r31, 0xFE	; 254
 3bc:	e8 0f       	add	r30, r24
 3be:	f9 1f       	adc	r31, r25
 3c0:	10 82       	st	Z, r1
 3c2:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <i.1894+0x1>
 3c6:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <i.1894>
 3ca:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rear>
 3ce:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <rear+0x1>
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <rear+0x1>
 3d8:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rear>
 3dc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rear>
 3e0:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <rear+0x1>
 3e4:	6a e0       	ldi	r22, 0x0A	; 10
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	a0 d2       	rcall	.+1344   	; 0x92a <__divmodhi4>
 3ea:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <rear+0x1>
 3ee:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rear>
 3f2:	1c c0       	rjmp	.+56     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3f4:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <rear>
 3f8:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <rear+0x1>
 3fc:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <i.1894>
 400:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <i.1894+0x1>
 404:	9c 01       	movw	r18, r24
 406:	2f 5f       	subi	r18, 0xFF	; 255
 408:	3f 4f       	sbci	r19, 0xFF	; 255
 40a:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <i.1894+0x1>
 40e:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <i.1894>
 412:	49 81       	ldd	r20, Y+1	; 0x01
 414:	50 e5       	ldi	r21, 0x50	; 80
 416:	56 9f       	mul	r21, r22
 418:	90 01       	movw	r18, r0
 41a:	57 9f       	mul	r21, r23
 41c:	30 0d       	add	r19, r0
 41e:	11 24       	eor	r1, r1
 420:	28 5c       	subi	r18, 0xC8	; 200
 422:	3e 4f       	sbci	r19, 0xFE	; 254
 424:	f9 01       	movw	r30, r18
 426:	e8 0f       	add	r30, r24
 428:	f9 1f       	adc	r31, r25
 42a:	40 83       	st	Z, r20
 42c:	0f 90       	pop	r0
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	ff 91       	pop	r31
 434:	ef 91       	pop	r30
 436:	bf 91       	pop	r27
 438:	af 91       	pop	r26
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	7f 91       	pop	r23
 440:	6f 91       	pop	r22
 442:	5f 91       	pop	r21
 444:	4f 91       	pop	r20
 446:	3f 91       	pop	r19
 448:	2f 91       	pop	r18
 44a:	0f 90       	pop	r0
 44c:	0b be       	out	0x3b, r0	; 59
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
 458:	5d 9b       	sbis	0x0b, 5	; 11
 45a:	fe cf       	rjmp	.-4      	; 0x458 <UART0_transmit>
		;   // no operation NOP
	
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
 45c:	8c b9       	out	0x0c, r24	; 12
 45e:	08 95       	ret

00000460 <__vector_30>:

// BT로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART1_RX_vect)
{
 460:	1f 92       	push	r1
 462:	0f 92       	push	r0
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
 46a:	0b b6       	in	r0, 0x3b	; 59
 46c:	0f 92       	push	r0
 46e:	2f 93       	push	r18
 470:	3f 93       	push	r19
 472:	4f 93       	push	r20
 474:	5f 93       	push	r21
 476:	6f 93       	push	r22
 478:	7f 93       	push	r23
 47a:	8f 93       	push	r24
 47c:	9f 93       	push	r25
 47e:	af 93       	push	r26
 480:	bf 93       	push	r27
 482:	ef 93       	push	r30
 484:	ff 93       	push	r31
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	1f 92       	push	r1
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
 490:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 494:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	8d 30       	cpi	r24, 0x0D	; 13
 49a:	19 f0       	breq	.+6      	; 0x4a2 <__vector_30+0x42>
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	8a 30       	cpi	r24, 0x0A	; 10
 4a0:	61 f5       	brne	.+88     	; 0x4fa <__vector_30+0x9a>
	{
		rx1_buff[rear1][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
 4a2:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <rear1>
 4a6:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <rear1+0x1>
 4aa:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <i.1896>
 4ae:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <i.1896+0x1>
 4b2:	40 e5       	ldi	r20, 0x50	; 80
 4b4:	42 9f       	mul	r20, r18
 4b6:	f0 01       	movw	r30, r0
 4b8:	43 9f       	mul	r20, r19
 4ba:	f0 0d       	add	r31, r0
 4bc:	11 24       	eor	r1, r1
 4be:	e8 5a       	subi	r30, 0xA8	; 168
 4c0:	fb 4f       	sbci	r31, 0xFB	; 251
 4c2:	e8 0f       	add	r30, r24
 4c4:	f9 1f       	adc	r31, r25
 4c6:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
 4c8:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <i.1896+0x1>
 4cc:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <i.1896>
		rear1++;
 4d0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <rear1>
 4d4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <rear1+0x1>
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <rear1+0x1>
 4de:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <rear1>
		rear1 %= COMMAND_NUMBER;   // 0 ~ 9 if (rear1 >= 9) rear1 =0;
 4e2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <rear1>
 4e6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <rear1+0x1>
 4ea:	6a e0       	ldi	r22, 0x0A	; 10
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	1d d2       	rcall	.+1082   	; 0x92a <__divmodhi4>
 4f0:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <rear1+0x1>
 4f4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <rear1>
 4f8:	1c c0       	rjmp	.+56     	; 0x532 <__vector_30+0xd2>
		// !!!! 이곳에 queue full (rx1_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx1_buff[rear1][i++] = data;
 4fa:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <rear1>
 4fe:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <rear1+0x1>
 502:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <i.1896>
 506:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <i.1896+0x1>
 50a:	9c 01       	movw	r18, r24
 50c:	2f 5f       	subi	r18, 0xFF	; 255
 50e:	3f 4f       	sbci	r19, 0xFF	; 255
 510:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <i.1896+0x1>
 514:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <i.1896>
 518:	49 81       	ldd	r20, Y+1	; 0x01
 51a:	50 e5       	ldi	r21, 0x50	; 80
 51c:	56 9f       	mul	r21, r22
 51e:	90 01       	movw	r18, r0
 520:	57 9f       	mul	r21, r23
 522:	30 0d       	add	r19, r0
 524:	11 24       	eor	r1, r1
 526:	28 5a       	subi	r18, 0xA8	; 168
 528:	3b 4f       	sbci	r19, 0xFB	; 251
 52a:	f9 01       	movw	r30, r18
 52c:	e8 0f       	add	r30, r24
 52e:	f9 1f       	adc	r31, r25
 530:	40 83       	st	Z, r20
	}
		  
}
 532:	0f 90       	pop	r0
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	ff 91       	pop	r31
 53a:	ef 91       	pop	r30
 53c:	bf 91       	pop	r27
 53e:	af 91       	pop	r26
 540:	9f 91       	pop	r25
 542:	8f 91       	pop	r24
 544:	7f 91       	pop	r23
 546:	6f 91       	pop	r22
 548:	5f 91       	pop	r21
 54a:	4f 91       	pop	r20
 54c:	3f 91       	pop	r19
 54e:	2f 91       	pop	r18
 550:	0f 90       	pop	r0
 552:	0b be       	out	0x3b, r0	; 59
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <__vector_5>:
char scm[50];

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect)
{
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	0b b6       	in	r0, 0x3b	; 59
 56a:	0f 92       	push	r0
 56c:	2f 93       	push	r18
 56e:	3f 93       	push	r19
 570:	4f 93       	push	r20
 572:	5f 93       	push	r21
 574:	6f 93       	push	r22
 576:	7f 93       	push	r23
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	af 93       	push	r26
 57e:	bf 93       	push	r27
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN & (1 << ECHO))
 584:	0c 9b       	sbis	0x01, 4	; 1
 586:	03 c0       	rjmp	.+6      	; 0x58e <__vector_5+0x30>
	{
		TCNT1 = 0;
 588:	1d bc       	out	0x2d, r1	; 45
 58a:	1c bc       	out	0x2c, r1	; 44
 58c:	31 c0       	rjmp	.+98     	; 0x5f0 <__vector_5+0x92>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
 58e:	6c b5       	in	r22, 0x2c	; 44
 590:	7d b5       	in	r23, 0x2d	; 45
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	d8 d0       	rcall	.+432    	; 0x748 <__floatunsisf>
 598:	20 e0       	ldi	r18, 0x00	; 0
 59a:	34 e2       	ldi	r19, 0x24	; 36
 59c:	44 e7       	ldi	r20, 0x74	; 116
 59e:	59 e4       	ldi	r21, 0x49	; 73
 5a0:	61 d1       	rcall	.+706    	; 0x864 <__mulsf3>
 5a2:	20 e0       	ldi	r18, 0x00	; 0
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	40 e8       	ldi	r20, 0x80	; 128
 5a8:	54 e4       	ldi	r21, 0x44	; 68
 5aa:	5c d1       	rcall	.+696    	; 0x864 <__mulsf3>
 5ac:	20 e0       	ldi	r18, 0x00	; 0
 5ae:	34 e2       	ldi	r19, 0x24	; 36
 5b0:	44 e7       	ldi	r20, 0x74	; 116
 5b2:	5b e4       	ldi	r21, 0x4B	; 75
 5b4:	30 d0       	rcall	.+96     	; 0x616 <__divsf3>
 5b6:	97 d0       	rcall	.+302    	; 0x6e6 <__fixsfsi>
 5b8:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <ultrasonic_distance+0x1>
 5bc:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <ultrasonic_distance>
		
		// 예) TCNT1에 10이 들어 있다고 가정하자
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
		sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
 5c0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <ultrasonic_distance>
 5c4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <ultrasonic_distance+0x1>
 5c8:	6a e3       	ldi	r22, 0x3A	; 58
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	ae d1       	rcall	.+860    	; 0x92a <__divmodhi4>
 5ce:	7f 93       	push	r23
 5d0:	6f 93       	push	r22
 5d2:	8e e0       	ldi	r24, 0x0E	; 14
 5d4:	91 e0       	ldi	r25, 0x01	; 1
 5d6:	9f 93       	push	r25
 5d8:	8f 93       	push	r24
 5da:	88 e7       	ldi	r24, 0x78	; 120
 5dc:	97 e0       	ldi	r25, 0x07	; 7
 5de:	9f 93       	push	r25
 5e0:	8f 93       	push	r24
 5e2:	ca d1       	rcall	.+916    	; 0x978 <sprintf>
 5e4:	0f 90       	pop	r0
 5e6:	0f 90       	pop	r0
 5e8:	0f 90       	pop	r0
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	0f 90       	pop	r0
	}
}
 5f0:	ff 91       	pop	r31
 5f2:	ef 91       	pop	r30
 5f4:	bf 91       	pop	r27
 5f6:	af 91       	pop	r26
 5f8:	9f 91       	pop	r25
 5fa:	8f 91       	pop	r24
 5fc:	7f 91       	pop	r23
 5fe:	6f 91       	pop	r22
 600:	5f 91       	pop	r21
 602:	4f 91       	pop	r20
 604:	3f 91       	pop	r19
 606:	2f 91       	pop	r18
 608:	0f 90       	pop	r0
 60a:	0b be       	out	0x3b, r0	; 59
 60c:	0f 90       	pop	r0
 60e:	0f be       	out	0x3f, r0	; 63
 610:	0f 90       	pop	r0
 612:	1f 90       	pop	r1
 614:	18 95       	reti

00000616 <__divsf3>:
 616:	0c d0       	rcall	.+24     	; 0x630 <__divsf3x>
 618:	eb c0       	rjmp	.+470    	; 0x7f0 <__fp_round>
 61a:	e3 d0       	rcall	.+454    	; 0x7e2 <__fp_pscB>
 61c:	40 f0       	brcs	.+16     	; 0x62e <__divsf3+0x18>
 61e:	da d0       	rcall	.+436    	; 0x7d4 <__fp_pscA>
 620:	30 f0       	brcs	.+12     	; 0x62e <__divsf3+0x18>
 622:	21 f4       	brne	.+8      	; 0x62c <__divsf3+0x16>
 624:	5f 3f       	cpi	r21, 0xFF	; 255
 626:	19 f0       	breq	.+6      	; 0x62e <__divsf3+0x18>
 628:	cc c0       	rjmp	.+408    	; 0x7c2 <__fp_inf>
 62a:	51 11       	cpse	r21, r1
 62c:	15 c1       	rjmp	.+554    	; 0x858 <__fp_szero>
 62e:	cf c0       	rjmp	.+414    	; 0x7ce <__fp_nan>

00000630 <__divsf3x>:
 630:	f0 d0       	rcall	.+480    	; 0x812 <__fp_split3>
 632:	98 f3       	brcs	.-26     	; 0x61a <__divsf3+0x4>

00000634 <__divsf3_pse>:
 634:	99 23       	and	r25, r25
 636:	c9 f3       	breq	.-14     	; 0x62a <__divsf3+0x14>
 638:	55 23       	and	r21, r21
 63a:	b1 f3       	breq	.-20     	; 0x628 <__divsf3+0x12>
 63c:	95 1b       	sub	r25, r21
 63e:	55 0b       	sbc	r21, r21
 640:	bb 27       	eor	r27, r27
 642:	aa 27       	eor	r26, r26
 644:	62 17       	cp	r22, r18
 646:	73 07       	cpc	r23, r19
 648:	84 07       	cpc	r24, r20
 64a:	38 f0       	brcs	.+14     	; 0x65a <__divsf3_pse+0x26>
 64c:	9f 5f       	subi	r25, 0xFF	; 255
 64e:	5f 4f       	sbci	r21, 0xFF	; 255
 650:	22 0f       	add	r18, r18
 652:	33 1f       	adc	r19, r19
 654:	44 1f       	adc	r20, r20
 656:	aa 1f       	adc	r26, r26
 658:	a9 f3       	breq	.-22     	; 0x644 <__divsf3_pse+0x10>
 65a:	33 d0       	rcall	.+102    	; 0x6c2 <__divsf3_pse+0x8e>
 65c:	0e 2e       	mov	r0, r30
 65e:	3a f0       	brmi	.+14     	; 0x66e <__divsf3_pse+0x3a>
 660:	e0 e8       	ldi	r30, 0x80	; 128
 662:	30 d0       	rcall	.+96     	; 0x6c4 <__divsf3_pse+0x90>
 664:	91 50       	subi	r25, 0x01	; 1
 666:	50 40       	sbci	r21, 0x00	; 0
 668:	e6 95       	lsr	r30
 66a:	00 1c       	adc	r0, r0
 66c:	ca f7       	brpl	.-14     	; 0x660 <__divsf3_pse+0x2c>
 66e:	29 d0       	rcall	.+82     	; 0x6c2 <__divsf3_pse+0x8e>
 670:	fe 2f       	mov	r31, r30
 672:	27 d0       	rcall	.+78     	; 0x6c2 <__divsf3_pse+0x8e>
 674:	66 0f       	add	r22, r22
 676:	77 1f       	adc	r23, r23
 678:	88 1f       	adc	r24, r24
 67a:	bb 1f       	adc	r27, r27
 67c:	26 17       	cp	r18, r22
 67e:	37 07       	cpc	r19, r23
 680:	48 07       	cpc	r20, r24
 682:	ab 07       	cpc	r26, r27
 684:	b0 e8       	ldi	r27, 0x80	; 128
 686:	09 f0       	breq	.+2      	; 0x68a <__divsf3_pse+0x56>
 688:	bb 0b       	sbc	r27, r27
 68a:	80 2d       	mov	r24, r0
 68c:	bf 01       	movw	r22, r30
 68e:	ff 27       	eor	r31, r31
 690:	93 58       	subi	r25, 0x83	; 131
 692:	5f 4f       	sbci	r21, 0xFF	; 255
 694:	2a f0       	brmi	.+10     	; 0x6a0 <__divsf3_pse+0x6c>
 696:	9e 3f       	cpi	r25, 0xFE	; 254
 698:	51 05       	cpc	r21, r1
 69a:	68 f0       	brcs	.+26     	; 0x6b6 <__divsf3_pse+0x82>
 69c:	92 c0       	rjmp	.+292    	; 0x7c2 <__fp_inf>
 69e:	dc c0       	rjmp	.+440    	; 0x858 <__fp_szero>
 6a0:	5f 3f       	cpi	r21, 0xFF	; 255
 6a2:	ec f3       	brlt	.-6      	; 0x69e <__divsf3_pse+0x6a>
 6a4:	98 3e       	cpi	r25, 0xE8	; 232
 6a6:	dc f3       	brlt	.-10     	; 0x69e <__divsf3_pse+0x6a>
 6a8:	86 95       	lsr	r24
 6aa:	77 95       	ror	r23
 6ac:	67 95       	ror	r22
 6ae:	b7 95       	ror	r27
 6b0:	f7 95       	ror	r31
 6b2:	9f 5f       	subi	r25, 0xFF	; 255
 6b4:	c9 f7       	brne	.-14     	; 0x6a8 <__divsf3_pse+0x74>
 6b6:	88 0f       	add	r24, r24
 6b8:	91 1d       	adc	r25, r1
 6ba:	96 95       	lsr	r25
 6bc:	87 95       	ror	r24
 6be:	97 f9       	bld	r25, 7
 6c0:	08 95       	ret
 6c2:	e1 e0       	ldi	r30, 0x01	; 1
 6c4:	66 0f       	add	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	88 1f       	adc	r24, r24
 6ca:	bb 1f       	adc	r27, r27
 6cc:	62 17       	cp	r22, r18
 6ce:	73 07       	cpc	r23, r19
 6d0:	84 07       	cpc	r24, r20
 6d2:	ba 07       	cpc	r27, r26
 6d4:	20 f0       	brcs	.+8      	; 0x6de <__divsf3_pse+0xaa>
 6d6:	62 1b       	sub	r22, r18
 6d8:	73 0b       	sbc	r23, r19
 6da:	84 0b       	sbc	r24, r20
 6dc:	ba 0b       	sbc	r27, r26
 6de:	ee 1f       	adc	r30, r30
 6e0:	88 f7       	brcc	.-30     	; 0x6c4 <__divsf3_pse+0x90>
 6e2:	e0 95       	com	r30
 6e4:	08 95       	ret

000006e6 <__fixsfsi>:
 6e6:	04 d0       	rcall	.+8      	; 0x6f0 <__fixunssfsi>
 6e8:	68 94       	set
 6ea:	b1 11       	cpse	r27, r1
 6ec:	b5 c0       	rjmp	.+362    	; 0x858 <__fp_szero>
 6ee:	08 95       	ret

000006f0 <__fixunssfsi>:
 6f0:	98 d0       	rcall	.+304    	; 0x822 <__fp_splitA>
 6f2:	88 f0       	brcs	.+34     	; 0x716 <__fixunssfsi+0x26>
 6f4:	9f 57       	subi	r25, 0x7F	; 127
 6f6:	90 f0       	brcs	.+36     	; 0x71c <__fixunssfsi+0x2c>
 6f8:	b9 2f       	mov	r27, r25
 6fa:	99 27       	eor	r25, r25
 6fc:	b7 51       	subi	r27, 0x17	; 23
 6fe:	a0 f0       	brcs	.+40     	; 0x728 <__fixunssfsi+0x38>
 700:	d1 f0       	breq	.+52     	; 0x736 <__fixunssfsi+0x46>
 702:	66 0f       	add	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	88 1f       	adc	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	1a f0       	brmi	.+6      	; 0x712 <__fixunssfsi+0x22>
 70c:	ba 95       	dec	r27
 70e:	c9 f7       	brne	.-14     	; 0x702 <__fixunssfsi+0x12>
 710:	12 c0       	rjmp	.+36     	; 0x736 <__fixunssfsi+0x46>
 712:	b1 30       	cpi	r27, 0x01	; 1
 714:	81 f0       	breq	.+32     	; 0x736 <__fixunssfsi+0x46>
 716:	9f d0       	rcall	.+318    	; 0x856 <__fp_zero>
 718:	b1 e0       	ldi	r27, 0x01	; 1
 71a:	08 95       	ret
 71c:	9c c0       	rjmp	.+312    	; 0x856 <__fp_zero>
 71e:	67 2f       	mov	r22, r23
 720:	78 2f       	mov	r23, r24
 722:	88 27       	eor	r24, r24
 724:	b8 5f       	subi	r27, 0xF8	; 248
 726:	39 f0       	breq	.+14     	; 0x736 <__fixunssfsi+0x46>
 728:	b9 3f       	cpi	r27, 0xF9	; 249
 72a:	cc f3       	brlt	.-14     	; 0x71e <__fixunssfsi+0x2e>
 72c:	86 95       	lsr	r24
 72e:	77 95       	ror	r23
 730:	67 95       	ror	r22
 732:	b3 95       	inc	r27
 734:	d9 f7       	brne	.-10     	; 0x72c <__fixunssfsi+0x3c>
 736:	3e f4       	brtc	.+14     	; 0x746 <__fixunssfsi+0x56>
 738:	90 95       	com	r25
 73a:	80 95       	com	r24
 73c:	70 95       	com	r23
 73e:	61 95       	neg	r22
 740:	7f 4f       	sbci	r23, 0xFF	; 255
 742:	8f 4f       	sbci	r24, 0xFF	; 255
 744:	9f 4f       	sbci	r25, 0xFF	; 255
 746:	08 95       	ret

00000748 <__floatunsisf>:
 748:	e8 94       	clt
 74a:	09 c0       	rjmp	.+18     	; 0x75e <__floatsisf+0x12>

0000074c <__floatsisf>:
 74c:	97 fb       	bst	r25, 7
 74e:	3e f4       	brtc	.+14     	; 0x75e <__floatsisf+0x12>
 750:	90 95       	com	r25
 752:	80 95       	com	r24
 754:	70 95       	com	r23
 756:	61 95       	neg	r22
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	99 23       	and	r25, r25
 760:	a9 f0       	breq	.+42     	; 0x78c <__floatsisf+0x40>
 762:	f9 2f       	mov	r31, r25
 764:	96 e9       	ldi	r25, 0x96	; 150
 766:	bb 27       	eor	r27, r27
 768:	93 95       	inc	r25
 76a:	f6 95       	lsr	r31
 76c:	87 95       	ror	r24
 76e:	77 95       	ror	r23
 770:	67 95       	ror	r22
 772:	b7 95       	ror	r27
 774:	f1 11       	cpse	r31, r1
 776:	f8 cf       	rjmp	.-16     	; 0x768 <__floatsisf+0x1c>
 778:	fa f4       	brpl	.+62     	; 0x7b8 <__floatsisf+0x6c>
 77a:	bb 0f       	add	r27, r27
 77c:	11 f4       	brne	.+4      	; 0x782 <__floatsisf+0x36>
 77e:	60 ff       	sbrs	r22, 0
 780:	1b c0       	rjmp	.+54     	; 0x7b8 <__floatsisf+0x6c>
 782:	6f 5f       	subi	r22, 0xFF	; 255
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	16 c0       	rjmp	.+44     	; 0x7b8 <__floatsisf+0x6c>
 78c:	88 23       	and	r24, r24
 78e:	11 f0       	breq	.+4      	; 0x794 <__floatsisf+0x48>
 790:	96 e9       	ldi	r25, 0x96	; 150
 792:	11 c0       	rjmp	.+34     	; 0x7b6 <__floatsisf+0x6a>
 794:	77 23       	and	r23, r23
 796:	21 f0       	breq	.+8      	; 0x7a0 <__floatsisf+0x54>
 798:	9e e8       	ldi	r25, 0x8E	; 142
 79a:	87 2f       	mov	r24, r23
 79c:	76 2f       	mov	r23, r22
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <__floatsisf+0x5e>
 7a0:	66 23       	and	r22, r22
 7a2:	71 f0       	breq	.+28     	; 0x7c0 <__floatsisf+0x74>
 7a4:	96 e8       	ldi	r25, 0x86	; 134
 7a6:	86 2f       	mov	r24, r22
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	60 e0       	ldi	r22, 0x00	; 0
 7ac:	2a f0       	brmi	.+10     	; 0x7b8 <__floatsisf+0x6c>
 7ae:	9a 95       	dec	r25
 7b0:	66 0f       	add	r22, r22
 7b2:	77 1f       	adc	r23, r23
 7b4:	88 1f       	adc	r24, r24
 7b6:	da f7       	brpl	.-10     	; 0x7ae <__floatsisf+0x62>
 7b8:	88 0f       	add	r24, r24
 7ba:	96 95       	lsr	r25
 7bc:	87 95       	ror	r24
 7be:	97 f9       	bld	r25, 7
 7c0:	08 95       	ret

000007c2 <__fp_inf>:
 7c2:	97 f9       	bld	r25, 7
 7c4:	9f 67       	ori	r25, 0x7F	; 127
 7c6:	80 e8       	ldi	r24, 0x80	; 128
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	08 95       	ret

000007ce <__fp_nan>:
 7ce:	9f ef       	ldi	r25, 0xFF	; 255
 7d0:	80 ec       	ldi	r24, 0xC0	; 192
 7d2:	08 95       	ret

000007d4 <__fp_pscA>:
 7d4:	00 24       	eor	r0, r0
 7d6:	0a 94       	dec	r0
 7d8:	16 16       	cp	r1, r22
 7da:	17 06       	cpc	r1, r23
 7dc:	18 06       	cpc	r1, r24
 7de:	09 06       	cpc	r0, r25
 7e0:	08 95       	ret

000007e2 <__fp_pscB>:
 7e2:	00 24       	eor	r0, r0
 7e4:	0a 94       	dec	r0
 7e6:	12 16       	cp	r1, r18
 7e8:	13 06       	cpc	r1, r19
 7ea:	14 06       	cpc	r1, r20
 7ec:	05 06       	cpc	r0, r21
 7ee:	08 95       	ret

000007f0 <__fp_round>:
 7f0:	09 2e       	mov	r0, r25
 7f2:	03 94       	inc	r0
 7f4:	00 0c       	add	r0, r0
 7f6:	11 f4       	brne	.+4      	; 0x7fc <__fp_round+0xc>
 7f8:	88 23       	and	r24, r24
 7fa:	52 f0       	brmi	.+20     	; 0x810 <__fp_round+0x20>
 7fc:	bb 0f       	add	r27, r27
 7fe:	40 f4       	brcc	.+16     	; 0x810 <__fp_round+0x20>
 800:	bf 2b       	or	r27, r31
 802:	11 f4       	brne	.+4      	; 0x808 <__fp_round+0x18>
 804:	60 ff       	sbrs	r22, 0
 806:	04 c0       	rjmp	.+8      	; 0x810 <__fp_round+0x20>
 808:	6f 5f       	subi	r22, 0xFF	; 255
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	8f 4f       	sbci	r24, 0xFF	; 255
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	08 95       	ret

00000812 <__fp_split3>:
 812:	57 fd       	sbrc	r21, 7
 814:	90 58       	subi	r25, 0x80	; 128
 816:	44 0f       	add	r20, r20
 818:	55 1f       	adc	r21, r21
 81a:	59 f0       	breq	.+22     	; 0x832 <__fp_splitA+0x10>
 81c:	5f 3f       	cpi	r21, 0xFF	; 255
 81e:	71 f0       	breq	.+28     	; 0x83c <__fp_splitA+0x1a>
 820:	47 95       	ror	r20

00000822 <__fp_splitA>:
 822:	88 0f       	add	r24, r24
 824:	97 fb       	bst	r25, 7
 826:	99 1f       	adc	r25, r25
 828:	61 f0       	breq	.+24     	; 0x842 <__fp_splitA+0x20>
 82a:	9f 3f       	cpi	r25, 0xFF	; 255
 82c:	79 f0       	breq	.+30     	; 0x84c <__fp_splitA+0x2a>
 82e:	87 95       	ror	r24
 830:	08 95       	ret
 832:	12 16       	cp	r1, r18
 834:	13 06       	cpc	r1, r19
 836:	14 06       	cpc	r1, r20
 838:	55 1f       	adc	r21, r21
 83a:	f2 cf       	rjmp	.-28     	; 0x820 <__fp_split3+0xe>
 83c:	46 95       	lsr	r20
 83e:	f1 df       	rcall	.-30     	; 0x822 <__fp_splitA>
 840:	08 c0       	rjmp	.+16     	; 0x852 <__fp_splitA+0x30>
 842:	16 16       	cp	r1, r22
 844:	17 06       	cpc	r1, r23
 846:	18 06       	cpc	r1, r24
 848:	99 1f       	adc	r25, r25
 84a:	f1 cf       	rjmp	.-30     	; 0x82e <__fp_splitA+0xc>
 84c:	86 95       	lsr	r24
 84e:	71 05       	cpc	r23, r1
 850:	61 05       	cpc	r22, r1
 852:	08 94       	sec
 854:	08 95       	ret

00000856 <__fp_zero>:
 856:	e8 94       	clt

00000858 <__fp_szero>:
 858:	bb 27       	eor	r27, r27
 85a:	66 27       	eor	r22, r22
 85c:	77 27       	eor	r23, r23
 85e:	cb 01       	movw	r24, r22
 860:	97 f9       	bld	r25, 7
 862:	08 95       	ret

00000864 <__mulsf3>:
 864:	0b d0       	rcall	.+22     	; 0x87c <__mulsf3x>
 866:	c4 cf       	rjmp	.-120    	; 0x7f0 <__fp_round>
 868:	b5 df       	rcall	.-150    	; 0x7d4 <__fp_pscA>
 86a:	28 f0       	brcs	.+10     	; 0x876 <__mulsf3+0x12>
 86c:	ba df       	rcall	.-140    	; 0x7e2 <__fp_pscB>
 86e:	18 f0       	brcs	.+6      	; 0x876 <__mulsf3+0x12>
 870:	95 23       	and	r25, r21
 872:	09 f0       	breq	.+2      	; 0x876 <__mulsf3+0x12>
 874:	a6 cf       	rjmp	.-180    	; 0x7c2 <__fp_inf>
 876:	ab cf       	rjmp	.-170    	; 0x7ce <__fp_nan>
 878:	11 24       	eor	r1, r1
 87a:	ee cf       	rjmp	.-36     	; 0x858 <__fp_szero>

0000087c <__mulsf3x>:
 87c:	ca df       	rcall	.-108    	; 0x812 <__fp_split3>
 87e:	a0 f3       	brcs	.-24     	; 0x868 <__mulsf3+0x4>

00000880 <__mulsf3_pse>:
 880:	95 9f       	mul	r25, r21
 882:	d1 f3       	breq	.-12     	; 0x878 <__mulsf3+0x14>
 884:	95 0f       	add	r25, r21
 886:	50 e0       	ldi	r21, 0x00	; 0
 888:	55 1f       	adc	r21, r21
 88a:	62 9f       	mul	r22, r18
 88c:	f0 01       	movw	r30, r0
 88e:	72 9f       	mul	r23, r18
 890:	bb 27       	eor	r27, r27
 892:	f0 0d       	add	r31, r0
 894:	b1 1d       	adc	r27, r1
 896:	63 9f       	mul	r22, r19
 898:	aa 27       	eor	r26, r26
 89a:	f0 0d       	add	r31, r0
 89c:	b1 1d       	adc	r27, r1
 89e:	aa 1f       	adc	r26, r26
 8a0:	64 9f       	mul	r22, r20
 8a2:	66 27       	eor	r22, r22
 8a4:	b0 0d       	add	r27, r0
 8a6:	a1 1d       	adc	r26, r1
 8a8:	66 1f       	adc	r22, r22
 8aa:	82 9f       	mul	r24, r18
 8ac:	22 27       	eor	r18, r18
 8ae:	b0 0d       	add	r27, r0
 8b0:	a1 1d       	adc	r26, r1
 8b2:	62 1f       	adc	r22, r18
 8b4:	73 9f       	mul	r23, r19
 8b6:	b0 0d       	add	r27, r0
 8b8:	a1 1d       	adc	r26, r1
 8ba:	62 1f       	adc	r22, r18
 8bc:	83 9f       	mul	r24, r19
 8be:	a0 0d       	add	r26, r0
 8c0:	61 1d       	adc	r22, r1
 8c2:	22 1f       	adc	r18, r18
 8c4:	74 9f       	mul	r23, r20
 8c6:	33 27       	eor	r19, r19
 8c8:	a0 0d       	add	r26, r0
 8ca:	61 1d       	adc	r22, r1
 8cc:	23 1f       	adc	r18, r19
 8ce:	84 9f       	mul	r24, r20
 8d0:	60 0d       	add	r22, r0
 8d2:	21 1d       	adc	r18, r1
 8d4:	82 2f       	mov	r24, r18
 8d6:	76 2f       	mov	r23, r22
 8d8:	6a 2f       	mov	r22, r26
 8da:	11 24       	eor	r1, r1
 8dc:	9f 57       	subi	r25, 0x7F	; 127
 8de:	50 40       	sbci	r21, 0x00	; 0
 8e0:	8a f0       	brmi	.+34     	; 0x904 <__mulsf3_pse+0x84>
 8e2:	e1 f0       	breq	.+56     	; 0x91c <__mulsf3_pse+0x9c>
 8e4:	88 23       	and	r24, r24
 8e6:	4a f0       	brmi	.+18     	; 0x8fa <__mulsf3_pse+0x7a>
 8e8:	ee 0f       	add	r30, r30
 8ea:	ff 1f       	adc	r31, r31
 8ec:	bb 1f       	adc	r27, r27
 8ee:	66 1f       	adc	r22, r22
 8f0:	77 1f       	adc	r23, r23
 8f2:	88 1f       	adc	r24, r24
 8f4:	91 50       	subi	r25, 0x01	; 1
 8f6:	50 40       	sbci	r21, 0x00	; 0
 8f8:	a9 f7       	brne	.-22     	; 0x8e4 <__mulsf3_pse+0x64>
 8fa:	9e 3f       	cpi	r25, 0xFE	; 254
 8fc:	51 05       	cpc	r21, r1
 8fe:	70 f0       	brcs	.+28     	; 0x91c <__mulsf3_pse+0x9c>
 900:	60 cf       	rjmp	.-320    	; 0x7c2 <__fp_inf>
 902:	aa cf       	rjmp	.-172    	; 0x858 <__fp_szero>
 904:	5f 3f       	cpi	r21, 0xFF	; 255
 906:	ec f3       	brlt	.-6      	; 0x902 <__mulsf3_pse+0x82>
 908:	98 3e       	cpi	r25, 0xE8	; 232
 90a:	dc f3       	brlt	.-10     	; 0x902 <__mulsf3_pse+0x82>
 90c:	86 95       	lsr	r24
 90e:	77 95       	ror	r23
 910:	67 95       	ror	r22
 912:	b7 95       	ror	r27
 914:	f7 95       	ror	r31
 916:	e7 95       	ror	r30
 918:	9f 5f       	subi	r25, 0xFF	; 255
 91a:	c1 f7       	brne	.-16     	; 0x90c <__mulsf3_pse+0x8c>
 91c:	fe 2b       	or	r31, r30
 91e:	88 0f       	add	r24, r24
 920:	91 1d       	adc	r25, r1
 922:	96 95       	lsr	r25
 924:	87 95       	ror	r24
 926:	97 f9       	bld	r25, 7
 928:	08 95       	ret

0000092a <__divmodhi4>:
 92a:	97 fb       	bst	r25, 7
 92c:	07 2e       	mov	r0, r23
 92e:	16 f4       	brtc	.+4      	; 0x934 <__divmodhi4+0xa>
 930:	00 94       	com	r0
 932:	06 d0       	rcall	.+12     	; 0x940 <__divmodhi4_neg1>
 934:	77 fd       	sbrc	r23, 7
 936:	08 d0       	rcall	.+16     	; 0x948 <__divmodhi4_neg2>
 938:	0b d0       	rcall	.+22     	; 0x950 <__udivmodhi4>
 93a:	07 fc       	sbrc	r0, 7
 93c:	05 d0       	rcall	.+10     	; 0x948 <__divmodhi4_neg2>
 93e:	3e f4       	brtc	.+14     	; 0x94e <__divmodhi4_exit>

00000940 <__divmodhi4_neg1>:
 940:	90 95       	com	r25
 942:	81 95       	neg	r24
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	08 95       	ret

00000948 <__divmodhi4_neg2>:
 948:	70 95       	com	r23
 94a:	61 95       	neg	r22
 94c:	7f 4f       	sbci	r23, 0xFF	; 255

0000094e <__divmodhi4_exit>:
 94e:	08 95       	ret

00000950 <__udivmodhi4>:
 950:	aa 1b       	sub	r26, r26
 952:	bb 1b       	sub	r27, r27
 954:	51 e1       	ldi	r21, 0x11	; 17
 956:	07 c0       	rjmp	.+14     	; 0x966 <__udivmodhi4_ep>

00000958 <__udivmodhi4_loop>:
 958:	aa 1f       	adc	r26, r26
 95a:	bb 1f       	adc	r27, r27
 95c:	a6 17       	cp	r26, r22
 95e:	b7 07       	cpc	r27, r23
 960:	10 f0       	brcs	.+4      	; 0x966 <__udivmodhi4_ep>
 962:	a6 1b       	sub	r26, r22
 964:	b7 0b       	sbc	r27, r23

00000966 <__udivmodhi4_ep>:
 966:	88 1f       	adc	r24, r24
 968:	99 1f       	adc	r25, r25
 96a:	5a 95       	dec	r21
 96c:	a9 f7       	brne	.-22     	; 0x958 <__udivmodhi4_loop>
 96e:	80 95       	com	r24
 970:	90 95       	com	r25
 972:	bc 01       	movw	r22, r24
 974:	cd 01       	movw	r24, r26
 976:	08 95       	ret

00000978 <sprintf>:
 978:	0f 93       	push	r16
 97a:	1f 93       	push	r17
 97c:	cf 93       	push	r28
 97e:	df 93       	push	r29
 980:	cd b7       	in	r28, 0x3d	; 61
 982:	de b7       	in	r29, 0x3e	; 62
 984:	2e 97       	sbiw	r28, 0x0e	; 14
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	f8 94       	cli
 98a:	de bf       	out	0x3e, r29	; 62
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	cd bf       	out	0x3d, r28	; 61
 990:	0d 89       	ldd	r16, Y+21	; 0x15
 992:	1e 89       	ldd	r17, Y+22	; 0x16
 994:	86 e0       	ldi	r24, 0x06	; 6
 996:	8c 83       	std	Y+4, r24	; 0x04
 998:	1a 83       	std	Y+2, r17	; 0x02
 99a:	09 83       	std	Y+1, r16	; 0x01
 99c:	8f ef       	ldi	r24, 0xFF	; 255
 99e:	9f e7       	ldi	r25, 0x7F	; 127
 9a0:	9e 83       	std	Y+6, r25	; 0x06
 9a2:	8d 83       	std	Y+5, r24	; 0x05
 9a4:	ae 01       	movw	r20, r28
 9a6:	47 5e       	subi	r20, 0xE7	; 231
 9a8:	5f 4f       	sbci	r21, 0xFF	; 255
 9aa:	6f 89       	ldd	r22, Y+23	; 0x17
 9ac:	78 8d       	ldd	r23, Y+24	; 0x18
 9ae:	ce 01       	movw	r24, r28
 9b0:	01 96       	adiw	r24, 0x01	; 1
 9b2:	10 d0       	rcall	.+32     	; 0x9d4 <vfprintf>
 9b4:	ef 81       	ldd	r30, Y+7	; 0x07
 9b6:	f8 85       	ldd	r31, Y+8	; 0x08
 9b8:	e0 0f       	add	r30, r16
 9ba:	f1 1f       	adc	r31, r17
 9bc:	10 82       	st	Z, r1
 9be:	2e 96       	adiw	r28, 0x0e	; 14
 9c0:	0f b6       	in	r0, 0x3f	; 63
 9c2:	f8 94       	cli
 9c4:	de bf       	out	0x3e, r29	; 62
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	cd bf       	out	0x3d, r28	; 61
 9ca:	df 91       	pop	r29
 9cc:	cf 91       	pop	r28
 9ce:	1f 91       	pop	r17
 9d0:	0f 91       	pop	r16
 9d2:	08 95       	ret

000009d4 <vfprintf>:
 9d4:	2f 92       	push	r2
 9d6:	3f 92       	push	r3
 9d8:	4f 92       	push	r4
 9da:	5f 92       	push	r5
 9dc:	6f 92       	push	r6
 9de:	7f 92       	push	r7
 9e0:	8f 92       	push	r8
 9e2:	9f 92       	push	r9
 9e4:	af 92       	push	r10
 9e6:	bf 92       	push	r11
 9e8:	cf 92       	push	r12
 9ea:	df 92       	push	r13
 9ec:	ef 92       	push	r14
 9ee:	ff 92       	push	r15
 9f0:	0f 93       	push	r16
 9f2:	1f 93       	push	r17
 9f4:	cf 93       	push	r28
 9f6:	df 93       	push	r29
 9f8:	cd b7       	in	r28, 0x3d	; 61
 9fa:	de b7       	in	r29, 0x3e	; 62
 9fc:	2b 97       	sbiw	r28, 0x0b	; 11
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	f8 94       	cli
 a02:	de bf       	out	0x3e, r29	; 62
 a04:	0f be       	out	0x3f, r0	; 63
 a06:	cd bf       	out	0x3d, r28	; 61
 a08:	6c 01       	movw	r12, r24
 a0a:	7b 01       	movw	r14, r22
 a0c:	8a 01       	movw	r16, r20
 a0e:	fc 01       	movw	r30, r24
 a10:	17 82       	std	Z+7, r1	; 0x07
 a12:	16 82       	std	Z+6, r1	; 0x06
 a14:	83 81       	ldd	r24, Z+3	; 0x03
 a16:	81 ff       	sbrs	r24, 1
 a18:	bf c1       	rjmp	.+894    	; 0xd98 <vfprintf+0x3c4>
 a1a:	ce 01       	movw	r24, r28
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	3c 01       	movw	r6, r24
 a20:	f6 01       	movw	r30, r12
 a22:	93 81       	ldd	r25, Z+3	; 0x03
 a24:	f7 01       	movw	r30, r14
 a26:	93 fd       	sbrc	r25, 3
 a28:	85 91       	lpm	r24, Z+
 a2a:	93 ff       	sbrs	r25, 3
 a2c:	81 91       	ld	r24, Z+
 a2e:	7f 01       	movw	r14, r30
 a30:	88 23       	and	r24, r24
 a32:	09 f4       	brne	.+2      	; 0xa36 <vfprintf+0x62>
 a34:	ad c1       	rjmp	.+858    	; 0xd90 <vfprintf+0x3bc>
 a36:	85 32       	cpi	r24, 0x25	; 37
 a38:	39 f4       	brne	.+14     	; 0xa48 <vfprintf+0x74>
 a3a:	93 fd       	sbrc	r25, 3
 a3c:	85 91       	lpm	r24, Z+
 a3e:	93 ff       	sbrs	r25, 3
 a40:	81 91       	ld	r24, Z+
 a42:	7f 01       	movw	r14, r30
 a44:	85 32       	cpi	r24, 0x25	; 37
 a46:	21 f4       	brne	.+8      	; 0xa50 <vfprintf+0x7c>
 a48:	b6 01       	movw	r22, r12
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	d6 d1       	rcall	.+940    	; 0xdfa <fputc>
 a4e:	e8 cf       	rjmp	.-48     	; 0xa20 <vfprintf+0x4c>
 a50:	91 2c       	mov	r9, r1
 a52:	21 2c       	mov	r2, r1
 a54:	31 2c       	mov	r3, r1
 a56:	ff e1       	ldi	r31, 0x1F	; 31
 a58:	f3 15       	cp	r31, r3
 a5a:	d8 f0       	brcs	.+54     	; 0xa92 <vfprintf+0xbe>
 a5c:	8b 32       	cpi	r24, 0x2B	; 43
 a5e:	79 f0       	breq	.+30     	; 0xa7e <vfprintf+0xaa>
 a60:	38 f4       	brcc	.+14     	; 0xa70 <vfprintf+0x9c>
 a62:	80 32       	cpi	r24, 0x20	; 32
 a64:	79 f0       	breq	.+30     	; 0xa84 <vfprintf+0xb0>
 a66:	83 32       	cpi	r24, 0x23	; 35
 a68:	a1 f4       	brne	.+40     	; 0xa92 <vfprintf+0xbe>
 a6a:	23 2d       	mov	r18, r3
 a6c:	20 61       	ori	r18, 0x10	; 16
 a6e:	1d c0       	rjmp	.+58     	; 0xaaa <vfprintf+0xd6>
 a70:	8d 32       	cpi	r24, 0x2D	; 45
 a72:	61 f0       	breq	.+24     	; 0xa8c <vfprintf+0xb8>
 a74:	80 33       	cpi	r24, 0x30	; 48
 a76:	69 f4       	brne	.+26     	; 0xa92 <vfprintf+0xbe>
 a78:	23 2d       	mov	r18, r3
 a7a:	21 60       	ori	r18, 0x01	; 1
 a7c:	16 c0       	rjmp	.+44     	; 0xaaa <vfprintf+0xd6>
 a7e:	83 2d       	mov	r24, r3
 a80:	82 60       	ori	r24, 0x02	; 2
 a82:	38 2e       	mov	r3, r24
 a84:	e3 2d       	mov	r30, r3
 a86:	e4 60       	ori	r30, 0x04	; 4
 a88:	3e 2e       	mov	r3, r30
 a8a:	2a c0       	rjmp	.+84     	; 0xae0 <vfprintf+0x10c>
 a8c:	f3 2d       	mov	r31, r3
 a8e:	f8 60       	ori	r31, 0x08	; 8
 a90:	1d c0       	rjmp	.+58     	; 0xacc <vfprintf+0xf8>
 a92:	37 fc       	sbrc	r3, 7
 a94:	2d c0       	rjmp	.+90     	; 0xaf0 <vfprintf+0x11c>
 a96:	20 ed       	ldi	r18, 0xD0	; 208
 a98:	28 0f       	add	r18, r24
 a9a:	2a 30       	cpi	r18, 0x0A	; 10
 a9c:	40 f0       	brcs	.+16     	; 0xaae <vfprintf+0xda>
 a9e:	8e 32       	cpi	r24, 0x2E	; 46
 aa0:	b9 f4       	brne	.+46     	; 0xad0 <vfprintf+0xfc>
 aa2:	36 fc       	sbrc	r3, 6
 aa4:	75 c1       	rjmp	.+746    	; 0xd90 <vfprintf+0x3bc>
 aa6:	23 2d       	mov	r18, r3
 aa8:	20 64       	ori	r18, 0x40	; 64
 aaa:	32 2e       	mov	r3, r18
 aac:	19 c0       	rjmp	.+50     	; 0xae0 <vfprintf+0x10c>
 aae:	36 fe       	sbrs	r3, 6
 ab0:	06 c0       	rjmp	.+12     	; 0xabe <vfprintf+0xea>
 ab2:	8a e0       	ldi	r24, 0x0A	; 10
 ab4:	98 9e       	mul	r9, r24
 ab6:	20 0d       	add	r18, r0
 ab8:	11 24       	eor	r1, r1
 aba:	92 2e       	mov	r9, r18
 abc:	11 c0       	rjmp	.+34     	; 0xae0 <vfprintf+0x10c>
 abe:	ea e0       	ldi	r30, 0x0A	; 10
 ac0:	2e 9e       	mul	r2, r30
 ac2:	20 0d       	add	r18, r0
 ac4:	11 24       	eor	r1, r1
 ac6:	22 2e       	mov	r2, r18
 ac8:	f3 2d       	mov	r31, r3
 aca:	f0 62       	ori	r31, 0x20	; 32
 acc:	3f 2e       	mov	r3, r31
 ace:	08 c0       	rjmp	.+16     	; 0xae0 <vfprintf+0x10c>
 ad0:	8c 36       	cpi	r24, 0x6C	; 108
 ad2:	21 f4       	brne	.+8      	; 0xadc <vfprintf+0x108>
 ad4:	83 2d       	mov	r24, r3
 ad6:	80 68       	ori	r24, 0x80	; 128
 ad8:	38 2e       	mov	r3, r24
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <vfprintf+0x10c>
 adc:	88 36       	cpi	r24, 0x68	; 104
 ade:	41 f4       	brne	.+16     	; 0xaf0 <vfprintf+0x11c>
 ae0:	f7 01       	movw	r30, r14
 ae2:	93 fd       	sbrc	r25, 3
 ae4:	85 91       	lpm	r24, Z+
 ae6:	93 ff       	sbrs	r25, 3
 ae8:	81 91       	ld	r24, Z+
 aea:	7f 01       	movw	r14, r30
 aec:	81 11       	cpse	r24, r1
 aee:	b3 cf       	rjmp	.-154    	; 0xa56 <vfprintf+0x82>
 af0:	98 2f       	mov	r25, r24
 af2:	9f 7d       	andi	r25, 0xDF	; 223
 af4:	95 54       	subi	r25, 0x45	; 69
 af6:	93 30       	cpi	r25, 0x03	; 3
 af8:	28 f4       	brcc	.+10     	; 0xb04 <vfprintf+0x130>
 afa:	0c 5f       	subi	r16, 0xFC	; 252
 afc:	1f 4f       	sbci	r17, 0xFF	; 255
 afe:	9f e3       	ldi	r25, 0x3F	; 63
 b00:	99 83       	std	Y+1, r25	; 0x01
 b02:	0d c0       	rjmp	.+26     	; 0xb1e <vfprintf+0x14a>
 b04:	83 36       	cpi	r24, 0x63	; 99
 b06:	31 f0       	breq	.+12     	; 0xb14 <vfprintf+0x140>
 b08:	83 37       	cpi	r24, 0x73	; 115
 b0a:	71 f0       	breq	.+28     	; 0xb28 <vfprintf+0x154>
 b0c:	83 35       	cpi	r24, 0x53	; 83
 b0e:	09 f0       	breq	.+2      	; 0xb12 <vfprintf+0x13e>
 b10:	55 c0       	rjmp	.+170    	; 0xbbc <vfprintf+0x1e8>
 b12:	20 c0       	rjmp	.+64     	; 0xb54 <vfprintf+0x180>
 b14:	f8 01       	movw	r30, r16
 b16:	80 81       	ld	r24, Z
 b18:	89 83       	std	Y+1, r24	; 0x01
 b1a:	0e 5f       	subi	r16, 0xFE	; 254
 b1c:	1f 4f       	sbci	r17, 0xFF	; 255
 b1e:	88 24       	eor	r8, r8
 b20:	83 94       	inc	r8
 b22:	91 2c       	mov	r9, r1
 b24:	53 01       	movw	r10, r6
 b26:	12 c0       	rjmp	.+36     	; 0xb4c <vfprintf+0x178>
 b28:	28 01       	movw	r4, r16
 b2a:	f2 e0       	ldi	r31, 0x02	; 2
 b2c:	4f 0e       	add	r4, r31
 b2e:	51 1c       	adc	r5, r1
 b30:	f8 01       	movw	r30, r16
 b32:	a0 80       	ld	r10, Z
 b34:	b1 80       	ldd	r11, Z+1	; 0x01
 b36:	36 fe       	sbrs	r3, 6
 b38:	03 c0       	rjmp	.+6      	; 0xb40 <vfprintf+0x16c>
 b3a:	69 2d       	mov	r22, r9
 b3c:	70 e0       	ldi	r23, 0x00	; 0
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <vfprintf+0x170>
 b40:	6f ef       	ldi	r22, 0xFF	; 255
 b42:	7f ef       	ldi	r23, 0xFF	; 255
 b44:	c5 01       	movw	r24, r10
 b46:	4e d1       	rcall	.+668    	; 0xde4 <strnlen>
 b48:	4c 01       	movw	r8, r24
 b4a:	82 01       	movw	r16, r4
 b4c:	f3 2d       	mov	r31, r3
 b4e:	ff 77       	andi	r31, 0x7F	; 127
 b50:	3f 2e       	mov	r3, r31
 b52:	15 c0       	rjmp	.+42     	; 0xb7e <vfprintf+0x1aa>
 b54:	28 01       	movw	r4, r16
 b56:	22 e0       	ldi	r18, 0x02	; 2
 b58:	42 0e       	add	r4, r18
 b5a:	51 1c       	adc	r5, r1
 b5c:	f8 01       	movw	r30, r16
 b5e:	a0 80       	ld	r10, Z
 b60:	b1 80       	ldd	r11, Z+1	; 0x01
 b62:	36 fe       	sbrs	r3, 6
 b64:	03 c0       	rjmp	.+6      	; 0xb6c <vfprintf+0x198>
 b66:	69 2d       	mov	r22, r9
 b68:	70 e0       	ldi	r23, 0x00	; 0
 b6a:	02 c0       	rjmp	.+4      	; 0xb70 <vfprintf+0x19c>
 b6c:	6f ef       	ldi	r22, 0xFF	; 255
 b6e:	7f ef       	ldi	r23, 0xFF	; 255
 b70:	c5 01       	movw	r24, r10
 b72:	2d d1       	rcall	.+602    	; 0xdce <strnlen_P>
 b74:	4c 01       	movw	r8, r24
 b76:	f3 2d       	mov	r31, r3
 b78:	f0 68       	ori	r31, 0x80	; 128
 b7a:	3f 2e       	mov	r3, r31
 b7c:	82 01       	movw	r16, r4
 b7e:	33 fc       	sbrc	r3, 3
 b80:	19 c0       	rjmp	.+50     	; 0xbb4 <vfprintf+0x1e0>
 b82:	82 2d       	mov	r24, r2
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	88 16       	cp	r8, r24
 b88:	99 06       	cpc	r9, r25
 b8a:	a0 f4       	brcc	.+40     	; 0xbb4 <vfprintf+0x1e0>
 b8c:	b6 01       	movw	r22, r12
 b8e:	80 e2       	ldi	r24, 0x20	; 32
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	33 d1       	rcall	.+614    	; 0xdfa <fputc>
 b94:	2a 94       	dec	r2
 b96:	f5 cf       	rjmp	.-22     	; 0xb82 <vfprintf+0x1ae>
 b98:	f5 01       	movw	r30, r10
 b9a:	37 fc       	sbrc	r3, 7
 b9c:	85 91       	lpm	r24, Z+
 b9e:	37 fe       	sbrs	r3, 7
 ba0:	81 91       	ld	r24, Z+
 ba2:	5f 01       	movw	r10, r30
 ba4:	b6 01       	movw	r22, r12
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	28 d1       	rcall	.+592    	; 0xdfa <fputc>
 baa:	21 10       	cpse	r2, r1
 bac:	2a 94       	dec	r2
 bae:	21 e0       	ldi	r18, 0x01	; 1
 bb0:	82 1a       	sub	r8, r18
 bb2:	91 08       	sbc	r9, r1
 bb4:	81 14       	cp	r8, r1
 bb6:	91 04       	cpc	r9, r1
 bb8:	79 f7       	brne	.-34     	; 0xb98 <vfprintf+0x1c4>
 bba:	e1 c0       	rjmp	.+450    	; 0xd7e <vfprintf+0x3aa>
 bbc:	84 36       	cpi	r24, 0x64	; 100
 bbe:	11 f0       	breq	.+4      	; 0xbc4 <vfprintf+0x1f0>
 bc0:	89 36       	cpi	r24, 0x69	; 105
 bc2:	39 f5       	brne	.+78     	; 0xc12 <vfprintf+0x23e>
 bc4:	f8 01       	movw	r30, r16
 bc6:	37 fe       	sbrs	r3, 7
 bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <vfprintf+0x204>
 bca:	60 81       	ld	r22, Z
 bcc:	71 81       	ldd	r23, Z+1	; 0x01
 bce:	82 81       	ldd	r24, Z+2	; 0x02
 bd0:	93 81       	ldd	r25, Z+3	; 0x03
 bd2:	0c 5f       	subi	r16, 0xFC	; 252
 bd4:	1f 4f       	sbci	r17, 0xFF	; 255
 bd6:	08 c0       	rjmp	.+16     	; 0xbe8 <vfprintf+0x214>
 bd8:	60 81       	ld	r22, Z
 bda:	71 81       	ldd	r23, Z+1	; 0x01
 bdc:	07 2e       	mov	r0, r23
 bde:	00 0c       	add	r0, r0
 be0:	88 0b       	sbc	r24, r24
 be2:	99 0b       	sbc	r25, r25
 be4:	0e 5f       	subi	r16, 0xFE	; 254
 be6:	1f 4f       	sbci	r17, 0xFF	; 255
 be8:	f3 2d       	mov	r31, r3
 bea:	ff 76       	andi	r31, 0x6F	; 111
 bec:	3f 2e       	mov	r3, r31
 bee:	97 ff       	sbrs	r25, 7
 bf0:	09 c0       	rjmp	.+18     	; 0xc04 <vfprintf+0x230>
 bf2:	90 95       	com	r25
 bf4:	80 95       	com	r24
 bf6:	70 95       	com	r23
 bf8:	61 95       	neg	r22
 bfa:	7f 4f       	sbci	r23, 0xFF	; 255
 bfc:	8f 4f       	sbci	r24, 0xFF	; 255
 bfe:	9f 4f       	sbci	r25, 0xFF	; 255
 c00:	f0 68       	ori	r31, 0x80	; 128
 c02:	3f 2e       	mov	r3, r31
 c04:	2a e0       	ldi	r18, 0x0A	; 10
 c06:	30 e0       	ldi	r19, 0x00	; 0
 c08:	a3 01       	movw	r20, r6
 c0a:	33 d1       	rcall	.+614    	; 0xe72 <__ultoa_invert>
 c0c:	88 2e       	mov	r8, r24
 c0e:	86 18       	sub	r8, r6
 c10:	44 c0       	rjmp	.+136    	; 0xc9a <vfprintf+0x2c6>
 c12:	85 37       	cpi	r24, 0x75	; 117
 c14:	31 f4       	brne	.+12     	; 0xc22 <vfprintf+0x24e>
 c16:	23 2d       	mov	r18, r3
 c18:	2f 7e       	andi	r18, 0xEF	; 239
 c1a:	b2 2e       	mov	r11, r18
 c1c:	2a e0       	ldi	r18, 0x0A	; 10
 c1e:	30 e0       	ldi	r19, 0x00	; 0
 c20:	25 c0       	rjmp	.+74     	; 0xc6c <vfprintf+0x298>
 c22:	93 2d       	mov	r25, r3
 c24:	99 7f       	andi	r25, 0xF9	; 249
 c26:	b9 2e       	mov	r11, r25
 c28:	8f 36       	cpi	r24, 0x6F	; 111
 c2a:	c1 f0       	breq	.+48     	; 0xc5c <vfprintf+0x288>
 c2c:	18 f4       	brcc	.+6      	; 0xc34 <vfprintf+0x260>
 c2e:	88 35       	cpi	r24, 0x58	; 88
 c30:	79 f0       	breq	.+30     	; 0xc50 <vfprintf+0x27c>
 c32:	ae c0       	rjmp	.+348    	; 0xd90 <vfprintf+0x3bc>
 c34:	80 37       	cpi	r24, 0x70	; 112
 c36:	19 f0       	breq	.+6      	; 0xc3e <vfprintf+0x26a>
 c38:	88 37       	cpi	r24, 0x78	; 120
 c3a:	21 f0       	breq	.+8      	; 0xc44 <vfprintf+0x270>
 c3c:	a9 c0       	rjmp	.+338    	; 0xd90 <vfprintf+0x3bc>
 c3e:	e9 2f       	mov	r30, r25
 c40:	e0 61       	ori	r30, 0x10	; 16
 c42:	be 2e       	mov	r11, r30
 c44:	b4 fe       	sbrs	r11, 4
 c46:	0d c0       	rjmp	.+26     	; 0xc62 <vfprintf+0x28e>
 c48:	fb 2d       	mov	r31, r11
 c4a:	f4 60       	ori	r31, 0x04	; 4
 c4c:	bf 2e       	mov	r11, r31
 c4e:	09 c0       	rjmp	.+18     	; 0xc62 <vfprintf+0x28e>
 c50:	34 fe       	sbrs	r3, 4
 c52:	0a c0       	rjmp	.+20     	; 0xc68 <vfprintf+0x294>
 c54:	29 2f       	mov	r18, r25
 c56:	26 60       	ori	r18, 0x06	; 6
 c58:	b2 2e       	mov	r11, r18
 c5a:	06 c0       	rjmp	.+12     	; 0xc68 <vfprintf+0x294>
 c5c:	28 e0       	ldi	r18, 0x08	; 8
 c5e:	30 e0       	ldi	r19, 0x00	; 0
 c60:	05 c0       	rjmp	.+10     	; 0xc6c <vfprintf+0x298>
 c62:	20 e1       	ldi	r18, 0x10	; 16
 c64:	30 e0       	ldi	r19, 0x00	; 0
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0x298>
 c68:	20 e1       	ldi	r18, 0x10	; 16
 c6a:	32 e0       	ldi	r19, 0x02	; 2
 c6c:	f8 01       	movw	r30, r16
 c6e:	b7 fe       	sbrs	r11, 7
 c70:	07 c0       	rjmp	.+14     	; 0xc80 <vfprintf+0x2ac>
 c72:	60 81       	ld	r22, Z
 c74:	71 81       	ldd	r23, Z+1	; 0x01
 c76:	82 81       	ldd	r24, Z+2	; 0x02
 c78:	93 81       	ldd	r25, Z+3	; 0x03
 c7a:	0c 5f       	subi	r16, 0xFC	; 252
 c7c:	1f 4f       	sbci	r17, 0xFF	; 255
 c7e:	06 c0       	rjmp	.+12     	; 0xc8c <vfprintf+0x2b8>
 c80:	60 81       	ld	r22, Z
 c82:	71 81       	ldd	r23, Z+1	; 0x01
 c84:	80 e0       	ldi	r24, 0x00	; 0
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	0e 5f       	subi	r16, 0xFE	; 254
 c8a:	1f 4f       	sbci	r17, 0xFF	; 255
 c8c:	a3 01       	movw	r20, r6
 c8e:	f1 d0       	rcall	.+482    	; 0xe72 <__ultoa_invert>
 c90:	88 2e       	mov	r8, r24
 c92:	86 18       	sub	r8, r6
 c94:	fb 2d       	mov	r31, r11
 c96:	ff 77       	andi	r31, 0x7F	; 127
 c98:	3f 2e       	mov	r3, r31
 c9a:	36 fe       	sbrs	r3, 6
 c9c:	0d c0       	rjmp	.+26     	; 0xcb8 <vfprintf+0x2e4>
 c9e:	23 2d       	mov	r18, r3
 ca0:	2e 7f       	andi	r18, 0xFE	; 254
 ca2:	a2 2e       	mov	r10, r18
 ca4:	89 14       	cp	r8, r9
 ca6:	58 f4       	brcc	.+22     	; 0xcbe <vfprintf+0x2ea>
 ca8:	34 fe       	sbrs	r3, 4
 caa:	0b c0       	rjmp	.+22     	; 0xcc2 <vfprintf+0x2ee>
 cac:	32 fc       	sbrc	r3, 2
 cae:	09 c0       	rjmp	.+18     	; 0xcc2 <vfprintf+0x2ee>
 cb0:	83 2d       	mov	r24, r3
 cb2:	8e 7e       	andi	r24, 0xEE	; 238
 cb4:	a8 2e       	mov	r10, r24
 cb6:	05 c0       	rjmp	.+10     	; 0xcc2 <vfprintf+0x2ee>
 cb8:	b8 2c       	mov	r11, r8
 cba:	a3 2c       	mov	r10, r3
 cbc:	03 c0       	rjmp	.+6      	; 0xcc4 <vfprintf+0x2f0>
 cbe:	b8 2c       	mov	r11, r8
 cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <vfprintf+0x2f0>
 cc2:	b9 2c       	mov	r11, r9
 cc4:	a4 fe       	sbrs	r10, 4
 cc6:	0f c0       	rjmp	.+30     	; 0xce6 <vfprintf+0x312>
 cc8:	fe 01       	movw	r30, r28
 cca:	e8 0d       	add	r30, r8
 ccc:	f1 1d       	adc	r31, r1
 cce:	80 81       	ld	r24, Z
 cd0:	80 33       	cpi	r24, 0x30	; 48
 cd2:	21 f4       	brne	.+8      	; 0xcdc <vfprintf+0x308>
 cd4:	9a 2d       	mov	r25, r10
 cd6:	99 7e       	andi	r25, 0xE9	; 233
 cd8:	a9 2e       	mov	r10, r25
 cda:	09 c0       	rjmp	.+18     	; 0xcee <vfprintf+0x31a>
 cdc:	a2 fe       	sbrs	r10, 2
 cde:	06 c0       	rjmp	.+12     	; 0xcec <vfprintf+0x318>
 ce0:	b3 94       	inc	r11
 ce2:	b3 94       	inc	r11
 ce4:	04 c0       	rjmp	.+8      	; 0xcee <vfprintf+0x31a>
 ce6:	8a 2d       	mov	r24, r10
 ce8:	86 78       	andi	r24, 0x86	; 134
 cea:	09 f0       	breq	.+2      	; 0xcee <vfprintf+0x31a>
 cec:	b3 94       	inc	r11
 cee:	a3 fc       	sbrc	r10, 3
 cf0:	10 c0       	rjmp	.+32     	; 0xd12 <vfprintf+0x33e>
 cf2:	a0 fe       	sbrs	r10, 0
 cf4:	06 c0       	rjmp	.+12     	; 0xd02 <vfprintf+0x32e>
 cf6:	b2 14       	cp	r11, r2
 cf8:	80 f4       	brcc	.+32     	; 0xd1a <vfprintf+0x346>
 cfa:	28 0c       	add	r2, r8
 cfc:	92 2c       	mov	r9, r2
 cfe:	9b 18       	sub	r9, r11
 d00:	0d c0       	rjmp	.+26     	; 0xd1c <vfprintf+0x348>
 d02:	b2 14       	cp	r11, r2
 d04:	58 f4       	brcc	.+22     	; 0xd1c <vfprintf+0x348>
 d06:	b6 01       	movw	r22, r12
 d08:	80 e2       	ldi	r24, 0x20	; 32
 d0a:	90 e0       	ldi	r25, 0x00	; 0
 d0c:	76 d0       	rcall	.+236    	; 0xdfa <fputc>
 d0e:	b3 94       	inc	r11
 d10:	f8 cf       	rjmp	.-16     	; 0xd02 <vfprintf+0x32e>
 d12:	b2 14       	cp	r11, r2
 d14:	18 f4       	brcc	.+6      	; 0xd1c <vfprintf+0x348>
 d16:	2b 18       	sub	r2, r11
 d18:	02 c0       	rjmp	.+4      	; 0xd1e <vfprintf+0x34a>
 d1a:	98 2c       	mov	r9, r8
 d1c:	21 2c       	mov	r2, r1
 d1e:	a4 fe       	sbrs	r10, 4
 d20:	0f c0       	rjmp	.+30     	; 0xd40 <vfprintf+0x36c>
 d22:	b6 01       	movw	r22, r12
 d24:	80 e3       	ldi	r24, 0x30	; 48
 d26:	90 e0       	ldi	r25, 0x00	; 0
 d28:	68 d0       	rcall	.+208    	; 0xdfa <fputc>
 d2a:	a2 fe       	sbrs	r10, 2
 d2c:	16 c0       	rjmp	.+44     	; 0xd5a <vfprintf+0x386>
 d2e:	a1 fc       	sbrc	r10, 1
 d30:	03 c0       	rjmp	.+6      	; 0xd38 <vfprintf+0x364>
 d32:	88 e7       	ldi	r24, 0x78	; 120
 d34:	90 e0       	ldi	r25, 0x00	; 0
 d36:	02 c0       	rjmp	.+4      	; 0xd3c <vfprintf+0x368>
 d38:	88 e5       	ldi	r24, 0x58	; 88
 d3a:	90 e0       	ldi	r25, 0x00	; 0
 d3c:	b6 01       	movw	r22, r12
 d3e:	0c c0       	rjmp	.+24     	; 0xd58 <vfprintf+0x384>
 d40:	8a 2d       	mov	r24, r10
 d42:	86 78       	andi	r24, 0x86	; 134
 d44:	51 f0       	breq	.+20     	; 0xd5a <vfprintf+0x386>
 d46:	a1 fe       	sbrs	r10, 1
 d48:	02 c0       	rjmp	.+4      	; 0xd4e <vfprintf+0x37a>
 d4a:	8b e2       	ldi	r24, 0x2B	; 43
 d4c:	01 c0       	rjmp	.+2      	; 0xd50 <vfprintf+0x37c>
 d4e:	80 e2       	ldi	r24, 0x20	; 32
 d50:	a7 fc       	sbrc	r10, 7
 d52:	8d e2       	ldi	r24, 0x2D	; 45
 d54:	b6 01       	movw	r22, r12
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	50 d0       	rcall	.+160    	; 0xdfa <fputc>
 d5a:	89 14       	cp	r8, r9
 d5c:	30 f4       	brcc	.+12     	; 0xd6a <vfprintf+0x396>
 d5e:	b6 01       	movw	r22, r12
 d60:	80 e3       	ldi	r24, 0x30	; 48
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	4a d0       	rcall	.+148    	; 0xdfa <fputc>
 d66:	9a 94       	dec	r9
 d68:	f8 cf       	rjmp	.-16     	; 0xd5a <vfprintf+0x386>
 d6a:	8a 94       	dec	r8
 d6c:	f3 01       	movw	r30, r6
 d6e:	e8 0d       	add	r30, r8
 d70:	f1 1d       	adc	r31, r1
 d72:	80 81       	ld	r24, Z
 d74:	b6 01       	movw	r22, r12
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	40 d0       	rcall	.+128    	; 0xdfa <fputc>
 d7a:	81 10       	cpse	r8, r1
 d7c:	f6 cf       	rjmp	.-20     	; 0xd6a <vfprintf+0x396>
 d7e:	22 20       	and	r2, r2
 d80:	09 f4       	brne	.+2      	; 0xd84 <vfprintf+0x3b0>
 d82:	4e ce       	rjmp	.-868    	; 0xa20 <vfprintf+0x4c>
 d84:	b6 01       	movw	r22, r12
 d86:	80 e2       	ldi	r24, 0x20	; 32
 d88:	90 e0       	ldi	r25, 0x00	; 0
 d8a:	37 d0       	rcall	.+110    	; 0xdfa <fputc>
 d8c:	2a 94       	dec	r2
 d8e:	f7 cf       	rjmp	.-18     	; 0xd7e <vfprintf+0x3aa>
 d90:	f6 01       	movw	r30, r12
 d92:	86 81       	ldd	r24, Z+6	; 0x06
 d94:	97 81       	ldd	r25, Z+7	; 0x07
 d96:	02 c0       	rjmp	.+4      	; 0xd9c <vfprintf+0x3c8>
 d98:	8f ef       	ldi	r24, 0xFF	; 255
 d9a:	9f ef       	ldi	r25, 0xFF	; 255
 d9c:	2b 96       	adiw	r28, 0x0b	; 11
 d9e:	0f b6       	in	r0, 0x3f	; 63
 da0:	f8 94       	cli
 da2:	de bf       	out	0x3e, r29	; 62
 da4:	0f be       	out	0x3f, r0	; 63
 da6:	cd bf       	out	0x3d, r28	; 61
 da8:	df 91       	pop	r29
 daa:	cf 91       	pop	r28
 dac:	1f 91       	pop	r17
 dae:	0f 91       	pop	r16
 db0:	ff 90       	pop	r15
 db2:	ef 90       	pop	r14
 db4:	df 90       	pop	r13
 db6:	cf 90       	pop	r12
 db8:	bf 90       	pop	r11
 dba:	af 90       	pop	r10
 dbc:	9f 90       	pop	r9
 dbe:	8f 90       	pop	r8
 dc0:	7f 90       	pop	r7
 dc2:	6f 90       	pop	r6
 dc4:	5f 90       	pop	r5
 dc6:	4f 90       	pop	r4
 dc8:	3f 90       	pop	r3
 dca:	2f 90       	pop	r2
 dcc:	08 95       	ret

00000dce <strnlen_P>:
 dce:	fc 01       	movw	r30, r24
 dd0:	05 90       	lpm	r0, Z+
 dd2:	61 50       	subi	r22, 0x01	; 1
 dd4:	70 40       	sbci	r23, 0x00	; 0
 dd6:	01 10       	cpse	r0, r1
 dd8:	d8 f7       	brcc	.-10     	; 0xdd0 <strnlen_P+0x2>
 dda:	80 95       	com	r24
 ddc:	90 95       	com	r25
 dde:	8e 0f       	add	r24, r30
 de0:	9f 1f       	adc	r25, r31
 de2:	08 95       	ret

00000de4 <strnlen>:
 de4:	fc 01       	movw	r30, r24
 de6:	61 50       	subi	r22, 0x01	; 1
 de8:	70 40       	sbci	r23, 0x00	; 0
 dea:	01 90       	ld	r0, Z+
 dec:	01 10       	cpse	r0, r1
 dee:	d8 f7       	brcc	.-10     	; 0xde6 <strnlen+0x2>
 df0:	80 95       	com	r24
 df2:	90 95       	com	r25
 df4:	8e 0f       	add	r24, r30
 df6:	9f 1f       	adc	r25, r31
 df8:	08 95       	ret

00000dfa <fputc>:
 dfa:	0f 93       	push	r16
 dfc:	1f 93       	push	r17
 dfe:	cf 93       	push	r28
 e00:	df 93       	push	r29
 e02:	fb 01       	movw	r30, r22
 e04:	23 81       	ldd	r18, Z+3	; 0x03
 e06:	21 fd       	sbrc	r18, 1
 e08:	03 c0       	rjmp	.+6      	; 0xe10 <fputc+0x16>
 e0a:	8f ef       	ldi	r24, 0xFF	; 255
 e0c:	9f ef       	ldi	r25, 0xFF	; 255
 e0e:	2c c0       	rjmp	.+88     	; 0xe68 <fputc+0x6e>
 e10:	22 ff       	sbrs	r18, 2
 e12:	16 c0       	rjmp	.+44     	; 0xe40 <fputc+0x46>
 e14:	46 81       	ldd	r20, Z+6	; 0x06
 e16:	57 81       	ldd	r21, Z+7	; 0x07
 e18:	24 81       	ldd	r18, Z+4	; 0x04
 e1a:	35 81       	ldd	r19, Z+5	; 0x05
 e1c:	42 17       	cp	r20, r18
 e1e:	53 07       	cpc	r21, r19
 e20:	44 f4       	brge	.+16     	; 0xe32 <fputc+0x38>
 e22:	a0 81       	ld	r26, Z
 e24:	b1 81       	ldd	r27, Z+1	; 0x01
 e26:	9d 01       	movw	r18, r26
 e28:	2f 5f       	subi	r18, 0xFF	; 255
 e2a:	3f 4f       	sbci	r19, 0xFF	; 255
 e2c:	31 83       	std	Z+1, r19	; 0x01
 e2e:	20 83       	st	Z, r18
 e30:	8c 93       	st	X, r24
 e32:	26 81       	ldd	r18, Z+6	; 0x06
 e34:	37 81       	ldd	r19, Z+7	; 0x07
 e36:	2f 5f       	subi	r18, 0xFF	; 255
 e38:	3f 4f       	sbci	r19, 0xFF	; 255
 e3a:	37 83       	std	Z+7, r19	; 0x07
 e3c:	26 83       	std	Z+6, r18	; 0x06
 e3e:	14 c0       	rjmp	.+40     	; 0xe68 <fputc+0x6e>
 e40:	8b 01       	movw	r16, r22
 e42:	ec 01       	movw	r28, r24
 e44:	fb 01       	movw	r30, r22
 e46:	00 84       	ldd	r0, Z+8	; 0x08
 e48:	f1 85       	ldd	r31, Z+9	; 0x09
 e4a:	e0 2d       	mov	r30, r0
 e4c:	09 95       	icall
 e4e:	89 2b       	or	r24, r25
 e50:	e1 f6       	brne	.-72     	; 0xe0a <fputc+0x10>
 e52:	d8 01       	movw	r26, r16
 e54:	16 96       	adiw	r26, 0x06	; 6
 e56:	8d 91       	ld	r24, X+
 e58:	9c 91       	ld	r25, X
 e5a:	17 97       	sbiw	r26, 0x07	; 7
 e5c:	01 96       	adiw	r24, 0x01	; 1
 e5e:	17 96       	adiw	r26, 0x07	; 7
 e60:	9c 93       	st	X, r25
 e62:	8e 93       	st	-X, r24
 e64:	16 97       	sbiw	r26, 0x06	; 6
 e66:	ce 01       	movw	r24, r28
 e68:	df 91       	pop	r29
 e6a:	cf 91       	pop	r28
 e6c:	1f 91       	pop	r17
 e6e:	0f 91       	pop	r16
 e70:	08 95       	ret

00000e72 <__ultoa_invert>:
 e72:	fa 01       	movw	r30, r20
 e74:	aa 27       	eor	r26, r26
 e76:	28 30       	cpi	r18, 0x08	; 8
 e78:	51 f1       	breq	.+84     	; 0xece <__ultoa_invert+0x5c>
 e7a:	20 31       	cpi	r18, 0x10	; 16
 e7c:	81 f1       	breq	.+96     	; 0xede <__ultoa_invert+0x6c>
 e7e:	e8 94       	clt
 e80:	6f 93       	push	r22
 e82:	6e 7f       	andi	r22, 0xFE	; 254
 e84:	6e 5f       	subi	r22, 0xFE	; 254
 e86:	7f 4f       	sbci	r23, 0xFF	; 255
 e88:	8f 4f       	sbci	r24, 0xFF	; 255
 e8a:	9f 4f       	sbci	r25, 0xFF	; 255
 e8c:	af 4f       	sbci	r26, 0xFF	; 255
 e8e:	b1 e0       	ldi	r27, 0x01	; 1
 e90:	3e d0       	rcall	.+124    	; 0xf0e <__ultoa_invert+0x9c>
 e92:	b4 e0       	ldi	r27, 0x04	; 4
 e94:	3c d0       	rcall	.+120    	; 0xf0e <__ultoa_invert+0x9c>
 e96:	67 0f       	add	r22, r23
 e98:	78 1f       	adc	r23, r24
 e9a:	89 1f       	adc	r24, r25
 e9c:	9a 1f       	adc	r25, r26
 e9e:	a1 1d       	adc	r26, r1
 ea0:	68 0f       	add	r22, r24
 ea2:	79 1f       	adc	r23, r25
 ea4:	8a 1f       	adc	r24, r26
 ea6:	91 1d       	adc	r25, r1
 ea8:	a1 1d       	adc	r26, r1
 eaa:	6a 0f       	add	r22, r26
 eac:	71 1d       	adc	r23, r1
 eae:	81 1d       	adc	r24, r1
 eb0:	91 1d       	adc	r25, r1
 eb2:	a1 1d       	adc	r26, r1
 eb4:	20 d0       	rcall	.+64     	; 0xef6 <__ultoa_invert+0x84>
 eb6:	09 f4       	brne	.+2      	; 0xeba <__ultoa_invert+0x48>
 eb8:	68 94       	set
 eba:	3f 91       	pop	r19
 ebc:	2a e0       	ldi	r18, 0x0A	; 10
 ebe:	26 9f       	mul	r18, r22
 ec0:	11 24       	eor	r1, r1
 ec2:	30 19       	sub	r19, r0
 ec4:	30 5d       	subi	r19, 0xD0	; 208
 ec6:	31 93       	st	Z+, r19
 ec8:	de f6       	brtc	.-74     	; 0xe80 <__ultoa_invert+0xe>
 eca:	cf 01       	movw	r24, r30
 ecc:	08 95       	ret
 ece:	46 2f       	mov	r20, r22
 ed0:	47 70       	andi	r20, 0x07	; 7
 ed2:	40 5d       	subi	r20, 0xD0	; 208
 ed4:	41 93       	st	Z+, r20
 ed6:	b3 e0       	ldi	r27, 0x03	; 3
 ed8:	0f d0       	rcall	.+30     	; 0xef8 <__ultoa_invert+0x86>
 eda:	c9 f7       	brne	.-14     	; 0xece <__ultoa_invert+0x5c>
 edc:	f6 cf       	rjmp	.-20     	; 0xeca <__ultoa_invert+0x58>
 ede:	46 2f       	mov	r20, r22
 ee0:	4f 70       	andi	r20, 0x0F	; 15
 ee2:	40 5d       	subi	r20, 0xD0	; 208
 ee4:	4a 33       	cpi	r20, 0x3A	; 58
 ee6:	18 f0       	brcs	.+6      	; 0xeee <__ultoa_invert+0x7c>
 ee8:	49 5d       	subi	r20, 0xD9	; 217
 eea:	31 fd       	sbrc	r19, 1
 eec:	40 52       	subi	r20, 0x20	; 32
 eee:	41 93       	st	Z+, r20
 ef0:	02 d0       	rcall	.+4      	; 0xef6 <__ultoa_invert+0x84>
 ef2:	a9 f7       	brne	.-22     	; 0xede <__ultoa_invert+0x6c>
 ef4:	ea cf       	rjmp	.-44     	; 0xeca <__ultoa_invert+0x58>
 ef6:	b4 e0       	ldi	r27, 0x04	; 4
 ef8:	a6 95       	lsr	r26
 efa:	97 95       	ror	r25
 efc:	87 95       	ror	r24
 efe:	77 95       	ror	r23
 f00:	67 95       	ror	r22
 f02:	ba 95       	dec	r27
 f04:	c9 f7       	brne	.-14     	; 0xef8 <__ultoa_invert+0x86>
 f06:	00 97       	sbiw	r24, 0x00	; 0
 f08:	61 05       	cpc	r22, r1
 f0a:	71 05       	cpc	r23, r1
 f0c:	08 95       	ret
 f0e:	9b 01       	movw	r18, r22
 f10:	ac 01       	movw	r20, r24
 f12:	0a 2e       	mov	r0, r26
 f14:	06 94       	lsr	r0
 f16:	57 95       	ror	r21
 f18:	47 95       	ror	r20
 f1a:	37 95       	ror	r19
 f1c:	27 95       	ror	r18
 f1e:	ba 95       	dec	r27
 f20:	c9 f7       	brne	.-14     	; 0xf14 <__ultoa_invert+0xa2>
 f22:	62 0f       	add	r22, r18
 f24:	73 1f       	adc	r23, r19
 f26:	84 1f       	adc	r24, r20
 f28:	95 1f       	adc	r25, r21
 f2a:	a0 1d       	adc	r26, r0
 f2c:	08 95       	ret

00000f2e <_exit>:
 f2e:	f8 94       	cli

00000f30 <__stop_program>:
 f30:	ff cf       	rjmp	.-2      	; 0xf30 <__stop_program>
