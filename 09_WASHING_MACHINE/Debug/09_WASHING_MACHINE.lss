
09_WASHING_MACHINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  000022b2  00002346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006a8  0080017c  0080017c  000023c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000023c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022d0  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001279  00000000  00000000  00004930  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001630  00000000  00000000  00005ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000055c  00000000  00000000  000071dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009db  00000000  00000000  00007738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f75  00000000  00000000  00008113  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__vector_5>
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_16>
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__vector_18>
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_30>
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 eb       	ldi	r30, 0xB2	; 178
      a0:	f2 e2       	ldi	r31, 0x22	; 34
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 37       	cpi	r26, 0x7C	; 124
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	ac e7       	ldi	r26, 0x7C	; 124
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 32       	cpi	r26, 0x24	; 36
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 47 0a 	call	0x148e	; 0x148e <main>
      c6:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <init_button>:
// 00001111
// DDRD &= 0x0f; // 4, 5, 6, 7을 input. PORTD.4 가독성이 떨어진다.

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN | 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN);
      cc:	81 b3       	in	r24, 0x11	; 17
      ce:	8f 70       	andi	r24, 0x0F	; 15
      d0:	81 bb       	out	0x11, r24	; 17
      d2:	08 95       	ret

000000d4 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
      d4:	20 b3       	in	r18, 0x10	; 16
      d6:	42 2f       	mov	r20, r18
      d8:	50 e0       	ldi	r21, 0x00	; 0
      da:	21 e0       	ldi	r18, 0x01	; 1
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	02 c0       	rjmp	.+4      	; 0xe4 <get_button+0x10>
      e0:	22 0f       	add	r18, r18
      e2:	33 1f       	adc	r19, r19
      e4:	6a 95       	dec	r22
      e6:	e2 f7       	brpl	.-8      	; 0xe0 <get_button+0xc>
      e8:	24 23       	and	r18, r20
      ea:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
      ec:	21 15       	cp	r18, r1
      ee:	31 05       	cpc	r19, r1
      f0:	b9 f0       	breq	.+46     	; 0x120 <get_button+0x4c>
      f2:	fc 01       	movw	r30, r24
      f4:	e4 58       	subi	r30, 0x84	; 132
      f6:	fe 4f       	sbci	r31, 0xFE	; 254
      f8:	40 81       	ld	r20, Z
      fa:	41 11       	cpse	r20, r1
      fc:	11 c0       	rjmp	.+34     	; 0x120 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fe:	2f ef       	ldi	r18, 0xFF	; 255
     100:	3d ee       	ldi	r19, 0xED	; 237
     102:	42 e0       	ldi	r20, 0x02	; 2
     104:	21 50       	subi	r18, 0x01	; 1
     106:	30 40       	sbci	r19, 0x00	; 0
     108:	40 40       	sbci	r20, 0x00	; 0
     10a:	e1 f7       	brne	.-8      	; 0x104 <get_button+0x30>
     10c:	00 c0       	rjmp	.+0      	; 0x10e <get_button+0x3a>
     10e:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     110:	fc 01       	movw	r30, r24
     112:	e4 58       	subi	r30, 0x84	; 132
     114:	fe 4f       	sbci	r31, 0xFE	; 254
     116:	21 e0       	ldi	r18, 0x01	; 1
     118:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     120:	fc 01       	movw	r30, r24
     122:	e4 58       	subi	r30, 0x84	; 132
     124:	fe 4f       	sbci	r31, 0xFE	; 254
     126:	40 81       	ld	r20, Z
     128:	41 30       	cpi	r20, 0x01	; 1
     12a:	91 f4       	brne	.+36     	; 0x150 <get_button+0x7c>
     12c:	23 2b       	or	r18, r19
     12e:	99 f4       	brne	.+38     	; 0x156 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     130:	fc 01       	movw	r30, r24
     132:	e4 58       	subi	r30, 0x84	; 132
     134:	fe 4f       	sbci	r31, 0xFE	; 254
     136:	10 82       	st	Z, r1
     138:	8f ef       	ldi	r24, 0xFF	; 255
     13a:	9d ee       	ldi	r25, 0xED	; 237
     13c:	22 e0       	ldi	r18, 0x02	; 2
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	90 40       	sbci	r25, 0x00	; 0
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	e1 f7       	brne	.-8      	; 0x13e <get_button+0x6a>
     146:	00 c0       	rjmp	.+0      	; 0x148 <get_button+0x74>
     148:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	08 95       	ret
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	08 95       	ret

0000015c <main_screen>:
	}
}

void main_screen(int *main_num) // 메인 화면
{
	PORTA = 0;
     15c:	1b ba       	out	0x1b, r1	; 27
	loading_rot = 10; // NULL
     15e:	8a e0       	ldi	r24, 0x0A	; 10
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     166:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
     16a:	08 95       	ret

0000016c <dumy_fanc>:
	}
}

void dumy_fanc()
{
	PORTA = 0;
     16c:	1b ba       	out	0x1b, r1	; 27
     16e:	08 95       	ret

00000170 <init_fnd>:

////////////////////////////////////////////fnd 초기화 및 fnd 표시 함수들 ///////////////////////////////////////////////////////////

void init_fnd(void)
{
	FND_DATA_DDR = 0xff; // 출력모드로 설정
     170:	8f ef       	ldi	r24, 0xFF	; 255
     172:	84 bb       	out	0x14, r24	; 20

	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 |
     174:	87 b3       	in	r24, 0x17	; 23
     176:	80 6f       	ori	r24, 0xF0	; 240
     178:	87 bb       	out	0x17, r24	; 23
	1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4;

	FND_DATA_PORT = 0x00; // FND를 all off
     17a:	15 ba       	out	0x15, r1	; 21
     17c:	08 95       	ret

0000017e <fnd_display>:
}

void fnd_display(void)
{
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	2b 97       	sbiw	r28, 0x0b	; 11
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	f8 94       	cli
     18c:	de bf       	out	0x3e, r29	; 62
     18e:	0f be       	out	0x3f, r0	; 63
     190:	cd bf       	out	0x3d, r28	; 61
	//  0      1       2      3      4      5      6     7      8       9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
     192:	8b e0       	ldi	r24, 0x0B	; 11
     194:	e4 e3       	ldi	r30, 0x34	; 52
     196:	f1 e0       	ldi	r31, 0x01	; 1
     198:	de 01       	movw	r26, r28
     19a:	11 96       	adiw	r26, 0x01	; 1
     19c:	01 90       	ld	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	8a 95       	dec	r24
     1a2:	e1 f7       	brne	.-8      	; 0x19c <fnd_display+0x1e>

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     1a4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <digit_select.1862>
     1a8:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <digit_select.1862+0x1>
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	91 05       	cpc	r25, r1
     1b0:	21 f1       	breq	.+72     	; 0x1fa <fnd_display+0x7c>
     1b2:	1c f4       	brge	.+6      	; 0x1ba <fnd_display+0x3c>
     1b4:	89 2b       	or	r24, r25
     1b6:	41 f0       	breq	.+16     	; 0x1c8 <fnd_display+0x4a>
     1b8:	84 c0       	rjmp	.+264    	; 0x2c2 <fnd_display+0x144>
     1ba:	82 30       	cpi	r24, 0x02	; 2
     1bc:	91 05       	cpc	r25, r1
     1be:	f1 f1       	breq	.+124    	; 0x23c <fnd_display+0xbe>
     1c0:	03 97       	sbiw	r24, 0x03	; 3
     1c2:	09 f4       	brne	.+2      	; 0x1c6 <fnd_display+0x48>
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <fnd_display+0x104>
     1c6:	7d c0       	rjmp	.+250    	; 0x2c2 <fnd_display+0x144>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     1c8:	8f e7       	ldi	r24, 0x7F	; 127
     1ca:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     1cc:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <sec_count>
     1d0:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <sec_count+0x1>
     1d4:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <sec_count+0x2>
     1d8:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <sec_count+0x3>
     1dc:	2a e0       	ldi	r18, 0x0A	; 10
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	40 e0       	ldi	r20, 0x00	; 0
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__udivmodsi4>
     1e8:	e1 e0       	ldi	r30, 0x01	; 1
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	ec 0f       	add	r30, r28
     1ee:	fd 1f       	adc	r31, r29
     1f0:	e6 0f       	add	r30, r22
     1f2:	f7 1f       	adc	r31, r23
     1f4:	80 81       	ld	r24, Z
     1f6:	85 bb       	out	0x15, r24	; 21
		break;
     1f8:	64 c0       	rjmp	.+200    	; 0x2c2 <fnd_display+0x144>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     1fa:	8f eb       	ldi	r24, 0xBF	; 191
     1fc:	88 bb       	out	0x18, r24	; 24

		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     1fe:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <sec_count>
     202:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <sec_count+0x1>
     206:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <sec_count+0x2>
     20a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <sec_count+0x3>
     20e:	2a e0       	ldi	r18, 0x0A	; 10
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__udivmodsi4>
     21a:	ca 01       	movw	r24, r20
     21c:	b9 01       	movw	r22, r18
     21e:	26 e0       	ldi	r18, 0x06	; 6
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__udivmodsi4>
     22a:	e1 e0       	ldi	r30, 0x01	; 1
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	ec 0f       	add	r30, r28
     230:	fd 1f       	adc	r31, r29
     232:	e6 0f       	add	r30, r22
     234:	f7 1f       	adc	r31, r23
     236:	80 81       	ld	r24, Z
     238:	85 bb       	out	0x15, r24	; 21
		break;
     23a:	43 c0       	rjmp	.+134    	; 0x2c2 <fnd_display+0x144>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     23c:	8f ed       	ldi	r24, 0xDF	; 223
     23e:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     240:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <sec_count>
     244:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <sec_count+0x1>
     248:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <sec_count+0x2>
     24c:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <sec_count+0x3>
     250:	2c e3       	ldi	r18, 0x3C	; 60
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__udivmodsi4>
     25c:	ca 01       	movw	r24, r20
     25e:	b9 01       	movw	r22, r18
     260:	2a e0       	ldi	r18, 0x0A	; 10
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	40 e0       	ldi	r20, 0x00	; 0
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__udivmodsi4>
     26c:	e1 e0       	ldi	r30, 0x01	; 1
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	ec 0f       	add	r30, r28
     272:	fd 1f       	adc	r31, r29
     274:	e6 0f       	add	r30, r22
     276:	f7 1f       	adc	r31, r23
     278:	90 81       	ld	r25, Z
     27a:	8b 85       	ldd	r24, Y+11	; 0x0b
     27c:	89 2b       	or	r24, r25
     27e:	85 bb       	out	0x15, r24	; 21
		break;
     280:	20 c0       	rjmp	.+64     	; 0x2c2 <fnd_display+0x144>

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     282:	8f ee       	ldi	r24, 0xEF	; 239
     284:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count / 600 % 6]; // 10단위 분
     286:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <sec_count>
     28a:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <sec_count+0x1>
     28e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <sec_count+0x2>
     292:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <sec_count+0x3>
     296:	28 e5       	ldi	r18, 0x58	; 88
     298:	32 e0       	ldi	r19, 0x02	; 2
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__udivmodsi4>
     2a2:	ca 01       	movw	r24, r20
     2a4:	b9 01       	movw	r22, r18
     2a6:	26 e0       	ldi	r18, 0x06	; 6
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__udivmodsi4>
     2b2:	e1 e0       	ldi	r30, 0x01	; 1
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	ec 0f       	add	r30, r28
     2b8:	fd 1f       	adc	r31, r29
     2ba:	e6 0f       	add	r30, r22
     2bc:	f7 1f       	adc	r31, r23
     2be:	80 81       	ld	r24, Z
     2c0:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
     2c2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <digit_select.1862>
     2c6:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <digit_select.1862+0x1>
     2ca:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
     2cc:	83 70       	andi	r24, 0x03	; 3
     2ce:	90 78       	andi	r25, 0x80	; 128
     2d0:	99 23       	and	r25, r25
     2d2:	24 f4       	brge	.+8      	; 0x2dc <fnd_display+0x15e>
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	8c 6f       	ori	r24, 0xFC	; 252
     2d8:	9f 6f       	ori	r25, 0xFF	; 255
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <digit_select.1862+0x1>
     2e0:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <digit_select.1862>
}
     2e4:	2b 96       	adiw	r28, 0x0b	; 11
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <water_temperature>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////수동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
	loading_rot = 0;
     2fa:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <loading_rot+0x1>
     2fe:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <loading_rot>
	PORTA = 0x07;
     302:	87 e0       	ldi	r24, 0x07	; 7
     304:	8b bb       	out	0x1b, r24	; 27
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
     306:	8e e1       	ldi	r24, 0x1E	; 30
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	a0 e0       	ldi	r26, 0x00	; 0
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
     312:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
     316:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
     31a:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>
/////////////////////////////////////////수동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
	loading_rot = 0;
	PORTA = 0x07;
	int water_tem_toggle = 1;
     31e:	c1 e0       	ldi	r28, 0x01	; 1
     320:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     322:	66 c0       	rjmp	.+204    	; 0x3f0 <water_temperature+0xfa>
	{
		if (get_button(BUTTON2, BUTTON2PIN))
     324:	66 e0       	ldi	r22, 0x06	; 6
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	d3 de       	rcall	.-602    	; 0xd4 <get_button>
     32e:	89 2b       	or	r24, r25
     330:	99 f0       	breq	.+38     	; 0x358 <water_temperature+0x62>
		{
			sec_count -= 5;
     332:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sec_count>
     336:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <sec_count+0x1>
     33a:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <sec_count+0x2>
     33e:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <sec_count+0x3>
     342:	05 97       	sbiw	r24, 0x05	; 5
     344:	a1 09       	sbc	r26, r1
     346:	b1 09       	sbc	r27, r1
     348:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
     34c:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
     350:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
     354:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     358:	67 e0       	ldi	r22, 0x07	; 7
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	83 e0       	ldi	r24, 0x03	; 3
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	b9 de       	rcall	.-654    	; 0xd4 <get_button>
     362:	89 2b       	or	r24, r25
     364:	99 f0       	breq	.+38     	; 0x38c <water_temperature+0x96>
		{
			sec_count += 5;
     366:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sec_count>
     36a:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <sec_count+0x1>
     36e:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <sec_count+0x2>
     372:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <sec_count+0x3>
     376:	05 96       	adiw	r24, 0x05	; 5
     378:	a1 1d       	adc	r26, r1
     37a:	b1 1d       	adc	r27, r1
     37c:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
     380:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
     384:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
     388:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     38c:	65 e0       	ldi	r22, 0x05	; 5
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	9f de       	rcall	.-706    	; 0xd4 <get_button>
     396:	89 2b       	or	r24, r25
     398:	81 f0       	breq	.+32     	; 0x3ba <water_temperature+0xc4>
		{
			sec_count = 0;
     39a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <sec_count>
     39e:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sec_count+0x1>
     3a2:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <sec_count+0x2>
     3a6:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <sec_count+0x3>
			custom_wash_mode = 1;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     3b2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			water_tem_toggle = 0;
     3b6:	c0 e0       	ldi	r28, 0x00	; 0
     3b8:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     3ba:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <fnd_refreshrate>
     3be:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <fnd_refreshrate+0x1>
     3c2:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <fnd_refreshrate+0x2>
     3c6:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <fnd_refreshrate+0x3>
     3ca:	02 97       	sbiw	r24, 0x02	; 2
     3cc:	a1 05       	cpc	r26, r1
     3ce:	b1 05       	cpc	r27, r1
     3d0:	48 f0       	brcs	.+18     	; 0x3e4 <water_temperature+0xee>
		{
			fnd_refreshrate = 0;
     3d2:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <fnd_refreshrate>
     3d6:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <fnd_refreshrate+0x1>
     3da:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate+0x2>
     3de:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x3>
			fnd_display();
     3e2:	cd de       	rcall	.-614    	; 0x17e <fnd_display>
		}
		if (custom_wash_mode == 5)
     3e4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <custom_wash_mode>
     3e8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <custom_wash_mode+0x1>
     3ec:	05 97       	sbiw	r24, 0x05	; 5
     3ee:	19 f0       	breq	.+6      	; 0x3f6 <water_temperature+0x100>
	PORTA = 0x07;
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     3f0:	20 97       	sbiw	r28, 0x00	; 0
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <water_temperature+0x100>
     3f4:	97 cf       	rjmp	.-210    	; 0x324 <water_temperature+0x2e>
		if (custom_wash_mode == 5)
		{
			break;
		}
	}
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <rinse_frequency>:

void rinse_frequency() // 헹굼 횟수 조절
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
	PORTA = 0x03;
     400:	83 e0       	ldi	r24, 0x03	; 3
     402:	8b bb       	out	0x1b, r24	; 27
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 2; // deflaut 헹굼 횟수
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	a0 e0       	ldi	r26, 0x00	; 0
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
     410:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
     414:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
     418:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>
}

void rinse_frequency() // 헹굼 횟수 조절
{
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
     41c:	c1 e0       	ldi	r28, 0x01	; 1
     41e:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 2; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     420:	79 c0       	rjmp	.+242    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     422:	66 e0       	ldi	r22, 0x06	; 6
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	54 de       	rcall	.-856    	; 0xd4 <get_button>
     42c:	89 2b       	or	r24, r25
     42e:	99 f0       	breq	.+38     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		{
			sec_count -= 1;
     430:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sec_count>
     434:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <sec_count+0x1>
     438:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <sec_count+0x2>
     43c:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <sec_count+0x3>
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	a1 09       	sbc	r26, r1
     444:	b1 09       	sbc	r27, r1
     446:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
     44a:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
     44e:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
     452:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     456:	67 e0       	ldi	r22, 0x07	; 7
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	83 e0       	ldi	r24, 0x03	; 3
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	3a de       	rcall	.-908    	; 0xd4 <get_button>
     460:	89 2b       	or	r24, r25
     462:	99 f0       	breq	.+38     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
		{
			sec_count += 1;
     464:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sec_count>
     468:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <sec_count+0x1>
     46c:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <sec_count+0x2>
     470:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <sec_count+0x3>
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	a1 1d       	adc	r26, r1
     478:	b1 1d       	adc	r27, r1
     47a:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
     47e:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
     482:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
     486:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     48a:	65 e0       	ldi	r22, 0x05	; 5
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	20 de       	rcall	.-960    	; 0xd4 <get_button>
     494:	89 2b       	or	r24, r25
     496:	49 f1       	breq	.+82     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
		{
			total_wash_time += sec_count * 10; // 버튼 1누르면 횟수 * 10초를 전역변수에 저장하고 다음 단계로 간 다음 탈출
     498:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sec_count>
     49c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <sec_count+0x1>
     4a0:	9c 01       	movw	r18, r24
     4a2:	22 0f       	add	r18, r18
     4a4:	33 1f       	adc	r19, r19
     4a6:	88 0f       	add	r24, r24
     4a8:	99 1f       	adc	r25, r25
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	82 0f       	add	r24, r18
     4b4:	93 1f       	adc	r25, r19
     4b6:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <total_wash_time>
     4ba:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <total_wash_time+0x1>
     4be:	82 0f       	add	r24, r18
     4c0:	93 1f       	adc	r25, r19
     4c2:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <total_wash_time+0x1>
     4c6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <total_wash_time>
			sec_count = 0;
     4ca:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <sec_count>
     4ce:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sec_count+0x1>
     4d2:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <sec_count+0x2>
     4d6:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <sec_count+0x3>
			custom_wash_mode = 2;
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     4e2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			rinse_frequency_toggle = 0;
     4e6:	c0 e0       	ldi	r28, 0x00	; 0
     4e8:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     4ea:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <fnd_refreshrate>
     4ee:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <fnd_refreshrate+0x1>
     4f2:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <fnd_refreshrate+0x2>
     4f6:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <fnd_refreshrate+0x3>
     4fa:	02 97       	sbiw	r24, 0x02	; 2
     4fc:	a1 05       	cpc	r26, r1
     4fe:	b1 05       	cpc	r27, r1
     500:	48 f0       	brcs	.+18     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
		{
			fnd_refreshrate = 0;
     502:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <fnd_refreshrate>
     506:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <fnd_refreshrate+0x1>
     50a:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate+0x2>
     50e:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x3>
			fnd_display();
     512:	35 de       	rcall	.-918    	; 0x17e <fnd_display>
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 2; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     514:	20 97       	sbiw	r28, 0x00	; 0
     516:	09 f0       	breq	.+2      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     518:	84 cf       	rjmp	.-248    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <spindry_strength>:

void spindry_strength()
{
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
	PORTA = 0x01;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	8b bb       	out	0x1b, r24	; 27

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	a0 e0       	ldi	r26, 0x00	; 0
     52e:	b0 e0       	ldi	r27, 0x00	; 0
     530:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
     534:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
     538:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
     53c:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>

void spindry_strength()
{
	PORTA = 0x01;

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
     540:	c1 e0       	ldi	r28, 0x01	; 1
     542:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
	
	while (spindry_strength_toggle)
     544:	98 c0       	rjmp	.+304    	; 0x676 <spindry_strength+0x156>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     546:	66 e0       	ldi	r22, 0x06	; 6
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	c2 dd       	rcall	.-1148   	; 0xd4 <get_button>
     550:	89 2b       	or	r24, r25
     552:	99 f0       	breq	.+38     	; 0x57a <spindry_strength+0x5a>
		{
			sec_count -= 1;
     554:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sec_count>
     558:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <sec_count+0x1>
     55c:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <sec_count+0x2>
     560:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <sec_count+0x3>
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	a1 09       	sbc	r26, r1
     568:	b1 09       	sbc	r27, r1
     56a:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
     56e:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
     572:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
     576:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     57a:	67 e0       	ldi	r22, 0x07	; 7
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	a8 dd       	rcall	.-1200   	; 0xd4 <get_button>
     584:	89 2b       	or	r24, r25
     586:	99 f0       	breq	.+38     	; 0x5ae <spindry_strength+0x8e>
		{
			sec_count += 1;
     588:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sec_count>
     58c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <sec_count+0x1>
     590:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <sec_count+0x2>
     594:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <sec_count+0x3>
     598:	01 96       	adiw	r24, 0x01	; 1
     59a:	a1 1d       	adc	r26, r1
     59c:	b1 1d       	adc	r27, r1
     59e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
     5a2:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
     5a6:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
     5aa:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1 누르면 세팅한 강도에 맞는 회전값 반환
     5ae:	65 e0       	ldi	r22, 0x05	; 5
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	8e dd       	rcall	.-1252   	; 0xd4 <get_button>
     5b8:	89 2b       	or	r24, r25
     5ba:	09 f4       	brne	.+2      	; 0x5be <spindry_strength+0x9e>
     5bc:	47 c0       	rjmp	.+142    	; 0x64c <spindry_strength+0x12c>
		{
			if(sec_count == 1)
     5be:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sec_count>
     5c2:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <sec_count+0x1>
     5c6:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <sec_count+0x2>
     5ca:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <sec_count+0x3>
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	91 05       	cpc	r25, r1
     5d2:	a1 05       	cpc	r26, r1
     5d4:	b1 05       	cpc	r27, r1
     5d6:	39 f4       	brne	.+14     	; 0x5e6 <spindry_strength+0xc6>
			{
				spin_strength_val = 123; // duty cycle 50%
     5d8:	8b e7       	ldi	r24, 0x7B	; 123
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <spin_strength_val+0x1>
     5e0:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <spin_strength_val>
     5e4:	22 c0       	rjmp	.+68     	; 0x62a <spindry_strength+0x10a>
			}
			else if (sec_count == 2)
     5e6:	82 30       	cpi	r24, 0x02	; 2
     5e8:	91 05       	cpc	r25, r1
     5ea:	a1 05       	cpc	r26, r1
     5ec:	b1 05       	cpc	r27, r1
     5ee:	39 f4       	brne	.+14     	; 0x5fe <spindry_strength+0xde>
			{
				spin_strength_val = 160; // duty cycle 62%
     5f0:	80 ea       	ldi	r24, 0xA0	; 160
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <spin_strength_val+0x1>
     5f8:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <spin_strength_val>
     5fc:	16 c0       	rjmp	.+44     	; 0x62a <spindry_strength+0x10a>
			}
			else if (sec_count == 3)
     5fe:	83 30       	cpi	r24, 0x03	; 3
     600:	91 05       	cpc	r25, r1
     602:	a1 05       	cpc	r26, r1
     604:	b1 05       	cpc	r27, r1
     606:	39 f4       	brne	.+14     	; 0x616 <spindry_strength+0xf6>
			{
				spin_strength_val = 205; // duty cycle 80%
     608:	8d ec       	ldi	r24, 0xCD	; 205
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <spin_strength_val+0x1>
     610:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <spin_strength_val>
     614:	0a c0       	rjmp	.+20     	; 0x62a <spindry_strength+0x10a>
			}
			else if (sec_count == 4)
     616:	04 97       	sbiw	r24, 0x04	; 4
     618:	a1 05       	cpc	r26, r1
     61a:	b1 05       	cpc	r27, r1
     61c:	31 f4       	brne	.+12     	; 0x62a <spindry_strength+0x10a>
			{
				spin_strength_val = 250; // duty cycle 98%
     61e:	8a ef       	ldi	r24, 0xFA	; 250
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <spin_strength_val+0x1>
     626:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <spin_strength_val>
			}
			PORTA = 0;
     62a:	1b ba       	out	0x1b, r1	; 27
			spindry_strength_toggle = 0;
			custom_wash_mode = 3;
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     634:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			sec_count = 0;
     638:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <sec_count>
     63c:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sec_count+0x1>
     640:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <sec_count+0x2>
     644:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <sec_count+0x3>
			else if (sec_count == 4)
			{
				spin_strength_val = 250; // duty cycle 98%
			}
			PORTA = 0;
			spindry_strength_toggle = 0;
     648:	c0 e0       	ldi	r28, 0x00	; 0
     64a:	d0 e0       	ldi	r29, 0x00	; 0
			custom_wash_mode = 3;
			sec_count = 0;
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     64c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <fnd_refreshrate>
     650:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <fnd_refreshrate+0x1>
     654:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <fnd_refreshrate+0x2>
     658:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <fnd_refreshrate+0x3>
     65c:	02 97       	sbiw	r24, 0x02	; 2
     65e:	a1 05       	cpc	r26, r1
     660:	b1 05       	cpc	r27, r1
     662:	48 f0       	brcs	.+18     	; 0x676 <spindry_strength+0x156>
		{
			fnd_refreshrate = 0;
     664:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <fnd_refreshrate>
     668:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <fnd_refreshrate+0x1>
     66c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate+0x2>
     670:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x3>
			fnd_display();
     674:	84 dd       	rcall	.-1272   	; 0x17e <fnd_display>

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
	
	while (spindry_strength_toggle)
     676:	20 97       	sbiw	r28, 0x00	; 0
     678:	09 f0       	breq	.+2      	; 0x67c <spindry_strength+0x15c>
     67a:	65 cf       	rjmp	.-310    	; 0x546 <spindry_strength+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <pause_wash>:
	custom_wash_mode = 4; // end 화면으로 이동
	sec_count = 0; // 다 끝나면 끝
}

void pause_wash(int *return_enable, int *led_pause_count)
{
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	ec 01       	movw	r28, r24
     68c:	8b 01       	movw	r16, r22
	while (*return_enable == 0)
     68e:	4a c0       	rjmp	.+148    	; 0x724 <pause_wash+0xa2>
	{
		OCR3C = 0;
     690:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     694:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
		
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0 누르면 이어서 시작
     698:	64 e0       	ldi	r22, 0x04	; 4
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	19 dd       	rcall	.-1486   	; 0xd4 <get_button>
     6a2:	89 2b       	or	r24, r25
     6a4:	51 f0       	breq	.+20     	; 0x6ba <pause_wash+0x38>
		{
			*return_enable = 1;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	99 83       	std	Y+1, r25	; 0x01
     6ac:	88 83       	st	Y, r24
			custom_wash_mode = 3;
     6ae:	83 e0       	ldi	r24, 0x03	; 3
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     6b6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
		}
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 세탁 취소
     6ba:	67 e0       	ldi	r22, 0x07	; 7
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	08 dd       	rcall	.-1520   	; 0xd4 <get_button>
     6c4:	89 2b       	or	r24, r25
     6c6:	b1 f0       	breq	.+44     	; 0x6f4 <pause_wash+0x72>
		{
			*return_enable = 1;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	99 83       	std	Y+1, r25	; 0x01
     6ce:	88 83       	st	Y, r24
			OCR3C = 0;
     6d0:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     6d4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
			custom_wash_mode = 4;
     6d8:	84 e0       	ldi	r24, 0x04	; 4
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     6e0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			sec_count = 0;
     6e4:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <sec_count>
     6e8:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sec_count+0x1>
     6ec:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <sec_count+0x2>
     6f0:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <sec_count+0x3>
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     6f4:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <fnd_refreshrate>
     6f8:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <fnd_refreshrate+0x1>
     6fc:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <fnd_refreshrate+0x2>
     700:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <fnd_refreshrate+0x3>
     704:	02 97       	sbiw	r24, 0x02	; 2
     706:	a1 05       	cpc	r26, r1
     708:	b1 05       	cpc	r27, r1
     70a:	48 f0       	brcs	.+18     	; 0x71e <pause_wash+0x9c>
		{
			fnd_refreshrate = 0;
     70c:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <fnd_refreshrate>
     710:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <fnd_refreshrate+0x1>
     714:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate+0x2>
     718:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x3>
			fnd_display();
     71c:	30 dd       	rcall	.-1440   	; 0x17e <fnd_display>
		}
		PORTA = *led_pause_count;
     71e:	f8 01       	movw	r30, r16
     720:	80 81       	ld	r24, Z
     722:	8b bb       	out	0x1b, r24	; 27
	sec_count = 0; // 다 끝나면 끝
}

void pause_wash(int *return_enable, int *led_pause_count)
{
	while (*return_enable == 0)
     724:	88 81       	ld	r24, Y
     726:	99 81       	ldd	r25, Y+1	; 0x01
     728:	89 2b       	or	r24, r25
     72a:	09 f4       	brne	.+2      	; 0x72e <pause_wash+0xac>
     72c:	b1 cf       	rjmp	.-158    	; 0x690 <pause_wash+0xe>
			fnd_refreshrate = 0;
			fnd_display();
		}
		PORTA = *led_pause_count;
	}
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <fnd_ment_display>:
	digit_select++;
	digit_select %= 4; //다음 표시할 자리수 선택
}

void fnd_ment_display(int *loading_rot, int *main_ment) // 진행 로딩 상황 표시
{
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	a7 97       	sbiw	r28, 0x27	; 39
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	9c 01       	movw	r18, r24
	int a, b, c, d;
								 
	uint8_t fnd_loading_font[] =
     756:	97 e2       	ldi	r25, 0x27	; 39
     758:	ef e3       	ldi	r30, 0x3F	; 63
     75a:	f1 e0       	ldi	r31, 0x01	; 1
     75c:	de 01       	movw	r26, r28
     75e:	11 96       	adiw	r26, 0x01	; 1
     760:	01 90       	ld	r0, Z+
     762:	0d 92       	st	X+, r0
     764:	9a 95       	dec	r25
     766:	e1 f7       	brne	.-8      	; 0x760 <fnd_ment_display+0x28>
	, ~0xff, ~0xa1, ~0xaf, ~0x99	//  DRY // 26
	, ~0xff, ~0xff, ~0x8c, ~0xaf, ~0x86, ~0x8c, ~0x88, ~0xaf, ~0x86, /*~0x7f, ~0x7f, ~0x7f*/ // 30~38   prepare
//     ' '     ' '    p       r     e      p     a      r      e       .       .      .
	};  
	
	if (*loading_rot == 4) // end screen
     768:	d9 01       	movw	r26, r18
     76a:	8d 91       	ld	r24, X+
     76c:	9c 91       	ld	r25, X
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	91 05       	cpc	r25, r1
     772:	09 f4       	brne	.+2      	; 0x776 <fnd_ment_display+0x3e>
     774:	43 c0       	rjmp	.+134    	; 0x7fc <fnd_ment_display+0xc4>
	{
		a = 9; b = 13; c = 1; d = 6;
	}
	
	else if (*loading_rot == 5) // custom
     776:	85 30       	cpi	r24, 0x05	; 5
     778:	91 05       	cpc	r25, r1
     77a:	09 f4       	brne	.+2      	; 0x77e <fnd_ment_display+0x46>
     77c:	49 c0       	rjmp	.+146    	; 0x810 <fnd_ment_display+0xd8>
	{
		a = 17; b = 16; c = 15; d = 14;
	}
	else if (*loading_rot == 6) // auto
     77e:	86 30       	cpi	r24, 0x06	; 6
     780:	91 05       	cpc	r25, r1
     782:	09 f4       	brne	.+2      	; 0x786 <fnd_ment_display+0x4e>
     784:	51 c0       	rjmp	.+162    	; 0x828 <fnd_ment_display+0xf0>
	{
		a = 21; b = 20; c = 19; d = 18;
	}
	else if (*loading_rot == 7) // fast
     786:	87 30       	cpi	r24, 0x07	; 7
     788:	91 05       	cpc	r25, r1
     78a:	09 f4       	brne	.+2      	; 0x78e <fnd_ment_display+0x56>
     78c:	59 c0       	rjmp	.+178    	; 0x840 <fnd_ment_display+0x108>
	{
		a = 25; b = 24; c = 23; d = 22;
	}
	else if (*loading_rot == 8) // dry
     78e:	88 30       	cpi	r24, 0x08	; 8
     790:	91 05       	cpc	r25, r1
     792:	09 f4       	brne	.+2      	; 0x796 <fnd_ment_display+0x5e>
     794:	61 c0       	rjmp	.+194    	; 0x858 <fnd_ment_display+0x120>
	{
		a = 29; b = 28; c = 27; d = 26;
	}
	
	else if (*loading_rot == 9)
     796:	09 97       	sbiw	r24, 0x09	; 9
     798:	e1 f4       	brne	.+56     	; 0x7d2 <fnd_ment_display+0x9a>
	{
		d = *main_ment;
     79a:	db 01       	movw	r26, r22
     79c:	ed 91       	ld	r30, X+
     79e:	fc 91       	ld	r31, X
		c = d + 1; c %= 9;
     7a0:	cf 01       	movw	r24, r30
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	29 e0       	ldi	r18, 0x09	; 9
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	b9 01       	movw	r22, r18
     7aa:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__divmodhi4>
     7ae:	7c 01       	movw	r14, r24
		b = c + 1; b %= 9;
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	b9 01       	movw	r22, r18
     7b4:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__divmodhi4>
     7b8:	8c 01       	movw	r16, r24
		a = b + 1; a %= 9;
     7ba:	01 96       	adiw	r24, 0x01	; 1
     7bc:	b9 01       	movw	r22, r18
     7be:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__divmodhi4>
		a += 30; b += 30; c += 30; d += 30;
     7c2:	4e 96       	adiw	r24, 0x1e	; 30
     7c4:	02 5e       	subi	r16, 0xE2	; 226
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
     7c8:	be e1       	ldi	r27, 0x1E	; 30
     7ca:	eb 0e       	add	r14, r27
     7cc:	f1 1c       	adc	r15, r1
     7ce:	7e 96       	adiw	r30, 0x1e	; 30
     7d0:	4e c0       	rjmp	.+156    	; 0x86e <fnd_ment_display+0x136>
	}
	
	else // main screen
	{
		d = *main_ment;
     7d2:	db 01       	movw	r26, r22
     7d4:	ed 91       	ld	r30, X+
     7d6:	fc 91       	ld	r31, X
		c = d + 1; c %= 13;
     7d8:	cf 01       	movw	r24, r30
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	2d e0       	ldi	r18, 0x0D	; 13
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	b9 01       	movw	r22, r18
     7e2:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__divmodhi4>
     7e6:	7c 01       	movw	r14, r24
		b = c + 1; b %= 13;
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	b9 01       	movw	r22, r18
     7ec:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__divmodhi4>
     7f0:	8c 01       	movw	r16, r24
		a = b + 1; a %= 13;
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	b9 01       	movw	r22, r18
     7f6:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__divmodhi4>
     7fa:	39 c0       	rjmp	.+114    	; 0x86e <fnd_ment_display+0x136>
//     ' '     ' '    p       r     e      p     a      r      e       .       .      .
	};  
	
	if (*loading_rot == 4) // end screen
	{
		a = 9; b = 13; c = 1; d = 6;
     7fc:	e6 e0       	ldi	r30, 0x06	; 6
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	ee 24       	eor	r14, r14
     802:	e3 94       	inc	r14
     804:	f1 2c       	mov	r15, r1
     806:	0d e0       	ldi	r16, 0x0D	; 13
     808:	10 e0       	ldi	r17, 0x00	; 0
     80a:	89 e0       	ldi	r24, 0x09	; 9
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	2f c0       	rjmp	.+94     	; 0x86e <fnd_ment_display+0x136>
	}
	
	else if (*loading_rot == 5) // custom
	{
		a = 17; b = 16; c = 15; d = 14;
     810:	ee e0       	ldi	r30, 0x0E	; 14
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	0f 2e       	mov	r0, r31
     816:	ff e0       	ldi	r31, 0x0F	; 15
     818:	ef 2e       	mov	r14, r31
     81a:	f1 2c       	mov	r15, r1
     81c:	f0 2d       	mov	r31, r0
     81e:	00 e1       	ldi	r16, 0x10	; 16
     820:	10 e0       	ldi	r17, 0x00	; 0
     822:	81 e1       	ldi	r24, 0x11	; 17
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	23 c0       	rjmp	.+70     	; 0x86e <fnd_ment_display+0x136>
	}
	else if (*loading_rot == 6) // auto
	{
		a = 21; b = 20; c = 19; d = 18;
     828:	e2 e1       	ldi	r30, 0x12	; 18
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	0f 2e       	mov	r0, r31
     82e:	f3 e1       	ldi	r31, 0x13	; 19
     830:	ef 2e       	mov	r14, r31
     832:	f1 2c       	mov	r15, r1
     834:	f0 2d       	mov	r31, r0
     836:	04 e1       	ldi	r16, 0x14	; 20
     838:	10 e0       	ldi	r17, 0x00	; 0
     83a:	85 e1       	ldi	r24, 0x15	; 21
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	17 c0       	rjmp	.+46     	; 0x86e <fnd_ment_display+0x136>
	}
	else if (*loading_rot == 7) // fast
	{
		a = 25; b = 24; c = 23; d = 22;
     840:	e6 e1       	ldi	r30, 0x16	; 22
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	0f 2e       	mov	r0, r31
     846:	f7 e1       	ldi	r31, 0x17	; 23
     848:	ef 2e       	mov	r14, r31
     84a:	f1 2c       	mov	r15, r1
     84c:	f0 2d       	mov	r31, r0
     84e:	08 e1       	ldi	r16, 0x18	; 24
     850:	10 e0       	ldi	r17, 0x00	; 0
     852:	89 e1       	ldi	r24, 0x19	; 25
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0b c0       	rjmp	.+22     	; 0x86e <fnd_ment_display+0x136>
	}
	else if (*loading_rot == 8) // dry
	{
		a = 29; b = 28; c = 27; d = 26;
     858:	ea e1       	ldi	r30, 0x1A	; 26
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	0f 2e       	mov	r0, r31
     85e:	fb e1       	ldi	r31, 0x1B	; 27
     860:	ef 2e       	mov	r14, r31
     862:	f1 2c       	mov	r15, r1
     864:	f0 2d       	mov	r31, r0
     866:	0c e1       	ldi	r16, 0x1C	; 28
     868:	10 e0       	ldi	r17, 0x00	; 0
     86a:	8d e1       	ldi	r24, 0x1D	; 29
     86c:	90 e0       	ldi	r25, 0x00	; 0
		a = b + 1; a %= 13;
	}

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     86e:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <digit_select.1877>
     872:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <digit_select.1877+0x1>
     876:	21 30       	cpi	r18, 0x01	; 1
     878:	31 05       	cpc	r19, r1
     87a:	b1 f0       	breq	.+44     	; 0x8a8 <fnd_ment_display+0x170>
     87c:	1c f4       	brge	.+6      	; 0x884 <fnd_ment_display+0x14c>
     87e:	23 2b       	or	r18, r19
     880:	41 f0       	breq	.+16     	; 0x892 <fnd_ment_display+0x15a>
     882:	32 c0       	rjmp	.+100    	; 0x8e8 <fnd_ment_display+0x1b0>
     884:	22 30       	cpi	r18, 0x02	; 2
     886:	31 05       	cpc	r19, r1
     888:	d1 f0       	breq	.+52     	; 0x8be <fnd_ment_display+0x186>
     88a:	23 30       	cpi	r18, 0x03	; 3
     88c:	31 05       	cpc	r19, r1
     88e:	11 f1       	breq	.+68     	; 0x8d4 <fnd_ment_display+0x19c>
     890:	2b c0       	rjmp	.+86     	; 0x8e8 <fnd_ment_display+0x1b0>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     892:	2f e7       	ldi	r18, 0x7F	; 127
     894:	28 bb       	out	0x18, r18	; 24
		FND_DATA_PORT = fnd_loading_font[a];
     896:	e1 e0       	ldi	r30, 0x01	; 1
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	ec 0f       	add	r30, r28
     89c:	fd 1f       	adc	r31, r29
     89e:	e8 0f       	add	r30, r24
     8a0:	f9 1f       	adc	r31, r25
     8a2:	80 81       	ld	r24, Z
     8a4:	85 bb       	out	0x15, r24	; 21
		break;
     8a6:	20 c0       	rjmp	.+64     	; 0x8e8 <fnd_ment_display+0x1b0>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     8a8:	8f eb       	ldi	r24, 0xBF	; 191
     8aa:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[b];
     8ac:	e1 e0       	ldi	r30, 0x01	; 1
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	ec 0f       	add	r30, r28
     8b2:	fd 1f       	adc	r31, r29
     8b4:	e0 0f       	add	r30, r16
     8b6:	f1 1f       	adc	r31, r17
     8b8:	80 81       	ld	r24, Z
     8ba:	85 bb       	out	0x15, r24	; 21
		break;
     8bc:	15 c0       	rjmp	.+42     	; 0x8e8 <fnd_ment_display+0x1b0>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     8be:	8f ed       	ldi	r24, 0xDF	; 223
     8c0:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[c];
     8c2:	e1 e0       	ldi	r30, 0x01	; 1
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	ec 0f       	add	r30, r28
     8c8:	fd 1f       	adc	r31, r29
     8ca:	ee 0d       	add	r30, r14
     8cc:	ff 1d       	adc	r31, r15
     8ce:	80 81       	ld	r24, Z
     8d0:	85 bb       	out	0x15, r24	; 21
		break;
     8d2:	0a c0       	rjmp	.+20     	; 0x8e8 <fnd_ment_display+0x1b0>

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     8d4:	8f ee       	ldi	r24, 0xEF	; 239
     8d6:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[d];
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	8c 0f       	add	r24, r28
     8de:	9d 1f       	adc	r25, r29
     8e0:	e8 0f       	add	r30, r24
     8e2:	f9 1f       	adc	r31, r25
     8e4:	80 81       	ld	r24, Z
     8e6:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
     8e8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <digit_select.1877>
     8ec:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <digit_select.1877+0x1>
     8f0:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
     8f2:	83 70       	andi	r24, 0x03	; 3
     8f4:	90 78       	andi	r25, 0x80	; 128
     8f6:	99 23       	and	r25, r25
     8f8:	24 f4       	brge	.+8      	; 0x902 <fnd_ment_display+0x1ca>
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	8c 6f       	ori	r24, 0xFC	; 252
     8fe:	9f 6f       	ori	r25, 0xFF	; 255
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <digit_select.1877+0x1>
     906:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <digit_select.1877>
}
     90a:	a7 96       	adiw	r28, 0x27	; 39
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	de bf       	out	0x3e, r29	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	cd bf       	out	0x3d, r28	; 61
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	08 95       	ret

00000924 <fnd_main>:
	end_display, // end 화면
	dumy_fanc // dumy
};

int fnd_main(void)
{
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	00 d0       	rcall	.+0      	; 0x92a <fnd_main+0x6>
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
     92e:	8f ef       	ldi	r24, 0xFF	; 255
     930:	8a bb       	out	0x1a, r24	; 26
	init_fnd(); // fnd 초기화
     932:	1e dc       	rcall	.-1988   	; 0x170 <init_fnd>
	init_button(); // button 초기화
     934:	cb db       	rcall	.-2154   	; 0xcc <init_button>
     936:	1a 82       	std	Y+2, r1	; 0x02
	
	int	main_ment_on = 0; // select mode 글씨가 fnd에 돌아가면서 표시되도록 하는 변수
     938:	19 82       	std	Y+1, r1	; 0x01
     93a:	64 e0       	ldi	r22, 0x04	; 4

	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN) && closed_check == 1) // 버튼 0을 받으면 수동 세탁 모드로 진입하고 계속 버튼 0을 누를수록 다음 모드로 순회하듯이 작동, 버튼 1을 누르면 해당되는 모드 진입, 버튼 3을 누르면 메인화면으로 되돌아가기
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	c8 db       	rcall	.-2160   	; 0xd4 <get_button>
     944:	89 2b       	or	r24, r25
     946:	81 f0       	breq	.+32     	; 0x968 <fnd_main+0x44>
     948:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <closed_check>
     94c:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <closed_check+0x1>
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	51 f4       	brne	.+20     	; 0x968 <fnd_main+0x44>
     954:	85 e0       	ldi	r24, 0x05	; 5
		{
			loading_rot = 5;
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     95c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
     960:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <select_wash_mode+0x1>
			select_wash_mode = CUSTOM_WASH;
     964:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <select_wash_mode>
     968:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <select_wash_mode>
		}
		
		fp_wash_mode[select_wash_mode]();
     96c:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <select_wash_mode+0x1>
     970:	ee 0f       	add	r30, r30
     972:	ff 1f       	adc	r31, r31
     974:	e4 5f       	subi	r30, 0xF4	; 244
     976:	fe 4f       	sbci	r31, 0xFE	; 254
     978:	01 90       	ld	r0, Z+
     97a:	f0 81       	ld	r31, Z
     97c:	e0 2d       	mov	r30, r0
     97e:	09 95       	icall
		
		ultrasonic_distance_check();
     980:	b1 d7       	rcall	.+3938   	; 0x18e4 <ultrasonic_distance_check>
     982:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <ultrasonic_distance>
		if (ultrasonic_distance / 58 > 0 && ultrasonic_distance / 58 < 10)
     986:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <ultrasonic_distance+0x1>
     98a:	ca 97       	sbiw	r24, 0x3a	; 58
     98c:	74 f0       	brlt	.+28     	; 0x9aa <fnd_main+0x86>
     98e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <ultrasonic_distance>
     992:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <ultrasonic_distance+0x1>
     996:	84 34       	cpi	r24, 0x44	; 68
     998:	92 40       	sbci	r25, 0x02	; 2
     99a:	3c f4       	brge	.+14     	; 0x9aa <fnd_main+0x86>
     99c:	81 e0       	ldi	r24, 0x01	; 1
		{
			closed_check = 1;
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <closed_check+0x1>
     9a4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <closed_check>
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <fnd_main+0x8e>
     9aa:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <closed_check+0x1>
		}
		else
		{
			closed_check = 0;
     9ae:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <closed_check>
     9b2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <fnd_refreshrate>
		}
		
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     9b6:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <fnd_refreshrate+0x1>
     9ba:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <fnd_refreshrate+0x2>
     9be:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <fnd_refreshrate+0x3>
     9c2:	02 97       	sbiw	r24, 0x02	; 2
     9c4:	a1 05       	cpc	r26, r1
     9c6:	b1 05       	cpc	r27, r1
     9c8:	70 f0       	brcs	.+28     	; 0x9e6 <fnd_main+0xc2>
     9ca:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <fnd_refreshrate>
		{
			fnd_refreshrate = 0;
     9ce:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <fnd_refreshrate+0x1>
     9d2:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate+0x2>
     9d6:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x3>
     9da:	be 01       	movw	r22, r28
			fnd_ment_display(&loading_rot,&main_ment_on);
     9dc:	6f 5f       	subi	r22, 0xFF	; 255
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	88 e1       	ldi	r24, 0x18	; 24
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	a9 de       	rcall	.-686    	; 0x738 <fnd_ment_display>
     9e6:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <msec_count>
		}
		if (msec_count >= 400)
     9ea:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <msec_count+0x1>
     9ee:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <msec_count+0x2>
     9f2:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <msec_count+0x3>
     9f6:	80 39       	cpi	r24, 0x90	; 144
     9f8:	91 40       	sbci	r25, 0x01	; 1
     9fa:	a1 05       	cpc	r26, r1
     9fc:	b1 05       	cpc	r27, r1
     9fe:	08 f4       	brcc	.+2      	; 0xa02 <fnd_main+0xde>
     a00:	9c cf       	rjmp	.-200    	; 0x93a <fnd_main+0x16>
     a02:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <msec_count>
		{
			msec_count = 0;
     a06:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <msec_count+0x1>
     a0a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <msec_count+0x2>
     a0e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <msec_count+0x3>
     a12:	89 81       	ldd	r24, Y+1	; 0x01
			main_ment_on++;
     a14:	9a 81       	ldd	r25, Y+2	; 0x02
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	6d e0       	ldi	r22, 0x0D	; 13
			main_ment_on %= 13;
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__divmodhi4>
     a20:	9a 83       	std	Y+2, r25	; 0x02
     a22:	89 83       	std	Y+1, r24	; 0x01
     a24:	8a cf       	rjmp	.-236    	; 0x93a <fnd_main+0x16>

00000a26 <custom_wash>:
     a26:	81 e0       	ldi	r24, 0x01	; 1

////////////////////////////////////////////메인화면에서 동작하는 함수들////////////////////////////////////////////////

void custom_wash() // 수동 세탁
{
	sec_count = 1;
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	a0 e0       	ldi	r26, 0x00	; 0
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
     a32:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
     a36:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
     a3a:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>
	/*int custom_ment_on = 5;*/
	
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
     a3e:	4b c0       	rjmp	.+150    	; 0xad6 <custom_wash+0xb0>
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 다음 쾌속 세탁으로 이동
		{
			loading_rot = 6;
     a40:	86 e0       	ldi	r24, 0x06	; 6
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     a48:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
			select_wash_mode = AUTO_WASH;
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     a54:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			break;
     a58:	08 95       	ret
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     a5a:	67 e0       	ldi	r22, 0x07	; 7
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	38 db       	rcall	.-2448   	; 0xd4 <get_button>
     a64:	89 2b       	or	r24, r25
     a66:	39 f0       	breq	.+14     	; 0xa76 <custom_wash+0x50>
		{
			select_wash_mode = 4;
     a68:	84 e0       	ldi	r24, 0x04	; 4
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     a70:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			break;
     a74:	08 95       	ret
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     a76:	65 e0       	ldi	r22, 0x05	; 5
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	2a db       	rcall	.-2476   	; 0xd4 <get_button>
     a80:	89 2b       	or	r24, r25
     a82:	21 f0       	breq	.+8      	; 0xa8c <custom_wash+0x66>
		{
			if (auto_step_led == 0) // 버튼 1을 누르면 수동 세탁을 시작하는 단계로 진입. 물 온도, 헹굼 횟수, 탈수 강도 선택
			{
				custom_wash_mode = 0;
     a84:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <custom_wash_mode+0x1>
     a88:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <custom_wash_mode>
// 		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
// 		{
// 			fnd_refreshrate = 0;
// 			fnd_display(); // 여기 메인화면에서 동작하는 함수들은 그냥 알파벳 보여줘서 직관성을 높이는게 좋을듯
// 		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     a8c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <fnd_refreshrate>
     a90:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <fnd_refreshrate+0x1>
     a94:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <fnd_refreshrate+0x2>
     a98:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <fnd_refreshrate+0x3>
     a9c:	02 97       	sbiw	r24, 0x02	; 2
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	68 f0       	brcs	.+26     	; 0xabe <custom_wash+0x98>
		{
			fnd_refreshrate = 0;
     aa4:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <fnd_refreshrate>
     aa8:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <fnd_refreshrate+0x1>
     aac:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate+0x2>
     ab0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x3>
			fnd_ment_display(&loading_rot, 10);
     ab4:	6a e0       	ldi	r22, 0x0A	; 10
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	88 e1       	ldi	r24, 0x18	; 24
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	3d de       	rcall	.-902    	; 0x738 <fnd_ment_display>
		}
		custom_wash_select[custom_wash_mode]();
     abe:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <custom_wash_mode>
     ac2:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <custom_wash_mode+0x1>
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	e0 50       	subi	r30, 0x00	; 0
     acc:	ff 4f       	sbci	r31, 0xFF	; 255
     ace:	01 90       	ld	r0, Z+
     ad0:	f0 81       	ld	r31, Z
     ad2:	e0 2d       	mov	r30, r0
     ad4:	09 95       	icall
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 다음 쾌속 세탁으로 이동
     ad6:	64 e0       	ldi	r22, 0x04	; 4
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	fa da       	rcall	.-2572   	; 0xd4 <get_button>
     ae0:	89 2b       	or	r24, r25
     ae2:	09 f4       	brne	.+2      	; 0xae6 <custom_wash+0xc0>
     ae4:	ba cf       	rjmp	.-140    	; 0xa5a <custom_wash+0x34>
     ae6:	ac cf       	rjmp	.-168    	; 0xa40 <custom_wash+0x1a>

00000ae8 <auto_wash>:
	
}

void auto_wash(int *auto_ment_on) // 자동 세탁
{
	sec_count = 2;
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	b0 e0       	ldi	r27, 0x00	; 0
     af0:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
     af4:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
     af8:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
     afc:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>
	
	/**auto_ment_on = 6;*/
	
	while (1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 다음 헹굼 + 탈수 세탁으로 이동
     b00:	64 e0       	ldi	r22, 0x04	; 4
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	e5 da       	rcall	.-2614   	; 0xd4 <get_button>
     b0a:	89 2b       	or	r24, r25
     b0c:	69 f0       	breq	.+26     	; 0xb28 <auto_wash+0x40>
		{
			loading_rot = 7;
     b0e:	87 e0       	ldi	r24, 0x07	; 7
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     b16:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
			select_wash_mode = FAST_WASH;
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     b22:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			break;
     b26:	08 95       	ret
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     b28:	67 e0       	ldi	r22, 0x07	; 7
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	d1 da       	rcall	.-2654   	; 0xd4 <get_button>
     b32:	89 2b       	or	r24, r25
     b34:	39 f0       	breq	.+14     	; 0xb44 <auto_wash+0x5c>
		{
			select_wash_mode = 4;
     b36:	84 e0       	ldi	r24, 0x04	; 4
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     b3e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			break;
     b42:	08 95       	ret
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     b44:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <fnd_refreshrate>
     b48:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <fnd_refreshrate+0x1>
     b4c:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <fnd_refreshrate+0x2>
     b50:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <fnd_refreshrate+0x3>
     b54:	02 97       	sbiw	r24, 0x02	; 2
     b56:	a1 05       	cpc	r26, r1
     b58:	b1 05       	cpc	r27, r1
     b5a:	90 f2       	brcs	.-92     	; 0xb00 <auto_wash+0x18>
		{
			fnd_refreshrate = 0;
     b5c:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <fnd_refreshrate>
     b60:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <fnd_refreshrate+0x1>
     b64:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate+0x2>
     b68:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x3>
			fnd_ment_display(&loading_rot, 10);
     b6c:	6a e0       	ldi	r22, 0x0A	; 10
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	88 e1       	ldi	r24, 0x18	; 24
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	e1 dd       	rcall	.-1086   	; 0x738 <fnd_ment_display>
     b76:	c4 cf       	rjmp	.-120    	; 0xb00 <auto_wash+0x18>

00000b78 <fast_wash>:
}

void fast_wash(int *fast_ment_on) // 쾌속 세탁
{
	/**fast_ment_on = 7;*/
	sec_count = 3;
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	a0 e0       	ldi	r26, 0x00	; 0
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
     b84:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
     b88:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
     b8c:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>
	
	while (1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 다음 탈수 세탁으로 이동
     b90:	64 e0       	ldi	r22, 0x04	; 4
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	9d da       	rcall	.-2758   	; 0xd4 <get_button>
     b9a:	89 2b       	or	r24, r25
     b9c:	69 f0       	breq	.+26     	; 0xbb8 <fast_wash+0x40>
		{
			loading_rot = 8;
     b9e:	88 e0       	ldi	r24, 0x08	; 8
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     ba6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
			select_wash_mode = ONLY_SPINDRY;
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     bb2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			break;
     bb6:	08 95       	ret
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     bb8:	67 e0       	ldi	r22, 0x07	; 7
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	89 da       	rcall	.-2798   	; 0xd4 <get_button>
     bc2:	89 2b       	or	r24, r25
     bc4:	39 f0       	breq	.+14     	; 0xbd4 <fast_wash+0x5c>
		{
			select_wash_mode = 4;
     bc6:	84 e0       	ldi	r24, 0x04	; 4
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     bce:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			break;
     bd2:	08 95       	ret
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     bd4:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <fnd_refreshrate>
     bd8:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <fnd_refreshrate+0x1>
     bdc:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <fnd_refreshrate+0x2>
     be0:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <fnd_refreshrate+0x3>
     be4:	02 97       	sbiw	r24, 0x02	; 2
     be6:	a1 05       	cpc	r26, r1
     be8:	b1 05       	cpc	r27, r1
     bea:	90 f2       	brcs	.-92     	; 0xb90 <fast_wash+0x18>
		{
			fnd_refreshrate = 0;
     bec:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <fnd_refreshrate>
     bf0:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <fnd_refreshrate+0x1>
     bf4:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate+0x2>
     bf8:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x3>
			fnd_ment_display(&loading_rot, 10);
     bfc:	6a e0       	ldi	r22, 0x0A	; 10
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	88 e1       	ldi	r24, 0x18	; 24
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	99 dd       	rcall	.-1230   	; 0x738 <fnd_ment_display>
     c06:	c4 cf       	rjmp	.-120    	; 0xb90 <fast_wash+0x18>

00000c08 <only_spindry>:
	}
}

void only_spindry(int *dry_ment_on) // 탈수
{
	sec_count = 4;
     c08:	84 e0       	ldi	r24, 0x04	; 4
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
     c14:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
     c18:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
     c1c:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>
	/**dry_ment_on = 8;*/
	
	while (1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 다시 수동 세탁으로 이동
     c20:	64 e0       	ldi	r22, 0x04	; 4
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	55 da       	rcall	.-2902   	; 0xd4 <get_button>
     c2a:	89 2b       	or	r24, r25
     c2c:	59 f0       	breq	.+22     	; 0xc44 <only_spindry+0x3c>
		{
			loading_rot = 5;
     c2e:	85 e0       	ldi	r24, 0x05	; 5
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     c36:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
			select_wash_mode = CUSTOM_WASH;
     c3a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <select_wash_mode+0x1>
     c3e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <select_wash_mode>
			break;
     c42:	08 95       	ret
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     c44:	67 e0       	ldi	r22, 0x07	; 7
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	43 da       	rcall	.-2938   	; 0xd4 <get_button>
     c4e:	89 2b       	or	r24, r25
     c50:	39 f0       	breq	.+14     	; 0xc60 <only_spindry+0x58>
		{
			select_wash_mode = 4;
     c52:	84 e0       	ldi	r24, 0x04	; 4
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     c5a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			break;
     c5e:	08 95       	ret
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     c60:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <fnd_refreshrate>
     c64:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <fnd_refreshrate+0x1>
     c68:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <fnd_refreshrate+0x2>
     c6c:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <fnd_refreshrate+0x3>
     c70:	02 97       	sbiw	r24, 0x02	; 2
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	a0 f2       	brcs	.-88     	; 0xc20 <only_spindry+0x18>
		{
			fnd_refreshrate = 0;
     c78:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <fnd_refreshrate>
     c7c:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <fnd_refreshrate+0x1>
     c80:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate+0x2>
     c84:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x3>
			fnd_ment_display(&loading_rot, 10);
     c88:	6a e0       	ldi	r22, 0x0A	; 10
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	88 e1       	ldi	r24, 0x18	; 24
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	53 dd       	rcall	.-1370   	; 0x738 <fnd_ment_display>
     c92:	c6 cf       	rjmp	.-116    	; 0xc20 <only_spindry+0x18>

00000c94 <nextstep_pause_wash>:
		PORTA = *led_pause_count;
	}
}

void nextstep_pause_wash()
{
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <nextstep_pause_wash+0xa>
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	int wait_for_three_sec = 1;
	loading_rot = 9;
     ca2:	89 e0       	ldi	r24, 0x09	; 9
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     caa:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
	int prerpare_ment = 0;
     cae:	1a 82       	std	Y+2, r1	; 0x02
     cb0:	19 82       	std	Y+1, r1	; 0x01
	}
}

void nextstep_pause_wash()
{
	int wait_for_three_sec = 1;
     cb2:	01 e0       	ldi	r16, 0x01	; 1
     cb4:	10 e0       	ldi	r17, 0x00	; 0
	loading_rot = 9;
	int prerpare_ment = 0;
	
	while (wait_for_three_sec)
     cb6:	36 c0       	rjmp	.+108    	; 0xd24 <nextstep_pause_wash+0x90>
	{
		OCR3C = 0;
     cb8:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     cbc:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
		if(msec_count >= 5000)
     cc0:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <msec_count>
     cc4:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <msec_count+0x1>
     cc8:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <msec_count+0x2>
     ccc:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <msec_count+0x3>
     cd0:	88 38       	cpi	r24, 0x88	; 136
     cd2:	93 41       	sbci	r25, 0x13	; 19
     cd4:	a1 05       	cpc	r26, r1
     cd6:	b1 05       	cpc	r27, r1
     cd8:	10 f0       	brcs	.+4      	; 0xcde <nextstep_pause_wash+0x4a>
		{
			wait_for_three_sec = 0;
     cda:	00 e0       	ldi	r16, 0x00	; 0
     cdc:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (loading_clock_change >= 300) // 모드가 바뀔 때 prepare 글자를 출력함
     cde:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <loading_clock_change>
     ce2:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <loading_clock_change+0x1>
     ce6:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <loading_clock_change+0x2>
     cea:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <loading_clock_change+0x3>
     cee:	8c 32       	cpi	r24, 0x2C	; 44
     cf0:	91 40       	sbci	r25, 0x01	; 1
     cf2:	a1 05       	cpc	r26, r1
     cf4:	b1 05       	cpc	r27, r1
     cf6:	80 f0       	brcs	.+32     	; 0xd18 <nextstep_pause_wash+0x84>
		{
			loading_clock_change = 0;
     cf8:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <loading_clock_change>
     cfc:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <loading_clock_change+0x1>
     d00:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <loading_clock_change+0x2>
     d04:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <loading_clock_change+0x3>
			prerpare_ment++;
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	01 96       	adiw	r24, 0x01	; 1
			prerpare_ment %= 9;
     d0e:	69 e0       	ldi	r22, 0x09	; 9
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	96 d7       	rcall	.+3884   	; 0x1c40 <__divmodhi4>
     d14:	9a 83       	std	Y+2, r25	; 0x02
     d16:	89 83       	std	Y+1, r24	; 0x01
		}
		fnd_ment_display(&loading_rot, &prerpare_ment);
     d18:	be 01       	movw	r22, r28
     d1a:	6f 5f       	subi	r22, 0xFF	; 255
     d1c:	7f 4f       	sbci	r23, 0xFF	; 255
     d1e:	88 e1       	ldi	r24, 0x18	; 24
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	0a dd       	rcall	.-1516   	; 0x738 <fnd_ment_display>
{
	int wait_for_three_sec = 1;
	loading_rot = 9;
	int prerpare_ment = 0;
	
	while (wait_for_three_sec)
     d24:	01 15       	cp	r16, r1
     d26:	11 05       	cpc	r17, r1
     d28:	39 f6       	brne	.-114    	; 0xcb8 <nextstep_pause_wash+0x24>
			prerpare_ment++;
			prerpare_ment %= 9;
		}
		fnd_ment_display(&loading_rot, &prerpare_ment);
	}
}
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	08 95       	ret

00000d38 <end_display>:

void end_display() // end 화면
{
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
	int end_toggle = 1;
	PORTA = 0;
     d3c:	1b ba       	out	0x1b, r1	; 27
	loading_rot = 4; // end fnd display
     d3e:	84 e0       	ldi	r24, 0x04	; 4
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     d46:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
	}
}

void end_display() // end 화면
{
	int end_toggle = 1;
     d4a:	c1 e0       	ldi	r28, 0x01	; 1
     d4c:	d0 e0       	ldi	r29, 0x00	; 0
	PORTA = 0;
	loading_rot = 4; // end fnd display
	while (end_toggle)
     d4e:	7b c0       	rjmp	.+246    	; 0xe46 <end_display+0x10e>
	{
		if (get_button(BUTTON0, BUTTON0PIN) || get_button(BUTTON1, BUTTON1PIN) || get_button(BUTTON2, BUTTON2PIN) || get_button(BUTTON3, BUTTON3PIN)) // 아무 버튼 누르면 다시 메인 화면으로
     d50:	64 e0       	ldi	r22, 0x04	; 4
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	bd d9       	rcall	.-3206   	; 0xd4 <get_button>
     d5a:	89 2b       	or	r24, r25
     d5c:	a9 f4       	brne	.+42     	; 0xd88 <end_display+0x50>
     d5e:	65 e0       	ldi	r22, 0x05	; 5
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	b6 d9       	rcall	.-3220   	; 0xd4 <get_button>
     d68:	89 2b       	or	r24, r25
     d6a:	71 f4       	brne	.+28     	; 0xd88 <end_display+0x50>
     d6c:	66 e0       	ldi	r22, 0x06	; 6
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	af d9       	rcall	.-3234   	; 0xd4 <get_button>
     d76:	89 2b       	or	r24, r25
     d78:	39 f4       	brne	.+14     	; 0xd88 <end_display+0x50>
     d7a:	67 e0       	ldi	r22, 0x07	; 7
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	83 e0       	ldi	r24, 0x03	; 3
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	a8 d9       	rcall	.-3248   	; 0xd4 <get_button>
     d84:	89 2b       	or	r24, r25
     d86:	91 f0       	breq	.+36     	; 0xdac <end_display+0x74>
		{
			select_wash_mode = MAIN_SCREEN;
     d88:	84 e0       	ldi	r24, 0x04	; 4
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     d90:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			end_toggle = !end_toggle;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	cd 2b       	or	r28, r29
     d98:	09 f0       	breq	.+2      	; 0xd9c <end_display+0x64>
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	c8 2f       	mov	r28, r24
     d9e:	d0 e0       	ldi	r29, 0x00	; 0
			custom_wash_mode = 5; // 끝
     da0:	85 e0       	ldi	r24, 0x05	; 5
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     da8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     dac:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <fnd_refreshrate>
     db0:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <fnd_refreshrate+0x1>
     db4:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <fnd_refreshrate+0x2>
     db8:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <fnd_refreshrate+0x3>
     dbc:	02 97       	sbiw	r24, 0x02	; 2
     dbe:	a1 05       	cpc	r26, r1
     dc0:	b1 05       	cpc	r27, r1
     dc2:	68 f0       	brcs	.+26     	; 0xdde <end_display+0xa6>
		{
			fnd_refreshrate = 0;
     dc4:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <fnd_refreshrate>
     dc8:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <fnd_refreshrate+0x1>
     dcc:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate+0x2>
     dd0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x3>
			fnd_ment_display(&loading_rot,10); // end 보여주기
     dd4:	6a e0       	ldi	r22, 0x0A	; 10
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	88 e1       	ldi	r24, 0x18	; 24
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	ad dc       	rcall	.-1702   	; 0x738 <fnd_ment_display>
		}
		if (msec_count <= 500)
     dde:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <msec_count>
     de2:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <msec_count+0x1>
     de6:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <msec_count+0x2>
     dea:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <msec_count+0x3>
     dee:	85 3f       	cpi	r24, 0xF5	; 245
     df0:	91 40       	sbci	r25, 0x01	; 1
     df2:	a1 05       	cpc	r26, r1
     df4:	b1 05       	cpc	r27, r1
     df6:	18 f4       	brcc	.+6      	; 0xdfe <end_display+0xc6>
		{
			PORTA = 0b01010101;
     df8:	85 e5       	ldi	r24, 0x55	; 85
     dfa:	8b bb       	out	0x1b, r24	; 27
     dfc:	24 c0       	rjmp	.+72     	; 0xe46 <end_display+0x10e>
		}
		else if (msec_count > 500)
     dfe:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <msec_count>
     e02:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <msec_count+0x1>
     e06:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <msec_count+0x2>
     e0a:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <msec_count+0x3>
     e0e:	85 3f       	cpi	r24, 0xF5	; 245
     e10:	91 40       	sbci	r25, 0x01	; 1
     e12:	a1 05       	cpc	r26, r1
     e14:	b1 05       	cpc	r27, r1
     e16:	b8 f0       	brcs	.+46     	; 0xe46 <end_display+0x10e>
		{
			PORTA = 0b10101010;
     e18:	8a ea       	ldi	r24, 0xAA	; 170
     e1a:	8b bb       	out	0x1b, r24	; 27
			if (msec_count >= 1000)
     e1c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <msec_count>
     e20:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <msec_count+0x1>
     e24:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <msec_count+0x2>
     e28:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <msec_count+0x3>
     e2c:	88 3e       	cpi	r24, 0xE8	; 232
     e2e:	93 40       	sbci	r25, 0x03	; 3
     e30:	a1 05       	cpc	r26, r1
     e32:	b1 05       	cpc	r27, r1
     e34:	40 f0       	brcs	.+16     	; 0xe46 <end_display+0x10e>
			{
				msec_count = 0;
     e36:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <msec_count>
     e3a:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <msec_count+0x1>
     e3e:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <msec_count+0x2>
     e42:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <msec_count+0x3>
void end_display() // end 화면
{
	int end_toggle = 1;
	PORTA = 0;
	loading_rot = 4; // end fnd display
	while (end_toggle)
     e46:	20 97       	sbiw	r28, 0x00	; 0
     e48:	09 f0       	breq	.+2      	; 0xe4c <end_display+0x114>
     e4a:	82 cf       	rjmp	.-252    	; 0xd50 <end_display+0x18>
			{
				msec_count = 0;
			}
		}
	}
}
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <fnd_loading_display>:
	digit_select %= 4; //다음 표시할 자리수 선택
}


void fnd_loading_display(int *forward_state_count, int *forward_state) // 진행 로딩 상황 표시
{
     e52:	cf 92       	push	r12
     e54:	df 92       	push	r13
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	27 97       	sbiw	r28, 0x07	; 7
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	9c 01       	movw	r18, r24
	int a, b, c, d;
	
	uint8_t fnd_loading_font[] =
     e74:	97 e0       	ldi	r25, 0x07	; 7
     e76:	e6 e6       	ldi	r30, 0x66	; 102
     e78:	f1 e0       	ldi	r31, 0x01	; 1
     e7a:	de 01       	movw	r26, r28
     e7c:	11 96       	adiw	r26, 0x01	; 1
     e7e:	01 90       	ld	r0, Z+
     e80:	0d 92       	st	X+, r0
     e82:	9a 95       	dec	r25
     e84:	e1 f7       	brne	.-8      	; 0xe7e <fnd_loading_display+0x2c>
	{
		~0xce, ~0xf8, ~0xc7, ~0xf1, ~0xfe, ~0xf7, ~0xf6 // 0~6
		//  |-     -|    |_     _|     -      _     -,_   
	};
	
	if (*forward_state)
     e86:	fb 01       	movw	r30, r22
     e88:	80 81       	ld	r24, Z
     e8a:	91 81       	ldd	r25, Z+1	; 0x01
     e8c:	89 2b       	or	r24, r25
     e8e:	79 f0       	breq	.+30     	; 0xeae <fnd_loading_display+0x5c>
	{
		if (*forward_state_count == 0)
     e90:	f9 01       	movw	r30, r18
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	e9 f0       	breq	.+58     	; 0xed4 <fnd_loading_display+0x82>
		{
			d = 0; b = 5, c = 4, a = 3;	// loading 1
		}
		else if (*forward_state_count == 1)
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	91 05       	cpc	r25, r1
     e9e:	49 f1       	breq	.+82     	; 0xef2 <fnd_loading_display+0xa0>
		{
			d = 2; b = 4, c = 5, a = 1; // loading 2
		}
		else if (*forward_state_count == 2)
     ea0:	82 30       	cpi	r24, 0x02	; 2
     ea2:	91 05       	cpc	r25, r1
     ea4:	91 f1       	breq	.+100    	; 0xf0a <fnd_loading_display+0xb8>
		{
			d = 5; b = 6, c = 6, a = 4; // loaing 3
		}
		else if (*forward_state_count == 3)
     ea6:	03 97       	sbiw	r24, 0x03	; 3
     ea8:	09 f0       	breq	.+2      	; 0xeac <fnd_loading_display+0x5a>
     eaa:	83 c0       	rjmp	.+262    	; 0xfb2 <fnd_loading_display+0x160>
     eac:	3c c0       	rjmp	.+120    	; 0xf26 <fnd_loading_display+0xd4>
			d = 4; b = 6, c = 6, a = 5; // loaing 4
		}
	}
	else
	{
		if (*forward_state_count == 3)
     eae:	f9 01       	movw	r30, r18
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	83 30       	cpi	r24, 0x03	; 3
     eb6:	91 05       	cpc	r25, r1
     eb8:	09 f4       	brne	.+2      	; 0xebc <fnd_loading_display+0x6a>
     eba:	44 c0       	rjmp	.+136    	; 0xf44 <fnd_loading_display+0xf2>
		{
			d = 0; b = 5, c = 4, a = 3;	// loading 1
		}
		else if (*forward_state_count == 2)
     ebc:	82 30       	cpi	r24, 0x02	; 2
     ebe:	91 05       	cpc	r25, r1
     ec0:	09 f4       	brne	.+2      	; 0xec4 <fnd_loading_display+0x72>
     ec2:	4f c0       	rjmp	.+158    	; 0xf62 <fnd_loading_display+0x110>
		{
			d = 2; b = 4, c = 5, a = 1; // loading 2
		}
		else if (*forward_state_count == 1)
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	91 05       	cpc	r25, r1
     ec8:	09 f4       	brne	.+2      	; 0xecc <fnd_loading_display+0x7a>
     eca:	57 c0       	rjmp	.+174    	; 0xf7a <fnd_loading_display+0x128>
		{
			d = 5; b = 6, c = 6, a = 4; // loaing 3
		}
		else if (*forward_state_count == 0)
     ecc:	89 2b       	or	r24, r25
     ece:	09 f4       	brne	.+2      	; 0xed2 <fnd_loading_display+0x80>
     ed0:	62 c0       	rjmp	.+196    	; 0xf96 <fnd_loading_display+0x144>
     ed2:	6f c0       	rjmp	.+222    	; 0xfb2 <fnd_loading_display+0x160>
	
	if (*forward_state)
	{
		if (*forward_state_count == 0)
		{
			d = 0; b = 5, c = 4, a = 3;	// loading 1
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	04 e0       	ldi	r16, 0x04	; 4
     eda:	10 e0       	ldi	r17, 0x00	; 0
     edc:	0f 2e       	mov	r0, r31
     ede:	f5 e0       	ldi	r31, 0x05	; 5
     ee0:	ef 2e       	mov	r14, r31
     ee2:	f1 2c       	mov	r15, r1
     ee4:	f0 2d       	mov	r31, r0
     ee6:	0f 2e       	mov	r0, r31
     ee8:	f3 e0       	ldi	r31, 0x03	; 3
     eea:	cf 2e       	mov	r12, r31
     eec:	d1 2c       	mov	r13, r1
     eee:	f0 2d       	mov	r31, r0
     ef0:	60 c0       	rjmp	.+192    	; 0xfb2 <fnd_loading_display+0x160>
		}
		else if (*forward_state_count == 1)
		{
			d = 2; b = 4, c = 5, a = 1; // loading 2
     ef2:	42 e0       	ldi	r20, 0x02	; 2
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	05 e0       	ldi	r16, 0x05	; 5
     ef8:	10 e0       	ldi	r17, 0x00	; 0
     efa:	68 94       	set
     efc:	ee 24       	eor	r14, r14
     efe:	e2 f8       	bld	r14, 2
     f00:	f1 2c       	mov	r15, r1
     f02:	cc 24       	eor	r12, r12
     f04:	c3 94       	inc	r12
     f06:	d1 2c       	mov	r13, r1
     f08:	54 c0       	rjmp	.+168    	; 0xfb2 <fnd_loading_display+0x160>
		}
		else if (*forward_state_count == 2)
		{
			d = 5; b = 6, c = 6, a = 4; // loaing 3
     f0a:	45 e0       	ldi	r20, 0x05	; 5
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	06 e0       	ldi	r16, 0x06	; 6
     f10:	10 e0       	ldi	r17, 0x00	; 0
     f12:	0f 2e       	mov	r0, r31
     f14:	f6 e0       	ldi	r31, 0x06	; 6
     f16:	ef 2e       	mov	r14, r31
     f18:	f1 2c       	mov	r15, r1
     f1a:	f0 2d       	mov	r31, r0
     f1c:	68 94       	set
     f1e:	cc 24       	eor	r12, r12
     f20:	c2 f8       	bld	r12, 2
     f22:	d1 2c       	mov	r13, r1
     f24:	46 c0       	rjmp	.+140    	; 0xfb2 <fnd_loading_display+0x160>
		}
		else if (*forward_state_count == 3)
		{
			d = 4; b = 6, c = 6, a = 5; // loaing 4
     f26:	44 e0       	ldi	r20, 0x04	; 4
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	06 e0       	ldi	r16, 0x06	; 6
     f2c:	10 e0       	ldi	r17, 0x00	; 0
     f2e:	0f 2e       	mov	r0, r31
     f30:	f6 e0       	ldi	r31, 0x06	; 6
     f32:	ef 2e       	mov	r14, r31
     f34:	f1 2c       	mov	r15, r1
     f36:	f0 2d       	mov	r31, r0
     f38:	0f 2e       	mov	r0, r31
     f3a:	f5 e0       	ldi	r31, 0x05	; 5
     f3c:	cf 2e       	mov	r12, r31
     f3e:	d1 2c       	mov	r13, r1
     f40:	f0 2d       	mov	r31, r0
     f42:	37 c0       	rjmp	.+110    	; 0xfb2 <fnd_loading_display+0x160>
	}
	else
	{
		if (*forward_state_count == 3)
		{
			d = 0; b = 5, c = 4, a = 3;	// loading 1
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	04 e0       	ldi	r16, 0x04	; 4
     f4a:	10 e0       	ldi	r17, 0x00	; 0
     f4c:	0f 2e       	mov	r0, r31
     f4e:	f5 e0       	ldi	r31, 0x05	; 5
     f50:	ef 2e       	mov	r14, r31
     f52:	f1 2c       	mov	r15, r1
     f54:	f0 2d       	mov	r31, r0
     f56:	0f 2e       	mov	r0, r31
     f58:	f3 e0       	ldi	r31, 0x03	; 3
     f5a:	cf 2e       	mov	r12, r31
     f5c:	d1 2c       	mov	r13, r1
     f5e:	f0 2d       	mov	r31, r0
     f60:	28 c0       	rjmp	.+80     	; 0xfb2 <fnd_loading_display+0x160>
		}
		else if (*forward_state_count == 2)
		{
			d = 2; b = 4, c = 5, a = 1; // loading 2
     f62:	42 e0       	ldi	r20, 0x02	; 2
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	05 e0       	ldi	r16, 0x05	; 5
     f68:	10 e0       	ldi	r17, 0x00	; 0
     f6a:	68 94       	set
     f6c:	ee 24       	eor	r14, r14
     f6e:	e2 f8       	bld	r14, 2
     f70:	f1 2c       	mov	r15, r1
     f72:	cc 24       	eor	r12, r12
     f74:	c3 94       	inc	r12
     f76:	d1 2c       	mov	r13, r1
     f78:	1c c0       	rjmp	.+56     	; 0xfb2 <fnd_loading_display+0x160>
		}
		else if (*forward_state_count == 1)
		{
			d = 5; b = 6, c = 6, a = 4; // loaing 3
     f7a:	45 e0       	ldi	r20, 0x05	; 5
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	06 e0       	ldi	r16, 0x06	; 6
     f80:	10 e0       	ldi	r17, 0x00	; 0
     f82:	0f 2e       	mov	r0, r31
     f84:	f6 e0       	ldi	r31, 0x06	; 6
     f86:	ef 2e       	mov	r14, r31
     f88:	f1 2c       	mov	r15, r1
     f8a:	f0 2d       	mov	r31, r0
     f8c:	68 94       	set
     f8e:	cc 24       	eor	r12, r12
     f90:	c2 f8       	bld	r12, 2
     f92:	d1 2c       	mov	r13, r1
     f94:	0e c0       	rjmp	.+28     	; 0xfb2 <fnd_loading_display+0x160>
		}
		else if (*forward_state_count == 0)
		{
			d = 4; b = 6, c = 6, a = 5; // loaing 4
     f96:	44 e0       	ldi	r20, 0x04	; 4
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	06 e0       	ldi	r16, 0x06	; 6
     f9c:	10 e0       	ldi	r17, 0x00	; 0
     f9e:	0f 2e       	mov	r0, r31
     fa0:	f6 e0       	ldi	r31, 0x06	; 6
     fa2:	ef 2e       	mov	r14, r31
     fa4:	f1 2c       	mov	r15, r1
     fa6:	f0 2d       	mov	r31, r0
     fa8:	0f 2e       	mov	r0, r31
     faa:	f5 e0       	ldi	r31, 0x05	; 5
     fac:	cf 2e       	mov	r12, r31
     fae:	d1 2c       	mov	r13, r1
     fb0:	f0 2d       	mov	r31, r0
		}
	}
	
	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     fb2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <digit_select.1892>
     fb6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <digit_select.1892+0x1>
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	91 05       	cpc	r25, r1
     fbe:	a9 f0       	breq	.+42     	; 0xfea <fnd_loading_display+0x198>
     fc0:	1c f4       	brge	.+6      	; 0xfc8 <fnd_loading_display+0x176>
     fc2:	89 2b       	or	r24, r25
     fc4:	39 f0       	breq	.+14     	; 0xfd4 <fnd_loading_display+0x182>
     fc6:	31 c0       	rjmp	.+98     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
     fc8:	82 30       	cpi	r24, 0x02	; 2
     fca:	91 05       	cpc	r25, r1
     fcc:	c9 f0       	breq	.+50     	; 0x1000 <__DATA_REGION_LENGTH__>
     fce:	03 97       	sbiw	r24, 0x03	; 3
     fd0:	11 f1       	breq	.+68     	; 0x1016 <__DATA_REGION_LENGTH__+0x16>
     fd2:	2b c0       	rjmp	.+86     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     fd4:	8f e7       	ldi	r24, 0x7F	; 127
     fd6:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[a];
     fd8:	e1 e0       	ldi	r30, 0x01	; 1
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	ec 0f       	add	r30, r28
     fde:	fd 1f       	adc	r31, r29
     fe0:	ec 0d       	add	r30, r12
     fe2:	fd 1d       	adc	r31, r13
     fe4:	80 81       	ld	r24, Z
     fe6:	85 bb       	out	0x15, r24	; 21
		break;
     fe8:	20 c0       	rjmp	.+64     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     fea:	8f eb       	ldi	r24, 0xBF	; 191
     fec:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[b];
     fee:	e1 e0       	ldi	r30, 0x01	; 1
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	ec 0f       	add	r30, r28
     ff4:	fd 1f       	adc	r31, r29
     ff6:	ee 0d       	add	r30, r14
     ff8:	ff 1d       	adc	r31, r15
     ffa:	80 81       	ld	r24, Z
     ffc:	85 bb       	out	0x15, r24	; 21
		break;
     ffe:	15 c0       	rjmp	.+42     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
    1000:	8f ed       	ldi	r24, 0xDF	; 223
    1002:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[c];
    1004:	e1 e0       	ldi	r30, 0x01	; 1
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	ec 0f       	add	r30, r28
    100a:	fd 1f       	adc	r31, r29
    100c:	e0 0f       	add	r30, r16
    100e:	f1 1f       	adc	r31, r17
    1010:	80 81       	ld	r24, Z
    1012:	85 bb       	out	0x15, r24	; 21
		break;
    1014:	0a c0       	rjmp	.+20     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>

		case 3 :
		FND_DIGIT_PORT = ~0x10;
    1016:	8f ee       	ldi	r24, 0xEF	; 239
    1018:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[d];
    101a:	e1 e0       	ldi	r30, 0x01	; 1
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	ec 0f       	add	r30, r28
    1020:	fd 1f       	adc	r31, r29
    1022:	e4 0f       	add	r30, r20
    1024:	f5 1f       	adc	r31, r21
    1026:	80 81       	ld	r24, Z
    1028:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
    102a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <digit_select.1892>
    102e:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <digit_select.1892+0x1>
    1032:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
    1034:	83 70       	andi	r24, 0x03	; 3
    1036:	90 78       	andi	r25, 0x80	; 128
    1038:	99 23       	and	r25, r25
    103a:	24 f4       	brge	.+8      	; 0x1044 <__DATA_REGION_LENGTH__+0x44>
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	8c 6f       	ori	r24, 0xFC	; 252
    1040:	9f 6f       	ori	r25, 0xFF	; 255
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <digit_select.1892+0x1>
    1048:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <digit_select.1892>
}
    104c:	27 96       	adiw	r28, 0x07	; 7
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	df 90       	pop	r13
    1066:	cf 90       	pop	r12
    1068:	08 95       	ret

0000106a <custom_wash_start>:
	}
}


void custom_wash_start(void)
{
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	28 97       	sbiw	r28, 0x08	; 8
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
	int return_enable = 1;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01
	int led_pwm_count; // LED 몇개 킬건지 정하는 변수
	int forward_state = 0;
    108a:	1e 82       	std	Y+6, r1	; 0x06
    108c:	1d 82       	std	Y+5, r1	; 0x05
	int spin_forward_count = 0;
    108e:	18 86       	std	Y+8, r1	; 0x08
    1090:	1f 82       	std	Y+7, r1	; 0x07
	loading_rot = 0;
    1092:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <loading_rot+0x1>
    1096:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <loading_rot>
	
	sec_count = total_wash_time;
    109a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <total_wash_time>
    109e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <total_wash_time+0x1>
    10a2:	09 2e       	mov	r0, r25
    10a4:	00 0c       	add	r0, r0
    10a6:	aa 0b       	sbc	r26, r26
    10a8:	bb 0b       	sbc	r27, r27
    10aa:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
    10ae:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
    10b2:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
    10b6:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>
	
	while (sec_count > 0 && return_enable == 1)
    10ba:	03 c1       	rjmp	.+518    	; 0x12c2 <__stack+0x1c3>
	{
		washing_machine_fan_control(&spin_strength_val, &forward_state);
    10bc:	be 01       	movw	r22, r28
    10be:	6b 5f       	subi	r22, 0xFB	; 251
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	88 e8       	ldi	r24, 0x88	; 136
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	17 d2       	rcall	.+1070   	; 0x14f6 <washing_machine_fan_control>
		
		if (msec_count >= 1000) // 1초마다 시간 1초씩 감소하고 로딩 회전이 됨.
    10c8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <msec_count>
    10cc:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <msec_count+0x1>
    10d0:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <msec_count+0x2>
    10d4:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <msec_count+0x3>
    10d8:	88 3e       	cpi	r24, 0xE8	; 232
    10da:	93 40       	sbci	r25, 0x03	; 3
    10dc:	a1 05       	cpc	r26, r1
    10de:	b1 05       	cpc	r27, r1
    10e0:	d8 f0       	brcs	.+54     	; 0x1118 <__stack+0x19>
		{
			msec_count = 0;
    10e2:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <msec_count>
    10e6:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <msec_count+0x1>
    10ea:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <msec_count+0x2>
    10ee:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <msec_count+0x3>
			sec_count--;
    10f2:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sec_count>
    10f6:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <sec_count+0x1>
    10fa:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <sec_count+0x2>
    10fe:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <sec_count+0x3>
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	a1 09       	sbc	r26, r1
    1106:	b1 09       	sbc	r27, r1
    1108:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <sec_count>
    110c:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <sec_count+0x1>
    1110:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <sec_count+0x2>
    1114:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <sec_count+0x3>
		}
		
		if (loading_refreshrate >= 300)
    1118:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <loading_refreshrate>
    111c:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <loading_refreshrate+0x1>
    1120:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <loading_refreshrate+0x2>
    1124:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <loading_refreshrate+0x3>
    1128:	8c 32       	cpi	r24, 0x2C	; 44
    112a:	91 40       	sbci	r25, 0x01	; 1
    112c:	a1 05       	cpc	r26, r1
    112e:	b1 05       	cpc	r27, r1
    1130:	a8 f0       	brcs	.+42     	; 0x115c <__stack+0x5d>
		{
			loading_refreshrate = 0;
    1132:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <loading_refreshrate>
    1136:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <loading_refreshrate+0x1>
    113a:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <loading_refreshrate+0x2>
    113e:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <loading_refreshrate+0x3>
			spin_forward_count++;
    1142:	8f 81       	ldd	r24, Y+7	; 0x07
    1144:	98 85       	ldd	r25, Y+8	; 0x08
    1146:	01 96       	adiw	r24, 0x01	; 1
			spin_forward_count %= 4;
    1148:	83 70       	andi	r24, 0x03	; 3
    114a:	90 78       	andi	r25, 0x80	; 128
    114c:	99 23       	and	r25, r25
    114e:	24 f4       	brge	.+8      	; 0x1158 <__stack+0x59>
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	8c 6f       	ori	r24, 0xFC	; 252
    1154:	9f 6f       	ori	r25, 0xFF	; 255
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	98 87       	std	Y+8, r25	; 0x08
    115a:	8f 83       	std	Y+7, r24	; 0x07
		}
		
		if (loading_clock_change >= 3000) // 3초마다 로딩창이랑 시간 화면 뜨는거 토글
    115c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <loading_clock_change>
    1160:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <loading_clock_change+0x1>
    1164:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <loading_clock_change+0x2>
    1168:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <loading_clock_change+0x3>
    116c:	88 3b       	cpi	r24, 0xB8	; 184
    116e:	9b 40       	sbci	r25, 0x0B	; 11
    1170:	a1 05       	cpc	r26, r1
    1172:	b1 05       	cpc	r27, r1
    1174:	b0 f0       	brcs	.+44     	; 0x11a2 <__stack+0xa3>
		{
			loading_clock_change = 0;
    1176:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <loading_clock_change>
    117a:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <loading_clock_change+0x1>
    117e:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <loading_clock_change+0x2>
    1182:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <loading_clock_change+0x3>
			loading_clock_change_val = !loading_clock_change_val;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <loading_clock_change_val>
    118e:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <loading_clock_change_val+0x1>
    1192:	23 2b       	or	r18, r19
    1194:	11 f0       	breq	.+4      	; 0x119a <__stack+0x9b>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <loading_clock_change_val+0x1>
    119e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <loading_clock_change_val>
		}
		
		/////여기에 일반세탁 60초 + 헹굼 횟수 * 10초 + 탈수 30초로 구분을 해야함
		///// 일반세탁 60초 시작 /////
		if (total_wash_time - sec_count <= 30) // 일반 세탁 30초 경과
    11a2:	40 91 8a 01 	lds	r20, 0x018A	; 0x80018a <sec_count>
    11a6:	50 91 8b 01 	lds	r21, 0x018B	; 0x80018b <sec_count+0x1>
    11aa:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <sec_count+0x2>
    11ae:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <sec_count+0x3>
    11b2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <total_wash_time>
    11b6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <total_wash_time+0x1>
    11ba:	09 2e       	mov	r0, r25
    11bc:	00 0c       	add	r0, r0
    11be:	aa 0b       	sbc	r26, r26
    11c0:	bb 0b       	sbc	r27, r27
    11c2:	84 1b       	sub	r24, r20
    11c4:	95 0b       	sbc	r25, r21
    11c6:	a6 0b       	sbc	r26, r22
    11c8:	b7 0b       	sbc	r27, r23
    11ca:	8f 31       	cpi	r24, 0x1F	; 31
    11cc:	91 05       	cpc	r25, r1
    11ce:	a1 05       	cpc	r26, r1
    11d0:	b1 05       	cpc	r27, r1
    11d2:	28 f4       	brcc	.+10     	; 0x11de <__stack+0xdf>
		{
			led_pwm_count = 255; // 0xff
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	9c 83       	std	Y+4, r25	; 0x04
    11da:	8b 83       	std	Y+3, r24	; 0x03
    11dc:	3c c0       	rjmp	.+120    	; 0x1256 <__stack+0x157>
		}
		
		else if (total_wash_time - sec_count < 60 && total_wash_time - sec_count > 30) // 일반세탁 60초 완료
    11de:	8c 01       	movw	r16, r24
    11e0:	9d 01       	movw	r18, r26
    11e2:	0f 51       	subi	r16, 0x1F	; 31
    11e4:	11 09       	sbc	r17, r1
    11e6:	21 09       	sbc	r18, r1
    11e8:	31 09       	sbc	r19, r1
    11ea:	0d 31       	cpi	r16, 0x1D	; 29
    11ec:	11 05       	cpc	r17, r1
    11ee:	21 05       	cpc	r18, r1
    11f0:	31 05       	cpc	r19, r1
    11f2:	28 f4       	brcc	.+10     	; 0x11fe <__stack+0xff>
		{
			led_pwm_count = 126; // 0x7c
    11f4:	8e e7       	ldi	r24, 0x7E	; 126
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	9c 83       	std	Y+4, r25	; 0x04
    11fa:	8b 83       	std	Y+3, r24	; 0x03
    11fc:	2c c0       	rjmp	.+88     	; 0x1256 <__stack+0x157>
		}
		///// 일반세탁 60초 끝 /////
		else if (total_wash_time - sec_count == 60)
    11fe:	8c 33       	cpi	r24, 0x3C	; 60
    1200:	91 05       	cpc	r25, r1
    1202:	a1 05       	cpc	r26, r1
    1204:	b1 05       	cpc	r27, r1
		{
			nextstep_pause_wash(); // 모드가 바뀔 때 5초동안 멈춤
    1206:	11 f4       	brne	.+4      	; 0x120c <__stack+0x10d>
    1208:	45 dd       	rcall	.-1398   	; 0xc94 <nextstep_pause_wash>
    120a:	25 c0       	rjmp	.+74     	; 0x1256 <__stack+0x157>
		}
		///// 헹굼 시작 /////
		else if (total_wash_time - sec_count > 60 && sec_count > 30) // 헹굼
    120c:	cd 97       	sbiw	r24, 0x3d	; 61
    120e:	a1 05       	cpc	r26, r1
    1210:	b1 05       	cpc	r27, r1
    1212:	50 f0       	brcs	.+20     	; 0x1228 <__stack+0x129>
    1214:	4f 31       	cpi	r20, 0x1F	; 31
    1216:	51 05       	cpc	r21, r1
    1218:	61 05       	cpc	r22, r1
    121a:	71 05       	cpc	r23, r1
    121c:	28 f0       	brcs	.+10     	; 0x1228 <__stack+0x129>
		{
			led_pwm_count = 60; // 0x3c
    121e:	8c e3       	ldi	r24, 0x3C	; 60
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	9c 83       	std	Y+4, r25	; 0x04
    1224:	8b 83       	std	Y+3, r24	; 0x03
    1226:	17 c0       	rjmp	.+46     	; 0x1256 <__stack+0x157>
		}
		///// 헹굼 끝 /////
		else if (sec_count == 30)
    1228:	4e 31       	cpi	r20, 0x1E	; 30
    122a:	51 05       	cpc	r21, r1
    122c:	61 05       	cpc	r22, r1
    122e:	71 05       	cpc	r23, r1
		{
			nextstep_pause_wash(); // 모드가 바뀔 때 5초동안 멈춤
    1230:	11 f4       	brne	.+4      	; 0x1236 <__stack+0x137>
    1232:	30 dd       	rcall	.-1440   	; 0xc94 <nextstep_pause_wash>
    1234:	10 c0       	rjmp	.+32     	; 0x1256 <__stack+0x157>
		}
		///// 탈수 시작 /////
		else if (sec_count < 30)
    1236:	4e 31       	cpi	r20, 0x1E	; 30
    1238:	51 05       	cpc	r21, r1
    123a:	61 05       	cpc	r22, r1
    123c:	71 05       	cpc	r23, r1
    123e:	28 f4       	brcc	.+10     	; 0x124a <__stack+0x14b>
		{
			led_pwm_count = 24; // 0x18
    1240:	88 e1       	ldi	r24, 0x18	; 24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	9c 83       	std	Y+4, r25	; 0x04
    1246:	8b 83       	std	Y+3, r24	; 0x03
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <__stack+0x157>
		}
		///// 탈수 끝 /////
		else if (sec_count == 0)
    124a:	45 2b       	or	r20, r21
    124c:	46 2b       	or	r20, r22
    124e:	47 2b       	or	r20, r23
    1250:	11 f4       	brne	.+4      	; 0x1256 <__stack+0x157>
		{
			led_pwm_count = 0;
    1252:	1c 82       	std	Y+4, r1	; 0x04
    1254:	1b 82       	std	Y+3, r1	; 0x03
		}
		
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
    1256:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <fnd_refreshrate>
    125a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <fnd_refreshrate+0x1>
    125e:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <fnd_refreshrate+0x2>
    1262:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <fnd_refreshrate+0x3>
    1266:	02 97       	sbiw	r24, 0x02	; 2
    1268:	a1 05       	cpc	r26, r1
    126a:	b1 05       	cpc	r27, r1
    126c:	d0 f0       	brcs	.+52     	; 0x12a2 <__stack+0x1a3>
		{
			fnd_refreshrate = 0;
    126e:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <fnd_refreshrate>
    1272:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <fnd_refreshrate+0x1>
    1276:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate+0x2>
    127a:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x3>
			make_pwm_led_control(&led_pwm_count);
    127e:	ce 01       	movw	r24, r28
    1280:	03 96       	adiw	r24, 0x03	; 3
    1282:	5f d0       	rcall	.+190    	; 0x1342 <make_pwm_led_control>
			if (loading_clock_change_val)
    1284:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <loading_clock_change_val>
    1288:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <loading_clock_change_val+0x1>
    128c:	89 2b       	or	r24, r25
    128e:	19 f0       	breq	.+6      	; 0x1296 <__stack+0x197>
			{
				fnd_display(); // 시간 보여주기
    1290:	0e 94 bf 00 	call	0x17e	; 0x17e <fnd_display>
    1294:	06 c0       	rjmp	.+12     	; 0x12a2 <__stack+0x1a3>
			}
			else
			{
				fnd_loading_display(&spin_forward_count, &forward_state); // 로딩 보여주기
    1296:	be 01       	movw	r22, r28
    1298:	6b 5f       	subi	r22, 0xFB	; 251
    129a:	7f 4f       	sbci	r23, 0xFF	; 255
    129c:	ce 01       	movw	r24, r28
    129e:	07 96       	adiw	r24, 0x07	; 7
    12a0:	d8 dd       	rcall	.-1104   	; 0xe52 <fnd_loading_display>
			}
		}
		
		///// 일시정지 구현
		
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0 누르면 일시정지
    12a2:	64 e0       	ldi	r22, 0x04	; 4
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 6a 00 	call	0xd4	; 0xd4 <get_button>
    12ae:	89 2b       	or	r24, r25
    12b0:	41 f0       	breq	.+16     	; 0x12c2 <__stack+0x1c3>
		{
			return_enable = 0;
    12b2:	1a 82       	std	Y+2, r1	; 0x02
    12b4:	19 82       	std	Y+1, r1	; 0x01
			pause_wash(&return_enable, &led_pwm_count);
    12b6:	be 01       	movw	r22, r28
    12b8:	6d 5f       	subi	r22, 0xFD	; 253
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	ce 01       	movw	r24, r28
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	e0 d9       	rcall	.-3136   	; 0x682 <pause_wash>
	int spin_forward_count = 0;
	loading_rot = 0;
	
	sec_count = total_wash_time;
	
	while (sec_count > 0 && return_enable == 1)
    12c2:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sec_count>
    12c6:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <sec_count+0x1>
    12ca:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <sec_count+0x2>
    12ce:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <sec_count+0x3>
    12d2:	89 2b       	or	r24, r25
    12d4:	8a 2b       	or	r24, r26
    12d6:	8b 2b       	or	r24, r27
    12d8:	29 f0       	breq	.+10     	; 0x12e4 <__stack+0x1e5>
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	9a 81       	ldd	r25, Y+2	; 0x02
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <__stack+0x1e5>
    12e2:	ec ce       	rjmp	.-552    	; 0x10bc <custom_wash_start+0x52>
			return_enable = 0;
			pause_wash(&return_enable, &led_pwm_count);
		}
		
	}
	OCR3C = 0;
    12e4:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    12e8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	custom_wash_mode = 4; // end 화면으로 이동
    12ec:	84 e0       	ldi	r24, 0x04	; 4
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
    12f4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
	sec_count = 0; // 다 끝나면 끝
    12f8:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <sec_count>
    12fc:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sec_count+0x1>
    1300:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <sec_count+0x2>
    1304:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <sec_count+0x3>
}
    1308:	28 96       	adiw	r28, 0x08	; 8
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	08 95       	ret

0000131e <led_on_pwm>:
	//}
}

void led_on_pwm(int dim) // dim의 반복을 이용해서 밝기를 제어 (PWM의 HIGH 비율을 제어)
{
	for (int i = 0; i < 256; i++)
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	0a c0       	rjmp	.+20     	; 0x1338 <led_on_pwm+0x1a>
	{
		if (i > dim)
    1324:	82 17       	cp	r24, r18
    1326:	93 07       	cpc	r25, r19
    1328:	0c f4       	brge	.+2      	; 0x132c <led_on_pwm+0xe>
		{
			PORTA = 0; // duty cycle이 넘어가면 LED all off
    132a:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    132c:	4a e6       	ldi	r20, 0x6A	; 106
    132e:	4a 95       	dec	r20
    1330:	f1 f7       	brne	.-4      	; 0x132e <led_on_pwm+0x10>
    1332:	00 c0       	rjmp	.+0      	; 0x1334 <led_on_pwm+0x16>
	//}
}

void led_on_pwm(int dim) // dim의 반복을 이용해서 밝기를 제어 (PWM의 HIGH 비율을 제어)
{
	for (int i = 0; i < 256; i++)
    1334:	2f 5f       	subi	r18, 0xFF	; 255
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	2f 3f       	cpi	r18, 0xFF	; 255
    133a:	31 05       	cpc	r19, r1
    133c:	99 f3       	breq	.-26     	; 0x1324 <led_on_pwm+0x6>
    133e:	94 f3       	brlt	.-28     	; 0x1324 <led_on_pwm+0x6>
		{
			PORTA = 0; // duty cycle이 넘어가면 LED all off
		}
		_delay_us(20);
	}
    1340:	08 95       	ret

00001342 <make_pwm_led_control>:
extern volatile uint32_t msec_count;


void make_pwm_led_control(int *led_pwm_count)
{
	DDRA = 0xff; // led 모두 출력 모드
    1342:	2f ef       	ldi	r18, 0xFF	; 255
    1344:	2a bb       	out	0x1a, r18	; 26
	PORTA = *led_pwm_count; // 입력받은 카운트 만큼 LED on
    1346:	fc 01       	movw	r30, r24
    1348:	80 81       	ld	r24, Z
    134a:	8b bb       	out	0x1b, r24	; 27
	//PORTA = "0xff"; // led all on
	
	// dark --> bright --> dark 순서로 진행되는 코드
	//while (1)
	//{
	led_on_pwm(dim); // 지속적으로 on할거면 이 함수만 while 반복
    134c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <dim>
    1350:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <dim+0x1>
    1354:	e4 df       	rcall	.-56     	; 0x131e <led_on_pwm>
	dim += direction;
    1356:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <dim>
    135a:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <dim+0x1>
    135e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <direction>
    1362:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <direction+0x1>
    1366:	82 0f       	add	r24, r18
    1368:	93 1f       	adc	r25, r19
    136a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <dim+0x1>
    136e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <dim>
	
	if (dim == 255) // 다 밝아지면 다시 어두워지도록 함
    1372:	8f 3f       	cpi	r24, 0xFF	; 255
    1374:	91 05       	cpc	r25, r1
    1376:	31 f4       	brne	.+12     	; 0x1384 <make_pwm_led_control+0x42>
	{
		direction = -1;
    1378:	2f ef       	ldi	r18, 0xFF	; 255
    137a:	3f ef       	ldi	r19, 0xFF	; 255
    137c:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <direction+0x1>
    1380:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <direction>
	}
	if (dim == 0) // 다 어두워지면 다시 밝아지도록 함
    1384:	89 2b       	or	r24, r25
    1386:	31 f4       	brne	.+12     	; 0x1394 <make_pwm_led_control+0x52>
	{
		direction = 1;
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <direction+0x1>
    1390:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <direction>
    1394:	08 95       	ret

00001396 <__vector_16>:
extern void init_n289n();

FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	8f 93       	push	r24
    13a2:	9f 93       	push	r25
    13a4:	af 93       	push	r26
    13a6:	bf 93       	push	r27
	TCNT0=6;
    13a8:	86 e0       	ldi	r24, 0x06	; 6
    13aa:	82 bf       	out	0x32, r24	; 50
	msec_count++;
    13ac:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <msec_count>
    13b0:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <msec_count+0x1>
    13b4:	a0 91 a0 01 	lds	r26, 0x01A0	; 0x8001a0 <msec_count+0x2>
    13b8:	b0 91 a1 01 	lds	r27, 0x01A1	; 0x8001a1 <msec_count+0x3>
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	a1 1d       	adc	r26, r1
    13c0:	b1 1d       	adc	r27, r1
    13c2:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <msec_count>
    13c6:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <msec_count+0x1>
    13ca:	a0 93 a0 01 	sts	0x01A0, r26	; 0x8001a0 <msec_count+0x2>
    13ce:	b0 93 a1 01 	sts	0x01A1, r27	; 0x8001a1 <msec_count+0x3>
	fnd_refreshrate++;
    13d2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <fnd_refreshrate>
    13d6:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <fnd_refreshrate+0x1>
    13da:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <fnd_refreshrate+0x2>
    13de:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <fnd_refreshrate+0x3>
    13e2:	01 96       	adiw	r24, 0x01	; 1
    13e4:	a1 1d       	adc	r26, r1
    13e6:	b1 1d       	adc	r27, r1
    13e8:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <fnd_refreshrate>
    13ec:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <fnd_refreshrate+0x1>
    13f0:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <fnd_refreshrate+0x2>
    13f4:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <fnd_refreshrate+0x3>
	check_timer++;
    13f8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <check_timer>
    13fc:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <check_timer+0x1>
    1400:	a0 91 98 01 	lds	r26, 0x0198	; 0x800198 <check_timer+0x2>
    1404:	b0 91 99 01 	lds	r27, 0x0199	; 0x800199 <check_timer+0x3>
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	a1 1d       	adc	r26, r1
    140c:	b1 1d       	adc	r27, r1
    140e:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <check_timer>
    1412:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <check_timer+0x1>
    1416:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <check_timer+0x2>
    141a:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <check_timer+0x3>
	loading_clock_change++;
    141e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <loading_clock_change>
    1422:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <loading_clock_change+0x1>
    1426:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <loading_clock_change+0x2>
    142a:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <loading_clock_change+0x3>
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	a1 1d       	adc	r26, r1
    1432:	b1 1d       	adc	r27, r1
    1434:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <loading_clock_change>
    1438:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <loading_clock_change+0x1>
    143c:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <loading_clock_change+0x2>
    1440:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <loading_clock_change+0x3>
	loading_refreshrate++;
    1444:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <loading_refreshrate>
    1448:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <loading_refreshrate+0x1>
    144c:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <loading_refreshrate+0x2>
    1450:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <loading_refreshrate+0x3>
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	a1 1d       	adc	r26, r1
    1458:	b1 1d       	adc	r27, r1
    145a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <loading_refreshrate>
    145e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <loading_refreshrate+0x1>
    1462:	a0 93 90 01 	sts	0x0190, r26	; 0x800190 <loading_refreshrate+0x2>
    1466:	b0 93 91 01 	sts	0x0191, r27	; 0x800191 <loading_refreshrate+0x3>
}
    146a:	bf 91       	pop	r27
    146c:	af 91       	pop	r26
    146e:	9f 91       	pop	r25
    1470:	8f 91       	pop	r24
    1472:	0f 90       	pop	r0
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	0f 90       	pop	r0
    1478:	1f 90       	pop	r1
    147a:	18 95       	reti

0000147c <init_timer0>:
	}
}

void init_timer0()
{
	TCNT0 = 6;
    147c:	86 e0       	ldi	r24, 0x06	; 6
    147e:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
    1480:	83 b7       	in	r24, 0x33	; 51
    1482:	84 60       	ori	r24, 0x04	; 4
    1484:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
    1486:	87 b7       	in	r24, 0x37	; 55
    1488:	81 60       	ori	r24, 0x01	; 1
    148a:	87 bf       	out	0x37, r24	; 55
    148c:	08 95       	ret

0000148e <main>:
	loading_refreshrate++;
}

int main(void)
{
	init_timer0();
    148e:	f6 df       	rcall	.-20     	; 0x147c <init_timer0>
	init_uart0();
    1490:	00 d1       	rcall	.+512    	; 0x1692 <init_uart0>
	init_uart1();
    1492:	92 d1       	rcall	.+804    	; 0x17b8 <init_uart1>
    1494:	02 d2       	rcall	.+1028   	; 0x189a <init_ultrasonic>
	init_ultrasonic();
    1496:	0e 94 66 00 	call	0xcc	; 0xcc <init_button>
	init_button();
    149a:	0c d0       	rcall	.+24     	; 0x14b4 <init_timer3_pwm>
	init_timer3_pwm();
    149c:	23 d0       	rcall	.+70     	; 0x14e4 <init_n289n>
    149e:	84 e2       	ldi	r24, 0x24	; 36
	init_n289n();
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <__iob+0x3>
	
	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
    14a6:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <__iob+0x2>
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	8a bb       	out	0x1a, r24	; 26
	
	DDRA=0xff;   // led를 출력 모드로
    14ae:	78 94       	sei
    14b0:	39 da       	rcall	.-2958   	; 0x924 <fnd_main>
	sei();     // 전역적으로 interrupt 허용
    14b2:	ff cf       	rjmp	.-2      	; 0x14b2 <main+0x24>

000014b4 <init_timer3_pwm>:
	
	fnd_main();
    14b4:	82 b1       	in	r24, 0x02	; 2
    14b6:	88 62       	ori	r24, 0x28	; 40
    14b8:	82 b9       	out	0x02, r24	; 2
void init_timer3_pwm(void)
{
	// DDRE |= 1 << 3 | 1 << 4 | 1 << 5; 현재 4번에 초음파가 연결되어 있다.
	DDRE |= 1 << 3 | 1 << 5;
	// 모드 5 : 8비트 고속 pwm    TCCR3A레지스터 WGM30과 TCCR3B레지스터 WGM32를 1로 만든다.
	TCCR3A |= 1 << WGM30;
    14ba:	ab e8       	ldi	r26, 0x8B	; 139
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	8c 91       	ld	r24, X
    14c0:	81 60       	ori	r24, 0x01	; 1
    14c2:	8c 93       	st	X, r24
	TCCR3B |= 1 << WGM32;
    14c4:	ea e8       	ldi	r30, 0x8A	; 138
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	88 60       	ori	r24, 0x08	; 8
    14cc:	80 83       	st	Z, r24
	// 비반전모드 top : 0x00ff  비교일치값(pwm)지정 : OCR3C
	// TCCR3A레지스터의 COM3C1을 1로 set
	// 비교일치 발생시 OC3C의 출력 핀은 LOw로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR3A |= 1 << COM3C1;
    14ce:	8c 91       	ld	r24, X
    14d0:	88 60       	ori	r24, 0x08	; 8
    14d2:	8c 93       	st	X, r24
	// 분주비 : 64   16,000,000hz -> 250,000hz         TCCR3B의 CS30, CS31을 1로 set
	// 주기 : 1 / 250,000 -> 4us
	// 250000hz에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//			    127개의 펄스를 count하면 소요시간 : 0.51ms
	TCCR3B |= 1 << CS31 | 1 << CS30;
    14d4:	80 81       	ld	r24, Z
    14d6:	83 60       	ori	r24, 0x03	; 3
    14d8:	80 83       	st	Z, r24
	OCR3C = 0; // 비교일치값 (Output Compare Register : PWM 값)
    14da:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    14de:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    14e2:	08 95       	ret

000014e4 <init_n289n>:
}

void init_n289n(void)
{
	PORTF &= ~(1 << 6 | 1 << 7);  // 6, 7 reset
    14e4:	e2 e6       	ldi	r30, 0x62	; 98
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8f 73       	andi	r24, 0x3F	; 63
    14ec:	80 83       	st	Z, r24
	PORTF |= 1 << 6; // 정회전
    14ee:	80 81       	ld	r24, Z
    14f0:	80 64       	ori	r24, 0x40	; 64
    14f2:	80 83       	st	Z, r24
    14f4:	08 95       	ret

000014f6 <washing_machine_fan_control>:
}

void washing_machine_fan_control(int *spin_strength , int *forward_state)
{
	OCR3C = *spin_strength;
    14f6:	fc 01       	movw	r30, r24
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    1500:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	
	if (check_timer >= 10000) // 10초마다 방향 바뀜
    1504:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <check_timer>
    1508:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <check_timer+0x1>
    150c:	a0 91 98 01 	lds	r26, 0x0198	; 0x800198 <check_timer+0x2>
    1510:	b0 91 99 01 	lds	r27, 0x0199	; 0x800199 <check_timer+0x3>
    1514:	80 31       	cpi	r24, 0x10	; 16
    1516:	97 42       	sbci	r25, 0x27	; 39
    1518:	a1 05       	cpc	r26, r1
    151a:	b1 05       	cpc	r27, r1
    151c:	38 f1       	brcs	.+78     	; 0x156c <washing_machine_fan_control+0x76>
	{
		PORTF &= ~(1 << 6 | 1 << 7);  // 6, 7 reset
    151e:	e2 e6       	ldi	r30, 0x62	; 98
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8f 73       	andi	r24, 0x3F	; 63
    1526:	80 83       	st	Z, r24
		fan_forward = !fan_forward;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <fan_forward>
    1530:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <fan_forward+0x1>
    1534:	23 2b       	or	r18, r19
    1536:	11 f0       	breq	.+4      	; 0x153c <washing_machine_fan_control+0x46>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <fan_forward+0x1>
    1540:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <fan_forward>
		*forward_state = !*forward_state;
    1544:	fb 01       	movw	r30, r22
    1546:	20 81       	ld	r18, Z
    1548:	31 81       	ldd	r19, Z+1	; 0x01
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	23 2b       	or	r18, r19
    1550:	11 f0       	breq	.+4      	; 0x1556 <washing_machine_fan_control+0x60>
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	fb 01       	movw	r30, r22
    1558:	91 83       	std	Z+1, r25	; 0x01
    155a:	80 83       	st	Z, r24
		check_timer = 0;
    155c:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <check_timer>
    1560:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <check_timer+0x1>
    1564:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <check_timer+0x2>
    1568:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <check_timer+0x3>
	}
	
	if (fan_forward == 1 /*&& pause_toggle == 0*/)
    156c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <fan_forward>
    1570:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <fan_forward+0x1>
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	91 05       	cpc	r25, r1
    1578:	31 f4       	brne	.+12     	; 0x1586 <washing_machine_fan_control+0x90>
	{
		PORTF |= 1 << 6; // 정회전
    157a:	e2 e6       	ldi	r30, 0x62	; 98
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	80 64       	ori	r24, 0x40	; 64
    1582:	80 83       	st	Z, r24
    1584:	08 95       	ret
	}
	else if (fan_forward == 0 /*&& pause_toggle == 0*/)
    1586:	89 2b       	or	r24, r25
    1588:	29 f4       	brne	.+10     	; 0x1594 <washing_machine_fan_control+0x9e>
	{
		PORTF |= 1 << 7; // 역회전
    158a:	e2 e6       	ldi	r30, 0x62	; 98
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	80 68       	ori	r24, 0x80	; 128
    1592:	80 83       	st	Z, r24
    1594:	08 95       	ret

00001596 <__vector_18>:

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
    1596:	1f 92       	push	r1
    1598:	0f 92       	push	r0
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	0f 92       	push	r0
    159e:	11 24       	eor	r1, r1
    15a0:	0b b6       	in	r0, 0x3b	; 59
    15a2:	0f 92       	push	r0
    15a4:	2f 93       	push	r18
    15a6:	3f 93       	push	r19
    15a8:	4f 93       	push	r20
    15aa:	5f 93       	push	r21
    15ac:	6f 93       	push	r22
    15ae:	7f 93       	push	r23
    15b0:	8f 93       	push	r24
    15b2:	9f 93       	push	r25
    15b4:	af 93       	push	r26
    15b6:	bf 93       	push	r27
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	1f 92       	push	r1
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
    15c6:	8c b1       	in	r24, 0x0c	; 12
    15c8:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	8d 30       	cpi	r24, 0x0D	; 13
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <__vector_18+0x40>
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	8a 30       	cpi	r24, 0x0A	; 10
    15d4:	61 f5       	brne	.+88     	; 0x162e <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
    15d6:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <rear>
    15da:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <rear+0x1>
    15de:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <i.1894>
    15e2:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <i.1894+0x1>
    15e6:	40 e5       	ldi	r20, 0x50	; 80
    15e8:	42 9f       	mul	r20, r18
    15ea:	f0 01       	movw	r30, r0
    15ec:	43 9f       	mul	r20, r19
    15ee:	f0 0d       	add	r31, r0
    15f0:	11 24       	eor	r1, r1
    15f2:	e4 55       	subi	r30, 0x54	; 84
    15f4:	fe 4f       	sbci	r31, 0xFE	; 254
    15f6:	e8 0f       	add	r30, r24
    15f8:	f9 1f       	adc	r31, r25
    15fa:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
    15fc:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <i.1894+0x1>
    1600:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <i.1894>
		rear++;
    1604:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <rear>
    1608:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <rear+0x1>
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <rear+0x1>
    1612:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
    1616:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <rear>
    161a:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <rear+0x1>
    161e:	6a e0       	ldi	r22, 0x0A	; 10
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	0e d3       	rcall	.+1564   	; 0x1c40 <__divmodhi4>
    1624:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <rear+0x1>
    1628:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <rear>
    162c:	1c c0       	rjmp	.+56     	; 0x1666 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
    162e:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <rear>
    1632:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <rear+0x1>
    1636:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <i.1894>
    163a:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <i.1894+0x1>
    163e:	9c 01       	movw	r18, r24
    1640:	2f 5f       	subi	r18, 0xFF	; 255
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	30 93 a3 01 	sts	0x01A3, r19	; 0x8001a3 <i.1894+0x1>
    1648:	20 93 a2 01 	sts	0x01A2, r18	; 0x8001a2 <i.1894>
    164c:	49 81       	ldd	r20, Y+1	; 0x01
    164e:	50 e5       	ldi	r21, 0x50	; 80
    1650:	56 9f       	mul	r21, r22
    1652:	90 01       	movw	r18, r0
    1654:	57 9f       	mul	r21, r23
    1656:	30 0d       	add	r19, r0
    1658:	11 24       	eor	r1, r1
    165a:	24 55       	subi	r18, 0x54	; 84
    165c:	3e 4f       	sbci	r19, 0xFE	; 254
    165e:	f9 01       	movw	r30, r18
    1660:	e8 0f       	add	r30, r24
    1662:	f9 1f       	adc	r31, r25
    1664:	40 83       	st	Z, r20
	}
		  
}
    1666:	0f 90       	pop	r0
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	ff 91       	pop	r31
    166e:	ef 91       	pop	r30
    1670:	bf 91       	pop	r27
    1672:	af 91       	pop	r26
    1674:	9f 91       	pop	r25
    1676:	8f 91       	pop	r24
    1678:	7f 91       	pop	r23
    167a:	6f 91       	pop	r22
    167c:	5f 91       	pop	r21
    167e:	4f 91       	pop	r20
    1680:	3f 91       	pop	r19
    1682:	2f 91       	pop	r18
    1684:	0f 90       	pop	r0
    1686:	0b be       	out	0x3b, r0	; 59
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	0f 90       	pop	r0
    168e:	1f 90       	pop	r1
    1690:	18 95       	reti

00001692 <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
    1692:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
    1696:	8f ec       	ldi	r24, 0xCF	; 207
    1698:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
    169a:	8b b1       	in	r24, 0x0b	; 11
    169c:	82 60       	ori	r24, 0x02	; 2
    169e:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
    16a0:	e5 e9       	ldi	r30, 0x95	; 149
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	86 60       	ori	r24, 0x06	; 6
    16a8:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
    16aa:	8a b1       	in	r24, 0x0a	; 10
    16ac:	88 69       	ori	r24, 0x98	; 152
    16ae:	8a b9       	out	0x0a, r24	; 10
    16b0:	08 95       	ret

000016b2 <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
    16b2:	5d 9b       	sbis	0x0b, 5	; 11
    16b4:	fe cf       	rjmp	.-4      	; 0x16b2 <UART0_transmit>
		;   // no operation NOP
	
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
    16b6:	8c b9       	out	0x0c, r24	; 12
    16b8:	08 95       	ret

000016ba <__vector_30>:

// BT로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART1_RX_vect)
{
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	0b b6       	in	r0, 0x3b	; 59
    16c6:	0f 92       	push	r0
    16c8:	2f 93       	push	r18
    16ca:	3f 93       	push	r19
    16cc:	4f 93       	push	r20
    16ce:	5f 93       	push	r21
    16d0:	6f 93       	push	r22
    16d2:	7f 93       	push	r23
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
    16d8:	af 93       	push	r26
    16da:	bf 93       	push	r27
    16dc:	ef 93       	push	r30
    16de:	ff 93       	push	r31
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	1f 92       	push	r1
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
    16ea:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    16ee:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	8d 30       	cpi	r24, 0x0D	; 13
    16f4:	19 f0       	breq	.+6      	; 0x16fc <__vector_30+0x42>
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	8a 30       	cpi	r24, 0x0A	; 10
    16fa:	61 f5       	brne	.+88     	; 0x1754 <__vector_30+0x9a>
	{
		rx1_buff[rear1][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
    16fc:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <rear1>
    1700:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <rear1+0x1>
    1704:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <i.1896>
    1708:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <i.1896+0x1>
    170c:	40 e5       	ldi	r20, 0x50	; 80
    170e:	42 9f       	mul	r20, r18
    1710:	f0 01       	movw	r30, r0
    1712:	43 9f       	mul	r20, r19
    1714:	f0 0d       	add	r31, r0
    1716:	11 24       	eor	r1, r1
    1718:	e4 53       	subi	r30, 0x34	; 52
    171a:	fb 4f       	sbci	r31, 0xFB	; 251
    171c:	e8 0f       	add	r30, r24
    171e:	f9 1f       	adc	r31, r25
    1720:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
    1722:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <i.1896+0x1>
    1726:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <i.1896>
		rear1++;
    172a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <rear1>
    172e:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <rear1+0x1>
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <rear1+0x1>
    1738:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <rear1>
		rear1 %= COMMAND_NUMBER;   // 0 ~ 9 if (rear1 >= 9) rear1 =0;
    173c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <rear1>
    1740:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <rear1+0x1>
    1744:	6a e0       	ldi	r22, 0x0A	; 10
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	7b d2       	rcall	.+1270   	; 0x1c40 <__divmodhi4>
    174a:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <rear1+0x1>
    174e:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <rear1>
    1752:	1c c0       	rjmp	.+56     	; 0x178c <__vector_30+0xd2>
		// !!!! 이곳에 queue full (rx1_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx1_buff[rear1][i++] = data;
    1754:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <rear1>
    1758:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <rear1+0x1>
    175c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <i.1896>
    1760:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <i.1896+0x1>
    1764:	9c 01       	movw	r18, r24
    1766:	2f 5f       	subi	r18, 0xFF	; 255
    1768:	3f 4f       	sbci	r19, 0xFF	; 255
    176a:	30 93 a7 01 	sts	0x01A7, r19	; 0x8001a7 <i.1896+0x1>
    176e:	20 93 a6 01 	sts	0x01A6, r18	; 0x8001a6 <i.1896>
    1772:	49 81       	ldd	r20, Y+1	; 0x01
    1774:	50 e5       	ldi	r21, 0x50	; 80
    1776:	56 9f       	mul	r21, r22
    1778:	90 01       	movw	r18, r0
    177a:	57 9f       	mul	r21, r23
    177c:	30 0d       	add	r19, r0
    177e:	11 24       	eor	r1, r1
    1780:	24 53       	subi	r18, 0x34	; 52
    1782:	3b 4f       	sbci	r19, 0xFB	; 251
    1784:	f9 01       	movw	r30, r18
    1786:	e8 0f       	add	r30, r24
    1788:	f9 1f       	adc	r31, r25
    178a:	40 83       	st	Z, r20
	}
		  
}
    178c:	0f 90       	pop	r0
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	bf 91       	pop	r27
    1798:	af 91       	pop	r26
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	7f 91       	pop	r23
    17a0:	6f 91       	pop	r22
    17a2:	5f 91       	pop	r21
    17a4:	4f 91       	pop	r20
    17a6:	3f 91       	pop	r19
    17a8:	2f 91       	pop	r18
    17aa:	0f 90       	pop	r0
    17ac:	0b be       	out	0x3b, r0	; 59
    17ae:	0f 90       	pop	r0
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	0f 90       	pop	r0
    17b4:	1f 90       	pop	r1
    17b6:	18 95       	reti

000017b8 <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
    17b8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
    17bc:	8f ec       	ldi	r24, 0xCF	; 207
    17be:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
    17c2:	eb e9       	ldi	r30, 0x9B	; 155
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	82 60       	ori	r24, 0x02	; 2
    17ca:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
    17cc:	ed e9       	ldi	r30, 0x9D	; 157
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	86 60       	ori	r24, 0x06	; 6
    17d4:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
    17d6:	ea e9       	ldi	r30, 0x9A	; 154
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	88 69       	ori	r24, 0x98	; 152
    17de:	80 83       	st	Z, r24
    17e0:	08 95       	ret

000017e2 <__vector_5>:
char scm[50];

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect)
{
    17e2:	1f 92       	push	r1
    17e4:	0f 92       	push	r0
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	0f 92       	push	r0
    17ea:	11 24       	eor	r1, r1
    17ec:	0b b6       	in	r0, 0x3b	; 59
    17ee:	0f 92       	push	r0
    17f0:	2f 93       	push	r18
    17f2:	3f 93       	push	r19
    17f4:	4f 93       	push	r20
    17f6:	5f 93       	push	r21
    17f8:	6f 93       	push	r22
    17fa:	7f 93       	push	r23
    17fc:	8f 93       	push	r24
    17fe:	9f 93       	push	r25
    1800:	af 93       	push	r26
    1802:	bf 93       	push	r27
    1804:	ef 93       	push	r30
    1806:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN & (1 << ECHO))
    1808:	0c 9b       	sbis	0x01, 4	; 1
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <__vector_5+0x30>
	{
		TCNT1 = 0;
    180c:	1d bc       	out	0x2d, r1	; 45
    180e:	1c bc       	out	0x2c, r1	; 44
    1810:	31 c0       	rjmp	.+98     	; 0x1874 <__vector_5+0x92>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
    1812:	6c b5       	in	r22, 0x2c	; 44
    1814:	7d b5       	in	r23, 0x2d	; 45
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	21 d1       	rcall	.+578    	; 0x1a5e <__floatunsisf>
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	34 e2       	ldi	r19, 0x24	; 36
    1820:	44 e7       	ldi	r20, 0x74	; 116
    1822:	59 e4       	ldi	r21, 0x49	; 73
    1824:	aa d1       	rcall	.+852    	; 0x1b7a <__mulsf3>
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e8       	ldi	r20, 0x80	; 128
    182c:	54 e4       	ldi	r21, 0x44	; 68
    182e:	a5 d1       	rcall	.+842    	; 0x1b7a <__mulsf3>
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	34 e2       	ldi	r19, 0x24	; 36
    1834:	44 e7       	ldi	r20, 0x74	; 116
    1836:	5b e4       	ldi	r21, 0x4B	; 75
    1838:	79 d0       	rcall	.+242    	; 0x192c <__divsf3>
    183a:	e0 d0       	rcall	.+448    	; 0x19fc <__fixsfsi>
    183c:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <ultrasonic_distance+0x1>
    1840:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <ultrasonic_distance>
		
		// 예) TCNT1에 10이 들어 있다고 가정하자
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
		sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
    1844:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <ultrasonic_distance>
    1848:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <ultrasonic_distance+0x1>
    184c:	6a e3       	ldi	r22, 0x3A	; 58
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	f7 d1       	rcall	.+1006   	; 0x1c40 <__divmodhi4>
    1852:	7f 93       	push	r23
    1854:	6f 93       	push	r22
    1856:	8d e6       	ldi	r24, 0x6D	; 109
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	9f 93       	push	r25
    185c:	8f 93       	push	r24
    185e:	8c ee       	ldi	r24, 0xEC	; 236
    1860:	97 e0       	ldi	r25, 0x07	; 7
    1862:	9f 93       	push	r25
    1864:	8f 93       	push	r24
    1866:	48 d2       	rcall	.+1168   	; 0x1cf8 <sprintf>
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
	}
}
    1874:	ff 91       	pop	r31
    1876:	ef 91       	pop	r30
    1878:	bf 91       	pop	r27
    187a:	af 91       	pop	r26
    187c:	9f 91       	pop	r25
    187e:	8f 91       	pop	r24
    1880:	7f 91       	pop	r23
    1882:	6f 91       	pop	r22
    1884:	5f 91       	pop	r21
    1886:	4f 91       	pop	r20
    1888:	3f 91       	pop	r19
    188a:	2f 91       	pop	r18
    188c:	0f 90       	pop	r0
    188e:	0b be       	out	0x3b, r0	; 59
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	0f 90       	pop	r0
    1896:	1f 90       	pop	r1
    1898:	18 95       	reti

0000189a <init_ultrasonic>:

void init_ultrasonic()
{
	TRIG_DDR |= 1 << TRIG; // output mode로 설정
    189a:	e4 e6       	ldi	r30, 0x64	; 100
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	80 61       	ori	r24, 0x10	; 16
    18a2:	80 83       	st	Z, r24
	ECHO_DDR &= ~(1 << ECHO); // input mode로 설정
    18a4:	82 b1       	in	r24, 0x02	; 2
    18a6:	8f 7e       	andi	r24, 0xEF	; 239
    18a8:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
    18aa:	8a b7       	in	r24, 0x3a	; 58
    18ac:	81 60       	ori	r24, 0x01	; 1
    18ae:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us	
	TCCR1B |=  1 << CS12 | 1 << CS10; // 1024로 분주
    18b0:	8e b5       	in	r24, 0x2e	; 46
    18b2:	85 60       	ori	r24, 0x05	; 5
    18b4:	8e bd       	out	0x2e, r24	; 46
	EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
    18b6:	89 b7       	in	r24, 0x39	; 57
    18b8:	80 61       	ori	r24, 0x10	; 16
    18ba:	89 bf       	out	0x39, r24	; 57
    18bc:	08 95       	ret

000018be <ultrasonic_trigger>:
}

void ultrasonic_trigger()
{
	TRIG_PORT &= ~(1 << TRIG); // 해당되는 포트만 LOW로 만듦
    18be:	e5 e6       	ldi	r30, 0x65	; 101
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	8f 7e       	andi	r24, 0xEF	; 239
    18c6:	80 83       	st	Z, r24
    18c8:	85 e0       	ldi	r24, 0x05	; 5
    18ca:	8a 95       	dec	r24
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <ultrasonic_trigger+0xc>
    18ce:	00 00       	nop
	_delay_us(1);
	TRIG_PORT |= 1 << TRIG; // HIGH
    18d0:	80 81       	ld	r24, Z
    18d2:	80 61       	ori	r24, 0x10	; 16
    18d4:	80 83       	st	Z, r24
    18d6:	80 e5       	ldi	r24, 0x50	; 80
    18d8:	8a 95       	dec	r24
    18da:	f1 f7       	brne	.-4      	; 0x18d8 <ultrasonic_trigger+0x1a>
	_delay_us(15); // 규격에는 10us인데 reduance
	TRIG_PORT &= ~(1 << TRIG); // LOW
    18dc:	80 81       	ld	r24, Z
    18de:	8f 7e       	andi	r24, 0xEF	; 239
    18e0:	80 83       	st	Z, r24
    18e2:	08 95       	ret

000018e4 <ultrasonic_distance_check>:
}

void ultrasonic_distance_check()
{
	if (check_timer >= 1000) // 1초가 되면
    18e4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <check_timer>
    18e8:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <check_timer+0x1>
    18ec:	a0 91 98 01 	lds	r26, 0x0198	; 0x800198 <check_timer+0x2>
    18f0:	b0 91 99 01 	lds	r27, 0x0199	; 0x800199 <check_timer+0x3>
    18f4:	88 3e       	cpi	r24, 0xE8	; 232
    18f6:	93 40       	sbci	r25, 0x03	; 3
    18f8:	a1 05       	cpc	r26, r1
    18fa:	b1 05       	cpc	r27, r1
    18fc:	b0 f0       	brcs	.+44     	; 0x192a <ultrasonic_distance_check+0x46>
	{
		check_timer = 0;
    18fe:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <check_timer>
    1902:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <check_timer+0x1>
    1906:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <check_timer+0x2>
    190a:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <check_timer+0x3>
		printf("%s", scm);
    190e:	8c ee       	ldi	r24, 0xEC	; 236
    1910:	97 e0       	ldi	r25, 0x07	; 7
    1912:	9f 93       	push	r25
    1914:	8f 93       	push	r24
    1916:	89 e7       	ldi	r24, 0x79	; 121
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	9f 93       	push	r25
    191c:	8f 93       	push	r24
    191e:	d9 d1       	rcall	.+946    	; 0x1cd2 <printf>
		ultrasonic_trigger();
    1920:	ce df       	rcall	.-100    	; 0x18be <ultrasonic_trigger>
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	08 95       	ret

0000192c <__divsf3>:
    192c:	0c d0       	rcall	.+24     	; 0x1946 <__divsf3x>
    192e:	eb c0       	rjmp	.+470    	; 0x1b06 <__fp_round>
    1930:	e3 d0       	rcall	.+454    	; 0x1af8 <__fp_pscB>
    1932:	40 f0       	brcs	.+16     	; 0x1944 <__divsf3+0x18>
    1934:	da d0       	rcall	.+436    	; 0x1aea <__fp_pscA>
    1936:	30 f0       	brcs	.+12     	; 0x1944 <__divsf3+0x18>
    1938:	21 f4       	brne	.+8      	; 0x1942 <__divsf3+0x16>
    193a:	5f 3f       	cpi	r21, 0xFF	; 255
    193c:	19 f0       	breq	.+6      	; 0x1944 <__divsf3+0x18>
    193e:	cc c0       	rjmp	.+408    	; 0x1ad8 <__fp_inf>
    1940:	51 11       	cpse	r21, r1
    1942:	15 c1       	rjmp	.+554    	; 0x1b6e <__fp_szero>
    1944:	cf c0       	rjmp	.+414    	; 0x1ae4 <__fp_nan>

00001946 <__divsf3x>:
    1946:	f0 d0       	rcall	.+480    	; 0x1b28 <__fp_split3>
    1948:	98 f3       	brcs	.-26     	; 0x1930 <__divsf3+0x4>

0000194a <__divsf3_pse>:
    194a:	99 23       	and	r25, r25
    194c:	c9 f3       	breq	.-14     	; 0x1940 <__divsf3+0x14>
    194e:	55 23       	and	r21, r21
    1950:	b1 f3       	breq	.-20     	; 0x193e <__divsf3+0x12>
    1952:	95 1b       	sub	r25, r21
    1954:	55 0b       	sbc	r21, r21
    1956:	bb 27       	eor	r27, r27
    1958:	aa 27       	eor	r26, r26
    195a:	62 17       	cp	r22, r18
    195c:	73 07       	cpc	r23, r19
    195e:	84 07       	cpc	r24, r20
    1960:	38 f0       	brcs	.+14     	; 0x1970 <__divsf3_pse+0x26>
    1962:	9f 5f       	subi	r25, 0xFF	; 255
    1964:	5f 4f       	sbci	r21, 0xFF	; 255
    1966:	22 0f       	add	r18, r18
    1968:	33 1f       	adc	r19, r19
    196a:	44 1f       	adc	r20, r20
    196c:	aa 1f       	adc	r26, r26
    196e:	a9 f3       	breq	.-22     	; 0x195a <__divsf3_pse+0x10>
    1970:	33 d0       	rcall	.+102    	; 0x19d8 <__divsf3_pse+0x8e>
    1972:	0e 2e       	mov	r0, r30
    1974:	3a f0       	brmi	.+14     	; 0x1984 <__divsf3_pse+0x3a>
    1976:	e0 e8       	ldi	r30, 0x80	; 128
    1978:	30 d0       	rcall	.+96     	; 0x19da <__divsf3_pse+0x90>
    197a:	91 50       	subi	r25, 0x01	; 1
    197c:	50 40       	sbci	r21, 0x00	; 0
    197e:	e6 95       	lsr	r30
    1980:	00 1c       	adc	r0, r0
    1982:	ca f7       	brpl	.-14     	; 0x1976 <__divsf3_pse+0x2c>
    1984:	29 d0       	rcall	.+82     	; 0x19d8 <__divsf3_pse+0x8e>
    1986:	fe 2f       	mov	r31, r30
    1988:	27 d0       	rcall	.+78     	; 0x19d8 <__divsf3_pse+0x8e>
    198a:	66 0f       	add	r22, r22
    198c:	77 1f       	adc	r23, r23
    198e:	88 1f       	adc	r24, r24
    1990:	bb 1f       	adc	r27, r27
    1992:	26 17       	cp	r18, r22
    1994:	37 07       	cpc	r19, r23
    1996:	48 07       	cpc	r20, r24
    1998:	ab 07       	cpc	r26, r27
    199a:	b0 e8       	ldi	r27, 0x80	; 128
    199c:	09 f0       	breq	.+2      	; 0x19a0 <__divsf3_pse+0x56>
    199e:	bb 0b       	sbc	r27, r27
    19a0:	80 2d       	mov	r24, r0
    19a2:	bf 01       	movw	r22, r30
    19a4:	ff 27       	eor	r31, r31
    19a6:	93 58       	subi	r25, 0x83	; 131
    19a8:	5f 4f       	sbci	r21, 0xFF	; 255
    19aa:	2a f0       	brmi	.+10     	; 0x19b6 <__divsf3_pse+0x6c>
    19ac:	9e 3f       	cpi	r25, 0xFE	; 254
    19ae:	51 05       	cpc	r21, r1
    19b0:	68 f0       	brcs	.+26     	; 0x19cc <__divsf3_pse+0x82>
    19b2:	92 c0       	rjmp	.+292    	; 0x1ad8 <__fp_inf>
    19b4:	dc c0       	rjmp	.+440    	; 0x1b6e <__fp_szero>
    19b6:	5f 3f       	cpi	r21, 0xFF	; 255
    19b8:	ec f3       	brlt	.-6      	; 0x19b4 <__divsf3_pse+0x6a>
    19ba:	98 3e       	cpi	r25, 0xE8	; 232
    19bc:	dc f3       	brlt	.-10     	; 0x19b4 <__divsf3_pse+0x6a>
    19be:	86 95       	lsr	r24
    19c0:	77 95       	ror	r23
    19c2:	67 95       	ror	r22
    19c4:	b7 95       	ror	r27
    19c6:	f7 95       	ror	r31
    19c8:	9f 5f       	subi	r25, 0xFF	; 255
    19ca:	c9 f7       	brne	.-14     	; 0x19be <__divsf3_pse+0x74>
    19cc:	88 0f       	add	r24, r24
    19ce:	91 1d       	adc	r25, r1
    19d0:	96 95       	lsr	r25
    19d2:	87 95       	ror	r24
    19d4:	97 f9       	bld	r25, 7
    19d6:	08 95       	ret
    19d8:	e1 e0       	ldi	r30, 0x01	; 1
    19da:	66 0f       	add	r22, r22
    19dc:	77 1f       	adc	r23, r23
    19de:	88 1f       	adc	r24, r24
    19e0:	bb 1f       	adc	r27, r27
    19e2:	62 17       	cp	r22, r18
    19e4:	73 07       	cpc	r23, r19
    19e6:	84 07       	cpc	r24, r20
    19e8:	ba 07       	cpc	r27, r26
    19ea:	20 f0       	brcs	.+8      	; 0x19f4 <__divsf3_pse+0xaa>
    19ec:	62 1b       	sub	r22, r18
    19ee:	73 0b       	sbc	r23, r19
    19f0:	84 0b       	sbc	r24, r20
    19f2:	ba 0b       	sbc	r27, r26
    19f4:	ee 1f       	adc	r30, r30
    19f6:	88 f7       	brcc	.-30     	; 0x19da <__divsf3_pse+0x90>
    19f8:	e0 95       	com	r30
    19fa:	08 95       	ret

000019fc <__fixsfsi>:
    19fc:	04 d0       	rcall	.+8      	; 0x1a06 <__fixunssfsi>
    19fe:	68 94       	set
    1a00:	b1 11       	cpse	r27, r1
    1a02:	b5 c0       	rjmp	.+362    	; 0x1b6e <__fp_szero>
    1a04:	08 95       	ret

00001a06 <__fixunssfsi>:
    1a06:	98 d0       	rcall	.+304    	; 0x1b38 <__fp_splitA>
    1a08:	88 f0       	brcs	.+34     	; 0x1a2c <__fixunssfsi+0x26>
    1a0a:	9f 57       	subi	r25, 0x7F	; 127
    1a0c:	90 f0       	brcs	.+36     	; 0x1a32 <__fixunssfsi+0x2c>
    1a0e:	b9 2f       	mov	r27, r25
    1a10:	99 27       	eor	r25, r25
    1a12:	b7 51       	subi	r27, 0x17	; 23
    1a14:	a0 f0       	brcs	.+40     	; 0x1a3e <__fixunssfsi+0x38>
    1a16:	d1 f0       	breq	.+52     	; 0x1a4c <__fixunssfsi+0x46>
    1a18:	66 0f       	add	r22, r22
    1a1a:	77 1f       	adc	r23, r23
    1a1c:	88 1f       	adc	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	1a f0       	brmi	.+6      	; 0x1a28 <__fixunssfsi+0x22>
    1a22:	ba 95       	dec	r27
    1a24:	c9 f7       	brne	.-14     	; 0x1a18 <__fixunssfsi+0x12>
    1a26:	12 c0       	rjmp	.+36     	; 0x1a4c <__fixunssfsi+0x46>
    1a28:	b1 30       	cpi	r27, 0x01	; 1
    1a2a:	81 f0       	breq	.+32     	; 0x1a4c <__fixunssfsi+0x46>
    1a2c:	9f d0       	rcall	.+318    	; 0x1b6c <__fp_zero>
    1a2e:	b1 e0       	ldi	r27, 0x01	; 1
    1a30:	08 95       	ret
    1a32:	9c c0       	rjmp	.+312    	; 0x1b6c <__fp_zero>
    1a34:	67 2f       	mov	r22, r23
    1a36:	78 2f       	mov	r23, r24
    1a38:	88 27       	eor	r24, r24
    1a3a:	b8 5f       	subi	r27, 0xF8	; 248
    1a3c:	39 f0       	breq	.+14     	; 0x1a4c <__fixunssfsi+0x46>
    1a3e:	b9 3f       	cpi	r27, 0xF9	; 249
    1a40:	cc f3       	brlt	.-14     	; 0x1a34 <__fixunssfsi+0x2e>
    1a42:	86 95       	lsr	r24
    1a44:	77 95       	ror	r23
    1a46:	67 95       	ror	r22
    1a48:	b3 95       	inc	r27
    1a4a:	d9 f7       	brne	.-10     	; 0x1a42 <__fixunssfsi+0x3c>
    1a4c:	3e f4       	brtc	.+14     	; 0x1a5c <__fixunssfsi+0x56>
    1a4e:	90 95       	com	r25
    1a50:	80 95       	com	r24
    1a52:	70 95       	com	r23
    1a54:	61 95       	neg	r22
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5c:	08 95       	ret

00001a5e <__floatunsisf>:
    1a5e:	e8 94       	clt
    1a60:	09 c0       	rjmp	.+18     	; 0x1a74 <__floatsisf+0x12>

00001a62 <__floatsisf>:
    1a62:	97 fb       	bst	r25, 7
    1a64:	3e f4       	brtc	.+14     	; 0x1a74 <__floatsisf+0x12>
    1a66:	90 95       	com	r25
    1a68:	80 95       	com	r24
    1a6a:	70 95       	com	r23
    1a6c:	61 95       	neg	r22
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	8f 4f       	sbci	r24, 0xFF	; 255
    1a72:	9f 4f       	sbci	r25, 0xFF	; 255
    1a74:	99 23       	and	r25, r25
    1a76:	a9 f0       	breq	.+42     	; 0x1aa2 <__floatsisf+0x40>
    1a78:	f9 2f       	mov	r31, r25
    1a7a:	96 e9       	ldi	r25, 0x96	; 150
    1a7c:	bb 27       	eor	r27, r27
    1a7e:	93 95       	inc	r25
    1a80:	f6 95       	lsr	r31
    1a82:	87 95       	ror	r24
    1a84:	77 95       	ror	r23
    1a86:	67 95       	ror	r22
    1a88:	b7 95       	ror	r27
    1a8a:	f1 11       	cpse	r31, r1
    1a8c:	f8 cf       	rjmp	.-16     	; 0x1a7e <__floatsisf+0x1c>
    1a8e:	fa f4       	brpl	.+62     	; 0x1ace <__floatsisf+0x6c>
    1a90:	bb 0f       	add	r27, r27
    1a92:	11 f4       	brne	.+4      	; 0x1a98 <__floatsisf+0x36>
    1a94:	60 ff       	sbrs	r22, 0
    1a96:	1b c0       	rjmp	.+54     	; 0x1ace <__floatsisf+0x6c>
    1a98:	6f 5f       	subi	r22, 0xFF	; 255
    1a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa0:	16 c0       	rjmp	.+44     	; 0x1ace <__floatsisf+0x6c>
    1aa2:	88 23       	and	r24, r24
    1aa4:	11 f0       	breq	.+4      	; 0x1aaa <__floatsisf+0x48>
    1aa6:	96 e9       	ldi	r25, 0x96	; 150
    1aa8:	11 c0       	rjmp	.+34     	; 0x1acc <__floatsisf+0x6a>
    1aaa:	77 23       	and	r23, r23
    1aac:	21 f0       	breq	.+8      	; 0x1ab6 <__floatsisf+0x54>
    1aae:	9e e8       	ldi	r25, 0x8E	; 142
    1ab0:	87 2f       	mov	r24, r23
    1ab2:	76 2f       	mov	r23, r22
    1ab4:	05 c0       	rjmp	.+10     	; 0x1ac0 <__floatsisf+0x5e>
    1ab6:	66 23       	and	r22, r22
    1ab8:	71 f0       	breq	.+28     	; 0x1ad6 <__floatsisf+0x74>
    1aba:	96 e8       	ldi	r25, 0x86	; 134
    1abc:	86 2f       	mov	r24, r22
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	2a f0       	brmi	.+10     	; 0x1ace <__floatsisf+0x6c>
    1ac4:	9a 95       	dec	r25
    1ac6:	66 0f       	add	r22, r22
    1ac8:	77 1f       	adc	r23, r23
    1aca:	88 1f       	adc	r24, r24
    1acc:	da f7       	brpl	.-10     	; 0x1ac4 <__floatsisf+0x62>
    1ace:	88 0f       	add	r24, r24
    1ad0:	96 95       	lsr	r25
    1ad2:	87 95       	ror	r24
    1ad4:	97 f9       	bld	r25, 7
    1ad6:	08 95       	ret

00001ad8 <__fp_inf>:
    1ad8:	97 f9       	bld	r25, 7
    1ada:	9f 67       	ori	r25, 0x7F	; 127
    1adc:	80 e8       	ldi	r24, 0x80	; 128
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	08 95       	ret

00001ae4 <__fp_nan>:
    1ae4:	9f ef       	ldi	r25, 0xFF	; 255
    1ae6:	80 ec       	ldi	r24, 0xC0	; 192
    1ae8:	08 95       	ret

00001aea <__fp_pscA>:
    1aea:	00 24       	eor	r0, r0
    1aec:	0a 94       	dec	r0
    1aee:	16 16       	cp	r1, r22
    1af0:	17 06       	cpc	r1, r23
    1af2:	18 06       	cpc	r1, r24
    1af4:	09 06       	cpc	r0, r25
    1af6:	08 95       	ret

00001af8 <__fp_pscB>:
    1af8:	00 24       	eor	r0, r0
    1afa:	0a 94       	dec	r0
    1afc:	12 16       	cp	r1, r18
    1afe:	13 06       	cpc	r1, r19
    1b00:	14 06       	cpc	r1, r20
    1b02:	05 06       	cpc	r0, r21
    1b04:	08 95       	ret

00001b06 <__fp_round>:
    1b06:	09 2e       	mov	r0, r25
    1b08:	03 94       	inc	r0
    1b0a:	00 0c       	add	r0, r0
    1b0c:	11 f4       	brne	.+4      	; 0x1b12 <__fp_round+0xc>
    1b0e:	88 23       	and	r24, r24
    1b10:	52 f0       	brmi	.+20     	; 0x1b26 <__fp_round+0x20>
    1b12:	bb 0f       	add	r27, r27
    1b14:	40 f4       	brcc	.+16     	; 0x1b26 <__fp_round+0x20>
    1b16:	bf 2b       	or	r27, r31
    1b18:	11 f4       	brne	.+4      	; 0x1b1e <__fp_round+0x18>
    1b1a:	60 ff       	sbrs	r22, 0
    1b1c:	04 c0       	rjmp	.+8      	; 0x1b26 <__fp_round+0x20>
    1b1e:	6f 5f       	subi	r22, 0xFF	; 255
    1b20:	7f 4f       	sbci	r23, 0xFF	; 255
    1b22:	8f 4f       	sbci	r24, 0xFF	; 255
    1b24:	9f 4f       	sbci	r25, 0xFF	; 255
    1b26:	08 95       	ret

00001b28 <__fp_split3>:
    1b28:	57 fd       	sbrc	r21, 7
    1b2a:	90 58       	subi	r25, 0x80	; 128
    1b2c:	44 0f       	add	r20, r20
    1b2e:	55 1f       	adc	r21, r21
    1b30:	59 f0       	breq	.+22     	; 0x1b48 <__fp_splitA+0x10>
    1b32:	5f 3f       	cpi	r21, 0xFF	; 255
    1b34:	71 f0       	breq	.+28     	; 0x1b52 <__fp_splitA+0x1a>
    1b36:	47 95       	ror	r20

00001b38 <__fp_splitA>:
    1b38:	88 0f       	add	r24, r24
    1b3a:	97 fb       	bst	r25, 7
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	61 f0       	breq	.+24     	; 0x1b58 <__fp_splitA+0x20>
    1b40:	9f 3f       	cpi	r25, 0xFF	; 255
    1b42:	79 f0       	breq	.+30     	; 0x1b62 <__fp_splitA+0x2a>
    1b44:	87 95       	ror	r24
    1b46:	08 95       	ret
    1b48:	12 16       	cp	r1, r18
    1b4a:	13 06       	cpc	r1, r19
    1b4c:	14 06       	cpc	r1, r20
    1b4e:	55 1f       	adc	r21, r21
    1b50:	f2 cf       	rjmp	.-28     	; 0x1b36 <__fp_split3+0xe>
    1b52:	46 95       	lsr	r20
    1b54:	f1 df       	rcall	.-30     	; 0x1b38 <__fp_splitA>
    1b56:	08 c0       	rjmp	.+16     	; 0x1b68 <__fp_splitA+0x30>
    1b58:	16 16       	cp	r1, r22
    1b5a:	17 06       	cpc	r1, r23
    1b5c:	18 06       	cpc	r1, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	f1 cf       	rjmp	.-30     	; 0x1b44 <__fp_splitA+0xc>
    1b62:	86 95       	lsr	r24
    1b64:	71 05       	cpc	r23, r1
    1b66:	61 05       	cpc	r22, r1
    1b68:	08 94       	sec
    1b6a:	08 95       	ret

00001b6c <__fp_zero>:
    1b6c:	e8 94       	clt

00001b6e <__fp_szero>:
    1b6e:	bb 27       	eor	r27, r27
    1b70:	66 27       	eor	r22, r22
    1b72:	77 27       	eor	r23, r23
    1b74:	cb 01       	movw	r24, r22
    1b76:	97 f9       	bld	r25, 7
    1b78:	08 95       	ret

00001b7a <__mulsf3>:
    1b7a:	0b d0       	rcall	.+22     	; 0x1b92 <__mulsf3x>
    1b7c:	c4 cf       	rjmp	.-120    	; 0x1b06 <__fp_round>
    1b7e:	b5 df       	rcall	.-150    	; 0x1aea <__fp_pscA>
    1b80:	28 f0       	brcs	.+10     	; 0x1b8c <__mulsf3+0x12>
    1b82:	ba df       	rcall	.-140    	; 0x1af8 <__fp_pscB>
    1b84:	18 f0       	brcs	.+6      	; 0x1b8c <__mulsf3+0x12>
    1b86:	95 23       	and	r25, r21
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <__mulsf3+0x12>
    1b8a:	a6 cf       	rjmp	.-180    	; 0x1ad8 <__fp_inf>
    1b8c:	ab cf       	rjmp	.-170    	; 0x1ae4 <__fp_nan>
    1b8e:	11 24       	eor	r1, r1
    1b90:	ee cf       	rjmp	.-36     	; 0x1b6e <__fp_szero>

00001b92 <__mulsf3x>:
    1b92:	ca df       	rcall	.-108    	; 0x1b28 <__fp_split3>
    1b94:	a0 f3       	brcs	.-24     	; 0x1b7e <__mulsf3+0x4>

00001b96 <__mulsf3_pse>:
    1b96:	95 9f       	mul	r25, r21
    1b98:	d1 f3       	breq	.-12     	; 0x1b8e <__mulsf3+0x14>
    1b9a:	95 0f       	add	r25, r21
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	55 1f       	adc	r21, r21
    1ba0:	62 9f       	mul	r22, r18
    1ba2:	f0 01       	movw	r30, r0
    1ba4:	72 9f       	mul	r23, r18
    1ba6:	bb 27       	eor	r27, r27
    1ba8:	f0 0d       	add	r31, r0
    1baa:	b1 1d       	adc	r27, r1
    1bac:	63 9f       	mul	r22, r19
    1bae:	aa 27       	eor	r26, r26
    1bb0:	f0 0d       	add	r31, r0
    1bb2:	b1 1d       	adc	r27, r1
    1bb4:	aa 1f       	adc	r26, r26
    1bb6:	64 9f       	mul	r22, r20
    1bb8:	66 27       	eor	r22, r22
    1bba:	b0 0d       	add	r27, r0
    1bbc:	a1 1d       	adc	r26, r1
    1bbe:	66 1f       	adc	r22, r22
    1bc0:	82 9f       	mul	r24, r18
    1bc2:	22 27       	eor	r18, r18
    1bc4:	b0 0d       	add	r27, r0
    1bc6:	a1 1d       	adc	r26, r1
    1bc8:	62 1f       	adc	r22, r18
    1bca:	73 9f       	mul	r23, r19
    1bcc:	b0 0d       	add	r27, r0
    1bce:	a1 1d       	adc	r26, r1
    1bd0:	62 1f       	adc	r22, r18
    1bd2:	83 9f       	mul	r24, r19
    1bd4:	a0 0d       	add	r26, r0
    1bd6:	61 1d       	adc	r22, r1
    1bd8:	22 1f       	adc	r18, r18
    1bda:	74 9f       	mul	r23, r20
    1bdc:	33 27       	eor	r19, r19
    1bde:	a0 0d       	add	r26, r0
    1be0:	61 1d       	adc	r22, r1
    1be2:	23 1f       	adc	r18, r19
    1be4:	84 9f       	mul	r24, r20
    1be6:	60 0d       	add	r22, r0
    1be8:	21 1d       	adc	r18, r1
    1bea:	82 2f       	mov	r24, r18
    1bec:	76 2f       	mov	r23, r22
    1bee:	6a 2f       	mov	r22, r26
    1bf0:	11 24       	eor	r1, r1
    1bf2:	9f 57       	subi	r25, 0x7F	; 127
    1bf4:	50 40       	sbci	r21, 0x00	; 0
    1bf6:	8a f0       	brmi	.+34     	; 0x1c1a <__mulsf3_pse+0x84>
    1bf8:	e1 f0       	breq	.+56     	; 0x1c32 <__mulsf3_pse+0x9c>
    1bfa:	88 23       	and	r24, r24
    1bfc:	4a f0       	brmi	.+18     	; 0x1c10 <__mulsf3_pse+0x7a>
    1bfe:	ee 0f       	add	r30, r30
    1c00:	ff 1f       	adc	r31, r31
    1c02:	bb 1f       	adc	r27, r27
    1c04:	66 1f       	adc	r22, r22
    1c06:	77 1f       	adc	r23, r23
    1c08:	88 1f       	adc	r24, r24
    1c0a:	91 50       	subi	r25, 0x01	; 1
    1c0c:	50 40       	sbci	r21, 0x00	; 0
    1c0e:	a9 f7       	brne	.-22     	; 0x1bfa <__mulsf3_pse+0x64>
    1c10:	9e 3f       	cpi	r25, 0xFE	; 254
    1c12:	51 05       	cpc	r21, r1
    1c14:	70 f0       	brcs	.+28     	; 0x1c32 <__mulsf3_pse+0x9c>
    1c16:	60 cf       	rjmp	.-320    	; 0x1ad8 <__fp_inf>
    1c18:	aa cf       	rjmp	.-172    	; 0x1b6e <__fp_szero>
    1c1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c1c:	ec f3       	brlt	.-6      	; 0x1c18 <__mulsf3_pse+0x82>
    1c1e:	98 3e       	cpi	r25, 0xE8	; 232
    1c20:	dc f3       	brlt	.-10     	; 0x1c18 <__mulsf3_pse+0x82>
    1c22:	86 95       	lsr	r24
    1c24:	77 95       	ror	r23
    1c26:	67 95       	ror	r22
    1c28:	b7 95       	ror	r27
    1c2a:	f7 95       	ror	r31
    1c2c:	e7 95       	ror	r30
    1c2e:	9f 5f       	subi	r25, 0xFF	; 255
    1c30:	c1 f7       	brne	.-16     	; 0x1c22 <__mulsf3_pse+0x8c>
    1c32:	fe 2b       	or	r31, r30
    1c34:	88 0f       	add	r24, r24
    1c36:	91 1d       	adc	r25, r1
    1c38:	96 95       	lsr	r25
    1c3a:	87 95       	ror	r24
    1c3c:	97 f9       	bld	r25, 7
    1c3e:	08 95       	ret

00001c40 <__divmodhi4>:
    1c40:	97 fb       	bst	r25, 7
    1c42:	07 2e       	mov	r0, r23
    1c44:	16 f4       	brtc	.+4      	; 0x1c4a <__divmodhi4+0xa>
    1c46:	00 94       	com	r0
    1c48:	06 d0       	rcall	.+12     	; 0x1c56 <__divmodhi4_neg1>
    1c4a:	77 fd       	sbrc	r23, 7
    1c4c:	08 d0       	rcall	.+16     	; 0x1c5e <__divmodhi4_neg2>
    1c4e:	2d d0       	rcall	.+90     	; 0x1caa <__udivmodhi4>
    1c50:	07 fc       	sbrc	r0, 7
    1c52:	05 d0       	rcall	.+10     	; 0x1c5e <__divmodhi4_neg2>
    1c54:	3e f4       	brtc	.+14     	; 0x1c64 <__divmodhi4_exit>

00001c56 <__divmodhi4_neg1>:
    1c56:	90 95       	com	r25
    1c58:	81 95       	neg	r24
    1c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5c:	08 95       	ret

00001c5e <__divmodhi4_neg2>:
    1c5e:	70 95       	com	r23
    1c60:	61 95       	neg	r22
    1c62:	7f 4f       	sbci	r23, 0xFF	; 255

00001c64 <__divmodhi4_exit>:
    1c64:	08 95       	ret

00001c66 <__udivmodsi4>:
    1c66:	a1 e2       	ldi	r26, 0x21	; 33
    1c68:	1a 2e       	mov	r1, r26
    1c6a:	aa 1b       	sub	r26, r26
    1c6c:	bb 1b       	sub	r27, r27
    1c6e:	fd 01       	movw	r30, r26
    1c70:	0d c0       	rjmp	.+26     	; 0x1c8c <__udivmodsi4_ep>

00001c72 <__udivmodsi4_loop>:
    1c72:	aa 1f       	adc	r26, r26
    1c74:	bb 1f       	adc	r27, r27
    1c76:	ee 1f       	adc	r30, r30
    1c78:	ff 1f       	adc	r31, r31
    1c7a:	a2 17       	cp	r26, r18
    1c7c:	b3 07       	cpc	r27, r19
    1c7e:	e4 07       	cpc	r30, r20
    1c80:	f5 07       	cpc	r31, r21
    1c82:	20 f0       	brcs	.+8      	; 0x1c8c <__udivmodsi4_ep>
    1c84:	a2 1b       	sub	r26, r18
    1c86:	b3 0b       	sbc	r27, r19
    1c88:	e4 0b       	sbc	r30, r20
    1c8a:	f5 0b       	sbc	r31, r21

00001c8c <__udivmodsi4_ep>:
    1c8c:	66 1f       	adc	r22, r22
    1c8e:	77 1f       	adc	r23, r23
    1c90:	88 1f       	adc	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	1a 94       	dec	r1
    1c96:	69 f7       	brne	.-38     	; 0x1c72 <__udivmodsi4_loop>
    1c98:	60 95       	com	r22
    1c9a:	70 95       	com	r23
    1c9c:	80 95       	com	r24
    1c9e:	90 95       	com	r25
    1ca0:	9b 01       	movw	r18, r22
    1ca2:	ac 01       	movw	r20, r24
    1ca4:	bd 01       	movw	r22, r26
    1ca6:	cf 01       	movw	r24, r30
    1ca8:	08 95       	ret

00001caa <__udivmodhi4>:
    1caa:	aa 1b       	sub	r26, r26
    1cac:	bb 1b       	sub	r27, r27
    1cae:	51 e1       	ldi	r21, 0x11	; 17
    1cb0:	07 c0       	rjmp	.+14     	; 0x1cc0 <__udivmodhi4_ep>

00001cb2 <__udivmodhi4_loop>:
    1cb2:	aa 1f       	adc	r26, r26
    1cb4:	bb 1f       	adc	r27, r27
    1cb6:	a6 17       	cp	r26, r22
    1cb8:	b7 07       	cpc	r27, r23
    1cba:	10 f0       	brcs	.+4      	; 0x1cc0 <__udivmodhi4_ep>
    1cbc:	a6 1b       	sub	r26, r22
    1cbe:	b7 0b       	sbc	r27, r23

00001cc0 <__udivmodhi4_ep>:
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	5a 95       	dec	r21
    1cc6:	a9 f7       	brne	.-22     	; 0x1cb2 <__udivmodhi4_loop>
    1cc8:	80 95       	com	r24
    1cca:	90 95       	com	r25
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	08 95       	ret

00001cd2 <printf>:
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	ae 01       	movw	r20, r28
    1cdc:	4b 5f       	subi	r20, 0xFB	; 251
    1cde:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce0:	fa 01       	movw	r30, r20
    1ce2:	61 91       	ld	r22, Z+
    1ce4:	71 91       	ld	r23, Z+
    1ce6:	af 01       	movw	r20, r30
    1ce8:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__iob+0x2>
    1cec:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <__iob+0x3>
    1cf0:	31 d0       	rcall	.+98     	; 0x1d54 <vfprintf>
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	08 95       	ret

00001cf8 <sprintf>:
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	2e 97       	sbiw	r28, 0x0e	; 14
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	0d 89       	ldd	r16, Y+21	; 0x15
    1d12:	1e 89       	ldd	r17, Y+22	; 0x16
    1d14:	86 e0       	ldi	r24, 0x06	; 6
    1d16:	8c 83       	std	Y+4, r24	; 0x04
    1d18:	1a 83       	std	Y+2, r17	; 0x02
    1d1a:	09 83       	std	Y+1, r16	; 0x01
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	9f e7       	ldi	r25, 0x7F	; 127
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	8d 83       	std	Y+5, r24	; 0x05
    1d24:	ae 01       	movw	r20, r28
    1d26:	47 5e       	subi	r20, 0xE7	; 231
    1d28:	5f 4f       	sbci	r21, 0xFF	; 255
    1d2a:	6f 89       	ldd	r22, Y+23	; 0x17
    1d2c:	78 8d       	ldd	r23, Y+24	; 0x18
    1d2e:	ce 01       	movw	r24, r28
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	10 d0       	rcall	.+32     	; 0x1d54 <vfprintf>
    1d34:	ef 81       	ldd	r30, Y+7	; 0x07
    1d36:	f8 85       	ldd	r31, Y+8	; 0x08
    1d38:	e0 0f       	add	r30, r16
    1d3a:	f1 1f       	adc	r31, r17
    1d3c:	10 82       	st	Z, r1
    1d3e:	2e 96       	adiw	r28, 0x0e	; 14
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	1f 91       	pop	r17
    1d50:	0f 91       	pop	r16
    1d52:	08 95       	ret

00001d54 <vfprintf>:
    1d54:	2f 92       	push	r2
    1d56:	3f 92       	push	r3
    1d58:	4f 92       	push	r4
    1d5a:	5f 92       	push	r5
    1d5c:	6f 92       	push	r6
    1d5e:	7f 92       	push	r7
    1d60:	8f 92       	push	r8
    1d62:	9f 92       	push	r9
    1d64:	af 92       	push	r10
    1d66:	bf 92       	push	r11
    1d68:	cf 92       	push	r12
    1d6a:	df 92       	push	r13
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	2b 97       	sbiw	r28, 0x0b	; 11
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	6c 01       	movw	r12, r24
    1d8a:	7b 01       	movw	r14, r22
    1d8c:	8a 01       	movw	r16, r20
    1d8e:	fc 01       	movw	r30, r24
    1d90:	17 82       	std	Z+7, r1	; 0x07
    1d92:	16 82       	std	Z+6, r1	; 0x06
    1d94:	83 81       	ldd	r24, Z+3	; 0x03
    1d96:	81 ff       	sbrs	r24, 1
    1d98:	bf c1       	rjmp	.+894    	; 0x2118 <vfprintf+0x3c4>
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	3c 01       	movw	r6, r24
    1da0:	f6 01       	movw	r30, r12
    1da2:	93 81       	ldd	r25, Z+3	; 0x03
    1da4:	f7 01       	movw	r30, r14
    1da6:	93 fd       	sbrc	r25, 3
    1da8:	85 91       	lpm	r24, Z+
    1daa:	93 ff       	sbrs	r25, 3
    1dac:	81 91       	ld	r24, Z+
    1dae:	7f 01       	movw	r14, r30
    1db0:	88 23       	and	r24, r24
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <vfprintf+0x62>
    1db4:	ad c1       	rjmp	.+858    	; 0x2110 <vfprintf+0x3bc>
    1db6:	85 32       	cpi	r24, 0x25	; 37
    1db8:	39 f4       	brne	.+14     	; 0x1dc8 <vfprintf+0x74>
    1dba:	93 fd       	sbrc	r25, 3
    1dbc:	85 91       	lpm	r24, Z+
    1dbe:	93 ff       	sbrs	r25, 3
    1dc0:	81 91       	ld	r24, Z+
    1dc2:	7f 01       	movw	r14, r30
    1dc4:	85 32       	cpi	r24, 0x25	; 37
    1dc6:	21 f4       	brne	.+8      	; 0x1dd0 <vfprintf+0x7c>
    1dc8:	b6 01       	movw	r22, r12
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	d6 d1       	rcall	.+940    	; 0x217a <fputc>
    1dce:	e8 cf       	rjmp	.-48     	; 0x1da0 <vfprintf+0x4c>
    1dd0:	91 2c       	mov	r9, r1
    1dd2:	21 2c       	mov	r2, r1
    1dd4:	31 2c       	mov	r3, r1
    1dd6:	ff e1       	ldi	r31, 0x1F	; 31
    1dd8:	f3 15       	cp	r31, r3
    1dda:	d8 f0       	brcs	.+54     	; 0x1e12 <vfprintf+0xbe>
    1ddc:	8b 32       	cpi	r24, 0x2B	; 43
    1dde:	79 f0       	breq	.+30     	; 0x1dfe <vfprintf+0xaa>
    1de0:	38 f4       	brcc	.+14     	; 0x1df0 <vfprintf+0x9c>
    1de2:	80 32       	cpi	r24, 0x20	; 32
    1de4:	79 f0       	breq	.+30     	; 0x1e04 <vfprintf+0xb0>
    1de6:	83 32       	cpi	r24, 0x23	; 35
    1de8:	a1 f4       	brne	.+40     	; 0x1e12 <vfprintf+0xbe>
    1dea:	23 2d       	mov	r18, r3
    1dec:	20 61       	ori	r18, 0x10	; 16
    1dee:	1d c0       	rjmp	.+58     	; 0x1e2a <vfprintf+0xd6>
    1df0:	8d 32       	cpi	r24, 0x2D	; 45
    1df2:	61 f0       	breq	.+24     	; 0x1e0c <vfprintf+0xb8>
    1df4:	80 33       	cpi	r24, 0x30	; 48
    1df6:	69 f4       	brne	.+26     	; 0x1e12 <vfprintf+0xbe>
    1df8:	23 2d       	mov	r18, r3
    1dfa:	21 60       	ori	r18, 0x01	; 1
    1dfc:	16 c0       	rjmp	.+44     	; 0x1e2a <vfprintf+0xd6>
    1dfe:	83 2d       	mov	r24, r3
    1e00:	82 60       	ori	r24, 0x02	; 2
    1e02:	38 2e       	mov	r3, r24
    1e04:	e3 2d       	mov	r30, r3
    1e06:	e4 60       	ori	r30, 0x04	; 4
    1e08:	3e 2e       	mov	r3, r30
    1e0a:	2a c0       	rjmp	.+84     	; 0x1e60 <vfprintf+0x10c>
    1e0c:	f3 2d       	mov	r31, r3
    1e0e:	f8 60       	ori	r31, 0x08	; 8
    1e10:	1d c0       	rjmp	.+58     	; 0x1e4c <vfprintf+0xf8>
    1e12:	37 fc       	sbrc	r3, 7
    1e14:	2d c0       	rjmp	.+90     	; 0x1e70 <vfprintf+0x11c>
    1e16:	20 ed       	ldi	r18, 0xD0	; 208
    1e18:	28 0f       	add	r18, r24
    1e1a:	2a 30       	cpi	r18, 0x0A	; 10
    1e1c:	40 f0       	brcs	.+16     	; 0x1e2e <vfprintf+0xda>
    1e1e:	8e 32       	cpi	r24, 0x2E	; 46
    1e20:	b9 f4       	brne	.+46     	; 0x1e50 <vfprintf+0xfc>
    1e22:	36 fc       	sbrc	r3, 6
    1e24:	75 c1       	rjmp	.+746    	; 0x2110 <vfprintf+0x3bc>
    1e26:	23 2d       	mov	r18, r3
    1e28:	20 64       	ori	r18, 0x40	; 64
    1e2a:	32 2e       	mov	r3, r18
    1e2c:	19 c0       	rjmp	.+50     	; 0x1e60 <vfprintf+0x10c>
    1e2e:	36 fe       	sbrs	r3, 6
    1e30:	06 c0       	rjmp	.+12     	; 0x1e3e <vfprintf+0xea>
    1e32:	8a e0       	ldi	r24, 0x0A	; 10
    1e34:	98 9e       	mul	r9, r24
    1e36:	20 0d       	add	r18, r0
    1e38:	11 24       	eor	r1, r1
    1e3a:	92 2e       	mov	r9, r18
    1e3c:	11 c0       	rjmp	.+34     	; 0x1e60 <vfprintf+0x10c>
    1e3e:	ea e0       	ldi	r30, 0x0A	; 10
    1e40:	2e 9e       	mul	r2, r30
    1e42:	20 0d       	add	r18, r0
    1e44:	11 24       	eor	r1, r1
    1e46:	22 2e       	mov	r2, r18
    1e48:	f3 2d       	mov	r31, r3
    1e4a:	f0 62       	ori	r31, 0x20	; 32
    1e4c:	3f 2e       	mov	r3, r31
    1e4e:	08 c0       	rjmp	.+16     	; 0x1e60 <vfprintf+0x10c>
    1e50:	8c 36       	cpi	r24, 0x6C	; 108
    1e52:	21 f4       	brne	.+8      	; 0x1e5c <vfprintf+0x108>
    1e54:	83 2d       	mov	r24, r3
    1e56:	80 68       	ori	r24, 0x80	; 128
    1e58:	38 2e       	mov	r3, r24
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <vfprintf+0x10c>
    1e5c:	88 36       	cpi	r24, 0x68	; 104
    1e5e:	41 f4       	brne	.+16     	; 0x1e70 <vfprintf+0x11c>
    1e60:	f7 01       	movw	r30, r14
    1e62:	93 fd       	sbrc	r25, 3
    1e64:	85 91       	lpm	r24, Z+
    1e66:	93 ff       	sbrs	r25, 3
    1e68:	81 91       	ld	r24, Z+
    1e6a:	7f 01       	movw	r14, r30
    1e6c:	81 11       	cpse	r24, r1
    1e6e:	b3 cf       	rjmp	.-154    	; 0x1dd6 <vfprintf+0x82>
    1e70:	98 2f       	mov	r25, r24
    1e72:	9f 7d       	andi	r25, 0xDF	; 223
    1e74:	95 54       	subi	r25, 0x45	; 69
    1e76:	93 30       	cpi	r25, 0x03	; 3
    1e78:	28 f4       	brcc	.+10     	; 0x1e84 <vfprintf+0x130>
    1e7a:	0c 5f       	subi	r16, 0xFC	; 252
    1e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7e:	9f e3       	ldi	r25, 0x3F	; 63
    1e80:	99 83       	std	Y+1, r25	; 0x01
    1e82:	0d c0       	rjmp	.+26     	; 0x1e9e <vfprintf+0x14a>
    1e84:	83 36       	cpi	r24, 0x63	; 99
    1e86:	31 f0       	breq	.+12     	; 0x1e94 <vfprintf+0x140>
    1e88:	83 37       	cpi	r24, 0x73	; 115
    1e8a:	71 f0       	breq	.+28     	; 0x1ea8 <vfprintf+0x154>
    1e8c:	83 35       	cpi	r24, 0x53	; 83
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <vfprintf+0x13e>
    1e90:	55 c0       	rjmp	.+170    	; 0x1f3c <vfprintf+0x1e8>
    1e92:	20 c0       	rjmp	.+64     	; 0x1ed4 <vfprintf+0x180>
    1e94:	f8 01       	movw	r30, r16
    1e96:	80 81       	ld	r24, Z
    1e98:	89 83       	std	Y+1, r24	; 0x01
    1e9a:	0e 5f       	subi	r16, 0xFE	; 254
    1e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9e:	88 24       	eor	r8, r8
    1ea0:	83 94       	inc	r8
    1ea2:	91 2c       	mov	r9, r1
    1ea4:	53 01       	movw	r10, r6
    1ea6:	12 c0       	rjmp	.+36     	; 0x1ecc <vfprintf+0x178>
    1ea8:	28 01       	movw	r4, r16
    1eaa:	f2 e0       	ldi	r31, 0x02	; 2
    1eac:	4f 0e       	add	r4, r31
    1eae:	51 1c       	adc	r5, r1
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	a0 80       	ld	r10, Z
    1eb4:	b1 80       	ldd	r11, Z+1	; 0x01
    1eb6:	36 fe       	sbrs	r3, 6
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <vfprintf+0x16c>
    1eba:	69 2d       	mov	r22, r9
    1ebc:	70 e0       	ldi	r23, 0x00	; 0
    1ebe:	02 c0       	rjmp	.+4      	; 0x1ec4 <vfprintf+0x170>
    1ec0:	6f ef       	ldi	r22, 0xFF	; 255
    1ec2:	7f ef       	ldi	r23, 0xFF	; 255
    1ec4:	c5 01       	movw	r24, r10
    1ec6:	4e d1       	rcall	.+668    	; 0x2164 <strnlen>
    1ec8:	4c 01       	movw	r8, r24
    1eca:	82 01       	movw	r16, r4
    1ecc:	f3 2d       	mov	r31, r3
    1ece:	ff 77       	andi	r31, 0x7F	; 127
    1ed0:	3f 2e       	mov	r3, r31
    1ed2:	15 c0       	rjmp	.+42     	; 0x1efe <vfprintf+0x1aa>
    1ed4:	28 01       	movw	r4, r16
    1ed6:	22 e0       	ldi	r18, 0x02	; 2
    1ed8:	42 0e       	add	r4, r18
    1eda:	51 1c       	adc	r5, r1
    1edc:	f8 01       	movw	r30, r16
    1ede:	a0 80       	ld	r10, Z
    1ee0:	b1 80       	ldd	r11, Z+1	; 0x01
    1ee2:	36 fe       	sbrs	r3, 6
    1ee4:	03 c0       	rjmp	.+6      	; 0x1eec <vfprintf+0x198>
    1ee6:	69 2d       	mov	r22, r9
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <vfprintf+0x19c>
    1eec:	6f ef       	ldi	r22, 0xFF	; 255
    1eee:	7f ef       	ldi	r23, 0xFF	; 255
    1ef0:	c5 01       	movw	r24, r10
    1ef2:	2d d1       	rcall	.+602    	; 0x214e <strnlen_P>
    1ef4:	4c 01       	movw	r8, r24
    1ef6:	f3 2d       	mov	r31, r3
    1ef8:	f0 68       	ori	r31, 0x80	; 128
    1efa:	3f 2e       	mov	r3, r31
    1efc:	82 01       	movw	r16, r4
    1efe:	33 fc       	sbrc	r3, 3
    1f00:	19 c0       	rjmp	.+50     	; 0x1f34 <vfprintf+0x1e0>
    1f02:	82 2d       	mov	r24, r2
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	88 16       	cp	r8, r24
    1f08:	99 06       	cpc	r9, r25
    1f0a:	a0 f4       	brcc	.+40     	; 0x1f34 <vfprintf+0x1e0>
    1f0c:	b6 01       	movw	r22, r12
    1f0e:	80 e2       	ldi	r24, 0x20	; 32
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	33 d1       	rcall	.+614    	; 0x217a <fputc>
    1f14:	2a 94       	dec	r2
    1f16:	f5 cf       	rjmp	.-22     	; 0x1f02 <vfprintf+0x1ae>
    1f18:	f5 01       	movw	r30, r10
    1f1a:	37 fc       	sbrc	r3, 7
    1f1c:	85 91       	lpm	r24, Z+
    1f1e:	37 fe       	sbrs	r3, 7
    1f20:	81 91       	ld	r24, Z+
    1f22:	5f 01       	movw	r10, r30
    1f24:	b6 01       	movw	r22, r12
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	28 d1       	rcall	.+592    	; 0x217a <fputc>
    1f2a:	21 10       	cpse	r2, r1
    1f2c:	2a 94       	dec	r2
    1f2e:	21 e0       	ldi	r18, 0x01	; 1
    1f30:	82 1a       	sub	r8, r18
    1f32:	91 08       	sbc	r9, r1
    1f34:	81 14       	cp	r8, r1
    1f36:	91 04       	cpc	r9, r1
    1f38:	79 f7       	brne	.-34     	; 0x1f18 <vfprintf+0x1c4>
    1f3a:	e1 c0       	rjmp	.+450    	; 0x20fe <vfprintf+0x3aa>
    1f3c:	84 36       	cpi	r24, 0x64	; 100
    1f3e:	11 f0       	breq	.+4      	; 0x1f44 <vfprintf+0x1f0>
    1f40:	89 36       	cpi	r24, 0x69	; 105
    1f42:	39 f5       	brne	.+78     	; 0x1f92 <vfprintf+0x23e>
    1f44:	f8 01       	movw	r30, r16
    1f46:	37 fe       	sbrs	r3, 7
    1f48:	07 c0       	rjmp	.+14     	; 0x1f58 <vfprintf+0x204>
    1f4a:	60 81       	ld	r22, Z
    1f4c:	71 81       	ldd	r23, Z+1	; 0x01
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	0c 5f       	subi	r16, 0xFC	; 252
    1f54:	1f 4f       	sbci	r17, 0xFF	; 255
    1f56:	08 c0       	rjmp	.+16     	; 0x1f68 <vfprintf+0x214>
    1f58:	60 81       	ld	r22, Z
    1f5a:	71 81       	ldd	r23, Z+1	; 0x01
    1f5c:	07 2e       	mov	r0, r23
    1f5e:	00 0c       	add	r0, r0
    1f60:	88 0b       	sbc	r24, r24
    1f62:	99 0b       	sbc	r25, r25
    1f64:	0e 5f       	subi	r16, 0xFE	; 254
    1f66:	1f 4f       	sbci	r17, 0xFF	; 255
    1f68:	f3 2d       	mov	r31, r3
    1f6a:	ff 76       	andi	r31, 0x6F	; 111
    1f6c:	3f 2e       	mov	r3, r31
    1f6e:	97 ff       	sbrs	r25, 7
    1f70:	09 c0       	rjmp	.+18     	; 0x1f84 <vfprintf+0x230>
    1f72:	90 95       	com	r25
    1f74:	80 95       	com	r24
    1f76:	70 95       	com	r23
    1f78:	61 95       	neg	r22
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f80:	f0 68       	ori	r31, 0x80	; 128
    1f82:	3f 2e       	mov	r3, r31
    1f84:	2a e0       	ldi	r18, 0x0A	; 10
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	a3 01       	movw	r20, r6
    1f8a:	33 d1       	rcall	.+614    	; 0x21f2 <__ultoa_invert>
    1f8c:	88 2e       	mov	r8, r24
    1f8e:	86 18       	sub	r8, r6
    1f90:	44 c0       	rjmp	.+136    	; 0x201a <vfprintf+0x2c6>
    1f92:	85 37       	cpi	r24, 0x75	; 117
    1f94:	31 f4       	brne	.+12     	; 0x1fa2 <vfprintf+0x24e>
    1f96:	23 2d       	mov	r18, r3
    1f98:	2f 7e       	andi	r18, 0xEF	; 239
    1f9a:	b2 2e       	mov	r11, r18
    1f9c:	2a e0       	ldi	r18, 0x0A	; 10
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	25 c0       	rjmp	.+74     	; 0x1fec <vfprintf+0x298>
    1fa2:	93 2d       	mov	r25, r3
    1fa4:	99 7f       	andi	r25, 0xF9	; 249
    1fa6:	b9 2e       	mov	r11, r25
    1fa8:	8f 36       	cpi	r24, 0x6F	; 111
    1faa:	c1 f0       	breq	.+48     	; 0x1fdc <vfprintf+0x288>
    1fac:	18 f4       	brcc	.+6      	; 0x1fb4 <vfprintf+0x260>
    1fae:	88 35       	cpi	r24, 0x58	; 88
    1fb0:	79 f0       	breq	.+30     	; 0x1fd0 <vfprintf+0x27c>
    1fb2:	ae c0       	rjmp	.+348    	; 0x2110 <vfprintf+0x3bc>
    1fb4:	80 37       	cpi	r24, 0x70	; 112
    1fb6:	19 f0       	breq	.+6      	; 0x1fbe <vfprintf+0x26a>
    1fb8:	88 37       	cpi	r24, 0x78	; 120
    1fba:	21 f0       	breq	.+8      	; 0x1fc4 <vfprintf+0x270>
    1fbc:	a9 c0       	rjmp	.+338    	; 0x2110 <vfprintf+0x3bc>
    1fbe:	e9 2f       	mov	r30, r25
    1fc0:	e0 61       	ori	r30, 0x10	; 16
    1fc2:	be 2e       	mov	r11, r30
    1fc4:	b4 fe       	sbrs	r11, 4
    1fc6:	0d c0       	rjmp	.+26     	; 0x1fe2 <vfprintf+0x28e>
    1fc8:	fb 2d       	mov	r31, r11
    1fca:	f4 60       	ori	r31, 0x04	; 4
    1fcc:	bf 2e       	mov	r11, r31
    1fce:	09 c0       	rjmp	.+18     	; 0x1fe2 <vfprintf+0x28e>
    1fd0:	34 fe       	sbrs	r3, 4
    1fd2:	0a c0       	rjmp	.+20     	; 0x1fe8 <vfprintf+0x294>
    1fd4:	29 2f       	mov	r18, r25
    1fd6:	26 60       	ori	r18, 0x06	; 6
    1fd8:	b2 2e       	mov	r11, r18
    1fda:	06 c0       	rjmp	.+12     	; 0x1fe8 <vfprintf+0x294>
    1fdc:	28 e0       	ldi	r18, 0x08	; 8
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	05 c0       	rjmp	.+10     	; 0x1fec <vfprintf+0x298>
    1fe2:	20 e1       	ldi	r18, 0x10	; 16
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <vfprintf+0x298>
    1fe8:	20 e1       	ldi	r18, 0x10	; 16
    1fea:	32 e0       	ldi	r19, 0x02	; 2
    1fec:	f8 01       	movw	r30, r16
    1fee:	b7 fe       	sbrs	r11, 7
    1ff0:	07 c0       	rjmp	.+14     	; 0x2000 <vfprintf+0x2ac>
    1ff2:	60 81       	ld	r22, Z
    1ff4:	71 81       	ldd	r23, Z+1	; 0x01
    1ff6:	82 81       	ldd	r24, Z+2	; 0x02
    1ff8:	93 81       	ldd	r25, Z+3	; 0x03
    1ffa:	0c 5f       	subi	r16, 0xFC	; 252
    1ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffe:	06 c0       	rjmp	.+12     	; 0x200c <vfprintf+0x2b8>
    2000:	60 81       	ld	r22, Z
    2002:	71 81       	ldd	r23, Z+1	; 0x01
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	0e 5f       	subi	r16, 0xFE	; 254
    200a:	1f 4f       	sbci	r17, 0xFF	; 255
    200c:	a3 01       	movw	r20, r6
    200e:	f1 d0       	rcall	.+482    	; 0x21f2 <__ultoa_invert>
    2010:	88 2e       	mov	r8, r24
    2012:	86 18       	sub	r8, r6
    2014:	fb 2d       	mov	r31, r11
    2016:	ff 77       	andi	r31, 0x7F	; 127
    2018:	3f 2e       	mov	r3, r31
    201a:	36 fe       	sbrs	r3, 6
    201c:	0d c0       	rjmp	.+26     	; 0x2038 <vfprintf+0x2e4>
    201e:	23 2d       	mov	r18, r3
    2020:	2e 7f       	andi	r18, 0xFE	; 254
    2022:	a2 2e       	mov	r10, r18
    2024:	89 14       	cp	r8, r9
    2026:	58 f4       	brcc	.+22     	; 0x203e <vfprintf+0x2ea>
    2028:	34 fe       	sbrs	r3, 4
    202a:	0b c0       	rjmp	.+22     	; 0x2042 <vfprintf+0x2ee>
    202c:	32 fc       	sbrc	r3, 2
    202e:	09 c0       	rjmp	.+18     	; 0x2042 <vfprintf+0x2ee>
    2030:	83 2d       	mov	r24, r3
    2032:	8e 7e       	andi	r24, 0xEE	; 238
    2034:	a8 2e       	mov	r10, r24
    2036:	05 c0       	rjmp	.+10     	; 0x2042 <vfprintf+0x2ee>
    2038:	b8 2c       	mov	r11, r8
    203a:	a3 2c       	mov	r10, r3
    203c:	03 c0       	rjmp	.+6      	; 0x2044 <vfprintf+0x2f0>
    203e:	b8 2c       	mov	r11, r8
    2040:	01 c0       	rjmp	.+2      	; 0x2044 <vfprintf+0x2f0>
    2042:	b9 2c       	mov	r11, r9
    2044:	a4 fe       	sbrs	r10, 4
    2046:	0f c0       	rjmp	.+30     	; 0x2066 <vfprintf+0x312>
    2048:	fe 01       	movw	r30, r28
    204a:	e8 0d       	add	r30, r8
    204c:	f1 1d       	adc	r31, r1
    204e:	80 81       	ld	r24, Z
    2050:	80 33       	cpi	r24, 0x30	; 48
    2052:	21 f4       	brne	.+8      	; 0x205c <vfprintf+0x308>
    2054:	9a 2d       	mov	r25, r10
    2056:	99 7e       	andi	r25, 0xE9	; 233
    2058:	a9 2e       	mov	r10, r25
    205a:	09 c0       	rjmp	.+18     	; 0x206e <vfprintf+0x31a>
    205c:	a2 fe       	sbrs	r10, 2
    205e:	06 c0       	rjmp	.+12     	; 0x206c <vfprintf+0x318>
    2060:	b3 94       	inc	r11
    2062:	b3 94       	inc	r11
    2064:	04 c0       	rjmp	.+8      	; 0x206e <vfprintf+0x31a>
    2066:	8a 2d       	mov	r24, r10
    2068:	86 78       	andi	r24, 0x86	; 134
    206a:	09 f0       	breq	.+2      	; 0x206e <vfprintf+0x31a>
    206c:	b3 94       	inc	r11
    206e:	a3 fc       	sbrc	r10, 3
    2070:	10 c0       	rjmp	.+32     	; 0x2092 <vfprintf+0x33e>
    2072:	a0 fe       	sbrs	r10, 0
    2074:	06 c0       	rjmp	.+12     	; 0x2082 <vfprintf+0x32e>
    2076:	b2 14       	cp	r11, r2
    2078:	80 f4       	brcc	.+32     	; 0x209a <vfprintf+0x346>
    207a:	28 0c       	add	r2, r8
    207c:	92 2c       	mov	r9, r2
    207e:	9b 18       	sub	r9, r11
    2080:	0d c0       	rjmp	.+26     	; 0x209c <vfprintf+0x348>
    2082:	b2 14       	cp	r11, r2
    2084:	58 f4       	brcc	.+22     	; 0x209c <vfprintf+0x348>
    2086:	b6 01       	movw	r22, r12
    2088:	80 e2       	ldi	r24, 0x20	; 32
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	76 d0       	rcall	.+236    	; 0x217a <fputc>
    208e:	b3 94       	inc	r11
    2090:	f8 cf       	rjmp	.-16     	; 0x2082 <vfprintf+0x32e>
    2092:	b2 14       	cp	r11, r2
    2094:	18 f4       	brcc	.+6      	; 0x209c <vfprintf+0x348>
    2096:	2b 18       	sub	r2, r11
    2098:	02 c0       	rjmp	.+4      	; 0x209e <vfprintf+0x34a>
    209a:	98 2c       	mov	r9, r8
    209c:	21 2c       	mov	r2, r1
    209e:	a4 fe       	sbrs	r10, 4
    20a0:	0f c0       	rjmp	.+30     	; 0x20c0 <vfprintf+0x36c>
    20a2:	b6 01       	movw	r22, r12
    20a4:	80 e3       	ldi	r24, 0x30	; 48
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	68 d0       	rcall	.+208    	; 0x217a <fputc>
    20aa:	a2 fe       	sbrs	r10, 2
    20ac:	16 c0       	rjmp	.+44     	; 0x20da <vfprintf+0x386>
    20ae:	a1 fc       	sbrc	r10, 1
    20b0:	03 c0       	rjmp	.+6      	; 0x20b8 <vfprintf+0x364>
    20b2:	88 e7       	ldi	r24, 0x78	; 120
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <vfprintf+0x368>
    20b8:	88 e5       	ldi	r24, 0x58	; 88
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	b6 01       	movw	r22, r12
    20be:	0c c0       	rjmp	.+24     	; 0x20d8 <vfprintf+0x384>
    20c0:	8a 2d       	mov	r24, r10
    20c2:	86 78       	andi	r24, 0x86	; 134
    20c4:	51 f0       	breq	.+20     	; 0x20da <vfprintf+0x386>
    20c6:	a1 fe       	sbrs	r10, 1
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <vfprintf+0x37a>
    20ca:	8b e2       	ldi	r24, 0x2B	; 43
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <vfprintf+0x37c>
    20ce:	80 e2       	ldi	r24, 0x20	; 32
    20d0:	a7 fc       	sbrc	r10, 7
    20d2:	8d e2       	ldi	r24, 0x2D	; 45
    20d4:	b6 01       	movw	r22, r12
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	50 d0       	rcall	.+160    	; 0x217a <fputc>
    20da:	89 14       	cp	r8, r9
    20dc:	30 f4       	brcc	.+12     	; 0x20ea <vfprintf+0x396>
    20de:	b6 01       	movw	r22, r12
    20e0:	80 e3       	ldi	r24, 0x30	; 48
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	4a d0       	rcall	.+148    	; 0x217a <fputc>
    20e6:	9a 94       	dec	r9
    20e8:	f8 cf       	rjmp	.-16     	; 0x20da <vfprintf+0x386>
    20ea:	8a 94       	dec	r8
    20ec:	f3 01       	movw	r30, r6
    20ee:	e8 0d       	add	r30, r8
    20f0:	f1 1d       	adc	r31, r1
    20f2:	80 81       	ld	r24, Z
    20f4:	b6 01       	movw	r22, r12
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	40 d0       	rcall	.+128    	; 0x217a <fputc>
    20fa:	81 10       	cpse	r8, r1
    20fc:	f6 cf       	rjmp	.-20     	; 0x20ea <vfprintf+0x396>
    20fe:	22 20       	and	r2, r2
    2100:	09 f4       	brne	.+2      	; 0x2104 <vfprintf+0x3b0>
    2102:	4e ce       	rjmp	.-868    	; 0x1da0 <vfprintf+0x4c>
    2104:	b6 01       	movw	r22, r12
    2106:	80 e2       	ldi	r24, 0x20	; 32
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	37 d0       	rcall	.+110    	; 0x217a <fputc>
    210c:	2a 94       	dec	r2
    210e:	f7 cf       	rjmp	.-18     	; 0x20fe <vfprintf+0x3aa>
    2110:	f6 01       	movw	r30, r12
    2112:	86 81       	ldd	r24, Z+6	; 0x06
    2114:	97 81       	ldd	r25, Z+7	; 0x07
    2116:	02 c0       	rjmp	.+4      	; 0x211c <vfprintf+0x3c8>
    2118:	8f ef       	ldi	r24, 0xFF	; 255
    211a:	9f ef       	ldi	r25, 0xFF	; 255
    211c:	2b 96       	adiw	r28, 0x0b	; 11
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	ff 90       	pop	r15
    2132:	ef 90       	pop	r14
    2134:	df 90       	pop	r13
    2136:	cf 90       	pop	r12
    2138:	bf 90       	pop	r11
    213a:	af 90       	pop	r10
    213c:	9f 90       	pop	r9
    213e:	8f 90       	pop	r8
    2140:	7f 90       	pop	r7
    2142:	6f 90       	pop	r6
    2144:	5f 90       	pop	r5
    2146:	4f 90       	pop	r4
    2148:	3f 90       	pop	r3
    214a:	2f 90       	pop	r2
    214c:	08 95       	ret

0000214e <strnlen_P>:
    214e:	fc 01       	movw	r30, r24
    2150:	05 90       	lpm	r0, Z+
    2152:	61 50       	subi	r22, 0x01	; 1
    2154:	70 40       	sbci	r23, 0x00	; 0
    2156:	01 10       	cpse	r0, r1
    2158:	d8 f7       	brcc	.-10     	; 0x2150 <strnlen_P+0x2>
    215a:	80 95       	com	r24
    215c:	90 95       	com	r25
    215e:	8e 0f       	add	r24, r30
    2160:	9f 1f       	adc	r25, r31
    2162:	08 95       	ret

00002164 <strnlen>:
    2164:	fc 01       	movw	r30, r24
    2166:	61 50       	subi	r22, 0x01	; 1
    2168:	70 40       	sbci	r23, 0x00	; 0
    216a:	01 90       	ld	r0, Z+
    216c:	01 10       	cpse	r0, r1
    216e:	d8 f7       	brcc	.-10     	; 0x2166 <strnlen+0x2>
    2170:	80 95       	com	r24
    2172:	90 95       	com	r25
    2174:	8e 0f       	add	r24, r30
    2176:	9f 1f       	adc	r25, r31
    2178:	08 95       	ret

0000217a <fputc>:
    217a:	0f 93       	push	r16
    217c:	1f 93       	push	r17
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	fb 01       	movw	r30, r22
    2184:	23 81       	ldd	r18, Z+3	; 0x03
    2186:	21 fd       	sbrc	r18, 1
    2188:	03 c0       	rjmp	.+6      	; 0x2190 <fputc+0x16>
    218a:	8f ef       	ldi	r24, 0xFF	; 255
    218c:	9f ef       	ldi	r25, 0xFF	; 255
    218e:	2c c0       	rjmp	.+88     	; 0x21e8 <fputc+0x6e>
    2190:	22 ff       	sbrs	r18, 2
    2192:	16 c0       	rjmp	.+44     	; 0x21c0 <fputc+0x46>
    2194:	46 81       	ldd	r20, Z+6	; 0x06
    2196:	57 81       	ldd	r21, Z+7	; 0x07
    2198:	24 81       	ldd	r18, Z+4	; 0x04
    219a:	35 81       	ldd	r19, Z+5	; 0x05
    219c:	42 17       	cp	r20, r18
    219e:	53 07       	cpc	r21, r19
    21a0:	44 f4       	brge	.+16     	; 0x21b2 <fputc+0x38>
    21a2:	a0 81       	ld	r26, Z
    21a4:	b1 81       	ldd	r27, Z+1	; 0x01
    21a6:	9d 01       	movw	r18, r26
    21a8:	2f 5f       	subi	r18, 0xFF	; 255
    21aa:	3f 4f       	sbci	r19, 0xFF	; 255
    21ac:	31 83       	std	Z+1, r19	; 0x01
    21ae:	20 83       	st	Z, r18
    21b0:	8c 93       	st	X, r24
    21b2:	26 81       	ldd	r18, Z+6	; 0x06
    21b4:	37 81       	ldd	r19, Z+7	; 0x07
    21b6:	2f 5f       	subi	r18, 0xFF	; 255
    21b8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ba:	37 83       	std	Z+7, r19	; 0x07
    21bc:	26 83       	std	Z+6, r18	; 0x06
    21be:	14 c0       	rjmp	.+40     	; 0x21e8 <fputc+0x6e>
    21c0:	8b 01       	movw	r16, r22
    21c2:	ec 01       	movw	r28, r24
    21c4:	fb 01       	movw	r30, r22
    21c6:	00 84       	ldd	r0, Z+8	; 0x08
    21c8:	f1 85       	ldd	r31, Z+9	; 0x09
    21ca:	e0 2d       	mov	r30, r0
    21cc:	09 95       	icall
    21ce:	89 2b       	or	r24, r25
    21d0:	e1 f6       	brne	.-72     	; 0x218a <fputc+0x10>
    21d2:	d8 01       	movw	r26, r16
    21d4:	16 96       	adiw	r26, 0x06	; 6
    21d6:	8d 91       	ld	r24, X+
    21d8:	9c 91       	ld	r25, X
    21da:	17 97       	sbiw	r26, 0x07	; 7
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	17 96       	adiw	r26, 0x07	; 7
    21e0:	9c 93       	st	X, r25
    21e2:	8e 93       	st	-X, r24
    21e4:	16 97       	sbiw	r26, 0x06	; 6
    21e6:	ce 01       	movw	r24, r28
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	1f 91       	pop	r17
    21ee:	0f 91       	pop	r16
    21f0:	08 95       	ret

000021f2 <__ultoa_invert>:
    21f2:	fa 01       	movw	r30, r20
    21f4:	aa 27       	eor	r26, r26
    21f6:	28 30       	cpi	r18, 0x08	; 8
    21f8:	51 f1       	breq	.+84     	; 0x224e <__ultoa_invert+0x5c>
    21fa:	20 31       	cpi	r18, 0x10	; 16
    21fc:	81 f1       	breq	.+96     	; 0x225e <__ultoa_invert+0x6c>
    21fe:	e8 94       	clt
    2200:	6f 93       	push	r22
    2202:	6e 7f       	andi	r22, 0xFE	; 254
    2204:	6e 5f       	subi	r22, 0xFE	; 254
    2206:	7f 4f       	sbci	r23, 0xFF	; 255
    2208:	8f 4f       	sbci	r24, 0xFF	; 255
    220a:	9f 4f       	sbci	r25, 0xFF	; 255
    220c:	af 4f       	sbci	r26, 0xFF	; 255
    220e:	b1 e0       	ldi	r27, 0x01	; 1
    2210:	3e d0       	rcall	.+124    	; 0x228e <__ultoa_invert+0x9c>
    2212:	b4 e0       	ldi	r27, 0x04	; 4
    2214:	3c d0       	rcall	.+120    	; 0x228e <__ultoa_invert+0x9c>
    2216:	67 0f       	add	r22, r23
    2218:	78 1f       	adc	r23, r24
    221a:	89 1f       	adc	r24, r25
    221c:	9a 1f       	adc	r25, r26
    221e:	a1 1d       	adc	r26, r1
    2220:	68 0f       	add	r22, r24
    2222:	79 1f       	adc	r23, r25
    2224:	8a 1f       	adc	r24, r26
    2226:	91 1d       	adc	r25, r1
    2228:	a1 1d       	adc	r26, r1
    222a:	6a 0f       	add	r22, r26
    222c:	71 1d       	adc	r23, r1
    222e:	81 1d       	adc	r24, r1
    2230:	91 1d       	adc	r25, r1
    2232:	a1 1d       	adc	r26, r1
    2234:	20 d0       	rcall	.+64     	; 0x2276 <__ultoa_invert+0x84>
    2236:	09 f4       	brne	.+2      	; 0x223a <__ultoa_invert+0x48>
    2238:	68 94       	set
    223a:	3f 91       	pop	r19
    223c:	2a e0       	ldi	r18, 0x0A	; 10
    223e:	26 9f       	mul	r18, r22
    2240:	11 24       	eor	r1, r1
    2242:	30 19       	sub	r19, r0
    2244:	30 5d       	subi	r19, 0xD0	; 208
    2246:	31 93       	st	Z+, r19
    2248:	de f6       	brtc	.-74     	; 0x2200 <__ultoa_invert+0xe>
    224a:	cf 01       	movw	r24, r30
    224c:	08 95       	ret
    224e:	46 2f       	mov	r20, r22
    2250:	47 70       	andi	r20, 0x07	; 7
    2252:	40 5d       	subi	r20, 0xD0	; 208
    2254:	41 93       	st	Z+, r20
    2256:	b3 e0       	ldi	r27, 0x03	; 3
    2258:	0f d0       	rcall	.+30     	; 0x2278 <__ultoa_invert+0x86>
    225a:	c9 f7       	brne	.-14     	; 0x224e <__ultoa_invert+0x5c>
    225c:	f6 cf       	rjmp	.-20     	; 0x224a <__ultoa_invert+0x58>
    225e:	46 2f       	mov	r20, r22
    2260:	4f 70       	andi	r20, 0x0F	; 15
    2262:	40 5d       	subi	r20, 0xD0	; 208
    2264:	4a 33       	cpi	r20, 0x3A	; 58
    2266:	18 f0       	brcs	.+6      	; 0x226e <__ultoa_invert+0x7c>
    2268:	49 5d       	subi	r20, 0xD9	; 217
    226a:	31 fd       	sbrc	r19, 1
    226c:	40 52       	subi	r20, 0x20	; 32
    226e:	41 93       	st	Z+, r20
    2270:	02 d0       	rcall	.+4      	; 0x2276 <__ultoa_invert+0x84>
    2272:	a9 f7       	brne	.-22     	; 0x225e <__ultoa_invert+0x6c>
    2274:	ea cf       	rjmp	.-44     	; 0x224a <__ultoa_invert+0x58>
    2276:	b4 e0       	ldi	r27, 0x04	; 4
    2278:	a6 95       	lsr	r26
    227a:	97 95       	ror	r25
    227c:	87 95       	ror	r24
    227e:	77 95       	ror	r23
    2280:	67 95       	ror	r22
    2282:	ba 95       	dec	r27
    2284:	c9 f7       	brne	.-14     	; 0x2278 <__ultoa_invert+0x86>
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	61 05       	cpc	r22, r1
    228a:	71 05       	cpc	r23, r1
    228c:	08 95       	ret
    228e:	9b 01       	movw	r18, r22
    2290:	ac 01       	movw	r20, r24
    2292:	0a 2e       	mov	r0, r26
    2294:	06 94       	lsr	r0
    2296:	57 95       	ror	r21
    2298:	47 95       	ror	r20
    229a:	37 95       	ror	r19
    229c:	27 95       	ror	r18
    229e:	ba 95       	dec	r27
    22a0:	c9 f7       	brne	.-14     	; 0x2294 <__ultoa_invert+0xa2>
    22a2:	62 0f       	add	r22, r18
    22a4:	73 1f       	adc	r23, r19
    22a6:	84 1f       	adc	r24, r20
    22a8:	95 1f       	adc	r25, r21
    22aa:	a0 1d       	adc	r26, r0
    22ac:	08 95       	ret

000022ae <_exit>:
    22ae:	f8 94       	cli

000022b0 <__stop_program>:
    22b0:	ff cf       	rjmp	.-2      	; 0x22b0 <__stop_program>
