
09_WASHING_MACHINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  0000232e  000023c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000232e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006ac  0080017a  0080017a  0000243c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002301  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001261  00000000  00000000  000049d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000169c  00000000  00000000  00005c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  000072d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a22  00000000  00000000  00007824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f1f  00000000  00000000  00008246  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00009165  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <__vector_5>
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__vector_16>
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__vector_18>
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__vector_30>
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e2       	ldi	r30, 0x2E	; 46
      a0:	f3 e2       	ldi	r31, 0x23	; 35
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 37       	cpi	r26, 0x7A	; 122
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	aa e7       	ldi	r26, 0x7A	; 122
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 32       	cpi	r26, 0x26	; 38
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 a5 0a 	call	0x154a	; 0x154a <main>
      c6:	0c 94 95 11 	jmp	0x232a	; 0x232a <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <init_button>:
      cc:	81 b3       	in	r24, 0x11	; 17
      ce:	8f 70       	andi	r24, 0x0F	; 15
      d0:	81 bb       	out	0x11, r24	; 17
      d2:	08 95       	ret

000000d4 <get_button>:
      d4:	20 b3       	in	r18, 0x10	; 16
      d6:	42 2f       	mov	r20, r18
      d8:	50 e0       	ldi	r21, 0x00	; 0
      da:	21 e0       	ldi	r18, 0x01	; 1
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	02 c0       	rjmp	.+4      	; 0xe4 <get_button+0x10>
      e0:	22 0f       	add	r18, r18
      e2:	33 1f       	adc	r19, r19
      e4:	6a 95       	dec	r22
      e6:	e2 f7       	brpl	.-8      	; 0xe0 <get_button+0xc>
      e8:	24 23       	and	r18, r20
      ea:	35 23       	and	r19, r21
      ec:	21 15       	cp	r18, r1
      ee:	31 05       	cpc	r19, r1
      f0:	b9 f0       	breq	.+46     	; 0x120 <get_button+0x4c>
      f2:	fc 01       	movw	r30, r24
      f4:	e6 58       	subi	r30, 0x86	; 134
      f6:	fe 4f       	sbci	r31, 0xFE	; 254
      f8:	40 81       	ld	r20, Z
      fa:	41 11       	cpse	r20, r1
      fc:	11 c0       	rjmp	.+34     	; 0x120 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fe:	2f ef       	ldi	r18, 0xFF	; 255
     100:	3d ee       	ldi	r19, 0xED	; 237
     102:	42 e0       	ldi	r20, 0x02	; 2
     104:	21 50       	subi	r18, 0x01	; 1
     106:	30 40       	sbci	r19, 0x00	; 0
     108:	40 40       	sbci	r20, 0x00	; 0
     10a:	e1 f7       	brne	.-8      	; 0x104 <get_button+0x30>
     10c:	00 c0       	rjmp	.+0      	; 0x10e <get_button+0x3a>
     10e:	00 00       	nop
     110:	fc 01       	movw	r30, r24
     112:	e6 58       	subi	r30, 0x86	; 134
     114:	fe 4f       	sbci	r31, 0xFE	; 254
     116:	21 e0       	ldi	r18, 0x01	; 1
     118:	20 83       	st	Z, r18
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	08 95       	ret
     120:	fc 01       	movw	r30, r24
     122:	e6 58       	subi	r30, 0x86	; 134
     124:	fe 4f       	sbci	r31, 0xFE	; 254
     126:	40 81       	ld	r20, Z
     128:	41 30       	cpi	r20, 0x01	; 1
     12a:	91 f4       	brne	.+36     	; 0x150 <get_button+0x7c>
     12c:	23 2b       	or	r18, r19
     12e:	99 f4       	brne	.+38     	; 0x156 <get_button+0x82>
     130:	fc 01       	movw	r30, r24
     132:	e6 58       	subi	r30, 0x86	; 134
     134:	fe 4f       	sbci	r31, 0xFE	; 254
     136:	10 82       	st	Z, r1
     138:	8f ef       	ldi	r24, 0xFF	; 255
     13a:	9d ee       	ldi	r25, 0xED	; 237
     13c:	22 e0       	ldi	r18, 0x02	; 2
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	90 40       	sbci	r25, 0x00	; 0
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	e1 f7       	brne	.-8      	; 0x13e <get_button+0x6a>
     146:	00 c0       	rjmp	.+0      	; 0x148 <get_button+0x74>
     148:	00 00       	nop
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	08 95       	ret
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	08 95       	ret
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	08 95       	ret

0000015c <main_screen>:
	}
}

void main_screen(int *main_num) // 메인 화면
{
	PORTA = 0;
     15c:	1b ba       	out	0x1b, r1	; 27
	loading_rot = 10; // NULL
     15e:	8a e0       	ldi	r24, 0x0A	; 10
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     166:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
     16a:	08 95       	ret

0000016c <dumy_fanc>:
	}
}

void dumy_fanc()
{
	PORTA = 0;
     16c:	1b ba       	out	0x1b, r1	; 27
     16e:	08 95       	ret

00000170 <init_fnd>:

////////////////////////////////////////////fnd 초기화 및 fnd 표시 함수들 ///////////////////////////////////////////////////////////

void init_fnd(void)
{
	FND_DATA_DDR = 0xff; // 출력모드로 설정
     170:	8f ef       	ldi	r24, 0xFF	; 255
     172:	84 bb       	out	0x14, r24	; 20

	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 |
     174:	87 b3       	in	r24, 0x17	; 23
     176:	80 6f       	ori	r24, 0xF0	; 240
     178:	87 bb       	out	0x17, r24	; 23
	1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4;

	FND_DATA_PORT = 0x00; // FND를 all off
     17a:	15 ba       	out	0x15, r1	; 21
     17c:	08 95       	ret

0000017e <fnd_display>:
}

void fnd_display(void)
{
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	2b 97       	sbiw	r28, 0x0b	; 11
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	f8 94       	cli
     18c:	de bf       	out	0x3e, r29	; 62
     18e:	0f be       	out	0x3f, r0	; 63
     190:	cd bf       	out	0x3d, r28	; 61
	//  0      1       2      3      4      5      6     7      8       9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
     192:	8b e0       	ldi	r24, 0x0B	; 11
     194:	e4 e3       	ldi	r30, 0x34	; 52
     196:	f1 e0       	ldi	r31, 0x01	; 1
     198:	de 01       	movw	r26, r28
     19a:	11 96       	adiw	r26, 0x01	; 1
     19c:	01 90       	ld	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	8a 95       	dec	r24
     1a2:	e1 f7       	brne	.-8      	; 0x19c <fnd_display+0x1e>

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     1a4:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <digit_select.1862>
     1a8:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <digit_select.1862+0x1>
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	91 05       	cpc	r25, r1
     1b0:	21 f1       	breq	.+72     	; 0x1fa <fnd_display+0x7c>
     1b2:	1c f4       	brge	.+6      	; 0x1ba <fnd_display+0x3c>
     1b4:	89 2b       	or	r24, r25
     1b6:	41 f0       	breq	.+16     	; 0x1c8 <fnd_display+0x4a>
     1b8:	84 c0       	rjmp	.+264    	; 0x2c2 <fnd_display+0x144>
     1ba:	82 30       	cpi	r24, 0x02	; 2
     1bc:	91 05       	cpc	r25, r1
     1be:	f1 f1       	breq	.+124    	; 0x23c <fnd_display+0xbe>
     1c0:	03 97       	sbiw	r24, 0x03	; 3
     1c2:	09 f4       	brne	.+2      	; 0x1c6 <fnd_display+0x48>
     1c4:	5e c0       	rjmp	.+188    	; 0x282 <fnd_display+0x104>
     1c6:	7d c0       	rjmp	.+250    	; 0x2c2 <fnd_display+0x144>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     1c8:	8f e7       	ldi	r24, 0x7F	; 127
     1ca:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     1cc:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <sec_count>
     1d0:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <sec_count+0x1>
     1d4:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sec_count+0x2>
     1d8:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <sec_count+0x3>
     1dc:	2a e0       	ldi	r18, 0x0A	; 10
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	40 e0       	ldi	r20, 0x00	; 0
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__udivmodsi4>
     1e8:	e1 e0       	ldi	r30, 0x01	; 1
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	ec 0f       	add	r30, r28
     1ee:	fd 1f       	adc	r31, r29
     1f0:	e6 0f       	add	r30, r22
     1f2:	f7 1f       	adc	r31, r23
     1f4:	80 81       	ld	r24, Z
     1f6:	85 bb       	out	0x15, r24	; 21
		break;
     1f8:	64 c0       	rjmp	.+200    	; 0x2c2 <fnd_display+0x144>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     1fa:	8f eb       	ldi	r24, 0xBF	; 191
     1fc:	88 bb       	out	0x18, r24	; 24

		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     1fe:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <sec_count>
     202:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <sec_count+0x1>
     206:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sec_count+0x2>
     20a:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <sec_count+0x3>
     20e:	2a e0       	ldi	r18, 0x0A	; 10
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__udivmodsi4>
     21a:	ca 01       	movw	r24, r20
     21c:	b9 01       	movw	r22, r18
     21e:	26 e0       	ldi	r18, 0x06	; 6
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__udivmodsi4>
     22a:	e1 e0       	ldi	r30, 0x01	; 1
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	ec 0f       	add	r30, r28
     230:	fd 1f       	adc	r31, r29
     232:	e6 0f       	add	r30, r22
     234:	f7 1f       	adc	r31, r23
     236:	80 81       	ld	r24, Z
     238:	85 bb       	out	0x15, r24	; 21
		break;
     23a:	43 c0       	rjmp	.+134    	; 0x2c2 <fnd_display+0x144>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     23c:	8f ed       	ldi	r24, 0xDF	; 223
     23e:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     240:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <sec_count>
     244:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <sec_count+0x1>
     248:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sec_count+0x2>
     24c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <sec_count+0x3>
     250:	2c e3       	ldi	r18, 0x3C	; 60
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__udivmodsi4>
     25c:	ca 01       	movw	r24, r20
     25e:	b9 01       	movw	r22, r18
     260:	2a e0       	ldi	r18, 0x0A	; 10
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	40 e0       	ldi	r20, 0x00	; 0
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__udivmodsi4>
     26c:	e1 e0       	ldi	r30, 0x01	; 1
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	ec 0f       	add	r30, r28
     272:	fd 1f       	adc	r31, r29
     274:	e6 0f       	add	r30, r22
     276:	f7 1f       	adc	r31, r23
     278:	90 81       	ld	r25, Z
     27a:	8b 85       	ldd	r24, Y+11	; 0x0b
     27c:	89 2b       	or	r24, r25
     27e:	85 bb       	out	0x15, r24	; 21
		break;
     280:	20 c0       	rjmp	.+64     	; 0x2c2 <fnd_display+0x144>

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     282:	8f ee       	ldi	r24, 0xEF	; 239
     284:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count / 600 % 6]; // 10단위 분
     286:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <sec_count>
     28a:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <sec_count+0x1>
     28e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <sec_count+0x2>
     292:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <sec_count+0x3>
     296:	28 e5       	ldi	r18, 0x58	; 88
     298:	32 e0       	ldi	r19, 0x02	; 2
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__udivmodsi4>
     2a2:	ca 01       	movw	r24, r20
     2a4:	b9 01       	movw	r22, r18
     2a6:	26 e0       	ldi	r18, 0x06	; 6
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__udivmodsi4>
     2b2:	e1 e0       	ldi	r30, 0x01	; 1
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	ec 0f       	add	r30, r28
     2b8:	fd 1f       	adc	r31, r29
     2ba:	e6 0f       	add	r30, r22
     2bc:	f7 1f       	adc	r31, r23
     2be:	80 81       	ld	r24, Z
     2c0:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
     2c2:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <digit_select.1862>
     2c6:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <digit_select.1862+0x1>
     2ca:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
     2cc:	83 70       	andi	r24, 0x03	; 3
     2ce:	90 78       	andi	r25, 0x80	; 128
     2d0:	99 23       	and	r25, r25
     2d2:	24 f4       	brge	.+8      	; 0x2dc <fnd_display+0x15e>
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	8c 6f       	ori	r24, 0xFC	; 252
     2d8:	9f 6f       	ori	r25, 0xFF	; 255
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <digit_select.1862+0x1>
     2e0:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <digit_select.1862>
}
     2e4:	2b 96       	adiw	r28, 0x0b	; 11
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <water_temperature>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////수동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
	loading_rot = 0;
     2fa:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <loading_rot+0x1>
     2fe:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <loading_rot>
	PORTA = 0x07;
     302:	87 e0       	ldi	r24, 0x07	; 7
     304:	8b bb       	out	0x1b, r24	; 27
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
     306:	8e e1       	ldi	r24, 0x1E	; 30
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	a0 e0       	ldi	r26, 0x00	; 0
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
     312:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
     316:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
     31a:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>
/////////////////////////////////////////수동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
	loading_rot = 0;
	PORTA = 0x07;
	int water_tem_toggle = 1;
     31e:	c1 e0       	ldi	r28, 0x01	; 1
     320:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     322:	66 c0       	rjmp	.+204    	; 0x3f0 <water_temperature+0xfa>
	{
		if (get_button(BUTTON2, BUTTON2PIN))
     324:	66 e0       	ldi	r22, 0x06	; 6
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	d3 de       	rcall	.-602    	; 0xd4 <get_button>
     32e:	89 2b       	or	r24, r25
     330:	99 f0       	breq	.+38     	; 0x358 <water_temperature+0x62>
		{
			sec_count -= 5;
     332:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <sec_count>
     336:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <sec_count+0x1>
     33a:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <sec_count+0x2>
     33e:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <sec_count+0x3>
     342:	05 97       	sbiw	r24, 0x05	; 5
     344:	a1 09       	sbc	r26, r1
     346:	b1 09       	sbc	r27, r1
     348:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
     34c:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
     350:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
     354:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     358:	67 e0       	ldi	r22, 0x07	; 7
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	83 e0       	ldi	r24, 0x03	; 3
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	b9 de       	rcall	.-654    	; 0xd4 <get_button>
     362:	89 2b       	or	r24, r25
     364:	99 f0       	breq	.+38     	; 0x38c <water_temperature+0x96>
		{
			sec_count += 5;
     366:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <sec_count>
     36a:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <sec_count+0x1>
     36e:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <sec_count+0x2>
     372:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <sec_count+0x3>
     376:	05 96       	adiw	r24, 0x05	; 5
     378:	a1 1d       	adc	r26, r1
     37a:	b1 1d       	adc	r27, r1
     37c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
     380:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
     384:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
     388:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     38c:	65 e0       	ldi	r22, 0x05	; 5
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	9f de       	rcall	.-706    	; 0xd4 <get_button>
     396:	89 2b       	or	r24, r25
     398:	81 f0       	breq	.+32     	; 0x3ba <water_temperature+0xc4>
		{
			sec_count = 0;
     39a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <sec_count>
     39e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <sec_count+0x1>
     3a2:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <sec_count+0x2>
     3a6:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sec_count+0x3>
			custom_wash_mode = 1;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     3b2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			water_tem_toggle = 0;
     3b6:	c0 e0       	ldi	r28, 0x00	; 0
     3b8:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     3ba:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <fnd_refreshrate>
     3be:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <fnd_refreshrate+0x1>
     3c2:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <fnd_refreshrate+0x2>
     3c6:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <fnd_refreshrate+0x3>
     3ca:	02 97       	sbiw	r24, 0x02	; 2
     3cc:	a1 05       	cpc	r26, r1
     3ce:	b1 05       	cpc	r27, r1
     3d0:	48 f0       	brcs	.+18     	; 0x3e4 <water_temperature+0xee>
		{
			fnd_refreshrate = 0;
     3d2:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate>
     3d6:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x1>
     3da:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <fnd_refreshrate+0x2>
     3de:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <fnd_refreshrate+0x3>
			fnd_display();
     3e2:	cd de       	rcall	.-614    	; 0x17e <fnd_display>
		}
		if (custom_wash_mode == 5)
     3e4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <custom_wash_mode>
     3e8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <custom_wash_mode+0x1>
     3ec:	05 97       	sbiw	r24, 0x05	; 5
     3ee:	19 f0       	breq	.+6      	; 0x3f6 <water_temperature+0x100>
	PORTA = 0x07;
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     3f0:	20 97       	sbiw	r28, 0x00	; 0
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <water_temperature+0x100>
     3f4:	97 cf       	rjmp	.-210    	; 0x324 <water_temperature+0x2e>
		if (custom_wash_mode == 5)
		{
			break;
		}
	}
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <rinse_frequency>:

void rinse_frequency() // 헹굼 횟수 조절
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
	PORTA = 0x03;
     400:	83 e0       	ldi	r24, 0x03	; 3
     402:	8b bb       	out	0x1b, r24	; 27
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 2; // deflaut 헹굼 횟수
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	a0 e0       	ldi	r26, 0x00	; 0
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
     410:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
     414:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
     418:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>
}

void rinse_frequency() // 헹굼 횟수 조절
{
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
     41c:	c1 e0       	ldi	r28, 0x01	; 1
     41e:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 2; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     420:	79 c0       	rjmp	.+242    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     422:	66 e0       	ldi	r22, 0x06	; 6
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	54 de       	rcall	.-856    	; 0xd4 <get_button>
     42c:	89 2b       	or	r24, r25
     42e:	99 f0       	breq	.+38     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		{
			sec_count -= 1;
     430:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <sec_count>
     434:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <sec_count+0x1>
     438:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <sec_count+0x2>
     43c:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <sec_count+0x3>
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	a1 09       	sbc	r26, r1
     444:	b1 09       	sbc	r27, r1
     446:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
     44a:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
     44e:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
     452:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     456:	67 e0       	ldi	r22, 0x07	; 7
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	83 e0       	ldi	r24, 0x03	; 3
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	3a de       	rcall	.-908    	; 0xd4 <get_button>
     460:	89 2b       	or	r24, r25
     462:	99 f0       	breq	.+38     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
		{
			sec_count += 1;
     464:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <sec_count>
     468:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <sec_count+0x1>
     46c:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <sec_count+0x2>
     470:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <sec_count+0x3>
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	a1 1d       	adc	r26, r1
     478:	b1 1d       	adc	r27, r1
     47a:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
     47e:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
     482:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
     486:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     48a:	65 e0       	ldi	r22, 0x05	; 5
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	20 de       	rcall	.-960    	; 0xd4 <get_button>
     494:	89 2b       	or	r24, r25
     496:	49 f1       	breq	.+82     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
		{
			total_wash_time += sec_count * 10; // 버튼 1누르면 횟수 * 10초를 전역변수에 저장하고 다음 단계로 간 다음 탈출
     498:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <sec_count>
     49c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <sec_count+0x1>
     4a0:	9c 01       	movw	r18, r24
     4a2:	22 0f       	add	r18, r18
     4a4:	33 1f       	adc	r19, r19
     4a6:	88 0f       	add	r24, r24
     4a8:	99 1f       	adc	r25, r25
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	82 0f       	add	r24, r18
     4b4:	93 1f       	adc	r25, r19
     4b6:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <total_wash_time>
     4ba:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <total_wash_time+0x1>
     4be:	82 0f       	add	r24, r18
     4c0:	93 1f       	adc	r25, r19
     4c2:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <total_wash_time+0x1>
     4c6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <total_wash_time>
			sec_count = 0;
     4ca:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <sec_count>
     4ce:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <sec_count+0x1>
     4d2:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <sec_count+0x2>
     4d6:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sec_count+0x3>
			custom_wash_mode = 2;
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     4e2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			rinse_frequency_toggle = 0;
     4e6:	c0 e0       	ldi	r28, 0x00	; 0
     4e8:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     4ea:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <fnd_refreshrate>
     4ee:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <fnd_refreshrate+0x1>
     4f2:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <fnd_refreshrate+0x2>
     4f6:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <fnd_refreshrate+0x3>
     4fa:	02 97       	sbiw	r24, 0x02	; 2
     4fc:	a1 05       	cpc	r26, r1
     4fe:	b1 05       	cpc	r27, r1
     500:	48 f0       	brcs	.+18     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
		{
			fnd_refreshrate = 0;
     502:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate>
     506:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x1>
     50a:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <fnd_refreshrate+0x2>
     50e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <fnd_refreshrate+0x3>
			fnd_display();
     512:	35 de       	rcall	.-918    	; 0x17e <fnd_display>
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 2; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     514:	20 97       	sbiw	r28, 0x00	; 0
     516:	09 f0       	breq	.+2      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     518:	84 cf       	rjmp	.-248    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <spindry_strength>:

void spindry_strength()
{
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
	PORTA = 0x01;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	8b bb       	out	0x1b, r24	; 27

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	a0 e0       	ldi	r26, 0x00	; 0
     52e:	b0 e0       	ldi	r27, 0x00	; 0
     530:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
     534:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
     538:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
     53c:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>

void spindry_strength()
{
	PORTA = 0x01;

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
     540:	c1 e0       	ldi	r28, 0x01	; 1
     542:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
	
	while (spindry_strength_toggle)
     544:	98 c0       	rjmp	.+304    	; 0x676 <spindry_strength+0x156>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     546:	66 e0       	ldi	r22, 0x06	; 6
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	c2 dd       	rcall	.-1148   	; 0xd4 <get_button>
     550:	89 2b       	or	r24, r25
     552:	99 f0       	breq	.+38     	; 0x57a <spindry_strength+0x5a>
		{
			sec_count -= 1;
     554:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <sec_count>
     558:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <sec_count+0x1>
     55c:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <sec_count+0x2>
     560:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <sec_count+0x3>
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	a1 09       	sbc	r26, r1
     568:	b1 09       	sbc	r27, r1
     56a:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
     56e:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
     572:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
     576:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     57a:	67 e0       	ldi	r22, 0x07	; 7
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	a8 dd       	rcall	.-1200   	; 0xd4 <get_button>
     584:	89 2b       	or	r24, r25
     586:	99 f0       	breq	.+38     	; 0x5ae <spindry_strength+0x8e>
		{
			sec_count += 1;
     588:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <sec_count>
     58c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <sec_count+0x1>
     590:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <sec_count+0x2>
     594:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <sec_count+0x3>
     598:	01 96       	adiw	r24, 0x01	; 1
     59a:	a1 1d       	adc	r26, r1
     59c:	b1 1d       	adc	r27, r1
     59e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
     5a2:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
     5a6:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
     5aa:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1 누르면 세팅한 강도에 맞는 회전값 반환
     5ae:	65 e0       	ldi	r22, 0x05	; 5
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	8e dd       	rcall	.-1252   	; 0xd4 <get_button>
     5b8:	89 2b       	or	r24, r25
     5ba:	09 f4       	brne	.+2      	; 0x5be <spindry_strength+0x9e>
     5bc:	47 c0       	rjmp	.+142    	; 0x64c <spindry_strength+0x12c>
		{
			if(sec_count == 1)
     5be:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <sec_count>
     5c2:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <sec_count+0x1>
     5c6:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <sec_count+0x2>
     5ca:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <sec_count+0x3>
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	91 05       	cpc	r25, r1
     5d2:	a1 05       	cpc	r26, r1
     5d4:	b1 05       	cpc	r27, r1
     5d6:	39 f4       	brne	.+14     	; 0x5e6 <spindry_strength+0xc6>
			{
				spin_strength_val = 123; // duty cycle 50%
     5d8:	8b e7       	ldi	r24, 0x7B	; 123
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <spin_strength_val+0x1>
     5e0:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <spin_strength_val>
     5e4:	22 c0       	rjmp	.+68     	; 0x62a <spindry_strength+0x10a>
			}
			else if (sec_count == 2)
     5e6:	82 30       	cpi	r24, 0x02	; 2
     5e8:	91 05       	cpc	r25, r1
     5ea:	a1 05       	cpc	r26, r1
     5ec:	b1 05       	cpc	r27, r1
     5ee:	39 f4       	brne	.+14     	; 0x5fe <spindry_strength+0xde>
			{
				spin_strength_val = 160; // duty cycle 62%
     5f0:	80 ea       	ldi	r24, 0xA0	; 160
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <spin_strength_val+0x1>
     5f8:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <spin_strength_val>
     5fc:	16 c0       	rjmp	.+44     	; 0x62a <spindry_strength+0x10a>
			}
			else if (sec_count == 3)
     5fe:	83 30       	cpi	r24, 0x03	; 3
     600:	91 05       	cpc	r25, r1
     602:	a1 05       	cpc	r26, r1
     604:	b1 05       	cpc	r27, r1
     606:	39 f4       	brne	.+14     	; 0x616 <spindry_strength+0xf6>
			{
				spin_strength_val = 205; // duty cycle 80%
     608:	8d ec       	ldi	r24, 0xCD	; 205
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <spin_strength_val+0x1>
     610:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <spin_strength_val>
     614:	0a c0       	rjmp	.+20     	; 0x62a <spindry_strength+0x10a>
			}
			else if (sec_count == 4)
     616:	04 97       	sbiw	r24, 0x04	; 4
     618:	a1 05       	cpc	r26, r1
     61a:	b1 05       	cpc	r27, r1
     61c:	31 f4       	brne	.+12     	; 0x62a <spindry_strength+0x10a>
			{
				spin_strength_val = 250; // duty cycle 98%
     61e:	8a ef       	ldi	r24, 0xFA	; 250
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <spin_strength_val+0x1>
     626:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <spin_strength_val>
			}
			PORTA = 0;
     62a:	1b ba       	out	0x1b, r1	; 27
			spindry_strength_toggle = 0;
			custom_wash_mode = 3;
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     634:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			sec_count = 0;
     638:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <sec_count>
     63c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <sec_count+0x1>
     640:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <sec_count+0x2>
     644:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sec_count+0x3>
			else if (sec_count == 4)
			{
				spin_strength_val = 250; // duty cycle 98%
			}
			PORTA = 0;
			spindry_strength_toggle = 0;
     648:	c0 e0       	ldi	r28, 0x00	; 0
     64a:	d0 e0       	ldi	r29, 0x00	; 0
			custom_wash_mode = 3;
			sec_count = 0;
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     64c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <fnd_refreshrate>
     650:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <fnd_refreshrate+0x1>
     654:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <fnd_refreshrate+0x2>
     658:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <fnd_refreshrate+0x3>
     65c:	02 97       	sbiw	r24, 0x02	; 2
     65e:	a1 05       	cpc	r26, r1
     660:	b1 05       	cpc	r27, r1
     662:	48 f0       	brcs	.+18     	; 0x676 <spindry_strength+0x156>
		{
			fnd_refreshrate = 0;
     664:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate>
     668:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x1>
     66c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <fnd_refreshrate+0x2>
     670:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <fnd_refreshrate+0x3>
			fnd_display();
     674:	84 dd       	rcall	.-1272   	; 0x17e <fnd_display>

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
	
	while (spindry_strength_toggle)
     676:	20 97       	sbiw	r28, 0x00	; 0
     678:	09 f0       	breq	.+2      	; 0x67c <spindry_strength+0x15c>
     67a:	65 cf       	rjmp	.-310    	; 0x546 <spindry_strength+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <pause_wash>:
	custom_wash_mode = 4; // end 화면으로 이동
	sec_count = 0; // 다 끝나면 끝
}

void pause_wash(int *return_enable, int *led_pause_count)
{
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	ec 01       	movw	r28, r24
     68c:	8b 01       	movw	r16, r22
	while (*return_enable == 0)
     68e:	6a c0       	rjmp	.+212    	; 0x764 <pause_wash+0xe2>
	{
		OCR3C = 0;
     690:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     694:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
		
		ultrasonic_distance_check();   //// 세탁기 문이 닫혔는지 확인하고 닫혀있으면 1을, 열려있으면 0을 반환
     698:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <ultrasonic_distance_check>
		if (ultrasonic_distance / 58 > 0 && ultrasonic_distance / 58 < 10)
     69c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <ultrasonic_distance>
     6a0:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <ultrasonic_distance+0x1>
     6a4:	ca 97       	sbiw	r24, 0x3a	; 58
     6a6:	74 f0       	brlt	.+28     	; 0x6c4 <pause_wash+0x42>
     6a8:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <ultrasonic_distance>
     6ac:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <ultrasonic_distance+0x1>
     6b0:	84 34       	cpi	r24, 0x44	; 68
     6b2:	92 40       	sbci	r25, 0x02	; 2
     6b4:	3c f4       	brge	.+14     	; 0x6c4 <pause_wash+0x42>
		{
			closed_check = 1;
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <closed_check+0x1>
     6be:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <closed_check>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <pause_wash+0x4a>
		}
		else
		{
			closed_check = 0;
     6c4:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <closed_check+0x1>
     6c8:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <closed_check>
		}
		
		if (get_button(BUTTON0, BUTTON0PIN) && closed_check == 1) // 뚜껑을 닫고 버튼 0 누르면 이어서 시작
     6cc:	64 e0       	ldi	r22, 0x04	; 4
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	ff dc       	rcall	.-1538   	; 0xd4 <get_button>
     6d6:	89 2b       	or	r24, r25
     6d8:	81 f0       	breq	.+32     	; 0x6fa <pause_wash+0x78>
     6da:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <closed_check>
     6de:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <closed_check+0x1>
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	51 f4       	brne	.+20     	; 0x6fa <pause_wash+0x78>
		{
			*return_enable = 1;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	99 83       	std	Y+1, r25	; 0x01
     6ec:	88 83       	st	Y, r24
			custom_wash_mode = 3;
     6ee:	83 e0       	ldi	r24, 0x03	; 3
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     6f6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 세탁 취소
     6fa:	67 e0       	ldi	r22, 0x07	; 7
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	e8 dc       	rcall	.-1584   	; 0xd4 <get_button>
     704:	89 2b       	or	r24, r25
     706:	b1 f0       	breq	.+44     	; 0x734 <pause_wash+0xb2>
		{
			*return_enable = 1;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	99 83       	std	Y+1, r25	; 0x01
     70e:	88 83       	st	Y, r24
			OCR3C = 0;
     710:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     714:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
			custom_wash_mode = 4;
     718:	84 e0       	ldi	r24, 0x04	; 4
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     720:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			sec_count = 0;
     724:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <sec_count>
     728:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <sec_count+0x1>
     72c:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <sec_count+0x2>
     730:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sec_count+0x3>
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     734:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <fnd_refreshrate>
     738:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <fnd_refreshrate+0x1>
     73c:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <fnd_refreshrate+0x2>
     740:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <fnd_refreshrate+0x3>
     744:	02 97       	sbiw	r24, 0x02	; 2
     746:	a1 05       	cpc	r26, r1
     748:	b1 05       	cpc	r27, r1
     74a:	48 f0       	brcs	.+18     	; 0x75e <pause_wash+0xdc>
		{
			fnd_refreshrate = 0;
     74c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate>
     750:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x1>
     754:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <fnd_refreshrate+0x2>
     758:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <fnd_refreshrate+0x3>
			fnd_display();
     75c:	10 dd       	rcall	.-1504   	; 0x17e <fnd_display>
		}
		PORTA = *led_pause_count;
     75e:	f8 01       	movw	r30, r16
     760:	80 81       	ld	r24, Z
     762:	8b bb       	out	0x1b, r24	; 27
	sec_count = 0; // 다 끝나면 끝
}

void pause_wash(int *return_enable, int *led_pause_count)
{
	while (*return_enable == 0)
     764:	88 81       	ld	r24, Y
     766:	99 81       	ldd	r25, Y+1	; 0x01
     768:	89 2b       	or	r24, r25
     76a:	09 f4       	brne	.+2      	; 0x76e <pause_wash+0xec>
     76c:	91 cf       	rjmp	.-222    	; 0x690 <pause_wash+0xe>
			fnd_refreshrate = 0;
			fnd_display();
		}
		PORTA = *led_pause_count;
	}
}
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	08 95       	ret

00000778 <fnd_ment_display>:
	digit_select++;
	digit_select %= 4; //다음 표시할 자리수 선택
}

void fnd_ment_display(int *loading_rot, int *main_ment) // 진행 로딩 상황 표시
{
     778:	ef 92       	push	r14
     77a:	ff 92       	push	r15
     77c:	0f 93       	push	r16
     77e:	1f 93       	push	r17
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	a7 97       	sbiw	r28, 0x27	; 39
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	de bf       	out	0x3e, r29	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	cd bf       	out	0x3d, r28	; 61
     794:	9c 01       	movw	r18, r24
	int a, b, c, d;
								 
	uint8_t fnd_loading_font[] =
     796:	97 e2       	ldi	r25, 0x27	; 39
     798:	ef e3       	ldi	r30, 0x3F	; 63
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	de 01       	movw	r26, r28
     79e:	11 96       	adiw	r26, 0x01	; 1
     7a0:	01 90       	ld	r0, Z+
     7a2:	0d 92       	st	X+, r0
     7a4:	9a 95       	dec	r25
     7a6:	e1 f7       	brne	.-8      	; 0x7a0 <fnd_ment_display+0x28>
	, ~0xff, ~0xa1, ~0xaf, ~0x99	//  DRY // 26
	, ~0xff, ~0xff, ~0x8c, ~0xaf, ~0x86, ~0x8c, ~0x88, ~0xaf, ~0x86, /*~0x7f, ~0x7f, ~0x7f*/ // 30~38   prepare
//     ' '     ' '    p       r     e      p     a      r      e       .       .      .
	};  
	
	if (*loading_rot == 4) // end screen
     7a8:	d9 01       	movw	r26, r18
     7aa:	8d 91       	ld	r24, X+
     7ac:	9c 91       	ld	r25, X
     7ae:	84 30       	cpi	r24, 0x04	; 4
     7b0:	91 05       	cpc	r25, r1
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <fnd_ment_display+0x3e>
     7b4:	43 c0       	rjmp	.+134    	; 0x83c <fnd_ment_display+0xc4>
	{
		a = 9; b = 13; c = 1; d = 6;
	}
	
	else if (*loading_rot == 5) // custom
     7b6:	85 30       	cpi	r24, 0x05	; 5
     7b8:	91 05       	cpc	r25, r1
     7ba:	09 f4       	brne	.+2      	; 0x7be <fnd_ment_display+0x46>
     7bc:	49 c0       	rjmp	.+146    	; 0x850 <fnd_ment_display+0xd8>
	{
		a = 17; b = 16; c = 15; d = 14;
	}
	else if (*loading_rot == 6) // auto
     7be:	86 30       	cpi	r24, 0x06	; 6
     7c0:	91 05       	cpc	r25, r1
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <fnd_ment_display+0x4e>
     7c4:	51 c0       	rjmp	.+162    	; 0x868 <fnd_ment_display+0xf0>
	{
		a = 21; b = 20; c = 19; d = 18;
	}
	else if (*loading_rot == 7) // fast
     7c6:	87 30       	cpi	r24, 0x07	; 7
     7c8:	91 05       	cpc	r25, r1
     7ca:	09 f4       	brne	.+2      	; 0x7ce <fnd_ment_display+0x56>
     7cc:	59 c0       	rjmp	.+178    	; 0x880 <fnd_ment_display+0x108>
	{
		a = 25; b = 24; c = 23; d = 22;
	}
	else if (*loading_rot == 8) // dry
     7ce:	88 30       	cpi	r24, 0x08	; 8
     7d0:	91 05       	cpc	r25, r1
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <fnd_ment_display+0x5e>
     7d4:	61 c0       	rjmp	.+194    	; 0x898 <fnd_ment_display+0x120>
	{
		a = 29; b = 28; c = 27; d = 26;
	}
	
	else if (*loading_rot == 9)
     7d6:	09 97       	sbiw	r24, 0x09	; 9
     7d8:	e1 f4       	brne	.+56     	; 0x812 <fnd_ment_display+0x9a>
	{
		d = *main_ment;
     7da:	db 01       	movw	r26, r22
     7dc:	ed 91       	ld	r30, X+
     7de:	fc 91       	ld	r31, X
		c = d + 1; c %= 9;
     7e0:	cf 01       	movw	r24, r30
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	29 e0       	ldi	r18, 0x09	; 9
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	b9 01       	movw	r22, r18
     7ea:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
     7ee:	7c 01       	movw	r14, r24
		b = c + 1; b %= 9;
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	b9 01       	movw	r22, r18
     7f4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
     7f8:	8c 01       	movw	r16, r24
		a = b + 1; a %= 9;
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	b9 01       	movw	r22, r18
     7fe:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
		a += 30; b += 30; c += 30; d += 30;
     802:	4e 96       	adiw	r24, 0x1e	; 30
     804:	02 5e       	subi	r16, 0xE2	; 226
     806:	1f 4f       	sbci	r17, 0xFF	; 255
     808:	be e1       	ldi	r27, 0x1E	; 30
     80a:	eb 0e       	add	r14, r27
     80c:	f1 1c       	adc	r15, r1
     80e:	7e 96       	adiw	r30, 0x1e	; 30
     810:	4e c0       	rjmp	.+156    	; 0x8ae <fnd_ment_display+0x136>
	}
	
	else // main screen
	{
		d = *main_ment;
     812:	db 01       	movw	r26, r22
     814:	ed 91       	ld	r30, X+
     816:	fc 91       	ld	r31, X
		c = d + 1; c %= 13;
     818:	cf 01       	movw	r24, r30
     81a:	01 96       	adiw	r24, 0x01	; 1
     81c:	2d e0       	ldi	r18, 0x0D	; 13
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	b9 01       	movw	r22, r18
     822:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
     826:	7c 01       	movw	r14, r24
		b = c + 1; b %= 13;
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	b9 01       	movw	r22, r18
     82c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
     830:	8c 01       	movw	r16, r24
		a = b + 1; a %= 13;
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	b9 01       	movw	r22, r18
     836:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
     83a:	39 c0       	rjmp	.+114    	; 0x8ae <fnd_ment_display+0x136>
//     ' '     ' '    p       r     e      p     a      r      e       .       .      .
	};  
	
	if (*loading_rot == 4) // end screen
	{
		a = 9; b = 13; c = 1; d = 6;
     83c:	e6 e0       	ldi	r30, 0x06	; 6
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	ee 24       	eor	r14, r14
     842:	e3 94       	inc	r14
     844:	f1 2c       	mov	r15, r1
     846:	0d e0       	ldi	r16, 0x0D	; 13
     848:	10 e0       	ldi	r17, 0x00	; 0
     84a:	89 e0       	ldi	r24, 0x09	; 9
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	2f c0       	rjmp	.+94     	; 0x8ae <fnd_ment_display+0x136>
	}
	
	else if (*loading_rot == 5) // custom
	{
		a = 17; b = 16; c = 15; d = 14;
     850:	ee e0       	ldi	r30, 0x0E	; 14
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	0f 2e       	mov	r0, r31
     856:	ff e0       	ldi	r31, 0x0F	; 15
     858:	ef 2e       	mov	r14, r31
     85a:	f1 2c       	mov	r15, r1
     85c:	f0 2d       	mov	r31, r0
     85e:	00 e1       	ldi	r16, 0x10	; 16
     860:	10 e0       	ldi	r17, 0x00	; 0
     862:	81 e1       	ldi	r24, 0x11	; 17
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	23 c0       	rjmp	.+70     	; 0x8ae <fnd_ment_display+0x136>
	}
	else if (*loading_rot == 6) // auto
	{
		a = 21; b = 20; c = 19; d = 18;
     868:	e2 e1       	ldi	r30, 0x12	; 18
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	0f 2e       	mov	r0, r31
     86e:	f3 e1       	ldi	r31, 0x13	; 19
     870:	ef 2e       	mov	r14, r31
     872:	f1 2c       	mov	r15, r1
     874:	f0 2d       	mov	r31, r0
     876:	04 e1       	ldi	r16, 0x14	; 20
     878:	10 e0       	ldi	r17, 0x00	; 0
     87a:	85 e1       	ldi	r24, 0x15	; 21
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	17 c0       	rjmp	.+46     	; 0x8ae <fnd_ment_display+0x136>
	}
	else if (*loading_rot == 7) // fast
	{
		a = 25; b = 24; c = 23; d = 22;
     880:	e6 e1       	ldi	r30, 0x16	; 22
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	0f 2e       	mov	r0, r31
     886:	f7 e1       	ldi	r31, 0x17	; 23
     888:	ef 2e       	mov	r14, r31
     88a:	f1 2c       	mov	r15, r1
     88c:	f0 2d       	mov	r31, r0
     88e:	08 e1       	ldi	r16, 0x18	; 24
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	89 e1       	ldi	r24, 0x19	; 25
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0b c0       	rjmp	.+22     	; 0x8ae <fnd_ment_display+0x136>
	}
	else if (*loading_rot == 8) // dry
	{
		a = 29; b = 28; c = 27; d = 26;
     898:	ea e1       	ldi	r30, 0x1A	; 26
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	0f 2e       	mov	r0, r31
     89e:	fb e1       	ldi	r31, 0x1B	; 27
     8a0:	ef 2e       	mov	r14, r31
     8a2:	f1 2c       	mov	r15, r1
     8a4:	f0 2d       	mov	r31, r0
     8a6:	0c e1       	ldi	r16, 0x1C	; 28
     8a8:	10 e0       	ldi	r17, 0x00	; 0
     8aa:	8d e1       	ldi	r24, 0x1D	; 29
     8ac:	90 e0       	ldi	r25, 0x00	; 0
		a = b + 1; a %= 13;
	}

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     8ae:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <digit_select.1877>
     8b2:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <digit_select.1877+0x1>
     8b6:	21 30       	cpi	r18, 0x01	; 1
     8b8:	31 05       	cpc	r19, r1
     8ba:	b1 f0       	breq	.+44     	; 0x8e8 <fnd_ment_display+0x170>
     8bc:	1c f4       	brge	.+6      	; 0x8c4 <fnd_ment_display+0x14c>
     8be:	23 2b       	or	r18, r19
     8c0:	41 f0       	breq	.+16     	; 0x8d2 <fnd_ment_display+0x15a>
     8c2:	32 c0       	rjmp	.+100    	; 0x928 <fnd_ment_display+0x1b0>
     8c4:	22 30       	cpi	r18, 0x02	; 2
     8c6:	31 05       	cpc	r19, r1
     8c8:	d1 f0       	breq	.+52     	; 0x8fe <fnd_ment_display+0x186>
     8ca:	23 30       	cpi	r18, 0x03	; 3
     8cc:	31 05       	cpc	r19, r1
     8ce:	11 f1       	breq	.+68     	; 0x914 <fnd_ment_display+0x19c>
     8d0:	2b c0       	rjmp	.+86     	; 0x928 <fnd_ment_display+0x1b0>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     8d2:	2f e7       	ldi	r18, 0x7F	; 127
     8d4:	28 bb       	out	0x18, r18	; 24
		FND_DATA_PORT = fnd_loading_font[a];
     8d6:	e1 e0       	ldi	r30, 0x01	; 1
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	ec 0f       	add	r30, r28
     8dc:	fd 1f       	adc	r31, r29
     8de:	e8 0f       	add	r30, r24
     8e0:	f9 1f       	adc	r31, r25
     8e2:	80 81       	ld	r24, Z
     8e4:	85 bb       	out	0x15, r24	; 21
		break;
     8e6:	20 c0       	rjmp	.+64     	; 0x928 <fnd_ment_display+0x1b0>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     8e8:	8f eb       	ldi	r24, 0xBF	; 191
     8ea:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[b];
     8ec:	e1 e0       	ldi	r30, 0x01	; 1
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	ec 0f       	add	r30, r28
     8f2:	fd 1f       	adc	r31, r29
     8f4:	e0 0f       	add	r30, r16
     8f6:	f1 1f       	adc	r31, r17
     8f8:	80 81       	ld	r24, Z
     8fa:	85 bb       	out	0x15, r24	; 21
		break;
     8fc:	15 c0       	rjmp	.+42     	; 0x928 <fnd_ment_display+0x1b0>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     8fe:	8f ed       	ldi	r24, 0xDF	; 223
     900:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[c];
     902:	e1 e0       	ldi	r30, 0x01	; 1
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	ec 0f       	add	r30, r28
     908:	fd 1f       	adc	r31, r29
     90a:	ee 0d       	add	r30, r14
     90c:	ff 1d       	adc	r31, r15
     90e:	80 81       	ld	r24, Z
     910:	85 bb       	out	0x15, r24	; 21
		break;
     912:	0a c0       	rjmp	.+20     	; 0x928 <fnd_ment_display+0x1b0>

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     914:	8f ee       	ldi	r24, 0xEF	; 239
     916:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[d];
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	8c 0f       	add	r24, r28
     91e:	9d 1f       	adc	r25, r29
     920:	e8 0f       	add	r30, r24
     922:	f9 1f       	adc	r31, r25
     924:	80 81       	ld	r24, Z
     926:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
     928:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <digit_select.1877>
     92c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <digit_select.1877+0x1>
     930:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
     932:	83 70       	andi	r24, 0x03	; 3
     934:	90 78       	andi	r25, 0x80	; 128
     936:	99 23       	and	r25, r25
     938:	24 f4       	brge	.+8      	; 0x942 <fnd_ment_display+0x1ca>
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	8c 6f       	ori	r24, 0xFC	; 252
     93e:	9f 6f       	ori	r25, 0xFF	; 255
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <digit_select.1877+0x1>
     946:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <digit_select.1877>
}
     94a:	a7 96       	adiw	r28, 0x27	; 39
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	08 95       	ret

00000964 <fnd_main>:
	end_display, // end 화면
	dumy_fanc // dumy
};

int fnd_main(void)
{
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	00 d0       	rcall	.+0      	; 0x96a <fnd_main+0x6>
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	8a bb       	out	0x1a, r24	; 26
	init_fnd(); // fnd 초기화
     972:	fe db       	rcall	.-2052   	; 0x170 <init_fnd>
	init_button(); // button 초기화
     974:	ab db       	rcall	.-2218   	; 0xcc <init_button>
     976:	1a 82       	std	Y+2, r1	; 0x02
	
	int	main_ment_on = 0; // select mode 글씨가 fnd에 돌아가면서 표시되도록 하는 변수
     978:	19 82       	std	Y+1, r1	; 0x01
     97a:	64 e0       	ldi	r22, 0x04	; 4

	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN) && closed_check == 1) // 버튼 0을 받으면 수동 세탁 모드로 진입하고 계속 버튼 0을 누를수록 다음 모드로 순회하듯이 작동, 버튼 1을 누르면 해당되는 모드 진입, 버튼 3을 누르면 메인화면으로 되돌아가기
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	a8 db       	rcall	.-2224   	; 0xd4 <get_button>
     984:	89 2b       	or	r24, r25
     986:	81 f0       	breq	.+32     	; 0x9a8 <fnd_main+0x44>
     988:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <closed_check>
     98c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <closed_check+0x1>
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	51 f4       	brne	.+20     	; 0x9a8 <fnd_main+0x44>
     994:	85 e0       	ldi	r24, 0x05	; 5
		{
			loading_rot = 5;
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     99c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
     9a0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <select_wash_mode+0x1>
			select_wash_mode = CUSTOM_WASH;
     9a4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <select_wash_mode>
     9a8:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <select_wash_mode>
		}
		
		fp_wash_mode[select_wash_mode]();
     9ac:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <select_wash_mode+0x1>
     9b0:	ee 0f       	add	r30, r30
     9b2:	ff 1f       	adc	r31, r31
     9b4:	e4 5f       	subi	r30, 0xF4	; 244
     9b6:	fe 4f       	sbci	r31, 0xFE	; 254
     9b8:	01 90       	ld	r0, Z+
     9ba:	f0 81       	ld	r31, Z
     9bc:	e0 2d       	mov	r30, r0
     9be:	09 95       	icall
		
		ultrasonic_distance_check();   //// 세탁기 문이 닫혔는지 확인하고 닫혀있으면 1을, 열려있으면 0을 반환
     9c0:	ef d7       	rcall	.+4062   	; 0x19a0 <ultrasonic_distance_check>
     9c2:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <ultrasonic_distance>
		if (ultrasonic_distance / 58 > 0 && ultrasonic_distance / 58 < 10)
     9c6:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <ultrasonic_distance+0x1>
     9ca:	ca 97       	sbiw	r24, 0x3a	; 58
     9cc:	74 f0       	brlt	.+28     	; 0x9ea <fnd_main+0x86>
     9ce:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <ultrasonic_distance>
     9d2:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <ultrasonic_distance+0x1>
     9d6:	84 34       	cpi	r24, 0x44	; 68
     9d8:	92 40       	sbci	r25, 0x02	; 2
     9da:	3c f4       	brge	.+14     	; 0x9ea <fnd_main+0x86>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
		{
			closed_check = 1;
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <closed_check+0x1>
     9e4:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <closed_check>
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <fnd_main+0x8e>
     9ea:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <closed_check+0x1>
		}
		else
		{
			closed_check = 0;
     9ee:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <closed_check>
     9f2:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <fnd_refreshrate>
		}
		
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     9f6:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <fnd_refreshrate+0x1>
     9fa:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <fnd_refreshrate+0x2>
     9fe:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <fnd_refreshrate+0x3>
     a02:	02 97       	sbiw	r24, 0x02	; 2
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	70 f0       	brcs	.+28     	; 0xa26 <fnd_main+0xc2>
     a0a:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate>
		{
			fnd_refreshrate = 0;
     a0e:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x1>
     a12:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <fnd_refreshrate+0x2>
     a16:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <fnd_refreshrate+0x3>
     a1a:	be 01       	movw	r22, r28
			fnd_ment_display(&loading_rot,&main_ment_on);
     a1c:	6f 5f       	subi	r22, 0xFF	; 255
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	88 e1       	ldi	r24, 0x18	; 24
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	a9 de       	rcall	.-686    	; 0x778 <fnd_ment_display>
     a26:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <msec_count>
		}
		if (msec_count >= 400)
     a2a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <msec_count+0x1>
     a2e:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <msec_count+0x2>
     a32:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <msec_count+0x3>
     a36:	80 39       	cpi	r24, 0x90	; 144
     a38:	91 40       	sbci	r25, 0x01	; 1
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	08 f4       	brcc	.+2      	; 0xa42 <fnd_main+0xde>
     a40:	9c cf       	rjmp	.-200    	; 0x97a <fnd_main+0x16>
     a42:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <msec_count>
		{
			msec_count = 0;
     a46:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <msec_count+0x1>
     a4a:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <msec_count+0x2>
     a4e:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <msec_count+0x3>
     a52:	89 81       	ldd	r24, Y+1	; 0x01
			main_ment_on++;
     a54:	9a 81       	ldd	r25, Y+2	; 0x02
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	6d e0       	ldi	r22, 0x0D	; 13
			main_ment_on %= 13;
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
     a60:	9a 83       	std	Y+2, r25	; 0x02
     a62:	89 83       	std	Y+1, r24	; 0x01
     a64:	8a cf       	rjmp	.-236    	; 0x97a <fnd_main+0x16>

00000a66 <custom_wash>:
     a66:	81 e0       	ldi	r24, 0x01	; 1

////////////////////////////////////////////메인화면에서 동작하는 함수들////////////////////////////////////////////////

void custom_wash() // 수동 세탁
{
	sec_count = 1;
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	a0 e0       	ldi	r26, 0x00	; 0
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
     a72:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
     a76:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
     a7a:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>
	/*int custom_ment_on = 5;*/
	
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
     a7e:	4b c0       	rjmp	.+150    	; 0xb16 <custom_wash+0xb0>
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 다음 쾌속 세탁으로 이동
		{
			loading_rot = 6;
     a80:	86 e0       	ldi	r24, 0x06	; 6
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     a88:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
			select_wash_mode = AUTO_WASH;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     a94:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			break;
     a98:	08 95       	ret
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     a9a:	67 e0       	ldi	r22, 0x07	; 7
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	18 db       	rcall	.-2512   	; 0xd4 <get_button>
     aa4:	89 2b       	or	r24, r25
     aa6:	39 f0       	breq	.+14     	; 0xab6 <custom_wash+0x50>
		{
			select_wash_mode = 4;
     aa8:	84 e0       	ldi	r24, 0x04	; 4
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     ab0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			break;
     ab4:	08 95       	ret
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     ab6:	65 e0       	ldi	r22, 0x05	; 5
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0a db       	rcall	.-2540   	; 0xd4 <get_button>
     ac0:	89 2b       	or	r24, r25
     ac2:	21 f0       	breq	.+8      	; 0xacc <custom_wash+0x66>
		{
			if (auto_step_led == 0) // 버튼 1을 누르면 수동 세탁을 시작하는 단계로 진입. 물 온도, 헹굼 횟수, 탈수 강도 선택
			{
				custom_wash_mode = 0;
     ac4:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <custom_wash_mode+0x1>
     ac8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <custom_wash_mode>
// 		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
// 		{
// 			fnd_refreshrate = 0;
// 			fnd_display(); // 여기 메인화면에서 동작하는 함수들은 그냥 알파벳 보여줘서 직관성을 높이는게 좋을듯
// 		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     acc:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <fnd_refreshrate>
     ad0:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <fnd_refreshrate+0x1>
     ad4:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <fnd_refreshrate+0x2>
     ad8:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <fnd_refreshrate+0x3>
     adc:	02 97       	sbiw	r24, 0x02	; 2
     ade:	a1 05       	cpc	r26, r1
     ae0:	b1 05       	cpc	r27, r1
     ae2:	68 f0       	brcs	.+26     	; 0xafe <custom_wash+0x98>
		{
			fnd_refreshrate = 0;
     ae4:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate>
     ae8:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x1>
     aec:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <fnd_refreshrate+0x2>
     af0:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <fnd_refreshrate+0x3>
			fnd_ment_display(&loading_rot, 10);
     af4:	6a e0       	ldi	r22, 0x0A	; 10
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	88 e1       	ldi	r24, 0x18	; 24
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	3d de       	rcall	.-902    	; 0x778 <fnd_ment_display>
		}
		custom_wash_select[custom_wash_mode]();
     afe:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <custom_wash_mode>
     b02:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <custom_wash_mode+0x1>
     b06:	ee 0f       	add	r30, r30
     b08:	ff 1f       	adc	r31, r31
     b0a:	e0 50       	subi	r30, 0x00	; 0
     b0c:	ff 4f       	sbci	r31, 0xFF	; 255
     b0e:	01 90       	ld	r0, Z+
     b10:	f0 81       	ld	r31, Z
     b12:	e0 2d       	mov	r30, r0
     b14:	09 95       	icall
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 다음 쾌속 세탁으로 이동
     b16:	64 e0       	ldi	r22, 0x04	; 4
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	da da       	rcall	.-2636   	; 0xd4 <get_button>
     b20:	89 2b       	or	r24, r25
     b22:	09 f4       	brne	.+2      	; 0xb26 <custom_wash+0xc0>
     b24:	ba cf       	rjmp	.-140    	; 0xa9a <custom_wash+0x34>
     b26:	ac cf       	rjmp	.-168    	; 0xa80 <custom_wash+0x1a>

00000b28 <auto_wash>:
	
}

void auto_wash(int *auto_ment_on) // 자동 세탁
{
	sec_count = 2;
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e0       	ldi	r26, 0x00	; 0
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
     b34:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
     b38:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
     b3c:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>
	
	/**auto_ment_on = 6;*/
	
	while (1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 다음 헹굼 + 탈수 세탁으로 이동
     b40:	64 e0       	ldi	r22, 0x04	; 4
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	c5 da       	rcall	.-2678   	; 0xd4 <get_button>
     b4a:	89 2b       	or	r24, r25
     b4c:	69 f0       	breq	.+26     	; 0xb68 <auto_wash+0x40>
		{
			loading_rot = 7;
     b4e:	87 e0       	ldi	r24, 0x07	; 7
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     b56:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
			select_wash_mode = FAST_WASH;
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     b62:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			break;
     b66:	08 95       	ret
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     b68:	67 e0       	ldi	r22, 0x07	; 7
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	b1 da       	rcall	.-2718   	; 0xd4 <get_button>
     b72:	89 2b       	or	r24, r25
     b74:	39 f0       	breq	.+14     	; 0xb84 <auto_wash+0x5c>
		{
			select_wash_mode = 4;
     b76:	84 e0       	ldi	r24, 0x04	; 4
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     b7e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			break;
     b82:	08 95       	ret
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     b84:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <fnd_refreshrate>
     b88:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <fnd_refreshrate+0x1>
     b8c:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <fnd_refreshrate+0x2>
     b90:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <fnd_refreshrate+0x3>
     b94:	02 97       	sbiw	r24, 0x02	; 2
     b96:	a1 05       	cpc	r26, r1
     b98:	b1 05       	cpc	r27, r1
     b9a:	90 f2       	brcs	.-92     	; 0xb40 <auto_wash+0x18>
		{
			fnd_refreshrate = 0;
     b9c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate>
     ba0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x1>
     ba4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <fnd_refreshrate+0x2>
     ba8:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <fnd_refreshrate+0x3>
			fnd_ment_display(&loading_rot, 10);
     bac:	6a e0       	ldi	r22, 0x0A	; 10
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	88 e1       	ldi	r24, 0x18	; 24
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	e1 dd       	rcall	.-1086   	; 0x778 <fnd_ment_display>
     bb6:	c4 cf       	rjmp	.-120    	; 0xb40 <auto_wash+0x18>

00000bb8 <fast_wash>:
}

void fast_wash(int *fast_ment_on) // 쾌속 세탁
{
	/**fast_ment_on = 7;*/
	sec_count = 3;
     bb8:	83 e0       	ldi	r24, 0x03	; 3
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a0 e0       	ldi	r26, 0x00	; 0
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
     bc4:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
     bc8:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
     bcc:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>
	
	while (1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 다음 탈수 세탁으로 이동
     bd0:	64 e0       	ldi	r22, 0x04	; 4
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	7d da       	rcall	.-2822   	; 0xd4 <get_button>
     bda:	89 2b       	or	r24, r25
     bdc:	69 f0       	breq	.+26     	; 0xbf8 <fast_wash+0x40>
		{
			loading_rot = 8;
     bde:	88 e0       	ldi	r24, 0x08	; 8
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     be6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
			select_wash_mode = ONLY_SPINDRY;
     bea:	83 e0       	ldi	r24, 0x03	; 3
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     bf2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			break;
     bf6:	08 95       	ret
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     bf8:	67 e0       	ldi	r22, 0x07	; 7
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	69 da       	rcall	.-2862   	; 0xd4 <get_button>
     c02:	89 2b       	or	r24, r25
     c04:	39 f0       	breq	.+14     	; 0xc14 <fast_wash+0x5c>
		{
			select_wash_mode = 4;
     c06:	84 e0       	ldi	r24, 0x04	; 4
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     c0e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			break;
     c12:	08 95       	ret
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     c14:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <fnd_refreshrate>
     c18:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <fnd_refreshrate+0x1>
     c1c:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <fnd_refreshrate+0x2>
     c20:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <fnd_refreshrate+0x3>
     c24:	02 97       	sbiw	r24, 0x02	; 2
     c26:	a1 05       	cpc	r26, r1
     c28:	b1 05       	cpc	r27, r1
     c2a:	90 f2       	brcs	.-92     	; 0xbd0 <fast_wash+0x18>
		{
			fnd_refreshrate = 0;
     c2c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate>
     c30:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x1>
     c34:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <fnd_refreshrate+0x2>
     c38:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <fnd_refreshrate+0x3>
			fnd_ment_display(&loading_rot, 10);
     c3c:	6a e0       	ldi	r22, 0x0A	; 10
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	88 e1       	ldi	r24, 0x18	; 24
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	99 dd       	rcall	.-1230   	; 0x778 <fnd_ment_display>
     c46:	c4 cf       	rjmp	.-120    	; 0xbd0 <fast_wash+0x18>

00000c48 <only_spindry>:
	}
}

void only_spindry(int *dry_ment_on) // 탈수
{
	sec_count = 4;
     c48:	84 e0       	ldi	r24, 0x04	; 4
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	a0 e0       	ldi	r26, 0x00	; 0
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
     c54:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
     c58:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
     c5c:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>
	/**dry_ment_on = 8;*/
	
	while (1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 다시 수동 세탁으로 이동
     c60:	64 e0       	ldi	r22, 0x04	; 4
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	35 da       	rcall	.-2966   	; 0xd4 <get_button>
     c6a:	89 2b       	or	r24, r25
     c6c:	59 f0       	breq	.+22     	; 0xc84 <only_spindry+0x3c>
		{
			loading_rot = 5;
     c6e:	85 e0       	ldi	r24, 0x05	; 5
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     c76:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
			select_wash_mode = CUSTOM_WASH;
     c7a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <select_wash_mode+0x1>
     c7e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <select_wash_mode>
			break;
     c82:	08 95       	ret
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     c84:	67 e0       	ldi	r22, 0x07	; 7
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	23 da       	rcall	.-3002   	; 0xd4 <get_button>
     c8e:	89 2b       	or	r24, r25
     c90:	39 f0       	breq	.+14     	; 0xca0 <only_spindry+0x58>
		{
			select_wash_mode = 4;
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     c9a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			break;
     c9e:	08 95       	ret
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     ca0:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <fnd_refreshrate>
     ca4:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <fnd_refreshrate+0x1>
     ca8:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <fnd_refreshrate+0x2>
     cac:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <fnd_refreshrate+0x3>
     cb0:	02 97       	sbiw	r24, 0x02	; 2
     cb2:	a1 05       	cpc	r26, r1
     cb4:	b1 05       	cpc	r27, r1
     cb6:	a0 f2       	brcs	.-88     	; 0xc60 <only_spindry+0x18>
		{
			fnd_refreshrate = 0;
     cb8:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate>
     cbc:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x1>
     cc0:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <fnd_refreshrate+0x2>
     cc4:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <fnd_refreshrate+0x3>
			fnd_ment_display(&loading_rot, 10);
     cc8:	6a e0       	ldi	r22, 0x0A	; 10
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	88 e1       	ldi	r24, 0x18	; 24
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	53 dd       	rcall	.-1370   	; 0x778 <fnd_ment_display>
     cd2:	c6 cf       	rjmp	.-116    	; 0xc60 <only_spindry+0x18>

00000cd4 <nextstep_pause_wash>:
		PORTA = *led_pause_count;
	}
}

void nextstep_pause_wash()
{
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	00 d0       	rcall	.+0      	; 0xcde <nextstep_pause_wash+0xa>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	int wait_for_three_sec = 1;
	loading_rot = 9;
     ce2:	89 e0       	ldi	r24, 0x09	; 9
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     cea:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
	int prerpare_ment = 0;
     cee:	1a 82       	std	Y+2, r1	; 0x02
     cf0:	19 82       	std	Y+1, r1	; 0x01
	}
}

void nextstep_pause_wash()
{
	int wait_for_three_sec = 1;
     cf2:	01 e0       	ldi	r16, 0x01	; 1
     cf4:	10 e0       	ldi	r17, 0x00	; 0
	loading_rot = 9;
	int prerpare_ment = 0;
	
	while (wait_for_three_sec)
     cf6:	36 c0       	rjmp	.+108    	; 0xd64 <nextstep_pause_wash+0x90>
	{
		OCR3C = 0;
     cf8:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     cfc:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
		if(msec_count >= 5000)
     d00:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <msec_count>
     d04:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <msec_count+0x1>
     d08:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <msec_count+0x2>
     d0c:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <msec_count+0x3>
     d10:	88 38       	cpi	r24, 0x88	; 136
     d12:	93 41       	sbci	r25, 0x13	; 19
     d14:	a1 05       	cpc	r26, r1
     d16:	b1 05       	cpc	r27, r1
     d18:	10 f0       	brcs	.+4      	; 0xd1e <nextstep_pause_wash+0x4a>
		{
			wait_for_three_sec = 0;
     d1a:	00 e0       	ldi	r16, 0x00	; 0
     d1c:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (loading_clock_change >= 300) // 모드가 바뀔 때 prepare 글자를 출력함
     d1e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <loading_clock_change>
     d22:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <loading_clock_change+0x1>
     d26:	a0 91 96 01 	lds	r26, 0x0196	; 0x800196 <loading_clock_change+0x2>
     d2a:	b0 91 97 01 	lds	r27, 0x0197	; 0x800197 <loading_clock_change+0x3>
     d2e:	8c 32       	cpi	r24, 0x2C	; 44
     d30:	91 40       	sbci	r25, 0x01	; 1
     d32:	a1 05       	cpc	r26, r1
     d34:	b1 05       	cpc	r27, r1
     d36:	80 f0       	brcs	.+32     	; 0xd58 <nextstep_pause_wash+0x84>
		{
			loading_clock_change = 0;
     d38:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <loading_clock_change>
     d3c:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <loading_clock_change+0x1>
     d40:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <loading_clock_change+0x2>
     d44:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <loading_clock_change+0x3>
			prerpare_ment++;
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	01 96       	adiw	r24, 0x01	; 1
			prerpare_ment %= 9;
     d4e:	69 e0       	ldi	r22, 0x09	; 9
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	c7 d7       	rcall	.+3982   	; 0x1ce2 <__divmodhi4>
     d54:	9a 83       	std	Y+2, r25	; 0x02
     d56:	89 83       	std	Y+1, r24	; 0x01
		}
		fnd_ment_display(&loading_rot, &prerpare_ment);
     d58:	be 01       	movw	r22, r28
     d5a:	6f 5f       	subi	r22, 0xFF	; 255
     d5c:	7f 4f       	sbci	r23, 0xFF	; 255
     d5e:	88 e1       	ldi	r24, 0x18	; 24
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	0a dd       	rcall	.-1516   	; 0x778 <fnd_ment_display>
{
	int wait_for_three_sec = 1;
	loading_rot = 9;
	int prerpare_ment = 0;
	
	while (wait_for_three_sec)
     d64:	01 15       	cp	r16, r1
     d66:	11 05       	cpc	r17, r1
     d68:	39 f6       	brne	.-114    	; 0xcf8 <nextstep_pause_wash+0x24>
			prerpare_ment++;
			prerpare_ment %= 9;
		}
		fnd_ment_display(&loading_rot, &prerpare_ment);
	}
}
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	08 95       	ret

00000d78 <end_display>:

void end_display() // end 화면
{
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
	int end_toggle = 1;
	PORTA = 0;
     d7c:	1b ba       	out	0x1b, r1	; 27
	loading_rot = 4; // end fnd display
     d7e:	84 e0       	ldi	r24, 0x04	; 4
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     d86:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
	}
}

void end_display() // end 화면
{
	int end_toggle = 1;
     d8a:	c1 e0       	ldi	r28, 0x01	; 1
     d8c:	d0 e0       	ldi	r29, 0x00	; 0
	PORTA = 0;
	loading_rot = 4; // end fnd display
	while (end_toggle)
     d8e:	7b c0       	rjmp	.+246    	; 0xe86 <end_display+0x10e>
	{
		if (get_button(BUTTON0, BUTTON0PIN) || get_button(BUTTON1, BUTTON1PIN) || get_button(BUTTON2, BUTTON2PIN) || get_button(BUTTON3, BUTTON3PIN)) // 아무 버튼 누르면 다시 메인 화면으로
     d90:	64 e0       	ldi	r22, 0x04	; 4
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	9d d9       	rcall	.-3270   	; 0xd4 <get_button>
     d9a:	89 2b       	or	r24, r25
     d9c:	a9 f4       	brne	.+42     	; 0xdc8 <end_display+0x50>
     d9e:	65 e0       	ldi	r22, 0x05	; 5
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	96 d9       	rcall	.-3284   	; 0xd4 <get_button>
     da8:	89 2b       	or	r24, r25
     daa:	71 f4       	brne	.+28     	; 0xdc8 <end_display+0x50>
     dac:	66 e0       	ldi	r22, 0x06	; 6
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	8f d9       	rcall	.-3298   	; 0xd4 <get_button>
     db6:	89 2b       	or	r24, r25
     db8:	39 f4       	brne	.+14     	; 0xdc8 <end_display+0x50>
     dba:	67 e0       	ldi	r22, 0x07	; 7
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	83 e0       	ldi	r24, 0x03	; 3
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	88 d9       	rcall	.-3312   	; 0xd4 <get_button>
     dc4:	89 2b       	or	r24, r25
     dc6:	91 f0       	breq	.+36     	; 0xdec <end_display+0x74>
		{
			select_wash_mode = MAIN_SCREEN;
     dc8:	84 e0       	ldi	r24, 0x04	; 4
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     dd0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			end_toggle = !end_toggle;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	cd 2b       	or	r28, r29
     dd8:	09 f0       	breq	.+2      	; 0xddc <end_display+0x64>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	c8 2f       	mov	r28, r24
     dde:	d0 e0       	ldi	r29, 0x00	; 0
			custom_wash_mode = 5; // 끝
     de0:	85 e0       	ldi	r24, 0x05	; 5
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     de8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     dec:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <fnd_refreshrate>
     df0:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <fnd_refreshrate+0x1>
     df4:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <fnd_refreshrate+0x2>
     df8:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <fnd_refreshrate+0x3>
     dfc:	02 97       	sbiw	r24, 0x02	; 2
     dfe:	a1 05       	cpc	r26, r1
     e00:	b1 05       	cpc	r27, r1
     e02:	68 f0       	brcs	.+26     	; 0xe1e <end_display+0xa6>
		{
			fnd_refreshrate = 0;
     e04:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate>
     e08:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x1>
     e0c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <fnd_refreshrate+0x2>
     e10:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <fnd_refreshrate+0x3>
			fnd_ment_display(&loading_rot,10); // end 보여주기
     e14:	6a e0       	ldi	r22, 0x0A	; 10
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	88 e1       	ldi	r24, 0x18	; 24
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	ad dc       	rcall	.-1702   	; 0x778 <fnd_ment_display>
		}
		if (msec_count <= 500)
     e1e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <msec_count>
     e22:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <msec_count+0x1>
     e26:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <msec_count+0x2>
     e2a:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <msec_count+0x3>
     e2e:	85 3f       	cpi	r24, 0xF5	; 245
     e30:	91 40       	sbci	r25, 0x01	; 1
     e32:	a1 05       	cpc	r26, r1
     e34:	b1 05       	cpc	r27, r1
     e36:	18 f4       	brcc	.+6      	; 0xe3e <end_display+0xc6>
		{
			PORTA = 0b01010101;
     e38:	85 e5       	ldi	r24, 0x55	; 85
     e3a:	8b bb       	out	0x1b, r24	; 27
     e3c:	24 c0       	rjmp	.+72     	; 0xe86 <end_display+0x10e>
		}
		else if (msec_count > 500)
     e3e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <msec_count>
     e42:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <msec_count+0x1>
     e46:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <msec_count+0x2>
     e4a:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <msec_count+0x3>
     e4e:	85 3f       	cpi	r24, 0xF5	; 245
     e50:	91 40       	sbci	r25, 0x01	; 1
     e52:	a1 05       	cpc	r26, r1
     e54:	b1 05       	cpc	r27, r1
     e56:	b8 f0       	brcs	.+46     	; 0xe86 <end_display+0x10e>
		{
			PORTA = 0b10101010;
     e58:	8a ea       	ldi	r24, 0xAA	; 170
     e5a:	8b bb       	out	0x1b, r24	; 27
			if (msec_count >= 1000)
     e5c:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <msec_count>
     e60:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <msec_count+0x1>
     e64:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <msec_count+0x2>
     e68:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <msec_count+0x3>
     e6c:	88 3e       	cpi	r24, 0xE8	; 232
     e6e:	93 40       	sbci	r25, 0x03	; 3
     e70:	a1 05       	cpc	r26, r1
     e72:	b1 05       	cpc	r27, r1
     e74:	40 f0       	brcs	.+16     	; 0xe86 <end_display+0x10e>
			{
				msec_count = 0;
     e76:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <msec_count>
     e7a:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <msec_count+0x1>
     e7e:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <msec_count+0x2>
     e82:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <msec_count+0x3>
void end_display() // end 화면
{
	int end_toggle = 1;
	PORTA = 0;
	loading_rot = 4; // end fnd display
	while (end_toggle)
     e86:	20 97       	sbiw	r28, 0x00	; 0
     e88:	09 f0       	breq	.+2      	; 0xe8c <end_display+0x114>
     e8a:	82 cf       	rjmp	.-252    	; 0xd90 <end_display+0x18>
			{
				msec_count = 0;
			}
		}
	}
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <fnd_loading_display>:
	digit_select %= 4; //다음 표시할 자리수 선택
}


void fnd_loading_display(int *forward_state_count, int *forward_state) // 진행 로딩 상황 표시
{
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	27 97       	sbiw	r28, 0x07	; 7
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	9c 01       	movw	r18, r24
	int a, b, c, d;
	
	uint8_t fnd_loading_font[] =
     eb4:	97 e0       	ldi	r25, 0x07	; 7
     eb6:	e6 e6       	ldi	r30, 0x66	; 102
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	de 01       	movw	r26, r28
     ebc:	11 96       	adiw	r26, 0x01	; 1
     ebe:	01 90       	ld	r0, Z+
     ec0:	0d 92       	st	X+, r0
     ec2:	9a 95       	dec	r25
     ec4:	e1 f7       	brne	.-8      	; 0xebe <fnd_loading_display+0x2c>
	{
		~0xce, ~0xf8, ~0xc7, ~0xf1, ~0xfe, ~0xf7, ~0xf6 // 0~6
		//  |-     -|    |_     _|     -      _     -,_   
	};
	
	if (*forward_state)
     ec6:	fb 01       	movw	r30, r22
     ec8:	80 81       	ld	r24, Z
     eca:	91 81       	ldd	r25, Z+1	; 0x01
     ecc:	89 2b       	or	r24, r25
     ece:	79 f0       	breq	.+30     	; 0xeee <fnd_loading_display+0x5c>
	{
		if (*forward_state_count == 0)
     ed0:	f9 01       	movw	r30, r18
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	e9 f0       	breq	.+58     	; 0xf14 <fnd_loading_display+0x82>
		{
			d = 0; b = 5, c = 4, a = 3;	// loading 1
		}
		else if (*forward_state_count == 1)
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	91 05       	cpc	r25, r1
     ede:	49 f1       	breq	.+82     	; 0xf32 <fnd_loading_display+0xa0>
		{
			d = 2; b = 4, c = 5, a = 1; // loading 2
		}
		else if (*forward_state_count == 2)
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	91 05       	cpc	r25, r1
     ee4:	91 f1       	breq	.+100    	; 0xf4a <fnd_loading_display+0xb8>
		{
			d = 5; b = 6, c = 6, a = 4; // loaing 3
		}
		else if (*forward_state_count == 3)
     ee6:	03 97       	sbiw	r24, 0x03	; 3
     ee8:	09 f0       	breq	.+2      	; 0xeec <fnd_loading_display+0x5a>
     eea:	83 c0       	rjmp	.+262    	; 0xff2 <fnd_loading_display+0x160>
     eec:	3c c0       	rjmp	.+120    	; 0xf66 <fnd_loading_display+0xd4>
			d = 4; b = 6, c = 6, a = 5; // loaing 4
		}
	}
	else
	{
		if (*forward_state_count == 3)
     eee:	f9 01       	movw	r30, r18
     ef0:	80 81       	ld	r24, Z
     ef2:	91 81       	ldd	r25, Z+1	; 0x01
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	91 05       	cpc	r25, r1
     ef8:	09 f4       	brne	.+2      	; 0xefc <fnd_loading_display+0x6a>
     efa:	44 c0       	rjmp	.+136    	; 0xf84 <fnd_loading_display+0xf2>
		{
			d = 0; b = 5, c = 4, a = 3;	// loading 1
		}
		else if (*forward_state_count == 2)
     efc:	82 30       	cpi	r24, 0x02	; 2
     efe:	91 05       	cpc	r25, r1
     f00:	09 f4       	brne	.+2      	; 0xf04 <fnd_loading_display+0x72>
     f02:	4f c0       	rjmp	.+158    	; 0xfa2 <fnd_loading_display+0x110>
		{
			d = 2; b = 4, c = 5, a = 1; // loading 2
		}
		else if (*forward_state_count == 1)
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	91 05       	cpc	r25, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <fnd_loading_display+0x7a>
     f0a:	57 c0       	rjmp	.+174    	; 0xfba <fnd_loading_display+0x128>
		{
			d = 5; b = 6, c = 6, a = 4; // loaing 3
		}
		else if (*forward_state_count == 0)
     f0c:	89 2b       	or	r24, r25
     f0e:	09 f4       	brne	.+2      	; 0xf12 <fnd_loading_display+0x80>
     f10:	62 c0       	rjmp	.+196    	; 0xfd6 <fnd_loading_display+0x144>
     f12:	6f c0       	rjmp	.+222    	; 0xff2 <fnd_loading_display+0x160>
	
	if (*forward_state)
	{
		if (*forward_state_count == 0)
		{
			d = 0; b = 5, c = 4, a = 3;	// loading 1
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	04 e0       	ldi	r16, 0x04	; 4
     f1a:	10 e0       	ldi	r17, 0x00	; 0
     f1c:	0f 2e       	mov	r0, r31
     f1e:	f5 e0       	ldi	r31, 0x05	; 5
     f20:	ef 2e       	mov	r14, r31
     f22:	f1 2c       	mov	r15, r1
     f24:	f0 2d       	mov	r31, r0
     f26:	0f 2e       	mov	r0, r31
     f28:	f3 e0       	ldi	r31, 0x03	; 3
     f2a:	cf 2e       	mov	r12, r31
     f2c:	d1 2c       	mov	r13, r1
     f2e:	f0 2d       	mov	r31, r0
     f30:	60 c0       	rjmp	.+192    	; 0xff2 <fnd_loading_display+0x160>
		}
		else if (*forward_state_count == 1)
		{
			d = 2; b = 4, c = 5, a = 1; // loading 2
     f32:	42 e0       	ldi	r20, 0x02	; 2
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	05 e0       	ldi	r16, 0x05	; 5
     f38:	10 e0       	ldi	r17, 0x00	; 0
     f3a:	68 94       	set
     f3c:	ee 24       	eor	r14, r14
     f3e:	e2 f8       	bld	r14, 2
     f40:	f1 2c       	mov	r15, r1
     f42:	cc 24       	eor	r12, r12
     f44:	c3 94       	inc	r12
     f46:	d1 2c       	mov	r13, r1
     f48:	54 c0       	rjmp	.+168    	; 0xff2 <fnd_loading_display+0x160>
		}
		else if (*forward_state_count == 2)
		{
			d = 5; b = 6, c = 6, a = 4; // loaing 3
     f4a:	45 e0       	ldi	r20, 0x05	; 5
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	06 e0       	ldi	r16, 0x06	; 6
     f50:	10 e0       	ldi	r17, 0x00	; 0
     f52:	0f 2e       	mov	r0, r31
     f54:	f6 e0       	ldi	r31, 0x06	; 6
     f56:	ef 2e       	mov	r14, r31
     f58:	f1 2c       	mov	r15, r1
     f5a:	f0 2d       	mov	r31, r0
     f5c:	68 94       	set
     f5e:	cc 24       	eor	r12, r12
     f60:	c2 f8       	bld	r12, 2
     f62:	d1 2c       	mov	r13, r1
     f64:	46 c0       	rjmp	.+140    	; 0xff2 <fnd_loading_display+0x160>
		}
		else if (*forward_state_count == 3)
		{
			d = 4; b = 6, c = 6, a = 5; // loaing 4
     f66:	44 e0       	ldi	r20, 0x04	; 4
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	06 e0       	ldi	r16, 0x06	; 6
     f6c:	10 e0       	ldi	r17, 0x00	; 0
     f6e:	0f 2e       	mov	r0, r31
     f70:	f6 e0       	ldi	r31, 0x06	; 6
     f72:	ef 2e       	mov	r14, r31
     f74:	f1 2c       	mov	r15, r1
     f76:	f0 2d       	mov	r31, r0
     f78:	0f 2e       	mov	r0, r31
     f7a:	f5 e0       	ldi	r31, 0x05	; 5
     f7c:	cf 2e       	mov	r12, r31
     f7e:	d1 2c       	mov	r13, r1
     f80:	f0 2d       	mov	r31, r0
     f82:	37 c0       	rjmp	.+110    	; 0xff2 <fnd_loading_display+0x160>
	}
	else
	{
		if (*forward_state_count == 3)
		{
			d = 0; b = 5, c = 4, a = 3;	// loading 1
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	04 e0       	ldi	r16, 0x04	; 4
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	0f 2e       	mov	r0, r31
     f8e:	f5 e0       	ldi	r31, 0x05	; 5
     f90:	ef 2e       	mov	r14, r31
     f92:	f1 2c       	mov	r15, r1
     f94:	f0 2d       	mov	r31, r0
     f96:	0f 2e       	mov	r0, r31
     f98:	f3 e0       	ldi	r31, 0x03	; 3
     f9a:	cf 2e       	mov	r12, r31
     f9c:	d1 2c       	mov	r13, r1
     f9e:	f0 2d       	mov	r31, r0
     fa0:	28 c0       	rjmp	.+80     	; 0xff2 <fnd_loading_display+0x160>
		}
		else if (*forward_state_count == 2)
		{
			d = 2; b = 4, c = 5, a = 1; // loading 2
     fa2:	42 e0       	ldi	r20, 0x02	; 2
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	05 e0       	ldi	r16, 0x05	; 5
     fa8:	10 e0       	ldi	r17, 0x00	; 0
     faa:	68 94       	set
     fac:	ee 24       	eor	r14, r14
     fae:	e2 f8       	bld	r14, 2
     fb0:	f1 2c       	mov	r15, r1
     fb2:	cc 24       	eor	r12, r12
     fb4:	c3 94       	inc	r12
     fb6:	d1 2c       	mov	r13, r1
     fb8:	1c c0       	rjmp	.+56     	; 0xff2 <fnd_loading_display+0x160>
		}
		else if (*forward_state_count == 1)
		{
			d = 5; b = 6, c = 6, a = 4; // loaing 3
     fba:	45 e0       	ldi	r20, 0x05	; 5
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	06 e0       	ldi	r16, 0x06	; 6
     fc0:	10 e0       	ldi	r17, 0x00	; 0
     fc2:	0f 2e       	mov	r0, r31
     fc4:	f6 e0       	ldi	r31, 0x06	; 6
     fc6:	ef 2e       	mov	r14, r31
     fc8:	f1 2c       	mov	r15, r1
     fca:	f0 2d       	mov	r31, r0
     fcc:	68 94       	set
     fce:	cc 24       	eor	r12, r12
     fd0:	c2 f8       	bld	r12, 2
     fd2:	d1 2c       	mov	r13, r1
     fd4:	0e c0       	rjmp	.+28     	; 0xff2 <fnd_loading_display+0x160>
		}
		else if (*forward_state_count == 0)
		{
			d = 4; b = 6, c = 6, a = 5; // loaing 4
     fd6:	44 e0       	ldi	r20, 0x04	; 4
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	06 e0       	ldi	r16, 0x06	; 6
     fdc:	10 e0       	ldi	r17, 0x00	; 0
     fde:	0f 2e       	mov	r0, r31
     fe0:	f6 e0       	ldi	r31, 0x06	; 6
     fe2:	ef 2e       	mov	r14, r31
     fe4:	f1 2c       	mov	r15, r1
     fe6:	f0 2d       	mov	r31, r0
     fe8:	0f 2e       	mov	r0, r31
     fea:	f5 e0       	ldi	r31, 0x05	; 5
     fec:	cf 2e       	mov	r12, r31
     fee:	d1 2c       	mov	r13, r1
     ff0:	f0 2d       	mov	r31, r0
		}
	}
	
	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     ff2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <digit_select.1892>
     ff6:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <digit_select.1892+0x1>
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	91 05       	cpc	r25, r1
     ffe:	a9 f0       	breq	.+42     	; 0x102a <__DATA_REGION_LENGTH__+0x2a>
    1000:	1c f4       	brge	.+6      	; 0x1008 <__DATA_REGION_LENGTH__+0x8>
    1002:	89 2b       	or	r24, r25
    1004:	39 f0       	breq	.+14     	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
    1006:	31 c0       	rjmp	.+98     	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	91 05       	cpc	r25, r1
    100c:	c9 f0       	breq	.+50     	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
    100e:	03 97       	sbiw	r24, 0x03	; 3
    1010:	11 f1       	breq	.+68     	; 0x1056 <__DATA_REGION_LENGTH__+0x56>
    1012:	2b c0       	rjmp	.+86     	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
    1014:	8f e7       	ldi	r24, 0x7F	; 127
    1016:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[a];
    1018:	e1 e0       	ldi	r30, 0x01	; 1
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 0f       	add	r30, r28
    101e:	fd 1f       	adc	r31, r29
    1020:	ec 0d       	add	r30, r12
    1022:	fd 1d       	adc	r31, r13
    1024:	80 81       	ld	r24, Z
    1026:	85 bb       	out	0x15, r24	; 21
		break;
    1028:	20 c0       	rjmp	.+64     	; 0x106a <__DATA_REGION_LENGTH__+0x6a>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
    102a:	8f eb       	ldi	r24, 0xBF	; 191
    102c:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[b];
    102e:	e1 e0       	ldi	r30, 0x01	; 1
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	ec 0f       	add	r30, r28
    1034:	fd 1f       	adc	r31, r29
    1036:	ee 0d       	add	r30, r14
    1038:	ff 1d       	adc	r31, r15
    103a:	80 81       	ld	r24, Z
    103c:	85 bb       	out	0x15, r24	; 21
		break;
    103e:	15 c0       	rjmp	.+42     	; 0x106a <__DATA_REGION_LENGTH__+0x6a>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
    1040:	8f ed       	ldi	r24, 0xDF	; 223
    1042:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[c];
    1044:	e1 e0       	ldi	r30, 0x01	; 1
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	ec 0f       	add	r30, r28
    104a:	fd 1f       	adc	r31, r29
    104c:	e0 0f       	add	r30, r16
    104e:	f1 1f       	adc	r31, r17
    1050:	80 81       	ld	r24, Z
    1052:	85 bb       	out	0x15, r24	; 21
		break;
    1054:	0a c0       	rjmp	.+20     	; 0x106a <__DATA_REGION_LENGTH__+0x6a>

		case 3 :
		FND_DIGIT_PORT = ~0x10;
    1056:	8f ee       	ldi	r24, 0xEF	; 239
    1058:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[d];
    105a:	e1 e0       	ldi	r30, 0x01	; 1
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	ec 0f       	add	r30, r28
    1060:	fd 1f       	adc	r31, r29
    1062:	e4 0f       	add	r30, r20
    1064:	f5 1f       	adc	r31, r21
    1066:	80 81       	ld	r24, Z
    1068:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
    106a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <digit_select.1892>
    106e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <digit_select.1892+0x1>
    1072:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
    1074:	83 70       	andi	r24, 0x03	; 3
    1076:	90 78       	andi	r25, 0x80	; 128
    1078:	99 23       	and	r25, r25
    107a:	24 f4       	brge	.+8      	; 0x1084 <__DATA_REGION_LENGTH__+0x84>
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	8c 6f       	ori	r24, 0xFC	; 252
    1080:	9f 6f       	ori	r25, 0xFF	; 255
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <digit_select.1892+0x1>
    1088:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <digit_select.1892>
}
    108c:	27 96       	adiw	r28, 0x07	; 7
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
    10a8:	08 95       	ret

000010aa <custom_wash_start>:
	}
}


void custom_wash_start(void)
{
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	28 97       	sbiw	r28, 0x08	; 8
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
	int return_enable = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9a 83       	std	Y+2, r25	; 0x02
    10c8:	89 83       	std	Y+1, r24	; 0x01
	int led_pwm_count; // LED 몇개 킬건지 정하는 변수
	int forward_state = 0;
    10ca:	1e 82       	std	Y+6, r1	; 0x06
    10cc:	1d 82       	std	Y+5, r1	; 0x05
	int spin_forward_count = 0;
    10ce:	18 86       	std	Y+8, r1	; 0x08
    10d0:	1f 82       	std	Y+7, r1	; 0x07
	loading_rot = 0;
    10d2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <loading_rot+0x1>
    10d6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <loading_rot>
	
	sec_count = total_wash_time;
    10da:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <total_wash_time>
    10de:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <total_wash_time+0x1>
    10e2:	09 2e       	mov	r0, r25
    10e4:	00 0c       	add	r0, r0
    10e6:	aa 0b       	sbc	r26, r26
    10e8:	bb 0b       	sbc	r27, r27
    10ea:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
    10ee:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
    10f2:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
    10f6:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>
	
	while (sec_count > 0 && return_enable == 1)
    10fa:	2e c1       	rjmp	.+604    	; 0x1358 <__stack+0x259>
	{
		washing_machine_fan_control(&spin_strength_val, &forward_state);
    10fc:	be 01       	movw	r22, r28
    10fe:	6b 5f       	subi	r22, 0xFB	; 251
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	86 e8       	ldi	r24, 0x86	; 134
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	55 d2       	rcall	.+1194   	; 0x15b2 <washing_machine_fan_control>
		
		if (msec_count >= 500) // 1초마다 시간 1초씩 감소하고 로딩 회전이 됨.
    1108:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <msec_count>
    110c:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <msec_count+0x1>
    1110:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <msec_count+0x2>
    1114:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <msec_count+0x3>
    1118:	84 3f       	cpi	r24, 0xF4	; 244
    111a:	91 40       	sbci	r25, 0x01	; 1
    111c:	a1 05       	cpc	r26, r1
    111e:	b1 05       	cpc	r27, r1
    1120:	d8 f0       	brcs	.+54     	; 0x1158 <__stack+0x59>
		{
			msec_count = 0;
    1122:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <msec_count>
    1126:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <msec_count+0x1>
    112a:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <msec_count+0x2>
    112e:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <msec_count+0x3>
			sec_count--;
    1132:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <sec_count>
    1136:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <sec_count+0x1>
    113a:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <sec_count+0x2>
    113e:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <sec_count+0x3>
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	a1 09       	sbc	r26, r1
    1146:	b1 09       	sbc	r27, r1
    1148:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <sec_count>
    114c:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <sec_count+0x1>
    1150:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <sec_count+0x2>
    1154:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <sec_count+0x3>
		}
		
		if (loading_refreshrate >= 300)
    1158:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <loading_refreshrate>
    115c:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <loading_refreshrate+0x1>
    1160:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <loading_refreshrate+0x2>
    1164:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <loading_refreshrate+0x3>
    1168:	8c 32       	cpi	r24, 0x2C	; 44
    116a:	91 40       	sbci	r25, 0x01	; 1
    116c:	a1 05       	cpc	r26, r1
    116e:	b1 05       	cpc	r27, r1
    1170:	a8 f0       	brcs	.+42     	; 0x119c <__stack+0x9d>
		{
			loading_refreshrate = 0;
    1172:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <loading_refreshrate>
    1176:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <loading_refreshrate+0x1>
    117a:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <loading_refreshrate+0x2>
    117e:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <loading_refreshrate+0x3>
			spin_forward_count++;
    1182:	8f 81       	ldd	r24, Y+7	; 0x07
    1184:	98 85       	ldd	r25, Y+8	; 0x08
    1186:	01 96       	adiw	r24, 0x01	; 1
			spin_forward_count %= 4;
    1188:	83 70       	andi	r24, 0x03	; 3
    118a:	90 78       	andi	r25, 0x80	; 128
    118c:	99 23       	and	r25, r25
    118e:	24 f4       	brge	.+8      	; 0x1198 <__stack+0x99>
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	8c 6f       	ori	r24, 0xFC	; 252
    1194:	9f 6f       	ori	r25, 0xFF	; 255
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	98 87       	std	Y+8, r25	; 0x08
    119a:	8f 83       	std	Y+7, r24	; 0x07
		}
		
		if (loading_clock_change >= 3000) // 3초마다 로딩창이랑 시간 화면 뜨는거 토글
    119c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <loading_clock_change>
    11a0:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <loading_clock_change+0x1>
    11a4:	a0 91 96 01 	lds	r26, 0x0196	; 0x800196 <loading_clock_change+0x2>
    11a8:	b0 91 97 01 	lds	r27, 0x0197	; 0x800197 <loading_clock_change+0x3>
    11ac:	88 3b       	cpi	r24, 0xB8	; 184
    11ae:	9b 40       	sbci	r25, 0x0B	; 11
    11b0:	a1 05       	cpc	r26, r1
    11b2:	b1 05       	cpc	r27, r1
    11b4:	b0 f0       	brcs	.+44     	; 0x11e2 <__stack+0xe3>
		{
			loading_clock_change = 0;
    11b6:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <loading_clock_change>
    11ba:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <loading_clock_change+0x1>
    11be:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <loading_clock_change+0x2>
    11c2:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <loading_clock_change+0x3>
			loading_clock_change_val = !loading_clock_change_val;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <loading_clock_change_val>
    11ce:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <loading_clock_change_val+0x1>
    11d2:	23 2b       	or	r18, r19
    11d4:	11 f0       	breq	.+4      	; 0x11da <__stack+0xdb>
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <loading_clock_change_val+0x1>
    11de:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <loading_clock_change_val>
		}
		
		/////여기에 일반세탁 60초 + 헹굼 횟수 * 10초 + 탈수 30초로 구분을 해야함
		///// 일반세탁 60초 시작 /////
		if (total_wash_time - sec_count <= 30) // 일반 세탁 30초 경과
    11e2:	40 91 88 01 	lds	r20, 0x0188	; 0x800188 <sec_count>
    11e6:	50 91 89 01 	lds	r21, 0x0189	; 0x800189 <sec_count+0x1>
    11ea:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <sec_count+0x2>
    11ee:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <sec_count+0x3>
    11f2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <total_wash_time>
    11f6:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <total_wash_time+0x1>
    11fa:	09 2e       	mov	r0, r25
    11fc:	00 0c       	add	r0, r0
    11fe:	aa 0b       	sbc	r26, r26
    1200:	bb 0b       	sbc	r27, r27
    1202:	84 1b       	sub	r24, r20
    1204:	95 0b       	sbc	r25, r21
    1206:	a6 0b       	sbc	r26, r22
    1208:	b7 0b       	sbc	r27, r23
    120a:	8f 31       	cpi	r24, 0x1F	; 31
    120c:	91 05       	cpc	r25, r1
    120e:	a1 05       	cpc	r26, r1
    1210:	b1 05       	cpc	r27, r1
    1212:	28 f4       	brcc	.+10     	; 0x121e <__stack+0x11f>
		{
			led_pwm_count = 255; // 0xff
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	9c 83       	std	Y+4, r25	; 0x04
    121a:	8b 83       	std	Y+3, r24	; 0x03
    121c:	3c c0       	rjmp	.+120    	; 0x1296 <__stack+0x197>
		}
		
		else if (total_wash_time - sec_count < 60 && total_wash_time - sec_count > 30) // 일반세탁 60초 완료
    121e:	8c 01       	movw	r16, r24
    1220:	9d 01       	movw	r18, r26
    1222:	0f 51       	subi	r16, 0x1F	; 31
    1224:	11 09       	sbc	r17, r1
    1226:	21 09       	sbc	r18, r1
    1228:	31 09       	sbc	r19, r1
    122a:	0d 31       	cpi	r16, 0x1D	; 29
    122c:	11 05       	cpc	r17, r1
    122e:	21 05       	cpc	r18, r1
    1230:	31 05       	cpc	r19, r1
    1232:	28 f4       	brcc	.+10     	; 0x123e <__stack+0x13f>
		{
			led_pwm_count = 126; // 0x7c
    1234:	8e e7       	ldi	r24, 0x7E	; 126
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	9c 83       	std	Y+4, r25	; 0x04
    123a:	8b 83       	std	Y+3, r24	; 0x03
    123c:	2c c0       	rjmp	.+88     	; 0x1296 <__stack+0x197>
		}
		///// 일반세탁 60초 끝 /////
		else if (total_wash_time - sec_count == 60)
    123e:	8c 33       	cpi	r24, 0x3C	; 60
    1240:	91 05       	cpc	r25, r1
    1242:	a1 05       	cpc	r26, r1
    1244:	b1 05       	cpc	r27, r1
		{
			nextstep_pause_wash(); // 모드가 바뀔 때 5초동안 멈춤
    1246:	11 f4       	brne	.+4      	; 0x124c <__stack+0x14d>
    1248:	45 dd       	rcall	.-1398   	; 0xcd4 <nextstep_pause_wash>
    124a:	25 c0       	rjmp	.+74     	; 0x1296 <__stack+0x197>
		}
		///// 헹굼 시작 /////
		else if (total_wash_time - sec_count > 60 && sec_count > 30) // 헹굼
    124c:	cd 97       	sbiw	r24, 0x3d	; 61
    124e:	a1 05       	cpc	r26, r1
    1250:	b1 05       	cpc	r27, r1
    1252:	50 f0       	brcs	.+20     	; 0x1268 <__stack+0x169>
    1254:	4f 31       	cpi	r20, 0x1F	; 31
    1256:	51 05       	cpc	r21, r1
    1258:	61 05       	cpc	r22, r1
    125a:	71 05       	cpc	r23, r1
    125c:	28 f0       	brcs	.+10     	; 0x1268 <__stack+0x169>
		{
			led_pwm_count = 60; // 0x3c
    125e:	8c e3       	ldi	r24, 0x3C	; 60
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	9c 83       	std	Y+4, r25	; 0x04
    1264:	8b 83       	std	Y+3, r24	; 0x03
    1266:	17 c0       	rjmp	.+46     	; 0x1296 <__stack+0x197>
		}
		///// 헹굼 끝 /////
		else if (sec_count == 30)
    1268:	4e 31       	cpi	r20, 0x1E	; 30
    126a:	51 05       	cpc	r21, r1
    126c:	61 05       	cpc	r22, r1
    126e:	71 05       	cpc	r23, r1
		{
			nextstep_pause_wash(); // 모드가 바뀔 때 5초동안 멈춤
    1270:	11 f4       	brne	.+4      	; 0x1276 <__stack+0x177>
    1272:	30 dd       	rcall	.-1440   	; 0xcd4 <nextstep_pause_wash>
    1274:	10 c0       	rjmp	.+32     	; 0x1296 <__stack+0x197>
		}
		///// 탈수 시작 /////
		else if (sec_count < 30)
    1276:	4e 31       	cpi	r20, 0x1E	; 30
    1278:	51 05       	cpc	r21, r1
    127a:	61 05       	cpc	r22, r1
    127c:	71 05       	cpc	r23, r1
    127e:	28 f4       	brcc	.+10     	; 0x128a <__stack+0x18b>
		{
			led_pwm_count = 24; // 0x18
    1280:	88 e1       	ldi	r24, 0x18	; 24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	9c 83       	std	Y+4, r25	; 0x04
    1286:	8b 83       	std	Y+3, r24	; 0x03
    1288:	06 c0       	rjmp	.+12     	; 0x1296 <__stack+0x197>
		}
		///// 탈수 끝 /////
		else if (sec_count == 0)
    128a:	45 2b       	or	r20, r21
    128c:	46 2b       	or	r20, r22
    128e:	47 2b       	or	r20, r23
    1290:	11 f4       	brne	.+4      	; 0x1296 <__stack+0x197>
		{
			led_pwm_count = 0;
    1292:	1c 82       	std	Y+4, r1	; 0x04
    1294:	1b 82       	std	Y+3, r1	; 0x03
		}
		
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
    1296:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <fnd_refreshrate>
    129a:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <fnd_refreshrate+0x1>
    129e:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <fnd_refreshrate+0x2>
    12a2:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <fnd_refreshrate+0x3>
    12a6:	02 97       	sbiw	r24, 0x02	; 2
    12a8:	a1 05       	cpc	r26, r1
    12aa:	b1 05       	cpc	r27, r1
    12ac:	d0 f0       	brcs	.+52     	; 0x12e2 <__stack+0x1e3>
		{
			fnd_refreshrate = 0;
    12ae:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <fnd_refreshrate>
    12b2:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <fnd_refreshrate+0x1>
    12b6:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <fnd_refreshrate+0x2>
    12ba:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <fnd_refreshrate+0x3>
			make_pwm_led_control(&led_pwm_count);
    12be:	ce 01       	movw	r24, r28
    12c0:	03 96       	adiw	r24, 0x03	; 3
    12c2:	8a d0       	rcall	.+276    	; 0x13d8 <make_pwm_led_control>
			if (loading_clock_change_val)
    12c4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <loading_clock_change_val>
    12c8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <loading_clock_change_val+0x1>
    12cc:	89 2b       	or	r24, r25
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <__stack+0x1d7>
			{
				fnd_display(); // 시간 보여주기
    12d0:	0e 94 bf 00 	call	0x17e	; 0x17e <fnd_display>
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <__stack+0x1e3>
			}
			else
			{
				fnd_loading_display(&spin_forward_count, &forward_state); // 로딩 보여주기
    12d6:	be 01       	movw	r22, r28
    12d8:	6b 5f       	subi	r22, 0xFB	; 251
    12da:	7f 4f       	sbci	r23, 0xFF	; 255
    12dc:	ce 01       	movw	r24, r28
    12de:	07 96       	adiw	r24, 0x07	; 7
			}
		}
		
		ultrasonic_distance_check();   //// 세탁기 문이 닫혔는지 확인하고 닫혀있으면 1을, 열려있으면 0을 반환
    12e0:	d8 dd       	rcall	.-1104   	; 0xe92 <fnd_loading_display>
    12e2:	5e d3       	rcall	.+1724   	; 0x19a0 <ultrasonic_distance_check>
		if (ultrasonic_distance / 58 > 0 && ultrasonic_distance / 58 < 10)
    12e4:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <ultrasonic_distance>
    12e8:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <ultrasonic_distance+0x1>
    12ec:	ca 97       	sbiw	r24, 0x3a	; 58
    12ee:	74 f0       	brlt	.+28     	; 0x130c <__stack+0x20d>
    12f0:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <ultrasonic_distance>
    12f4:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <ultrasonic_distance+0x1>
    12f8:	84 34       	cpi	r24, 0x44	; 68
    12fa:	92 40       	sbci	r25, 0x02	; 2
    12fc:	3c f4       	brge	.+14     	; 0x130c <__stack+0x20d>
		{
			closed_check = 1;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <closed_check+0x1>
    1306:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <closed_check>
    130a:	04 c0       	rjmp	.+8      	; 0x1314 <__stack+0x215>
		}
		else
		{
			closed_check = 0;
    130c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <closed_check+0x1>
    1310:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <closed_check>
		}
		
		///// 일시정지 구현
		
		if (closed_check == 0) // 뚜껑 열리면 일시정지
    1314:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <closed_check>
    1318:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <closed_check+0x1>
    131c:	89 2b       	or	r24, r25
    131e:	41 f4       	brne	.+16     	; 0x1330 <__stack+0x231>
		{
			return_enable = 0;
    1320:	1a 82       	std	Y+2, r1	; 0x02
			pause_wash(&return_enable, &led_pwm_count);
    1322:	19 82       	std	Y+1, r1	; 0x01
    1324:	be 01       	movw	r22, r28
    1326:	6d 5f       	subi	r22, 0xFD	; 253
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	ce 01       	movw	r24, r28
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	a9 d9       	rcall	.-3246   	; 0x682 <pause_wash>
		}
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0 누르면 일시정지
    1330:	64 e0       	ldi	r22, 0x04	; 4
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	0e 94 6a 00 	call	0xd4	; 0xd4 <get_button>
    133c:	89 2b       	or	r24, r25
    133e:	61 f0       	breq	.+24     	; 0x1358 <__stack+0x259>
		{
			closed_check = 0;
    1340:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <closed_check+0x1>
    1344:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <closed_check>
			return_enable = 0;
    1348:	1a 82       	std	Y+2, r1	; 0x02
			pause_wash(&return_enable, &led_pwm_count);
    134a:	19 82       	std	Y+1, r1	; 0x01
    134c:	be 01       	movw	r22, r28
    134e:	6d 5f       	subi	r22, 0xFD	; 253
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	ce 01       	movw	r24, r28
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	95 d9       	rcall	.-3286   	; 0x682 <pause_wash>
	int spin_forward_count = 0;
	loading_rot = 0;
	
	sec_count = total_wash_time;
	
	while (sec_count > 0 && return_enable == 1)
    1358:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <sec_count>
    135c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <sec_count+0x1>
    1360:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <sec_count+0x2>
    1364:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <sec_count+0x3>
    1368:	89 2b       	or	r24, r25
    136a:	8a 2b       	or	r24, r26
    136c:	8b 2b       	or	r24, r27
    136e:	29 f0       	breq	.+10     	; 0x137a <__stack+0x27b>
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	09 f4       	brne	.+2      	; 0x137a <__stack+0x27b>
    1378:	c1 ce       	rjmp	.-638    	; 0x10fc <custom_wash_start+0x52>
			return_enable = 0;
			pause_wash(&return_enable, &led_pwm_count);
		}
		
	}
	OCR3C = 0;
    137a:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    137e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	custom_wash_mode = 4; // end 화면으로 이동
    1382:	84 e0       	ldi	r24, 0x04	; 4
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
    138a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
	sec_count = 0; // 다 끝나면 끝
    138e:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <sec_count>
    1392:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <sec_count+0x1>
    1396:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <sec_count+0x2>
    139a:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <sec_count+0x3>
}
    139e:	28 96       	adiw	r28, 0x08	; 8
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	08 95       	ret

000013b4 <led_on_pwm>:
	}
}

void led_on_pwm(int dim) // dim의 반복을 이용해서 밝기를 제어 (PWM의 HIGH 비율을 제어)
{
	for (int i = 0; i < 256; i++)
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	0a c0       	rjmp	.+20     	; 0x13ce <led_on_pwm+0x1a>
	{
		if (i > dim)
    13ba:	82 17       	cp	r24, r18
    13bc:	93 07       	cpc	r25, r19
    13be:	0c f4       	brge	.+2      	; 0x13c2 <led_on_pwm+0xe>
		{
			PORTA = 0; // duty cycle이 넘어가면 LED all off
    13c0:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13c2:	4a e6       	ldi	r20, 0x6A	; 106
    13c4:	4a 95       	dec	r20
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <led_on_pwm+0x10>
    13c8:	00 c0       	rjmp	.+0      	; 0x13ca <led_on_pwm+0x16>
	}
}

void led_on_pwm(int dim) // dim의 반복을 이용해서 밝기를 제어 (PWM의 HIGH 비율을 제어)
{
	for (int i = 0; i < 256; i++)
    13ca:	2f 5f       	subi	r18, 0xFF	; 255
    13cc:	3f 4f       	sbci	r19, 0xFF	; 255
    13ce:	2f 3f       	cpi	r18, 0xFF	; 255
    13d0:	31 05       	cpc	r19, r1
    13d2:	99 f3       	breq	.-26     	; 0x13ba <led_on_pwm+0x6>
    13d4:	94 f3       	brlt	.-28     	; 0x13ba <led_on_pwm+0x6>
		{
			PORTA = 0; // duty cycle이 넘어가면 LED all off
		}
		_delay_us(20);
	}
    13d6:	08 95       	ret

000013d8 <make_pwm_led_control>:
extern volatile uint32_t msec_count;


void make_pwm_led_control(int *led_pwm_count)
{
	DDRA = 0xff; // led 모두 출력 모드
    13d8:	2f ef       	ldi	r18, 0xFF	; 255
    13da:	2a bb       	out	0x1a, r18	; 26
	PORTA = *led_pwm_count; // 입력받은 카운트 만큼 LED on
    13dc:	fc 01       	movw	r30, r24
    13de:	80 81       	ld	r24, Z
    13e0:	8b bb       	out	0x1b, r24	; 27
	//PORTA = "0xff"; // led all on
	
	// dark --> bright --> dark 순서로 진행되는 코드
	
	led_on_pwm(dim); // 지속적으로 on할거면 이 함수만 while 반복
    13e2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <dim>
    13e6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <dim+0x1>
    13ea:	e4 df       	rcall	.-56     	; 0x13b4 <led_on_pwm>
	dim += direction;
    13ec:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <dim>
    13f0:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <dim+0x1>
    13f4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <direction>
    13f8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <direction+0x1>
    13fc:	82 0f       	add	r24, r18
    13fe:	93 1f       	adc	r25, r19
    1400:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <dim+0x1>
    1404:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <dim>
	
	if (dim == 255) // 다 밝아지면 다시 어두워지도록 함
    1408:	8f 3f       	cpi	r24, 0xFF	; 255
    140a:	91 05       	cpc	r25, r1
    140c:	31 f4       	brne	.+12     	; 0x141a <make_pwm_led_control+0x42>
	{
		direction = -1;
    140e:	2f ef       	ldi	r18, 0xFF	; 255
    1410:	3f ef       	ldi	r19, 0xFF	; 255
    1412:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <direction+0x1>
    1416:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <direction>
	}
	if (dim == 0) // 다 어두워지면 다시 밝아지도록 함
    141a:	89 2b       	or	r24, r25
    141c:	31 f4       	brne	.+12     	; 0x142a <make_pwm_led_control+0x52>
	{
		direction = 1;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <direction+0x1>
    1426:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <direction>
    142a:	08 95       	ret

0000142c <__vector_16>:
extern void buzzer_main();

FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
    142c:	1f 92       	push	r1
    142e:	0f 92       	push	r0
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	0f 92       	push	r0
    1434:	11 24       	eor	r1, r1
    1436:	8f 93       	push	r24
    1438:	9f 93       	push	r25
    143a:	af 93       	push	r26
    143c:	bf 93       	push	r27
	TCNT0=6;
    143e:	86 e0       	ldi	r24, 0x06	; 6
    1440:	82 bf       	out	0x32, r24	; 50
	msec_count++;
    1442:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <msec_count>
    1446:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <msec_count+0x1>
    144a:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <msec_count+0x2>
    144e:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <msec_count+0x3>
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	a1 1d       	adc	r26, r1
    1456:	b1 1d       	adc	r27, r1
    1458:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <msec_count>
    145c:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <msec_count+0x1>
    1460:	a0 93 a2 01 	sts	0x01A2, r26	; 0x8001a2 <msec_count+0x2>
    1464:	b0 93 a3 01 	sts	0x01A3, r27	; 0x8001a3 <msec_count+0x3>
	fnd_refreshrate++;
    1468:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <fnd_refreshrate>
    146c:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <fnd_refreshrate+0x1>
    1470:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <fnd_refreshrate+0x2>
    1474:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <fnd_refreshrate+0x3>
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	a1 1d       	adc	r26, r1
    147c:	b1 1d       	adc	r27, r1
    147e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <fnd_refreshrate>
    1482:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <fnd_refreshrate+0x1>
    1486:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <fnd_refreshrate+0x2>
    148a:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <fnd_refreshrate+0x3>
	check_timer++;
    148e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <check_timer>
    1492:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <check_timer+0x1>
    1496:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <check_timer+0x2>
    149a:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <check_timer+0x3>
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	a1 1d       	adc	r26, r1
    14a2:	b1 1d       	adc	r27, r1
    14a4:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <check_timer>
    14a8:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <check_timer+0x1>
    14ac:	a0 93 9a 01 	sts	0x019A, r26	; 0x80019a <check_timer+0x2>
    14b0:	b0 93 9b 01 	sts	0x019B, r27	; 0x80019b <check_timer+0x3>
	loading_clock_change++;
    14b4:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <loading_clock_change>
    14b8:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <loading_clock_change+0x1>
    14bc:	a0 91 96 01 	lds	r26, 0x0196	; 0x800196 <loading_clock_change+0x2>
    14c0:	b0 91 97 01 	lds	r27, 0x0197	; 0x800197 <loading_clock_change+0x3>
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	a1 1d       	adc	r26, r1
    14c8:	b1 1d       	adc	r27, r1
    14ca:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <loading_clock_change>
    14ce:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <loading_clock_change+0x1>
    14d2:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <loading_clock_change+0x2>
    14d6:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <loading_clock_change+0x3>
	loading_refreshrate++;
    14da:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <loading_refreshrate>
    14de:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <loading_refreshrate+0x1>
    14e2:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <loading_refreshrate+0x2>
    14e6:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <loading_refreshrate+0x3>
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	a1 1d       	adc	r26, r1
    14ee:	b1 1d       	adc	r27, r1
    14f0:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <loading_refreshrate>
    14f4:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <loading_refreshrate+0x1>
    14f8:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <loading_refreshrate+0x2>
    14fc:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <loading_refreshrate+0x3>
	closed_check_timer++;
    1500:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <closed_check_timer>
    1504:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <closed_check_timer+0x1>
    1508:	a0 91 8e 01 	lds	r26, 0x018E	; 0x80018e <closed_check_timer+0x2>
    150c:	b0 91 8f 01 	lds	r27, 0x018F	; 0x80018f <closed_check_timer+0x3>
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	a1 1d       	adc	r26, r1
    1514:	b1 1d       	adc	r27, r1
    1516:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <closed_check_timer>
    151a:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <closed_check_timer+0x1>
    151e:	a0 93 8e 01 	sts	0x018E, r26	; 0x80018e <closed_check_timer+0x2>
    1522:	b0 93 8f 01 	sts	0x018F, r27	; 0x80018f <closed_check_timer+0x3>
}
    1526:	bf 91       	pop	r27
    1528:	af 91       	pop	r26
    152a:	9f 91       	pop	r25
    152c:	8f 91       	pop	r24
    152e:	0f 90       	pop	r0
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	0f 90       	pop	r0
    1534:	1f 90       	pop	r1
    1536:	18 95       	reti

00001538 <init_timer0>:
	}
}

void init_timer0()
{
	TCNT0 = 6;
    1538:	86 e0       	ldi	r24, 0x06	; 6
    153a:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
    153c:	83 b7       	in	r24, 0x33	; 51
    153e:	84 60       	ori	r24, 0x04	; 4
    1540:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
    1542:	87 b7       	in	r24, 0x37	; 55
    1544:	81 60       	ori	r24, 0x01	; 1
    1546:	87 bf       	out	0x37, r24	; 55
    1548:	08 95       	ret

0000154a <main>:
	closed_check_timer++;
}

int main(void)
{
	init_timer0();
    154a:	f6 df       	rcall	.-20     	; 0x1538 <init_timer0>
	init_uart0();
    154c:	00 d1       	rcall	.+512    	; 0x174e <init_uart0>
	init_uart1();
    154e:	92 d1       	rcall	.+804    	; 0x1874 <init_uart1>
    1550:	02 d2       	rcall	.+1028   	; 0x1956 <init_ultrasonic>
	init_ultrasonic();
    1552:	0e 94 66 00 	call	0xcc	; 0xcc <init_button>
	init_button();
    1556:	0c d0       	rcall	.+24     	; 0x1570 <init_timer3_pwm>
	init_timer3_pwm();
    1558:	23 d0       	rcall	.+70     	; 0x15a0 <init_n289n>
    155a:	84 e2       	ldi	r24, 0x24	; 36
	init_n289n();
    155c:	91 e0       	ldi	r25, 0x01	; 1
    155e:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <__iob+0x3>
	
	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
    1562:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__iob+0x2>
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	8a bb       	out	0x1a, r24	; 26
	
	DDRA=0xff;   // led를 출력 모드로
    156a:	78 94       	sei
    156c:	fb d9       	rcall	.-3082   	; 0x964 <fnd_main>
	sei();     // 전역적으로 interrupt 허용
    156e:	ff cf       	rjmp	.-2      	; 0x156e <main+0x24>

00001570 <init_timer3_pwm>:
	
	fnd_main();
    1570:	82 b1       	in	r24, 0x02	; 2
    1572:	88 62       	ori	r24, 0x28	; 40
    1574:	82 b9       	out	0x02, r24	; 2
void init_timer3_pwm(void)
{
	// DDRE |= 1 << 3 | 1 << 4 | 1 << 5; 현재 4번에 초음파가 연결되어 있다.
	DDRE |= 1 << 3 | 1 << 5;
	// 모드 5 : 8비트 고속 pwm    TCCR3A레지스터 WGM30과 TCCR3B레지스터 WGM32를 1로 만든다.
	TCCR3A |= 1 << WGM30;
    1576:	ab e8       	ldi	r26, 0x8B	; 139
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	8c 91       	ld	r24, X
    157c:	81 60       	ori	r24, 0x01	; 1
    157e:	8c 93       	st	X, r24
	TCCR3B |= 1 << WGM32;
    1580:	ea e8       	ldi	r30, 0x8A	; 138
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	88 60       	ori	r24, 0x08	; 8
    1588:	80 83       	st	Z, r24
	// 비반전모드 top : 0x00ff  비교일치값(pwm)지정 : OCR3C
	// TCCR3A레지스터의 COM3C1을 1로 set
	// 비교일치 발생시 OC3C의 출력 핀은 LOw로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR3A |= 1 << COM3C1;
    158a:	8c 91       	ld	r24, X
    158c:	88 60       	ori	r24, 0x08	; 8
    158e:	8c 93       	st	X, r24
	// 분주비 : 64   16,000,000hz -> 250,000hz         TCCR3B의 CS30, CS31을 1로 set
	// 주기 : 1 / 250,000 -> 4us
	// 250000hz에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//			    127개의 펄스를 count하면 소요시간 : 0.51ms
	TCCR3B |= 1 << CS31 | 1 << CS30;
    1590:	80 81       	ld	r24, Z
    1592:	83 60       	ori	r24, 0x03	; 3
    1594:	80 83       	st	Z, r24
	OCR3C = 0; // 비교일치값 (Output Compare Register : PWM 값)
    1596:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    159a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    159e:	08 95       	ret

000015a0 <init_n289n>:
}

void init_n289n(void)
{
	PORTF &= ~(1 << 6 | 1 << 7);  // 6, 7 reset
    15a0:	e2 e6       	ldi	r30, 0x62	; 98
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	8f 73       	andi	r24, 0x3F	; 63
    15a8:	80 83       	st	Z, r24
	PORTF |= 1 << 6; // 정회전
    15aa:	80 81       	ld	r24, Z
    15ac:	80 64       	ori	r24, 0x40	; 64
    15ae:	80 83       	st	Z, r24
    15b0:	08 95       	ret

000015b2 <washing_machine_fan_control>:
}

void washing_machine_fan_control(int *spin_strength , int *forward_state)
{
	OCR3C = *spin_strength;
    15b2:	fc 01       	movw	r30, r24
    15b4:	80 81       	ld	r24, Z
    15b6:	91 81       	ldd	r25, Z+1	; 0x01
    15b8:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    15bc:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	
	if (check_timer >= 4500) // 4.5초마다 방향 바뀜
    15c0:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <check_timer>
    15c4:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <check_timer+0x1>
    15c8:	a0 91 9a 01 	lds	r26, 0x019A	; 0x80019a <check_timer+0x2>
    15cc:	b0 91 9b 01 	lds	r27, 0x019B	; 0x80019b <check_timer+0x3>
    15d0:	84 39       	cpi	r24, 0x94	; 148
    15d2:	91 41       	sbci	r25, 0x11	; 17
    15d4:	a1 05       	cpc	r26, r1
    15d6:	b1 05       	cpc	r27, r1
    15d8:	38 f1       	brcs	.+78     	; 0x1628 <washing_machine_fan_control+0x76>
	{
		PORTF &= ~(1 << 6 | 1 << 7);  // 6, 7 reset
    15da:	e2 e6       	ldi	r30, 0x62	; 98
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	8f 73       	andi	r24, 0x3F	; 63
    15e2:	80 83       	st	Z, r24
		fan_forward = !fan_forward;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <fan_forward>
    15ec:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <fan_forward+0x1>
    15f0:	23 2b       	or	r18, r19
    15f2:	11 f0       	breq	.+4      	; 0x15f8 <washing_machine_fan_control+0x46>
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <fan_forward+0x1>
    15fc:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <fan_forward>
		*forward_state = !*forward_state;
    1600:	fb 01       	movw	r30, r22
    1602:	20 81       	ld	r18, Z
    1604:	31 81       	ldd	r19, Z+1	; 0x01
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	23 2b       	or	r18, r19
    160c:	11 f0       	breq	.+4      	; 0x1612 <washing_machine_fan_control+0x60>
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	fb 01       	movw	r30, r22
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	80 83       	st	Z, r24
		check_timer = 0;
    1618:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <check_timer>
    161c:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <check_timer+0x1>
    1620:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <check_timer+0x2>
    1624:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <check_timer+0x3>
	}
	
	if (fan_forward == 1 /*&& pause_toggle == 0*/)
    1628:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <fan_forward>
    162c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <fan_forward+0x1>
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	91 05       	cpc	r25, r1
    1634:	31 f4       	brne	.+12     	; 0x1642 <washing_machine_fan_control+0x90>
	{
		PORTF |= 1 << 6; // 정회전
    1636:	e2 e6       	ldi	r30, 0x62	; 98
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	80 64       	ori	r24, 0x40	; 64
    163e:	80 83       	st	Z, r24
    1640:	08 95       	ret
	}
	else if (fan_forward == 0 /*&& pause_toggle == 0*/)
    1642:	89 2b       	or	r24, r25
    1644:	29 f4       	brne	.+10     	; 0x1650 <washing_machine_fan_control+0x9e>
	{
		PORTF |= 1 << 7; // 역회전
    1646:	e2 e6       	ldi	r30, 0x62	; 98
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	80 68       	ori	r24, 0x80	; 128
    164e:	80 83       	st	Z, r24
    1650:	08 95       	ret

00001652 <__vector_18>:
    1652:	1f 92       	push	r1
    1654:	0f 92       	push	r0
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	0f 92       	push	r0
    165a:	11 24       	eor	r1, r1
    165c:	0b b6       	in	r0, 0x3b	; 59
    165e:	0f 92       	push	r0
    1660:	2f 93       	push	r18
    1662:	3f 93       	push	r19
    1664:	4f 93       	push	r20
    1666:	5f 93       	push	r21
    1668:	6f 93       	push	r22
    166a:	7f 93       	push	r23
    166c:	8f 93       	push	r24
    166e:	9f 93       	push	r25
    1670:	af 93       	push	r26
    1672:	bf 93       	push	r27
    1674:	ef 93       	push	r30
    1676:	ff 93       	push	r31
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	1f 92       	push	r1
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	8c b1       	in	r24, 0x0c	; 12
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	8d 30       	cpi	r24, 0x0D	; 13
    168a:	19 f0       	breq	.+6      	; 0x1692 <__vector_18+0x40>
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	8a 30       	cpi	r24, 0x0A	; 10
    1690:	61 f5       	brne	.+88     	; 0x16ea <__vector_18+0x98>
    1692:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <rear>
    1696:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <rear+0x1>
    169a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <i.1894>
    169e:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <i.1894+0x1>
    16a2:	40 e5       	ldi	r20, 0x50	; 80
    16a4:	42 9f       	mul	r20, r18
    16a6:	f0 01       	movw	r30, r0
    16a8:	43 9f       	mul	r20, r19
    16aa:	f0 0d       	add	r31, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	e2 55       	subi	r30, 0x52	; 82
    16b0:	fe 4f       	sbci	r31, 0xFE	; 254
    16b2:	e8 0f       	add	r30, r24
    16b4:	f9 1f       	adc	r31, r25
    16b6:	10 82       	st	Z, r1
    16b8:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <i.1894+0x1>
    16bc:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <i.1894>
    16c0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <rear>
    16c4:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <rear+0x1>
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <rear+0x1>
    16ce:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <rear>
    16d2:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <rear>
    16d6:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <rear+0x1>
    16da:	6a e0       	ldi	r22, 0x0A	; 10
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	01 d3       	rcall	.+1538   	; 0x1ce2 <__divmodhi4>
    16e0:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <rear+0x1>
    16e4:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <rear>
    16e8:	1c c0       	rjmp	.+56     	; 0x1722 <__vector_18+0xd0>
    16ea:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <rear>
    16ee:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <rear+0x1>
    16f2:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <i.1894>
    16f6:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <i.1894+0x1>
    16fa:	9c 01       	movw	r18, r24
    16fc:	2f 5f       	subi	r18, 0xFF	; 255
    16fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1700:	30 93 a5 01 	sts	0x01A5, r19	; 0x8001a5 <i.1894+0x1>
    1704:	20 93 a4 01 	sts	0x01A4, r18	; 0x8001a4 <i.1894>
    1708:	49 81       	ldd	r20, Y+1	; 0x01
    170a:	50 e5       	ldi	r21, 0x50	; 80
    170c:	56 9f       	mul	r21, r22
    170e:	90 01       	movw	r18, r0
    1710:	57 9f       	mul	r21, r23
    1712:	30 0d       	add	r19, r0
    1714:	11 24       	eor	r1, r1
    1716:	22 55       	subi	r18, 0x52	; 82
    1718:	3e 4f       	sbci	r19, 0xFE	; 254
    171a:	f9 01       	movw	r30, r18
    171c:	e8 0f       	add	r30, r24
    171e:	f9 1f       	adc	r31, r25
    1720:	40 83       	st	Z, r20
    1722:	0f 90       	pop	r0
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	ff 91       	pop	r31
    172a:	ef 91       	pop	r30
    172c:	bf 91       	pop	r27
    172e:	af 91       	pop	r26
    1730:	9f 91       	pop	r25
    1732:	8f 91       	pop	r24
    1734:	7f 91       	pop	r23
    1736:	6f 91       	pop	r22
    1738:	5f 91       	pop	r21
    173a:	4f 91       	pop	r20
    173c:	3f 91       	pop	r19
    173e:	2f 91       	pop	r18
    1740:	0f 90       	pop	r0
    1742:	0b be       	out	0x3b, r0	; 59
    1744:	0f 90       	pop	r0
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	0f 90       	pop	r0
    174a:	1f 90       	pop	r1
    174c:	18 95       	reti

0000174e <init_uart0>:
    174e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1752:	8f ec       	ldi	r24, 0xCF	; 207
    1754:	89 b9       	out	0x09, r24	; 9
    1756:	8b b1       	in	r24, 0x0b	; 11
    1758:	82 60       	ori	r24, 0x02	; 2
    175a:	8b b9       	out	0x0b, r24	; 11
    175c:	e5 e9       	ldi	r30, 0x95	; 149
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	86 60       	ori	r24, 0x06	; 6
    1764:	80 83       	st	Z, r24
    1766:	8a b1       	in	r24, 0x0a	; 10
    1768:	88 69       	ori	r24, 0x98	; 152
    176a:	8a b9       	out	0x0a, r24	; 10
    176c:	08 95       	ret

0000176e <UART0_transmit>:
    176e:	5d 9b       	sbis	0x0b, 5	; 11
    1770:	fe cf       	rjmp	.-4      	; 0x176e <UART0_transmit>
    1772:	8c b9       	out	0x0c, r24	; 12
    1774:	08 95       	ret

00001776 <__vector_30>:
    1776:	1f 92       	push	r1
    1778:	0f 92       	push	r0
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	0f 92       	push	r0
    177e:	11 24       	eor	r1, r1
    1780:	0b b6       	in	r0, 0x3b	; 59
    1782:	0f 92       	push	r0
    1784:	2f 93       	push	r18
    1786:	3f 93       	push	r19
    1788:	4f 93       	push	r20
    178a:	5f 93       	push	r21
    178c:	6f 93       	push	r22
    178e:	7f 93       	push	r23
    1790:	8f 93       	push	r24
    1792:	9f 93       	push	r25
    1794:	af 93       	push	r26
    1796:	bf 93       	push	r27
    1798:	ef 93       	push	r30
    179a:	ff 93       	push	r31
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	1f 92       	push	r1
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	8d 30       	cpi	r24, 0x0D	; 13
    17b0:	19 f0       	breq	.+6      	; 0x17b8 <__vector_30+0x42>
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	8a 30       	cpi	r24, 0x0A	; 10
    17b6:	61 f5       	brne	.+88     	; 0x1810 <__vector_30+0x9a>
    17b8:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <rear1>
    17bc:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <rear1+0x1>
    17c0:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <i.1896>
    17c4:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <i.1896+0x1>
    17c8:	40 e5       	ldi	r20, 0x50	; 80
    17ca:	42 9f       	mul	r20, r18
    17cc:	f0 01       	movw	r30, r0
    17ce:	43 9f       	mul	r20, r19
    17d0:	f0 0d       	add	r31, r0
    17d2:	11 24       	eor	r1, r1
    17d4:	e2 53       	subi	r30, 0x32	; 50
    17d6:	fb 4f       	sbci	r31, 0xFB	; 251
    17d8:	e8 0f       	add	r30, r24
    17da:	f9 1f       	adc	r31, r25
    17dc:	10 82       	st	Z, r1
    17de:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <i.1896+0x1>
    17e2:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <i.1896>
    17e6:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <rear1>
    17ea:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <rear1+0x1>
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <rear1+0x1>
    17f4:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <rear1>
    17f8:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <rear1>
    17fc:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <rear1+0x1>
    1800:	6a e0       	ldi	r22, 0x0A	; 10
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	6e d2       	rcall	.+1244   	; 0x1ce2 <__divmodhi4>
    1806:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <rear1+0x1>
    180a:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <rear1>
    180e:	1c c0       	rjmp	.+56     	; 0x1848 <__vector_30+0xd2>
    1810:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <rear1>
    1814:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <rear1+0x1>
    1818:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <i.1896>
    181c:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <i.1896+0x1>
    1820:	9c 01       	movw	r18, r24
    1822:	2f 5f       	subi	r18, 0xFF	; 255
    1824:	3f 4f       	sbci	r19, 0xFF	; 255
    1826:	30 93 a9 01 	sts	0x01A9, r19	; 0x8001a9 <i.1896+0x1>
    182a:	20 93 a8 01 	sts	0x01A8, r18	; 0x8001a8 <i.1896>
    182e:	49 81       	ldd	r20, Y+1	; 0x01
    1830:	50 e5       	ldi	r21, 0x50	; 80
    1832:	56 9f       	mul	r21, r22
    1834:	90 01       	movw	r18, r0
    1836:	57 9f       	mul	r21, r23
    1838:	30 0d       	add	r19, r0
    183a:	11 24       	eor	r1, r1
    183c:	22 53       	subi	r18, 0x32	; 50
    183e:	3b 4f       	sbci	r19, 0xFB	; 251
    1840:	f9 01       	movw	r30, r18
    1842:	e8 0f       	add	r30, r24
    1844:	f9 1f       	adc	r31, r25
    1846:	40 83       	st	Z, r20
    1848:	0f 90       	pop	r0
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	ff 91       	pop	r31
    1850:	ef 91       	pop	r30
    1852:	bf 91       	pop	r27
    1854:	af 91       	pop	r26
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	7f 91       	pop	r23
    185c:	6f 91       	pop	r22
    185e:	5f 91       	pop	r21
    1860:	4f 91       	pop	r20
    1862:	3f 91       	pop	r19
    1864:	2f 91       	pop	r18
    1866:	0f 90       	pop	r0
    1868:	0b be       	out	0x3b, r0	; 59
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <init_uart1>:
    1874:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1878:	8f ec       	ldi	r24, 0xCF	; 207
    187a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    187e:	eb e9       	ldi	r30, 0x9B	; 155
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	82 60       	ori	r24, 0x02	; 2
    1886:	80 83       	st	Z, r24
    1888:	ed e9       	ldi	r30, 0x9D	; 157
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	86 60       	ori	r24, 0x06	; 6
    1890:	80 83       	st	Z, r24
    1892:	ea e9       	ldi	r30, 0x9A	; 154
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	88 69       	ori	r24, 0x98	; 152
    189a:	80 83       	st	Z, r24
    189c:	08 95       	ret

0000189e <__vector_5>:
    189e:	1f 92       	push	r1
    18a0:	0f 92       	push	r0
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	0f 92       	push	r0
    18a6:	11 24       	eor	r1, r1
    18a8:	0b b6       	in	r0, 0x3b	; 59
    18aa:	0f 92       	push	r0
    18ac:	2f 93       	push	r18
    18ae:	3f 93       	push	r19
    18b0:	4f 93       	push	r20
    18b2:	5f 93       	push	r21
    18b4:	6f 93       	push	r22
    18b6:	7f 93       	push	r23
    18b8:	8f 93       	push	r24
    18ba:	9f 93       	push	r25
    18bc:	af 93       	push	r26
    18be:	bf 93       	push	r27
    18c0:	ef 93       	push	r30
    18c2:	ff 93       	push	r31
    18c4:	0c 9b       	sbis	0x01, 4	; 1
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <__vector_5+0x30>
    18c8:	1d bc       	out	0x2d, r1	; 45
    18ca:	1c bc       	out	0x2c, r1	; 44
    18cc:	31 c0       	rjmp	.+98     	; 0x1930 <__vector_5+0x92>
    18ce:	6c b5       	in	r22, 0x2c	; 44
    18d0:	7d b5       	in	r23, 0x2d	; 45
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	14 d1       	rcall	.+552    	; 0x1b00 <__floatunsisf>
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	34 e2       	ldi	r19, 0x24	; 36
    18dc:	44 e7       	ldi	r20, 0x74	; 116
    18de:	59 e4       	ldi	r21, 0x49	; 73
    18e0:	9d d1       	rcall	.+826    	; 0x1c1c <__mulsf3>
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e8       	ldi	r20, 0x80	; 128
    18e8:	54 e4       	ldi	r21, 0x44	; 68
    18ea:	98 d1       	rcall	.+816    	; 0x1c1c <__mulsf3>
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	34 e2       	ldi	r19, 0x24	; 36
    18f0:	44 e7       	ldi	r20, 0x74	; 116
    18f2:	5b e4       	ldi	r21, 0x4B	; 75
    18f4:	6c d0       	rcall	.+216    	; 0x19ce <__divsf3>
    18f6:	d3 d0       	rcall	.+422    	; 0x1a9e <__fixsfsi>
    18f8:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <ultrasonic_distance+0x1>
    18fc:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <ultrasonic_distance>
    1900:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <ultrasonic_distance>
    1904:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <ultrasonic_distance+0x1>
    1908:	6a e3       	ldi	r22, 0x3A	; 58
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	ea d1       	rcall	.+980    	; 0x1ce2 <__divmodhi4>
    190e:	7f 93       	push	r23
    1910:	6f 93       	push	r22
    1912:	8d e6       	ldi	r24, 0x6D	; 109
    1914:	91 e0       	ldi	r25, 0x01	; 1
    1916:	9f 93       	push	r25
    1918:	8f 93       	push	r24
    191a:	8e ee       	ldi	r24, 0xEE	; 238
    191c:	97 e0       	ldi	r25, 0x07	; 7
    191e:	9f 93       	push	r25
    1920:	8f 93       	push	r24
    1922:	28 d2       	rcall	.+1104   	; 0x1d74 <sprintf>
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	ff 91       	pop	r31
    1932:	ef 91       	pop	r30
    1934:	bf 91       	pop	r27
    1936:	af 91       	pop	r26
    1938:	9f 91       	pop	r25
    193a:	8f 91       	pop	r24
    193c:	7f 91       	pop	r23
    193e:	6f 91       	pop	r22
    1940:	5f 91       	pop	r21
    1942:	4f 91       	pop	r20
    1944:	3f 91       	pop	r19
    1946:	2f 91       	pop	r18
    1948:	0f 90       	pop	r0
    194a:	0b be       	out	0x3b, r0	; 59
    194c:	0f 90       	pop	r0
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	0f 90       	pop	r0
    1952:	1f 90       	pop	r1
    1954:	18 95       	reti

00001956 <init_ultrasonic>:
    1956:	e4 e6       	ldi	r30, 0x64	; 100
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	80 61       	ori	r24, 0x10	; 16
    195e:	80 83       	st	Z, r24
    1960:	82 b1       	in	r24, 0x02	; 2
    1962:	8f 7e       	andi	r24, 0xEF	; 239
    1964:	82 b9       	out	0x02, r24	; 2
    1966:	8a b7       	in	r24, 0x3a	; 58
    1968:	81 60       	ori	r24, 0x01	; 1
    196a:	8a bf       	out	0x3a, r24	; 58
    196c:	8e b5       	in	r24, 0x2e	; 46
    196e:	85 60       	ori	r24, 0x05	; 5
    1970:	8e bd       	out	0x2e, r24	; 46
    1972:	89 b7       	in	r24, 0x39	; 57
    1974:	80 61       	ori	r24, 0x10	; 16
    1976:	89 bf       	out	0x39, r24	; 57
    1978:	08 95       	ret

0000197a <ultrasonic_trigger>:
    197a:	e5 e6       	ldi	r30, 0x65	; 101
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	8f 7e       	andi	r24, 0xEF	; 239
    1982:	80 83       	st	Z, r24
    1984:	85 e0       	ldi	r24, 0x05	; 5
    1986:	8a 95       	dec	r24
    1988:	f1 f7       	brne	.-4      	; 0x1986 <ultrasonic_trigger+0xc>
    198a:	00 00       	nop
    198c:	80 81       	ld	r24, Z
    198e:	80 61       	ori	r24, 0x10	; 16
    1990:	80 83       	st	Z, r24
    1992:	80 e5       	ldi	r24, 0x50	; 80
    1994:	8a 95       	dec	r24
    1996:	f1 f7       	brne	.-4      	; 0x1994 <ultrasonic_trigger+0x1a>
    1998:	80 81       	ld	r24, Z
    199a:	8f 7e       	andi	r24, 0xEF	; 239
    199c:	80 83       	st	Z, r24
    199e:	08 95       	ret

000019a0 <ultrasonic_distance_check>:
    19a0:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <closed_check_timer>
    19a4:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <closed_check_timer+0x1>
    19a8:	a0 91 8e 01 	lds	r26, 0x018E	; 0x80018e <closed_check_timer+0x2>
    19ac:	b0 91 8f 01 	lds	r27, 0x018F	; 0x80018f <closed_check_timer+0x3>
    19b0:	88 3e       	cpi	r24, 0xE8	; 232
    19b2:	93 40       	sbci	r25, 0x03	; 3
    19b4:	a1 05       	cpc	r26, r1
    19b6:	b1 05       	cpc	r27, r1
    19b8:	48 f0       	brcs	.+18     	; 0x19cc <ultrasonic_distance_check+0x2c>
    19ba:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <closed_check_timer>
    19be:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <closed_check_timer+0x1>
    19c2:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <closed_check_timer+0x2>
    19c6:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <closed_check_timer+0x3>
    19ca:	d7 cf       	rjmp	.-82     	; 0x197a <ultrasonic_trigger>
    19cc:	08 95       	ret

000019ce <__divsf3>:
    19ce:	0c d0       	rcall	.+24     	; 0x19e8 <__divsf3x>
    19d0:	eb c0       	rjmp	.+470    	; 0x1ba8 <__fp_round>
    19d2:	e3 d0       	rcall	.+454    	; 0x1b9a <__fp_pscB>
    19d4:	40 f0       	brcs	.+16     	; 0x19e6 <__divsf3+0x18>
    19d6:	da d0       	rcall	.+436    	; 0x1b8c <__fp_pscA>
    19d8:	30 f0       	brcs	.+12     	; 0x19e6 <__divsf3+0x18>
    19da:	21 f4       	brne	.+8      	; 0x19e4 <__divsf3+0x16>
    19dc:	5f 3f       	cpi	r21, 0xFF	; 255
    19de:	19 f0       	breq	.+6      	; 0x19e6 <__divsf3+0x18>
    19e0:	cc c0       	rjmp	.+408    	; 0x1b7a <__fp_inf>
    19e2:	51 11       	cpse	r21, r1
    19e4:	15 c1       	rjmp	.+554    	; 0x1c10 <__fp_szero>
    19e6:	cf c0       	rjmp	.+414    	; 0x1b86 <__fp_nan>

000019e8 <__divsf3x>:
    19e8:	f0 d0       	rcall	.+480    	; 0x1bca <__fp_split3>
    19ea:	98 f3       	brcs	.-26     	; 0x19d2 <__divsf3+0x4>

000019ec <__divsf3_pse>:
    19ec:	99 23       	and	r25, r25
    19ee:	c9 f3       	breq	.-14     	; 0x19e2 <__divsf3+0x14>
    19f0:	55 23       	and	r21, r21
    19f2:	b1 f3       	breq	.-20     	; 0x19e0 <__divsf3+0x12>
    19f4:	95 1b       	sub	r25, r21
    19f6:	55 0b       	sbc	r21, r21
    19f8:	bb 27       	eor	r27, r27
    19fa:	aa 27       	eor	r26, r26
    19fc:	62 17       	cp	r22, r18
    19fe:	73 07       	cpc	r23, r19
    1a00:	84 07       	cpc	r24, r20
    1a02:	38 f0       	brcs	.+14     	; 0x1a12 <__divsf3_pse+0x26>
    1a04:	9f 5f       	subi	r25, 0xFF	; 255
    1a06:	5f 4f       	sbci	r21, 0xFF	; 255
    1a08:	22 0f       	add	r18, r18
    1a0a:	33 1f       	adc	r19, r19
    1a0c:	44 1f       	adc	r20, r20
    1a0e:	aa 1f       	adc	r26, r26
    1a10:	a9 f3       	breq	.-22     	; 0x19fc <__divsf3_pse+0x10>
    1a12:	33 d0       	rcall	.+102    	; 0x1a7a <__divsf3_pse+0x8e>
    1a14:	0e 2e       	mov	r0, r30
    1a16:	3a f0       	brmi	.+14     	; 0x1a26 <__divsf3_pse+0x3a>
    1a18:	e0 e8       	ldi	r30, 0x80	; 128
    1a1a:	30 d0       	rcall	.+96     	; 0x1a7c <__divsf3_pse+0x90>
    1a1c:	91 50       	subi	r25, 0x01	; 1
    1a1e:	50 40       	sbci	r21, 0x00	; 0
    1a20:	e6 95       	lsr	r30
    1a22:	00 1c       	adc	r0, r0
    1a24:	ca f7       	brpl	.-14     	; 0x1a18 <__divsf3_pse+0x2c>
    1a26:	29 d0       	rcall	.+82     	; 0x1a7a <__divsf3_pse+0x8e>
    1a28:	fe 2f       	mov	r31, r30
    1a2a:	27 d0       	rcall	.+78     	; 0x1a7a <__divsf3_pse+0x8e>
    1a2c:	66 0f       	add	r22, r22
    1a2e:	77 1f       	adc	r23, r23
    1a30:	88 1f       	adc	r24, r24
    1a32:	bb 1f       	adc	r27, r27
    1a34:	26 17       	cp	r18, r22
    1a36:	37 07       	cpc	r19, r23
    1a38:	48 07       	cpc	r20, r24
    1a3a:	ab 07       	cpc	r26, r27
    1a3c:	b0 e8       	ldi	r27, 0x80	; 128
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <__divsf3_pse+0x56>
    1a40:	bb 0b       	sbc	r27, r27
    1a42:	80 2d       	mov	r24, r0
    1a44:	bf 01       	movw	r22, r30
    1a46:	ff 27       	eor	r31, r31
    1a48:	93 58       	subi	r25, 0x83	; 131
    1a4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4c:	2a f0       	brmi	.+10     	; 0x1a58 <__divsf3_pse+0x6c>
    1a4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a50:	51 05       	cpc	r21, r1
    1a52:	68 f0       	brcs	.+26     	; 0x1a6e <__divsf3_pse+0x82>
    1a54:	92 c0       	rjmp	.+292    	; 0x1b7a <__fp_inf>
    1a56:	dc c0       	rjmp	.+440    	; 0x1c10 <__fp_szero>
    1a58:	5f 3f       	cpi	r21, 0xFF	; 255
    1a5a:	ec f3       	brlt	.-6      	; 0x1a56 <__divsf3_pse+0x6a>
    1a5c:	98 3e       	cpi	r25, 0xE8	; 232
    1a5e:	dc f3       	brlt	.-10     	; 0x1a56 <__divsf3_pse+0x6a>
    1a60:	86 95       	lsr	r24
    1a62:	77 95       	ror	r23
    1a64:	67 95       	ror	r22
    1a66:	b7 95       	ror	r27
    1a68:	f7 95       	ror	r31
    1a6a:	9f 5f       	subi	r25, 0xFF	; 255
    1a6c:	c9 f7       	brne	.-14     	; 0x1a60 <__divsf3_pse+0x74>
    1a6e:	88 0f       	add	r24, r24
    1a70:	91 1d       	adc	r25, r1
    1a72:	96 95       	lsr	r25
    1a74:	87 95       	ror	r24
    1a76:	97 f9       	bld	r25, 7
    1a78:	08 95       	ret
    1a7a:	e1 e0       	ldi	r30, 0x01	; 1
    1a7c:	66 0f       	add	r22, r22
    1a7e:	77 1f       	adc	r23, r23
    1a80:	88 1f       	adc	r24, r24
    1a82:	bb 1f       	adc	r27, r27
    1a84:	62 17       	cp	r22, r18
    1a86:	73 07       	cpc	r23, r19
    1a88:	84 07       	cpc	r24, r20
    1a8a:	ba 07       	cpc	r27, r26
    1a8c:	20 f0       	brcs	.+8      	; 0x1a96 <__divsf3_pse+0xaa>
    1a8e:	62 1b       	sub	r22, r18
    1a90:	73 0b       	sbc	r23, r19
    1a92:	84 0b       	sbc	r24, r20
    1a94:	ba 0b       	sbc	r27, r26
    1a96:	ee 1f       	adc	r30, r30
    1a98:	88 f7       	brcc	.-30     	; 0x1a7c <__divsf3_pse+0x90>
    1a9a:	e0 95       	com	r30
    1a9c:	08 95       	ret

00001a9e <__fixsfsi>:
    1a9e:	04 d0       	rcall	.+8      	; 0x1aa8 <__fixunssfsi>
    1aa0:	68 94       	set
    1aa2:	b1 11       	cpse	r27, r1
    1aa4:	b5 c0       	rjmp	.+362    	; 0x1c10 <__fp_szero>
    1aa6:	08 95       	ret

00001aa8 <__fixunssfsi>:
    1aa8:	98 d0       	rcall	.+304    	; 0x1bda <__fp_splitA>
    1aaa:	88 f0       	brcs	.+34     	; 0x1ace <__fixunssfsi+0x26>
    1aac:	9f 57       	subi	r25, 0x7F	; 127
    1aae:	90 f0       	brcs	.+36     	; 0x1ad4 <__fixunssfsi+0x2c>
    1ab0:	b9 2f       	mov	r27, r25
    1ab2:	99 27       	eor	r25, r25
    1ab4:	b7 51       	subi	r27, 0x17	; 23
    1ab6:	a0 f0       	brcs	.+40     	; 0x1ae0 <__fixunssfsi+0x38>
    1ab8:	d1 f0       	breq	.+52     	; 0x1aee <__fixunssfsi+0x46>
    1aba:	66 0f       	add	r22, r22
    1abc:	77 1f       	adc	r23, r23
    1abe:	88 1f       	adc	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	1a f0       	brmi	.+6      	; 0x1aca <__fixunssfsi+0x22>
    1ac4:	ba 95       	dec	r27
    1ac6:	c9 f7       	brne	.-14     	; 0x1aba <__fixunssfsi+0x12>
    1ac8:	12 c0       	rjmp	.+36     	; 0x1aee <__fixunssfsi+0x46>
    1aca:	b1 30       	cpi	r27, 0x01	; 1
    1acc:	81 f0       	breq	.+32     	; 0x1aee <__fixunssfsi+0x46>
    1ace:	9f d0       	rcall	.+318    	; 0x1c0e <__fp_zero>
    1ad0:	b1 e0       	ldi	r27, 0x01	; 1
    1ad2:	08 95       	ret
    1ad4:	9c c0       	rjmp	.+312    	; 0x1c0e <__fp_zero>
    1ad6:	67 2f       	mov	r22, r23
    1ad8:	78 2f       	mov	r23, r24
    1ada:	88 27       	eor	r24, r24
    1adc:	b8 5f       	subi	r27, 0xF8	; 248
    1ade:	39 f0       	breq	.+14     	; 0x1aee <__fixunssfsi+0x46>
    1ae0:	b9 3f       	cpi	r27, 0xF9	; 249
    1ae2:	cc f3       	brlt	.-14     	; 0x1ad6 <__fixunssfsi+0x2e>
    1ae4:	86 95       	lsr	r24
    1ae6:	77 95       	ror	r23
    1ae8:	67 95       	ror	r22
    1aea:	b3 95       	inc	r27
    1aec:	d9 f7       	brne	.-10     	; 0x1ae4 <__fixunssfsi+0x3c>
    1aee:	3e f4       	brtc	.+14     	; 0x1afe <__fixunssfsi+0x56>
    1af0:	90 95       	com	r25
    1af2:	80 95       	com	r24
    1af4:	70 95       	com	r23
    1af6:	61 95       	neg	r22
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	8f 4f       	sbci	r24, 0xFF	; 255
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255
    1afe:	08 95       	ret

00001b00 <__floatunsisf>:
    1b00:	e8 94       	clt
    1b02:	09 c0       	rjmp	.+18     	; 0x1b16 <__floatsisf+0x12>

00001b04 <__floatsisf>:
    1b04:	97 fb       	bst	r25, 7
    1b06:	3e f4       	brtc	.+14     	; 0x1b16 <__floatsisf+0x12>
    1b08:	90 95       	com	r25
    1b0a:	80 95       	com	r24
    1b0c:	70 95       	com	r23
    1b0e:	61 95       	neg	r22
    1b10:	7f 4f       	sbci	r23, 0xFF	; 255
    1b12:	8f 4f       	sbci	r24, 0xFF	; 255
    1b14:	9f 4f       	sbci	r25, 0xFF	; 255
    1b16:	99 23       	and	r25, r25
    1b18:	a9 f0       	breq	.+42     	; 0x1b44 <__floatsisf+0x40>
    1b1a:	f9 2f       	mov	r31, r25
    1b1c:	96 e9       	ldi	r25, 0x96	; 150
    1b1e:	bb 27       	eor	r27, r27
    1b20:	93 95       	inc	r25
    1b22:	f6 95       	lsr	r31
    1b24:	87 95       	ror	r24
    1b26:	77 95       	ror	r23
    1b28:	67 95       	ror	r22
    1b2a:	b7 95       	ror	r27
    1b2c:	f1 11       	cpse	r31, r1
    1b2e:	f8 cf       	rjmp	.-16     	; 0x1b20 <__floatsisf+0x1c>
    1b30:	fa f4       	brpl	.+62     	; 0x1b70 <__floatsisf+0x6c>
    1b32:	bb 0f       	add	r27, r27
    1b34:	11 f4       	brne	.+4      	; 0x1b3a <__floatsisf+0x36>
    1b36:	60 ff       	sbrs	r22, 0
    1b38:	1b c0       	rjmp	.+54     	; 0x1b70 <__floatsisf+0x6c>
    1b3a:	6f 5f       	subi	r22, 0xFF	; 255
    1b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b40:	9f 4f       	sbci	r25, 0xFF	; 255
    1b42:	16 c0       	rjmp	.+44     	; 0x1b70 <__floatsisf+0x6c>
    1b44:	88 23       	and	r24, r24
    1b46:	11 f0       	breq	.+4      	; 0x1b4c <__floatsisf+0x48>
    1b48:	96 e9       	ldi	r25, 0x96	; 150
    1b4a:	11 c0       	rjmp	.+34     	; 0x1b6e <__floatsisf+0x6a>
    1b4c:	77 23       	and	r23, r23
    1b4e:	21 f0       	breq	.+8      	; 0x1b58 <__floatsisf+0x54>
    1b50:	9e e8       	ldi	r25, 0x8E	; 142
    1b52:	87 2f       	mov	r24, r23
    1b54:	76 2f       	mov	r23, r22
    1b56:	05 c0       	rjmp	.+10     	; 0x1b62 <__floatsisf+0x5e>
    1b58:	66 23       	and	r22, r22
    1b5a:	71 f0       	breq	.+28     	; 0x1b78 <__floatsisf+0x74>
    1b5c:	96 e8       	ldi	r25, 0x86	; 134
    1b5e:	86 2f       	mov	r24, r22
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	2a f0       	brmi	.+10     	; 0x1b70 <__floatsisf+0x6c>
    1b66:	9a 95       	dec	r25
    1b68:	66 0f       	add	r22, r22
    1b6a:	77 1f       	adc	r23, r23
    1b6c:	88 1f       	adc	r24, r24
    1b6e:	da f7       	brpl	.-10     	; 0x1b66 <__floatsisf+0x62>
    1b70:	88 0f       	add	r24, r24
    1b72:	96 95       	lsr	r25
    1b74:	87 95       	ror	r24
    1b76:	97 f9       	bld	r25, 7
    1b78:	08 95       	ret

00001b7a <__fp_inf>:
    1b7a:	97 f9       	bld	r25, 7
    1b7c:	9f 67       	ori	r25, 0x7F	; 127
    1b7e:	80 e8       	ldi	r24, 0x80	; 128
    1b80:	70 e0       	ldi	r23, 0x00	; 0
    1b82:	60 e0       	ldi	r22, 0x00	; 0
    1b84:	08 95       	ret

00001b86 <__fp_nan>:
    1b86:	9f ef       	ldi	r25, 0xFF	; 255
    1b88:	80 ec       	ldi	r24, 0xC0	; 192
    1b8a:	08 95       	ret

00001b8c <__fp_pscA>:
    1b8c:	00 24       	eor	r0, r0
    1b8e:	0a 94       	dec	r0
    1b90:	16 16       	cp	r1, r22
    1b92:	17 06       	cpc	r1, r23
    1b94:	18 06       	cpc	r1, r24
    1b96:	09 06       	cpc	r0, r25
    1b98:	08 95       	ret

00001b9a <__fp_pscB>:
    1b9a:	00 24       	eor	r0, r0
    1b9c:	0a 94       	dec	r0
    1b9e:	12 16       	cp	r1, r18
    1ba0:	13 06       	cpc	r1, r19
    1ba2:	14 06       	cpc	r1, r20
    1ba4:	05 06       	cpc	r0, r21
    1ba6:	08 95       	ret

00001ba8 <__fp_round>:
    1ba8:	09 2e       	mov	r0, r25
    1baa:	03 94       	inc	r0
    1bac:	00 0c       	add	r0, r0
    1bae:	11 f4       	brne	.+4      	; 0x1bb4 <__fp_round+0xc>
    1bb0:	88 23       	and	r24, r24
    1bb2:	52 f0       	brmi	.+20     	; 0x1bc8 <__fp_round+0x20>
    1bb4:	bb 0f       	add	r27, r27
    1bb6:	40 f4       	brcc	.+16     	; 0x1bc8 <__fp_round+0x20>
    1bb8:	bf 2b       	or	r27, r31
    1bba:	11 f4       	brne	.+4      	; 0x1bc0 <__fp_round+0x18>
    1bbc:	60 ff       	sbrs	r22, 0
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <__fp_round+0x20>
    1bc0:	6f 5f       	subi	r22, 0xFF	; 255
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc8:	08 95       	ret

00001bca <__fp_split3>:
    1bca:	57 fd       	sbrc	r21, 7
    1bcc:	90 58       	subi	r25, 0x80	; 128
    1bce:	44 0f       	add	r20, r20
    1bd0:	55 1f       	adc	r21, r21
    1bd2:	59 f0       	breq	.+22     	; 0x1bea <__fp_splitA+0x10>
    1bd4:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd6:	71 f0       	breq	.+28     	; 0x1bf4 <__fp_splitA+0x1a>
    1bd8:	47 95       	ror	r20

00001bda <__fp_splitA>:
    1bda:	88 0f       	add	r24, r24
    1bdc:	97 fb       	bst	r25, 7
    1bde:	99 1f       	adc	r25, r25
    1be0:	61 f0       	breq	.+24     	; 0x1bfa <__fp_splitA+0x20>
    1be2:	9f 3f       	cpi	r25, 0xFF	; 255
    1be4:	79 f0       	breq	.+30     	; 0x1c04 <__fp_splitA+0x2a>
    1be6:	87 95       	ror	r24
    1be8:	08 95       	ret
    1bea:	12 16       	cp	r1, r18
    1bec:	13 06       	cpc	r1, r19
    1bee:	14 06       	cpc	r1, r20
    1bf0:	55 1f       	adc	r21, r21
    1bf2:	f2 cf       	rjmp	.-28     	; 0x1bd8 <__fp_split3+0xe>
    1bf4:	46 95       	lsr	r20
    1bf6:	f1 df       	rcall	.-30     	; 0x1bda <__fp_splitA>
    1bf8:	08 c0       	rjmp	.+16     	; 0x1c0a <__fp_splitA+0x30>
    1bfa:	16 16       	cp	r1, r22
    1bfc:	17 06       	cpc	r1, r23
    1bfe:	18 06       	cpc	r1, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	f1 cf       	rjmp	.-30     	; 0x1be6 <__fp_splitA+0xc>
    1c04:	86 95       	lsr	r24
    1c06:	71 05       	cpc	r23, r1
    1c08:	61 05       	cpc	r22, r1
    1c0a:	08 94       	sec
    1c0c:	08 95       	ret

00001c0e <__fp_zero>:
    1c0e:	e8 94       	clt

00001c10 <__fp_szero>:
    1c10:	bb 27       	eor	r27, r27
    1c12:	66 27       	eor	r22, r22
    1c14:	77 27       	eor	r23, r23
    1c16:	cb 01       	movw	r24, r22
    1c18:	97 f9       	bld	r25, 7
    1c1a:	08 95       	ret

00001c1c <__mulsf3>:
    1c1c:	0b d0       	rcall	.+22     	; 0x1c34 <__mulsf3x>
    1c1e:	c4 cf       	rjmp	.-120    	; 0x1ba8 <__fp_round>
    1c20:	b5 df       	rcall	.-150    	; 0x1b8c <__fp_pscA>
    1c22:	28 f0       	brcs	.+10     	; 0x1c2e <__mulsf3+0x12>
    1c24:	ba df       	rcall	.-140    	; 0x1b9a <__fp_pscB>
    1c26:	18 f0       	brcs	.+6      	; 0x1c2e <__mulsf3+0x12>
    1c28:	95 23       	and	r25, r21
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <__mulsf3+0x12>
    1c2c:	a6 cf       	rjmp	.-180    	; 0x1b7a <__fp_inf>
    1c2e:	ab cf       	rjmp	.-170    	; 0x1b86 <__fp_nan>
    1c30:	11 24       	eor	r1, r1
    1c32:	ee cf       	rjmp	.-36     	; 0x1c10 <__fp_szero>

00001c34 <__mulsf3x>:
    1c34:	ca df       	rcall	.-108    	; 0x1bca <__fp_split3>
    1c36:	a0 f3       	brcs	.-24     	; 0x1c20 <__mulsf3+0x4>

00001c38 <__mulsf3_pse>:
    1c38:	95 9f       	mul	r25, r21
    1c3a:	d1 f3       	breq	.-12     	; 0x1c30 <__mulsf3+0x14>
    1c3c:	95 0f       	add	r25, r21
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	55 1f       	adc	r21, r21
    1c42:	62 9f       	mul	r22, r18
    1c44:	f0 01       	movw	r30, r0
    1c46:	72 9f       	mul	r23, r18
    1c48:	bb 27       	eor	r27, r27
    1c4a:	f0 0d       	add	r31, r0
    1c4c:	b1 1d       	adc	r27, r1
    1c4e:	63 9f       	mul	r22, r19
    1c50:	aa 27       	eor	r26, r26
    1c52:	f0 0d       	add	r31, r0
    1c54:	b1 1d       	adc	r27, r1
    1c56:	aa 1f       	adc	r26, r26
    1c58:	64 9f       	mul	r22, r20
    1c5a:	66 27       	eor	r22, r22
    1c5c:	b0 0d       	add	r27, r0
    1c5e:	a1 1d       	adc	r26, r1
    1c60:	66 1f       	adc	r22, r22
    1c62:	82 9f       	mul	r24, r18
    1c64:	22 27       	eor	r18, r18
    1c66:	b0 0d       	add	r27, r0
    1c68:	a1 1d       	adc	r26, r1
    1c6a:	62 1f       	adc	r22, r18
    1c6c:	73 9f       	mul	r23, r19
    1c6e:	b0 0d       	add	r27, r0
    1c70:	a1 1d       	adc	r26, r1
    1c72:	62 1f       	adc	r22, r18
    1c74:	83 9f       	mul	r24, r19
    1c76:	a0 0d       	add	r26, r0
    1c78:	61 1d       	adc	r22, r1
    1c7a:	22 1f       	adc	r18, r18
    1c7c:	74 9f       	mul	r23, r20
    1c7e:	33 27       	eor	r19, r19
    1c80:	a0 0d       	add	r26, r0
    1c82:	61 1d       	adc	r22, r1
    1c84:	23 1f       	adc	r18, r19
    1c86:	84 9f       	mul	r24, r20
    1c88:	60 0d       	add	r22, r0
    1c8a:	21 1d       	adc	r18, r1
    1c8c:	82 2f       	mov	r24, r18
    1c8e:	76 2f       	mov	r23, r22
    1c90:	6a 2f       	mov	r22, r26
    1c92:	11 24       	eor	r1, r1
    1c94:	9f 57       	subi	r25, 0x7F	; 127
    1c96:	50 40       	sbci	r21, 0x00	; 0
    1c98:	8a f0       	brmi	.+34     	; 0x1cbc <__mulsf3_pse+0x84>
    1c9a:	e1 f0       	breq	.+56     	; 0x1cd4 <__mulsf3_pse+0x9c>
    1c9c:	88 23       	and	r24, r24
    1c9e:	4a f0       	brmi	.+18     	; 0x1cb2 <__mulsf3_pse+0x7a>
    1ca0:	ee 0f       	add	r30, r30
    1ca2:	ff 1f       	adc	r31, r31
    1ca4:	bb 1f       	adc	r27, r27
    1ca6:	66 1f       	adc	r22, r22
    1ca8:	77 1f       	adc	r23, r23
    1caa:	88 1f       	adc	r24, r24
    1cac:	91 50       	subi	r25, 0x01	; 1
    1cae:	50 40       	sbci	r21, 0x00	; 0
    1cb0:	a9 f7       	brne	.-22     	; 0x1c9c <__mulsf3_pse+0x64>
    1cb2:	9e 3f       	cpi	r25, 0xFE	; 254
    1cb4:	51 05       	cpc	r21, r1
    1cb6:	70 f0       	brcs	.+28     	; 0x1cd4 <__mulsf3_pse+0x9c>
    1cb8:	60 cf       	rjmp	.-320    	; 0x1b7a <__fp_inf>
    1cba:	aa cf       	rjmp	.-172    	; 0x1c10 <__fp_szero>
    1cbc:	5f 3f       	cpi	r21, 0xFF	; 255
    1cbe:	ec f3       	brlt	.-6      	; 0x1cba <__mulsf3_pse+0x82>
    1cc0:	98 3e       	cpi	r25, 0xE8	; 232
    1cc2:	dc f3       	brlt	.-10     	; 0x1cba <__mulsf3_pse+0x82>
    1cc4:	86 95       	lsr	r24
    1cc6:	77 95       	ror	r23
    1cc8:	67 95       	ror	r22
    1cca:	b7 95       	ror	r27
    1ccc:	f7 95       	ror	r31
    1cce:	e7 95       	ror	r30
    1cd0:	9f 5f       	subi	r25, 0xFF	; 255
    1cd2:	c1 f7       	brne	.-16     	; 0x1cc4 <__mulsf3_pse+0x8c>
    1cd4:	fe 2b       	or	r31, r30
    1cd6:	88 0f       	add	r24, r24
    1cd8:	91 1d       	adc	r25, r1
    1cda:	96 95       	lsr	r25
    1cdc:	87 95       	ror	r24
    1cde:	97 f9       	bld	r25, 7
    1ce0:	08 95       	ret

00001ce2 <__divmodhi4>:
    1ce2:	97 fb       	bst	r25, 7
    1ce4:	07 2e       	mov	r0, r23
    1ce6:	16 f4       	brtc	.+4      	; 0x1cec <__divmodhi4+0xa>
    1ce8:	00 94       	com	r0
    1cea:	06 d0       	rcall	.+12     	; 0x1cf8 <__divmodhi4_neg1>
    1cec:	77 fd       	sbrc	r23, 7
    1cee:	08 d0       	rcall	.+16     	; 0x1d00 <__divmodhi4_neg2>
    1cf0:	2d d0       	rcall	.+90     	; 0x1d4c <__udivmodhi4>
    1cf2:	07 fc       	sbrc	r0, 7
    1cf4:	05 d0       	rcall	.+10     	; 0x1d00 <__divmodhi4_neg2>
    1cf6:	3e f4       	brtc	.+14     	; 0x1d06 <__divmodhi4_exit>

00001cf8 <__divmodhi4_neg1>:
    1cf8:	90 95       	com	r25
    1cfa:	81 95       	neg	r24
    1cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfe:	08 95       	ret

00001d00 <__divmodhi4_neg2>:
    1d00:	70 95       	com	r23
    1d02:	61 95       	neg	r22
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255

00001d06 <__divmodhi4_exit>:
    1d06:	08 95       	ret

00001d08 <__udivmodsi4>:
    1d08:	a1 e2       	ldi	r26, 0x21	; 33
    1d0a:	1a 2e       	mov	r1, r26
    1d0c:	aa 1b       	sub	r26, r26
    1d0e:	bb 1b       	sub	r27, r27
    1d10:	fd 01       	movw	r30, r26
    1d12:	0d c0       	rjmp	.+26     	; 0x1d2e <__udivmodsi4_ep>

00001d14 <__udivmodsi4_loop>:
    1d14:	aa 1f       	adc	r26, r26
    1d16:	bb 1f       	adc	r27, r27
    1d18:	ee 1f       	adc	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	a2 17       	cp	r26, r18
    1d1e:	b3 07       	cpc	r27, r19
    1d20:	e4 07       	cpc	r30, r20
    1d22:	f5 07       	cpc	r31, r21
    1d24:	20 f0       	brcs	.+8      	; 0x1d2e <__udivmodsi4_ep>
    1d26:	a2 1b       	sub	r26, r18
    1d28:	b3 0b       	sbc	r27, r19
    1d2a:	e4 0b       	sbc	r30, r20
    1d2c:	f5 0b       	sbc	r31, r21

00001d2e <__udivmodsi4_ep>:
    1d2e:	66 1f       	adc	r22, r22
    1d30:	77 1f       	adc	r23, r23
    1d32:	88 1f       	adc	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	1a 94       	dec	r1
    1d38:	69 f7       	brne	.-38     	; 0x1d14 <__udivmodsi4_loop>
    1d3a:	60 95       	com	r22
    1d3c:	70 95       	com	r23
    1d3e:	80 95       	com	r24
    1d40:	90 95       	com	r25
    1d42:	9b 01       	movw	r18, r22
    1d44:	ac 01       	movw	r20, r24
    1d46:	bd 01       	movw	r22, r26
    1d48:	cf 01       	movw	r24, r30
    1d4a:	08 95       	ret

00001d4c <__udivmodhi4>:
    1d4c:	aa 1b       	sub	r26, r26
    1d4e:	bb 1b       	sub	r27, r27
    1d50:	51 e1       	ldi	r21, 0x11	; 17
    1d52:	07 c0       	rjmp	.+14     	; 0x1d62 <__udivmodhi4_ep>

00001d54 <__udivmodhi4_loop>:
    1d54:	aa 1f       	adc	r26, r26
    1d56:	bb 1f       	adc	r27, r27
    1d58:	a6 17       	cp	r26, r22
    1d5a:	b7 07       	cpc	r27, r23
    1d5c:	10 f0       	brcs	.+4      	; 0x1d62 <__udivmodhi4_ep>
    1d5e:	a6 1b       	sub	r26, r22
    1d60:	b7 0b       	sbc	r27, r23

00001d62 <__udivmodhi4_ep>:
    1d62:	88 1f       	adc	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	5a 95       	dec	r21
    1d68:	a9 f7       	brne	.-22     	; 0x1d54 <__udivmodhi4_loop>
    1d6a:	80 95       	com	r24
    1d6c:	90 95       	com	r25
    1d6e:	bc 01       	movw	r22, r24
    1d70:	cd 01       	movw	r24, r26
    1d72:	08 95       	ret

00001d74 <sprintf>:
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	2e 97       	sbiw	r28, 0x0e	; 14
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	0d 89       	ldd	r16, Y+21	; 0x15
    1d8e:	1e 89       	ldd	r17, Y+22	; 0x16
    1d90:	86 e0       	ldi	r24, 0x06	; 6
    1d92:	8c 83       	std	Y+4, r24	; 0x04
    1d94:	1a 83       	std	Y+2, r17	; 0x02
    1d96:	09 83       	std	Y+1, r16	; 0x01
    1d98:	8f ef       	ldi	r24, 0xFF	; 255
    1d9a:	9f e7       	ldi	r25, 0x7F	; 127
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
    1da0:	ae 01       	movw	r20, r28
    1da2:	47 5e       	subi	r20, 0xE7	; 231
    1da4:	5f 4f       	sbci	r21, 0xFF	; 255
    1da6:	6f 89       	ldd	r22, Y+23	; 0x17
    1da8:	78 8d       	ldd	r23, Y+24	; 0x18
    1daa:	ce 01       	movw	r24, r28
    1dac:	01 96       	adiw	r24, 0x01	; 1
    1dae:	10 d0       	rcall	.+32     	; 0x1dd0 <vfprintf>
    1db0:	ef 81       	ldd	r30, Y+7	; 0x07
    1db2:	f8 85       	ldd	r31, Y+8	; 0x08
    1db4:	e0 0f       	add	r30, r16
    1db6:	f1 1f       	adc	r31, r17
    1db8:	10 82       	st	Z, r1
    1dba:	2e 96       	adiw	r28, 0x0e	; 14
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	08 95       	ret

00001dd0 <vfprintf>:
    1dd0:	2f 92       	push	r2
    1dd2:	3f 92       	push	r3
    1dd4:	4f 92       	push	r4
    1dd6:	5f 92       	push	r5
    1dd8:	6f 92       	push	r6
    1dda:	7f 92       	push	r7
    1ddc:	8f 92       	push	r8
    1dde:	9f 92       	push	r9
    1de0:	af 92       	push	r10
    1de2:	bf 92       	push	r11
    1de4:	cf 92       	push	r12
    1de6:	df 92       	push	r13
    1de8:	ef 92       	push	r14
    1dea:	ff 92       	push	r15
    1dec:	0f 93       	push	r16
    1dee:	1f 93       	push	r17
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	2b 97       	sbiw	r28, 0x0b	; 11
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	6c 01       	movw	r12, r24
    1e06:	7b 01       	movw	r14, r22
    1e08:	8a 01       	movw	r16, r20
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	17 82       	std	Z+7, r1	; 0x07
    1e0e:	16 82       	std	Z+6, r1	; 0x06
    1e10:	83 81       	ldd	r24, Z+3	; 0x03
    1e12:	81 ff       	sbrs	r24, 1
    1e14:	bf c1       	rjmp	.+894    	; 0x2194 <vfprintf+0x3c4>
    1e16:	ce 01       	movw	r24, r28
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	3c 01       	movw	r6, r24
    1e1c:	f6 01       	movw	r30, r12
    1e1e:	93 81       	ldd	r25, Z+3	; 0x03
    1e20:	f7 01       	movw	r30, r14
    1e22:	93 fd       	sbrc	r25, 3
    1e24:	85 91       	lpm	r24, Z+
    1e26:	93 ff       	sbrs	r25, 3
    1e28:	81 91       	ld	r24, Z+
    1e2a:	7f 01       	movw	r14, r30
    1e2c:	88 23       	and	r24, r24
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <vfprintf+0x62>
    1e30:	ad c1       	rjmp	.+858    	; 0x218c <vfprintf+0x3bc>
    1e32:	85 32       	cpi	r24, 0x25	; 37
    1e34:	39 f4       	brne	.+14     	; 0x1e44 <vfprintf+0x74>
    1e36:	93 fd       	sbrc	r25, 3
    1e38:	85 91       	lpm	r24, Z+
    1e3a:	93 ff       	sbrs	r25, 3
    1e3c:	81 91       	ld	r24, Z+
    1e3e:	7f 01       	movw	r14, r30
    1e40:	85 32       	cpi	r24, 0x25	; 37
    1e42:	21 f4       	brne	.+8      	; 0x1e4c <vfprintf+0x7c>
    1e44:	b6 01       	movw	r22, r12
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	d6 d1       	rcall	.+940    	; 0x21f6 <fputc>
    1e4a:	e8 cf       	rjmp	.-48     	; 0x1e1c <vfprintf+0x4c>
    1e4c:	91 2c       	mov	r9, r1
    1e4e:	21 2c       	mov	r2, r1
    1e50:	31 2c       	mov	r3, r1
    1e52:	ff e1       	ldi	r31, 0x1F	; 31
    1e54:	f3 15       	cp	r31, r3
    1e56:	d8 f0       	brcs	.+54     	; 0x1e8e <vfprintf+0xbe>
    1e58:	8b 32       	cpi	r24, 0x2B	; 43
    1e5a:	79 f0       	breq	.+30     	; 0x1e7a <vfprintf+0xaa>
    1e5c:	38 f4       	brcc	.+14     	; 0x1e6c <vfprintf+0x9c>
    1e5e:	80 32       	cpi	r24, 0x20	; 32
    1e60:	79 f0       	breq	.+30     	; 0x1e80 <vfprintf+0xb0>
    1e62:	83 32       	cpi	r24, 0x23	; 35
    1e64:	a1 f4       	brne	.+40     	; 0x1e8e <vfprintf+0xbe>
    1e66:	23 2d       	mov	r18, r3
    1e68:	20 61       	ori	r18, 0x10	; 16
    1e6a:	1d c0       	rjmp	.+58     	; 0x1ea6 <vfprintf+0xd6>
    1e6c:	8d 32       	cpi	r24, 0x2D	; 45
    1e6e:	61 f0       	breq	.+24     	; 0x1e88 <vfprintf+0xb8>
    1e70:	80 33       	cpi	r24, 0x30	; 48
    1e72:	69 f4       	brne	.+26     	; 0x1e8e <vfprintf+0xbe>
    1e74:	23 2d       	mov	r18, r3
    1e76:	21 60       	ori	r18, 0x01	; 1
    1e78:	16 c0       	rjmp	.+44     	; 0x1ea6 <vfprintf+0xd6>
    1e7a:	83 2d       	mov	r24, r3
    1e7c:	82 60       	ori	r24, 0x02	; 2
    1e7e:	38 2e       	mov	r3, r24
    1e80:	e3 2d       	mov	r30, r3
    1e82:	e4 60       	ori	r30, 0x04	; 4
    1e84:	3e 2e       	mov	r3, r30
    1e86:	2a c0       	rjmp	.+84     	; 0x1edc <vfprintf+0x10c>
    1e88:	f3 2d       	mov	r31, r3
    1e8a:	f8 60       	ori	r31, 0x08	; 8
    1e8c:	1d c0       	rjmp	.+58     	; 0x1ec8 <vfprintf+0xf8>
    1e8e:	37 fc       	sbrc	r3, 7
    1e90:	2d c0       	rjmp	.+90     	; 0x1eec <vfprintf+0x11c>
    1e92:	20 ed       	ldi	r18, 0xD0	; 208
    1e94:	28 0f       	add	r18, r24
    1e96:	2a 30       	cpi	r18, 0x0A	; 10
    1e98:	40 f0       	brcs	.+16     	; 0x1eaa <vfprintf+0xda>
    1e9a:	8e 32       	cpi	r24, 0x2E	; 46
    1e9c:	b9 f4       	brne	.+46     	; 0x1ecc <vfprintf+0xfc>
    1e9e:	36 fc       	sbrc	r3, 6
    1ea0:	75 c1       	rjmp	.+746    	; 0x218c <vfprintf+0x3bc>
    1ea2:	23 2d       	mov	r18, r3
    1ea4:	20 64       	ori	r18, 0x40	; 64
    1ea6:	32 2e       	mov	r3, r18
    1ea8:	19 c0       	rjmp	.+50     	; 0x1edc <vfprintf+0x10c>
    1eaa:	36 fe       	sbrs	r3, 6
    1eac:	06 c0       	rjmp	.+12     	; 0x1eba <vfprintf+0xea>
    1eae:	8a e0       	ldi	r24, 0x0A	; 10
    1eb0:	98 9e       	mul	r9, r24
    1eb2:	20 0d       	add	r18, r0
    1eb4:	11 24       	eor	r1, r1
    1eb6:	92 2e       	mov	r9, r18
    1eb8:	11 c0       	rjmp	.+34     	; 0x1edc <vfprintf+0x10c>
    1eba:	ea e0       	ldi	r30, 0x0A	; 10
    1ebc:	2e 9e       	mul	r2, r30
    1ebe:	20 0d       	add	r18, r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	22 2e       	mov	r2, r18
    1ec4:	f3 2d       	mov	r31, r3
    1ec6:	f0 62       	ori	r31, 0x20	; 32
    1ec8:	3f 2e       	mov	r3, r31
    1eca:	08 c0       	rjmp	.+16     	; 0x1edc <vfprintf+0x10c>
    1ecc:	8c 36       	cpi	r24, 0x6C	; 108
    1ece:	21 f4       	brne	.+8      	; 0x1ed8 <vfprintf+0x108>
    1ed0:	83 2d       	mov	r24, r3
    1ed2:	80 68       	ori	r24, 0x80	; 128
    1ed4:	38 2e       	mov	r3, r24
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <vfprintf+0x10c>
    1ed8:	88 36       	cpi	r24, 0x68	; 104
    1eda:	41 f4       	brne	.+16     	; 0x1eec <vfprintf+0x11c>
    1edc:	f7 01       	movw	r30, r14
    1ede:	93 fd       	sbrc	r25, 3
    1ee0:	85 91       	lpm	r24, Z+
    1ee2:	93 ff       	sbrs	r25, 3
    1ee4:	81 91       	ld	r24, Z+
    1ee6:	7f 01       	movw	r14, r30
    1ee8:	81 11       	cpse	r24, r1
    1eea:	b3 cf       	rjmp	.-154    	; 0x1e52 <vfprintf+0x82>
    1eec:	98 2f       	mov	r25, r24
    1eee:	9f 7d       	andi	r25, 0xDF	; 223
    1ef0:	95 54       	subi	r25, 0x45	; 69
    1ef2:	93 30       	cpi	r25, 0x03	; 3
    1ef4:	28 f4       	brcc	.+10     	; 0x1f00 <vfprintf+0x130>
    1ef6:	0c 5f       	subi	r16, 0xFC	; 252
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	9f e3       	ldi	r25, 0x3F	; 63
    1efc:	99 83       	std	Y+1, r25	; 0x01
    1efe:	0d c0       	rjmp	.+26     	; 0x1f1a <vfprintf+0x14a>
    1f00:	83 36       	cpi	r24, 0x63	; 99
    1f02:	31 f0       	breq	.+12     	; 0x1f10 <vfprintf+0x140>
    1f04:	83 37       	cpi	r24, 0x73	; 115
    1f06:	71 f0       	breq	.+28     	; 0x1f24 <vfprintf+0x154>
    1f08:	83 35       	cpi	r24, 0x53	; 83
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <vfprintf+0x13e>
    1f0c:	55 c0       	rjmp	.+170    	; 0x1fb8 <vfprintf+0x1e8>
    1f0e:	20 c0       	rjmp	.+64     	; 0x1f50 <vfprintf+0x180>
    1f10:	f8 01       	movw	r30, r16
    1f12:	80 81       	ld	r24, Z
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	0e 5f       	subi	r16, 0xFE	; 254
    1f18:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1a:	88 24       	eor	r8, r8
    1f1c:	83 94       	inc	r8
    1f1e:	91 2c       	mov	r9, r1
    1f20:	53 01       	movw	r10, r6
    1f22:	12 c0       	rjmp	.+36     	; 0x1f48 <vfprintf+0x178>
    1f24:	28 01       	movw	r4, r16
    1f26:	f2 e0       	ldi	r31, 0x02	; 2
    1f28:	4f 0e       	add	r4, r31
    1f2a:	51 1c       	adc	r5, r1
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	a0 80       	ld	r10, Z
    1f30:	b1 80       	ldd	r11, Z+1	; 0x01
    1f32:	36 fe       	sbrs	r3, 6
    1f34:	03 c0       	rjmp	.+6      	; 0x1f3c <vfprintf+0x16c>
    1f36:	69 2d       	mov	r22, r9
    1f38:	70 e0       	ldi	r23, 0x00	; 0
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <vfprintf+0x170>
    1f3c:	6f ef       	ldi	r22, 0xFF	; 255
    1f3e:	7f ef       	ldi	r23, 0xFF	; 255
    1f40:	c5 01       	movw	r24, r10
    1f42:	4e d1       	rcall	.+668    	; 0x21e0 <strnlen>
    1f44:	4c 01       	movw	r8, r24
    1f46:	82 01       	movw	r16, r4
    1f48:	f3 2d       	mov	r31, r3
    1f4a:	ff 77       	andi	r31, 0x7F	; 127
    1f4c:	3f 2e       	mov	r3, r31
    1f4e:	15 c0       	rjmp	.+42     	; 0x1f7a <vfprintf+0x1aa>
    1f50:	28 01       	movw	r4, r16
    1f52:	22 e0       	ldi	r18, 0x02	; 2
    1f54:	42 0e       	add	r4, r18
    1f56:	51 1c       	adc	r5, r1
    1f58:	f8 01       	movw	r30, r16
    1f5a:	a0 80       	ld	r10, Z
    1f5c:	b1 80       	ldd	r11, Z+1	; 0x01
    1f5e:	36 fe       	sbrs	r3, 6
    1f60:	03 c0       	rjmp	.+6      	; 0x1f68 <vfprintf+0x198>
    1f62:	69 2d       	mov	r22, r9
    1f64:	70 e0       	ldi	r23, 0x00	; 0
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <vfprintf+0x19c>
    1f68:	6f ef       	ldi	r22, 0xFF	; 255
    1f6a:	7f ef       	ldi	r23, 0xFF	; 255
    1f6c:	c5 01       	movw	r24, r10
    1f6e:	2d d1       	rcall	.+602    	; 0x21ca <strnlen_P>
    1f70:	4c 01       	movw	r8, r24
    1f72:	f3 2d       	mov	r31, r3
    1f74:	f0 68       	ori	r31, 0x80	; 128
    1f76:	3f 2e       	mov	r3, r31
    1f78:	82 01       	movw	r16, r4
    1f7a:	33 fc       	sbrc	r3, 3
    1f7c:	19 c0       	rjmp	.+50     	; 0x1fb0 <vfprintf+0x1e0>
    1f7e:	82 2d       	mov	r24, r2
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	88 16       	cp	r8, r24
    1f84:	99 06       	cpc	r9, r25
    1f86:	a0 f4       	brcc	.+40     	; 0x1fb0 <vfprintf+0x1e0>
    1f88:	b6 01       	movw	r22, r12
    1f8a:	80 e2       	ldi	r24, 0x20	; 32
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	33 d1       	rcall	.+614    	; 0x21f6 <fputc>
    1f90:	2a 94       	dec	r2
    1f92:	f5 cf       	rjmp	.-22     	; 0x1f7e <vfprintf+0x1ae>
    1f94:	f5 01       	movw	r30, r10
    1f96:	37 fc       	sbrc	r3, 7
    1f98:	85 91       	lpm	r24, Z+
    1f9a:	37 fe       	sbrs	r3, 7
    1f9c:	81 91       	ld	r24, Z+
    1f9e:	5f 01       	movw	r10, r30
    1fa0:	b6 01       	movw	r22, r12
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	28 d1       	rcall	.+592    	; 0x21f6 <fputc>
    1fa6:	21 10       	cpse	r2, r1
    1fa8:	2a 94       	dec	r2
    1faa:	21 e0       	ldi	r18, 0x01	; 1
    1fac:	82 1a       	sub	r8, r18
    1fae:	91 08       	sbc	r9, r1
    1fb0:	81 14       	cp	r8, r1
    1fb2:	91 04       	cpc	r9, r1
    1fb4:	79 f7       	brne	.-34     	; 0x1f94 <vfprintf+0x1c4>
    1fb6:	e1 c0       	rjmp	.+450    	; 0x217a <vfprintf+0x3aa>
    1fb8:	84 36       	cpi	r24, 0x64	; 100
    1fba:	11 f0       	breq	.+4      	; 0x1fc0 <vfprintf+0x1f0>
    1fbc:	89 36       	cpi	r24, 0x69	; 105
    1fbe:	39 f5       	brne	.+78     	; 0x200e <vfprintf+0x23e>
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	37 fe       	sbrs	r3, 7
    1fc4:	07 c0       	rjmp	.+14     	; 0x1fd4 <vfprintf+0x204>
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	0c 5f       	subi	r16, 0xFC	; 252
    1fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd2:	08 c0       	rjmp	.+16     	; 0x1fe4 <vfprintf+0x214>
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	07 2e       	mov	r0, r23
    1fda:	00 0c       	add	r0, r0
    1fdc:	88 0b       	sbc	r24, r24
    1fde:	99 0b       	sbc	r25, r25
    1fe0:	0e 5f       	subi	r16, 0xFE	; 254
    1fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe4:	f3 2d       	mov	r31, r3
    1fe6:	ff 76       	andi	r31, 0x6F	; 111
    1fe8:	3f 2e       	mov	r3, r31
    1fea:	97 ff       	sbrs	r25, 7
    1fec:	09 c0       	rjmp	.+18     	; 0x2000 <vfprintf+0x230>
    1fee:	90 95       	com	r25
    1ff0:	80 95       	com	r24
    1ff2:	70 95       	com	r23
    1ff4:	61 95       	neg	r22
    1ff6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff8:	8f 4f       	sbci	r24, 0xFF	; 255
    1ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffc:	f0 68       	ori	r31, 0x80	; 128
    1ffe:	3f 2e       	mov	r3, r31
    2000:	2a e0       	ldi	r18, 0x0A	; 10
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	a3 01       	movw	r20, r6
    2006:	33 d1       	rcall	.+614    	; 0x226e <__ultoa_invert>
    2008:	88 2e       	mov	r8, r24
    200a:	86 18       	sub	r8, r6
    200c:	44 c0       	rjmp	.+136    	; 0x2096 <vfprintf+0x2c6>
    200e:	85 37       	cpi	r24, 0x75	; 117
    2010:	31 f4       	brne	.+12     	; 0x201e <vfprintf+0x24e>
    2012:	23 2d       	mov	r18, r3
    2014:	2f 7e       	andi	r18, 0xEF	; 239
    2016:	b2 2e       	mov	r11, r18
    2018:	2a e0       	ldi	r18, 0x0A	; 10
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	25 c0       	rjmp	.+74     	; 0x2068 <vfprintf+0x298>
    201e:	93 2d       	mov	r25, r3
    2020:	99 7f       	andi	r25, 0xF9	; 249
    2022:	b9 2e       	mov	r11, r25
    2024:	8f 36       	cpi	r24, 0x6F	; 111
    2026:	c1 f0       	breq	.+48     	; 0x2058 <vfprintf+0x288>
    2028:	18 f4       	brcc	.+6      	; 0x2030 <vfprintf+0x260>
    202a:	88 35       	cpi	r24, 0x58	; 88
    202c:	79 f0       	breq	.+30     	; 0x204c <vfprintf+0x27c>
    202e:	ae c0       	rjmp	.+348    	; 0x218c <vfprintf+0x3bc>
    2030:	80 37       	cpi	r24, 0x70	; 112
    2032:	19 f0       	breq	.+6      	; 0x203a <vfprintf+0x26a>
    2034:	88 37       	cpi	r24, 0x78	; 120
    2036:	21 f0       	breq	.+8      	; 0x2040 <vfprintf+0x270>
    2038:	a9 c0       	rjmp	.+338    	; 0x218c <vfprintf+0x3bc>
    203a:	e9 2f       	mov	r30, r25
    203c:	e0 61       	ori	r30, 0x10	; 16
    203e:	be 2e       	mov	r11, r30
    2040:	b4 fe       	sbrs	r11, 4
    2042:	0d c0       	rjmp	.+26     	; 0x205e <vfprintf+0x28e>
    2044:	fb 2d       	mov	r31, r11
    2046:	f4 60       	ori	r31, 0x04	; 4
    2048:	bf 2e       	mov	r11, r31
    204a:	09 c0       	rjmp	.+18     	; 0x205e <vfprintf+0x28e>
    204c:	34 fe       	sbrs	r3, 4
    204e:	0a c0       	rjmp	.+20     	; 0x2064 <vfprintf+0x294>
    2050:	29 2f       	mov	r18, r25
    2052:	26 60       	ori	r18, 0x06	; 6
    2054:	b2 2e       	mov	r11, r18
    2056:	06 c0       	rjmp	.+12     	; 0x2064 <vfprintf+0x294>
    2058:	28 e0       	ldi	r18, 0x08	; 8
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	05 c0       	rjmp	.+10     	; 0x2068 <vfprintf+0x298>
    205e:	20 e1       	ldi	r18, 0x10	; 16
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <vfprintf+0x298>
    2064:	20 e1       	ldi	r18, 0x10	; 16
    2066:	32 e0       	ldi	r19, 0x02	; 2
    2068:	f8 01       	movw	r30, r16
    206a:	b7 fe       	sbrs	r11, 7
    206c:	07 c0       	rjmp	.+14     	; 0x207c <vfprintf+0x2ac>
    206e:	60 81       	ld	r22, Z
    2070:	71 81       	ldd	r23, Z+1	; 0x01
    2072:	82 81       	ldd	r24, Z+2	; 0x02
    2074:	93 81       	ldd	r25, Z+3	; 0x03
    2076:	0c 5f       	subi	r16, 0xFC	; 252
    2078:	1f 4f       	sbci	r17, 0xFF	; 255
    207a:	06 c0       	rjmp	.+12     	; 0x2088 <vfprintf+0x2b8>
    207c:	60 81       	ld	r22, Z
    207e:	71 81       	ldd	r23, Z+1	; 0x01
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	0e 5f       	subi	r16, 0xFE	; 254
    2086:	1f 4f       	sbci	r17, 0xFF	; 255
    2088:	a3 01       	movw	r20, r6
    208a:	f1 d0       	rcall	.+482    	; 0x226e <__ultoa_invert>
    208c:	88 2e       	mov	r8, r24
    208e:	86 18       	sub	r8, r6
    2090:	fb 2d       	mov	r31, r11
    2092:	ff 77       	andi	r31, 0x7F	; 127
    2094:	3f 2e       	mov	r3, r31
    2096:	36 fe       	sbrs	r3, 6
    2098:	0d c0       	rjmp	.+26     	; 0x20b4 <vfprintf+0x2e4>
    209a:	23 2d       	mov	r18, r3
    209c:	2e 7f       	andi	r18, 0xFE	; 254
    209e:	a2 2e       	mov	r10, r18
    20a0:	89 14       	cp	r8, r9
    20a2:	58 f4       	brcc	.+22     	; 0x20ba <vfprintf+0x2ea>
    20a4:	34 fe       	sbrs	r3, 4
    20a6:	0b c0       	rjmp	.+22     	; 0x20be <vfprintf+0x2ee>
    20a8:	32 fc       	sbrc	r3, 2
    20aa:	09 c0       	rjmp	.+18     	; 0x20be <vfprintf+0x2ee>
    20ac:	83 2d       	mov	r24, r3
    20ae:	8e 7e       	andi	r24, 0xEE	; 238
    20b0:	a8 2e       	mov	r10, r24
    20b2:	05 c0       	rjmp	.+10     	; 0x20be <vfprintf+0x2ee>
    20b4:	b8 2c       	mov	r11, r8
    20b6:	a3 2c       	mov	r10, r3
    20b8:	03 c0       	rjmp	.+6      	; 0x20c0 <vfprintf+0x2f0>
    20ba:	b8 2c       	mov	r11, r8
    20bc:	01 c0       	rjmp	.+2      	; 0x20c0 <vfprintf+0x2f0>
    20be:	b9 2c       	mov	r11, r9
    20c0:	a4 fe       	sbrs	r10, 4
    20c2:	0f c0       	rjmp	.+30     	; 0x20e2 <vfprintf+0x312>
    20c4:	fe 01       	movw	r30, r28
    20c6:	e8 0d       	add	r30, r8
    20c8:	f1 1d       	adc	r31, r1
    20ca:	80 81       	ld	r24, Z
    20cc:	80 33       	cpi	r24, 0x30	; 48
    20ce:	21 f4       	brne	.+8      	; 0x20d8 <vfprintf+0x308>
    20d0:	9a 2d       	mov	r25, r10
    20d2:	99 7e       	andi	r25, 0xE9	; 233
    20d4:	a9 2e       	mov	r10, r25
    20d6:	09 c0       	rjmp	.+18     	; 0x20ea <vfprintf+0x31a>
    20d8:	a2 fe       	sbrs	r10, 2
    20da:	06 c0       	rjmp	.+12     	; 0x20e8 <vfprintf+0x318>
    20dc:	b3 94       	inc	r11
    20de:	b3 94       	inc	r11
    20e0:	04 c0       	rjmp	.+8      	; 0x20ea <vfprintf+0x31a>
    20e2:	8a 2d       	mov	r24, r10
    20e4:	86 78       	andi	r24, 0x86	; 134
    20e6:	09 f0       	breq	.+2      	; 0x20ea <vfprintf+0x31a>
    20e8:	b3 94       	inc	r11
    20ea:	a3 fc       	sbrc	r10, 3
    20ec:	10 c0       	rjmp	.+32     	; 0x210e <vfprintf+0x33e>
    20ee:	a0 fe       	sbrs	r10, 0
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <vfprintf+0x32e>
    20f2:	b2 14       	cp	r11, r2
    20f4:	80 f4       	brcc	.+32     	; 0x2116 <vfprintf+0x346>
    20f6:	28 0c       	add	r2, r8
    20f8:	92 2c       	mov	r9, r2
    20fa:	9b 18       	sub	r9, r11
    20fc:	0d c0       	rjmp	.+26     	; 0x2118 <vfprintf+0x348>
    20fe:	b2 14       	cp	r11, r2
    2100:	58 f4       	brcc	.+22     	; 0x2118 <vfprintf+0x348>
    2102:	b6 01       	movw	r22, r12
    2104:	80 e2       	ldi	r24, 0x20	; 32
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	76 d0       	rcall	.+236    	; 0x21f6 <fputc>
    210a:	b3 94       	inc	r11
    210c:	f8 cf       	rjmp	.-16     	; 0x20fe <vfprintf+0x32e>
    210e:	b2 14       	cp	r11, r2
    2110:	18 f4       	brcc	.+6      	; 0x2118 <vfprintf+0x348>
    2112:	2b 18       	sub	r2, r11
    2114:	02 c0       	rjmp	.+4      	; 0x211a <vfprintf+0x34a>
    2116:	98 2c       	mov	r9, r8
    2118:	21 2c       	mov	r2, r1
    211a:	a4 fe       	sbrs	r10, 4
    211c:	0f c0       	rjmp	.+30     	; 0x213c <vfprintf+0x36c>
    211e:	b6 01       	movw	r22, r12
    2120:	80 e3       	ldi	r24, 0x30	; 48
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	68 d0       	rcall	.+208    	; 0x21f6 <fputc>
    2126:	a2 fe       	sbrs	r10, 2
    2128:	16 c0       	rjmp	.+44     	; 0x2156 <vfprintf+0x386>
    212a:	a1 fc       	sbrc	r10, 1
    212c:	03 c0       	rjmp	.+6      	; 0x2134 <vfprintf+0x364>
    212e:	88 e7       	ldi	r24, 0x78	; 120
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <vfprintf+0x368>
    2134:	88 e5       	ldi	r24, 0x58	; 88
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	b6 01       	movw	r22, r12
    213a:	0c c0       	rjmp	.+24     	; 0x2154 <vfprintf+0x384>
    213c:	8a 2d       	mov	r24, r10
    213e:	86 78       	andi	r24, 0x86	; 134
    2140:	51 f0       	breq	.+20     	; 0x2156 <vfprintf+0x386>
    2142:	a1 fe       	sbrs	r10, 1
    2144:	02 c0       	rjmp	.+4      	; 0x214a <vfprintf+0x37a>
    2146:	8b e2       	ldi	r24, 0x2B	; 43
    2148:	01 c0       	rjmp	.+2      	; 0x214c <vfprintf+0x37c>
    214a:	80 e2       	ldi	r24, 0x20	; 32
    214c:	a7 fc       	sbrc	r10, 7
    214e:	8d e2       	ldi	r24, 0x2D	; 45
    2150:	b6 01       	movw	r22, r12
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	50 d0       	rcall	.+160    	; 0x21f6 <fputc>
    2156:	89 14       	cp	r8, r9
    2158:	30 f4       	brcc	.+12     	; 0x2166 <vfprintf+0x396>
    215a:	b6 01       	movw	r22, r12
    215c:	80 e3       	ldi	r24, 0x30	; 48
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	4a d0       	rcall	.+148    	; 0x21f6 <fputc>
    2162:	9a 94       	dec	r9
    2164:	f8 cf       	rjmp	.-16     	; 0x2156 <vfprintf+0x386>
    2166:	8a 94       	dec	r8
    2168:	f3 01       	movw	r30, r6
    216a:	e8 0d       	add	r30, r8
    216c:	f1 1d       	adc	r31, r1
    216e:	80 81       	ld	r24, Z
    2170:	b6 01       	movw	r22, r12
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	40 d0       	rcall	.+128    	; 0x21f6 <fputc>
    2176:	81 10       	cpse	r8, r1
    2178:	f6 cf       	rjmp	.-20     	; 0x2166 <vfprintf+0x396>
    217a:	22 20       	and	r2, r2
    217c:	09 f4       	brne	.+2      	; 0x2180 <vfprintf+0x3b0>
    217e:	4e ce       	rjmp	.-868    	; 0x1e1c <vfprintf+0x4c>
    2180:	b6 01       	movw	r22, r12
    2182:	80 e2       	ldi	r24, 0x20	; 32
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	37 d0       	rcall	.+110    	; 0x21f6 <fputc>
    2188:	2a 94       	dec	r2
    218a:	f7 cf       	rjmp	.-18     	; 0x217a <vfprintf+0x3aa>
    218c:	f6 01       	movw	r30, r12
    218e:	86 81       	ldd	r24, Z+6	; 0x06
    2190:	97 81       	ldd	r25, Z+7	; 0x07
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <vfprintf+0x3c8>
    2194:	8f ef       	ldi	r24, 0xFF	; 255
    2196:	9f ef       	ldi	r25, 0xFF	; 255
    2198:	2b 96       	adiw	r28, 0x0b	; 11
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	df 90       	pop	r13
    21b2:	cf 90       	pop	r12
    21b4:	bf 90       	pop	r11
    21b6:	af 90       	pop	r10
    21b8:	9f 90       	pop	r9
    21ba:	8f 90       	pop	r8
    21bc:	7f 90       	pop	r7
    21be:	6f 90       	pop	r6
    21c0:	5f 90       	pop	r5
    21c2:	4f 90       	pop	r4
    21c4:	3f 90       	pop	r3
    21c6:	2f 90       	pop	r2
    21c8:	08 95       	ret

000021ca <strnlen_P>:
    21ca:	fc 01       	movw	r30, r24
    21cc:	05 90       	lpm	r0, Z+
    21ce:	61 50       	subi	r22, 0x01	; 1
    21d0:	70 40       	sbci	r23, 0x00	; 0
    21d2:	01 10       	cpse	r0, r1
    21d4:	d8 f7       	brcc	.-10     	; 0x21cc <strnlen_P+0x2>
    21d6:	80 95       	com	r24
    21d8:	90 95       	com	r25
    21da:	8e 0f       	add	r24, r30
    21dc:	9f 1f       	adc	r25, r31
    21de:	08 95       	ret

000021e0 <strnlen>:
    21e0:	fc 01       	movw	r30, r24
    21e2:	61 50       	subi	r22, 0x01	; 1
    21e4:	70 40       	sbci	r23, 0x00	; 0
    21e6:	01 90       	ld	r0, Z+
    21e8:	01 10       	cpse	r0, r1
    21ea:	d8 f7       	brcc	.-10     	; 0x21e2 <strnlen+0x2>
    21ec:	80 95       	com	r24
    21ee:	90 95       	com	r25
    21f0:	8e 0f       	add	r24, r30
    21f2:	9f 1f       	adc	r25, r31
    21f4:	08 95       	ret

000021f6 <fputc>:
    21f6:	0f 93       	push	r16
    21f8:	1f 93       	push	r17
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	fb 01       	movw	r30, r22
    2200:	23 81       	ldd	r18, Z+3	; 0x03
    2202:	21 fd       	sbrc	r18, 1
    2204:	03 c0       	rjmp	.+6      	; 0x220c <fputc+0x16>
    2206:	8f ef       	ldi	r24, 0xFF	; 255
    2208:	9f ef       	ldi	r25, 0xFF	; 255
    220a:	2c c0       	rjmp	.+88     	; 0x2264 <fputc+0x6e>
    220c:	22 ff       	sbrs	r18, 2
    220e:	16 c0       	rjmp	.+44     	; 0x223c <fputc+0x46>
    2210:	46 81       	ldd	r20, Z+6	; 0x06
    2212:	57 81       	ldd	r21, Z+7	; 0x07
    2214:	24 81       	ldd	r18, Z+4	; 0x04
    2216:	35 81       	ldd	r19, Z+5	; 0x05
    2218:	42 17       	cp	r20, r18
    221a:	53 07       	cpc	r21, r19
    221c:	44 f4       	brge	.+16     	; 0x222e <fputc+0x38>
    221e:	a0 81       	ld	r26, Z
    2220:	b1 81       	ldd	r27, Z+1	; 0x01
    2222:	9d 01       	movw	r18, r26
    2224:	2f 5f       	subi	r18, 0xFF	; 255
    2226:	3f 4f       	sbci	r19, 0xFF	; 255
    2228:	31 83       	std	Z+1, r19	; 0x01
    222a:	20 83       	st	Z, r18
    222c:	8c 93       	st	X, r24
    222e:	26 81       	ldd	r18, Z+6	; 0x06
    2230:	37 81       	ldd	r19, Z+7	; 0x07
    2232:	2f 5f       	subi	r18, 0xFF	; 255
    2234:	3f 4f       	sbci	r19, 0xFF	; 255
    2236:	37 83       	std	Z+7, r19	; 0x07
    2238:	26 83       	std	Z+6, r18	; 0x06
    223a:	14 c0       	rjmp	.+40     	; 0x2264 <fputc+0x6e>
    223c:	8b 01       	movw	r16, r22
    223e:	ec 01       	movw	r28, r24
    2240:	fb 01       	movw	r30, r22
    2242:	00 84       	ldd	r0, Z+8	; 0x08
    2244:	f1 85       	ldd	r31, Z+9	; 0x09
    2246:	e0 2d       	mov	r30, r0
    2248:	09 95       	icall
    224a:	89 2b       	or	r24, r25
    224c:	e1 f6       	brne	.-72     	; 0x2206 <fputc+0x10>
    224e:	d8 01       	movw	r26, r16
    2250:	16 96       	adiw	r26, 0x06	; 6
    2252:	8d 91       	ld	r24, X+
    2254:	9c 91       	ld	r25, X
    2256:	17 97       	sbiw	r26, 0x07	; 7
    2258:	01 96       	adiw	r24, 0x01	; 1
    225a:	17 96       	adiw	r26, 0x07	; 7
    225c:	9c 93       	st	X, r25
    225e:	8e 93       	st	-X, r24
    2260:	16 97       	sbiw	r26, 0x06	; 6
    2262:	ce 01       	movw	r24, r28
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	1f 91       	pop	r17
    226a:	0f 91       	pop	r16
    226c:	08 95       	ret

0000226e <__ultoa_invert>:
    226e:	fa 01       	movw	r30, r20
    2270:	aa 27       	eor	r26, r26
    2272:	28 30       	cpi	r18, 0x08	; 8
    2274:	51 f1       	breq	.+84     	; 0x22ca <__ultoa_invert+0x5c>
    2276:	20 31       	cpi	r18, 0x10	; 16
    2278:	81 f1       	breq	.+96     	; 0x22da <__ultoa_invert+0x6c>
    227a:	e8 94       	clt
    227c:	6f 93       	push	r22
    227e:	6e 7f       	andi	r22, 0xFE	; 254
    2280:	6e 5f       	subi	r22, 0xFE	; 254
    2282:	7f 4f       	sbci	r23, 0xFF	; 255
    2284:	8f 4f       	sbci	r24, 0xFF	; 255
    2286:	9f 4f       	sbci	r25, 0xFF	; 255
    2288:	af 4f       	sbci	r26, 0xFF	; 255
    228a:	b1 e0       	ldi	r27, 0x01	; 1
    228c:	3e d0       	rcall	.+124    	; 0x230a <__ultoa_invert+0x9c>
    228e:	b4 e0       	ldi	r27, 0x04	; 4
    2290:	3c d0       	rcall	.+120    	; 0x230a <__ultoa_invert+0x9c>
    2292:	67 0f       	add	r22, r23
    2294:	78 1f       	adc	r23, r24
    2296:	89 1f       	adc	r24, r25
    2298:	9a 1f       	adc	r25, r26
    229a:	a1 1d       	adc	r26, r1
    229c:	68 0f       	add	r22, r24
    229e:	79 1f       	adc	r23, r25
    22a0:	8a 1f       	adc	r24, r26
    22a2:	91 1d       	adc	r25, r1
    22a4:	a1 1d       	adc	r26, r1
    22a6:	6a 0f       	add	r22, r26
    22a8:	71 1d       	adc	r23, r1
    22aa:	81 1d       	adc	r24, r1
    22ac:	91 1d       	adc	r25, r1
    22ae:	a1 1d       	adc	r26, r1
    22b0:	20 d0       	rcall	.+64     	; 0x22f2 <__ultoa_invert+0x84>
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <__ultoa_invert+0x48>
    22b4:	68 94       	set
    22b6:	3f 91       	pop	r19
    22b8:	2a e0       	ldi	r18, 0x0A	; 10
    22ba:	26 9f       	mul	r18, r22
    22bc:	11 24       	eor	r1, r1
    22be:	30 19       	sub	r19, r0
    22c0:	30 5d       	subi	r19, 0xD0	; 208
    22c2:	31 93       	st	Z+, r19
    22c4:	de f6       	brtc	.-74     	; 0x227c <__ultoa_invert+0xe>
    22c6:	cf 01       	movw	r24, r30
    22c8:	08 95       	ret
    22ca:	46 2f       	mov	r20, r22
    22cc:	47 70       	andi	r20, 0x07	; 7
    22ce:	40 5d       	subi	r20, 0xD0	; 208
    22d0:	41 93       	st	Z+, r20
    22d2:	b3 e0       	ldi	r27, 0x03	; 3
    22d4:	0f d0       	rcall	.+30     	; 0x22f4 <__ultoa_invert+0x86>
    22d6:	c9 f7       	brne	.-14     	; 0x22ca <__ultoa_invert+0x5c>
    22d8:	f6 cf       	rjmp	.-20     	; 0x22c6 <__ultoa_invert+0x58>
    22da:	46 2f       	mov	r20, r22
    22dc:	4f 70       	andi	r20, 0x0F	; 15
    22de:	40 5d       	subi	r20, 0xD0	; 208
    22e0:	4a 33       	cpi	r20, 0x3A	; 58
    22e2:	18 f0       	brcs	.+6      	; 0x22ea <__ultoa_invert+0x7c>
    22e4:	49 5d       	subi	r20, 0xD9	; 217
    22e6:	31 fd       	sbrc	r19, 1
    22e8:	40 52       	subi	r20, 0x20	; 32
    22ea:	41 93       	st	Z+, r20
    22ec:	02 d0       	rcall	.+4      	; 0x22f2 <__ultoa_invert+0x84>
    22ee:	a9 f7       	brne	.-22     	; 0x22da <__ultoa_invert+0x6c>
    22f0:	ea cf       	rjmp	.-44     	; 0x22c6 <__ultoa_invert+0x58>
    22f2:	b4 e0       	ldi	r27, 0x04	; 4
    22f4:	a6 95       	lsr	r26
    22f6:	97 95       	ror	r25
    22f8:	87 95       	ror	r24
    22fa:	77 95       	ror	r23
    22fc:	67 95       	ror	r22
    22fe:	ba 95       	dec	r27
    2300:	c9 f7       	brne	.-14     	; 0x22f4 <__ultoa_invert+0x86>
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	61 05       	cpc	r22, r1
    2306:	71 05       	cpc	r23, r1
    2308:	08 95       	ret
    230a:	9b 01       	movw	r18, r22
    230c:	ac 01       	movw	r20, r24
    230e:	0a 2e       	mov	r0, r26
    2310:	06 94       	lsr	r0
    2312:	57 95       	ror	r21
    2314:	47 95       	ror	r20
    2316:	37 95       	ror	r19
    2318:	27 95       	ror	r18
    231a:	ba 95       	dec	r27
    231c:	c9 f7       	brne	.-14     	; 0x2310 <__ultoa_invert+0xa2>
    231e:	62 0f       	add	r22, r18
    2320:	73 1f       	adc	r23, r19
    2322:	84 1f       	adc	r24, r20
    2324:	95 1f       	adc	r25, r21
    2326:	a0 1d       	adc	r26, r0
    2328:	08 95       	ret

0000232a <_exit>:
    232a:	f8 94       	cli

0000232c <__stop_program>:
    232c:	ff cf       	rjmp	.-2      	; 0x232c <__stop_program>
