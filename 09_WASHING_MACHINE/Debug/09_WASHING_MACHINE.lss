
09_WASHING_MACHINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00001c46  00001cda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006a0  00800164  00800164  00001d3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fb3  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000129c  00000000  00000000  00003f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001355  00000000  00000000  00005213  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004cc  00000000  00000000  00006568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091f  00000000  00000000  00006a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bf8  00000000  00000000  00007353  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00007f4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 05 09 	jmp	0x120a	; 0x120a <__vector_5>
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d2 c6       	rjmp	.+3492   	; 0xde6 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	ba c7       	rjmp	.+3956   	; 0xfbe <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__vector_30>
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e4       	ldi	r30, 0x46	; 70
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 36       	cpi	r26, 0x64	; 100
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	a4 e6       	ldi	r26, 0x64	; 100
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 30       	cpi	r26, 0x04	; 4
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	fa d6       	rcall	.+3572   	; 0xeb8 <main>
      c4:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <init_button>:
// 00001111
// DDRD &= 0x0f; // 4, 5, 6, 7을 input. PORTD.4 가독성이 떨어진다.

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN | 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN);
      ca:	81 b3       	in	r24, 0x11	; 17
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	81 bb       	out	0x11, r24	; 17
      d0:	08 95       	ret

000000d2 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
      d2:	20 b3       	in	r18, 0x10	; 16
      d4:	42 2f       	mov	r20, r18
      d6:	50 e0       	ldi	r21, 0x00	; 0
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <get_button+0x10>
      de:	22 0f       	add	r18, r18
      e0:	33 1f       	adc	r19, r19
      e2:	6a 95       	dec	r22
      e4:	e2 f7       	brpl	.-8      	; 0xde <get_button+0xc>
      e6:	24 23       	and	r18, r20
      e8:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
      ea:	21 15       	cp	r18, r1
      ec:	31 05       	cpc	r19, r1
      ee:	b9 f0       	breq	.+46     	; 0x11e <get_button+0x4c>
      f0:	fc 01       	movw	r30, r24
      f2:	ec 59       	subi	r30, 0x9C	; 156
      f4:	fe 4f       	sbci	r31, 0xFE	; 254
      f6:	40 81       	ld	r20, Z
      f8:	41 11       	cpse	r20, r1
      fa:	11 c0       	rjmp	.+34     	; 0x11e <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fc:	2f ef       	ldi	r18, 0xFF	; 255
      fe:	3d ee       	ldi	r19, 0xED	; 237
     100:	42 e0       	ldi	r20, 0x02	; 2
     102:	21 50       	subi	r18, 0x01	; 1
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	e1 f7       	brne	.-8      	; 0x102 <get_button+0x30>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <get_button+0x3a>
     10c:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     10e:	fc 01       	movw	r30, r24
     110:	ec 59       	subi	r30, 0x9C	; 156
     112:	fe 4f       	sbci	r31, 0xFE	; 254
     114:	21 e0       	ldi	r18, 0x01	; 1
     116:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     11e:	fc 01       	movw	r30, r24
     120:	ec 59       	subi	r30, 0x9C	; 156
     122:	fe 4f       	sbci	r31, 0xFE	; 254
     124:	40 81       	ld	r20, Z
     126:	41 30       	cpi	r20, 0x01	; 1
     128:	91 f4       	brne	.+36     	; 0x14e <get_button+0x7c>
     12a:	23 2b       	or	r18, r19
     12c:	99 f4       	brne	.+38     	; 0x154 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     12e:	fc 01       	movw	r30, r24
     130:	ec 59       	subi	r30, 0x9C	; 156
     132:	fe 4f       	sbci	r31, 0xFE	; 254
     134:	10 82       	st	Z, r1
     136:	8f ef       	ldi	r24, 0xFF	; 255
     138:	9d ee       	ldi	r25, 0xED	; 237
     13a:	22 e0       	ldi	r18, 0x02	; 2
     13c:	81 50       	subi	r24, 0x01	; 1
     13e:	90 40       	sbci	r25, 0x00	; 0
     140:	20 40       	sbci	r18, 0x00	; 0
     142:	e1 f7       	brne	.-8      	; 0x13c <get_button+0x6a>
     144:	00 c0       	rjmp	.+0      	; 0x146 <get_button+0x74>
     146:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	08 95       	ret
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	08 95       	ret

0000015a <main_screen>:
	}
}

void main_screen(void) // 메인 화면
{
	PORTA = 0;
     15a:	1b ba       	out	0x1b, r1	; 27
	loading_rot = 5; // NULL
     15c:	85 e0       	ldi	r24, 0x05	; 5
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     164:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
     168:	08 95       	ret

0000016a <dumy_fanc>:
		}
	}
}

void dumy_fanc()
{
     16a:	08 95       	ret

0000016c <init_fnd>:

////////////////////////////////////////////fnd 초기화 및 fnd 표시 함수들 ///////////////////////////////////////////////////////////

void init_fnd(void)
{
	FND_DATA_DDR = 0xff; // 출력모드로 설정
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	84 bb       	out	0x14, r24	; 20

	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 |
     170:	87 b3       	in	r24, 0x17	; 23
     172:	80 6f       	ori	r24, 0xF0	; 240
     174:	87 bb       	out	0x17, r24	; 23
					 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4;

	FND_DATA_PORT = 0x00; // FND를 all off
     176:	15 ba       	out	0x15, r1	; 21
     178:	08 95       	ret

0000017a <fnd_display>:
}

void fnd_display(void)
{
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
     182:	2b 97       	sbiw	r28, 0x0b	; 11
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	de bf       	out	0x3e, r29	; 62
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	cd bf       	out	0x3d, r28	; 61
						//  0      1       2      3      4      5      6     7      8       9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
     18e:	8b e0       	ldi	r24, 0x0B	; 11
     190:	e4 e3       	ldi	r30, 0x34	; 52
     192:	f1 e0       	ldi	r31, 0x01	; 1
     194:	de 01       	movw	r26, r28
     196:	11 96       	adiw	r26, 0x01	; 1
     198:	01 90       	ld	r0, Z+
     19a:	0d 92       	st	X+, r0
     19c:	8a 95       	dec	r24
     19e:	e1 f7       	brne	.-8      	; 0x198 <fnd_display+0x1e>

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     1a0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <digit_select.1840>
     1a4:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <digit_select.1840+0x1>
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	91 05       	cpc	r25, r1
     1ac:	21 f1       	breq	.+72     	; 0x1f6 <fnd_display+0x7c>
     1ae:	1c f4       	brge	.+6      	; 0x1b6 <fnd_display+0x3c>
     1b0:	89 2b       	or	r24, r25
     1b2:	41 f0       	breq	.+16     	; 0x1c4 <fnd_display+0x4a>
     1b4:	84 c0       	rjmp	.+264    	; 0x2be <fnd_display+0x144>
     1b6:	82 30       	cpi	r24, 0x02	; 2
     1b8:	91 05       	cpc	r25, r1
     1ba:	f1 f1       	breq	.+124    	; 0x238 <fnd_display+0xbe>
     1bc:	03 97       	sbiw	r24, 0x03	; 3
     1be:	09 f4       	brne	.+2      	; 0x1c2 <fnd_display+0x48>
     1c0:	5e c0       	rjmp	.+188    	; 0x27e <fnd_display+0x104>
     1c2:	7d c0       	rjmp	.+250    	; 0x2be <fnd_display+0x144>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     1c4:	8f e7       	ldi	r24, 0x7F	; 127
     1c6:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     1c8:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <sec_count>
     1cc:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <sec_count+0x1>
     1d0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <sec_count+0x2>
     1d4:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <sec_count+0x3>
     1d8:	2a e0       	ldi	r18, 0x0A	; 10
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	40 e0       	ldi	r20, 0x00	; 0
     1de:	50 e0       	ldi	r21, 0x00	; 0
     1e0:	0e 94 10 0b 	call	0x1620	; 0x1620 <__udivmodsi4>
     1e4:	e1 e0       	ldi	r30, 0x01	; 1
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	ec 0f       	add	r30, r28
     1ea:	fd 1f       	adc	r31, r29
     1ec:	e6 0f       	add	r30, r22
     1ee:	f7 1f       	adc	r31, r23
     1f0:	80 81       	ld	r24, Z
     1f2:	85 bb       	out	0x15, r24	; 21
		break;
     1f4:	64 c0       	rjmp	.+200    	; 0x2be <fnd_display+0x144>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     1f6:	8f eb       	ldi	r24, 0xBF	; 191
     1f8:	88 bb       	out	0x18, r24	; 24

		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     1fa:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <sec_count>
     1fe:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <sec_count+0x1>
     202:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <sec_count+0x2>
     206:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <sec_count+0x3>
     20a:	2a e0       	ldi	r18, 0x0A	; 10
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	40 e0       	ldi	r20, 0x00	; 0
     210:	50 e0       	ldi	r21, 0x00	; 0
     212:	0e 94 10 0b 	call	0x1620	; 0x1620 <__udivmodsi4>
     216:	ca 01       	movw	r24, r20
     218:	b9 01       	movw	r22, r18
     21a:	26 e0       	ldi	r18, 0x06	; 6
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	40 e0       	ldi	r20, 0x00	; 0
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	0e 94 10 0b 	call	0x1620	; 0x1620 <__udivmodsi4>
     226:	e1 e0       	ldi	r30, 0x01	; 1
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	ec 0f       	add	r30, r28
     22c:	fd 1f       	adc	r31, r29
     22e:	e6 0f       	add	r30, r22
     230:	f7 1f       	adc	r31, r23
     232:	80 81       	ld	r24, Z
     234:	85 bb       	out	0x15, r24	; 21
		break;
     236:	43 c0       	rjmp	.+134    	; 0x2be <fnd_display+0x144>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     238:	8f ed       	ldi	r24, 0xDF	; 223
     23a:	88 bb       	out	0x18, r24	; 24
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     23c:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <sec_count>
     240:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <sec_count+0x1>
     244:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <sec_count+0x2>
     248:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <sec_count+0x3>
     24c:	2c e3       	ldi	r18, 0x3C	; 60
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	0e 94 10 0b 	call	0x1620	; 0x1620 <__udivmodsi4>
     258:	ca 01       	movw	r24, r20
     25a:	b9 01       	movw	r22, r18
     25c:	2a e0       	ldi	r18, 0x0A	; 10
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	0e 94 10 0b 	call	0x1620	; 0x1620 <__udivmodsi4>
     268:	e1 e0       	ldi	r30, 0x01	; 1
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	ec 0f       	add	r30, r28
     26e:	fd 1f       	adc	r31, r29
     270:	e6 0f       	add	r30, r22
     272:	f7 1f       	adc	r31, r23
     274:	90 81       	ld	r25, Z
     276:	8b 85       	ldd	r24, Y+11	; 0x0b
     278:	89 2b       	or	r24, r25
     27a:	85 bb       	out	0x15, r24	; 21
		break;
     27c:	20 c0       	rjmp	.+64     	; 0x2be <fnd_display+0x144>

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     27e:	8f ee       	ldi	r24, 0xEF	; 239
     280:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count / 600 % 6]; // 10단위 분
     282:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <sec_count>
     286:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <sec_count+0x1>
     28a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <sec_count+0x2>
     28e:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <sec_count+0x3>
     292:	28 e5       	ldi	r18, 0x58	; 88
     294:	32 e0       	ldi	r19, 0x02	; 2
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	0e 94 10 0b 	call	0x1620	; 0x1620 <__udivmodsi4>
     29e:	ca 01       	movw	r24, r20
     2a0:	b9 01       	movw	r22, r18
     2a2:	26 e0       	ldi	r18, 0x06	; 6
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	40 e0       	ldi	r20, 0x00	; 0
     2a8:	50 e0       	ldi	r21, 0x00	; 0
     2aa:	0e 94 10 0b 	call	0x1620	; 0x1620 <__udivmodsi4>
     2ae:	e1 e0       	ldi	r30, 0x01	; 1
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	ec 0f       	add	r30, r28
     2b4:	fd 1f       	adc	r31, r29
     2b6:	e6 0f       	add	r30, r22
     2b8:	f7 1f       	adc	r31, r23
     2ba:	80 81       	ld	r24, Z
     2bc:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
     2be:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <digit_select.1840>
     2c2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <digit_select.1840+0x1>
     2c6:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
     2c8:	83 70       	andi	r24, 0x03	; 3
     2ca:	90 78       	andi	r25, 0x80	; 128
     2cc:	99 23       	and	r25, r25
     2ce:	24 f4       	brge	.+8      	; 0x2d8 <fnd_display+0x15e>
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	8c 6f       	ori	r24, 0xFC	; 252
     2d4:	9f 6f       	ori	r25, 0xFF	; 255
     2d6:	01 96       	adiw	r24, 0x01	; 1
     2d8:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <digit_select.1840+0x1>
     2dc:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <digit_select.1840>
}
     2e0:	2b 96       	adiw	r28, 0x0b	; 11
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	cd bf       	out	0x3d, r28	; 61
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <custom_wash>:
////////////////////////////////////////////메인화면에서 동작하는 함수들////////////////////////////////////////////////

void custom_wash(void) // 수동 세탁
{

	sec_count = 1;
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b0 e0       	ldi	r27, 0x00	; 0
     2fa:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     2fe:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     302:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     306:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
     30a:	33 c0       	rjmp	.+102    	; 0x372 <custom_wash+0x80>
	{
		if (get_button(BUTTON0, BUTTON0PIN))
		{
			select_wash_mode = 4;
     30c:	84 e0       	ldi	r24, 0x04	; 4
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     314:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
	}
	// 여기까지 수동 세탁의 물온도, 헹굼횟수, 탈수 강도를 선택함 밑에서 지정한 시간만큼 모터가 돌아가고 탈수 강도에 맞게 30초 동안 강도에 맞게 진행
	
	//여기에 시간 만큼 회전하는 함수 추가.
	
}
     318:	08 95       	ret
		if (get_button(BUTTON0, BUTTON0PIN))
		{
			select_wash_mode = 4;
			break;
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     31a:	65 e0       	ldi	r22, 0x05	; 5
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	d7 de       	rcall	.-594    	; 0xd2 <get_button>
     324:	89 2b       	or	r24, r25
     326:	21 f0       	breq	.+8      	; 0x330 <custom_wash+0x3e>
		{
			if (auto_step_led == 0) // 물 온도 선택하기  --- 물온도 변수 필요하고 
			{
				custom_wash_mode = 0;
     328:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <custom_wash_mode+0x1>
     32c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <custom_wash_mode>
			}
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     330:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     334:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     338:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     33c:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     340:	02 97       	sbiw	r24, 0x02	; 2
     342:	a1 05       	cpc	r26, r1
     344:	b1 05       	cpc	r27, r1
     346:	48 f0       	brcs	.+18     	; 0x35a <custom_wash+0x68>
		{
			fnd_refreshrate = 0;
     348:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     34c:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     350:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     354:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     358:	10 df       	rcall	.-480    	; 0x17a <fnd_display>
		}
		custom_wash_select[custom_wash_mode]();
     35a:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <custom_wash_mode>
     35e:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <custom_wash_mode+0x1>
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	e0 50       	subi	r30, 0x00	; 0
     368:	ff 4f       	sbci	r31, 0xFF	; 255
     36a:	01 90       	ld	r0, Z+
     36c:	f0 81       	ld	r31, Z
     36e:	e0 2d       	mov	r30, r0
     370:	09 95       	icall
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
	{
		if (get_button(BUTTON0, BUTTON0PIN))
     372:	64 e0       	ldi	r22, 0x04	; 4
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	ab de       	rcall	.-682    	; 0xd2 <get_button>
     37c:	89 2b       	or	r24, r25
     37e:	69 f2       	breq	.-102    	; 0x31a <custom_wash+0x28>
     380:	c5 cf       	rjmp	.-118    	; 0x30c <custom_wash+0x1a>

00000382 <fast_wash>:
	
}

void fast_wash(void) // 쾌속 세탁
{
	sec_count = 2;
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	a0 e0       	ldi	r26, 0x00	; 0
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     38e:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     392:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     396:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
	while (1)
	{
		if (get_button(BUTTON1, BUTTON1PIN))
     39a:	65 e0       	ldi	r22, 0x05	; 5
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	97 de       	rcall	.-722    	; 0xd2 <get_button>
     3a4:	89 2b       	or	r24, r25
     3a6:	39 f0       	breq	.+14     	; 0x3b6 <fast_wash+0x34>
		{
			select_wash_mode = 4;
     3a8:	84 e0       	ldi	r24, 0x04	; 4
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     3b0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     3b4:	08 95       	ret
		if (get_button(BUTTON1, BUTTON1PIN))
		{
			select_wash_mode = 4;
			break;
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     3b6:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     3ba:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     3be:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     3c2:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     3c6:	02 97       	sbiw	r24, 0x02	; 2
     3c8:	a1 05       	cpc	r26, r1
     3ca:	b1 05       	cpc	r27, r1
     3cc:	30 f3       	brcs	.-52     	; 0x39a <fast_wash+0x18>
		{
			fnd_refreshrate = 0;
     3ce:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     3d2:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     3d6:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     3da:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     3de:	cd de       	rcall	.-614    	; 0x17a <fnd_display>
     3e0:	dc cf       	rjmp	.-72     	; 0x39a <fast_wash+0x18>

000003e2 <rinse_and_spindry>:
	}
}

void rinse_and_spindry(void) // 헹굼 + 탈수
{
	sec_count = 3;
     3e2:	83 e0       	ldi	r24, 0x03	; 3
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	a0 e0       	ldi	r26, 0x00	; 0
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     3ee:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     3f2:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     3f6:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
	while (1)
	{
		if (get_button(BUTTON2, BUTTON2PIN))
     3fa:	66 e0       	ldi	r22, 0x06	; 6
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	67 de       	rcall	.-818    	; 0xd2 <get_button>
     404:	89 2b       	or	r24, r25
     406:	39 f0       	breq	.+14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		{
			select_wash_mode = 4;
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     410:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     414:	08 95       	ret
		if (get_button(BUTTON2, BUTTON2PIN))
		{
			select_wash_mode = 4;
			break;
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     416:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     41a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     41e:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     422:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     426:	02 97       	sbiw	r24, 0x02	; 2
     428:	a1 05       	cpc	r26, r1
     42a:	b1 05       	cpc	r27, r1
     42c:	30 f3       	brcs	.-52     	; 0x3fa <rinse_and_spindry+0x18>
		{
			fnd_refreshrate = 0;
     42e:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     432:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     436:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     43a:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     43e:	9d de       	rcall	.-710    	; 0x17a <fnd_display>
     440:	dc cf       	rjmp	.-72     	; 0x3fa <rinse_and_spindry+0x18>

00000442 <only_spindry>:
	}
}

void only_spindry(void) // 탈수
{
	sec_count = 4;
     442:	84 e0       	ldi	r24, 0x04	; 4
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	a0 e0       	ldi	r26, 0x00	; 0
     448:	b0 e0       	ldi	r27, 0x00	; 0
     44a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     44e:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     452:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     456:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
	while (1)
	{
		if (get_button(BUTTON3, BUTTON3PIN))
     45a:	67 e0       	ldi	r22, 0x07	; 7
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	83 e0       	ldi	r24, 0x03	; 3
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	37 de       	rcall	.-914    	; 0xd2 <get_button>
     464:	89 2b       	or	r24, r25
     466:	39 f0       	breq	.+14     	; 0x476 <only_spindry+0x34>
		{
			select_wash_mode = 4;
     468:	84 e0       	ldi	r24, 0x04	; 4
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     470:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     474:	08 95       	ret
		if (get_button(BUTTON3, BUTTON3PIN))
		{
			select_wash_mode = 4;
			break;
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     476:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     47a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     47e:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     482:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     486:	02 97       	sbiw	r24, 0x02	; 2
     488:	a1 05       	cpc	r26, r1
     48a:	b1 05       	cpc	r27, r1
     48c:	30 f3       	brcs	.-52     	; 0x45a <only_spindry+0x18>
		{
			fnd_refreshrate = 0;
     48e:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     492:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     496:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     49a:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     49e:	6d de       	rcall	.-806    	; 0x17a <fnd_display>
     4a0:	dc cf       	rjmp	.-72     	; 0x45a <only_spindry+0x18>

000004a2 <water_temperature>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////수동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
	PORTA = 0x07;
     4a6:	87 e0       	ldi	r24, 0x07	; 7
     4a8:	8b bb       	out	0x1b, r24	; 27
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
     4aa:	8e e1       	ldi	r24, 0x1E	; 30
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	a0 e0       	ldi	r26, 0x00	; 0
     4b0:	b0 e0       	ldi	r27, 0x00	; 0
     4b2:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     4b6:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     4ba:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     4be:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>

/////////////////////////////////////////수동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
	PORTA = 0x07;
	int water_tem_toggle = 1;
     4c2:	c1 e0       	ldi	r28, 0x01	; 1
     4c4:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     4c6:	66 c0       	rjmp	.+204    	; 0x594 <water_temperature+0xf2>
	{
		if (get_button(BUTTON2, BUTTON2PIN))
     4c8:	66 e0       	ldi	r22, 0x06	; 6
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	00 de       	rcall	.-1024   	; 0xd2 <get_button>
     4d2:	89 2b       	or	r24, r25
     4d4:	99 f0       	breq	.+38     	; 0x4fc <water_temperature+0x5a>
		{
			sec_count -= 5;
     4d6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     4da:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     4de:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     4e2:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     4e6:	05 97       	sbiw	r24, 0x05	; 5
     4e8:	a1 09       	sbc	r26, r1
     4ea:	b1 09       	sbc	r27, r1
     4ec:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     4f0:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     4f4:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     4f8:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     4fc:	67 e0       	ldi	r22, 0x07	; 7
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	83 e0       	ldi	r24, 0x03	; 3
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	e6 dd       	rcall	.-1076   	; 0xd2 <get_button>
     506:	89 2b       	or	r24, r25
     508:	99 f0       	breq	.+38     	; 0x530 <water_temperature+0x8e>
		{
			sec_count += 5;
     50a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     50e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     512:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     516:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     51a:	05 96       	adiw	r24, 0x05	; 5
     51c:	a1 1d       	adc	r26, r1
     51e:	b1 1d       	adc	r27, r1
     520:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     524:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     528:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     52c:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     530:	65 e0       	ldi	r22, 0x05	; 5
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	cc dd       	rcall	.-1128   	; 0xd2 <get_button>
     53a:	89 2b       	or	r24, r25
     53c:	81 f0       	breq	.+32     	; 0x55e <water_temperature+0xbc>
		{	
			sec_count = 0;
     53e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <sec_count>
     542:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <sec_count+0x1>
     546:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <sec_count+0x2>
     54a:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <sec_count+0x3>
			custom_wash_mode = 1;
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     556:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			water_tem_toggle = 0;
     55a:	c0 e0       	ldi	r28, 0x00	; 0
     55c:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     55e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     562:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     566:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     56a:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     56e:	02 97       	sbiw	r24, 0x02	; 2
     570:	a1 05       	cpc	r26, r1
     572:	b1 05       	cpc	r27, r1
     574:	48 f0       	brcs	.+18     	; 0x588 <water_temperature+0xe6>
		{
			fnd_refreshrate = 0;
     576:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     57a:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     57e:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     582:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     586:	f9 dd       	rcall	.-1038   	; 0x17a <fnd_display>
		}
		if (custom_wash_mode == 5)
     588:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <custom_wash_mode>
     58c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <custom_wash_mode+0x1>
     590:	05 97       	sbiw	r24, 0x05	; 5
     592:	19 f0       	breq	.+6      	; 0x59a <water_temperature+0xf8>
	PORTA = 0x07;
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     594:	20 97       	sbiw	r28, 0x00	; 0
     596:	09 f0       	breq	.+2      	; 0x59a <water_temperature+0xf8>
     598:	97 cf       	rjmp	.-210    	; 0x4c8 <water_temperature+0x26>
		if (custom_wash_mode == 5)
		{
			break;
		}
	}
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <rinse_frequency>:

void rinse_frequency() // 헹굼 횟수 조절
{
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
	PORTA = 0x03;
     5a4:	83 e0       	ldi	r24, 0x03	; 3
     5a6:	8b bb       	out	0x1b, r24	; 27
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 2; // deflaut 헹굼 횟수
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	a0 e0       	ldi	r26, 0x00	; 0
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     5b4:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     5b8:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     5bc:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
}

void rinse_frequency() // 헹굼 횟수 조절
{
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
     5c0:	c1 e0       	ldi	r28, 0x01	; 1
     5c2:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 2; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     5c4:	79 c0       	rjmp	.+242    	; 0x6b8 <rinse_frequency+0x118>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     5c6:	66 e0       	ldi	r22, 0x06	; 6
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	81 dd       	rcall	.-1278   	; 0xd2 <get_button>
     5d0:	89 2b       	or	r24, r25
     5d2:	99 f0       	breq	.+38     	; 0x5fa <rinse_frequency+0x5a>
		{
			sec_count -= 1;
     5d4:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     5d8:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     5dc:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     5e0:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	a1 09       	sbc	r26, r1
     5e8:	b1 09       	sbc	r27, r1
     5ea:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     5ee:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     5f2:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     5f6:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     5fa:	67 e0       	ldi	r22, 0x07	; 7
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	67 dd       	rcall	.-1330   	; 0xd2 <get_button>
     604:	89 2b       	or	r24, r25
     606:	99 f0       	breq	.+38     	; 0x62e <rinse_frequency+0x8e>
		{
			sec_count += 1;
     608:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     60c:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     610:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     614:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	a1 1d       	adc	r26, r1
     61c:	b1 1d       	adc	r27, r1
     61e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     622:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     626:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     62a:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     62e:	65 e0       	ldi	r22, 0x05	; 5
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	4d dd       	rcall	.-1382   	; 0xd2 <get_button>
     638:	89 2b       	or	r24, r25
     63a:	49 f1       	breq	.+82     	; 0x68e <rinse_frequency+0xee>
		{
			total_wash_time += sec_count * 10; // 버튼 1누르면 횟수 * 10초를 전역변수에 저장하고 다음 단계로 간 다음 탈출
     63c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     640:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     644:	9c 01       	movw	r18, r24
     646:	22 0f       	add	r18, r18
     648:	33 1f       	adc	r19, r19
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	82 0f       	add	r24, r18
     658:	93 1f       	adc	r25, r19
     65a:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <total_wash_time>
     65e:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <total_wash_time+0x1>
     662:	82 0f       	add	r24, r18
     664:	93 1f       	adc	r25, r19
     666:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <total_wash_time+0x1>
     66a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <total_wash_time>
			sec_count = 0;
     66e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <sec_count>
     672:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <sec_count+0x1>
     676:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <sec_count+0x2>
     67a:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <sec_count+0x3>
			custom_wash_mode = 2;
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     686:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			rinse_frequency_toggle = 0;
     68a:	c0 e0       	ldi	r28, 0x00	; 0
     68c:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     68e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     692:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     696:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     69a:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     69e:	02 97       	sbiw	r24, 0x02	; 2
     6a0:	a1 05       	cpc	r26, r1
     6a2:	b1 05       	cpc	r27, r1
     6a4:	48 f0       	brcs	.+18     	; 0x6b8 <rinse_frequency+0x118>
		{
			fnd_refreshrate = 0;
     6a6:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     6aa:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     6ae:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     6b2:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     6b6:	61 dd       	rcall	.-1342   	; 0x17a <fnd_display>
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 2; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     6b8:	20 97       	sbiw	r28, 0x00	; 0
     6ba:	09 f0       	breq	.+2      	; 0x6be <rinse_frequency+0x11e>
     6bc:	84 cf       	rjmp	.-248    	; 0x5c6 <rinse_frequency+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <spindry_strength>:

void spindry_strength()
{
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
	PORTA = 0x01;	
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	8b bb       	out	0x1b, r24	; 27

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	a0 e0       	ldi	r26, 0x00	; 0
     6d2:	b0 e0       	ldi	r27, 0x00	; 0
     6d4:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     6d8:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     6dc:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     6e0:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>

void spindry_strength()
{
	PORTA = 0x01;	

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
     6e4:	c1 e0       	ldi	r28, 0x01	; 1
     6e6:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
	
	while (spindry_strength_toggle)
     6e8:	98 c0       	rjmp	.+304    	; 0x81a <spindry_strength+0x156>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     6ea:	66 e0       	ldi	r22, 0x06	; 6
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	82 e0       	ldi	r24, 0x02	; 2
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	ef dc       	rcall	.-1570   	; 0xd2 <get_button>
     6f4:	89 2b       	or	r24, r25
     6f6:	99 f0       	breq	.+38     	; 0x71e <spindry_strength+0x5a>
		{
			sec_count -= 1;
     6f8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     6fc:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     700:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     704:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	a1 09       	sbc	r26, r1
     70c:	b1 09       	sbc	r27, r1
     70e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     712:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     716:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     71a:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     71e:	67 e0       	ldi	r22, 0x07	; 7
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	83 e0       	ldi	r24, 0x03	; 3
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	d5 dc       	rcall	.-1622   	; 0xd2 <get_button>
     728:	89 2b       	or	r24, r25
     72a:	99 f0       	breq	.+38     	; 0x752 <spindry_strength+0x8e>
		{
			sec_count += 1;
     72c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     730:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     734:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     738:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	a1 1d       	adc	r26, r1
     740:	b1 1d       	adc	r27, r1
     742:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     746:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     74a:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     74e:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1 누르면 세팅한 강도에 맞는 회전값 반환
     752:	65 e0       	ldi	r22, 0x05	; 5
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	bb dc       	rcall	.-1674   	; 0xd2 <get_button>
     75c:	89 2b       	or	r24, r25
     75e:	09 f4       	brne	.+2      	; 0x762 <spindry_strength+0x9e>
     760:	47 c0       	rjmp	.+142    	; 0x7f0 <spindry_strength+0x12c>
		{
			if(sec_count == 1)
     762:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     766:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     76a:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     76e:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     772:	81 30       	cpi	r24, 0x01	; 1
     774:	91 05       	cpc	r25, r1
     776:	a1 05       	cpc	r26, r1
     778:	b1 05       	cpc	r27, r1
     77a:	39 f4       	brne	.+14     	; 0x78a <spindry_strength+0xc6>
			{
				spin_strength_val = 120;
     77c:	88 e7       	ldi	r24, 0x78	; 120
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <spin_strength_val+0x1>
     784:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <spin_strength_val>
     788:	22 c0       	rjmp	.+68     	; 0x7ce <spindry_strength+0x10a>
			}
			else if (sec_count == 2)
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	91 05       	cpc	r25, r1
     78e:	a1 05       	cpc	r26, r1
     790:	b1 05       	cpc	r27, r1
     792:	39 f4       	brne	.+14     	; 0x7a2 <spindry_strength+0xde>
			{
				spin_strength_val = 160;
     794:	80 ea       	ldi	r24, 0xA0	; 160
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <spin_strength_val+0x1>
     79c:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <spin_strength_val>
     7a0:	16 c0       	rjmp	.+44     	; 0x7ce <spindry_strength+0x10a>
			}
			else if (sec_count == 3)
     7a2:	83 30       	cpi	r24, 0x03	; 3
     7a4:	91 05       	cpc	r25, r1
     7a6:	a1 05       	cpc	r26, r1
     7a8:	b1 05       	cpc	r27, r1
     7aa:	39 f4       	brne	.+14     	; 0x7ba <spindry_strength+0xf6>
			{
				spin_strength_val = 205;
     7ac:	8d ec       	ldi	r24, 0xCD	; 205
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <spin_strength_val+0x1>
     7b4:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <spin_strength_val>
     7b8:	0a c0       	rjmp	.+20     	; 0x7ce <spindry_strength+0x10a>
			}
			else if (sec_count == 4)
     7ba:	04 97       	sbiw	r24, 0x04	; 4
     7bc:	a1 05       	cpc	r26, r1
     7be:	b1 05       	cpc	r27, r1
     7c0:	31 f4       	brne	.+12     	; 0x7ce <spindry_strength+0x10a>
			{
				spin_strength_val = 250;
     7c2:	8a ef       	ldi	r24, 0xFA	; 250
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <spin_strength_val+0x1>
     7ca:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <spin_strength_val>
			}
			PORTA = 0;
     7ce:	1b ba       	out	0x1b, r1	; 27
			spindry_strength_toggle = 0;
			custom_wash_mode = 3;
     7d0:	83 e0       	ldi	r24, 0x03	; 3
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     7d8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			sec_count = 0;
     7dc:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <sec_count>
     7e0:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <sec_count+0x1>
     7e4:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <sec_count+0x2>
     7e8:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <sec_count+0x3>
			else if (sec_count == 4)
			{
				spin_strength_val = 250;
			}
			PORTA = 0;
			spindry_strength_toggle = 0;
     7ec:	c0 e0       	ldi	r28, 0x00	; 0
     7ee:	d0 e0       	ldi	r29, 0x00	; 0
			custom_wash_mode = 3;
			sec_count = 0;
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     7f0:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     7f4:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     7f8:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     7fc:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     800:	02 97       	sbiw	r24, 0x02	; 2
     802:	a1 05       	cpc	r26, r1
     804:	b1 05       	cpc	r27, r1
     806:	48 f0       	brcs	.+18     	; 0x81a <spindry_strength+0x156>
		{
			fnd_refreshrate = 0;
     808:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     80c:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     810:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     814:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     818:	b0 dc       	rcall	.-1696   	; 0x17a <fnd_display>

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
	
	while (spindry_strength_toggle)
     81a:	20 97       	sbiw	r28, 0x00	; 0
     81c:	09 f0       	breq	.+2      	; 0x820 <spindry_strength+0x15c>
     81e:	65 cf       	rjmp	.-310    	; 0x6ea <spindry_strength+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	08 95       	ret

00000826 <fnd_loading_display>:
	digit_select++;
	digit_select %= 4; //다음 표시할 자리수 선택
}

void fnd_loading_display(int *loading_rot, int *main_ment) // 진행 로딩 상황 표시 
{
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	66 97       	sbiw	r28, 0x16	; 22
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	cd bf       	out	0x3d, r28	; 61
     842:	9c 01       	movw	r18, r24
	int a, b, c, d;
				                // s     e        l      e     c     t               m     o     d        e
	uint8_t fnd_loading_font[] = {~0x92, ~0x86, ~0xc7, ~0x86, ~0xc6, ~0x87, ~0xff, ~0xaa, ~0xa3, ~0xa1, ~0x86, ~0xff, ~0xff,
     844:	96 e1       	ldi	r25, 0x16	; 22
     846:	ef e3       	ldi	r30, 0x3F	; 63
     848:	f1 e0       	ldi	r31, 0x01	; 1
     84a:	de 01       	movw	r26, r28
     84c:	11 96       	adiw	r26, 0x01	; 1
     84e:	01 90       	ld	r0, Z+
     850:	0d 92       	st	X+, r0
     852:	9a 95       	dec	r25
     854:	e1 f7       	brne	.-8      	; 0x84e <fnd_loading_display+0x28>
		 ~0xce, ~0xf8, ~0xc7, ~0xf1, ~0xfe, ~0xf7, ~0xf6, ~0xff , ~0xab};
		//  |-     -|    |_     _|     -      _     -,_    꺼짐      n
	if (*loading_rot == 0)
     856:	d9 01       	movw	r26, r18
     858:	8d 91       	ld	r24, X+
     85a:	9c 91       	ld	r25, X
     85c:	00 97       	sbiw	r24, 0x00	; 0
     85e:	d1 f0       	breq	.+52     	; 0x894 <fnd_loading_display+0x6e>
	{
		d = 13; b = 18, c = 17, a = 16;	// loading 1
	}
	else if (*loading_rot == 1)
     860:	81 30       	cpi	r24, 0x01	; 1
     862:	91 05       	cpc	r25, r1
     864:	19 f1       	breq	.+70     	; 0x8ac <fnd_loading_display+0x86>
	{
		d = 15; b = 17, c = 18, a = 14; // loading 2
	}
	else if (*loading_rot == 2)
     866:	82 30       	cpi	r24, 0x02	; 2
     868:	91 05       	cpc	r25, r1
     86a:	61 f1       	breq	.+88     	; 0x8c4 <fnd_loading_display+0x9e>
	{
		d = 17; b = 19, c = 19, a = 18; // loaing 3
	}
	else if (*loading_rot == 4) // end screen
     86c:	04 97       	sbiw	r24, 0x04	; 4
     86e:	b1 f1       	breq	.+108    	; 0x8dc <fnd_loading_display+0xb6>
		a = 9; b = 21; c = 1; d = 6;
	}
	
	else // main screen
	{
		d = *main_ment;
     870:	db 01       	movw	r26, r22
     872:	ed 91       	ld	r30, X+
     874:	fc 91       	ld	r31, X
		c = d + 1; c %= 13;
     876:	cf 01       	movw	r24, r30
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	2d e0       	ldi	r18, 0x0D	; 13
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	b9 01       	movw	r22, r18
     880:	bc d6       	rcall	.+3448   	; 0x15fa <__divmodhi4>
     882:	8c 01       	movw	r16, r24
		b = c + 1; b %= 13;
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	b9 01       	movw	r22, r18
     888:	b8 d6       	rcall	.+3440   	; 0x15fa <__divmodhi4>
     88a:	7c 01       	movw	r14, r24
		a = b + 1; a %= 13;
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	b9 01       	movw	r22, r18
     890:	b4 d6       	rcall	.+3432   	; 0x15fa <__divmodhi4>
     892:	2f c0       	rjmp	.+94     	; 0x8f2 <fnd_loading_display+0xcc>
	uint8_t fnd_loading_font[] = {~0x92, ~0x86, ~0xc7, ~0x86, ~0xc6, ~0x87, ~0xff, ~0xaa, ~0xa3, ~0xa1, ~0x86, ~0xff, ~0xff,
		 ~0xce, ~0xf8, ~0xc7, ~0xf1, ~0xfe, ~0xf7, ~0xf6, ~0xff , ~0xab};
		//  |-     -|    |_     _|     -      _     -,_    꺼짐      n
	if (*loading_rot == 0)
	{
		d = 13; b = 18, c = 17, a = 16;	// loading 1
     894:	ed e0       	ldi	r30, 0x0D	; 13
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	01 e1       	ldi	r16, 0x11	; 17
     89a:	10 e0       	ldi	r17, 0x00	; 0
     89c:	0f 2e       	mov	r0, r31
     89e:	f2 e1       	ldi	r31, 0x12	; 18
     8a0:	ef 2e       	mov	r14, r31
     8a2:	f1 2c       	mov	r15, r1
     8a4:	f0 2d       	mov	r31, r0
     8a6:	80 e1       	ldi	r24, 0x10	; 16
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	23 c0       	rjmp	.+70     	; 0x8f2 <fnd_loading_display+0xcc>
	}
	else if (*loading_rot == 1)
	{
		d = 15; b = 17, c = 18, a = 14; // loading 2
     8ac:	ef e0       	ldi	r30, 0x0F	; 15
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	02 e1       	ldi	r16, 0x12	; 18
     8b2:	10 e0       	ldi	r17, 0x00	; 0
     8b4:	0f 2e       	mov	r0, r31
     8b6:	f1 e1       	ldi	r31, 0x11	; 17
     8b8:	ef 2e       	mov	r14, r31
     8ba:	f1 2c       	mov	r15, r1
     8bc:	f0 2d       	mov	r31, r0
     8be:	8e e0       	ldi	r24, 0x0E	; 14
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	17 c0       	rjmp	.+46     	; 0x8f2 <fnd_loading_display+0xcc>
	}
	else if (*loading_rot == 2)
	{
		d = 17; b = 19, c = 19, a = 18; // loaing 3
     8c4:	e1 e1       	ldi	r30, 0x11	; 17
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	03 e1       	ldi	r16, 0x13	; 19
     8ca:	10 e0       	ldi	r17, 0x00	; 0
     8cc:	0f 2e       	mov	r0, r31
     8ce:	f3 e1       	ldi	r31, 0x13	; 19
     8d0:	ef 2e       	mov	r14, r31
     8d2:	f1 2c       	mov	r15, r1
     8d4:	f0 2d       	mov	r31, r0
     8d6:	82 e1       	ldi	r24, 0x12	; 18
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0b c0       	rjmp	.+22     	; 0x8f2 <fnd_loading_display+0xcc>
	}
	else if (*loading_rot == 4) // end screen
	{
		a = 9; b = 21; c = 1; d = 6;
     8dc:	e6 e0       	ldi	r30, 0x06	; 6
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	01 e0       	ldi	r16, 0x01	; 1
     8e2:	10 e0       	ldi	r17, 0x00	; 0
     8e4:	0f 2e       	mov	r0, r31
     8e6:	f5 e1       	ldi	r31, 0x15	; 21
     8e8:	ef 2e       	mov	r14, r31
     8ea:	f1 2c       	mov	r15, r1
     8ec:	f0 2d       	mov	r31, r0
     8ee:	89 e0       	ldi	r24, 0x09	; 9
     8f0:	90 e0       	ldi	r25, 0x00	; 0
		a = b + 1; a %= 13;
	}

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     8f2:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <digit_select.1855>
     8f6:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <digit_select.1855+0x1>
     8fa:	21 30       	cpi	r18, 0x01	; 1
     8fc:	31 05       	cpc	r19, r1
     8fe:	b1 f0       	breq	.+44     	; 0x92c <fnd_loading_display+0x106>
     900:	1c f4       	brge	.+6      	; 0x908 <fnd_loading_display+0xe2>
     902:	23 2b       	or	r18, r19
     904:	41 f0       	breq	.+16     	; 0x916 <fnd_loading_display+0xf0>
     906:	32 c0       	rjmp	.+100    	; 0x96c <fnd_loading_display+0x146>
     908:	22 30       	cpi	r18, 0x02	; 2
     90a:	31 05       	cpc	r19, r1
     90c:	d1 f0       	breq	.+52     	; 0x942 <fnd_loading_display+0x11c>
     90e:	23 30       	cpi	r18, 0x03	; 3
     910:	31 05       	cpc	r19, r1
     912:	11 f1       	breq	.+68     	; 0x958 <fnd_loading_display+0x132>
     914:	2b c0       	rjmp	.+86     	; 0x96c <fnd_loading_display+0x146>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     916:	2f e7       	ldi	r18, 0x7F	; 127
     918:	28 bb       	out	0x18, r18	; 24
		FND_DATA_PORT = fnd_loading_font[a];
     91a:	e1 e0       	ldi	r30, 0x01	; 1
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	ec 0f       	add	r30, r28
     920:	fd 1f       	adc	r31, r29
     922:	e8 0f       	add	r30, r24
     924:	f9 1f       	adc	r31, r25
     926:	80 81       	ld	r24, Z
     928:	85 bb       	out	0x15, r24	; 21
		break;
     92a:	20 c0       	rjmp	.+64     	; 0x96c <fnd_loading_display+0x146>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     92c:	8f eb       	ldi	r24, 0xBF	; 191
     92e:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[b];
     930:	e1 e0       	ldi	r30, 0x01	; 1
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	ec 0f       	add	r30, r28
     936:	fd 1f       	adc	r31, r29
     938:	ee 0d       	add	r30, r14
     93a:	ff 1d       	adc	r31, r15
     93c:	80 81       	ld	r24, Z
     93e:	85 bb       	out	0x15, r24	; 21
		break;
     940:	15 c0       	rjmp	.+42     	; 0x96c <fnd_loading_display+0x146>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     942:	8f ed       	ldi	r24, 0xDF	; 223
     944:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[c];
     946:	e1 e0       	ldi	r30, 0x01	; 1
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	ec 0f       	add	r30, r28
     94c:	fd 1f       	adc	r31, r29
     94e:	e0 0f       	add	r30, r16
     950:	f1 1f       	adc	r31, r17
     952:	80 81       	ld	r24, Z
     954:	85 bb       	out	0x15, r24	; 21
		break;
     956:	0a c0       	rjmp	.+20     	; 0x96c <fnd_loading_display+0x146>

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     958:	8f ee       	ldi	r24, 0xEF	; 239
     95a:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[d];
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	8c 0f       	add	r24, r28
     962:	9d 1f       	adc	r25, r29
     964:	e8 0f       	add	r30, r24
     966:	f9 1f       	adc	r31, r25
     968:	80 81       	ld	r24, Z
     96a:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
     96c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <digit_select.1855>
     970:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <digit_select.1855+0x1>
     974:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
     976:	83 70       	andi	r24, 0x03	; 3
     978:	90 78       	andi	r25, 0x80	; 128
     97a:	99 23       	and	r25, r25
     97c:	24 f4       	brge	.+8      	; 0x986 <fnd_loading_display+0x160>
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	8c 6f       	ori	r24, 0xFC	; 252
     982:	9f 6f       	ori	r25, 0xFF	; 255
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <digit_select.1855+0x1>
     98a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <digit_select.1855>
}
     98e:	66 96       	adiw	r28, 0x16	; 22
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	ff 90       	pop	r15
     9a4:	ef 90       	pop	r14
     9a6:	08 95       	ret

000009a8 <fnd_main>:
	end_display, // end 화면
	dumy_fanc // dumy
};

int fnd_main(void)
{
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	00 d0       	rcall	.+0      	; 0x9ae <fnd_main+0x6>
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	8a bb       	out	0x1a, r24	; 26
	init_fnd(); // fnd 초기화
     9b6:	da db       	rcall	.-2124   	; 0x16c <init_fnd>
	init_button(); // button 초기화
     9b8:	88 db       	rcall	.-2288   	; 0xca <init_button>
     9ba:	1a 82       	std	Y+2, r1	; 0x02
	
	int main_ment_on = 0; // select mode 글씨가 fnd에 돌아가면서 표시되도록 하는 변수
     9bc:	19 82       	std	Y+1, r1	; 0x01
     9be:	64 e0       	ldi	r22, 0x04	; 4

	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 수동 세탁 모드로 진입
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	85 db       	rcall	.-2294   	; 0xd2 <get_button>
     9c8:	89 2b       	or	r24, r25
     9ca:	21 f0       	breq	.+8      	; 0x9d4 <fnd_main+0x2c>
     9cc:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <select_wash_mode+0x1>
		{
			select_wash_mode = CUSTOM_WASH;
     9d0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <select_wash_mode>
     9d4:	65 e0       	ldi	r22, 0x05	; 5
		}
		
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1을 받으면 쾌속 세탁 모드로 진입
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	7a db       	rcall	.-2316   	; 0xd2 <get_button>
     9de:	89 2b       	or	r24, r25
     9e0:	31 f0       	breq	.+12     	; 0x9ee <fnd_main+0x46>
     9e2:	81 e0       	ldi	r24, 0x01	; 1
		{
			select_wash_mode = FAST_WASH;
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     9ea:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
     9ee:	66 e0       	ldi	r22, 0x06	; 6
		}
		
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2를 받으면 헹굼 + 탈수 모드로 진입
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	6d db       	rcall	.-2342   	; 0xd2 <get_button>
     9f8:	89 2b       	or	r24, r25
     9fa:	31 f0       	breq	.+12     	; 0xa08 <fnd_main+0x60>
     9fc:	82 e0       	ldi	r24, 0x02	; 2
		{
			select_wash_mode = RINSE_AND_SPINDRY;
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     a04:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3을 받으면 탈수 단독 모드로 진입
     a08:	67 e0       	ldi	r22, 0x07	; 7
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	83 e0       	ldi	r24, 0x03	; 3
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	60 db       	rcall	.-2368   	; 0xd2 <get_button>
     a12:	89 2b       	or	r24, r25
     a14:	31 f0       	breq	.+12     	; 0xa22 <fnd_main+0x7a>
     a16:	83 e0       	ldi	r24, 0x03	; 3
		{
			select_wash_mode = ONLY_SPINDRY;
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     a1e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
     a22:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <select_wash_mode>
		}
		
		fp_wash_mode[select_wash_mode]();
     a26:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <select_wash_mode+0x1>
     a2a:	ee 0f       	add	r30, r30
     a2c:	ff 1f       	adc	r31, r31
     a2e:	e4 5f       	subi	r30, 0xF4	; 244
     a30:	fe 4f       	sbci	r31, 0xFE	; 254
     a32:	01 90       	ld	r0, Z+
     a34:	f0 81       	ld	r31, Z
     a36:	e0 2d       	mov	r30, r0
     a38:	09 95       	icall
     a3a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
		
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     a3e:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     a42:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     a46:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     a4a:	02 97       	sbiw	r24, 0x02	; 2
     a4c:	a1 05       	cpc	r26, r1
     a4e:	b1 05       	cpc	r27, r1
     a50:	70 f0       	brcs	.+28     	; 0xa6e <fnd_main+0xc6>
     a52:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
		{
			fnd_refreshrate = 0;
     a56:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     a5a:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     a5e:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			//fnd_display();
			fnd_loading_display(10,&main_ment_on);
     a62:	be 01       	movw	r22, r28
     a64:	6f 5f       	subi	r22, 0xFF	; 255
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	8a e0       	ldi	r24, 0x0A	; 10
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	dc de       	rcall	.-584    	; 0x826 <fnd_loading_display>
     a6e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <msec_count>
		}
		if (msec_count >= 400)
     a72:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <msec_count+0x1>
     a76:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <msec_count+0x2>
     a7a:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <msec_count+0x3>
     a7e:	80 39       	cpi	r24, 0x90	; 144
     a80:	91 40       	sbci	r25, 0x01	; 1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	08 f4       	brcc	.+2      	; 0xa8a <fnd_main+0xe2>
     a88:	9a cf       	rjmp	.-204    	; 0x9be <fnd_main+0x16>
     a8a:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <msec_count>
		{
			msec_count = 0;
     a8e:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <msec_count+0x1>
     a92:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <msec_count+0x2>
     a96:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <msec_count+0x3>
			main_ment_on++;
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	9a 81       	ldd	r25, Y+2	; 0x02
     a9e:	01 96       	adiw	r24, 0x01	; 1
			main_ment_on %= 13;
     aa0:	6d e0       	ldi	r22, 0x0D	; 13
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	aa d5       	rcall	.+2900   	; 0x15fa <__divmodhi4>
     aa6:	9a 83       	std	Y+2, r25	; 0x02
     aa8:	89 83       	std	Y+1, r24	; 0x01
     aaa:	89 cf       	rjmp	.-238    	; 0x9be <fnd_main+0x16>

00000aac <custom_wash_start>:
     aac:	0f 93       	push	r16
	}
}


void custom_wash_start(void)
{
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <custom_wash_start+0xa>
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
	int led_pwm_count; // LED 몇개 킬건지 정하는 변수
	
	sec_count = total_wash_time;
     aba:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <total_wash_time>
     abe:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <total_wash_time+0x1>
     ac2:	09 2e       	mov	r0, r25
     ac4:	00 0c       	add	r0, r0
     ac6:	aa 0b       	sbc	r26, r26
     ac8:	bb 0b       	sbc	r27, r27
     aca:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     ace:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     ad2:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     ad6:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
	
	while (sec_count > 0)
     ada:	ca c0       	rjmp	.+404    	; 0xc70 <custom_wash_start+0x1c4>
	{
		washing_machine_fan_control(&spin_strength_val);
     adc:	8c e6       	ldi	r24, 0x6C	; 108
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	1e d2       	rcall	.+1084   	; 0xf1e <washing_machine_fan_control>
		
		if (msec_count >= 250) // 1초마다 시간 1초씩 감소하고 로딩 회전이 됨.
     ae2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <msec_count>
     ae6:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <msec_count+0x1>
     aea:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <msec_count+0x2>
     aee:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <msec_count+0x3>
     af2:	8a 3f       	cpi	r24, 0xFA	; 250
     af4:	91 05       	cpc	r25, r1
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	38 f1       	brcs	.+78     	; 0xb4a <custom_wash_start+0x9e>
		{
			msec_count = 0;
     afc:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <msec_count>
     b00:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <msec_count+0x1>
     b04:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <msec_count+0x2>
     b08:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <msec_count+0x3>
			sec_count--;
     b0c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     b10:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     b14:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     b18:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	a1 09       	sbc	r26, r1
     b20:	b1 09       	sbc	r27, r1
     b22:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     b26:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     b2a:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     b2e:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
			loading_rot++;
     b32:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <loading_rot>
     b36:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <loading_rot+0x1>
     b3a:	01 96       	adiw	r24, 0x01	; 1
			loading_rot %= 3;
     b3c:	63 e0       	ldi	r22, 0x03	; 3
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	5c d5       	rcall	.+2744   	; 0x15fa <__divmodhi4>
     b42:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     b46:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
		}
		if (loading_clock_change >= 3000) // 3초마다 로딩창이랑 시간 화면 뜨는거 토글
     b4a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <loading_clock_change>
     b4e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <loading_clock_change+0x1>
     b52:	a0 91 74 01 	lds	r26, 0x0174	; 0x800174 <loading_clock_change+0x2>
     b56:	b0 91 75 01 	lds	r27, 0x0175	; 0x800175 <loading_clock_change+0x3>
     b5a:	88 3b       	cpi	r24, 0xB8	; 184
     b5c:	9b 40       	sbci	r25, 0x0B	; 11
     b5e:	a1 05       	cpc	r26, r1
     b60:	b1 05       	cpc	r27, r1
     b62:	b0 f0       	brcs	.+44     	; 0xb90 <custom_wash_start+0xe4>
		{
			loading_clock_change = 0;
     b64:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <loading_clock_change>
     b68:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <loading_clock_change+0x1>
     b6c:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <loading_clock_change+0x2>
     b70:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <loading_clock_change+0x3>
			loading_clock_change_val = !loading_clock_change_val;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <loading_clock_change_val>
     b7c:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <loading_clock_change_val+0x1>
     b80:	23 2b       	or	r18, r19
     b82:	11 f0       	breq	.+4      	; 0xb88 <custom_wash_start+0xdc>
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <loading_clock_change_val+0x1>
     b8c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <loading_clock_change_val>
		}
		
		/////여기에 일반세탁 60초 + 헹굼 횟수 * 10초 + 탈수 30초로 구분을 해야함
		if (total_wash_time - sec_count <= 30) // 일반 세탁 30초 경과
     b90:	40 91 6e 01 	lds	r20, 0x016E	; 0x80016e <sec_count>
     b94:	50 91 6f 01 	lds	r21, 0x016F	; 0x80016f <sec_count+0x1>
     b98:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <sec_count+0x2>
     b9c:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <sec_count+0x3>
     ba0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <total_wash_time>
     ba4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <total_wash_time+0x1>
     ba8:	09 2e       	mov	r0, r25
     baa:	00 0c       	add	r0, r0
     bac:	aa 0b       	sbc	r26, r26
     bae:	bb 0b       	sbc	r27, r27
     bb0:	84 1b       	sub	r24, r20
     bb2:	95 0b       	sbc	r25, r21
     bb4:	a6 0b       	sbc	r26, r22
     bb6:	b7 0b       	sbc	r27, r23
     bb8:	8f 31       	cpi	r24, 0x1F	; 31
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	28 f4       	brcc	.+10     	; 0xbcc <custom_wash_start+0x120>
		{
			led_pwm_count = 255; // 0xff
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	9a 83       	std	Y+2, r25	; 0x02
     bc8:	89 83       	std	Y+1, r24	; 0x01
     bca:	2e c0       	rjmp	.+92     	; 0xc28 <custom_wash_start+0x17c>
		}
		
		else if (total_wash_time - sec_count <= 60 && total_wash_time - sec_count > 30) // 일반세탁 60초 완료
     bcc:	8c 01       	movw	r16, r24
     bce:	9d 01       	movw	r18, r26
     bd0:	0f 51       	subi	r16, 0x1F	; 31
     bd2:	11 09       	sbc	r17, r1
     bd4:	21 09       	sbc	r18, r1
     bd6:	31 09       	sbc	r19, r1
     bd8:	0e 31       	cpi	r16, 0x1E	; 30
     bda:	11 05       	cpc	r17, r1
     bdc:	21 05       	cpc	r18, r1
     bde:	31 05       	cpc	r19, r1
     be0:	28 f4       	brcc	.+10     	; 0xbec <custom_wash_start+0x140>
		{
			led_pwm_count = 126; // 0x7c
     be2:	8e e7       	ldi	r24, 0x7E	; 126
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	9a 83       	std	Y+2, r25	; 0x02
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	1e c0       	rjmp	.+60     	; 0xc28 <custom_wash_start+0x17c>
		}
		
		else if (total_wash_time - sec_count > 60 && sec_count >= 30) // 헹굼
     bec:	cd 97       	sbiw	r24, 0x3d	; 61
     bee:	a1 05       	cpc	r26, r1
     bf0:	b1 05       	cpc	r27, r1
     bf2:	50 f0       	brcs	.+20     	; 0xc08 <custom_wash_start+0x15c>
     bf4:	4e 31       	cpi	r20, 0x1E	; 30
     bf6:	51 05       	cpc	r21, r1
     bf8:	61 05       	cpc	r22, r1
     bfa:	71 05       	cpc	r23, r1
     bfc:	28 f0       	brcs	.+10     	; 0xc08 <custom_wash_start+0x15c>
		{
			led_pwm_count = 60; // 0x3c
     bfe:	8c e3       	ldi	r24, 0x3C	; 60
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	9a 83       	std	Y+2, r25	; 0x02
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	10 c0       	rjmp	.+32     	; 0xc28 <custom_wash_start+0x17c>
		}
		
		else if (sec_count < 30)
     c08:	4e 31       	cpi	r20, 0x1E	; 30
     c0a:	51 05       	cpc	r21, r1
     c0c:	61 05       	cpc	r22, r1
     c0e:	71 05       	cpc	r23, r1
     c10:	28 f4       	brcc	.+10     	; 0xc1c <custom_wash_start+0x170>
		{
			led_pwm_count = 24; // 0x18
     c12:	88 e1       	ldi	r24, 0x18	; 24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	9a 83       	std	Y+2, r25	; 0x02
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	06 c0       	rjmp	.+12     	; 0xc28 <custom_wash_start+0x17c>
		}
		
		else if (sec_count == 0)
     c1c:	45 2b       	or	r20, r21
     c1e:	46 2b       	or	r20, r22
     c20:	47 2b       	or	r20, r23
     c22:	11 f4       	brne	.+4      	; 0xc28 <custom_wash_start+0x17c>
		{
			led_pwm_count = 0;
     c24:	1a 82       	std	Y+2, r1	; 0x02
     c26:	19 82       	std	Y+1, r1	; 0x01
		}
		
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     c28:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     c2c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     c30:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     c34:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     c38:	02 97       	sbiw	r24, 0x02	; 2
     c3a:	a1 05       	cpc	r26, r1
     c3c:	b1 05       	cpc	r27, r1
     c3e:	c0 f0       	brcs	.+48     	; 0xc70 <custom_wash_start+0x1c4>
		{
			fnd_refreshrate = 0;
     c40:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     c44:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     c48:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     c4c:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			make_pwm_led_control(&led_pwm_count);
     c50:	ce 01       	movw	r24, r28
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	9e d0       	rcall	.+316    	; 0xd92 <make_pwm_led_control>
			if (loading_clock_change_val)
     c56:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <loading_clock_change_val>
     c5a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <loading_clock_change_val+0x1>
     c5e:	89 2b       	or	r24, r25
			{
				fnd_display(); // 시간 보여주기
     c60:	11 f0       	breq	.+4      	; 0xc66 <custom_wash_start+0x1ba>
     c62:	8b da       	rcall	.-2794   	; 0x17a <fnd_display>
     c64:	05 c0       	rjmp	.+10     	; 0xc70 <custom_wash_start+0x1c4>
			}
			else
			{
				fnd_loading_display(&loading_rot,10); // 로딩 보여주기
     c66:	6a e0       	ldi	r22, 0x0A	; 10
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	88 e1       	ldi	r24, 0x18	; 24
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	db dd       	rcall	.-1098   	; 0x826 <fnd_loading_display>
{
	int led_pwm_count; // LED 몇개 킬건지 정하는 변수
	
	sec_count = total_wash_time;
	
	while (sec_count > 0)
     c70:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     c74:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     c78:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     c7c:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     c80:	89 2b       	or	r24, r25
     c82:	8a 2b       	or	r24, r26
     c84:	8b 2b       	or	r24, r27
     c86:	09 f0       	breq	.+2      	; 0xc8a <custom_wash_start+0x1de>
     c88:	29 cf       	rjmp	.-430    	; 0xadc <custom_wash_start+0x30>
			{
				fnd_loading_display(&loading_rot,10); // 로딩 보여주기
			}
		}
	}
	OCR3C = 0;
     c8a:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     c8e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	custom_wash_mode = 4; // end 화면으로 이동
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     c9a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
	sec_count = 0; // 다 끝나면 끝
     c9e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <sec_count>
     ca2:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <sec_count+0x1>
     ca6:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <sec_count+0x2>
     caa:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <sec_count+0x3>
}
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	08 95       	ret

00000cbc <end_display>:

void end_display() // end 화면
{
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
	//더미 함수
	int end_toggle = 1;
	PORTA = 0;
     cc0:	1b ba       	out	0x1b, r1	; 27
	loading_rot = 4; // end fnd display
     cc2:	84 e0       	ldi	r24, 0x04	; 4
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     cca:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
}

void end_display() // end 화면
{
	//더미 함수
	int end_toggle = 1;
     cce:	c1 e0       	ldi	r28, 0x01	; 1
     cd0:	d0 e0       	ldi	r29, 0x00	; 0
	PORTA = 0;
	loading_rot = 4; // end fnd display
	while (end_toggle)
     cd2:	47 c0       	rjmp	.+142    	; 0xd62 <end_display+0xa6>
	{
		if (get_button(BUTTON0, BUTTON0PIN) || get_button(BUTTON1, BUTTON1PIN) || get_button(BUTTON2, BUTTON2PIN) || get_button(BUTTON3, BUTTON3PIN)) // 아무 버튼 누르면 다시 메인 화면으로
     cd4:	64 e0       	ldi	r22, 0x04	; 4
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	fa d9       	rcall	.-3084   	; 0xd2 <get_button>
     cde:	89 2b       	or	r24, r25
     ce0:	a9 f4       	brne	.+42     	; 0xd0c <end_display+0x50>
     ce2:	65 e0       	ldi	r22, 0x05	; 5
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	f3 d9       	rcall	.-3098   	; 0xd2 <get_button>
     cec:	89 2b       	or	r24, r25
     cee:	71 f4       	brne	.+28     	; 0xd0c <end_display+0x50>
     cf0:	66 e0       	ldi	r22, 0x06	; 6
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	ec d9       	rcall	.-3112   	; 0xd2 <get_button>
     cfa:	89 2b       	or	r24, r25
     cfc:	39 f4       	brne	.+14     	; 0xd0c <end_display+0x50>
     cfe:	67 e0       	ldi	r22, 0x07	; 7
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	83 e0       	ldi	r24, 0x03	; 3
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	e5 d9       	rcall	.-3126   	; 0xd2 <get_button>
     d08:	89 2b       	or	r24, r25
     d0a:	91 f0       	breq	.+36     	; 0xd30 <end_display+0x74>
		{
			select_wash_mode = MAIN_SCREEN;
     d0c:	84 e0       	ldi	r24, 0x04	; 4
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     d14:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			end_toggle = !end_toggle;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	cd 2b       	or	r28, r29
     d1c:	09 f0       	breq	.+2      	; 0xd20 <end_display+0x64>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	c8 2f       	mov	r28, r24
     d22:	d0 e0       	ldi	r29, 0x00	; 0
			custom_wash_mode = 5; // 끝
     d24:	85 e0       	ldi	r24, 0x05	; 5
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     d2c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     d30:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     d34:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     d38:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     d3c:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     d40:	02 97       	sbiw	r24, 0x02	; 2
     d42:	a1 05       	cpc	r26, r1
     d44:	b1 05       	cpc	r27, r1
     d46:	68 f0       	brcs	.+26     	; 0xd62 <end_display+0xa6>
		{
			fnd_refreshrate = 0;
     d48:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     d4c:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     d50:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     d54:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_loading_display(&loading_rot,10); // end 보여주기
     d58:	6a e0       	ldi	r22, 0x0A	; 10
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	88 e1       	ldi	r24, 0x18	; 24
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	62 dd       	rcall	.-1340   	; 0x826 <fnd_loading_display>
{
	//더미 함수
	int end_toggle = 1;
	PORTA = 0;
	loading_rot = 4; // end fnd display
	while (end_toggle)
     d62:	20 97       	sbiw	r28, 0x00	; 0
     d64:	09 f0       	breq	.+2      	; 0xd68 <end_display+0xac>
     d66:	b6 cf       	rjmp	.-148    	; 0xcd4 <end_display+0x18>
		{
			fnd_refreshrate = 0;
			fnd_loading_display(&loading_rot,10); // end 보여주기
		}
	}
}
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	08 95       	ret

00000d6e <led_on_pwm>:
	//}
}

void led_on_pwm(int dim) // dim의 반복을 이용해서 밝기를 제어 (PWM의 HIGH 비율을 제어)
{
	for (int i = 0; i < 256; i++)
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	0a c0       	rjmp	.+20     	; 0xd88 <led_on_pwm+0x1a>
	{
		if (i > dim)
     d74:	82 17       	cp	r24, r18
     d76:	93 07       	cpc	r25, r19
     d78:	0c f4       	brge	.+2      	; 0xd7c <led_on_pwm+0xe>
		{
			PORTA = 0; // duty cycle이 넘어가면 LED all off
     d7a:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d7c:	4a e6       	ldi	r20, 0x6A	; 106
     d7e:	4a 95       	dec	r20
     d80:	f1 f7       	brne	.-4      	; 0xd7e <led_on_pwm+0x10>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <led_on_pwm+0x16>
	//}
}

void led_on_pwm(int dim) // dim의 반복을 이용해서 밝기를 제어 (PWM의 HIGH 비율을 제어)
{
	for (int i = 0; i < 256; i++)
     d84:	2f 5f       	subi	r18, 0xFF	; 255
     d86:	3f 4f       	sbci	r19, 0xFF	; 255
     d88:	2f 3f       	cpi	r18, 0xFF	; 255
     d8a:	31 05       	cpc	r19, r1
     d8c:	99 f3       	breq	.-26     	; 0xd74 <led_on_pwm+0x6>
     d8e:	94 f3       	brlt	.-28     	; 0xd74 <led_on_pwm+0x6>
		{
			PORTA = 0; // duty cycle이 넘어가면 LED all off
		}
		_delay_us(20);
	}
     d90:	08 95       	ret

00000d92 <make_pwm_led_control>:
extern volatile uint32_t msec_count;


void make_pwm_led_control(int *led_pwm_count)
{
	DDRA = 0xff; // led 모두 출력 모드
     d92:	2f ef       	ldi	r18, 0xFF	; 255
     d94:	2a bb       	out	0x1a, r18	; 26
	PORTA = *led_pwm_count; // 입력받은 카운트 만큼 LED on
     d96:	fc 01       	movw	r30, r24
     d98:	80 81       	ld	r24, Z
     d9a:	8b bb       	out	0x1b, r24	; 27
	//PORTA = "0xff"; // led all on
	
	// dark --> bright --> dark 순서로 진행되는 코드
	//while (1)
	//{
 		led_on_pwm(dim); // 지속적으로 on할거면 이 함수만 while 반복
     d9c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <dim>
     da0:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <dim+0x1>
     da4:	e4 df       	rcall	.-56     	; 0xd6e <led_on_pwm>
  		dim += direction;
     da6:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <dim>
     daa:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <dim+0x1>
     dae:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <direction>
     db2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <direction+0x1>
     db6:	82 0f       	add	r24, r18
     db8:	93 1f       	adc	r25, r19
     dba:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <dim+0x1>
     dbe:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <dim>
		  
  		if (dim == 255) // 다 밝아지면 다시 어두워지도록 함
     dc2:	8f 3f       	cpi	r24, 0xFF	; 255
     dc4:	91 05       	cpc	r25, r1
     dc6:	31 f4       	brne	.+12     	; 0xdd4 <make_pwm_led_control+0x42>
  		{
  			direction = -1;
     dc8:	2f ef       	ldi	r18, 0xFF	; 255
     dca:	3f ef       	ldi	r19, 0xFF	; 255
     dcc:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <direction+0x1>
     dd0:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <direction>
  		}
 		if (dim == 0) // 다 어두워지면 다시 밝아지도록 함
     dd4:	89 2b       	or	r24, r25
     dd6:	31 f4       	brne	.+12     	; 0xde4 <make_pwm_led_control+0x52>
  		{
  			direction = 1;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <direction+0x1>
     de0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <direction>
     de4:	08 95       	ret

00000de6 <__vector_16>:
extern void init_n289n();

FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	8f 93       	push	r24
     df2:	9f 93       	push	r25
     df4:	af 93       	push	r26
     df6:	bf 93       	push	r27
	TCNT0=6;
     df8:	86 e0       	ldi	r24, 0x06	; 6
     dfa:	82 bf       	out	0x32, r24	; 50
	msec_count++; 
     dfc:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <msec_count>
     e00:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <msec_count+0x1>
     e04:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <msec_count+0x2>
     e08:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <msec_count+0x3>
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	a1 1d       	adc	r26, r1
     e10:	b1 1d       	adc	r27, r1
     e12:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <msec_count>
     e16:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <msec_count+0x1>
     e1a:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <msec_count+0x2>
     e1e:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <msec_count+0x3>
	fnd_refreshrate++; 
     e22:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     e26:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     e2a:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     e2e:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	a1 1d       	adc	r26, r1
     e36:	b1 1d       	adc	r27, r1
     e38:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <fnd_refreshrate>
     e3c:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <fnd_refreshrate+0x1>
     e40:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <fnd_refreshrate+0x2>
     e44:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <fnd_refreshrate+0x3>
	check_timer++;
     e48:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <check_timer>
     e4c:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <check_timer+0x1>
     e50:	a0 91 78 01 	lds	r26, 0x0178	; 0x800178 <check_timer+0x2>
     e54:	b0 91 79 01 	lds	r27, 0x0179	; 0x800179 <check_timer+0x3>
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	a1 1d       	adc	r26, r1
     e5c:	b1 1d       	adc	r27, r1
     e5e:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <check_timer>
     e62:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <check_timer+0x1>
     e66:	a0 93 78 01 	sts	0x0178, r26	; 0x800178 <check_timer+0x2>
     e6a:	b0 93 79 01 	sts	0x0179, r27	; 0x800179 <check_timer+0x3>
	loading_clock_change++;
     e6e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <loading_clock_change>
     e72:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <loading_clock_change+0x1>
     e76:	a0 91 74 01 	lds	r26, 0x0174	; 0x800174 <loading_clock_change+0x2>
     e7a:	b0 91 75 01 	lds	r27, 0x0175	; 0x800175 <loading_clock_change+0x3>
     e7e:	01 96       	adiw	r24, 0x01	; 1
     e80:	a1 1d       	adc	r26, r1
     e82:	b1 1d       	adc	r27, r1
     e84:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <loading_clock_change>
     e88:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <loading_clock_change+0x1>
     e8c:	a0 93 74 01 	sts	0x0174, r26	; 0x800174 <loading_clock_change+0x2>
     e90:	b0 93 75 01 	sts	0x0175, r27	; 0x800175 <loading_clock_change+0x3>
}
     e94:	bf 91       	pop	r27
     e96:	af 91       	pop	r26
     e98:	9f 91       	pop	r25
     e9a:	8f 91       	pop	r24
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <init_timer0>:
	}
}

void init_timer0()
{
	TCNT0 = 6;
     ea6:	86 e0       	ldi	r24, 0x06	; 6
     ea8:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     eaa:	83 b7       	in	r24, 0x33	; 51
     eac:	84 60       	ori	r24, 0x04	; 4
     eae:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
     eb0:	87 b7       	in	r24, 0x37	; 55
     eb2:	81 60       	ori	r24, 0x01	; 1
     eb4:	87 bf       	out	0x37, r24	; 55
     eb6:	08 95       	ret

00000eb8 <main>:
	loading_clock_change++;
}

int main(void)
{
	init_timer0();
     eb8:	f6 df       	rcall	.-20     	; 0xea6 <init_timer0>
	init_uart0();
     eba:	ff d0       	rcall	.+510    	; 0x10ba <init_uart0>
	init_uart1();
     ebc:	91 d1       	rcall	.+802    	; 0x11e0 <init_uart1>
	init_ultrasonic();
     ebe:	01 d2       	rcall	.+1026   	; 0x12c2 <init_ultrasonic>
	init_button();
     ec0:	04 d9       	rcall	.-3576   	; 0xca <init_button>
     ec2:	0c d0       	rcall	.+24     	; 0xedc <init_timer3_pwm>
	init_timer3_pwm();
     ec4:	23 d0       	rcall	.+70     	; 0xf0c <init_n289n>
     ec6:	84 e2       	ldi	r24, 0x24	; 36
	init_n289n();
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <__iob+0x3>
	
	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     ece:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__iob+0x2>
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	8a bb       	out	0x1a, r24	; 26
	
	DDRA=0xff;   // led를 출력 모드로
     ed6:	78 94       	sei
     ed8:	67 dd       	rcall	.-1330   	; 0x9a8 <fnd_main>
	sei();     // 전역적으로 interrupt 허용
     eda:	ff cf       	rjmp	.-2      	; 0xeda <main+0x22>

00000edc <init_timer3_pwm>:
	
	fnd_main();
     edc:	82 b1       	in	r24, 0x02	; 2
     ede:	88 62       	ori	r24, 0x28	; 40
     ee0:	82 b9       	out	0x02, r24	; 2
void init_timer3_pwm(void)
{
	// DDRE |= 1 << 3 | 1 << 4 | 1 << 5; 현재 4번에 초음파가 연결되어 있다.
	DDRE |= 1 << 3 | 1 << 5;
	// 모드 5 : 8비트 고속 pwm    TCCR3A레지스터 WGM30과 TCCR3B레지스터 WGM32를 1로 만든다.
	TCCR3A |= 1 << WGM30;
     ee2:	ab e8       	ldi	r26, 0x8B	; 139
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	8c 91       	ld	r24, X
     ee8:	81 60       	ori	r24, 0x01	; 1
     eea:	8c 93       	st	X, r24
	TCCR3B |= 1 << WGM32;
     eec:	ea e8       	ldi	r30, 0x8A	; 138
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	88 60       	ori	r24, 0x08	; 8
     ef4:	80 83       	st	Z, r24
	// 비반전모드 top : 0x00ff  비교일치값(pwm)지정 : OCR3C
	// TCCR3A레지스터의 COM3C1을 1로 set
	// 비교일치 발생시 OC3C의 출력 핀은 LOw로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR3A |= 1 << COM3C1;
     ef6:	8c 91       	ld	r24, X
     ef8:	88 60       	ori	r24, 0x08	; 8
     efa:	8c 93       	st	X, r24
	// 분주비 : 64   16,000,000hz -> 250,000hz         TCCR3B의 CS30, CS31을 1로 set
	// 주기 : 1 / 250,000 -> 4us
	// 250000hz에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//			    127개의 펄스를 count하면 소요시간 : 0.51ms
	TCCR3B |= 1 << CS31 | 1 << CS30;
     efc:	80 81       	ld	r24, Z
     efe:	83 60       	ori	r24, 0x03	; 3
     f00:	80 83       	st	Z, r24
	OCR3C = 0; // 비교일치값 (Output Compare Register : PWM 값
     f02:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     f06:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     f0a:	08 95       	ret

00000f0c <init_n289n>:
}

void init_n289n(void)
{
	PORTF &= ~(1 << 6 | 1 << 7);  // 6, 7 reset
     f0c:	e2 e6       	ldi	r30, 0x62	; 98
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8f 73       	andi	r24, 0x3F	; 63
     f14:	80 83       	st	Z, r24
	PORTF |= 1 << 6; // 정회전
     f16:	80 81       	ld	r24, Z
     f18:	80 64       	ori	r24, 0x40	; 64
     f1a:	80 83       	st	Z, r24
     f1c:	08 95       	ret

00000f1e <washing_machine_fan_control>:
}

void washing_machine_fan_control(int *spin_strength)
{
	int pause_toggle = 0; // 일시정지 토글
	OCR3C = *spin_strength;
     f1e:	fc 01       	movw	r30, r24
     f20:	80 81       	ld	r24, Z
     f22:	91 81       	ldd	r25, Z+1	; 0x01
     f24:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     f28:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	
	if (check_timer >= 5000)
     f2c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <check_timer>
     f30:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <check_timer+0x1>
     f34:	a0 91 78 01 	lds	r26, 0x0178	; 0x800178 <check_timer+0x2>
     f38:	b0 91 79 01 	lds	r27, 0x0179	; 0x800179 <check_timer+0x3>
     f3c:	88 38       	cpi	r24, 0x88	; 136
     f3e:	93 41       	sbci	r25, 0x13	; 19
     f40:	a1 05       	cpc	r26, r1
     f42:	b1 05       	cpc	r27, r1
     f44:	d8 f0       	brcs	.+54     	; 0xf7c <washing_machine_fan_control+0x5e>
	{
		PORTF &= ~(1 << 6 | 1 << 7);  // 6, 7 reset
     f46:	e2 e6       	ldi	r30, 0x62	; 98
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8f 73       	andi	r24, 0x3F	; 63
     f4e:	80 83       	st	Z, r24
		fan_forward = !fan_forward;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <fan_forward>
     f58:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <fan_forward+0x1>
     f5c:	23 2b       	or	r18, r19
     f5e:	11 f0       	breq	.+4      	; 0xf64 <washing_machine_fan_control+0x46>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <fan_forward+0x1>
     f68:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <fan_forward>
		check_timer = 0;
     f6c:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <check_timer>
     f70:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <check_timer+0x1>
     f74:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <check_timer+0x2>
     f78:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <check_timer+0x3>
	}
	
	if (fan_forward == 1 && pause_toggle == 0)
     f7c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <fan_forward>
     f80:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <fan_forward+0x1>
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	91 05       	cpc	r25, r1
     f88:	31 f4       	brne	.+12     	; 0xf96 <washing_machine_fan_control+0x78>
	{
		PORTF |= 1 << 6; // 정회전
     f8a:	e2 e6       	ldi	r30, 0x62	; 98
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 64       	ori	r24, 0x40	; 64
     f92:	80 83       	st	Z, r24
     f94:	07 c0       	rjmp	.+14     	; 0xfa4 <washing_machine_fan_control+0x86>
	}
	else if (fan_forward == 0 && pause_toggle == 0)
     f96:	89 2b       	or	r24, r25
     f98:	29 f4       	brne	.+10     	; 0xfa4 <washing_machine_fan_control+0x86>
	{
		PORTF |= 1 << 7; // 역회전
     f9a:	e2 e6       	ldi	r30, 0x62	; 98
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	80 68       	ori	r24, 0x80	; 128
     fa2:	80 83       	st	Z, r24
	}
	
	if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 일시정지
     fa4:	64 e0       	ldi	r22, 0x04	; 4
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	92 d8       	rcall	.-3804   	; 0xd2 <get_button>
     fae:	89 2b       	or	r24, r25
     fb0:	29 f0       	breq	.+10     	; 0xfbc <washing_machine_fan_control+0x9e>
	{
		pause_toggle = !pause_toggle;
		
		if(pause_toggle)
		{
			PORTF |= 1 << 6 | 1 << 7;
     fb2:	e2 e6       	ldi	r30, 0x62	; 98
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	80 6c       	ori	r24, 0xC0	; 192
     fba:	80 83       	st	Z, r24
     fbc:	08 95       	ret

00000fbe <__vector_18>:

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     fbe:	1f 92       	push	r1
     fc0:	0f 92       	push	r0
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	0f 92       	push	r0
     fc6:	11 24       	eor	r1, r1
     fc8:	0b b6       	in	r0, 0x3b	; 59
     fca:	0f 92       	push	r0
     fcc:	2f 93       	push	r18
     fce:	3f 93       	push	r19
     fd0:	4f 93       	push	r20
     fd2:	5f 93       	push	r21
     fd4:	6f 93       	push	r22
     fd6:	7f 93       	push	r23
     fd8:	8f 93       	push	r24
     fda:	9f 93       	push	r25
     fdc:	af 93       	push	r26
     fde:	bf 93       	push	r27
     fe0:	ef 93       	push	r30
     fe2:	ff 93       	push	r31
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	1f 92       	push	r1
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     fee:	8c b1       	in	r24, 0x0c	; 12
     ff0:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	8d 30       	cpi	r24, 0x0D	; 13
     ff6:	19 f0       	breq	.+6      	; 0xffe <__vector_18+0x40>
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	8a 30       	cpi	r24, 0x0A	; 10
     ffc:	61 f5       	brne	.+88     	; 0x1056 <__DATA_REGION_LENGTH__+0x56>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     ffe:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <rear>
    1002:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <rear+0x1>
    1006:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <i.1894>
    100a:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <i.1894+0x1>
    100e:	40 e5       	ldi	r20, 0x50	; 80
    1010:	42 9f       	mul	r20, r18
    1012:	f0 01       	movw	r30, r0
    1014:	43 9f       	mul	r20, r19
    1016:	f0 0d       	add	r31, r0
    1018:	11 24       	eor	r1, r1
    101a:	e4 57       	subi	r30, 0x74	; 116
    101c:	fe 4f       	sbci	r31, 0xFE	; 254
    101e:	e8 0f       	add	r30, r24
    1020:	f9 1f       	adc	r31, r25
    1022:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
    1024:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <i.1894+0x1>
    1028:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <i.1894>
		rear++;
    102c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <rear>
    1030:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <rear+0x1>
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <rear+0x1>
    103a:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
    103e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <rear>
    1042:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <rear+0x1>
    1046:	6a e0       	ldi	r22, 0x0A	; 10
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	d7 d2       	rcall	.+1454   	; 0x15fa <__divmodhi4>
    104c:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <rear+0x1>
    1050:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <rear>
    1054:	1c c0       	rjmp	.+56     	; 0x108e <__DATA_REGION_LENGTH__+0x8e>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
    1056:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <rear>
    105a:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <rear+0x1>
    105e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <i.1894>
    1062:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <i.1894+0x1>
    1066:	9c 01       	movw	r18, r24
    1068:	2f 5f       	subi	r18, 0xFF	; 255
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <i.1894+0x1>
    1070:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <i.1894>
    1074:	49 81       	ldd	r20, Y+1	; 0x01
    1076:	50 e5       	ldi	r21, 0x50	; 80
    1078:	56 9f       	mul	r21, r22
    107a:	90 01       	movw	r18, r0
    107c:	57 9f       	mul	r21, r23
    107e:	30 0d       	add	r19, r0
    1080:	11 24       	eor	r1, r1
    1082:	24 57       	subi	r18, 0x74	; 116
    1084:	3e 4f       	sbci	r19, 0xFE	; 254
    1086:	f9 01       	movw	r30, r18
    1088:	e8 0f       	add	r30, r24
    108a:	f9 1f       	adc	r31, r25
    108c:	40 83       	st	Z, r20
	}
		  
}
    108e:	0f 90       	pop	r0
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	ff 91       	pop	r31
    1096:	ef 91       	pop	r30
    1098:	bf 91       	pop	r27
    109a:	af 91       	pop	r26
    109c:	9f 91       	pop	r25
    109e:	8f 91       	pop	r24
    10a0:	7f 91       	pop	r23
    10a2:	6f 91       	pop	r22
    10a4:	5f 91       	pop	r21
    10a6:	4f 91       	pop	r20
    10a8:	3f 91       	pop	r19
    10aa:	2f 91       	pop	r18
    10ac:	0f 90       	pop	r0
    10ae:	0b be       	out	0x3b, r0	; 59
    10b0:	0f 90       	pop	r0
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	0f 90       	pop	r0
    10b6:	1f 90       	pop	r1
    10b8:	18 95       	reti

000010ba <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
    10ba:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
    10be:	8f ec       	ldi	r24, 0xCF	; 207
    10c0:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
    10c2:	8b b1       	in	r24, 0x0b	; 11
    10c4:	82 60       	ori	r24, 0x02	; 2
    10c6:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
    10c8:	e5 e9       	ldi	r30, 0x95	; 149
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	86 60       	ori	r24, 0x06	; 6
    10d0:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
    10d2:	8a b1       	in	r24, 0x0a	; 10
    10d4:	88 69       	ori	r24, 0x98	; 152
    10d6:	8a b9       	out	0x0a, r24	; 10
    10d8:	08 95       	ret

000010da <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
    10da:	5d 9b       	sbis	0x0b, 5	; 11
    10dc:	fe cf       	rjmp	.-4      	; 0x10da <UART0_transmit>
		;   // no operation NOP
	
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
    10de:	8c b9       	out	0x0c, r24	; 12
    10e0:	08 95       	ret

000010e2 <__vector_30>:

// BT로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART1_RX_vect)
{
    10e2:	1f 92       	push	r1
    10e4:	0f 92       	push	r0
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	0f 92       	push	r0
    10ea:	11 24       	eor	r1, r1
    10ec:	0b b6       	in	r0, 0x3b	; 59
    10ee:	0f 92       	push	r0
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	1f 92       	push	r1
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
    1112:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1116:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	8d 30       	cpi	r24, 0x0D	; 13
    111c:	19 f0       	breq	.+6      	; 0x1124 <__stack+0x25>
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	8a 30       	cpi	r24, 0x0A	; 10
    1122:	61 f5       	brne	.+88     	; 0x117c <__stack+0x7d>
	{
		rx1_buff[rear1][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
    1124:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <rear1>
    1128:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <rear1+0x1>
    112c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <i.1896>
    1130:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <i.1896+0x1>
    1134:	40 e5       	ldi	r20, 0x50	; 80
    1136:	42 9f       	mul	r20, r18
    1138:	f0 01       	movw	r30, r0
    113a:	43 9f       	mul	r20, r19
    113c:	f0 0d       	add	r31, r0
    113e:	11 24       	eor	r1, r1
    1140:	e4 55       	subi	r30, 0x54	; 84
    1142:	fb 4f       	sbci	r31, 0xFB	; 251
    1144:	e8 0f       	add	r30, r24
    1146:	f9 1f       	adc	r31, r25
    1148:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
    114a:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <i.1896+0x1>
    114e:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <i.1896>
		rear1++;
    1152:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <rear1>
    1156:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <rear1+0x1>
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <rear1+0x1>
    1160:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <rear1>
		rear1 %= COMMAND_NUMBER;   // 0 ~ 9 if (rear1 >= 9) rear1 =0;
    1164:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <rear1>
    1168:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <rear1+0x1>
    116c:	6a e0       	ldi	r22, 0x0A	; 10
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	44 d2       	rcall	.+1160   	; 0x15fa <__divmodhi4>
    1172:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <rear1+0x1>
    1176:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <rear1>
    117a:	1c c0       	rjmp	.+56     	; 0x11b4 <__stack+0xb5>
		// !!!! 이곳에 queue full (rx1_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx1_buff[rear1][i++] = data;
    117c:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <rear1>
    1180:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <rear1+0x1>
    1184:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <i.1896>
    1188:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <i.1896+0x1>
    118c:	9c 01       	movw	r18, r24
    118e:	2f 5f       	subi	r18, 0xFF	; 255
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	30 93 87 01 	sts	0x0187, r19	; 0x800187 <i.1896+0x1>
    1196:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <i.1896>
    119a:	49 81       	ldd	r20, Y+1	; 0x01
    119c:	50 e5       	ldi	r21, 0x50	; 80
    119e:	56 9f       	mul	r21, r22
    11a0:	90 01       	movw	r18, r0
    11a2:	57 9f       	mul	r21, r23
    11a4:	30 0d       	add	r19, r0
    11a6:	11 24       	eor	r1, r1
    11a8:	24 55       	subi	r18, 0x54	; 84
    11aa:	3b 4f       	sbci	r19, 0xFB	; 251
    11ac:	f9 01       	movw	r30, r18
    11ae:	e8 0f       	add	r30, r24
    11b0:	f9 1f       	adc	r31, r25
    11b2:	40 83       	st	Z, r20
	}
		  
}
    11b4:	0f 90       	pop	r0
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	ff 91       	pop	r31
    11bc:	ef 91       	pop	r30
    11be:	bf 91       	pop	r27
    11c0:	af 91       	pop	r26
    11c2:	9f 91       	pop	r25
    11c4:	8f 91       	pop	r24
    11c6:	7f 91       	pop	r23
    11c8:	6f 91       	pop	r22
    11ca:	5f 91       	pop	r21
    11cc:	4f 91       	pop	r20
    11ce:	3f 91       	pop	r19
    11d0:	2f 91       	pop	r18
    11d2:	0f 90       	pop	r0
    11d4:	0b be       	out	0x3b, r0	; 59
    11d6:	0f 90       	pop	r0
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	0f 90       	pop	r0
    11dc:	1f 90       	pop	r1
    11de:	18 95       	reti

000011e0 <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
    11e0:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
    11e4:	8f ec       	ldi	r24, 0xCF	; 207
    11e6:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
    11ea:	eb e9       	ldi	r30, 0x9B	; 155
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	82 60       	ori	r24, 0x02	; 2
    11f2:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
    11f4:	ed e9       	ldi	r30, 0x9D	; 157
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	86 60       	ori	r24, 0x06	; 6
    11fc:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
    11fe:	ea e9       	ldi	r30, 0x9A	; 154
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	88 69       	ori	r24, 0x98	; 152
    1206:	80 83       	st	Z, r24
    1208:	08 95       	ret

0000120a <__vector_5>:
char scm[50];

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect)
{
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	0f 92       	push	r0
    1212:	11 24       	eor	r1, r1
    1214:	0b b6       	in	r0, 0x3b	; 59
    1216:	0f 92       	push	r0
    1218:	2f 93       	push	r18
    121a:	3f 93       	push	r19
    121c:	4f 93       	push	r20
    121e:	5f 93       	push	r21
    1220:	6f 93       	push	r22
    1222:	7f 93       	push	r23
    1224:	8f 93       	push	r24
    1226:	9f 93       	push	r25
    1228:	af 93       	push	r26
    122a:	bf 93       	push	r27
    122c:	ef 93       	push	r30
    122e:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN & (1 << ECHO))
    1230:	0c 9b       	sbis	0x01, 4	; 1
    1232:	03 c0       	rjmp	.+6      	; 0x123a <__vector_5+0x30>
	{
		TCNT1 = 0;
    1234:	1d bc       	out	0x2d, r1	; 45
    1236:	1c bc       	out	0x2c, r1	; 44
    1238:	31 c0       	rjmp	.+98     	; 0x129c <__vector_5+0x92>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
    123a:	6c b5       	in	r22, 0x2c	; 44
    123c:	7d b5       	in	r23, 0x2d	; 45
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	ea d0       	rcall	.+468    	; 0x1418 <__floatunsisf>
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	34 e2       	ldi	r19, 0x24	; 36
    1248:	44 e7       	ldi	r20, 0x74	; 116
    124a:	59 e4       	ldi	r21, 0x49	; 73
    124c:	73 d1       	rcall	.+742    	; 0x1534 <__mulsf3>
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e8       	ldi	r20, 0x80	; 128
    1254:	54 e4       	ldi	r21, 0x44	; 68
    1256:	6e d1       	rcall	.+732    	; 0x1534 <__mulsf3>
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	34 e2       	ldi	r19, 0x24	; 36
    125c:	44 e7       	ldi	r20, 0x74	; 116
    125e:	5b e4       	ldi	r21, 0x4B	; 75
    1260:	42 d0       	rcall	.+132    	; 0x12e6 <__divsf3>
    1262:	a9 d0       	rcall	.+338    	; 0x13b6 <__fixsfsi>
    1264:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <ultrasonic_distance+0x1>
    1268:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <ultrasonic_distance>
		
		// 예) TCNT1에 10이 들어 있다고 가정하자
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
		sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
    126c:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <ultrasonic_distance>
    1270:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <ultrasonic_distance+0x1>
    1274:	6a e3       	ldi	r22, 0x3A	; 58
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	c0 d1       	rcall	.+896    	; 0x15fa <__divmodhi4>
    127a:	7f 93       	push	r23
    127c:	6f 93       	push	r22
    127e:	85 e5       	ldi	r24, 0x55	; 85
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	9f 93       	push	r25
    1284:	8f 93       	push	r24
    1286:	8c ec       	ldi	r24, 0xCC	; 204
    1288:	97 e0       	ldi	r25, 0x07	; 7
    128a:	9f 93       	push	r25
    128c:	8f 93       	push	r24
    128e:	fe d1       	rcall	.+1020   	; 0x168c <sprintf>
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
	}
}
    129c:	ff 91       	pop	r31
    129e:	ef 91       	pop	r30
    12a0:	bf 91       	pop	r27
    12a2:	af 91       	pop	r26
    12a4:	9f 91       	pop	r25
    12a6:	8f 91       	pop	r24
    12a8:	7f 91       	pop	r23
    12aa:	6f 91       	pop	r22
    12ac:	5f 91       	pop	r21
    12ae:	4f 91       	pop	r20
    12b0:	3f 91       	pop	r19
    12b2:	2f 91       	pop	r18
    12b4:	0f 90       	pop	r0
    12b6:	0b be       	out	0x3b, r0	; 59
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <init_ultrasonic>:

void init_ultrasonic()
{
	TRIG_DDR |= 1 << TRIG; // output mode로 설정
    12c2:	e4 e6       	ldi	r30, 0x64	; 100
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	80 61       	ori	r24, 0x10	; 16
    12ca:	80 83       	st	Z, r24
	ECHO_DDR &= ~(1 << ECHO); // input mode로 설정
    12cc:	82 b1       	in	r24, 0x02	; 2
    12ce:	8f 7e       	andi	r24, 0xEF	; 239
    12d0:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
    12d2:	8a b7       	in	r24, 0x3a	; 58
    12d4:	81 60       	ori	r24, 0x01	; 1
    12d6:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us	
	TCCR1B |=  1 << CS12 | 1 << CS10; // 1024로 분주
    12d8:	8e b5       	in	r24, 0x2e	; 46
    12da:	85 60       	ori	r24, 0x05	; 5
    12dc:	8e bd       	out	0x2e, r24	; 46
	EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
    12de:	89 b7       	in	r24, 0x39	; 57
    12e0:	80 61       	ori	r24, 0x10	; 16
    12e2:	89 bf       	out	0x39, r24	; 57
    12e4:	08 95       	ret

000012e6 <__divsf3>:
    12e6:	0c d0       	rcall	.+24     	; 0x1300 <__divsf3x>
    12e8:	eb c0       	rjmp	.+470    	; 0x14c0 <__fp_round>
    12ea:	e3 d0       	rcall	.+454    	; 0x14b2 <__fp_pscB>
    12ec:	40 f0       	brcs	.+16     	; 0x12fe <__divsf3+0x18>
    12ee:	da d0       	rcall	.+436    	; 0x14a4 <__fp_pscA>
    12f0:	30 f0       	brcs	.+12     	; 0x12fe <__divsf3+0x18>
    12f2:	21 f4       	brne	.+8      	; 0x12fc <__divsf3+0x16>
    12f4:	5f 3f       	cpi	r21, 0xFF	; 255
    12f6:	19 f0       	breq	.+6      	; 0x12fe <__divsf3+0x18>
    12f8:	cc c0       	rjmp	.+408    	; 0x1492 <__fp_inf>
    12fa:	51 11       	cpse	r21, r1
    12fc:	15 c1       	rjmp	.+554    	; 0x1528 <__fp_szero>
    12fe:	cf c0       	rjmp	.+414    	; 0x149e <__fp_nan>

00001300 <__divsf3x>:
    1300:	f0 d0       	rcall	.+480    	; 0x14e2 <__fp_split3>
    1302:	98 f3       	brcs	.-26     	; 0x12ea <__divsf3+0x4>

00001304 <__divsf3_pse>:
    1304:	99 23       	and	r25, r25
    1306:	c9 f3       	breq	.-14     	; 0x12fa <__divsf3+0x14>
    1308:	55 23       	and	r21, r21
    130a:	b1 f3       	breq	.-20     	; 0x12f8 <__divsf3+0x12>
    130c:	95 1b       	sub	r25, r21
    130e:	55 0b       	sbc	r21, r21
    1310:	bb 27       	eor	r27, r27
    1312:	aa 27       	eor	r26, r26
    1314:	62 17       	cp	r22, r18
    1316:	73 07       	cpc	r23, r19
    1318:	84 07       	cpc	r24, r20
    131a:	38 f0       	brcs	.+14     	; 0x132a <__divsf3_pse+0x26>
    131c:	9f 5f       	subi	r25, 0xFF	; 255
    131e:	5f 4f       	sbci	r21, 0xFF	; 255
    1320:	22 0f       	add	r18, r18
    1322:	33 1f       	adc	r19, r19
    1324:	44 1f       	adc	r20, r20
    1326:	aa 1f       	adc	r26, r26
    1328:	a9 f3       	breq	.-22     	; 0x1314 <__divsf3_pse+0x10>
    132a:	33 d0       	rcall	.+102    	; 0x1392 <__divsf3_pse+0x8e>
    132c:	0e 2e       	mov	r0, r30
    132e:	3a f0       	brmi	.+14     	; 0x133e <__divsf3_pse+0x3a>
    1330:	e0 e8       	ldi	r30, 0x80	; 128
    1332:	30 d0       	rcall	.+96     	; 0x1394 <__divsf3_pse+0x90>
    1334:	91 50       	subi	r25, 0x01	; 1
    1336:	50 40       	sbci	r21, 0x00	; 0
    1338:	e6 95       	lsr	r30
    133a:	00 1c       	adc	r0, r0
    133c:	ca f7       	brpl	.-14     	; 0x1330 <__divsf3_pse+0x2c>
    133e:	29 d0       	rcall	.+82     	; 0x1392 <__divsf3_pse+0x8e>
    1340:	fe 2f       	mov	r31, r30
    1342:	27 d0       	rcall	.+78     	; 0x1392 <__divsf3_pse+0x8e>
    1344:	66 0f       	add	r22, r22
    1346:	77 1f       	adc	r23, r23
    1348:	88 1f       	adc	r24, r24
    134a:	bb 1f       	adc	r27, r27
    134c:	26 17       	cp	r18, r22
    134e:	37 07       	cpc	r19, r23
    1350:	48 07       	cpc	r20, r24
    1352:	ab 07       	cpc	r26, r27
    1354:	b0 e8       	ldi	r27, 0x80	; 128
    1356:	09 f0       	breq	.+2      	; 0x135a <__divsf3_pse+0x56>
    1358:	bb 0b       	sbc	r27, r27
    135a:	80 2d       	mov	r24, r0
    135c:	bf 01       	movw	r22, r30
    135e:	ff 27       	eor	r31, r31
    1360:	93 58       	subi	r25, 0x83	; 131
    1362:	5f 4f       	sbci	r21, 0xFF	; 255
    1364:	2a f0       	brmi	.+10     	; 0x1370 <__divsf3_pse+0x6c>
    1366:	9e 3f       	cpi	r25, 0xFE	; 254
    1368:	51 05       	cpc	r21, r1
    136a:	68 f0       	brcs	.+26     	; 0x1386 <__divsf3_pse+0x82>
    136c:	92 c0       	rjmp	.+292    	; 0x1492 <__fp_inf>
    136e:	dc c0       	rjmp	.+440    	; 0x1528 <__fp_szero>
    1370:	5f 3f       	cpi	r21, 0xFF	; 255
    1372:	ec f3       	brlt	.-6      	; 0x136e <__divsf3_pse+0x6a>
    1374:	98 3e       	cpi	r25, 0xE8	; 232
    1376:	dc f3       	brlt	.-10     	; 0x136e <__divsf3_pse+0x6a>
    1378:	86 95       	lsr	r24
    137a:	77 95       	ror	r23
    137c:	67 95       	ror	r22
    137e:	b7 95       	ror	r27
    1380:	f7 95       	ror	r31
    1382:	9f 5f       	subi	r25, 0xFF	; 255
    1384:	c9 f7       	brne	.-14     	; 0x1378 <__divsf3_pse+0x74>
    1386:	88 0f       	add	r24, r24
    1388:	91 1d       	adc	r25, r1
    138a:	96 95       	lsr	r25
    138c:	87 95       	ror	r24
    138e:	97 f9       	bld	r25, 7
    1390:	08 95       	ret
    1392:	e1 e0       	ldi	r30, 0x01	; 1
    1394:	66 0f       	add	r22, r22
    1396:	77 1f       	adc	r23, r23
    1398:	88 1f       	adc	r24, r24
    139a:	bb 1f       	adc	r27, r27
    139c:	62 17       	cp	r22, r18
    139e:	73 07       	cpc	r23, r19
    13a0:	84 07       	cpc	r24, r20
    13a2:	ba 07       	cpc	r27, r26
    13a4:	20 f0       	brcs	.+8      	; 0x13ae <__divsf3_pse+0xaa>
    13a6:	62 1b       	sub	r22, r18
    13a8:	73 0b       	sbc	r23, r19
    13aa:	84 0b       	sbc	r24, r20
    13ac:	ba 0b       	sbc	r27, r26
    13ae:	ee 1f       	adc	r30, r30
    13b0:	88 f7       	brcc	.-30     	; 0x1394 <__divsf3_pse+0x90>
    13b2:	e0 95       	com	r30
    13b4:	08 95       	ret

000013b6 <__fixsfsi>:
    13b6:	04 d0       	rcall	.+8      	; 0x13c0 <__fixunssfsi>
    13b8:	68 94       	set
    13ba:	b1 11       	cpse	r27, r1
    13bc:	b5 c0       	rjmp	.+362    	; 0x1528 <__fp_szero>
    13be:	08 95       	ret

000013c0 <__fixunssfsi>:
    13c0:	98 d0       	rcall	.+304    	; 0x14f2 <__fp_splitA>
    13c2:	88 f0       	brcs	.+34     	; 0x13e6 <__fixunssfsi+0x26>
    13c4:	9f 57       	subi	r25, 0x7F	; 127
    13c6:	90 f0       	brcs	.+36     	; 0x13ec <__fixunssfsi+0x2c>
    13c8:	b9 2f       	mov	r27, r25
    13ca:	99 27       	eor	r25, r25
    13cc:	b7 51       	subi	r27, 0x17	; 23
    13ce:	a0 f0       	brcs	.+40     	; 0x13f8 <__fixunssfsi+0x38>
    13d0:	d1 f0       	breq	.+52     	; 0x1406 <__fixunssfsi+0x46>
    13d2:	66 0f       	add	r22, r22
    13d4:	77 1f       	adc	r23, r23
    13d6:	88 1f       	adc	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	1a f0       	brmi	.+6      	; 0x13e2 <__fixunssfsi+0x22>
    13dc:	ba 95       	dec	r27
    13de:	c9 f7       	brne	.-14     	; 0x13d2 <__fixunssfsi+0x12>
    13e0:	12 c0       	rjmp	.+36     	; 0x1406 <__fixunssfsi+0x46>
    13e2:	b1 30       	cpi	r27, 0x01	; 1
    13e4:	81 f0       	breq	.+32     	; 0x1406 <__fixunssfsi+0x46>
    13e6:	9f d0       	rcall	.+318    	; 0x1526 <__fp_zero>
    13e8:	b1 e0       	ldi	r27, 0x01	; 1
    13ea:	08 95       	ret
    13ec:	9c c0       	rjmp	.+312    	; 0x1526 <__fp_zero>
    13ee:	67 2f       	mov	r22, r23
    13f0:	78 2f       	mov	r23, r24
    13f2:	88 27       	eor	r24, r24
    13f4:	b8 5f       	subi	r27, 0xF8	; 248
    13f6:	39 f0       	breq	.+14     	; 0x1406 <__fixunssfsi+0x46>
    13f8:	b9 3f       	cpi	r27, 0xF9	; 249
    13fa:	cc f3       	brlt	.-14     	; 0x13ee <__fixunssfsi+0x2e>
    13fc:	86 95       	lsr	r24
    13fe:	77 95       	ror	r23
    1400:	67 95       	ror	r22
    1402:	b3 95       	inc	r27
    1404:	d9 f7       	brne	.-10     	; 0x13fc <__fixunssfsi+0x3c>
    1406:	3e f4       	brtc	.+14     	; 0x1416 <__fixunssfsi+0x56>
    1408:	90 95       	com	r25
    140a:	80 95       	com	r24
    140c:	70 95       	com	r23
    140e:	61 95       	neg	r22
    1410:	7f 4f       	sbci	r23, 0xFF	; 255
    1412:	8f 4f       	sbci	r24, 0xFF	; 255
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	08 95       	ret

00001418 <__floatunsisf>:
    1418:	e8 94       	clt
    141a:	09 c0       	rjmp	.+18     	; 0x142e <__floatsisf+0x12>

0000141c <__floatsisf>:
    141c:	97 fb       	bst	r25, 7
    141e:	3e f4       	brtc	.+14     	; 0x142e <__floatsisf+0x12>
    1420:	90 95       	com	r25
    1422:	80 95       	com	r24
    1424:	70 95       	com	r23
    1426:	61 95       	neg	r22
    1428:	7f 4f       	sbci	r23, 0xFF	; 255
    142a:	8f 4f       	sbci	r24, 0xFF	; 255
    142c:	9f 4f       	sbci	r25, 0xFF	; 255
    142e:	99 23       	and	r25, r25
    1430:	a9 f0       	breq	.+42     	; 0x145c <__floatsisf+0x40>
    1432:	f9 2f       	mov	r31, r25
    1434:	96 e9       	ldi	r25, 0x96	; 150
    1436:	bb 27       	eor	r27, r27
    1438:	93 95       	inc	r25
    143a:	f6 95       	lsr	r31
    143c:	87 95       	ror	r24
    143e:	77 95       	ror	r23
    1440:	67 95       	ror	r22
    1442:	b7 95       	ror	r27
    1444:	f1 11       	cpse	r31, r1
    1446:	f8 cf       	rjmp	.-16     	; 0x1438 <__floatsisf+0x1c>
    1448:	fa f4       	brpl	.+62     	; 0x1488 <__floatsisf+0x6c>
    144a:	bb 0f       	add	r27, r27
    144c:	11 f4       	brne	.+4      	; 0x1452 <__floatsisf+0x36>
    144e:	60 ff       	sbrs	r22, 0
    1450:	1b c0       	rjmp	.+54     	; 0x1488 <__floatsisf+0x6c>
    1452:	6f 5f       	subi	r22, 0xFF	; 255
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	8f 4f       	sbci	r24, 0xFF	; 255
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	16 c0       	rjmp	.+44     	; 0x1488 <__floatsisf+0x6c>
    145c:	88 23       	and	r24, r24
    145e:	11 f0       	breq	.+4      	; 0x1464 <__floatsisf+0x48>
    1460:	96 e9       	ldi	r25, 0x96	; 150
    1462:	11 c0       	rjmp	.+34     	; 0x1486 <__floatsisf+0x6a>
    1464:	77 23       	and	r23, r23
    1466:	21 f0       	breq	.+8      	; 0x1470 <__floatsisf+0x54>
    1468:	9e e8       	ldi	r25, 0x8E	; 142
    146a:	87 2f       	mov	r24, r23
    146c:	76 2f       	mov	r23, r22
    146e:	05 c0       	rjmp	.+10     	; 0x147a <__floatsisf+0x5e>
    1470:	66 23       	and	r22, r22
    1472:	71 f0       	breq	.+28     	; 0x1490 <__floatsisf+0x74>
    1474:	96 e8       	ldi	r25, 0x86	; 134
    1476:	86 2f       	mov	r24, r22
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	2a f0       	brmi	.+10     	; 0x1488 <__floatsisf+0x6c>
    147e:	9a 95       	dec	r25
    1480:	66 0f       	add	r22, r22
    1482:	77 1f       	adc	r23, r23
    1484:	88 1f       	adc	r24, r24
    1486:	da f7       	brpl	.-10     	; 0x147e <__floatsisf+0x62>
    1488:	88 0f       	add	r24, r24
    148a:	96 95       	lsr	r25
    148c:	87 95       	ror	r24
    148e:	97 f9       	bld	r25, 7
    1490:	08 95       	ret

00001492 <__fp_inf>:
    1492:	97 f9       	bld	r25, 7
    1494:	9f 67       	ori	r25, 0x7F	; 127
    1496:	80 e8       	ldi	r24, 0x80	; 128
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	08 95       	ret

0000149e <__fp_nan>:
    149e:	9f ef       	ldi	r25, 0xFF	; 255
    14a0:	80 ec       	ldi	r24, 0xC0	; 192
    14a2:	08 95       	ret

000014a4 <__fp_pscA>:
    14a4:	00 24       	eor	r0, r0
    14a6:	0a 94       	dec	r0
    14a8:	16 16       	cp	r1, r22
    14aa:	17 06       	cpc	r1, r23
    14ac:	18 06       	cpc	r1, r24
    14ae:	09 06       	cpc	r0, r25
    14b0:	08 95       	ret

000014b2 <__fp_pscB>:
    14b2:	00 24       	eor	r0, r0
    14b4:	0a 94       	dec	r0
    14b6:	12 16       	cp	r1, r18
    14b8:	13 06       	cpc	r1, r19
    14ba:	14 06       	cpc	r1, r20
    14bc:	05 06       	cpc	r0, r21
    14be:	08 95       	ret

000014c0 <__fp_round>:
    14c0:	09 2e       	mov	r0, r25
    14c2:	03 94       	inc	r0
    14c4:	00 0c       	add	r0, r0
    14c6:	11 f4       	brne	.+4      	; 0x14cc <__fp_round+0xc>
    14c8:	88 23       	and	r24, r24
    14ca:	52 f0       	brmi	.+20     	; 0x14e0 <__fp_round+0x20>
    14cc:	bb 0f       	add	r27, r27
    14ce:	40 f4       	brcc	.+16     	; 0x14e0 <__fp_round+0x20>
    14d0:	bf 2b       	or	r27, r31
    14d2:	11 f4       	brne	.+4      	; 0x14d8 <__fp_round+0x18>
    14d4:	60 ff       	sbrs	r22, 0
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <__fp_round+0x20>
    14d8:	6f 5f       	subi	r22, 0xFF	; 255
    14da:	7f 4f       	sbci	r23, 0xFF	; 255
    14dc:	8f 4f       	sbci	r24, 0xFF	; 255
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	08 95       	ret

000014e2 <__fp_split3>:
    14e2:	57 fd       	sbrc	r21, 7
    14e4:	90 58       	subi	r25, 0x80	; 128
    14e6:	44 0f       	add	r20, r20
    14e8:	55 1f       	adc	r21, r21
    14ea:	59 f0       	breq	.+22     	; 0x1502 <__fp_splitA+0x10>
    14ec:	5f 3f       	cpi	r21, 0xFF	; 255
    14ee:	71 f0       	breq	.+28     	; 0x150c <__fp_splitA+0x1a>
    14f0:	47 95       	ror	r20

000014f2 <__fp_splitA>:
    14f2:	88 0f       	add	r24, r24
    14f4:	97 fb       	bst	r25, 7
    14f6:	99 1f       	adc	r25, r25
    14f8:	61 f0       	breq	.+24     	; 0x1512 <__fp_splitA+0x20>
    14fa:	9f 3f       	cpi	r25, 0xFF	; 255
    14fc:	79 f0       	breq	.+30     	; 0x151c <__fp_splitA+0x2a>
    14fe:	87 95       	ror	r24
    1500:	08 95       	ret
    1502:	12 16       	cp	r1, r18
    1504:	13 06       	cpc	r1, r19
    1506:	14 06       	cpc	r1, r20
    1508:	55 1f       	adc	r21, r21
    150a:	f2 cf       	rjmp	.-28     	; 0x14f0 <__fp_split3+0xe>
    150c:	46 95       	lsr	r20
    150e:	f1 df       	rcall	.-30     	; 0x14f2 <__fp_splitA>
    1510:	08 c0       	rjmp	.+16     	; 0x1522 <__fp_splitA+0x30>
    1512:	16 16       	cp	r1, r22
    1514:	17 06       	cpc	r1, r23
    1516:	18 06       	cpc	r1, r24
    1518:	99 1f       	adc	r25, r25
    151a:	f1 cf       	rjmp	.-30     	; 0x14fe <__fp_splitA+0xc>
    151c:	86 95       	lsr	r24
    151e:	71 05       	cpc	r23, r1
    1520:	61 05       	cpc	r22, r1
    1522:	08 94       	sec
    1524:	08 95       	ret

00001526 <__fp_zero>:
    1526:	e8 94       	clt

00001528 <__fp_szero>:
    1528:	bb 27       	eor	r27, r27
    152a:	66 27       	eor	r22, r22
    152c:	77 27       	eor	r23, r23
    152e:	cb 01       	movw	r24, r22
    1530:	97 f9       	bld	r25, 7
    1532:	08 95       	ret

00001534 <__mulsf3>:
    1534:	0b d0       	rcall	.+22     	; 0x154c <__mulsf3x>
    1536:	c4 cf       	rjmp	.-120    	; 0x14c0 <__fp_round>
    1538:	b5 df       	rcall	.-150    	; 0x14a4 <__fp_pscA>
    153a:	28 f0       	brcs	.+10     	; 0x1546 <__mulsf3+0x12>
    153c:	ba df       	rcall	.-140    	; 0x14b2 <__fp_pscB>
    153e:	18 f0       	brcs	.+6      	; 0x1546 <__mulsf3+0x12>
    1540:	95 23       	and	r25, r21
    1542:	09 f0       	breq	.+2      	; 0x1546 <__mulsf3+0x12>
    1544:	a6 cf       	rjmp	.-180    	; 0x1492 <__fp_inf>
    1546:	ab cf       	rjmp	.-170    	; 0x149e <__fp_nan>
    1548:	11 24       	eor	r1, r1
    154a:	ee cf       	rjmp	.-36     	; 0x1528 <__fp_szero>

0000154c <__mulsf3x>:
    154c:	ca df       	rcall	.-108    	; 0x14e2 <__fp_split3>
    154e:	a0 f3       	brcs	.-24     	; 0x1538 <__mulsf3+0x4>

00001550 <__mulsf3_pse>:
    1550:	95 9f       	mul	r25, r21
    1552:	d1 f3       	breq	.-12     	; 0x1548 <__mulsf3+0x14>
    1554:	95 0f       	add	r25, r21
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	55 1f       	adc	r21, r21
    155a:	62 9f       	mul	r22, r18
    155c:	f0 01       	movw	r30, r0
    155e:	72 9f       	mul	r23, r18
    1560:	bb 27       	eor	r27, r27
    1562:	f0 0d       	add	r31, r0
    1564:	b1 1d       	adc	r27, r1
    1566:	63 9f       	mul	r22, r19
    1568:	aa 27       	eor	r26, r26
    156a:	f0 0d       	add	r31, r0
    156c:	b1 1d       	adc	r27, r1
    156e:	aa 1f       	adc	r26, r26
    1570:	64 9f       	mul	r22, r20
    1572:	66 27       	eor	r22, r22
    1574:	b0 0d       	add	r27, r0
    1576:	a1 1d       	adc	r26, r1
    1578:	66 1f       	adc	r22, r22
    157a:	82 9f       	mul	r24, r18
    157c:	22 27       	eor	r18, r18
    157e:	b0 0d       	add	r27, r0
    1580:	a1 1d       	adc	r26, r1
    1582:	62 1f       	adc	r22, r18
    1584:	73 9f       	mul	r23, r19
    1586:	b0 0d       	add	r27, r0
    1588:	a1 1d       	adc	r26, r1
    158a:	62 1f       	adc	r22, r18
    158c:	83 9f       	mul	r24, r19
    158e:	a0 0d       	add	r26, r0
    1590:	61 1d       	adc	r22, r1
    1592:	22 1f       	adc	r18, r18
    1594:	74 9f       	mul	r23, r20
    1596:	33 27       	eor	r19, r19
    1598:	a0 0d       	add	r26, r0
    159a:	61 1d       	adc	r22, r1
    159c:	23 1f       	adc	r18, r19
    159e:	84 9f       	mul	r24, r20
    15a0:	60 0d       	add	r22, r0
    15a2:	21 1d       	adc	r18, r1
    15a4:	82 2f       	mov	r24, r18
    15a6:	76 2f       	mov	r23, r22
    15a8:	6a 2f       	mov	r22, r26
    15aa:	11 24       	eor	r1, r1
    15ac:	9f 57       	subi	r25, 0x7F	; 127
    15ae:	50 40       	sbci	r21, 0x00	; 0
    15b0:	8a f0       	brmi	.+34     	; 0x15d4 <__mulsf3_pse+0x84>
    15b2:	e1 f0       	breq	.+56     	; 0x15ec <__mulsf3_pse+0x9c>
    15b4:	88 23       	and	r24, r24
    15b6:	4a f0       	brmi	.+18     	; 0x15ca <__mulsf3_pse+0x7a>
    15b8:	ee 0f       	add	r30, r30
    15ba:	ff 1f       	adc	r31, r31
    15bc:	bb 1f       	adc	r27, r27
    15be:	66 1f       	adc	r22, r22
    15c0:	77 1f       	adc	r23, r23
    15c2:	88 1f       	adc	r24, r24
    15c4:	91 50       	subi	r25, 0x01	; 1
    15c6:	50 40       	sbci	r21, 0x00	; 0
    15c8:	a9 f7       	brne	.-22     	; 0x15b4 <__mulsf3_pse+0x64>
    15ca:	9e 3f       	cpi	r25, 0xFE	; 254
    15cc:	51 05       	cpc	r21, r1
    15ce:	70 f0       	brcs	.+28     	; 0x15ec <__mulsf3_pse+0x9c>
    15d0:	60 cf       	rjmp	.-320    	; 0x1492 <__fp_inf>
    15d2:	aa cf       	rjmp	.-172    	; 0x1528 <__fp_szero>
    15d4:	5f 3f       	cpi	r21, 0xFF	; 255
    15d6:	ec f3       	brlt	.-6      	; 0x15d2 <__mulsf3_pse+0x82>
    15d8:	98 3e       	cpi	r25, 0xE8	; 232
    15da:	dc f3       	brlt	.-10     	; 0x15d2 <__mulsf3_pse+0x82>
    15dc:	86 95       	lsr	r24
    15de:	77 95       	ror	r23
    15e0:	67 95       	ror	r22
    15e2:	b7 95       	ror	r27
    15e4:	f7 95       	ror	r31
    15e6:	e7 95       	ror	r30
    15e8:	9f 5f       	subi	r25, 0xFF	; 255
    15ea:	c1 f7       	brne	.-16     	; 0x15dc <__mulsf3_pse+0x8c>
    15ec:	fe 2b       	or	r31, r30
    15ee:	88 0f       	add	r24, r24
    15f0:	91 1d       	adc	r25, r1
    15f2:	96 95       	lsr	r25
    15f4:	87 95       	ror	r24
    15f6:	97 f9       	bld	r25, 7
    15f8:	08 95       	ret

000015fa <__divmodhi4>:
    15fa:	97 fb       	bst	r25, 7
    15fc:	07 2e       	mov	r0, r23
    15fe:	16 f4       	brtc	.+4      	; 0x1604 <__divmodhi4+0xa>
    1600:	00 94       	com	r0
    1602:	06 d0       	rcall	.+12     	; 0x1610 <__divmodhi4_neg1>
    1604:	77 fd       	sbrc	r23, 7
    1606:	08 d0       	rcall	.+16     	; 0x1618 <__divmodhi4_neg2>
    1608:	2d d0       	rcall	.+90     	; 0x1664 <__udivmodhi4>
    160a:	07 fc       	sbrc	r0, 7
    160c:	05 d0       	rcall	.+10     	; 0x1618 <__divmodhi4_neg2>
    160e:	3e f4       	brtc	.+14     	; 0x161e <__divmodhi4_exit>

00001610 <__divmodhi4_neg1>:
    1610:	90 95       	com	r25
    1612:	81 95       	neg	r24
    1614:	9f 4f       	sbci	r25, 0xFF	; 255
    1616:	08 95       	ret

00001618 <__divmodhi4_neg2>:
    1618:	70 95       	com	r23
    161a:	61 95       	neg	r22
    161c:	7f 4f       	sbci	r23, 0xFF	; 255

0000161e <__divmodhi4_exit>:
    161e:	08 95       	ret

00001620 <__udivmodsi4>:
    1620:	a1 e2       	ldi	r26, 0x21	; 33
    1622:	1a 2e       	mov	r1, r26
    1624:	aa 1b       	sub	r26, r26
    1626:	bb 1b       	sub	r27, r27
    1628:	fd 01       	movw	r30, r26
    162a:	0d c0       	rjmp	.+26     	; 0x1646 <__udivmodsi4_ep>

0000162c <__udivmodsi4_loop>:
    162c:	aa 1f       	adc	r26, r26
    162e:	bb 1f       	adc	r27, r27
    1630:	ee 1f       	adc	r30, r30
    1632:	ff 1f       	adc	r31, r31
    1634:	a2 17       	cp	r26, r18
    1636:	b3 07       	cpc	r27, r19
    1638:	e4 07       	cpc	r30, r20
    163a:	f5 07       	cpc	r31, r21
    163c:	20 f0       	brcs	.+8      	; 0x1646 <__udivmodsi4_ep>
    163e:	a2 1b       	sub	r26, r18
    1640:	b3 0b       	sbc	r27, r19
    1642:	e4 0b       	sbc	r30, r20
    1644:	f5 0b       	sbc	r31, r21

00001646 <__udivmodsi4_ep>:
    1646:	66 1f       	adc	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	88 1f       	adc	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	1a 94       	dec	r1
    1650:	69 f7       	brne	.-38     	; 0x162c <__udivmodsi4_loop>
    1652:	60 95       	com	r22
    1654:	70 95       	com	r23
    1656:	80 95       	com	r24
    1658:	90 95       	com	r25
    165a:	9b 01       	movw	r18, r22
    165c:	ac 01       	movw	r20, r24
    165e:	bd 01       	movw	r22, r26
    1660:	cf 01       	movw	r24, r30
    1662:	08 95       	ret

00001664 <__udivmodhi4>:
    1664:	aa 1b       	sub	r26, r26
    1666:	bb 1b       	sub	r27, r27
    1668:	51 e1       	ldi	r21, 0x11	; 17
    166a:	07 c0       	rjmp	.+14     	; 0x167a <__udivmodhi4_ep>

0000166c <__udivmodhi4_loop>:
    166c:	aa 1f       	adc	r26, r26
    166e:	bb 1f       	adc	r27, r27
    1670:	a6 17       	cp	r26, r22
    1672:	b7 07       	cpc	r27, r23
    1674:	10 f0       	brcs	.+4      	; 0x167a <__udivmodhi4_ep>
    1676:	a6 1b       	sub	r26, r22
    1678:	b7 0b       	sbc	r27, r23

0000167a <__udivmodhi4_ep>:
    167a:	88 1f       	adc	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	5a 95       	dec	r21
    1680:	a9 f7       	brne	.-22     	; 0x166c <__udivmodhi4_loop>
    1682:	80 95       	com	r24
    1684:	90 95       	com	r25
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	08 95       	ret

0000168c <sprintf>:
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	2e 97       	sbiw	r28, 0x0e	; 14
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	0d 89       	ldd	r16, Y+21	; 0x15
    16a6:	1e 89       	ldd	r17, Y+22	; 0x16
    16a8:	86 e0       	ldi	r24, 0x06	; 6
    16aa:	8c 83       	std	Y+4, r24	; 0x04
    16ac:	1a 83       	std	Y+2, r17	; 0x02
    16ae:	09 83       	std	Y+1, r16	; 0x01
    16b0:	8f ef       	ldi	r24, 0xFF	; 255
    16b2:	9f e7       	ldi	r25, 0x7F	; 127
    16b4:	9e 83       	std	Y+6, r25	; 0x06
    16b6:	8d 83       	std	Y+5, r24	; 0x05
    16b8:	ae 01       	movw	r20, r28
    16ba:	47 5e       	subi	r20, 0xE7	; 231
    16bc:	5f 4f       	sbci	r21, 0xFF	; 255
    16be:	6f 89       	ldd	r22, Y+23	; 0x17
    16c0:	78 8d       	ldd	r23, Y+24	; 0x18
    16c2:	ce 01       	movw	r24, r28
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	10 d0       	rcall	.+32     	; 0x16e8 <vfprintf>
    16c8:	ef 81       	ldd	r30, Y+7	; 0x07
    16ca:	f8 85       	ldd	r31, Y+8	; 0x08
    16cc:	e0 0f       	add	r30, r16
    16ce:	f1 1f       	adc	r31, r17
    16d0:	10 82       	st	Z, r1
    16d2:	2e 96       	adiw	r28, 0x0e	; 14
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <vfprintf>:
    16e8:	2f 92       	push	r2
    16ea:	3f 92       	push	r3
    16ec:	4f 92       	push	r4
    16ee:	5f 92       	push	r5
    16f0:	6f 92       	push	r6
    16f2:	7f 92       	push	r7
    16f4:	8f 92       	push	r8
    16f6:	9f 92       	push	r9
    16f8:	af 92       	push	r10
    16fa:	bf 92       	push	r11
    16fc:	cf 92       	push	r12
    16fe:	df 92       	push	r13
    1700:	ef 92       	push	r14
    1702:	ff 92       	push	r15
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	2b 97       	sbiw	r28, 0x0b	; 11
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	6c 01       	movw	r12, r24
    171e:	7b 01       	movw	r14, r22
    1720:	8a 01       	movw	r16, r20
    1722:	fc 01       	movw	r30, r24
    1724:	17 82       	std	Z+7, r1	; 0x07
    1726:	16 82       	std	Z+6, r1	; 0x06
    1728:	83 81       	ldd	r24, Z+3	; 0x03
    172a:	81 ff       	sbrs	r24, 1
    172c:	bf c1       	rjmp	.+894    	; 0x1aac <vfprintf+0x3c4>
    172e:	ce 01       	movw	r24, r28
    1730:	01 96       	adiw	r24, 0x01	; 1
    1732:	3c 01       	movw	r6, r24
    1734:	f6 01       	movw	r30, r12
    1736:	93 81       	ldd	r25, Z+3	; 0x03
    1738:	f7 01       	movw	r30, r14
    173a:	93 fd       	sbrc	r25, 3
    173c:	85 91       	lpm	r24, Z+
    173e:	93 ff       	sbrs	r25, 3
    1740:	81 91       	ld	r24, Z+
    1742:	7f 01       	movw	r14, r30
    1744:	88 23       	and	r24, r24
    1746:	09 f4       	brne	.+2      	; 0x174a <vfprintf+0x62>
    1748:	ad c1       	rjmp	.+858    	; 0x1aa4 <vfprintf+0x3bc>
    174a:	85 32       	cpi	r24, 0x25	; 37
    174c:	39 f4       	brne	.+14     	; 0x175c <vfprintf+0x74>
    174e:	93 fd       	sbrc	r25, 3
    1750:	85 91       	lpm	r24, Z+
    1752:	93 ff       	sbrs	r25, 3
    1754:	81 91       	ld	r24, Z+
    1756:	7f 01       	movw	r14, r30
    1758:	85 32       	cpi	r24, 0x25	; 37
    175a:	21 f4       	brne	.+8      	; 0x1764 <vfprintf+0x7c>
    175c:	b6 01       	movw	r22, r12
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	d6 d1       	rcall	.+940    	; 0x1b0e <fputc>
    1762:	e8 cf       	rjmp	.-48     	; 0x1734 <vfprintf+0x4c>
    1764:	91 2c       	mov	r9, r1
    1766:	21 2c       	mov	r2, r1
    1768:	31 2c       	mov	r3, r1
    176a:	ff e1       	ldi	r31, 0x1F	; 31
    176c:	f3 15       	cp	r31, r3
    176e:	d8 f0       	brcs	.+54     	; 0x17a6 <vfprintf+0xbe>
    1770:	8b 32       	cpi	r24, 0x2B	; 43
    1772:	79 f0       	breq	.+30     	; 0x1792 <vfprintf+0xaa>
    1774:	38 f4       	brcc	.+14     	; 0x1784 <vfprintf+0x9c>
    1776:	80 32       	cpi	r24, 0x20	; 32
    1778:	79 f0       	breq	.+30     	; 0x1798 <vfprintf+0xb0>
    177a:	83 32       	cpi	r24, 0x23	; 35
    177c:	a1 f4       	brne	.+40     	; 0x17a6 <vfprintf+0xbe>
    177e:	23 2d       	mov	r18, r3
    1780:	20 61       	ori	r18, 0x10	; 16
    1782:	1d c0       	rjmp	.+58     	; 0x17be <vfprintf+0xd6>
    1784:	8d 32       	cpi	r24, 0x2D	; 45
    1786:	61 f0       	breq	.+24     	; 0x17a0 <vfprintf+0xb8>
    1788:	80 33       	cpi	r24, 0x30	; 48
    178a:	69 f4       	brne	.+26     	; 0x17a6 <vfprintf+0xbe>
    178c:	23 2d       	mov	r18, r3
    178e:	21 60       	ori	r18, 0x01	; 1
    1790:	16 c0       	rjmp	.+44     	; 0x17be <vfprintf+0xd6>
    1792:	83 2d       	mov	r24, r3
    1794:	82 60       	ori	r24, 0x02	; 2
    1796:	38 2e       	mov	r3, r24
    1798:	e3 2d       	mov	r30, r3
    179a:	e4 60       	ori	r30, 0x04	; 4
    179c:	3e 2e       	mov	r3, r30
    179e:	2a c0       	rjmp	.+84     	; 0x17f4 <vfprintf+0x10c>
    17a0:	f3 2d       	mov	r31, r3
    17a2:	f8 60       	ori	r31, 0x08	; 8
    17a4:	1d c0       	rjmp	.+58     	; 0x17e0 <vfprintf+0xf8>
    17a6:	37 fc       	sbrc	r3, 7
    17a8:	2d c0       	rjmp	.+90     	; 0x1804 <vfprintf+0x11c>
    17aa:	20 ed       	ldi	r18, 0xD0	; 208
    17ac:	28 0f       	add	r18, r24
    17ae:	2a 30       	cpi	r18, 0x0A	; 10
    17b0:	40 f0       	brcs	.+16     	; 0x17c2 <vfprintf+0xda>
    17b2:	8e 32       	cpi	r24, 0x2E	; 46
    17b4:	b9 f4       	brne	.+46     	; 0x17e4 <vfprintf+0xfc>
    17b6:	36 fc       	sbrc	r3, 6
    17b8:	75 c1       	rjmp	.+746    	; 0x1aa4 <vfprintf+0x3bc>
    17ba:	23 2d       	mov	r18, r3
    17bc:	20 64       	ori	r18, 0x40	; 64
    17be:	32 2e       	mov	r3, r18
    17c0:	19 c0       	rjmp	.+50     	; 0x17f4 <vfprintf+0x10c>
    17c2:	36 fe       	sbrs	r3, 6
    17c4:	06 c0       	rjmp	.+12     	; 0x17d2 <vfprintf+0xea>
    17c6:	8a e0       	ldi	r24, 0x0A	; 10
    17c8:	98 9e       	mul	r9, r24
    17ca:	20 0d       	add	r18, r0
    17cc:	11 24       	eor	r1, r1
    17ce:	92 2e       	mov	r9, r18
    17d0:	11 c0       	rjmp	.+34     	; 0x17f4 <vfprintf+0x10c>
    17d2:	ea e0       	ldi	r30, 0x0A	; 10
    17d4:	2e 9e       	mul	r2, r30
    17d6:	20 0d       	add	r18, r0
    17d8:	11 24       	eor	r1, r1
    17da:	22 2e       	mov	r2, r18
    17dc:	f3 2d       	mov	r31, r3
    17de:	f0 62       	ori	r31, 0x20	; 32
    17e0:	3f 2e       	mov	r3, r31
    17e2:	08 c0       	rjmp	.+16     	; 0x17f4 <vfprintf+0x10c>
    17e4:	8c 36       	cpi	r24, 0x6C	; 108
    17e6:	21 f4       	brne	.+8      	; 0x17f0 <vfprintf+0x108>
    17e8:	83 2d       	mov	r24, r3
    17ea:	80 68       	ori	r24, 0x80	; 128
    17ec:	38 2e       	mov	r3, r24
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <vfprintf+0x10c>
    17f0:	88 36       	cpi	r24, 0x68	; 104
    17f2:	41 f4       	brne	.+16     	; 0x1804 <vfprintf+0x11c>
    17f4:	f7 01       	movw	r30, r14
    17f6:	93 fd       	sbrc	r25, 3
    17f8:	85 91       	lpm	r24, Z+
    17fa:	93 ff       	sbrs	r25, 3
    17fc:	81 91       	ld	r24, Z+
    17fe:	7f 01       	movw	r14, r30
    1800:	81 11       	cpse	r24, r1
    1802:	b3 cf       	rjmp	.-154    	; 0x176a <vfprintf+0x82>
    1804:	98 2f       	mov	r25, r24
    1806:	9f 7d       	andi	r25, 0xDF	; 223
    1808:	95 54       	subi	r25, 0x45	; 69
    180a:	93 30       	cpi	r25, 0x03	; 3
    180c:	28 f4       	brcc	.+10     	; 0x1818 <vfprintf+0x130>
    180e:	0c 5f       	subi	r16, 0xFC	; 252
    1810:	1f 4f       	sbci	r17, 0xFF	; 255
    1812:	9f e3       	ldi	r25, 0x3F	; 63
    1814:	99 83       	std	Y+1, r25	; 0x01
    1816:	0d c0       	rjmp	.+26     	; 0x1832 <vfprintf+0x14a>
    1818:	83 36       	cpi	r24, 0x63	; 99
    181a:	31 f0       	breq	.+12     	; 0x1828 <vfprintf+0x140>
    181c:	83 37       	cpi	r24, 0x73	; 115
    181e:	71 f0       	breq	.+28     	; 0x183c <vfprintf+0x154>
    1820:	83 35       	cpi	r24, 0x53	; 83
    1822:	09 f0       	breq	.+2      	; 0x1826 <vfprintf+0x13e>
    1824:	55 c0       	rjmp	.+170    	; 0x18d0 <vfprintf+0x1e8>
    1826:	20 c0       	rjmp	.+64     	; 0x1868 <vfprintf+0x180>
    1828:	f8 01       	movw	r30, r16
    182a:	80 81       	ld	r24, Z
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	0e 5f       	subi	r16, 0xFE	; 254
    1830:	1f 4f       	sbci	r17, 0xFF	; 255
    1832:	88 24       	eor	r8, r8
    1834:	83 94       	inc	r8
    1836:	91 2c       	mov	r9, r1
    1838:	53 01       	movw	r10, r6
    183a:	12 c0       	rjmp	.+36     	; 0x1860 <vfprintf+0x178>
    183c:	28 01       	movw	r4, r16
    183e:	f2 e0       	ldi	r31, 0x02	; 2
    1840:	4f 0e       	add	r4, r31
    1842:	51 1c       	adc	r5, r1
    1844:	f8 01       	movw	r30, r16
    1846:	a0 80       	ld	r10, Z
    1848:	b1 80       	ldd	r11, Z+1	; 0x01
    184a:	36 fe       	sbrs	r3, 6
    184c:	03 c0       	rjmp	.+6      	; 0x1854 <vfprintf+0x16c>
    184e:	69 2d       	mov	r22, r9
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <vfprintf+0x170>
    1854:	6f ef       	ldi	r22, 0xFF	; 255
    1856:	7f ef       	ldi	r23, 0xFF	; 255
    1858:	c5 01       	movw	r24, r10
    185a:	4e d1       	rcall	.+668    	; 0x1af8 <strnlen>
    185c:	4c 01       	movw	r8, r24
    185e:	82 01       	movw	r16, r4
    1860:	f3 2d       	mov	r31, r3
    1862:	ff 77       	andi	r31, 0x7F	; 127
    1864:	3f 2e       	mov	r3, r31
    1866:	15 c0       	rjmp	.+42     	; 0x1892 <vfprintf+0x1aa>
    1868:	28 01       	movw	r4, r16
    186a:	22 e0       	ldi	r18, 0x02	; 2
    186c:	42 0e       	add	r4, r18
    186e:	51 1c       	adc	r5, r1
    1870:	f8 01       	movw	r30, r16
    1872:	a0 80       	ld	r10, Z
    1874:	b1 80       	ldd	r11, Z+1	; 0x01
    1876:	36 fe       	sbrs	r3, 6
    1878:	03 c0       	rjmp	.+6      	; 0x1880 <vfprintf+0x198>
    187a:	69 2d       	mov	r22, r9
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <vfprintf+0x19c>
    1880:	6f ef       	ldi	r22, 0xFF	; 255
    1882:	7f ef       	ldi	r23, 0xFF	; 255
    1884:	c5 01       	movw	r24, r10
    1886:	2d d1       	rcall	.+602    	; 0x1ae2 <strnlen_P>
    1888:	4c 01       	movw	r8, r24
    188a:	f3 2d       	mov	r31, r3
    188c:	f0 68       	ori	r31, 0x80	; 128
    188e:	3f 2e       	mov	r3, r31
    1890:	82 01       	movw	r16, r4
    1892:	33 fc       	sbrc	r3, 3
    1894:	19 c0       	rjmp	.+50     	; 0x18c8 <vfprintf+0x1e0>
    1896:	82 2d       	mov	r24, r2
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	88 16       	cp	r8, r24
    189c:	99 06       	cpc	r9, r25
    189e:	a0 f4       	brcc	.+40     	; 0x18c8 <vfprintf+0x1e0>
    18a0:	b6 01       	movw	r22, r12
    18a2:	80 e2       	ldi	r24, 0x20	; 32
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	33 d1       	rcall	.+614    	; 0x1b0e <fputc>
    18a8:	2a 94       	dec	r2
    18aa:	f5 cf       	rjmp	.-22     	; 0x1896 <vfprintf+0x1ae>
    18ac:	f5 01       	movw	r30, r10
    18ae:	37 fc       	sbrc	r3, 7
    18b0:	85 91       	lpm	r24, Z+
    18b2:	37 fe       	sbrs	r3, 7
    18b4:	81 91       	ld	r24, Z+
    18b6:	5f 01       	movw	r10, r30
    18b8:	b6 01       	movw	r22, r12
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	28 d1       	rcall	.+592    	; 0x1b0e <fputc>
    18be:	21 10       	cpse	r2, r1
    18c0:	2a 94       	dec	r2
    18c2:	21 e0       	ldi	r18, 0x01	; 1
    18c4:	82 1a       	sub	r8, r18
    18c6:	91 08       	sbc	r9, r1
    18c8:	81 14       	cp	r8, r1
    18ca:	91 04       	cpc	r9, r1
    18cc:	79 f7       	brne	.-34     	; 0x18ac <vfprintf+0x1c4>
    18ce:	e1 c0       	rjmp	.+450    	; 0x1a92 <vfprintf+0x3aa>
    18d0:	84 36       	cpi	r24, 0x64	; 100
    18d2:	11 f0       	breq	.+4      	; 0x18d8 <vfprintf+0x1f0>
    18d4:	89 36       	cpi	r24, 0x69	; 105
    18d6:	39 f5       	brne	.+78     	; 0x1926 <vfprintf+0x23e>
    18d8:	f8 01       	movw	r30, r16
    18da:	37 fe       	sbrs	r3, 7
    18dc:	07 c0       	rjmp	.+14     	; 0x18ec <vfprintf+0x204>
    18de:	60 81       	ld	r22, Z
    18e0:	71 81       	ldd	r23, Z+1	; 0x01
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	0c 5f       	subi	r16, 0xFC	; 252
    18e8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ea:	08 c0       	rjmp	.+16     	; 0x18fc <vfprintf+0x214>
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	07 2e       	mov	r0, r23
    18f2:	00 0c       	add	r0, r0
    18f4:	88 0b       	sbc	r24, r24
    18f6:	99 0b       	sbc	r25, r25
    18f8:	0e 5f       	subi	r16, 0xFE	; 254
    18fa:	1f 4f       	sbci	r17, 0xFF	; 255
    18fc:	f3 2d       	mov	r31, r3
    18fe:	ff 76       	andi	r31, 0x6F	; 111
    1900:	3f 2e       	mov	r3, r31
    1902:	97 ff       	sbrs	r25, 7
    1904:	09 c0       	rjmp	.+18     	; 0x1918 <vfprintf+0x230>
    1906:	90 95       	com	r25
    1908:	80 95       	com	r24
    190a:	70 95       	com	r23
    190c:	61 95       	neg	r22
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	8f 4f       	sbci	r24, 0xFF	; 255
    1912:	9f 4f       	sbci	r25, 0xFF	; 255
    1914:	f0 68       	ori	r31, 0x80	; 128
    1916:	3f 2e       	mov	r3, r31
    1918:	2a e0       	ldi	r18, 0x0A	; 10
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	a3 01       	movw	r20, r6
    191e:	33 d1       	rcall	.+614    	; 0x1b86 <__ultoa_invert>
    1920:	88 2e       	mov	r8, r24
    1922:	86 18       	sub	r8, r6
    1924:	44 c0       	rjmp	.+136    	; 0x19ae <vfprintf+0x2c6>
    1926:	85 37       	cpi	r24, 0x75	; 117
    1928:	31 f4       	brne	.+12     	; 0x1936 <vfprintf+0x24e>
    192a:	23 2d       	mov	r18, r3
    192c:	2f 7e       	andi	r18, 0xEF	; 239
    192e:	b2 2e       	mov	r11, r18
    1930:	2a e0       	ldi	r18, 0x0A	; 10
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	25 c0       	rjmp	.+74     	; 0x1980 <vfprintf+0x298>
    1936:	93 2d       	mov	r25, r3
    1938:	99 7f       	andi	r25, 0xF9	; 249
    193a:	b9 2e       	mov	r11, r25
    193c:	8f 36       	cpi	r24, 0x6F	; 111
    193e:	c1 f0       	breq	.+48     	; 0x1970 <vfprintf+0x288>
    1940:	18 f4       	brcc	.+6      	; 0x1948 <vfprintf+0x260>
    1942:	88 35       	cpi	r24, 0x58	; 88
    1944:	79 f0       	breq	.+30     	; 0x1964 <vfprintf+0x27c>
    1946:	ae c0       	rjmp	.+348    	; 0x1aa4 <vfprintf+0x3bc>
    1948:	80 37       	cpi	r24, 0x70	; 112
    194a:	19 f0       	breq	.+6      	; 0x1952 <vfprintf+0x26a>
    194c:	88 37       	cpi	r24, 0x78	; 120
    194e:	21 f0       	breq	.+8      	; 0x1958 <vfprintf+0x270>
    1950:	a9 c0       	rjmp	.+338    	; 0x1aa4 <vfprintf+0x3bc>
    1952:	e9 2f       	mov	r30, r25
    1954:	e0 61       	ori	r30, 0x10	; 16
    1956:	be 2e       	mov	r11, r30
    1958:	b4 fe       	sbrs	r11, 4
    195a:	0d c0       	rjmp	.+26     	; 0x1976 <vfprintf+0x28e>
    195c:	fb 2d       	mov	r31, r11
    195e:	f4 60       	ori	r31, 0x04	; 4
    1960:	bf 2e       	mov	r11, r31
    1962:	09 c0       	rjmp	.+18     	; 0x1976 <vfprintf+0x28e>
    1964:	34 fe       	sbrs	r3, 4
    1966:	0a c0       	rjmp	.+20     	; 0x197c <vfprintf+0x294>
    1968:	29 2f       	mov	r18, r25
    196a:	26 60       	ori	r18, 0x06	; 6
    196c:	b2 2e       	mov	r11, r18
    196e:	06 c0       	rjmp	.+12     	; 0x197c <vfprintf+0x294>
    1970:	28 e0       	ldi	r18, 0x08	; 8
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	05 c0       	rjmp	.+10     	; 0x1980 <vfprintf+0x298>
    1976:	20 e1       	ldi	r18, 0x10	; 16
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <vfprintf+0x298>
    197c:	20 e1       	ldi	r18, 0x10	; 16
    197e:	32 e0       	ldi	r19, 0x02	; 2
    1980:	f8 01       	movw	r30, r16
    1982:	b7 fe       	sbrs	r11, 7
    1984:	07 c0       	rjmp	.+14     	; 0x1994 <vfprintf+0x2ac>
    1986:	60 81       	ld	r22, Z
    1988:	71 81       	ldd	r23, Z+1	; 0x01
    198a:	82 81       	ldd	r24, Z+2	; 0x02
    198c:	93 81       	ldd	r25, Z+3	; 0x03
    198e:	0c 5f       	subi	r16, 0xFC	; 252
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	06 c0       	rjmp	.+12     	; 0x19a0 <vfprintf+0x2b8>
    1994:	60 81       	ld	r22, Z
    1996:	71 81       	ldd	r23, Z+1	; 0x01
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 5f       	subi	r16, 0xFE	; 254
    199e:	1f 4f       	sbci	r17, 0xFF	; 255
    19a0:	a3 01       	movw	r20, r6
    19a2:	f1 d0       	rcall	.+482    	; 0x1b86 <__ultoa_invert>
    19a4:	88 2e       	mov	r8, r24
    19a6:	86 18       	sub	r8, r6
    19a8:	fb 2d       	mov	r31, r11
    19aa:	ff 77       	andi	r31, 0x7F	; 127
    19ac:	3f 2e       	mov	r3, r31
    19ae:	36 fe       	sbrs	r3, 6
    19b0:	0d c0       	rjmp	.+26     	; 0x19cc <vfprintf+0x2e4>
    19b2:	23 2d       	mov	r18, r3
    19b4:	2e 7f       	andi	r18, 0xFE	; 254
    19b6:	a2 2e       	mov	r10, r18
    19b8:	89 14       	cp	r8, r9
    19ba:	58 f4       	brcc	.+22     	; 0x19d2 <vfprintf+0x2ea>
    19bc:	34 fe       	sbrs	r3, 4
    19be:	0b c0       	rjmp	.+22     	; 0x19d6 <vfprintf+0x2ee>
    19c0:	32 fc       	sbrc	r3, 2
    19c2:	09 c0       	rjmp	.+18     	; 0x19d6 <vfprintf+0x2ee>
    19c4:	83 2d       	mov	r24, r3
    19c6:	8e 7e       	andi	r24, 0xEE	; 238
    19c8:	a8 2e       	mov	r10, r24
    19ca:	05 c0       	rjmp	.+10     	; 0x19d6 <vfprintf+0x2ee>
    19cc:	b8 2c       	mov	r11, r8
    19ce:	a3 2c       	mov	r10, r3
    19d0:	03 c0       	rjmp	.+6      	; 0x19d8 <vfprintf+0x2f0>
    19d2:	b8 2c       	mov	r11, r8
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <vfprintf+0x2f0>
    19d6:	b9 2c       	mov	r11, r9
    19d8:	a4 fe       	sbrs	r10, 4
    19da:	0f c0       	rjmp	.+30     	; 0x19fa <vfprintf+0x312>
    19dc:	fe 01       	movw	r30, r28
    19de:	e8 0d       	add	r30, r8
    19e0:	f1 1d       	adc	r31, r1
    19e2:	80 81       	ld	r24, Z
    19e4:	80 33       	cpi	r24, 0x30	; 48
    19e6:	21 f4       	brne	.+8      	; 0x19f0 <vfprintf+0x308>
    19e8:	9a 2d       	mov	r25, r10
    19ea:	99 7e       	andi	r25, 0xE9	; 233
    19ec:	a9 2e       	mov	r10, r25
    19ee:	09 c0       	rjmp	.+18     	; 0x1a02 <vfprintf+0x31a>
    19f0:	a2 fe       	sbrs	r10, 2
    19f2:	06 c0       	rjmp	.+12     	; 0x1a00 <vfprintf+0x318>
    19f4:	b3 94       	inc	r11
    19f6:	b3 94       	inc	r11
    19f8:	04 c0       	rjmp	.+8      	; 0x1a02 <vfprintf+0x31a>
    19fa:	8a 2d       	mov	r24, r10
    19fc:	86 78       	andi	r24, 0x86	; 134
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <vfprintf+0x31a>
    1a00:	b3 94       	inc	r11
    1a02:	a3 fc       	sbrc	r10, 3
    1a04:	10 c0       	rjmp	.+32     	; 0x1a26 <vfprintf+0x33e>
    1a06:	a0 fe       	sbrs	r10, 0
    1a08:	06 c0       	rjmp	.+12     	; 0x1a16 <vfprintf+0x32e>
    1a0a:	b2 14       	cp	r11, r2
    1a0c:	80 f4       	brcc	.+32     	; 0x1a2e <vfprintf+0x346>
    1a0e:	28 0c       	add	r2, r8
    1a10:	92 2c       	mov	r9, r2
    1a12:	9b 18       	sub	r9, r11
    1a14:	0d c0       	rjmp	.+26     	; 0x1a30 <vfprintf+0x348>
    1a16:	b2 14       	cp	r11, r2
    1a18:	58 f4       	brcc	.+22     	; 0x1a30 <vfprintf+0x348>
    1a1a:	b6 01       	movw	r22, r12
    1a1c:	80 e2       	ldi	r24, 0x20	; 32
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	76 d0       	rcall	.+236    	; 0x1b0e <fputc>
    1a22:	b3 94       	inc	r11
    1a24:	f8 cf       	rjmp	.-16     	; 0x1a16 <vfprintf+0x32e>
    1a26:	b2 14       	cp	r11, r2
    1a28:	18 f4       	brcc	.+6      	; 0x1a30 <vfprintf+0x348>
    1a2a:	2b 18       	sub	r2, r11
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <vfprintf+0x34a>
    1a2e:	98 2c       	mov	r9, r8
    1a30:	21 2c       	mov	r2, r1
    1a32:	a4 fe       	sbrs	r10, 4
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <vfprintf+0x36c>
    1a36:	b6 01       	movw	r22, r12
    1a38:	80 e3       	ldi	r24, 0x30	; 48
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	68 d0       	rcall	.+208    	; 0x1b0e <fputc>
    1a3e:	a2 fe       	sbrs	r10, 2
    1a40:	16 c0       	rjmp	.+44     	; 0x1a6e <vfprintf+0x386>
    1a42:	a1 fc       	sbrc	r10, 1
    1a44:	03 c0       	rjmp	.+6      	; 0x1a4c <vfprintf+0x364>
    1a46:	88 e7       	ldi	r24, 0x78	; 120
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <vfprintf+0x368>
    1a4c:	88 e5       	ldi	r24, 0x58	; 88
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	b6 01       	movw	r22, r12
    1a52:	0c c0       	rjmp	.+24     	; 0x1a6c <vfprintf+0x384>
    1a54:	8a 2d       	mov	r24, r10
    1a56:	86 78       	andi	r24, 0x86	; 134
    1a58:	51 f0       	breq	.+20     	; 0x1a6e <vfprintf+0x386>
    1a5a:	a1 fe       	sbrs	r10, 1
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <vfprintf+0x37a>
    1a5e:	8b e2       	ldi	r24, 0x2B	; 43
    1a60:	01 c0       	rjmp	.+2      	; 0x1a64 <vfprintf+0x37c>
    1a62:	80 e2       	ldi	r24, 0x20	; 32
    1a64:	a7 fc       	sbrc	r10, 7
    1a66:	8d e2       	ldi	r24, 0x2D	; 45
    1a68:	b6 01       	movw	r22, r12
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	50 d0       	rcall	.+160    	; 0x1b0e <fputc>
    1a6e:	89 14       	cp	r8, r9
    1a70:	30 f4       	brcc	.+12     	; 0x1a7e <vfprintf+0x396>
    1a72:	b6 01       	movw	r22, r12
    1a74:	80 e3       	ldi	r24, 0x30	; 48
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	4a d0       	rcall	.+148    	; 0x1b0e <fputc>
    1a7a:	9a 94       	dec	r9
    1a7c:	f8 cf       	rjmp	.-16     	; 0x1a6e <vfprintf+0x386>
    1a7e:	8a 94       	dec	r8
    1a80:	f3 01       	movw	r30, r6
    1a82:	e8 0d       	add	r30, r8
    1a84:	f1 1d       	adc	r31, r1
    1a86:	80 81       	ld	r24, Z
    1a88:	b6 01       	movw	r22, r12
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	40 d0       	rcall	.+128    	; 0x1b0e <fputc>
    1a8e:	81 10       	cpse	r8, r1
    1a90:	f6 cf       	rjmp	.-20     	; 0x1a7e <vfprintf+0x396>
    1a92:	22 20       	and	r2, r2
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <vfprintf+0x3b0>
    1a96:	4e ce       	rjmp	.-868    	; 0x1734 <vfprintf+0x4c>
    1a98:	b6 01       	movw	r22, r12
    1a9a:	80 e2       	ldi	r24, 0x20	; 32
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	37 d0       	rcall	.+110    	; 0x1b0e <fputc>
    1aa0:	2a 94       	dec	r2
    1aa2:	f7 cf       	rjmp	.-18     	; 0x1a92 <vfprintf+0x3aa>
    1aa4:	f6 01       	movw	r30, r12
    1aa6:	86 81       	ldd	r24, Z+6	; 0x06
    1aa8:	97 81       	ldd	r25, Z+7	; 0x07
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <vfprintf+0x3c8>
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	9f ef       	ldi	r25, 0xFF	; 255
    1ab0:	2b 96       	adiw	r28, 0x0b	; 11
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	df 90       	pop	r13
    1aca:	cf 90       	pop	r12
    1acc:	bf 90       	pop	r11
    1ace:	af 90       	pop	r10
    1ad0:	9f 90       	pop	r9
    1ad2:	8f 90       	pop	r8
    1ad4:	7f 90       	pop	r7
    1ad6:	6f 90       	pop	r6
    1ad8:	5f 90       	pop	r5
    1ada:	4f 90       	pop	r4
    1adc:	3f 90       	pop	r3
    1ade:	2f 90       	pop	r2
    1ae0:	08 95       	ret

00001ae2 <strnlen_P>:
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	05 90       	lpm	r0, Z+
    1ae6:	61 50       	subi	r22, 0x01	; 1
    1ae8:	70 40       	sbci	r23, 0x00	; 0
    1aea:	01 10       	cpse	r0, r1
    1aec:	d8 f7       	brcc	.-10     	; 0x1ae4 <strnlen_P+0x2>
    1aee:	80 95       	com	r24
    1af0:	90 95       	com	r25
    1af2:	8e 0f       	add	r24, r30
    1af4:	9f 1f       	adc	r25, r31
    1af6:	08 95       	ret

00001af8 <strnlen>:
    1af8:	fc 01       	movw	r30, r24
    1afa:	61 50       	subi	r22, 0x01	; 1
    1afc:	70 40       	sbci	r23, 0x00	; 0
    1afe:	01 90       	ld	r0, Z+
    1b00:	01 10       	cpse	r0, r1
    1b02:	d8 f7       	brcc	.-10     	; 0x1afa <strnlen+0x2>
    1b04:	80 95       	com	r24
    1b06:	90 95       	com	r25
    1b08:	8e 0f       	add	r24, r30
    1b0a:	9f 1f       	adc	r25, r31
    1b0c:	08 95       	ret

00001b0e <fputc>:
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	fb 01       	movw	r30, r22
    1b18:	23 81       	ldd	r18, Z+3	; 0x03
    1b1a:	21 fd       	sbrc	r18, 1
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <fputc+0x16>
    1b1e:	8f ef       	ldi	r24, 0xFF	; 255
    1b20:	9f ef       	ldi	r25, 0xFF	; 255
    1b22:	2c c0       	rjmp	.+88     	; 0x1b7c <fputc+0x6e>
    1b24:	22 ff       	sbrs	r18, 2
    1b26:	16 c0       	rjmp	.+44     	; 0x1b54 <fputc+0x46>
    1b28:	46 81       	ldd	r20, Z+6	; 0x06
    1b2a:	57 81       	ldd	r21, Z+7	; 0x07
    1b2c:	24 81       	ldd	r18, Z+4	; 0x04
    1b2e:	35 81       	ldd	r19, Z+5	; 0x05
    1b30:	42 17       	cp	r20, r18
    1b32:	53 07       	cpc	r21, r19
    1b34:	44 f4       	brge	.+16     	; 0x1b46 <fputc+0x38>
    1b36:	a0 81       	ld	r26, Z
    1b38:	b1 81       	ldd	r27, Z+1	; 0x01
    1b3a:	9d 01       	movw	r18, r26
    1b3c:	2f 5f       	subi	r18, 0xFF	; 255
    1b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b40:	31 83       	std	Z+1, r19	; 0x01
    1b42:	20 83       	st	Z, r18
    1b44:	8c 93       	st	X, r24
    1b46:	26 81       	ldd	r18, Z+6	; 0x06
    1b48:	37 81       	ldd	r19, Z+7	; 0x07
    1b4a:	2f 5f       	subi	r18, 0xFF	; 255
    1b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4e:	37 83       	std	Z+7, r19	; 0x07
    1b50:	26 83       	std	Z+6, r18	; 0x06
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <fputc+0x6e>
    1b54:	8b 01       	movw	r16, r22
    1b56:	ec 01       	movw	r28, r24
    1b58:	fb 01       	movw	r30, r22
    1b5a:	00 84       	ldd	r0, Z+8	; 0x08
    1b5c:	f1 85       	ldd	r31, Z+9	; 0x09
    1b5e:	e0 2d       	mov	r30, r0
    1b60:	09 95       	icall
    1b62:	89 2b       	or	r24, r25
    1b64:	e1 f6       	brne	.-72     	; 0x1b1e <fputc+0x10>
    1b66:	d8 01       	movw	r26, r16
    1b68:	16 96       	adiw	r26, 0x06	; 6
    1b6a:	8d 91       	ld	r24, X+
    1b6c:	9c 91       	ld	r25, X
    1b6e:	17 97       	sbiw	r26, 0x07	; 7
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	17 96       	adiw	r26, 0x07	; 7
    1b74:	9c 93       	st	X, r25
    1b76:	8e 93       	st	-X, r24
    1b78:	16 97       	sbiw	r26, 0x06	; 6
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	08 95       	ret

00001b86 <__ultoa_invert>:
    1b86:	fa 01       	movw	r30, r20
    1b88:	aa 27       	eor	r26, r26
    1b8a:	28 30       	cpi	r18, 0x08	; 8
    1b8c:	51 f1       	breq	.+84     	; 0x1be2 <__ultoa_invert+0x5c>
    1b8e:	20 31       	cpi	r18, 0x10	; 16
    1b90:	81 f1       	breq	.+96     	; 0x1bf2 <__ultoa_invert+0x6c>
    1b92:	e8 94       	clt
    1b94:	6f 93       	push	r22
    1b96:	6e 7f       	andi	r22, 0xFE	; 254
    1b98:	6e 5f       	subi	r22, 0xFE	; 254
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	af 4f       	sbci	r26, 0xFF	; 255
    1ba2:	b1 e0       	ldi	r27, 0x01	; 1
    1ba4:	3e d0       	rcall	.+124    	; 0x1c22 <__ultoa_invert+0x9c>
    1ba6:	b4 e0       	ldi	r27, 0x04	; 4
    1ba8:	3c d0       	rcall	.+120    	; 0x1c22 <__ultoa_invert+0x9c>
    1baa:	67 0f       	add	r22, r23
    1bac:	78 1f       	adc	r23, r24
    1bae:	89 1f       	adc	r24, r25
    1bb0:	9a 1f       	adc	r25, r26
    1bb2:	a1 1d       	adc	r26, r1
    1bb4:	68 0f       	add	r22, r24
    1bb6:	79 1f       	adc	r23, r25
    1bb8:	8a 1f       	adc	r24, r26
    1bba:	91 1d       	adc	r25, r1
    1bbc:	a1 1d       	adc	r26, r1
    1bbe:	6a 0f       	add	r22, r26
    1bc0:	71 1d       	adc	r23, r1
    1bc2:	81 1d       	adc	r24, r1
    1bc4:	91 1d       	adc	r25, r1
    1bc6:	a1 1d       	adc	r26, r1
    1bc8:	20 d0       	rcall	.+64     	; 0x1c0a <__ultoa_invert+0x84>
    1bca:	09 f4       	brne	.+2      	; 0x1bce <__ultoa_invert+0x48>
    1bcc:	68 94       	set
    1bce:	3f 91       	pop	r19
    1bd0:	2a e0       	ldi	r18, 0x0A	; 10
    1bd2:	26 9f       	mul	r18, r22
    1bd4:	11 24       	eor	r1, r1
    1bd6:	30 19       	sub	r19, r0
    1bd8:	30 5d       	subi	r19, 0xD0	; 208
    1bda:	31 93       	st	Z+, r19
    1bdc:	de f6       	brtc	.-74     	; 0x1b94 <__ultoa_invert+0xe>
    1bde:	cf 01       	movw	r24, r30
    1be0:	08 95       	ret
    1be2:	46 2f       	mov	r20, r22
    1be4:	47 70       	andi	r20, 0x07	; 7
    1be6:	40 5d       	subi	r20, 0xD0	; 208
    1be8:	41 93       	st	Z+, r20
    1bea:	b3 e0       	ldi	r27, 0x03	; 3
    1bec:	0f d0       	rcall	.+30     	; 0x1c0c <__ultoa_invert+0x86>
    1bee:	c9 f7       	brne	.-14     	; 0x1be2 <__ultoa_invert+0x5c>
    1bf0:	f6 cf       	rjmp	.-20     	; 0x1bde <__ultoa_invert+0x58>
    1bf2:	46 2f       	mov	r20, r22
    1bf4:	4f 70       	andi	r20, 0x0F	; 15
    1bf6:	40 5d       	subi	r20, 0xD0	; 208
    1bf8:	4a 33       	cpi	r20, 0x3A	; 58
    1bfa:	18 f0       	brcs	.+6      	; 0x1c02 <__ultoa_invert+0x7c>
    1bfc:	49 5d       	subi	r20, 0xD9	; 217
    1bfe:	31 fd       	sbrc	r19, 1
    1c00:	40 52       	subi	r20, 0x20	; 32
    1c02:	41 93       	st	Z+, r20
    1c04:	02 d0       	rcall	.+4      	; 0x1c0a <__ultoa_invert+0x84>
    1c06:	a9 f7       	brne	.-22     	; 0x1bf2 <__ultoa_invert+0x6c>
    1c08:	ea cf       	rjmp	.-44     	; 0x1bde <__ultoa_invert+0x58>
    1c0a:	b4 e0       	ldi	r27, 0x04	; 4
    1c0c:	a6 95       	lsr	r26
    1c0e:	97 95       	ror	r25
    1c10:	87 95       	ror	r24
    1c12:	77 95       	ror	r23
    1c14:	67 95       	ror	r22
    1c16:	ba 95       	dec	r27
    1c18:	c9 f7       	brne	.-14     	; 0x1c0c <__ultoa_invert+0x86>
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	61 05       	cpc	r22, r1
    1c1e:	71 05       	cpc	r23, r1
    1c20:	08 95       	ret
    1c22:	9b 01       	movw	r18, r22
    1c24:	ac 01       	movw	r20, r24
    1c26:	0a 2e       	mov	r0, r26
    1c28:	06 94       	lsr	r0
    1c2a:	57 95       	ror	r21
    1c2c:	47 95       	ror	r20
    1c2e:	37 95       	ror	r19
    1c30:	27 95       	ror	r18
    1c32:	ba 95       	dec	r27
    1c34:	c9 f7       	brne	.-14     	; 0x1c28 <__ultoa_invert+0xa2>
    1c36:	62 0f       	add	r22, r18
    1c38:	73 1f       	adc	r23, r19
    1c3a:	84 1f       	adc	r24, r20
    1c3c:	95 1f       	adc	r25, r21
    1c3e:	a0 1d       	adc	r26, r0
    1c40:	08 95       	ret

00001c42 <_exit>:
    1c42:	f8 94       	cli

00001c44 <__stop_program>:
    1c44:	ff cf       	rjmp	.-2      	; 0x1c44 <__stop_program>
