
09_WASHING_MACHINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000162e  000016c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000162e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000698  00800144  00800144  00001706  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001706  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b40  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ff7  00000000  00000000  0000460c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  00005604  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000850  00000000  00000000  00005a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a8  00000000  00000000  00006280  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006b28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	ee c5       	rjmp	.+3036   	; 0xbf2 <__vector_5>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4c c4       	rjmp	.+2200   	; 0x8da <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	ae c4       	rjmp	.+2396   	; 0x9a6 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c5       	rjmp	.+2640   	; 0xaca <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e2       	ldi	r30, 0x2E	; 46
      a0:	f6 e1       	ldi	r31, 0x16	; 22
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 34       	cpi	r26, 0x44	; 68
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a4 e4       	ldi	r26, 0x44	; 68
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 3d       	cpi	r26, 0xDC	; 220
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	61 d4       	rcall	.+2242   	; 0x986 <main>
      c4:	0c 94 15 0b 	jmp	0x162a	; 0x162a <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <init_button>:
// 00001111
// DDRD &= 0x0f; // 4, 5, 6, 7을 input. PORTD.4 가독성이 떨어진다.

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN | 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN);
      ca:	81 b3       	in	r24, 0x11	; 17
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	81 bb       	out	0x11, r24	; 17
      d0:	08 95       	ret

000000d2 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
      d2:	20 b3       	in	r18, 0x10	; 16
      d4:	42 2f       	mov	r20, r18
      d6:	50 e0       	ldi	r21, 0x00	; 0
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <get_button+0x10>
      de:	22 0f       	add	r18, r18
      e0:	33 1f       	adc	r19, r19
      e2:	6a 95       	dec	r22
      e4:	e2 f7       	brpl	.-8      	; 0xde <get_button+0xc>
      e6:	24 23       	and	r18, r20
      e8:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
      ea:	21 15       	cp	r18, r1
      ec:	31 05       	cpc	r19, r1
      ee:	b9 f0       	breq	.+46     	; 0x11e <get_button+0x4c>
      f0:	fc 01       	movw	r30, r24
      f2:	ec 5b       	subi	r30, 0xBC	; 188
      f4:	fe 4f       	sbci	r31, 0xFE	; 254
      f6:	40 81       	ld	r20, Z
      f8:	41 11       	cpse	r20, r1
      fa:	11 c0       	rjmp	.+34     	; 0x11e <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fc:	2f ef       	ldi	r18, 0xFF	; 255
      fe:	3d ee       	ldi	r19, 0xED	; 237
     100:	42 e0       	ldi	r20, 0x02	; 2
     102:	21 50       	subi	r18, 0x01	; 1
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	e1 f7       	brne	.-8      	; 0x102 <get_button+0x30>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <get_button+0x3a>
     10c:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     10e:	fc 01       	movw	r30, r24
     110:	ec 5b       	subi	r30, 0xBC	; 188
     112:	fe 4f       	sbci	r31, 0xFE	; 254
     114:	21 e0       	ldi	r18, 0x01	; 1
     116:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     11e:	fc 01       	movw	r30, r24
     120:	ec 5b       	subi	r30, 0xBC	; 188
     122:	fe 4f       	sbci	r31, 0xFE	; 254
     124:	40 81       	ld	r20, Z
     126:	41 30       	cpi	r20, 0x01	; 1
     128:	91 f4       	brne	.+36     	; 0x14e <get_button+0x7c>
     12a:	23 2b       	or	r18, r19
     12c:	99 f4       	brne	.+38     	; 0x154 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     12e:	fc 01       	movw	r30, r24
     130:	ec 5b       	subi	r30, 0xBC	; 188
     132:	fe 4f       	sbci	r31, 0xFE	; 254
     134:	10 82       	st	Z, r1
     136:	8f ef       	ldi	r24, 0xFF	; 255
     138:	9d ee       	ldi	r25, 0xED	; 237
     13a:	22 e0       	ldi	r18, 0x02	; 2
     13c:	81 50       	subi	r24, 0x01	; 1
     13e:	90 40       	sbci	r25, 0x00	; 0
     140:	20 40       	sbci	r18, 0x00	; 0
     142:	e1 f7       	brne	.-8      	; 0x13c <get_button+0x6a>
     144:	00 c0       	rjmp	.+0      	; 0x146 <get_button+0x74>
     146:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	08 95       	ret
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	08 95       	ret

0000015a <fast_wash>:
	
}

void fast_wash(void) // 쾌속 세탁
{
	sec_count = 2;
     15a:	82 e0       	ldi	r24, 0x02	; 2
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	a0 e0       	ldi	r26, 0x00	; 0
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     166:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     16a:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     16e:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
     172:	08 95       	ret

00000174 <rinse_and_spindry>:
}

void rinse_and_spindry(void) // 헹굼 + 탈수
{
	sec_count = 3;
     174:	83 e0       	ldi	r24, 0x03	; 3
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     180:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     184:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     188:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
     18c:	08 95       	ret

0000018e <only_spindry>:
}

void only_spindry(void) // 탈수
{
	sec_count = 4;
     18e:	84 e0       	ldi	r24, 0x04	; 4
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	a0 e0       	ldi	r26, 0x00	; 0
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     19a:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     19e:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     1a2:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
     1a6:	08 95       	ret

000001a8 <main_screen>:
}

void main_screen(void) // 메인 화면
{
	PORTA = 0;
     1a8:	1b ba       	out	0x1b, r1	; 27
	sec_count = 754; // 1234 표시 12 * 60 + 34
     1aa:	82 ef       	ldi	r24, 0xF2	; 242
     1ac:	92 e0       	ldi	r25, 0x02	; 2
     1ae:	a0 e0       	ldi	r26, 0x00	; 0
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     1b6:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     1ba:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     1be:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
     1c2:	08 95       	ret

000001c4 <dumy_fanc>:
		washing_machine_fan_control(&sec_count);
	//}
}

void dumy_fanc()
{
     1c4:	08 95       	ret

000001c6 <auto_wash_start>:
	}
}

void auto_wash_start(void)
{
	sec_count = total_wash_time;
     1c6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <total_wash_time>
     1ca:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <total_wash_time+0x1>
     1ce:	09 2e       	mov	r0, r25
     1d0:	00 0c       	add	r0, r0
     1d2:	aa 0b       	sbc	r26, r26
     1d4:	bb 0b       	sbc	r27, r27
     1d6:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     1da:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     1de:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     1e2:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
	
	//while (sec_count > 0)
	//{
		washing_machine_fan_control(&sec_count);
     1e6:	8a e4       	ldi	r24, 0x4A	; 74
     1e8:	91 e0       	ldi	r25, 0x01	; 1
     1ea:	dc c3       	rjmp	.+1976   	; 0x9a4 <washing_machine_fan_control>
     1ec:	08 95       	ret

000001ee <init_fnd>:

////////////////////////////////////////////fnd 초기화 및 fnd 표시 함수들 ///////////////////////////////////////////////////////////

void init_fnd(void)
{
	FND_DATA_DDR = 0xff; // 출력모드로 설정
     1ee:	8f ef       	ldi	r24, 0xFF	; 255
     1f0:	84 bb       	out	0x14, r24	; 20

	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 |
     1f2:	87 b3       	in	r24, 0x17	; 23
     1f4:	80 6f       	ori	r24, 0xF0	; 240
     1f6:	87 bb       	out	0x17, r24	; 23
					 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4;

	FND_DATA_PORT = 0x00; // FND를 all off
     1f8:	15 ba       	out	0x15, r1	; 21
     1fa:	08 95       	ret

000001fc <fnd_display>:
}



void fnd_display(void)
{
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	2b 97       	sbiw	r28, 0x0b	; 11
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	cd bf       	out	0x3d, r28	; 61
						//  0      1       2      3      4      5      6     7      8       9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
     210:	8b e0       	ldi	r24, 0x0B	; 11
     212:	ea e2       	ldi	r30, 0x2A	; 42
     214:	f1 e0       	ldi	r31, 0x01	; 1
     216:	de 01       	movw	r26, r28
     218:	11 96       	adiw	r26, 0x01	; 1
     21a:	01 90       	ld	r0, Z+
     21c:	0d 92       	st	X+, r0
     21e:	8a 95       	dec	r24
     220:	e1 f7       	brne	.-8      	; 0x21a <fnd_display+0x1e>

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     222:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <digit_select.1818>
     226:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <digit_select.1818+0x1>
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	91 05       	cpc	r25, r1
     22e:	19 f1       	breq	.+70     	; 0x276 <fnd_display+0x7a>
     230:	1c f4       	brge	.+6      	; 0x238 <fnd_display+0x3c>
     232:	89 2b       	or	r24, r25
     234:	41 f0       	breq	.+16     	; 0x246 <fnd_display+0x4a>
     236:	94 c0       	rjmp	.+296    	; 0x360 <fnd_display+0x164>
     238:	82 30       	cpi	r24, 0x02	; 2
     23a:	91 05       	cpc	r25, r1
     23c:	d9 f1       	breq	.+118    	; 0x2b4 <fnd_display+0xb8>
     23e:	03 97       	sbiw	r24, 0x03	; 3
     240:	09 f4       	brne	.+2      	; 0x244 <fnd_display+0x48>
     242:	70 c0       	rjmp	.+224    	; 0x324 <fnd_display+0x128>
     244:	8d c0       	rjmp	.+282    	; 0x360 <fnd_display+0x164>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     246:	8f e7       	ldi	r24, 0x7F	; 127
     248:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     24a:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <sec_count>
     24e:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <sec_count+0x1>
     252:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count+0x2>
     256:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x3>
     25a:	2a e0       	ldi	r18, 0x0A	; 10
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	d2 d6       	rcall	.+3492   	; 0x1008 <__udivmodsi4>
     264:	e1 e0       	ldi	r30, 0x01	; 1
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	ec 0f       	add	r30, r28
     26a:	fd 1f       	adc	r31, r29
     26c:	e6 0f       	add	r30, r22
     26e:	f7 1f       	adc	r31, r23
     270:	80 81       	ld	r24, Z
     272:	85 bb       	out	0x15, r24	; 21
		break;
     274:	75 c0       	rjmp	.+234    	; 0x360 <fnd_display+0x164>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     276:	8f eb       	ldi	r24, 0xBF	; 191
     278:	88 bb       	out	0x18, r24	; 24

		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     27a:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <sec_count>
     27e:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <sec_count+0x1>
     282:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count+0x2>
     286:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x3>
     28a:	2a e0       	ldi	r18, 0x0A	; 10
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	ba d6       	rcall	.+3444   	; 0x1008 <__udivmodsi4>
     294:	ca 01       	movw	r24, r20
     296:	b9 01       	movw	r22, r18
     298:	26 e0       	ldi	r18, 0x06	; 6
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	b3 d6       	rcall	.+3430   	; 0x1008 <__udivmodsi4>
     2a2:	e1 e0       	ldi	r30, 0x01	; 1
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	ec 0f       	add	r30, r28
     2a8:	fd 1f       	adc	r31, r29
     2aa:	e6 0f       	add	r30, r22
     2ac:	f7 1f       	adc	r31, r23
     2ae:	80 81       	ld	r24, Z
     2b0:	85 bb       	out	0x15, r24	; 21
		break;
     2b2:	56 c0       	rjmp	.+172    	; 0x360 <fnd_display+0x164>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     2b4:	8f ed       	ldi	r24, 0xDF	; 223
     2b6:	88 bb       	out	0x18, r24	; 24
		if (sec_count % 2 == 1)
     2b8:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <sec_count>
     2bc:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <sec_count+0x1>
     2c0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count+0x2>
     2c4:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x3>
     2c8:	60 ff       	sbrs	r22, 0
     2ca:	17 c0       	rjmp	.+46     	; 0x2fa <fnd_display+0xfe>
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     2cc:	2c e3       	ldi	r18, 0x3C	; 60
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	40 e0       	ldi	r20, 0x00	; 0
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	99 d6       	rcall	.+3378   	; 0x1008 <__udivmodsi4>
     2d6:	ca 01       	movw	r24, r20
     2d8:	b9 01       	movw	r22, r18
     2da:	2a e0       	ldi	r18, 0x0A	; 10
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	40 e0       	ldi	r20, 0x00	; 0
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	92 d6       	rcall	.+3364   	; 0x1008 <__udivmodsi4>
     2e4:	e1 e0       	ldi	r30, 0x01	; 1
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	ec 0f       	add	r30, r28
     2ea:	fd 1f       	adc	r31, r29
     2ec:	e6 0f       	add	r30, r22
     2ee:	f7 1f       	adc	r31, r23
     2f0:	90 81       	ld	r25, Z
     2f2:	8b 85       	ldd	r24, Y+11	; 0x0b
     2f4:	89 2b       	or	r24, r25
     2f6:	85 bb       	out	0x15, r24	; 21
     2f8:	33 c0       	rjmp	.+102    	; 0x360 <fnd_display+0x164>
		else
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10]; // 1단위 분
     2fa:	2c e3       	ldi	r18, 0x3C	; 60
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	82 d6       	rcall	.+3332   	; 0x1008 <__udivmodsi4>
     304:	ca 01       	movw	r24, r20
     306:	b9 01       	movw	r22, r18
     308:	2a e0       	ldi	r18, 0x0A	; 10
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	7b d6       	rcall	.+3318   	; 0x1008 <__udivmodsi4>
     312:	e1 e0       	ldi	r30, 0x01	; 1
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	ec 0f       	add	r30, r28
     318:	fd 1f       	adc	r31, r29
     31a:	e6 0f       	add	r30, r22
     31c:	f7 1f       	adc	r31, r23
     31e:	80 81       	ld	r24, Z
     320:	85 bb       	out	0x15, r24	; 21
     322:	1e c0       	rjmp	.+60     	; 0x360 <fnd_display+0x164>
     324:	8f ee       	ldi	r24, 0xEF	; 239
		break;

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     326:	88 bb       	out	0x18, r24	; 24
     328:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <sec_count>
		FND_DATA_PORT = fnd_font[sec_count / 600 % 6]; // 10단위 분
     32c:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <sec_count+0x1>
     330:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count+0x2>
     334:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x3>
     338:	28 e5       	ldi	r18, 0x58	; 88
     33a:	32 e0       	ldi	r19, 0x02	; 2
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	63 d6       	rcall	.+3270   	; 0x1008 <__udivmodsi4>
     342:	ca 01       	movw	r24, r20
     344:	b9 01       	movw	r22, r18
     346:	26 e0       	ldi	r18, 0x06	; 6
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	5c d6       	rcall	.+3256   	; 0x1008 <__udivmodsi4>
     350:	e1 e0       	ldi	r30, 0x01	; 1
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	ec 0f       	add	r30, r28
     356:	fd 1f       	adc	r31, r29
     358:	e6 0f       	add	r30, r22
     35a:	f7 1f       	adc	r31, r23
     35c:	80 81       	ld	r24, Z
     35e:	85 bb       	out	0x15, r24	; 21
     360:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <digit_select.1818>
		break;
	}
	digit_select++;
     364:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <digit_select.1818+0x1>
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	83 70       	andi	r24, 0x03	; 3
	digit_select %= 4; //다음 표시할 자리수 선택
     36c:	90 78       	andi	r25, 0x80	; 128
     36e:	99 23       	and	r25, r25
     370:	24 f4       	brge	.+8      	; 0x37a <fnd_display+0x17e>
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	8c 6f       	ori	r24, 0xFC	; 252
     376:	9f 6f       	ori	r25, 0xFF	; 255
     378:	01 96       	adiw	r24, 0x01	; 1
     37a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <digit_select.1818+0x1>
     37e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <digit_select.1818>
     382:	2b 96       	adiw	r28, 0x0b	; 11
}
     384:	0f b6       	in	r0, 0x3f	; 63
     386:	f8 94       	cli
     388:	de bf       	out	0x3e, r29	; 62
     38a:	0f be       	out	0x3f, r0	; 63
     38c:	cd bf       	out	0x3d, r28	; 61
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <fnd_main>:
     394:	8f ef       	ldi	r24, 0xFF	; 255
	dumy_fanc
};

int fnd_main(void)
{
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
     396:	8a bb       	out	0x1a, r24	; 26
	init_fnd(); // fnd 초기화
     398:	2a df       	rcall	.-428    	; 0x1ee <init_fnd>
	init_button(); // button 초기화
     39a:	97 de       	rcall	.-722    	; 0xca <init_button>
     39c:	e1 2c       	mov	r14, r1
	

	int button1_state = 0;
	int button2_state = 0;
	int button3_state = 0;
     39e:	f1 2c       	mov	r15, r1
     3a0:	00 e0       	ldi	r16, 0x00	; 0
	init_fnd(); // fnd 초기화
	init_button(); // button 초기화
	

	int button1_state = 0;
	int button2_state = 0;
     3a2:	10 e0       	ldi	r17, 0x00	; 0
     3a4:	c0 e0       	ldi	r28, 0x00	; 0
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
	init_fnd(); // fnd 초기화
	init_button(); // button 초기화
	

	int button1_state = 0;
     3a6:	d0 e0       	ldi	r29, 0x00	; 0
     3a8:	64 e0       	ldi	r22, 0x04	; 4
	int button2_state = 0;
	int button3_state = 0;
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 자동 세탁 모드로 진입
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	90 de       	rcall	.-736    	; 0xd2 <get_button>
     3b2:	89 2b       	or	r24, r25
     3b4:	21 f0       	breq	.+8      	; 0x3be <fnd_main+0x2a>
     3b6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <select_wash_mode+0x1>
		{
			select_wash_mode = AUTO_WASH;
     3ba:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <select_wash_mode>
     3be:	65 e0       	ldi	r22, 0x05	; 5
		}
		
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1을 받으면 쾌속 세탁 모드로 진입
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	85 de       	rcall	.-758    	; 0xd2 <get_button>
     3c8:	89 2b       	or	r24, r25
     3ca:	b1 f0       	breq	.+44     	; 0x3f8 <fnd_main+0x64>
     3cc:	81 e0       	ldi	r24, 0x01	; 1
		{
			button1_state = !button1_state;
     3ce:	20 97       	sbiw	r28, 0x00	; 0
     3d0:	09 f0       	breq	.+2      	; 0x3d4 <fnd_main+0x40>
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	cd 2b       	or	r28, r29
			
			if (button1_state) //
     3d8:	41 f4       	brne	.+16     	; 0x3ea <fnd_main+0x56>
     3da:	21 e0       	ldi	r18, 0x01	; 1
			{
				select_wash_mode = FAST_WASH;
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     3e2:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     3e6:	ec 01       	movw	r28, r24
			select_wash_mode = AUTO_WASH;
		}
		
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1을 받으면 쾌속 세탁 모드로 진입
		{
			button1_state = !button1_state;
     3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <fnd_main+0x64>
     3ea:	24 e0       	ldi	r18, 0x04	; 4
			{
				select_wash_mode = FAST_WASH;
			}
			else //
			{
				select_wash_mode = MAIN_SCREEN;
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     3f2:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     3f6:	ec 01       	movw	r28, r24
			select_wash_mode = AUTO_WASH;
		}
		
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1을 받으면 쾌속 세탁 모드로 진입
		{
			button1_state = !button1_state;
     3f8:	66 e0       	ldi	r22, 0x06	; 6
			{
				select_wash_mode = MAIN_SCREEN;
			}
		}
		
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2를 받으면 헹굼 + 탈수 모드로 진입
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	82 e0       	ldi	r24, 0x02	; 2
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	68 de       	rcall	.-816    	; 0xd2 <get_button>
     402:	89 2b       	or	r24, r25
     404:	b9 f0       	breq	.+46     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     406:	81 e0       	ldi	r24, 0x01	; 1
		{
			button2_state = !button2_state;\
     408:	01 15       	cp	r16, r1
     40a:	11 05       	cpc	r17, r1
     40c:	09 f0       	breq	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	01 2b       	or	r16, r17
			
			if (button2_state)
     414:	41 f4       	brne	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     416:	22 e0       	ldi	r18, 0x02	; 2
			{
				select_wash_mode = RINSE_AND_SPINDRY;
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     41e:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     422:	8c 01       	movw	r16, r24
			}
		}
		
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2를 받으면 헹굼 + 탈수 모드로 진입
		{
			button2_state = !button2_state;\
     424:	07 c0       	rjmp	.+14     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     426:	24 e0       	ldi	r18, 0x04	; 4
			{
				select_wash_mode = RINSE_AND_SPINDRY;
			}
			else
			{
				select_wash_mode = MAIN_SCREEN;	
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     42e:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     432:	8c 01       	movw	r16, r24
			}
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3을 받으면 탈수 단독 모드로 진입
     434:	67 e0       	ldi	r22, 0x07	; 7
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	4a de       	rcall	.-876    	; 0xd2 <get_button>
     43e:	89 2b       	or	r24, r25
     440:	b9 f0       	breq	.+46     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     442:	81 e0       	ldi	r24, 0x01	; 1
		{
			button3_state = !button3_state;
     444:	e1 14       	cp	r14, r1
     446:	f1 04       	cpc	r15, r1
     448:	09 f0       	breq	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	ef 28       	or	r14, r15
			
			if (button3_state) //
     450:	41 f4       	brne	.+16     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     452:	23 e0       	ldi	r18, 0x03	; 3
			{
				select_wash_mode = ONLY_SPINDRY;
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     45a:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     45e:	7c 01       	movw	r14, r24
			}
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3을 받으면 탈수 단독 모드로 진입
		{
			button3_state = !button3_state;
     460:	07 c0       	rjmp	.+14     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     462:	24 e0       	ldi	r18, 0x04	; 4
			{
				select_wash_mode = ONLY_SPINDRY;
			}
			else //
			{
				select_wash_mode = MAIN_SCREEN;
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     46a:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     46e:	7c 01       	movw	r14, r24
			}
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3을 받으면 탈수 단독 모드로 진입
		{
			button3_state = !button3_state;
     470:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <select_wash_mode>
			else //
			{
				select_wash_mode = MAIN_SCREEN;
			}
		}
		fp_wash_mode[select_wash_mode]();
     474:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <select_wash_mode+0x1>
     478:	ee 0f       	add	r30, r30
     47a:	ff 1f       	adc	r31, r31
     47c:	e6 5f       	subi	r30, 0xF6	; 246
     47e:	fe 4f       	sbci	r31, 0xFE	; 254
     480:	01 90       	ld	r0, Z+
     482:	f0 81       	ld	r31, Z
     484:	e0 2d       	mov	r30, r0
     486:	09 95       	icall
     488:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <fnd_refreshrate>
		//auto_wash_led_on(&led_shift_num);
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     48c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <fnd_refreshrate+0x1>
     490:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <fnd_refreshrate+0x2>
     494:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <fnd_refreshrate+0x3>
     498:	02 97       	sbiw	r24, 0x02	; 2
     49a:	a1 05       	cpc	r26, r1
     49c:	b1 05       	cpc	r27, r1
     49e:	08 f4       	brcc	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4a0:	83 cf       	rjmp	.-250    	; 0x3a8 <fnd_main+0x14>
     4a2:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <fnd_refreshrate>
		{
			fnd_refreshrate = 0;
     4a6:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <fnd_refreshrate+0x1>
     4aa:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate+0x2>
     4ae:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x3>
			fnd_display();
     4b2:	a4 de       	rcall	.-696    	; 0x1fc <fnd_display>
     4b4:	79 cf       	rjmp	.-270    	; 0x3a8 <fnd_main+0x14>

000004b6 <auto_wash>:
     4b6:	8f ef       	ldi	r24, 0xFF	; 255

////////////////////////////////////////////메인화면에서 동작하는 함수들////////////////////////////////////////////////

void auto_wash(void) // 자동 세탁
{
	PORTA = 0xff;
     4b8:	8b bb       	out	0x1b, r24	; 27
	sec_count = 1;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	a0 e0       	ldi	r26, 0x00	; 0
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     4c6:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     4ca:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     4ce:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
     4d2:	33 c0       	rjmp	.+102    	; 0x53a <auto_wash+0x84>
	{
		if (get_button(BUTTON0, BUTTON0PIN))
		{
			select_wash_mode = 4;
     4d4:	84 e0       	ldi	r24, 0x04	; 4
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <select_wash_mode+0x1>
     4dc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <select_wash_mode>
	}
	// 여기까지 자동 세탁의 물온도, 헹굼횟수, 탈수 강도를 선택함 밑에서 지정한 시간만큼 모터가 돌아가고 탈수 강도에 맞게 30초 동안 강도에 맞게 진행
	
	//여기에 시간 만큼 회전하는 함수 추가.
	
}
     4e0:	08 95       	ret
		if (get_button(BUTTON0, BUTTON0PIN))
		{
			select_wash_mode = 4;
			break;
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     4e2:	65 e0       	ldi	r22, 0x05	; 5
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	f3 dd       	rcall	.-1050   	; 0xd2 <get_button>
     4ec:	89 2b       	or	r24, r25
     4ee:	21 f0       	breq	.+8      	; 0x4f8 <auto_wash+0x42>
		{
			if (auto_step_led == 0) // 물 온도 선택하기  --- 물온도 변수 필요하고 
			{
				auto_wash_mode = 0;
     4f0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <auto_wash_mode+0x1>
     4f4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <auto_wash_mode>
			}
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     4f8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <fnd_refreshrate>
     4fc:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <fnd_refreshrate+0x1>
     500:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <fnd_refreshrate+0x2>
     504:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <fnd_refreshrate+0x3>
     508:	02 97       	sbiw	r24, 0x02	; 2
     50a:	a1 05       	cpc	r26, r1
     50c:	b1 05       	cpc	r27, r1
     50e:	48 f0       	brcs	.+18     	; 0x522 <auto_wash+0x6c>
		{
			fnd_refreshrate = 0;
     510:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <fnd_refreshrate>
     514:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <fnd_refreshrate+0x1>
     518:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate+0x2>
     51c:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x3>
			fnd_display();
     520:	6d de       	rcall	.-806    	; 0x1fc <fnd_display>
		}
		auto_wash_select[auto_wash_mode]();
     522:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <auto_wash_mode>
     526:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <auto_wash_mode+0x1>
     52a:	ee 0f       	add	r30, r30
     52c:	ff 1f       	adc	r31, r31
     52e:	e0 50       	subi	r30, 0x00	; 0
     530:	ff 4f       	sbci	r31, 0xFF	; 255
     532:	01 90       	ld	r0, Z+
     534:	f0 81       	ld	r31, Z
     536:	e0 2d       	mov	r30, r0
     538:	09 95       	icall
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
	{
		if (get_button(BUTTON0, BUTTON0PIN))
     53a:	64 e0       	ldi	r22, 0x04	; 4
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	c7 dd       	rcall	.-1138   	; 0xd2 <get_button>
     544:	89 2b       	or	r24, r25
     546:	69 f2       	breq	.-102    	; 0x4e2 <auto_wash+0x2c>
     548:	c5 cf       	rjmp	.-118    	; 0x4d4 <auto_wash+0x1e>

0000054a <water_temperature>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////자동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
	PORTA = 0x07;
     54e:	87 e0       	ldi	r24, 0x07	; 7
     550:	8b bb       	out	0x1b, r24	; 27
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
     552:	8e e1       	ldi	r24, 0x1E	; 30
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	a0 e0       	ldi	r26, 0x00	; 0
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     55e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     562:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     566:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>

/////////////////////////////////////////자동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
	PORTA = 0x07;
	int water_tem_toggle = 1;
     56a:	c1 e0       	ldi	r28, 0x01	; 1
     56c:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     56e:	60 c0       	rjmp	.+192    	; 0x630 <water_temperature+0xe6>
	{
		if (get_button(BUTTON2, BUTTON2PIN))
     570:	66 e0       	ldi	r22, 0x06	; 6
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	82 e0       	ldi	r24, 0x02	; 2
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	ac dd       	rcall	.-1192   	; 0xd2 <get_button>
     57a:	89 2b       	or	r24, r25
     57c:	99 f0       	breq	.+38     	; 0x5a4 <water_temperature+0x5a>
		{
			sec_count -= 5;
     57e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     582:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     586:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     58a:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     58e:	05 97       	sbiw	r24, 0x05	; 5
     590:	a1 09       	sbc	r26, r1
     592:	b1 09       	sbc	r27, r1
     594:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     598:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     59c:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     5a0:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     5a4:	67 e0       	ldi	r22, 0x07	; 7
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	92 dd       	rcall	.-1244   	; 0xd2 <get_button>
     5ae:	89 2b       	or	r24, r25
     5b0:	99 f0       	breq	.+38     	; 0x5d8 <water_temperature+0x8e>
		{
			sec_count += 5;
     5b2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     5b6:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     5ba:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     5be:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     5c2:	05 96       	adiw	r24, 0x05	; 5
     5c4:	a1 1d       	adc	r26, r1
     5c6:	b1 1d       	adc	r27, r1
     5c8:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     5cc:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     5d0:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     5d4:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     5d8:	65 e0       	ldi	r22, 0x05	; 5
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	78 dd       	rcall	.-1296   	; 0xd2 <get_button>
     5e2:	89 2b       	or	r24, r25
     5e4:	81 f0       	breq	.+32     	; 0x606 <water_temperature+0xbc>
		{	
			sec_count = 0;
     5e6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <sec_count>
     5ea:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <sec_count+0x1>
     5ee:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <sec_count+0x2>
     5f2:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sec_count+0x3>
			auto_wash_mode = 1;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <auto_wash_mode+0x1>
     5fe:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <auto_wash_mode>
			water_tem_toggle = 0;
     602:	c0 e0       	ldi	r28, 0x00	; 0
     604:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     606:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <fnd_refreshrate>
     60a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <fnd_refreshrate+0x1>
     60e:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <fnd_refreshrate+0x2>
     612:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <fnd_refreshrate+0x3>
     616:	02 97       	sbiw	r24, 0x02	; 2
     618:	a1 05       	cpc	r26, r1
     61a:	b1 05       	cpc	r27, r1
     61c:	48 f0       	brcs	.+18     	; 0x630 <water_temperature+0xe6>
		{
			fnd_refreshrate = 0;
     61e:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <fnd_refreshrate>
     622:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <fnd_refreshrate+0x1>
     626:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate+0x2>
     62a:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x3>
			fnd_display();
     62e:	e6 dd       	rcall	.-1076   	; 0x1fc <fnd_display>
	PORTA = 0x07;
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     630:	20 97       	sbiw	r28, 0x00	; 0
     632:	09 f0       	breq	.+2      	; 0x636 <water_temperature+0xec>
     634:	9d cf       	rjmp	.-198    	; 0x570 <water_temperature+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <rinse_frequency>:

void rinse_frequency() // 헹굼 횟수 조절
{
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
	PORTA = 0x03;
     640:	83 e0       	ldi	r24, 0x03	; 3
     642:	8b bb       	out	0x1b, r24	; 27
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 5; // deflaut 헹굼 횟수
     644:	85 e0       	ldi	r24, 0x05	; 5
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	a0 e0       	ldi	r26, 0x00	; 0
     64a:	b0 e0       	ldi	r27, 0x00	; 0
     64c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     650:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     654:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     658:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
}

void rinse_frequency() // 헹굼 횟수 조절
{
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
     65c:	c1 e0       	ldi	r28, 0x01	; 1
     65e:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 5; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     660:	79 c0       	rjmp	.+242    	; 0x754 <rinse_frequency+0x118>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     662:	66 e0       	ldi	r22, 0x06	; 6
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	33 dd       	rcall	.-1434   	; 0xd2 <get_button>
     66c:	89 2b       	or	r24, r25
     66e:	99 f0       	breq	.+38     	; 0x696 <rinse_frequency+0x5a>
		{
			sec_count -= 1;
     670:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     674:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     678:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     67c:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	a1 09       	sbc	r26, r1
     684:	b1 09       	sbc	r27, r1
     686:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     68a:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     68e:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     692:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     696:	67 e0       	ldi	r22, 0x07	; 7
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	83 e0       	ldi	r24, 0x03	; 3
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	19 dd       	rcall	.-1486   	; 0xd2 <get_button>
     6a0:	89 2b       	or	r24, r25
     6a2:	99 f0       	breq	.+38     	; 0x6ca <rinse_frequency+0x8e>
		{
			sec_count += 1;
     6a4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     6a8:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     6ac:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     6b0:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	a1 1d       	adc	r26, r1
     6b8:	b1 1d       	adc	r27, r1
     6ba:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     6be:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     6c2:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     6c6:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     6ca:	65 e0       	ldi	r22, 0x05	; 5
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	ff dc       	rcall	.-1538   	; 0xd2 <get_button>
     6d4:	89 2b       	or	r24, r25
     6d6:	49 f1       	breq	.+82     	; 0x72a <rinse_frequency+0xee>
		{
			total_wash_time += sec_count * 10; // 버튼 1누르면 횟수 * 10초를 전역변수에 저장하고 다음 단계로 간 다음 탈출
     6d8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     6dc:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     6e0:	9c 01       	movw	r18, r24
     6e2:	22 0f       	add	r18, r18
     6e4:	33 1f       	adc	r19, r19
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	82 0f       	add	r24, r18
     6f4:	93 1f       	adc	r25, r19
     6f6:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <total_wash_time>
     6fa:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <total_wash_time+0x1>
     6fe:	82 0f       	add	r24, r18
     700:	93 1f       	adc	r25, r19
     702:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <total_wash_time+0x1>
     706:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <total_wash_time>
			sec_count = 0;
     70a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <sec_count>
     70e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <sec_count+0x1>
     712:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <sec_count+0x2>
     716:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sec_count+0x3>
			auto_wash_mode = 2;
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <auto_wash_mode+0x1>
     722:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <auto_wash_mode>
			rinse_frequency_toggle = 0;
     726:	c0 e0       	ldi	r28, 0x00	; 0
     728:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     72a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <fnd_refreshrate>
     72e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <fnd_refreshrate+0x1>
     732:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <fnd_refreshrate+0x2>
     736:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <fnd_refreshrate+0x3>
     73a:	02 97       	sbiw	r24, 0x02	; 2
     73c:	a1 05       	cpc	r26, r1
     73e:	b1 05       	cpc	r27, r1
     740:	48 f0       	brcs	.+18     	; 0x754 <rinse_frequency+0x118>
		{
			fnd_refreshrate = 0;
     742:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <fnd_refreshrate>
     746:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <fnd_refreshrate+0x1>
     74a:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate+0x2>
     74e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x3>
			fnd_display();
     752:	54 dd       	rcall	.-1368   	; 0x1fc <fnd_display>
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 5; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     754:	20 97       	sbiw	r28, 0x00	; 0
     756:	09 f0       	breq	.+2      	; 0x75a <rinse_frequency+0x11e>
     758:	84 cf       	rjmp	.-248    	; 0x662 <rinse_frequency+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <spindry_strength>:

void spindry_strength()
{
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
	PORTA = 0x01;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	8b bb       	out	0x1b, r24	; 27
	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도
     768:	83 e0       	ldi	r24, 0x03	; 3
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	a0 e0       	ldi	r26, 0x00	; 0
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     774:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     778:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     77c:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
}

void spindry_strength()
{
	PORTA = 0x01;
	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
     780:	c1 e0       	ldi	r28, 0x01	; 1
     782:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 3; // deflaut 탈수 강도
	
	while (spindry_strength_toggle)
     784:	a4 c0       	rjmp	.+328    	; 0x8ce <spindry_strength+0x16e>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     786:	66 e0       	ldi	r22, 0x06	; 6
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	a1 dc       	rcall	.-1726   	; 0xd2 <get_button>
     790:	89 2b       	or	r24, r25
     792:	99 f0       	breq	.+38     	; 0x7ba <spindry_strength+0x5a>
		{
			sec_count -= 1;
     794:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     798:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     79c:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     7a0:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	a1 09       	sbc	r26, r1
     7a8:	b1 09       	sbc	r27, r1
     7aa:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     7ae:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     7b2:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     7b6:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     7ba:	67 e0       	ldi	r22, 0x07	; 7
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	87 dc       	rcall	.-1778   	; 0xd2 <get_button>
     7c4:	89 2b       	or	r24, r25
     7c6:	99 f0       	breq	.+38     	; 0x7ee <spindry_strength+0x8e>
		{
			sec_count += 1;
     7c8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     7cc:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     7d0:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     7d4:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	a1 1d       	adc	r26, r1
     7dc:	b1 1d       	adc	r27, r1
     7de:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     7e2:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     7e6:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     7ea:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     7ee:	65 e0       	ldi	r22, 0x05	; 5
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	6d dc       	rcall	.-1830   	; 0xd2 <get_button>
     7f8:	89 2b       	or	r24, r25
     7fa:	09 f4       	brne	.+2      	; 0x7fe <spindry_strength+0x9e>
     7fc:	53 c0       	rjmp	.+166    	; 0x8a4 <spindry_strength+0x144>
		{
			if(sec_count == 1)
     7fe:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     802:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     806:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     80a:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	91 05       	cpc	r25, r1
     812:	a1 05       	cpc	r26, r1
     814:	b1 05       	cpc	r27, r1
     816:	39 f4       	brne	.+14     	; 0x826 <spindry_strength+0xc6>
			{
				spin_strength_val = 70;
     818:	86 e4       	ldi	r24, 0x46	; 70
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <spin_strength_val+0x1>
     820:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spin_strength_val>
     824:	2e c0       	rjmp	.+92     	; 0x882 <spindry_strength+0x122>
			}
			else if (sec_count == 2)
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	91 05       	cpc	r25, r1
     82a:	a1 05       	cpc	r26, r1
     82c:	b1 05       	cpc	r27, r1
     82e:	39 f4       	brne	.+14     	; 0x83e <spindry_strength+0xde>
			{
				spin_strength_val = 115;
     830:	83 e7       	ldi	r24, 0x73	; 115
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <spin_strength_val+0x1>
     838:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spin_strength_val>
     83c:	22 c0       	rjmp	.+68     	; 0x882 <spindry_strength+0x122>
			}
			else if (sec_count == 3)
     83e:	83 30       	cpi	r24, 0x03	; 3
     840:	91 05       	cpc	r25, r1
     842:	a1 05       	cpc	r26, r1
     844:	b1 05       	cpc	r27, r1
     846:	39 f4       	brne	.+14     	; 0x856 <spindry_strength+0xf6>
			{
				spin_strength_val = 160;
     848:	80 ea       	ldi	r24, 0xA0	; 160
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <spin_strength_val+0x1>
     850:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spin_strength_val>
     854:	16 c0       	rjmp	.+44     	; 0x882 <spindry_strength+0x122>
			}
			else if (sec_count == 4)
     856:	84 30       	cpi	r24, 0x04	; 4
     858:	91 05       	cpc	r25, r1
     85a:	a1 05       	cpc	r26, r1
     85c:	b1 05       	cpc	r27, r1
     85e:	39 f4       	brne	.+14     	; 0x86e <spindry_strength+0x10e>
			{
				spin_strength_val = 205;
     860:	8d ec       	ldi	r24, 0xCD	; 205
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <spin_strength_val+0x1>
     868:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spin_strength_val>
     86c:	0a c0       	rjmp	.+20     	; 0x882 <spindry_strength+0x122>
			}
			else if (sec_count == 5)
     86e:	05 97       	sbiw	r24, 0x05	; 5
     870:	a1 05       	cpc	r26, r1
     872:	b1 05       	cpc	r27, r1
     874:	31 f4       	brne	.+12     	; 0x882 <spindry_strength+0x122>
			{
				spin_strength_val = 250;
     876:	8a ef       	ldi	r24, 0xFA	; 250
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <spin_strength_val+0x1>
     87e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spin_strength_val>
			}
			PORTA = 0;
     882:	1b ba       	out	0x1b, r1	; 27
			sec_count = 0;
     884:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <sec_count>
     888:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <sec_count+0x1>
     88c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <sec_count+0x2>
     890:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sec_count+0x3>
			auto_wash_mode = 3;
     894:	83 e0       	ldi	r24, 0x03	; 3
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <auto_wash_mode+0x1>
     89c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <auto_wash_mode>
			spindry_strength_toggle = 0;
     8a0:	c0 e0       	ldi	r28, 0x00	; 0
     8a2:	d0 e0       	ldi	r29, 0x00	; 0
			
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     8a4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <fnd_refreshrate>
     8a8:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <fnd_refreshrate+0x1>
     8ac:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <fnd_refreshrate+0x2>
     8b0:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <fnd_refreshrate+0x3>
     8b4:	02 97       	sbiw	r24, 0x02	; 2
     8b6:	a1 05       	cpc	r26, r1
     8b8:	b1 05       	cpc	r27, r1
     8ba:	48 f0       	brcs	.+18     	; 0x8ce <spindry_strength+0x16e>
		{
			fnd_refreshrate = 0;
     8bc:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <fnd_refreshrate>
     8c0:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <fnd_refreshrate+0x1>
     8c4:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate+0x2>
     8c8:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x3>
			fnd_display();
     8cc:	97 dc       	rcall	.-1746   	; 0x1fc <fnd_display>
	PORTA = 0x01;
	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도
	
	while (spindry_strength_toggle)
     8ce:	20 97       	sbiw	r28, 0x00	; 0
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <spindry_strength+0x174>
     8d2:	59 cf       	rjmp	.-334    	; 0x786 <spindry_strength+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     8da:	1f 92       	push	r1
     8dc:	0f 92       	push	r0
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	0f 92       	push	r0
     8e2:	11 24       	eor	r1, r1
     8e4:	8f 93       	push	r24
     8e6:	9f 93       	push	r25
     8e8:	af 93       	push	r26
     8ea:	bf 93       	push	r27
	TCNT0=6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
     8ec:	86 e0       	ldi	r24, 0x06	; 6
     8ee:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
     8f0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <msec_count>
     8f4:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <msec_count+0x1>
     8f8:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <msec_count+0x2>
     8fc:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <msec_count+0x3>
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	a1 1d       	adc	r26, r1
     904:	b1 1d       	adc	r27, r1
     906:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <msec_count>
     90a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <msec_count+0x1>
     90e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <msec_count+0x2>
     912:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <msec_count+0x3>
	fnd_refreshrate++;   // fnd 잔상효과 유지 하기 위한 timer 2ms
     916:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <fnd_refreshrate>
     91a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <fnd_refreshrate+0x1>
     91e:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <fnd_refreshrate+0x2>
     922:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <fnd_refreshrate+0x3>
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	a1 1d       	adc	r26, r1
     92a:	b1 1d       	adc	r27, r1
     92c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <fnd_refreshrate>
     930:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <fnd_refreshrate+0x1>
     934:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <fnd_refreshrate+0x2>
     938:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <fnd_refreshrate+0x3>
	check_timer++;
     93c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <check_timer>
     940:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <check_timer+0x1>
     944:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <check_timer+0x2>
     948:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <check_timer+0x3>
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	a1 1d       	adc	r26, r1
     950:	b1 1d       	adc	r27, r1
     952:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <check_timer>
     956:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <check_timer+0x1>
     95a:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <check_timer+0x2>
     95e:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <check_timer+0x3>
}
     962:	bf 91       	pop	r27
     964:	af 91       	pop	r26
     966:	9f 91       	pop	r25
     968:	8f 91       	pop	r24
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <init_timer0>:
	}
}

void init_timer0()
{
	TCNT0 = 6;
     974:	86 e0       	ldi	r24, 0x06	; 6
     976:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     978:	83 b7       	in	r24, 0x33	; 51
     97a:	84 60       	ori	r24, 0x04	; 4
     97c:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
     97e:	87 b7       	in	r24, 0x37	; 55
     980:	81 60       	ori	r24, 0x01	; 1
     982:	87 bf       	out	0x37, r24	; 55
     984:	08 95       	ret

00000986 <main>:
	check_timer++;
}

int main(void)
{
	init_timer0();
     986:	f6 df       	rcall	.-20     	; 0x974 <init_timer0>
	init_uart0();
     988:	8c d0       	rcall	.+280    	; 0xaa2 <init_uart0>
	init_uart1();
     98a:	1e d1       	rcall	.+572    	; 0xbc8 <init_uart1>
     98c:	8e d1       	rcall	.+796    	; 0xcaa <init_ultrasonic>
	init_ultrasonic();
     98e:	8c e1       	ldi	r24, 0x1C	; 28
     990:	91 e0       	ldi	r25, 0x01	; 1
	
	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     992:	90 93 d9 07 	sts	0x07D9, r25	; 0x8007d9 <__iob+0x3>
     996:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <__iob+0x2>
     99a:	8f ef       	ldi	r24, 0xFF	; 255
	
	DDRA=0xff;   // led를 출력 모드로
     99c:	8a bb       	out	0x1a, r24	; 26
     99e:	78 94       	sei
	sei();     // 전역적으로 interrupt 허용
     9a0:	f9 dc       	rcall	.-1550   	; 0x394 <fnd_main>
	
	//hw_pwm_fan_control();
	
	fnd_main();
     9a2:	ff cf       	rjmp	.-2      	; 0x9a2 <main+0x1c>

000009a4 <washing_machine_fan_control>:
     9a4:	08 95       	ret

000009a6 <__vector_18>:
     9a6:	1f 92       	push	r1

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     9a8:	0f 92       	push	r0
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	0f 92       	push	r0
     9ae:	11 24       	eor	r1, r1
     9b0:	0b b6       	in	r0, 0x3b	; 59
     9b2:	0f 92       	push	r0
     9b4:	2f 93       	push	r18
     9b6:	3f 93       	push	r19
     9b8:	4f 93       	push	r20
     9ba:	5f 93       	push	r21
     9bc:	6f 93       	push	r22
     9be:	7f 93       	push	r23
     9c0:	8f 93       	push	r24
     9c2:	9f 93       	push	r25
     9c4:	af 93       	push	r26
     9c6:	bf 93       	push	r27
     9c8:	ef 93       	push	r30
     9ca:	ff 93       	push	r31
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	1f 92       	push	r1
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     9d6:	8c b1       	in	r24, 0x0c	; 12
     9d8:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	8d 30       	cpi	r24, 0x0D	; 13
     9de:	19 f0       	breq	.+6      	; 0x9e6 <__vector_18+0x40>
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	8a 30       	cpi	r24, 0x0A	; 10
     9e4:	61 f5       	brne	.+88     	; 0xa3e <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     9e6:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <rear>
     9ea:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <rear+0x1>
     9ee:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <i.1894>
     9f2:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <i.1894+0x1>
     9f6:	40 e5       	ldi	r20, 0x50	; 80
     9f8:	42 9f       	mul	r20, r18
     9fa:	f0 01       	movw	r30, r0
     9fc:	43 9f       	mul	r20, r19
     9fe:	f0 0d       	add	r31, r0
     a00:	11 24       	eor	r1, r1
     a02:	ec 59       	subi	r30, 0x9C	; 156
     a04:	fe 4f       	sbci	r31, 0xFE	; 254
     a06:	e8 0f       	add	r30, r24
     a08:	f9 1f       	adc	r31, r25
     a0a:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     a0c:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <i.1894+0x1>
     a10:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <i.1894>
		rear++;
     a14:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rear>
     a18:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <rear+0x1>
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <rear+0x1>
     a22:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
     a26:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rear>
     a2a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <rear+0x1>
     a2e:	6a e0       	ldi	r22, 0x0A	; 10
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d7 d2       	rcall	.+1454   	; 0xfe2 <__divmodhi4>
     a34:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <rear+0x1>
     a38:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <rear>
     a3c:	1c c0       	rjmp	.+56     	; 0xa76 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
     a3e:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <rear>
     a42:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <rear+0x1>
     a46:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <i.1894>
     a4a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <i.1894+0x1>
     a4e:	9c 01       	movw	r18, r24
     a50:	2f 5f       	subi	r18, 0xFF	; 255
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	30 93 5b 01 	sts	0x015B, r19	; 0x80015b <i.1894+0x1>
     a58:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <i.1894>
     a5c:	49 81       	ldd	r20, Y+1	; 0x01
     a5e:	50 e5       	ldi	r21, 0x50	; 80
     a60:	56 9f       	mul	r21, r22
     a62:	90 01       	movw	r18, r0
     a64:	57 9f       	mul	r21, r23
     a66:	30 0d       	add	r19, r0
     a68:	11 24       	eor	r1, r1
     a6a:	2c 59       	subi	r18, 0x9C	; 156
     a6c:	3e 4f       	sbci	r19, 0xFE	; 254
     a6e:	f9 01       	movw	r30, r18
     a70:	e8 0f       	add	r30, r24
     a72:	f9 1f       	adc	r31, r25
     a74:	40 83       	st	Z, r20
	}
		  
}
     a76:	0f 90       	pop	r0
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	ff 91       	pop	r31
     a7e:	ef 91       	pop	r30
     a80:	bf 91       	pop	r27
     a82:	af 91       	pop	r26
     a84:	9f 91       	pop	r25
     a86:	8f 91       	pop	r24
     a88:	7f 91       	pop	r23
     a8a:	6f 91       	pop	r22
     a8c:	5f 91       	pop	r21
     a8e:	4f 91       	pop	r20
     a90:	3f 91       	pop	r19
     a92:	2f 91       	pop	r18
     a94:	0f 90       	pop	r0
     a96:	0b be       	out	0x3b, r0	; 59
     a98:	0f 90       	pop	r0
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	0f 90       	pop	r0
     a9e:	1f 90       	pop	r1
     aa0:	18 95       	reti

00000aa2 <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
     aa2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
     aa6:	8f ec       	ldi	r24, 0xCF	; 207
     aa8:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
     aaa:	8b b1       	in	r24, 0x0b	; 11
     aac:	82 60       	ori	r24, 0x02	; 2
     aae:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     ab0:	e5 e9       	ldi	r30, 0x95	; 149
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	86 60       	ori	r24, 0x06	; 6
     ab8:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     aba:	8a b1       	in	r24, 0x0a	; 10
     abc:	88 69       	ori	r24, 0x98	; 152
     abe:	8a b9       	out	0x0a, r24	; 10
     ac0:	08 95       	ret

00000ac2 <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
     ac2:	5d 9b       	sbis	0x0b, 5	; 11
     ac4:	fe cf       	rjmp	.-4      	; 0xac2 <UART0_transmit>
		;   // no operation NOP
	
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
     ac6:	8c b9       	out	0x0c, r24	; 12
     ac8:	08 95       	ret

00000aca <__vector_30>:

// BT로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART1_RX_vect)
{
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	0b b6       	in	r0, 0x3b	; 59
     ad6:	0f 92       	push	r0
     ad8:	2f 93       	push	r18
     ada:	3f 93       	push	r19
     adc:	4f 93       	push	r20
     ade:	5f 93       	push	r21
     ae0:	6f 93       	push	r22
     ae2:	7f 93       	push	r23
     ae4:	8f 93       	push	r24
     ae6:	9f 93       	push	r25
     ae8:	af 93       	push	r26
     aea:	bf 93       	push	r27
     aec:	ef 93       	push	r30
     aee:	ff 93       	push	r31
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	1f 92       	push	r1
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
     afa:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     afe:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	8d 30       	cpi	r24, 0x0D	; 13
     b04:	19 f0       	breq	.+6      	; 0xb0c <__vector_30+0x42>
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	8a 30       	cpi	r24, 0x0A	; 10
     b0a:	61 f5       	brne	.+88     	; 0xb64 <__vector_30+0x9a>
	{
		rx1_buff[rear1][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     b0c:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <rear1>
     b10:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <rear1+0x1>
     b14:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <i.1896>
     b18:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <i.1896+0x1>
     b1c:	40 e5       	ldi	r20, 0x50	; 80
     b1e:	42 9f       	mul	r20, r18
     b20:	f0 01       	movw	r30, r0
     b22:	43 9f       	mul	r20, r19
     b24:	f0 0d       	add	r31, r0
     b26:	11 24       	eor	r1, r1
     b28:	ec 57       	subi	r30, 0x7C	; 124
     b2a:	fb 4f       	sbci	r31, 0xFB	; 251
     b2c:	e8 0f       	add	r30, r24
     b2e:	f9 1f       	adc	r31, r25
     b30:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     b32:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <i.1896+0x1>
     b36:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <i.1896>
		rear1++;
     b3a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rear1>
     b3e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <rear1+0x1>
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <rear1+0x1>
     b48:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <rear1>
		rear1 %= COMMAND_NUMBER;   // 0 ~ 9 if (rear1 >= 9) rear1 =0;
     b4c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rear1>
     b50:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <rear1+0x1>
     b54:	6a e0       	ldi	r22, 0x0A	; 10
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	44 d2       	rcall	.+1160   	; 0xfe2 <__divmodhi4>
     b5a:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <rear1+0x1>
     b5e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <rear1>
     b62:	1c c0       	rjmp	.+56     	; 0xb9c <__vector_30+0xd2>
		// !!!! 이곳에 queue full (rx1_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx1_buff[rear1][i++] = data;
     b64:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <rear1>
     b68:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <rear1+0x1>
     b6c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <i.1896>
     b70:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <i.1896+0x1>
     b74:	9c 01       	movw	r18, r24
     b76:	2f 5f       	subi	r18, 0xFF	; 255
     b78:	3f 4f       	sbci	r19, 0xFF	; 255
     b7a:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <i.1896+0x1>
     b7e:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <i.1896>
     b82:	49 81       	ldd	r20, Y+1	; 0x01
     b84:	50 e5       	ldi	r21, 0x50	; 80
     b86:	56 9f       	mul	r21, r22
     b88:	90 01       	movw	r18, r0
     b8a:	57 9f       	mul	r21, r23
     b8c:	30 0d       	add	r19, r0
     b8e:	11 24       	eor	r1, r1
     b90:	2c 57       	subi	r18, 0x7C	; 124
     b92:	3b 4f       	sbci	r19, 0xFB	; 251
     b94:	f9 01       	movw	r30, r18
     b96:	e8 0f       	add	r30, r24
     b98:	f9 1f       	adc	r31, r25
     b9a:	40 83       	st	Z, r20
	}
		  
}
     b9c:	0f 90       	pop	r0
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	ff 91       	pop	r31
     ba4:	ef 91       	pop	r30
     ba6:	bf 91       	pop	r27
     ba8:	af 91       	pop	r26
     baa:	9f 91       	pop	r25
     bac:	8f 91       	pop	r24
     bae:	7f 91       	pop	r23
     bb0:	6f 91       	pop	r22
     bb2:	5f 91       	pop	r21
     bb4:	4f 91       	pop	r20
     bb6:	3f 91       	pop	r19
     bb8:	2f 91       	pop	r18
     bba:	0f 90       	pop	r0
     bbc:	0b be       	out	0x3b, r0	; 59
     bbe:	0f 90       	pop	r0
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	0f 90       	pop	r0
     bc4:	1f 90       	pop	r1
     bc6:	18 95       	reti

00000bc8 <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
     bc8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
     bcc:	8f ec       	ldi	r24, 0xCF	; 207
     bce:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
     bd2:	eb e9       	ldi	r30, 0x9B	; 155
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	82 60       	ori	r24, 0x02	; 2
     bda:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     bdc:	ed e9       	ldi	r30, 0x9D	; 157
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	86 60       	ori	r24, 0x06	; 6
     be4:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     be6:	ea e9       	ldi	r30, 0x9A	; 154
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	88 69       	ori	r24, 0x98	; 152
     bee:	80 83       	st	Z, r24
     bf0:	08 95       	ret

00000bf2 <__vector_5>:
char scm[50];

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect)
{
     bf2:	1f 92       	push	r1
     bf4:	0f 92       	push	r0
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	0f 92       	push	r0
     bfa:	11 24       	eor	r1, r1
     bfc:	0b b6       	in	r0, 0x3b	; 59
     bfe:	0f 92       	push	r0
     c00:	2f 93       	push	r18
     c02:	3f 93       	push	r19
     c04:	4f 93       	push	r20
     c06:	5f 93       	push	r21
     c08:	6f 93       	push	r22
     c0a:	7f 93       	push	r23
     c0c:	8f 93       	push	r24
     c0e:	9f 93       	push	r25
     c10:	af 93       	push	r26
     c12:	bf 93       	push	r27
     c14:	ef 93       	push	r30
     c16:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN & (1 << ECHO))
     c18:	0c 9b       	sbis	0x01, 4	; 1
     c1a:	03 c0       	rjmp	.+6      	; 0xc22 <__vector_5+0x30>
	{
		TCNT1 = 0;
     c1c:	1d bc       	out	0x2d, r1	; 45
     c1e:	1c bc       	out	0x2c, r1	; 44
     c20:	31 c0       	rjmp	.+98     	; 0xc84 <__vector_5+0x92>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
     c22:	6c b5       	in	r22, 0x2c	; 44
     c24:	7d b5       	in	r23, 0x2d	; 45
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	ea d0       	rcall	.+468    	; 0xe00 <__floatunsisf>
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	34 e2       	ldi	r19, 0x24	; 36
     c30:	44 e7       	ldi	r20, 0x74	; 116
     c32:	59 e4       	ldi	r21, 0x49	; 73
     c34:	73 d1       	rcall	.+742    	; 0xf1c <__mulsf3>
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e8       	ldi	r20, 0x80	; 128
     c3c:	54 e4       	ldi	r21, 0x44	; 68
     c3e:	6e d1       	rcall	.+732    	; 0xf1c <__mulsf3>
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	34 e2       	ldi	r19, 0x24	; 36
     c44:	44 e7       	ldi	r20, 0x74	; 116
     c46:	5b e4       	ldi	r21, 0x4B	; 75
     c48:	42 d0       	rcall	.+132    	; 0xcce <__divsf3>
     c4a:	a9 d0       	rcall	.+338    	; 0xd9e <__fixsfsi>
     c4c:	70 93 63 01 	sts	0x0163, r23	; 0x800163 <ultrasonic_distance+0x1>
     c50:	60 93 62 01 	sts	0x0162, r22	; 0x800162 <ultrasonic_distance>
		
		// 예) TCNT1에 10이 들어 있다고 가정하자
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
		sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
     c54:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <ultrasonic_distance>
     c58:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <ultrasonic_distance+0x1>
     c5c:	6a e3       	ldi	r22, 0x3A	; 58
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	c0 d1       	rcall	.+896    	; 0xfe2 <__divmodhi4>
     c62:	7f 93       	push	r23
     c64:	6f 93       	push	r22
     c66:	85 e3       	ldi	r24, 0x35	; 53
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	9f 93       	push	r25
     c6c:	8f 93       	push	r24
     c6e:	84 ea       	ldi	r24, 0xA4	; 164
     c70:	97 e0       	ldi	r25, 0x07	; 7
     c72:	9f 93       	push	r25
     c74:	8f 93       	push	r24
     c76:	fe d1       	rcall	.+1020   	; 0x1074 <sprintf>
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
	}
}
     c84:	ff 91       	pop	r31
     c86:	ef 91       	pop	r30
     c88:	bf 91       	pop	r27
     c8a:	af 91       	pop	r26
     c8c:	9f 91       	pop	r25
     c8e:	8f 91       	pop	r24
     c90:	7f 91       	pop	r23
     c92:	6f 91       	pop	r22
     c94:	5f 91       	pop	r21
     c96:	4f 91       	pop	r20
     c98:	3f 91       	pop	r19
     c9a:	2f 91       	pop	r18
     c9c:	0f 90       	pop	r0
     c9e:	0b be       	out	0x3b, r0	; 59
     ca0:	0f 90       	pop	r0
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	0f 90       	pop	r0
     ca6:	1f 90       	pop	r1
     ca8:	18 95       	reti

00000caa <init_ultrasonic>:

void init_ultrasonic()
{
	TRIG_DDR |= 1 << TRIG; // output mode로 설정
     caa:	e4 e6       	ldi	r30, 0x64	; 100
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 61       	ori	r24, 0x10	; 16
     cb2:	80 83       	st	Z, r24
	ECHO_DDR &= ~(1 << ECHO); // input mode로 설정
     cb4:	82 b1       	in	r24, 0x02	; 2
     cb6:	8f 7e       	andi	r24, 0xEF	; 239
     cb8:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
     cba:	8a b7       	in	r24, 0x3a	; 58
     cbc:	81 60       	ori	r24, 0x01	; 1
     cbe:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us	
	TCCR1B |=  1 << CS12 | 1 << CS10; // 1024로 분주
     cc0:	8e b5       	in	r24, 0x2e	; 46
     cc2:	85 60       	ori	r24, 0x05	; 5
     cc4:	8e bd       	out	0x2e, r24	; 46
	EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
     cc6:	89 b7       	in	r24, 0x39	; 57
     cc8:	80 61       	ori	r24, 0x10	; 16
     cca:	89 bf       	out	0x39, r24	; 57
     ccc:	08 95       	ret

00000cce <__divsf3>:
     cce:	0c d0       	rcall	.+24     	; 0xce8 <__divsf3x>
     cd0:	eb c0       	rjmp	.+470    	; 0xea8 <__fp_round>
     cd2:	e3 d0       	rcall	.+454    	; 0xe9a <__fp_pscB>
     cd4:	40 f0       	brcs	.+16     	; 0xce6 <__divsf3+0x18>
     cd6:	da d0       	rcall	.+436    	; 0xe8c <__fp_pscA>
     cd8:	30 f0       	brcs	.+12     	; 0xce6 <__divsf3+0x18>
     cda:	21 f4       	brne	.+8      	; 0xce4 <__divsf3+0x16>
     cdc:	5f 3f       	cpi	r21, 0xFF	; 255
     cde:	19 f0       	breq	.+6      	; 0xce6 <__divsf3+0x18>
     ce0:	cc c0       	rjmp	.+408    	; 0xe7a <__fp_inf>
     ce2:	51 11       	cpse	r21, r1
     ce4:	15 c1       	rjmp	.+554    	; 0xf10 <__fp_szero>
     ce6:	cf c0       	rjmp	.+414    	; 0xe86 <__fp_nan>

00000ce8 <__divsf3x>:
     ce8:	f0 d0       	rcall	.+480    	; 0xeca <__fp_split3>
     cea:	98 f3       	brcs	.-26     	; 0xcd2 <__divsf3+0x4>

00000cec <__divsf3_pse>:
     cec:	99 23       	and	r25, r25
     cee:	c9 f3       	breq	.-14     	; 0xce2 <__divsf3+0x14>
     cf0:	55 23       	and	r21, r21
     cf2:	b1 f3       	breq	.-20     	; 0xce0 <__divsf3+0x12>
     cf4:	95 1b       	sub	r25, r21
     cf6:	55 0b       	sbc	r21, r21
     cf8:	bb 27       	eor	r27, r27
     cfa:	aa 27       	eor	r26, r26
     cfc:	62 17       	cp	r22, r18
     cfe:	73 07       	cpc	r23, r19
     d00:	84 07       	cpc	r24, r20
     d02:	38 f0       	brcs	.+14     	; 0xd12 <__divsf3_pse+0x26>
     d04:	9f 5f       	subi	r25, 0xFF	; 255
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	22 0f       	add	r18, r18
     d0a:	33 1f       	adc	r19, r19
     d0c:	44 1f       	adc	r20, r20
     d0e:	aa 1f       	adc	r26, r26
     d10:	a9 f3       	breq	.-22     	; 0xcfc <__divsf3_pse+0x10>
     d12:	33 d0       	rcall	.+102    	; 0xd7a <__divsf3_pse+0x8e>
     d14:	0e 2e       	mov	r0, r30
     d16:	3a f0       	brmi	.+14     	; 0xd26 <__divsf3_pse+0x3a>
     d18:	e0 e8       	ldi	r30, 0x80	; 128
     d1a:	30 d0       	rcall	.+96     	; 0xd7c <__divsf3_pse+0x90>
     d1c:	91 50       	subi	r25, 0x01	; 1
     d1e:	50 40       	sbci	r21, 0x00	; 0
     d20:	e6 95       	lsr	r30
     d22:	00 1c       	adc	r0, r0
     d24:	ca f7       	brpl	.-14     	; 0xd18 <__divsf3_pse+0x2c>
     d26:	29 d0       	rcall	.+82     	; 0xd7a <__divsf3_pse+0x8e>
     d28:	fe 2f       	mov	r31, r30
     d2a:	27 d0       	rcall	.+78     	; 0xd7a <__divsf3_pse+0x8e>
     d2c:	66 0f       	add	r22, r22
     d2e:	77 1f       	adc	r23, r23
     d30:	88 1f       	adc	r24, r24
     d32:	bb 1f       	adc	r27, r27
     d34:	26 17       	cp	r18, r22
     d36:	37 07       	cpc	r19, r23
     d38:	48 07       	cpc	r20, r24
     d3a:	ab 07       	cpc	r26, r27
     d3c:	b0 e8       	ldi	r27, 0x80	; 128
     d3e:	09 f0       	breq	.+2      	; 0xd42 <__divsf3_pse+0x56>
     d40:	bb 0b       	sbc	r27, r27
     d42:	80 2d       	mov	r24, r0
     d44:	bf 01       	movw	r22, r30
     d46:	ff 27       	eor	r31, r31
     d48:	93 58       	subi	r25, 0x83	; 131
     d4a:	5f 4f       	sbci	r21, 0xFF	; 255
     d4c:	2a f0       	brmi	.+10     	; 0xd58 <__divsf3_pse+0x6c>
     d4e:	9e 3f       	cpi	r25, 0xFE	; 254
     d50:	51 05       	cpc	r21, r1
     d52:	68 f0       	brcs	.+26     	; 0xd6e <__divsf3_pse+0x82>
     d54:	92 c0       	rjmp	.+292    	; 0xe7a <__fp_inf>
     d56:	dc c0       	rjmp	.+440    	; 0xf10 <__fp_szero>
     d58:	5f 3f       	cpi	r21, 0xFF	; 255
     d5a:	ec f3       	brlt	.-6      	; 0xd56 <__divsf3_pse+0x6a>
     d5c:	98 3e       	cpi	r25, 0xE8	; 232
     d5e:	dc f3       	brlt	.-10     	; 0xd56 <__divsf3_pse+0x6a>
     d60:	86 95       	lsr	r24
     d62:	77 95       	ror	r23
     d64:	67 95       	ror	r22
     d66:	b7 95       	ror	r27
     d68:	f7 95       	ror	r31
     d6a:	9f 5f       	subi	r25, 0xFF	; 255
     d6c:	c9 f7       	brne	.-14     	; 0xd60 <__divsf3_pse+0x74>
     d6e:	88 0f       	add	r24, r24
     d70:	91 1d       	adc	r25, r1
     d72:	96 95       	lsr	r25
     d74:	87 95       	ror	r24
     d76:	97 f9       	bld	r25, 7
     d78:	08 95       	ret
     d7a:	e1 e0       	ldi	r30, 0x01	; 1
     d7c:	66 0f       	add	r22, r22
     d7e:	77 1f       	adc	r23, r23
     d80:	88 1f       	adc	r24, r24
     d82:	bb 1f       	adc	r27, r27
     d84:	62 17       	cp	r22, r18
     d86:	73 07       	cpc	r23, r19
     d88:	84 07       	cpc	r24, r20
     d8a:	ba 07       	cpc	r27, r26
     d8c:	20 f0       	brcs	.+8      	; 0xd96 <__divsf3_pse+0xaa>
     d8e:	62 1b       	sub	r22, r18
     d90:	73 0b       	sbc	r23, r19
     d92:	84 0b       	sbc	r24, r20
     d94:	ba 0b       	sbc	r27, r26
     d96:	ee 1f       	adc	r30, r30
     d98:	88 f7       	brcc	.-30     	; 0xd7c <__divsf3_pse+0x90>
     d9a:	e0 95       	com	r30
     d9c:	08 95       	ret

00000d9e <__fixsfsi>:
     d9e:	04 d0       	rcall	.+8      	; 0xda8 <__fixunssfsi>
     da0:	68 94       	set
     da2:	b1 11       	cpse	r27, r1
     da4:	b5 c0       	rjmp	.+362    	; 0xf10 <__fp_szero>
     da6:	08 95       	ret

00000da8 <__fixunssfsi>:
     da8:	98 d0       	rcall	.+304    	; 0xeda <__fp_splitA>
     daa:	88 f0       	brcs	.+34     	; 0xdce <__fixunssfsi+0x26>
     dac:	9f 57       	subi	r25, 0x7F	; 127
     dae:	90 f0       	brcs	.+36     	; 0xdd4 <__fixunssfsi+0x2c>
     db0:	b9 2f       	mov	r27, r25
     db2:	99 27       	eor	r25, r25
     db4:	b7 51       	subi	r27, 0x17	; 23
     db6:	a0 f0       	brcs	.+40     	; 0xde0 <__fixunssfsi+0x38>
     db8:	d1 f0       	breq	.+52     	; 0xdee <__fixunssfsi+0x46>
     dba:	66 0f       	add	r22, r22
     dbc:	77 1f       	adc	r23, r23
     dbe:	88 1f       	adc	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	1a f0       	brmi	.+6      	; 0xdca <__fixunssfsi+0x22>
     dc4:	ba 95       	dec	r27
     dc6:	c9 f7       	brne	.-14     	; 0xdba <__fixunssfsi+0x12>
     dc8:	12 c0       	rjmp	.+36     	; 0xdee <__fixunssfsi+0x46>
     dca:	b1 30       	cpi	r27, 0x01	; 1
     dcc:	81 f0       	breq	.+32     	; 0xdee <__fixunssfsi+0x46>
     dce:	9f d0       	rcall	.+318    	; 0xf0e <__fp_zero>
     dd0:	b1 e0       	ldi	r27, 0x01	; 1
     dd2:	08 95       	ret
     dd4:	9c c0       	rjmp	.+312    	; 0xf0e <__fp_zero>
     dd6:	67 2f       	mov	r22, r23
     dd8:	78 2f       	mov	r23, r24
     dda:	88 27       	eor	r24, r24
     ddc:	b8 5f       	subi	r27, 0xF8	; 248
     dde:	39 f0       	breq	.+14     	; 0xdee <__fixunssfsi+0x46>
     de0:	b9 3f       	cpi	r27, 0xF9	; 249
     de2:	cc f3       	brlt	.-14     	; 0xdd6 <__fixunssfsi+0x2e>
     de4:	86 95       	lsr	r24
     de6:	77 95       	ror	r23
     de8:	67 95       	ror	r22
     dea:	b3 95       	inc	r27
     dec:	d9 f7       	brne	.-10     	; 0xde4 <__fixunssfsi+0x3c>
     dee:	3e f4       	brtc	.+14     	; 0xdfe <__fixunssfsi+0x56>
     df0:	90 95       	com	r25
     df2:	80 95       	com	r24
     df4:	70 95       	com	r23
     df6:	61 95       	neg	r22
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	8f 4f       	sbci	r24, 0xFF	; 255
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	08 95       	ret

00000e00 <__floatunsisf>:
     e00:	e8 94       	clt
     e02:	09 c0       	rjmp	.+18     	; 0xe16 <__floatsisf+0x12>

00000e04 <__floatsisf>:
     e04:	97 fb       	bst	r25, 7
     e06:	3e f4       	brtc	.+14     	; 0xe16 <__floatsisf+0x12>
     e08:	90 95       	com	r25
     e0a:	80 95       	com	r24
     e0c:	70 95       	com	r23
     e0e:	61 95       	neg	r22
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	8f 4f       	sbci	r24, 0xFF	; 255
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	99 23       	and	r25, r25
     e18:	a9 f0       	breq	.+42     	; 0xe44 <__floatsisf+0x40>
     e1a:	f9 2f       	mov	r31, r25
     e1c:	96 e9       	ldi	r25, 0x96	; 150
     e1e:	bb 27       	eor	r27, r27
     e20:	93 95       	inc	r25
     e22:	f6 95       	lsr	r31
     e24:	87 95       	ror	r24
     e26:	77 95       	ror	r23
     e28:	67 95       	ror	r22
     e2a:	b7 95       	ror	r27
     e2c:	f1 11       	cpse	r31, r1
     e2e:	f8 cf       	rjmp	.-16     	; 0xe20 <__floatsisf+0x1c>
     e30:	fa f4       	brpl	.+62     	; 0xe70 <__floatsisf+0x6c>
     e32:	bb 0f       	add	r27, r27
     e34:	11 f4       	brne	.+4      	; 0xe3a <__floatsisf+0x36>
     e36:	60 ff       	sbrs	r22, 0
     e38:	1b c0       	rjmp	.+54     	; 0xe70 <__floatsisf+0x6c>
     e3a:	6f 5f       	subi	r22, 0xFF	; 255
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	8f 4f       	sbci	r24, 0xFF	; 255
     e40:	9f 4f       	sbci	r25, 0xFF	; 255
     e42:	16 c0       	rjmp	.+44     	; 0xe70 <__floatsisf+0x6c>
     e44:	88 23       	and	r24, r24
     e46:	11 f0       	breq	.+4      	; 0xe4c <__floatsisf+0x48>
     e48:	96 e9       	ldi	r25, 0x96	; 150
     e4a:	11 c0       	rjmp	.+34     	; 0xe6e <__floatsisf+0x6a>
     e4c:	77 23       	and	r23, r23
     e4e:	21 f0       	breq	.+8      	; 0xe58 <__floatsisf+0x54>
     e50:	9e e8       	ldi	r25, 0x8E	; 142
     e52:	87 2f       	mov	r24, r23
     e54:	76 2f       	mov	r23, r22
     e56:	05 c0       	rjmp	.+10     	; 0xe62 <__floatsisf+0x5e>
     e58:	66 23       	and	r22, r22
     e5a:	71 f0       	breq	.+28     	; 0xe78 <__floatsisf+0x74>
     e5c:	96 e8       	ldi	r25, 0x86	; 134
     e5e:	86 2f       	mov	r24, r22
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	2a f0       	brmi	.+10     	; 0xe70 <__floatsisf+0x6c>
     e66:	9a 95       	dec	r25
     e68:	66 0f       	add	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	88 1f       	adc	r24, r24
     e6e:	da f7       	brpl	.-10     	; 0xe66 <__floatsisf+0x62>
     e70:	88 0f       	add	r24, r24
     e72:	96 95       	lsr	r25
     e74:	87 95       	ror	r24
     e76:	97 f9       	bld	r25, 7
     e78:	08 95       	ret

00000e7a <__fp_inf>:
     e7a:	97 f9       	bld	r25, 7
     e7c:	9f 67       	ori	r25, 0x7F	; 127
     e7e:	80 e8       	ldi	r24, 0x80	; 128
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	08 95       	ret

00000e86 <__fp_nan>:
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	80 ec       	ldi	r24, 0xC0	; 192
     e8a:	08 95       	ret

00000e8c <__fp_pscA>:
     e8c:	00 24       	eor	r0, r0
     e8e:	0a 94       	dec	r0
     e90:	16 16       	cp	r1, r22
     e92:	17 06       	cpc	r1, r23
     e94:	18 06       	cpc	r1, r24
     e96:	09 06       	cpc	r0, r25
     e98:	08 95       	ret

00000e9a <__fp_pscB>:
     e9a:	00 24       	eor	r0, r0
     e9c:	0a 94       	dec	r0
     e9e:	12 16       	cp	r1, r18
     ea0:	13 06       	cpc	r1, r19
     ea2:	14 06       	cpc	r1, r20
     ea4:	05 06       	cpc	r0, r21
     ea6:	08 95       	ret

00000ea8 <__fp_round>:
     ea8:	09 2e       	mov	r0, r25
     eaa:	03 94       	inc	r0
     eac:	00 0c       	add	r0, r0
     eae:	11 f4       	brne	.+4      	; 0xeb4 <__fp_round+0xc>
     eb0:	88 23       	and	r24, r24
     eb2:	52 f0       	brmi	.+20     	; 0xec8 <__fp_round+0x20>
     eb4:	bb 0f       	add	r27, r27
     eb6:	40 f4       	brcc	.+16     	; 0xec8 <__fp_round+0x20>
     eb8:	bf 2b       	or	r27, r31
     eba:	11 f4       	brne	.+4      	; 0xec0 <__fp_round+0x18>
     ebc:	60 ff       	sbrs	r22, 0
     ebe:	04 c0       	rjmp	.+8      	; 0xec8 <__fp_round+0x20>
     ec0:	6f 5f       	subi	r22, 0xFF	; 255
     ec2:	7f 4f       	sbci	r23, 0xFF	; 255
     ec4:	8f 4f       	sbci	r24, 0xFF	; 255
     ec6:	9f 4f       	sbci	r25, 0xFF	; 255
     ec8:	08 95       	ret

00000eca <__fp_split3>:
     eca:	57 fd       	sbrc	r21, 7
     ecc:	90 58       	subi	r25, 0x80	; 128
     ece:	44 0f       	add	r20, r20
     ed0:	55 1f       	adc	r21, r21
     ed2:	59 f0       	breq	.+22     	; 0xeea <__fp_splitA+0x10>
     ed4:	5f 3f       	cpi	r21, 0xFF	; 255
     ed6:	71 f0       	breq	.+28     	; 0xef4 <__fp_splitA+0x1a>
     ed8:	47 95       	ror	r20

00000eda <__fp_splitA>:
     eda:	88 0f       	add	r24, r24
     edc:	97 fb       	bst	r25, 7
     ede:	99 1f       	adc	r25, r25
     ee0:	61 f0       	breq	.+24     	; 0xefa <__fp_splitA+0x20>
     ee2:	9f 3f       	cpi	r25, 0xFF	; 255
     ee4:	79 f0       	breq	.+30     	; 0xf04 <__fp_splitA+0x2a>
     ee6:	87 95       	ror	r24
     ee8:	08 95       	ret
     eea:	12 16       	cp	r1, r18
     eec:	13 06       	cpc	r1, r19
     eee:	14 06       	cpc	r1, r20
     ef0:	55 1f       	adc	r21, r21
     ef2:	f2 cf       	rjmp	.-28     	; 0xed8 <__fp_split3+0xe>
     ef4:	46 95       	lsr	r20
     ef6:	f1 df       	rcall	.-30     	; 0xeda <__fp_splitA>
     ef8:	08 c0       	rjmp	.+16     	; 0xf0a <__fp_splitA+0x30>
     efa:	16 16       	cp	r1, r22
     efc:	17 06       	cpc	r1, r23
     efe:	18 06       	cpc	r1, r24
     f00:	99 1f       	adc	r25, r25
     f02:	f1 cf       	rjmp	.-30     	; 0xee6 <__fp_splitA+0xc>
     f04:	86 95       	lsr	r24
     f06:	71 05       	cpc	r23, r1
     f08:	61 05       	cpc	r22, r1
     f0a:	08 94       	sec
     f0c:	08 95       	ret

00000f0e <__fp_zero>:
     f0e:	e8 94       	clt

00000f10 <__fp_szero>:
     f10:	bb 27       	eor	r27, r27
     f12:	66 27       	eor	r22, r22
     f14:	77 27       	eor	r23, r23
     f16:	cb 01       	movw	r24, r22
     f18:	97 f9       	bld	r25, 7
     f1a:	08 95       	ret

00000f1c <__mulsf3>:
     f1c:	0b d0       	rcall	.+22     	; 0xf34 <__mulsf3x>
     f1e:	c4 cf       	rjmp	.-120    	; 0xea8 <__fp_round>
     f20:	b5 df       	rcall	.-150    	; 0xe8c <__fp_pscA>
     f22:	28 f0       	brcs	.+10     	; 0xf2e <__mulsf3+0x12>
     f24:	ba df       	rcall	.-140    	; 0xe9a <__fp_pscB>
     f26:	18 f0       	brcs	.+6      	; 0xf2e <__mulsf3+0x12>
     f28:	95 23       	and	r25, r21
     f2a:	09 f0       	breq	.+2      	; 0xf2e <__mulsf3+0x12>
     f2c:	a6 cf       	rjmp	.-180    	; 0xe7a <__fp_inf>
     f2e:	ab cf       	rjmp	.-170    	; 0xe86 <__fp_nan>
     f30:	11 24       	eor	r1, r1
     f32:	ee cf       	rjmp	.-36     	; 0xf10 <__fp_szero>

00000f34 <__mulsf3x>:
     f34:	ca df       	rcall	.-108    	; 0xeca <__fp_split3>
     f36:	a0 f3       	brcs	.-24     	; 0xf20 <__mulsf3+0x4>

00000f38 <__mulsf3_pse>:
     f38:	95 9f       	mul	r25, r21
     f3a:	d1 f3       	breq	.-12     	; 0xf30 <__mulsf3+0x14>
     f3c:	95 0f       	add	r25, r21
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	55 1f       	adc	r21, r21
     f42:	62 9f       	mul	r22, r18
     f44:	f0 01       	movw	r30, r0
     f46:	72 9f       	mul	r23, r18
     f48:	bb 27       	eor	r27, r27
     f4a:	f0 0d       	add	r31, r0
     f4c:	b1 1d       	adc	r27, r1
     f4e:	63 9f       	mul	r22, r19
     f50:	aa 27       	eor	r26, r26
     f52:	f0 0d       	add	r31, r0
     f54:	b1 1d       	adc	r27, r1
     f56:	aa 1f       	adc	r26, r26
     f58:	64 9f       	mul	r22, r20
     f5a:	66 27       	eor	r22, r22
     f5c:	b0 0d       	add	r27, r0
     f5e:	a1 1d       	adc	r26, r1
     f60:	66 1f       	adc	r22, r22
     f62:	82 9f       	mul	r24, r18
     f64:	22 27       	eor	r18, r18
     f66:	b0 0d       	add	r27, r0
     f68:	a1 1d       	adc	r26, r1
     f6a:	62 1f       	adc	r22, r18
     f6c:	73 9f       	mul	r23, r19
     f6e:	b0 0d       	add	r27, r0
     f70:	a1 1d       	adc	r26, r1
     f72:	62 1f       	adc	r22, r18
     f74:	83 9f       	mul	r24, r19
     f76:	a0 0d       	add	r26, r0
     f78:	61 1d       	adc	r22, r1
     f7a:	22 1f       	adc	r18, r18
     f7c:	74 9f       	mul	r23, r20
     f7e:	33 27       	eor	r19, r19
     f80:	a0 0d       	add	r26, r0
     f82:	61 1d       	adc	r22, r1
     f84:	23 1f       	adc	r18, r19
     f86:	84 9f       	mul	r24, r20
     f88:	60 0d       	add	r22, r0
     f8a:	21 1d       	adc	r18, r1
     f8c:	82 2f       	mov	r24, r18
     f8e:	76 2f       	mov	r23, r22
     f90:	6a 2f       	mov	r22, r26
     f92:	11 24       	eor	r1, r1
     f94:	9f 57       	subi	r25, 0x7F	; 127
     f96:	50 40       	sbci	r21, 0x00	; 0
     f98:	8a f0       	brmi	.+34     	; 0xfbc <__mulsf3_pse+0x84>
     f9a:	e1 f0       	breq	.+56     	; 0xfd4 <__mulsf3_pse+0x9c>
     f9c:	88 23       	and	r24, r24
     f9e:	4a f0       	brmi	.+18     	; 0xfb2 <__mulsf3_pse+0x7a>
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	bb 1f       	adc	r27, r27
     fa6:	66 1f       	adc	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	88 1f       	adc	r24, r24
     fac:	91 50       	subi	r25, 0x01	; 1
     fae:	50 40       	sbci	r21, 0x00	; 0
     fb0:	a9 f7       	brne	.-22     	; 0xf9c <__mulsf3_pse+0x64>
     fb2:	9e 3f       	cpi	r25, 0xFE	; 254
     fb4:	51 05       	cpc	r21, r1
     fb6:	70 f0       	brcs	.+28     	; 0xfd4 <__mulsf3_pse+0x9c>
     fb8:	60 cf       	rjmp	.-320    	; 0xe7a <__fp_inf>
     fba:	aa cf       	rjmp	.-172    	; 0xf10 <__fp_szero>
     fbc:	5f 3f       	cpi	r21, 0xFF	; 255
     fbe:	ec f3       	brlt	.-6      	; 0xfba <__mulsf3_pse+0x82>
     fc0:	98 3e       	cpi	r25, 0xE8	; 232
     fc2:	dc f3       	brlt	.-10     	; 0xfba <__mulsf3_pse+0x82>
     fc4:	86 95       	lsr	r24
     fc6:	77 95       	ror	r23
     fc8:	67 95       	ror	r22
     fca:	b7 95       	ror	r27
     fcc:	f7 95       	ror	r31
     fce:	e7 95       	ror	r30
     fd0:	9f 5f       	subi	r25, 0xFF	; 255
     fd2:	c1 f7       	brne	.-16     	; 0xfc4 <__mulsf3_pse+0x8c>
     fd4:	fe 2b       	or	r31, r30
     fd6:	88 0f       	add	r24, r24
     fd8:	91 1d       	adc	r25, r1
     fda:	96 95       	lsr	r25
     fdc:	87 95       	ror	r24
     fde:	97 f9       	bld	r25, 7
     fe0:	08 95       	ret

00000fe2 <__divmodhi4>:
     fe2:	97 fb       	bst	r25, 7
     fe4:	07 2e       	mov	r0, r23
     fe6:	16 f4       	brtc	.+4      	; 0xfec <__divmodhi4+0xa>
     fe8:	00 94       	com	r0
     fea:	06 d0       	rcall	.+12     	; 0xff8 <__divmodhi4_neg1>
     fec:	77 fd       	sbrc	r23, 7
     fee:	08 d0       	rcall	.+16     	; 0x1000 <__divmodhi4_neg2>
     ff0:	2d d0       	rcall	.+90     	; 0x104c <__udivmodhi4>
     ff2:	07 fc       	sbrc	r0, 7
     ff4:	05 d0       	rcall	.+10     	; 0x1000 <__divmodhi4_neg2>
     ff6:	3e f4       	brtc	.+14     	; 0x1006 <__divmodhi4_exit>

00000ff8 <__divmodhi4_neg1>:
     ff8:	90 95       	com	r25
     ffa:	81 95       	neg	r24
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	08 95       	ret

00001000 <__divmodhi4_neg2>:
    1000:	70 95       	com	r23
    1002:	61 95       	neg	r22
    1004:	7f 4f       	sbci	r23, 0xFF	; 255

00001006 <__divmodhi4_exit>:
    1006:	08 95       	ret

00001008 <__udivmodsi4>:
    1008:	a1 e2       	ldi	r26, 0x21	; 33
    100a:	1a 2e       	mov	r1, r26
    100c:	aa 1b       	sub	r26, r26
    100e:	bb 1b       	sub	r27, r27
    1010:	fd 01       	movw	r30, r26
    1012:	0d c0       	rjmp	.+26     	; 0x102e <__udivmodsi4_ep>

00001014 <__udivmodsi4_loop>:
    1014:	aa 1f       	adc	r26, r26
    1016:	bb 1f       	adc	r27, r27
    1018:	ee 1f       	adc	r30, r30
    101a:	ff 1f       	adc	r31, r31
    101c:	a2 17       	cp	r26, r18
    101e:	b3 07       	cpc	r27, r19
    1020:	e4 07       	cpc	r30, r20
    1022:	f5 07       	cpc	r31, r21
    1024:	20 f0       	brcs	.+8      	; 0x102e <__udivmodsi4_ep>
    1026:	a2 1b       	sub	r26, r18
    1028:	b3 0b       	sbc	r27, r19
    102a:	e4 0b       	sbc	r30, r20
    102c:	f5 0b       	sbc	r31, r21

0000102e <__udivmodsi4_ep>:
    102e:	66 1f       	adc	r22, r22
    1030:	77 1f       	adc	r23, r23
    1032:	88 1f       	adc	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	1a 94       	dec	r1
    1038:	69 f7       	brne	.-38     	; 0x1014 <__udivmodsi4_loop>
    103a:	60 95       	com	r22
    103c:	70 95       	com	r23
    103e:	80 95       	com	r24
    1040:	90 95       	com	r25
    1042:	9b 01       	movw	r18, r22
    1044:	ac 01       	movw	r20, r24
    1046:	bd 01       	movw	r22, r26
    1048:	cf 01       	movw	r24, r30
    104a:	08 95       	ret

0000104c <__udivmodhi4>:
    104c:	aa 1b       	sub	r26, r26
    104e:	bb 1b       	sub	r27, r27
    1050:	51 e1       	ldi	r21, 0x11	; 17
    1052:	07 c0       	rjmp	.+14     	; 0x1062 <__udivmodhi4_ep>

00001054 <__udivmodhi4_loop>:
    1054:	aa 1f       	adc	r26, r26
    1056:	bb 1f       	adc	r27, r27
    1058:	a6 17       	cp	r26, r22
    105a:	b7 07       	cpc	r27, r23
    105c:	10 f0       	brcs	.+4      	; 0x1062 <__udivmodhi4_ep>
    105e:	a6 1b       	sub	r26, r22
    1060:	b7 0b       	sbc	r27, r23

00001062 <__udivmodhi4_ep>:
    1062:	88 1f       	adc	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	5a 95       	dec	r21
    1068:	a9 f7       	brne	.-22     	; 0x1054 <__udivmodhi4_loop>
    106a:	80 95       	com	r24
    106c:	90 95       	com	r25
    106e:	bc 01       	movw	r22, r24
    1070:	cd 01       	movw	r24, r26
    1072:	08 95       	ret

00001074 <sprintf>:
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	2e 97       	sbiw	r28, 0x0e	; 14
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	0d 89       	ldd	r16, Y+21	; 0x15
    108e:	1e 89       	ldd	r17, Y+22	; 0x16
    1090:	86 e0       	ldi	r24, 0x06	; 6
    1092:	8c 83       	std	Y+4, r24	; 0x04
    1094:	1a 83       	std	Y+2, r17	; 0x02
    1096:	09 83       	std	Y+1, r16	; 0x01
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	9f e7       	ldi	r25, 0x7F	; 127
    109c:	9e 83       	std	Y+6, r25	; 0x06
    109e:	8d 83       	std	Y+5, r24	; 0x05
    10a0:	ae 01       	movw	r20, r28
    10a2:	47 5e       	subi	r20, 0xE7	; 231
    10a4:	5f 4f       	sbci	r21, 0xFF	; 255
    10a6:	6f 89       	ldd	r22, Y+23	; 0x17
    10a8:	78 8d       	ldd	r23, Y+24	; 0x18
    10aa:	ce 01       	movw	r24, r28
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	10 d0       	rcall	.+32     	; 0x10d0 <vfprintf>
    10b0:	ef 81       	ldd	r30, Y+7	; 0x07
    10b2:	f8 85       	ldd	r31, Y+8	; 0x08
    10b4:	e0 0f       	add	r30, r16
    10b6:	f1 1f       	adc	r31, r17
    10b8:	10 82       	st	Z, r1
    10ba:	2e 96       	adiw	r28, 0x0e	; 14
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	08 95       	ret

000010d0 <vfprintf>:
    10d0:	2f 92       	push	r2
    10d2:	3f 92       	push	r3
    10d4:	4f 92       	push	r4
    10d6:	5f 92       	push	r5
    10d8:	6f 92       	push	r6
    10da:	7f 92       	push	r7
    10dc:	8f 92       	push	r8
    10de:	9f 92       	push	r9
    10e0:	af 92       	push	r10
    10e2:	bf 92       	push	r11
    10e4:	cf 92       	push	r12
    10e6:	df 92       	push	r13
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	2b 97       	sbiw	r28, 0x0b	; 11
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	6c 01       	movw	r12, r24
    1106:	7b 01       	movw	r14, r22
    1108:	8a 01       	movw	r16, r20
    110a:	fc 01       	movw	r30, r24
    110c:	17 82       	std	Z+7, r1	; 0x07
    110e:	16 82       	std	Z+6, r1	; 0x06
    1110:	83 81       	ldd	r24, Z+3	; 0x03
    1112:	81 ff       	sbrs	r24, 1
    1114:	bf c1       	rjmp	.+894    	; 0x1494 <__stack+0x395>
    1116:	ce 01       	movw	r24, r28
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	3c 01       	movw	r6, r24
    111c:	f6 01       	movw	r30, r12
    111e:	93 81       	ldd	r25, Z+3	; 0x03
    1120:	f7 01       	movw	r30, r14
    1122:	93 fd       	sbrc	r25, 3
    1124:	85 91       	lpm	r24, Z+
    1126:	93 ff       	sbrs	r25, 3
    1128:	81 91       	ld	r24, Z+
    112a:	7f 01       	movw	r14, r30
    112c:	88 23       	and	r24, r24
    112e:	09 f4       	brne	.+2      	; 0x1132 <__stack+0x33>
    1130:	ad c1       	rjmp	.+858    	; 0x148c <__stack+0x38d>
    1132:	85 32       	cpi	r24, 0x25	; 37
    1134:	39 f4       	brne	.+14     	; 0x1144 <__stack+0x45>
    1136:	93 fd       	sbrc	r25, 3
    1138:	85 91       	lpm	r24, Z+
    113a:	93 ff       	sbrs	r25, 3
    113c:	81 91       	ld	r24, Z+
    113e:	7f 01       	movw	r14, r30
    1140:	85 32       	cpi	r24, 0x25	; 37
    1142:	21 f4       	brne	.+8      	; 0x114c <__stack+0x4d>
    1144:	b6 01       	movw	r22, r12
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	d6 d1       	rcall	.+940    	; 0x14f6 <fputc>
    114a:	e8 cf       	rjmp	.-48     	; 0x111c <__stack+0x1d>
    114c:	91 2c       	mov	r9, r1
    114e:	21 2c       	mov	r2, r1
    1150:	31 2c       	mov	r3, r1
    1152:	ff e1       	ldi	r31, 0x1F	; 31
    1154:	f3 15       	cp	r31, r3
    1156:	d8 f0       	brcs	.+54     	; 0x118e <__stack+0x8f>
    1158:	8b 32       	cpi	r24, 0x2B	; 43
    115a:	79 f0       	breq	.+30     	; 0x117a <__stack+0x7b>
    115c:	38 f4       	brcc	.+14     	; 0x116c <__stack+0x6d>
    115e:	80 32       	cpi	r24, 0x20	; 32
    1160:	79 f0       	breq	.+30     	; 0x1180 <__stack+0x81>
    1162:	83 32       	cpi	r24, 0x23	; 35
    1164:	a1 f4       	brne	.+40     	; 0x118e <__stack+0x8f>
    1166:	23 2d       	mov	r18, r3
    1168:	20 61       	ori	r18, 0x10	; 16
    116a:	1d c0       	rjmp	.+58     	; 0x11a6 <__stack+0xa7>
    116c:	8d 32       	cpi	r24, 0x2D	; 45
    116e:	61 f0       	breq	.+24     	; 0x1188 <__stack+0x89>
    1170:	80 33       	cpi	r24, 0x30	; 48
    1172:	69 f4       	brne	.+26     	; 0x118e <__stack+0x8f>
    1174:	23 2d       	mov	r18, r3
    1176:	21 60       	ori	r18, 0x01	; 1
    1178:	16 c0       	rjmp	.+44     	; 0x11a6 <__stack+0xa7>
    117a:	83 2d       	mov	r24, r3
    117c:	82 60       	ori	r24, 0x02	; 2
    117e:	38 2e       	mov	r3, r24
    1180:	e3 2d       	mov	r30, r3
    1182:	e4 60       	ori	r30, 0x04	; 4
    1184:	3e 2e       	mov	r3, r30
    1186:	2a c0       	rjmp	.+84     	; 0x11dc <__stack+0xdd>
    1188:	f3 2d       	mov	r31, r3
    118a:	f8 60       	ori	r31, 0x08	; 8
    118c:	1d c0       	rjmp	.+58     	; 0x11c8 <__stack+0xc9>
    118e:	37 fc       	sbrc	r3, 7
    1190:	2d c0       	rjmp	.+90     	; 0x11ec <__stack+0xed>
    1192:	20 ed       	ldi	r18, 0xD0	; 208
    1194:	28 0f       	add	r18, r24
    1196:	2a 30       	cpi	r18, 0x0A	; 10
    1198:	40 f0       	brcs	.+16     	; 0x11aa <__stack+0xab>
    119a:	8e 32       	cpi	r24, 0x2E	; 46
    119c:	b9 f4       	brne	.+46     	; 0x11cc <__stack+0xcd>
    119e:	36 fc       	sbrc	r3, 6
    11a0:	75 c1       	rjmp	.+746    	; 0x148c <__stack+0x38d>
    11a2:	23 2d       	mov	r18, r3
    11a4:	20 64       	ori	r18, 0x40	; 64
    11a6:	32 2e       	mov	r3, r18
    11a8:	19 c0       	rjmp	.+50     	; 0x11dc <__stack+0xdd>
    11aa:	36 fe       	sbrs	r3, 6
    11ac:	06 c0       	rjmp	.+12     	; 0x11ba <__stack+0xbb>
    11ae:	8a e0       	ldi	r24, 0x0A	; 10
    11b0:	98 9e       	mul	r9, r24
    11b2:	20 0d       	add	r18, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	92 2e       	mov	r9, r18
    11b8:	11 c0       	rjmp	.+34     	; 0x11dc <__stack+0xdd>
    11ba:	ea e0       	ldi	r30, 0x0A	; 10
    11bc:	2e 9e       	mul	r2, r30
    11be:	20 0d       	add	r18, r0
    11c0:	11 24       	eor	r1, r1
    11c2:	22 2e       	mov	r2, r18
    11c4:	f3 2d       	mov	r31, r3
    11c6:	f0 62       	ori	r31, 0x20	; 32
    11c8:	3f 2e       	mov	r3, r31
    11ca:	08 c0       	rjmp	.+16     	; 0x11dc <__stack+0xdd>
    11cc:	8c 36       	cpi	r24, 0x6C	; 108
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <__stack+0xd9>
    11d0:	83 2d       	mov	r24, r3
    11d2:	80 68       	ori	r24, 0x80	; 128
    11d4:	38 2e       	mov	r3, r24
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <__stack+0xdd>
    11d8:	88 36       	cpi	r24, 0x68	; 104
    11da:	41 f4       	brne	.+16     	; 0x11ec <__stack+0xed>
    11dc:	f7 01       	movw	r30, r14
    11de:	93 fd       	sbrc	r25, 3
    11e0:	85 91       	lpm	r24, Z+
    11e2:	93 ff       	sbrs	r25, 3
    11e4:	81 91       	ld	r24, Z+
    11e6:	7f 01       	movw	r14, r30
    11e8:	81 11       	cpse	r24, r1
    11ea:	b3 cf       	rjmp	.-154    	; 0x1152 <__stack+0x53>
    11ec:	98 2f       	mov	r25, r24
    11ee:	9f 7d       	andi	r25, 0xDF	; 223
    11f0:	95 54       	subi	r25, 0x45	; 69
    11f2:	93 30       	cpi	r25, 0x03	; 3
    11f4:	28 f4       	brcc	.+10     	; 0x1200 <__stack+0x101>
    11f6:	0c 5f       	subi	r16, 0xFC	; 252
    11f8:	1f 4f       	sbci	r17, 0xFF	; 255
    11fa:	9f e3       	ldi	r25, 0x3F	; 63
    11fc:	99 83       	std	Y+1, r25	; 0x01
    11fe:	0d c0       	rjmp	.+26     	; 0x121a <__stack+0x11b>
    1200:	83 36       	cpi	r24, 0x63	; 99
    1202:	31 f0       	breq	.+12     	; 0x1210 <__stack+0x111>
    1204:	83 37       	cpi	r24, 0x73	; 115
    1206:	71 f0       	breq	.+28     	; 0x1224 <__stack+0x125>
    1208:	83 35       	cpi	r24, 0x53	; 83
    120a:	09 f0       	breq	.+2      	; 0x120e <__stack+0x10f>
    120c:	55 c0       	rjmp	.+170    	; 0x12b8 <__stack+0x1b9>
    120e:	20 c0       	rjmp	.+64     	; 0x1250 <__stack+0x151>
    1210:	f8 01       	movw	r30, r16
    1212:	80 81       	ld	r24, Z
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	0e 5f       	subi	r16, 0xFE	; 254
    1218:	1f 4f       	sbci	r17, 0xFF	; 255
    121a:	88 24       	eor	r8, r8
    121c:	83 94       	inc	r8
    121e:	91 2c       	mov	r9, r1
    1220:	53 01       	movw	r10, r6
    1222:	12 c0       	rjmp	.+36     	; 0x1248 <__stack+0x149>
    1224:	28 01       	movw	r4, r16
    1226:	f2 e0       	ldi	r31, 0x02	; 2
    1228:	4f 0e       	add	r4, r31
    122a:	51 1c       	adc	r5, r1
    122c:	f8 01       	movw	r30, r16
    122e:	a0 80       	ld	r10, Z
    1230:	b1 80       	ldd	r11, Z+1	; 0x01
    1232:	36 fe       	sbrs	r3, 6
    1234:	03 c0       	rjmp	.+6      	; 0x123c <__stack+0x13d>
    1236:	69 2d       	mov	r22, r9
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <__stack+0x141>
    123c:	6f ef       	ldi	r22, 0xFF	; 255
    123e:	7f ef       	ldi	r23, 0xFF	; 255
    1240:	c5 01       	movw	r24, r10
    1242:	4e d1       	rcall	.+668    	; 0x14e0 <strnlen>
    1244:	4c 01       	movw	r8, r24
    1246:	82 01       	movw	r16, r4
    1248:	f3 2d       	mov	r31, r3
    124a:	ff 77       	andi	r31, 0x7F	; 127
    124c:	3f 2e       	mov	r3, r31
    124e:	15 c0       	rjmp	.+42     	; 0x127a <__stack+0x17b>
    1250:	28 01       	movw	r4, r16
    1252:	22 e0       	ldi	r18, 0x02	; 2
    1254:	42 0e       	add	r4, r18
    1256:	51 1c       	adc	r5, r1
    1258:	f8 01       	movw	r30, r16
    125a:	a0 80       	ld	r10, Z
    125c:	b1 80       	ldd	r11, Z+1	; 0x01
    125e:	36 fe       	sbrs	r3, 6
    1260:	03 c0       	rjmp	.+6      	; 0x1268 <__stack+0x169>
    1262:	69 2d       	mov	r22, r9
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	02 c0       	rjmp	.+4      	; 0x126c <__stack+0x16d>
    1268:	6f ef       	ldi	r22, 0xFF	; 255
    126a:	7f ef       	ldi	r23, 0xFF	; 255
    126c:	c5 01       	movw	r24, r10
    126e:	2d d1       	rcall	.+602    	; 0x14ca <strnlen_P>
    1270:	4c 01       	movw	r8, r24
    1272:	f3 2d       	mov	r31, r3
    1274:	f0 68       	ori	r31, 0x80	; 128
    1276:	3f 2e       	mov	r3, r31
    1278:	82 01       	movw	r16, r4
    127a:	33 fc       	sbrc	r3, 3
    127c:	19 c0       	rjmp	.+50     	; 0x12b0 <__stack+0x1b1>
    127e:	82 2d       	mov	r24, r2
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	88 16       	cp	r8, r24
    1284:	99 06       	cpc	r9, r25
    1286:	a0 f4       	brcc	.+40     	; 0x12b0 <__stack+0x1b1>
    1288:	b6 01       	movw	r22, r12
    128a:	80 e2       	ldi	r24, 0x20	; 32
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	33 d1       	rcall	.+614    	; 0x14f6 <fputc>
    1290:	2a 94       	dec	r2
    1292:	f5 cf       	rjmp	.-22     	; 0x127e <__stack+0x17f>
    1294:	f5 01       	movw	r30, r10
    1296:	37 fc       	sbrc	r3, 7
    1298:	85 91       	lpm	r24, Z+
    129a:	37 fe       	sbrs	r3, 7
    129c:	81 91       	ld	r24, Z+
    129e:	5f 01       	movw	r10, r30
    12a0:	b6 01       	movw	r22, r12
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	28 d1       	rcall	.+592    	; 0x14f6 <fputc>
    12a6:	21 10       	cpse	r2, r1
    12a8:	2a 94       	dec	r2
    12aa:	21 e0       	ldi	r18, 0x01	; 1
    12ac:	82 1a       	sub	r8, r18
    12ae:	91 08       	sbc	r9, r1
    12b0:	81 14       	cp	r8, r1
    12b2:	91 04       	cpc	r9, r1
    12b4:	79 f7       	brne	.-34     	; 0x1294 <__stack+0x195>
    12b6:	e1 c0       	rjmp	.+450    	; 0x147a <__stack+0x37b>
    12b8:	84 36       	cpi	r24, 0x64	; 100
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <__stack+0x1c1>
    12bc:	89 36       	cpi	r24, 0x69	; 105
    12be:	39 f5       	brne	.+78     	; 0x130e <__stack+0x20f>
    12c0:	f8 01       	movw	r30, r16
    12c2:	37 fe       	sbrs	r3, 7
    12c4:	07 c0       	rjmp	.+14     	; 0x12d4 <__stack+0x1d5>
    12c6:	60 81       	ld	r22, Z
    12c8:	71 81       	ldd	r23, Z+1	; 0x01
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	93 81       	ldd	r25, Z+3	; 0x03
    12ce:	0c 5f       	subi	r16, 0xFC	; 252
    12d0:	1f 4f       	sbci	r17, 0xFF	; 255
    12d2:	08 c0       	rjmp	.+16     	; 0x12e4 <__stack+0x1e5>
    12d4:	60 81       	ld	r22, Z
    12d6:	71 81       	ldd	r23, Z+1	; 0x01
    12d8:	07 2e       	mov	r0, r23
    12da:	00 0c       	add	r0, r0
    12dc:	88 0b       	sbc	r24, r24
    12de:	99 0b       	sbc	r25, r25
    12e0:	0e 5f       	subi	r16, 0xFE	; 254
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	f3 2d       	mov	r31, r3
    12e6:	ff 76       	andi	r31, 0x6F	; 111
    12e8:	3f 2e       	mov	r3, r31
    12ea:	97 ff       	sbrs	r25, 7
    12ec:	09 c0       	rjmp	.+18     	; 0x1300 <__stack+0x201>
    12ee:	90 95       	com	r25
    12f0:	80 95       	com	r24
    12f2:	70 95       	com	r23
    12f4:	61 95       	neg	r22
    12f6:	7f 4f       	sbci	r23, 0xFF	; 255
    12f8:	8f 4f       	sbci	r24, 0xFF	; 255
    12fa:	9f 4f       	sbci	r25, 0xFF	; 255
    12fc:	f0 68       	ori	r31, 0x80	; 128
    12fe:	3f 2e       	mov	r3, r31
    1300:	2a e0       	ldi	r18, 0x0A	; 10
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	a3 01       	movw	r20, r6
    1306:	33 d1       	rcall	.+614    	; 0x156e <__ultoa_invert>
    1308:	88 2e       	mov	r8, r24
    130a:	86 18       	sub	r8, r6
    130c:	44 c0       	rjmp	.+136    	; 0x1396 <__stack+0x297>
    130e:	85 37       	cpi	r24, 0x75	; 117
    1310:	31 f4       	brne	.+12     	; 0x131e <__stack+0x21f>
    1312:	23 2d       	mov	r18, r3
    1314:	2f 7e       	andi	r18, 0xEF	; 239
    1316:	b2 2e       	mov	r11, r18
    1318:	2a e0       	ldi	r18, 0x0A	; 10
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	25 c0       	rjmp	.+74     	; 0x1368 <__stack+0x269>
    131e:	93 2d       	mov	r25, r3
    1320:	99 7f       	andi	r25, 0xF9	; 249
    1322:	b9 2e       	mov	r11, r25
    1324:	8f 36       	cpi	r24, 0x6F	; 111
    1326:	c1 f0       	breq	.+48     	; 0x1358 <__stack+0x259>
    1328:	18 f4       	brcc	.+6      	; 0x1330 <__stack+0x231>
    132a:	88 35       	cpi	r24, 0x58	; 88
    132c:	79 f0       	breq	.+30     	; 0x134c <__stack+0x24d>
    132e:	ae c0       	rjmp	.+348    	; 0x148c <__stack+0x38d>
    1330:	80 37       	cpi	r24, 0x70	; 112
    1332:	19 f0       	breq	.+6      	; 0x133a <__stack+0x23b>
    1334:	88 37       	cpi	r24, 0x78	; 120
    1336:	21 f0       	breq	.+8      	; 0x1340 <__stack+0x241>
    1338:	a9 c0       	rjmp	.+338    	; 0x148c <__stack+0x38d>
    133a:	e9 2f       	mov	r30, r25
    133c:	e0 61       	ori	r30, 0x10	; 16
    133e:	be 2e       	mov	r11, r30
    1340:	b4 fe       	sbrs	r11, 4
    1342:	0d c0       	rjmp	.+26     	; 0x135e <__stack+0x25f>
    1344:	fb 2d       	mov	r31, r11
    1346:	f4 60       	ori	r31, 0x04	; 4
    1348:	bf 2e       	mov	r11, r31
    134a:	09 c0       	rjmp	.+18     	; 0x135e <__stack+0x25f>
    134c:	34 fe       	sbrs	r3, 4
    134e:	0a c0       	rjmp	.+20     	; 0x1364 <__stack+0x265>
    1350:	29 2f       	mov	r18, r25
    1352:	26 60       	ori	r18, 0x06	; 6
    1354:	b2 2e       	mov	r11, r18
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <__stack+0x265>
    1358:	28 e0       	ldi	r18, 0x08	; 8
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	05 c0       	rjmp	.+10     	; 0x1368 <__stack+0x269>
    135e:	20 e1       	ldi	r18, 0x10	; 16
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <__stack+0x269>
    1364:	20 e1       	ldi	r18, 0x10	; 16
    1366:	32 e0       	ldi	r19, 0x02	; 2
    1368:	f8 01       	movw	r30, r16
    136a:	b7 fe       	sbrs	r11, 7
    136c:	07 c0       	rjmp	.+14     	; 0x137c <__stack+0x27d>
    136e:	60 81       	ld	r22, Z
    1370:	71 81       	ldd	r23, Z+1	; 0x01
    1372:	82 81       	ldd	r24, Z+2	; 0x02
    1374:	93 81       	ldd	r25, Z+3	; 0x03
    1376:	0c 5f       	subi	r16, 0xFC	; 252
    1378:	1f 4f       	sbci	r17, 0xFF	; 255
    137a:	06 c0       	rjmp	.+12     	; 0x1388 <__stack+0x289>
    137c:	60 81       	ld	r22, Z
    137e:	71 81       	ldd	r23, Z+1	; 0x01
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	0e 5f       	subi	r16, 0xFE	; 254
    1386:	1f 4f       	sbci	r17, 0xFF	; 255
    1388:	a3 01       	movw	r20, r6
    138a:	f1 d0       	rcall	.+482    	; 0x156e <__ultoa_invert>
    138c:	88 2e       	mov	r8, r24
    138e:	86 18       	sub	r8, r6
    1390:	fb 2d       	mov	r31, r11
    1392:	ff 77       	andi	r31, 0x7F	; 127
    1394:	3f 2e       	mov	r3, r31
    1396:	36 fe       	sbrs	r3, 6
    1398:	0d c0       	rjmp	.+26     	; 0x13b4 <__stack+0x2b5>
    139a:	23 2d       	mov	r18, r3
    139c:	2e 7f       	andi	r18, 0xFE	; 254
    139e:	a2 2e       	mov	r10, r18
    13a0:	89 14       	cp	r8, r9
    13a2:	58 f4       	brcc	.+22     	; 0x13ba <__stack+0x2bb>
    13a4:	34 fe       	sbrs	r3, 4
    13a6:	0b c0       	rjmp	.+22     	; 0x13be <__stack+0x2bf>
    13a8:	32 fc       	sbrc	r3, 2
    13aa:	09 c0       	rjmp	.+18     	; 0x13be <__stack+0x2bf>
    13ac:	83 2d       	mov	r24, r3
    13ae:	8e 7e       	andi	r24, 0xEE	; 238
    13b0:	a8 2e       	mov	r10, r24
    13b2:	05 c0       	rjmp	.+10     	; 0x13be <__stack+0x2bf>
    13b4:	b8 2c       	mov	r11, r8
    13b6:	a3 2c       	mov	r10, r3
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <__stack+0x2c1>
    13ba:	b8 2c       	mov	r11, r8
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <__stack+0x2c1>
    13be:	b9 2c       	mov	r11, r9
    13c0:	a4 fe       	sbrs	r10, 4
    13c2:	0f c0       	rjmp	.+30     	; 0x13e2 <__stack+0x2e3>
    13c4:	fe 01       	movw	r30, r28
    13c6:	e8 0d       	add	r30, r8
    13c8:	f1 1d       	adc	r31, r1
    13ca:	80 81       	ld	r24, Z
    13cc:	80 33       	cpi	r24, 0x30	; 48
    13ce:	21 f4       	brne	.+8      	; 0x13d8 <__stack+0x2d9>
    13d0:	9a 2d       	mov	r25, r10
    13d2:	99 7e       	andi	r25, 0xE9	; 233
    13d4:	a9 2e       	mov	r10, r25
    13d6:	09 c0       	rjmp	.+18     	; 0x13ea <__stack+0x2eb>
    13d8:	a2 fe       	sbrs	r10, 2
    13da:	06 c0       	rjmp	.+12     	; 0x13e8 <__stack+0x2e9>
    13dc:	b3 94       	inc	r11
    13de:	b3 94       	inc	r11
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <__stack+0x2eb>
    13e2:	8a 2d       	mov	r24, r10
    13e4:	86 78       	andi	r24, 0x86	; 134
    13e6:	09 f0       	breq	.+2      	; 0x13ea <__stack+0x2eb>
    13e8:	b3 94       	inc	r11
    13ea:	a3 fc       	sbrc	r10, 3
    13ec:	10 c0       	rjmp	.+32     	; 0x140e <__stack+0x30f>
    13ee:	a0 fe       	sbrs	r10, 0
    13f0:	06 c0       	rjmp	.+12     	; 0x13fe <__stack+0x2ff>
    13f2:	b2 14       	cp	r11, r2
    13f4:	80 f4       	brcc	.+32     	; 0x1416 <__stack+0x317>
    13f6:	28 0c       	add	r2, r8
    13f8:	92 2c       	mov	r9, r2
    13fa:	9b 18       	sub	r9, r11
    13fc:	0d c0       	rjmp	.+26     	; 0x1418 <__stack+0x319>
    13fe:	b2 14       	cp	r11, r2
    1400:	58 f4       	brcc	.+22     	; 0x1418 <__stack+0x319>
    1402:	b6 01       	movw	r22, r12
    1404:	80 e2       	ldi	r24, 0x20	; 32
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	76 d0       	rcall	.+236    	; 0x14f6 <fputc>
    140a:	b3 94       	inc	r11
    140c:	f8 cf       	rjmp	.-16     	; 0x13fe <__stack+0x2ff>
    140e:	b2 14       	cp	r11, r2
    1410:	18 f4       	brcc	.+6      	; 0x1418 <__stack+0x319>
    1412:	2b 18       	sub	r2, r11
    1414:	02 c0       	rjmp	.+4      	; 0x141a <__stack+0x31b>
    1416:	98 2c       	mov	r9, r8
    1418:	21 2c       	mov	r2, r1
    141a:	a4 fe       	sbrs	r10, 4
    141c:	0f c0       	rjmp	.+30     	; 0x143c <__stack+0x33d>
    141e:	b6 01       	movw	r22, r12
    1420:	80 e3       	ldi	r24, 0x30	; 48
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	68 d0       	rcall	.+208    	; 0x14f6 <fputc>
    1426:	a2 fe       	sbrs	r10, 2
    1428:	16 c0       	rjmp	.+44     	; 0x1456 <__stack+0x357>
    142a:	a1 fc       	sbrc	r10, 1
    142c:	03 c0       	rjmp	.+6      	; 0x1434 <__stack+0x335>
    142e:	88 e7       	ldi	r24, 0x78	; 120
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <__stack+0x339>
    1434:	88 e5       	ldi	r24, 0x58	; 88
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	b6 01       	movw	r22, r12
    143a:	0c c0       	rjmp	.+24     	; 0x1454 <__stack+0x355>
    143c:	8a 2d       	mov	r24, r10
    143e:	86 78       	andi	r24, 0x86	; 134
    1440:	51 f0       	breq	.+20     	; 0x1456 <__stack+0x357>
    1442:	a1 fe       	sbrs	r10, 1
    1444:	02 c0       	rjmp	.+4      	; 0x144a <__stack+0x34b>
    1446:	8b e2       	ldi	r24, 0x2B	; 43
    1448:	01 c0       	rjmp	.+2      	; 0x144c <__stack+0x34d>
    144a:	80 e2       	ldi	r24, 0x20	; 32
    144c:	a7 fc       	sbrc	r10, 7
    144e:	8d e2       	ldi	r24, 0x2D	; 45
    1450:	b6 01       	movw	r22, r12
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	50 d0       	rcall	.+160    	; 0x14f6 <fputc>
    1456:	89 14       	cp	r8, r9
    1458:	30 f4       	brcc	.+12     	; 0x1466 <__stack+0x367>
    145a:	b6 01       	movw	r22, r12
    145c:	80 e3       	ldi	r24, 0x30	; 48
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	4a d0       	rcall	.+148    	; 0x14f6 <fputc>
    1462:	9a 94       	dec	r9
    1464:	f8 cf       	rjmp	.-16     	; 0x1456 <__stack+0x357>
    1466:	8a 94       	dec	r8
    1468:	f3 01       	movw	r30, r6
    146a:	e8 0d       	add	r30, r8
    146c:	f1 1d       	adc	r31, r1
    146e:	80 81       	ld	r24, Z
    1470:	b6 01       	movw	r22, r12
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	40 d0       	rcall	.+128    	; 0x14f6 <fputc>
    1476:	81 10       	cpse	r8, r1
    1478:	f6 cf       	rjmp	.-20     	; 0x1466 <__stack+0x367>
    147a:	22 20       	and	r2, r2
    147c:	09 f4       	brne	.+2      	; 0x1480 <__stack+0x381>
    147e:	4e ce       	rjmp	.-868    	; 0x111c <__stack+0x1d>
    1480:	b6 01       	movw	r22, r12
    1482:	80 e2       	ldi	r24, 0x20	; 32
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	37 d0       	rcall	.+110    	; 0x14f6 <fputc>
    1488:	2a 94       	dec	r2
    148a:	f7 cf       	rjmp	.-18     	; 0x147a <__stack+0x37b>
    148c:	f6 01       	movw	r30, r12
    148e:	86 81       	ldd	r24, Z+6	; 0x06
    1490:	97 81       	ldd	r25, Z+7	; 0x07
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <__stack+0x399>
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	9f ef       	ldi	r25, 0xFF	; 255
    1498:	2b 96       	adiw	r28, 0x0b	; 11
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	df 90       	pop	r13
    14b2:	cf 90       	pop	r12
    14b4:	bf 90       	pop	r11
    14b6:	af 90       	pop	r10
    14b8:	9f 90       	pop	r9
    14ba:	8f 90       	pop	r8
    14bc:	7f 90       	pop	r7
    14be:	6f 90       	pop	r6
    14c0:	5f 90       	pop	r5
    14c2:	4f 90       	pop	r4
    14c4:	3f 90       	pop	r3
    14c6:	2f 90       	pop	r2
    14c8:	08 95       	ret

000014ca <strnlen_P>:
    14ca:	fc 01       	movw	r30, r24
    14cc:	05 90       	lpm	r0, Z+
    14ce:	61 50       	subi	r22, 0x01	; 1
    14d0:	70 40       	sbci	r23, 0x00	; 0
    14d2:	01 10       	cpse	r0, r1
    14d4:	d8 f7       	brcc	.-10     	; 0x14cc <strnlen_P+0x2>
    14d6:	80 95       	com	r24
    14d8:	90 95       	com	r25
    14da:	8e 0f       	add	r24, r30
    14dc:	9f 1f       	adc	r25, r31
    14de:	08 95       	ret

000014e0 <strnlen>:
    14e0:	fc 01       	movw	r30, r24
    14e2:	61 50       	subi	r22, 0x01	; 1
    14e4:	70 40       	sbci	r23, 0x00	; 0
    14e6:	01 90       	ld	r0, Z+
    14e8:	01 10       	cpse	r0, r1
    14ea:	d8 f7       	brcc	.-10     	; 0x14e2 <strnlen+0x2>
    14ec:	80 95       	com	r24
    14ee:	90 95       	com	r25
    14f0:	8e 0f       	add	r24, r30
    14f2:	9f 1f       	adc	r25, r31
    14f4:	08 95       	ret

000014f6 <fputc>:
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	fb 01       	movw	r30, r22
    1500:	23 81       	ldd	r18, Z+3	; 0x03
    1502:	21 fd       	sbrc	r18, 1
    1504:	03 c0       	rjmp	.+6      	; 0x150c <fputc+0x16>
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	2c c0       	rjmp	.+88     	; 0x1564 <fputc+0x6e>
    150c:	22 ff       	sbrs	r18, 2
    150e:	16 c0       	rjmp	.+44     	; 0x153c <fputc+0x46>
    1510:	46 81       	ldd	r20, Z+6	; 0x06
    1512:	57 81       	ldd	r21, Z+7	; 0x07
    1514:	24 81       	ldd	r18, Z+4	; 0x04
    1516:	35 81       	ldd	r19, Z+5	; 0x05
    1518:	42 17       	cp	r20, r18
    151a:	53 07       	cpc	r21, r19
    151c:	44 f4       	brge	.+16     	; 0x152e <fputc+0x38>
    151e:	a0 81       	ld	r26, Z
    1520:	b1 81       	ldd	r27, Z+1	; 0x01
    1522:	9d 01       	movw	r18, r26
    1524:	2f 5f       	subi	r18, 0xFF	; 255
    1526:	3f 4f       	sbci	r19, 0xFF	; 255
    1528:	31 83       	std	Z+1, r19	; 0x01
    152a:	20 83       	st	Z, r18
    152c:	8c 93       	st	X, r24
    152e:	26 81       	ldd	r18, Z+6	; 0x06
    1530:	37 81       	ldd	r19, Z+7	; 0x07
    1532:	2f 5f       	subi	r18, 0xFF	; 255
    1534:	3f 4f       	sbci	r19, 0xFF	; 255
    1536:	37 83       	std	Z+7, r19	; 0x07
    1538:	26 83       	std	Z+6, r18	; 0x06
    153a:	14 c0       	rjmp	.+40     	; 0x1564 <fputc+0x6e>
    153c:	8b 01       	movw	r16, r22
    153e:	ec 01       	movw	r28, r24
    1540:	fb 01       	movw	r30, r22
    1542:	00 84       	ldd	r0, Z+8	; 0x08
    1544:	f1 85       	ldd	r31, Z+9	; 0x09
    1546:	e0 2d       	mov	r30, r0
    1548:	09 95       	icall
    154a:	89 2b       	or	r24, r25
    154c:	e1 f6       	brne	.-72     	; 0x1506 <fputc+0x10>
    154e:	d8 01       	movw	r26, r16
    1550:	16 96       	adiw	r26, 0x06	; 6
    1552:	8d 91       	ld	r24, X+
    1554:	9c 91       	ld	r25, X
    1556:	17 97       	sbiw	r26, 0x07	; 7
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	17 96       	adiw	r26, 0x07	; 7
    155c:	9c 93       	st	X, r25
    155e:	8e 93       	st	-X, r24
    1560:	16 97       	sbiw	r26, 0x06	; 6
    1562:	ce 01       	movw	r24, r28
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	08 95       	ret

0000156e <__ultoa_invert>:
    156e:	fa 01       	movw	r30, r20
    1570:	aa 27       	eor	r26, r26
    1572:	28 30       	cpi	r18, 0x08	; 8
    1574:	51 f1       	breq	.+84     	; 0x15ca <__ultoa_invert+0x5c>
    1576:	20 31       	cpi	r18, 0x10	; 16
    1578:	81 f1       	breq	.+96     	; 0x15da <__ultoa_invert+0x6c>
    157a:	e8 94       	clt
    157c:	6f 93       	push	r22
    157e:	6e 7f       	andi	r22, 0xFE	; 254
    1580:	6e 5f       	subi	r22, 0xFE	; 254
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	8f 4f       	sbci	r24, 0xFF	; 255
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	af 4f       	sbci	r26, 0xFF	; 255
    158a:	b1 e0       	ldi	r27, 0x01	; 1
    158c:	3e d0       	rcall	.+124    	; 0x160a <__ultoa_invert+0x9c>
    158e:	b4 e0       	ldi	r27, 0x04	; 4
    1590:	3c d0       	rcall	.+120    	; 0x160a <__ultoa_invert+0x9c>
    1592:	67 0f       	add	r22, r23
    1594:	78 1f       	adc	r23, r24
    1596:	89 1f       	adc	r24, r25
    1598:	9a 1f       	adc	r25, r26
    159a:	a1 1d       	adc	r26, r1
    159c:	68 0f       	add	r22, r24
    159e:	79 1f       	adc	r23, r25
    15a0:	8a 1f       	adc	r24, r26
    15a2:	91 1d       	adc	r25, r1
    15a4:	a1 1d       	adc	r26, r1
    15a6:	6a 0f       	add	r22, r26
    15a8:	71 1d       	adc	r23, r1
    15aa:	81 1d       	adc	r24, r1
    15ac:	91 1d       	adc	r25, r1
    15ae:	a1 1d       	adc	r26, r1
    15b0:	20 d0       	rcall	.+64     	; 0x15f2 <__ultoa_invert+0x84>
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <__ultoa_invert+0x48>
    15b4:	68 94       	set
    15b6:	3f 91       	pop	r19
    15b8:	2a e0       	ldi	r18, 0x0A	; 10
    15ba:	26 9f       	mul	r18, r22
    15bc:	11 24       	eor	r1, r1
    15be:	30 19       	sub	r19, r0
    15c0:	30 5d       	subi	r19, 0xD0	; 208
    15c2:	31 93       	st	Z+, r19
    15c4:	de f6       	brtc	.-74     	; 0x157c <__ultoa_invert+0xe>
    15c6:	cf 01       	movw	r24, r30
    15c8:	08 95       	ret
    15ca:	46 2f       	mov	r20, r22
    15cc:	47 70       	andi	r20, 0x07	; 7
    15ce:	40 5d       	subi	r20, 0xD0	; 208
    15d0:	41 93       	st	Z+, r20
    15d2:	b3 e0       	ldi	r27, 0x03	; 3
    15d4:	0f d0       	rcall	.+30     	; 0x15f4 <__ultoa_invert+0x86>
    15d6:	c9 f7       	brne	.-14     	; 0x15ca <__ultoa_invert+0x5c>
    15d8:	f6 cf       	rjmp	.-20     	; 0x15c6 <__ultoa_invert+0x58>
    15da:	46 2f       	mov	r20, r22
    15dc:	4f 70       	andi	r20, 0x0F	; 15
    15de:	40 5d       	subi	r20, 0xD0	; 208
    15e0:	4a 33       	cpi	r20, 0x3A	; 58
    15e2:	18 f0       	brcs	.+6      	; 0x15ea <__ultoa_invert+0x7c>
    15e4:	49 5d       	subi	r20, 0xD9	; 217
    15e6:	31 fd       	sbrc	r19, 1
    15e8:	40 52       	subi	r20, 0x20	; 32
    15ea:	41 93       	st	Z+, r20
    15ec:	02 d0       	rcall	.+4      	; 0x15f2 <__ultoa_invert+0x84>
    15ee:	a9 f7       	brne	.-22     	; 0x15da <__ultoa_invert+0x6c>
    15f0:	ea cf       	rjmp	.-44     	; 0x15c6 <__ultoa_invert+0x58>
    15f2:	b4 e0       	ldi	r27, 0x04	; 4
    15f4:	a6 95       	lsr	r26
    15f6:	97 95       	ror	r25
    15f8:	87 95       	ror	r24
    15fa:	77 95       	ror	r23
    15fc:	67 95       	ror	r22
    15fe:	ba 95       	dec	r27
    1600:	c9 f7       	brne	.-14     	; 0x15f4 <__ultoa_invert+0x86>
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	61 05       	cpc	r22, r1
    1606:	71 05       	cpc	r23, r1
    1608:	08 95       	ret
    160a:	9b 01       	movw	r18, r22
    160c:	ac 01       	movw	r20, r24
    160e:	0a 2e       	mov	r0, r26
    1610:	06 94       	lsr	r0
    1612:	57 95       	ror	r21
    1614:	47 95       	ror	r20
    1616:	37 95       	ror	r19
    1618:	27 95       	ror	r18
    161a:	ba 95       	dec	r27
    161c:	c9 f7       	brne	.-14     	; 0x1610 <__ultoa_invert+0xa2>
    161e:	62 0f       	add	r22, r18
    1620:	73 1f       	adc	r23, r19
    1622:	84 1f       	adc	r24, r20
    1624:	95 1f       	adc	r25, r21
    1626:	a0 1d       	adc	r26, r0
    1628:	08 95       	ret

0000162a <_exit>:
    162a:	f8 94       	cli

0000162c <__stop_program>:
    162c:	ff cf       	rjmp	.-2      	; 0x162c <__stop_program>
