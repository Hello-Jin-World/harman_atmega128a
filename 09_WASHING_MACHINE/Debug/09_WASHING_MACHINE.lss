
09_WASHING_MACHINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00001d82  00001e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006a0  00800164  00800164  00001e7a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ed8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002057  00000000  00000000  00002108  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001264  00000000  00000000  0000415f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001409  00000000  00000000  000053c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f0  00000000  00000000  000067cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093b  00000000  00000000  00006cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c8d  00000000  00000000  000075f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00008284  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__vector_5>
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c7       	rjmp	.+3832   	; 0xf3a <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__vector_18>
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_30>
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e8       	ldi	r30, 0x82	; 130
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 36       	cpi	r26, 0x64	; 100
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	a4 e6       	ldi	r26, 0x64	; 100
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 30       	cpi	r26, 0x04	; 4
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	a4 d7       	rcall	.+3912   	; 0x100c <main>
      c4:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <init_button>:
// 00001111
// DDRD &= 0x0f; // 4, 5, 6, 7을 input. PORTD.4 가독성이 떨어진다.

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN | 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN);
      ca:	81 b3       	in	r24, 0x11	; 17
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	81 bb       	out	0x11, r24	; 17
      d0:	08 95       	ret

000000d2 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
      d2:	20 b3       	in	r18, 0x10	; 16
      d4:	42 2f       	mov	r20, r18
      d6:	50 e0       	ldi	r21, 0x00	; 0
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <get_button+0x10>
      de:	22 0f       	add	r18, r18
      e0:	33 1f       	adc	r19, r19
      e2:	6a 95       	dec	r22
      e4:	e2 f7       	brpl	.-8      	; 0xde <get_button+0xc>
      e6:	24 23       	and	r18, r20
      e8:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
      ea:	21 15       	cp	r18, r1
      ec:	31 05       	cpc	r19, r1
      ee:	b9 f0       	breq	.+46     	; 0x11e <get_button+0x4c>
      f0:	fc 01       	movw	r30, r24
      f2:	ec 59       	subi	r30, 0x9C	; 156
      f4:	fe 4f       	sbci	r31, 0xFE	; 254
      f6:	40 81       	ld	r20, Z
      f8:	41 11       	cpse	r20, r1
      fa:	11 c0       	rjmp	.+34     	; 0x11e <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fc:	2f ef       	ldi	r18, 0xFF	; 255
      fe:	3d ee       	ldi	r19, 0xED	; 237
     100:	42 e0       	ldi	r20, 0x02	; 2
     102:	21 50       	subi	r18, 0x01	; 1
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	e1 f7       	brne	.-8      	; 0x102 <get_button+0x30>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <get_button+0x3a>
     10c:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     10e:	fc 01       	movw	r30, r24
     110:	ec 59       	subi	r30, 0x9C	; 156
     112:	fe 4f       	sbci	r31, 0xFE	; 254
     114:	21 e0       	ldi	r18, 0x01	; 1
     116:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     11e:	fc 01       	movw	r30, r24
     120:	ec 59       	subi	r30, 0x9C	; 156
     122:	fe 4f       	sbci	r31, 0xFE	; 254
     124:	40 81       	ld	r20, Z
     126:	41 30       	cpi	r20, 0x01	; 1
     128:	91 f4       	brne	.+36     	; 0x14e <get_button+0x7c>
     12a:	23 2b       	or	r18, r19
     12c:	99 f4       	brne	.+38     	; 0x154 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     12e:	fc 01       	movw	r30, r24
     130:	ec 59       	subi	r30, 0x9C	; 156
     132:	fe 4f       	sbci	r31, 0xFE	; 254
     134:	10 82       	st	Z, r1
     136:	8f ef       	ldi	r24, 0xFF	; 255
     138:	9d ee       	ldi	r25, 0xED	; 237
     13a:	22 e0       	ldi	r18, 0x02	; 2
     13c:	81 50       	subi	r24, 0x01	; 1
     13e:	90 40       	sbci	r25, 0x00	; 0
     140:	20 40       	sbci	r18, 0x00	; 0
     142:	e1 f7       	brne	.-8      	; 0x13c <get_button+0x6a>
     144:	00 c0       	rjmp	.+0      	; 0x146 <get_button+0x74>
     146:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	08 95       	ret
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	08 95       	ret

0000015a <main_screen>:
	}
}

void main_screen(void) // 메인 화면
{
	PORTA = 0;
     15a:	1b ba       	out	0x1b, r1	; 27
	loading_rot = 5; // NULL
     15c:	85 e0       	ldi	r24, 0x05	; 5
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     164:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
     168:	08 95       	ret

0000016a <dumy_fanc>:
	}
}

void dumy_fanc()
{
	PORTA = 0;
     16a:	1b ba       	out	0x1b, r1	; 27
     16c:	08 95       	ret

0000016e <init_fnd>:

////////////////////////////////////////////fnd 초기화 및 fnd 표시 함수들 ///////////////////////////////////////////////////////////

void init_fnd(void)
{
	FND_DATA_DDR = 0xff; // 출력모드로 설정
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	84 bb       	out	0x14, r24	; 20

	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 |
     172:	87 b3       	in	r24, 0x17	; 23
     174:	80 6f       	ori	r24, 0xF0	; 240
     176:	87 bb       	out	0x17, r24	; 23
					 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4;

	FND_DATA_PORT = 0x00; // FND를 all off
     178:	15 ba       	out	0x15, r1	; 21
     17a:	08 95       	ret

0000017c <fnd_display>:
}

void fnd_display(void)
{
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	2b 97       	sbiw	r28, 0x0b	; 11
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	f8 94       	cli
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	cd bf       	out	0x3d, r28	; 61
						//  0      1       2      3      4      5      6     7      8       9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
     190:	8b e0       	ldi	r24, 0x0B	; 11
     192:	e4 e3       	ldi	r30, 0x34	; 52
     194:	f1 e0       	ldi	r31, 0x01	; 1
     196:	de 01       	movw	r26, r28
     198:	11 96       	adiw	r26, 0x01	; 1
     19a:	01 90       	ld	r0, Z+
     19c:	0d 92       	st	X+, r0
     19e:	8a 95       	dec	r24
     1a0:	e1 f7       	brne	.-8      	; 0x19a <fnd_display+0x1e>

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     1a2:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <digit_select.1849>
     1a6:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <digit_select.1849+0x1>
     1aa:	81 30       	cpi	r24, 0x01	; 1
     1ac:	91 05       	cpc	r25, r1
     1ae:	21 f1       	breq	.+72     	; 0x1f8 <fnd_display+0x7c>
     1b0:	1c f4       	brge	.+6      	; 0x1b8 <fnd_display+0x3c>
     1b2:	89 2b       	or	r24, r25
     1b4:	41 f0       	breq	.+16     	; 0x1c6 <fnd_display+0x4a>
     1b6:	84 c0       	rjmp	.+264    	; 0x2c0 <fnd_display+0x144>
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	91 05       	cpc	r25, r1
     1bc:	f1 f1       	breq	.+124    	; 0x23a <fnd_display+0xbe>
     1be:	03 97       	sbiw	r24, 0x03	; 3
     1c0:	09 f4       	brne	.+2      	; 0x1c4 <fnd_display+0x48>
     1c2:	5e c0       	rjmp	.+188    	; 0x280 <fnd_display+0x104>
     1c4:	7d c0       	rjmp	.+250    	; 0x2c0 <fnd_display+0x144>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     1c6:	8f e7       	ldi	r24, 0x7F	; 127
     1c8:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     1ca:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <sec_count>
     1ce:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <sec_count+0x1>
     1d2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <sec_count+0x2>
     1d6:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <sec_count+0x3>
     1da:	2a e0       	ldi	r18, 0x0A	; 10
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	40 e0       	ldi	r20, 0x00	; 0
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodsi4>
     1e6:	e1 e0       	ldi	r30, 0x01	; 1
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	ec 0f       	add	r30, r28
     1ec:	fd 1f       	adc	r31, r29
     1ee:	e6 0f       	add	r30, r22
     1f0:	f7 1f       	adc	r31, r23
     1f2:	80 81       	ld	r24, Z
     1f4:	85 bb       	out	0x15, r24	; 21
		break;
     1f6:	64 c0       	rjmp	.+200    	; 0x2c0 <fnd_display+0x144>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     1f8:	8f eb       	ldi	r24, 0xBF	; 191
     1fa:	88 bb       	out	0x18, r24	; 24

		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     1fc:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <sec_count>
     200:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <sec_count+0x1>
     204:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <sec_count+0x2>
     208:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <sec_count+0x3>
     20c:	2a e0       	ldi	r18, 0x0A	; 10
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	50 e0       	ldi	r21, 0x00	; 0
     214:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodsi4>
     218:	ca 01       	movw	r24, r20
     21a:	b9 01       	movw	r22, r18
     21c:	26 e0       	ldi	r18, 0x06	; 6
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodsi4>
     228:	e1 e0       	ldi	r30, 0x01	; 1
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	ec 0f       	add	r30, r28
     22e:	fd 1f       	adc	r31, r29
     230:	e6 0f       	add	r30, r22
     232:	f7 1f       	adc	r31, r23
     234:	80 81       	ld	r24, Z
     236:	85 bb       	out	0x15, r24	; 21
		break;
     238:	43 c0       	rjmp	.+134    	; 0x2c0 <fnd_display+0x144>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     23a:	8f ed       	ldi	r24, 0xDF	; 223
     23c:	88 bb       	out	0x18, r24	; 24
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     23e:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <sec_count>
     242:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <sec_count+0x1>
     246:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <sec_count+0x2>
     24a:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <sec_count+0x3>
     24e:	2c e3       	ldi	r18, 0x3C	; 60
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	40 e0       	ldi	r20, 0x00	; 0
     254:	50 e0       	ldi	r21, 0x00	; 0
     256:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodsi4>
     25a:	ca 01       	movw	r24, r20
     25c:	b9 01       	movw	r22, r18
     25e:	2a e0       	ldi	r18, 0x0A	; 10
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodsi4>
     26a:	e1 e0       	ldi	r30, 0x01	; 1
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	ec 0f       	add	r30, r28
     270:	fd 1f       	adc	r31, r29
     272:	e6 0f       	add	r30, r22
     274:	f7 1f       	adc	r31, r23
     276:	90 81       	ld	r25, Z
     278:	8b 85       	ldd	r24, Y+11	; 0x0b
     27a:	89 2b       	or	r24, r25
     27c:	85 bb       	out	0x15, r24	; 21
		break;
     27e:	20 c0       	rjmp	.+64     	; 0x2c0 <fnd_display+0x144>

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     280:	8f ee       	ldi	r24, 0xEF	; 239
     282:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count / 600 % 6]; // 10단위 분
     284:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <sec_count>
     288:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <sec_count+0x1>
     28c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <sec_count+0x2>
     290:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <sec_count+0x3>
     294:	28 e5       	ldi	r18, 0x58	; 88
     296:	32 e0       	ldi	r19, 0x02	; 2
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodsi4>
     2a0:	ca 01       	movw	r24, r20
     2a2:	b9 01       	movw	r22, r18
     2a4:	26 e0       	ldi	r18, 0x06	; 6
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	40 e0       	ldi	r20, 0x00	; 0
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodsi4>
     2b0:	e1 e0       	ldi	r30, 0x01	; 1
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	ec 0f       	add	r30, r28
     2b6:	fd 1f       	adc	r31, r29
     2b8:	e6 0f       	add	r30, r22
     2ba:	f7 1f       	adc	r31, r23
     2bc:	80 81       	ld	r24, Z
     2be:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
     2c0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <digit_select.1849>
     2c4:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <digit_select.1849+0x1>
     2c8:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
     2ca:	83 70       	andi	r24, 0x03	; 3
     2cc:	90 78       	andi	r25, 0x80	; 128
     2ce:	99 23       	and	r25, r25
     2d0:	24 f4       	brge	.+8      	; 0x2da <fnd_display+0x15e>
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	8c 6f       	ori	r24, 0xFC	; 252
     2d6:	9f 6f       	ori	r25, 0xFF	; 255
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <digit_select.1849+0x1>
     2de:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <digit_select.1849>
}
     2e2:	2b 96       	adiw	r28, 0x0b	; 11
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	08 95       	ret

000002f4 <custom_wash>:
////////////////////////////////////////////메인화면에서 동작하는 함수들////////////////////////////////////////////////

void custom_wash(void) // 수동 세탁
{

	sec_count = 1;
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	a0 e0       	ldi	r26, 0x00	; 0
     2fa:	b0 e0       	ldi	r27, 0x00	; 0
     2fc:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     300:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     304:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     308:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
     30c:	33 c0       	rjmp	.+102    	; 0x374 <custom_wash+0x80>
	{
		if (get_button(BUTTON0, BUTTON0PIN))
		{
			select_wash_mode = 4;
     30e:	84 e0       	ldi	r24, 0x04	; 4
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     316:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
	}
	// 여기까지 수동 세탁의 물온도, 헹굼횟수, 탈수 강도를 선택함 밑에서 지정한 시간만큼 모터가 돌아가고 탈수 강도에 맞게 30초 동안 강도에 맞게 진행
	
	//여기에 시간 만큼 회전하는 함수 추가.
	
}
     31a:	08 95       	ret
		if (get_button(BUTTON0, BUTTON0PIN))
		{
			select_wash_mode = 4;
			break;
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     31c:	65 e0       	ldi	r22, 0x05	; 5
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	d6 de       	rcall	.-596    	; 0xd2 <get_button>
     326:	89 2b       	or	r24, r25
     328:	21 f0       	breq	.+8      	; 0x332 <custom_wash+0x3e>
		{
			if (auto_step_led == 0) // 물 온도 선택하기  --- 물온도 변수 필요하고 
			{
				custom_wash_mode = 0;
     32a:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <custom_wash_mode+0x1>
     32e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <custom_wash_mode>
			}
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     332:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     336:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     33a:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     33e:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     342:	02 97       	sbiw	r24, 0x02	; 2
     344:	a1 05       	cpc	r26, r1
     346:	b1 05       	cpc	r27, r1
     348:	48 f0       	brcs	.+18     	; 0x35c <custom_wash+0x68>
		{
			fnd_refreshrate = 0;
     34a:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     34e:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     352:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     356:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     35a:	10 df       	rcall	.-480    	; 0x17c <fnd_display>
		}
		custom_wash_select[custom_wash_mode]();
     35c:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <custom_wash_mode>
     360:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <custom_wash_mode+0x1>
     364:	ee 0f       	add	r30, r30
     366:	ff 1f       	adc	r31, r31
     368:	e0 50       	subi	r30, 0x00	; 0
     36a:	ff 4f       	sbci	r31, 0xFF	; 255
     36c:	01 90       	ld	r0, Z+
     36e:	f0 81       	ld	r31, Z
     370:	e0 2d       	mov	r30, r0
     372:	09 95       	icall
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
	{
		if (get_button(BUTTON0, BUTTON0PIN))
     374:	64 e0       	ldi	r22, 0x04	; 4
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	aa de       	rcall	.-684    	; 0xd2 <get_button>
     37e:	89 2b       	or	r24, r25
     380:	69 f2       	breq	.-102    	; 0x31c <custom_wash+0x28>
     382:	c5 cf       	rjmp	.-118    	; 0x30e <custom_wash+0x1a>

00000384 <fast_wash>:
	
}

void fast_wash(void) // 쾌속 세탁
{
	sec_count = 2;
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	a0 e0       	ldi	r26, 0x00	; 0
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     390:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     394:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     398:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
	while (1)
	{
		if (get_button(BUTTON1, BUTTON1PIN))
     39c:	65 e0       	ldi	r22, 0x05	; 5
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	96 de       	rcall	.-724    	; 0xd2 <get_button>
     3a6:	89 2b       	or	r24, r25
     3a8:	39 f0       	breq	.+14     	; 0x3b8 <fast_wash+0x34>
		{
			select_wash_mode = 4;
     3aa:	84 e0       	ldi	r24, 0x04	; 4
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     3b2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     3b6:	08 95       	ret
		if (get_button(BUTTON1, BUTTON1PIN))
		{
			select_wash_mode = 4;
			break;
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     3b8:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     3bc:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     3c0:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     3c4:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     3c8:	02 97       	sbiw	r24, 0x02	; 2
     3ca:	a1 05       	cpc	r26, r1
     3cc:	b1 05       	cpc	r27, r1
     3ce:	30 f3       	brcs	.-52     	; 0x39c <fast_wash+0x18>
		{
			fnd_refreshrate = 0;
     3d0:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     3d4:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     3d8:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     3dc:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     3e0:	cd de       	rcall	.-614    	; 0x17c <fnd_display>
     3e2:	dc cf       	rjmp	.-72     	; 0x39c <fast_wash+0x18>

000003e4 <rinse_and_spindry>:
	}
}

void rinse_and_spindry(void) // 헹굼 + 탈수
{
	sec_count = 3;
     3e4:	83 e0       	ldi	r24, 0x03	; 3
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	a0 e0       	ldi	r26, 0x00	; 0
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     3f0:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     3f4:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     3f8:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
	while (1)
	{
		if (get_button(BUTTON2, BUTTON2PIN))
     3fc:	66 e0       	ldi	r22, 0x06	; 6
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	66 de       	rcall	.-820    	; 0xd2 <get_button>
     406:	89 2b       	or	r24, r25
     408:	39 f0       	breq	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		{
			select_wash_mode = 4;
     40a:	84 e0       	ldi	r24, 0x04	; 4
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     412:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     416:	08 95       	ret
		if (get_button(BUTTON2, BUTTON2PIN))
		{
			select_wash_mode = 4;
			break;
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     418:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     41c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     420:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     424:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     428:	02 97       	sbiw	r24, 0x02	; 2
     42a:	a1 05       	cpc	r26, r1
     42c:	b1 05       	cpc	r27, r1
     42e:	30 f3       	brcs	.-52     	; 0x3fc <rinse_and_spindry+0x18>
		{
			fnd_refreshrate = 0;
     430:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     434:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     438:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     43c:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     440:	9d de       	rcall	.-710    	; 0x17c <fnd_display>
     442:	dc cf       	rjmp	.-72     	; 0x3fc <rinse_and_spindry+0x18>

00000444 <only_spindry>:
	}
}

void only_spindry(void) // 탈수
{
	sec_count = 4;
     444:	84 e0       	ldi	r24, 0x04	; 4
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	a0 e0       	ldi	r26, 0x00	; 0
     44a:	b0 e0       	ldi	r27, 0x00	; 0
     44c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     450:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     454:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     458:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
	while (1)
	{
		if (get_button(BUTTON3, BUTTON3PIN))
     45c:	67 e0       	ldi	r22, 0x07	; 7
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	36 de       	rcall	.-916    	; 0xd2 <get_button>
     466:	89 2b       	or	r24, r25
     468:	39 f0       	breq	.+14     	; 0x478 <only_spindry+0x34>
		{
			select_wash_mode = 4;
     46a:	84 e0       	ldi	r24, 0x04	; 4
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     472:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     476:	08 95       	ret
		if (get_button(BUTTON3, BUTTON3PIN))
		{
			select_wash_mode = 4;
			break;
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     478:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     47c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     480:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     484:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     488:	02 97       	sbiw	r24, 0x02	; 2
     48a:	a1 05       	cpc	r26, r1
     48c:	b1 05       	cpc	r27, r1
     48e:	30 f3       	brcs	.-52     	; 0x45c <only_spindry+0x18>
		{
			fnd_refreshrate = 0;
     490:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     494:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     498:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     49c:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     4a0:	6d de       	rcall	.-806    	; 0x17c <fnd_display>
     4a2:	dc cf       	rjmp	.-72     	; 0x45c <only_spindry+0x18>

000004a4 <water_temperature>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////수동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
	PORTA = 0x07;
     4a8:	87 e0       	ldi	r24, 0x07	; 7
     4aa:	8b bb       	out	0x1b, r24	; 27
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
     4ac:	8e e1       	ldi	r24, 0x1E	; 30
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	a0 e0       	ldi	r26, 0x00	; 0
     4b2:	b0 e0       	ldi	r27, 0x00	; 0
     4b4:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     4b8:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     4bc:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     4c0:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>

/////////////////////////////////////////수동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
	PORTA = 0x07;
	int water_tem_toggle = 1;
     4c4:	c1 e0       	ldi	r28, 0x01	; 1
     4c6:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     4c8:	66 c0       	rjmp	.+204    	; 0x596 <water_temperature+0xf2>
	{
		if (get_button(BUTTON2, BUTTON2PIN))
     4ca:	66 e0       	ldi	r22, 0x06	; 6
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	ff dd       	rcall	.-1026   	; 0xd2 <get_button>
     4d4:	89 2b       	or	r24, r25
     4d6:	99 f0       	breq	.+38     	; 0x4fe <water_temperature+0x5a>
		{
			sec_count -= 5;
     4d8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     4dc:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     4e0:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     4e4:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     4e8:	05 97       	sbiw	r24, 0x05	; 5
     4ea:	a1 09       	sbc	r26, r1
     4ec:	b1 09       	sbc	r27, r1
     4ee:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     4f2:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     4f6:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     4fa:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     4fe:	67 e0       	ldi	r22, 0x07	; 7
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	83 e0       	ldi	r24, 0x03	; 3
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	e5 dd       	rcall	.-1078   	; 0xd2 <get_button>
     508:	89 2b       	or	r24, r25
     50a:	99 f0       	breq	.+38     	; 0x532 <water_temperature+0x8e>
		{
			sec_count += 5;
     50c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     510:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     514:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     518:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     51c:	05 96       	adiw	r24, 0x05	; 5
     51e:	a1 1d       	adc	r26, r1
     520:	b1 1d       	adc	r27, r1
     522:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     526:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     52a:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     52e:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     532:	65 e0       	ldi	r22, 0x05	; 5
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	cb dd       	rcall	.-1130   	; 0xd2 <get_button>
     53c:	89 2b       	or	r24, r25
     53e:	81 f0       	breq	.+32     	; 0x560 <water_temperature+0xbc>
		{	
			sec_count = 0;
     540:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <sec_count>
     544:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <sec_count+0x1>
     548:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <sec_count+0x2>
     54c:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <sec_count+0x3>
			custom_wash_mode = 1;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     558:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			water_tem_toggle = 0;
     55c:	c0 e0       	ldi	r28, 0x00	; 0
     55e:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     560:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     564:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     568:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     56c:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     570:	02 97       	sbiw	r24, 0x02	; 2
     572:	a1 05       	cpc	r26, r1
     574:	b1 05       	cpc	r27, r1
     576:	48 f0       	brcs	.+18     	; 0x58a <water_temperature+0xe6>
		{
			fnd_refreshrate = 0;
     578:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     57c:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     580:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     584:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     588:	f9 dd       	rcall	.-1038   	; 0x17c <fnd_display>
		}
		if (custom_wash_mode == 5)
     58a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <custom_wash_mode>
     58e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <custom_wash_mode+0x1>
     592:	05 97       	sbiw	r24, 0x05	; 5
     594:	19 f0       	breq	.+6      	; 0x59c <water_temperature+0xf8>
	PORTA = 0x07;
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     596:	20 97       	sbiw	r28, 0x00	; 0
     598:	09 f0       	breq	.+2      	; 0x59c <water_temperature+0xf8>
     59a:	97 cf       	rjmp	.-210    	; 0x4ca <water_temperature+0x26>
		if (custom_wash_mode == 5)
		{
			break;
		}
	}
}
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <rinse_frequency>:

void rinse_frequency() // 헹굼 횟수 조절
{
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
	PORTA = 0x03;
     5a6:	83 e0       	ldi	r24, 0x03	; 3
     5a8:	8b bb       	out	0x1b, r24	; 27
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 2; // deflaut 헹굼 횟수
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	a0 e0       	ldi	r26, 0x00	; 0
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     5b6:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     5ba:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     5be:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
}

void rinse_frequency() // 헹굼 횟수 조절
{
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
     5c2:	c1 e0       	ldi	r28, 0x01	; 1
     5c4:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 2; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     5c6:	79 c0       	rjmp	.+242    	; 0x6ba <rinse_frequency+0x118>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     5c8:	66 e0       	ldi	r22, 0x06	; 6
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	80 dd       	rcall	.-1280   	; 0xd2 <get_button>
     5d2:	89 2b       	or	r24, r25
     5d4:	99 f0       	breq	.+38     	; 0x5fc <rinse_frequency+0x5a>
		{
			sec_count -= 1;
     5d6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     5da:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     5de:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     5e2:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	a1 09       	sbc	r26, r1
     5ea:	b1 09       	sbc	r27, r1
     5ec:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     5f0:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     5f4:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     5f8:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     5fc:	67 e0       	ldi	r22, 0x07	; 7
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	66 dd       	rcall	.-1332   	; 0xd2 <get_button>
     606:	89 2b       	or	r24, r25
     608:	99 f0       	breq	.+38     	; 0x630 <rinse_frequency+0x8e>
		{
			sec_count += 1;
     60a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     60e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     612:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     616:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     61a:	01 96       	adiw	r24, 0x01	; 1
     61c:	a1 1d       	adc	r26, r1
     61e:	b1 1d       	adc	r27, r1
     620:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     624:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     628:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     62c:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     630:	65 e0       	ldi	r22, 0x05	; 5
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	4c dd       	rcall	.-1384   	; 0xd2 <get_button>
     63a:	89 2b       	or	r24, r25
     63c:	49 f1       	breq	.+82     	; 0x690 <rinse_frequency+0xee>
		{
			total_wash_time += sec_count * 10; // 버튼 1누르면 횟수 * 10초를 전역변수에 저장하고 다음 단계로 간 다음 탈출
     63e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     642:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     646:	9c 01       	movw	r18, r24
     648:	22 0f       	add	r18, r18
     64a:	33 1f       	adc	r19, r19
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	82 0f       	add	r24, r18
     65a:	93 1f       	adc	r25, r19
     65c:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <total_wash_time>
     660:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <total_wash_time+0x1>
     664:	82 0f       	add	r24, r18
     666:	93 1f       	adc	r25, r19
     668:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <total_wash_time+0x1>
     66c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <total_wash_time>
			sec_count = 0;
     670:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <sec_count>
     674:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <sec_count+0x1>
     678:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <sec_count+0x2>
     67c:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <sec_count+0x3>
			custom_wash_mode = 2;
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     688:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			rinse_frequency_toggle = 0;
     68c:	c0 e0       	ldi	r28, 0x00	; 0
     68e:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     690:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     694:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     698:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     69c:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     6a0:	02 97       	sbiw	r24, 0x02	; 2
     6a2:	a1 05       	cpc	r26, r1
     6a4:	b1 05       	cpc	r27, r1
     6a6:	48 f0       	brcs	.+18     	; 0x6ba <rinse_frequency+0x118>
		{
			fnd_refreshrate = 0;
     6a8:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     6ac:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     6b0:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     6b4:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     6b8:	61 dd       	rcall	.-1342   	; 0x17c <fnd_display>
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 2; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     6ba:	20 97       	sbiw	r28, 0x00	; 0
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <rinse_frequency+0x11e>
     6be:	84 cf       	rjmp	.-248    	; 0x5c8 <rinse_frequency+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <spindry_strength>:

void spindry_strength()
{
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
	PORTA = 0x01;	
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	8b bb       	out	0x1b, r24	; 27

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	a0 e0       	ldi	r26, 0x00	; 0
     6d4:	b0 e0       	ldi	r27, 0x00	; 0
     6d6:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     6da:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     6de:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     6e2:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>

void spindry_strength()
{
	PORTA = 0x01;	

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
     6e6:	c1 e0       	ldi	r28, 0x01	; 1
     6e8:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
	
	while (spindry_strength_toggle)
     6ea:	98 c0       	rjmp	.+304    	; 0x81c <spindry_strength+0x156>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     6ec:	66 e0       	ldi	r22, 0x06	; 6
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	ee dc       	rcall	.-1572   	; 0xd2 <get_button>
     6f6:	89 2b       	or	r24, r25
     6f8:	99 f0       	breq	.+38     	; 0x720 <spindry_strength+0x5a>
		{
			sec_count -= 1;
     6fa:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     6fe:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     702:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     706:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	a1 09       	sbc	r26, r1
     70e:	b1 09       	sbc	r27, r1
     710:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     714:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     718:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     71c:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     720:	67 e0       	ldi	r22, 0x07	; 7
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	83 e0       	ldi	r24, 0x03	; 3
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	d4 dc       	rcall	.-1624   	; 0xd2 <get_button>
     72a:	89 2b       	or	r24, r25
     72c:	99 f0       	breq	.+38     	; 0x754 <spindry_strength+0x8e>
		{
			sec_count += 1;
     72e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     732:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     736:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     73a:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     73e:	01 96       	adiw	r24, 0x01	; 1
     740:	a1 1d       	adc	r26, r1
     742:	b1 1d       	adc	r27, r1
     744:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     748:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     74c:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     750:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1 누르면 세팅한 강도에 맞는 회전값 반환
     754:	65 e0       	ldi	r22, 0x05	; 5
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	ba dc       	rcall	.-1676   	; 0xd2 <get_button>
     75e:	89 2b       	or	r24, r25
     760:	09 f4       	brne	.+2      	; 0x764 <spindry_strength+0x9e>
     762:	47 c0       	rjmp	.+142    	; 0x7f2 <spindry_strength+0x12c>
		{
			if(sec_count == 1)
     764:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     768:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     76c:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     770:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     774:	81 30       	cpi	r24, 0x01	; 1
     776:	91 05       	cpc	r25, r1
     778:	a1 05       	cpc	r26, r1
     77a:	b1 05       	cpc	r27, r1
     77c:	39 f4       	brne	.+14     	; 0x78c <spindry_strength+0xc6>
			{
				spin_strength_val = 120;
     77e:	88 e7       	ldi	r24, 0x78	; 120
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <spin_strength_val+0x1>
     786:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <spin_strength_val>
     78a:	22 c0       	rjmp	.+68     	; 0x7d0 <spindry_strength+0x10a>
			}
			else if (sec_count == 2)
     78c:	82 30       	cpi	r24, 0x02	; 2
     78e:	91 05       	cpc	r25, r1
     790:	a1 05       	cpc	r26, r1
     792:	b1 05       	cpc	r27, r1
     794:	39 f4       	brne	.+14     	; 0x7a4 <spindry_strength+0xde>
			{
				spin_strength_val = 160;
     796:	80 ea       	ldi	r24, 0xA0	; 160
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <spin_strength_val+0x1>
     79e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <spin_strength_val>
     7a2:	16 c0       	rjmp	.+44     	; 0x7d0 <spindry_strength+0x10a>
			}
			else if (sec_count == 3)
     7a4:	83 30       	cpi	r24, 0x03	; 3
     7a6:	91 05       	cpc	r25, r1
     7a8:	a1 05       	cpc	r26, r1
     7aa:	b1 05       	cpc	r27, r1
     7ac:	39 f4       	brne	.+14     	; 0x7bc <spindry_strength+0xf6>
			{
				spin_strength_val = 205;
     7ae:	8d ec       	ldi	r24, 0xCD	; 205
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <spin_strength_val+0x1>
     7b6:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <spin_strength_val>
     7ba:	0a c0       	rjmp	.+20     	; 0x7d0 <spindry_strength+0x10a>
			}
			else if (sec_count == 4)
     7bc:	04 97       	sbiw	r24, 0x04	; 4
     7be:	a1 05       	cpc	r26, r1
     7c0:	b1 05       	cpc	r27, r1
     7c2:	31 f4       	brne	.+12     	; 0x7d0 <spindry_strength+0x10a>
			{
				spin_strength_val = 250;
     7c4:	8a ef       	ldi	r24, 0xFA	; 250
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <spin_strength_val+0x1>
     7cc:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <spin_strength_val>
			}
			PORTA = 0;
     7d0:	1b ba       	out	0x1b, r1	; 27
			spindry_strength_toggle = 0;
			custom_wash_mode = 3;
     7d2:	83 e0       	ldi	r24, 0x03	; 3
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     7da:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			sec_count = 0;
     7de:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <sec_count>
     7e2:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <sec_count+0x1>
     7e6:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <sec_count+0x2>
     7ea:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <sec_count+0x3>
			else if (sec_count == 4)
			{
				spin_strength_val = 250;
			}
			PORTA = 0;
			spindry_strength_toggle = 0;
     7ee:	c0 e0       	ldi	r28, 0x00	; 0
     7f0:	d0 e0       	ldi	r29, 0x00	; 0
			custom_wash_mode = 3;
			sec_count = 0;
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     7f2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     7f6:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     7fa:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     7fe:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     802:	02 97       	sbiw	r24, 0x02	; 2
     804:	a1 05       	cpc	r26, r1
     806:	b1 05       	cpc	r27, r1
     808:	48 f0       	brcs	.+18     	; 0x81c <spindry_strength+0x156>
		{
			fnd_refreshrate = 0;
     80a:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     80e:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     812:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     816:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     81a:	b0 dc       	rcall	.-1696   	; 0x17c <fnd_display>

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
	
	while (spindry_strength_toggle)
     81c:	20 97       	sbiw	r28, 0x00	; 0
     81e:	09 f0       	breq	.+2      	; 0x822 <spindry_strength+0x15c>
     820:	65 cf       	rjmp	.-310    	; 0x6ec <spindry_strength+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	08 95       	ret

00000828 <pause_wash>:
	custom_wash_mode = 4; // end 화면으로 이동
	sec_count = 0; // 다 끝나면 끝
}

void pause_wash(int *return_enable, int *led_pause_count)
{
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	ec 01       	movw	r28, r24
     832:	8b 01       	movw	r16, r22
	while (*return_enable == 0)
     834:	4a c0       	rjmp	.+148    	; 0x8ca <pause_wash+0xa2>
	{
		OCR3C = 0;
     836:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     83a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
		
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0 누르면 이어서 시작
     83e:	64 e0       	ldi	r22, 0x04	; 4
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	45 dc       	rcall	.-1910   	; 0xd2 <get_button>
     848:	89 2b       	or	r24, r25
     84a:	51 f0       	breq	.+20     	; 0x860 <pause_wash+0x38>
		{
			*return_enable = 1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	99 83       	std	Y+1, r25	; 0x01
     852:	88 83       	st	Y, r24
			custom_wash_mode = 3;
     854:	83 e0       	ldi	r24, 0x03	; 3
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     85c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
		}
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 세탁 취소
     860:	67 e0       	ldi	r22, 0x07	; 7
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	83 e0       	ldi	r24, 0x03	; 3
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	34 dc       	rcall	.-1944   	; 0xd2 <get_button>
     86a:	89 2b       	or	r24, r25
     86c:	b1 f0       	breq	.+44     	; 0x89a <pause_wash+0x72>
		{
			*return_enable = 1;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	99 83       	std	Y+1, r25	; 0x01
     874:	88 83       	st	Y, r24
			OCR3C = 0;
     876:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     87a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
			custom_wash_mode = 4;
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     886:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
			sec_count = 0;
     88a:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <sec_count>
     88e:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <sec_count+0x1>
     892:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <sec_count+0x2>
     896:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <sec_count+0x3>
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     89a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     89e:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     8a2:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     8a6:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     8aa:	02 97       	sbiw	r24, 0x02	; 2
     8ac:	a1 05       	cpc	r26, r1
     8ae:	b1 05       	cpc	r27, r1
     8b0:	48 f0       	brcs	.+18     	; 0x8c4 <pause_wash+0x9c>
		{
			fnd_refreshrate = 0;
     8b2:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     8b6:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     8ba:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     8be:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_display();
     8c2:	5c dc       	rcall	.-1864   	; 0x17c <fnd_display>
		}
		PORTA = *led_pause_count;
     8c4:	f8 01       	movw	r30, r16
     8c6:	80 81       	ld	r24, Z
     8c8:	8b bb       	out	0x1b, r24	; 27
	sec_count = 0; // 다 끝나면 끝
}

void pause_wash(int *return_enable, int *led_pause_count)
{
	while (*return_enable == 0)
     8ca:	88 81       	ld	r24, Y
     8cc:	99 81       	ldd	r25, Y+1	; 0x01
     8ce:	89 2b       	or	r24, r25
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <pause_wash+0xac>
     8d2:	b1 cf       	rjmp	.-158    	; 0x836 <pause_wash+0xe>
			fnd_refreshrate = 0;
			fnd_display();
		}
		PORTA = *led_pause_count;
	}
}
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	08 95       	ret

000008de <fnd_loading_display>:
	digit_select++;
	digit_select %= 4; //다음 표시할 자리수 선택
}

void fnd_loading_display(int *loading_rot, int *main_ment) // 진행 로딩 상황 표시 
{
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	66 97       	sbiw	r28, 0x16	; 22
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
     8fa:	9c 01       	movw	r18, r24
	int a, b, c, d;
				                // s     e        l      e     c     t               m     o     d        e
	uint8_t fnd_loading_font[] = {~0x92, ~0x86, ~0xc7, ~0x86, ~0xc6, ~0x87, ~0xff, ~0xaa, ~0xa3, ~0xa1, ~0x86, ~0xff, ~0xff,
     8fc:	96 e1       	ldi	r25, 0x16	; 22
     8fe:	ef e3       	ldi	r30, 0x3F	; 63
     900:	f1 e0       	ldi	r31, 0x01	; 1
     902:	de 01       	movw	r26, r28
     904:	11 96       	adiw	r26, 0x01	; 1
     906:	01 90       	ld	r0, Z+
     908:	0d 92       	st	X+, r0
     90a:	9a 95       	dec	r25
     90c:	e1 f7       	brne	.-8      	; 0x906 <fnd_loading_display+0x28>
		 ~0xce, ~0xf8, ~0xc7, ~0xf1, ~0xfe, ~0xf7, ~0xf6, ~0xff , ~0xab};
		//  |-     -|    |_     _|     -      _     -,_    꺼짐      n
	if (*loading_rot == 0)
     90e:	d9 01       	movw	r26, r18
     910:	8d 91       	ld	r24, X+
     912:	9c 91       	ld	r25, X
     914:	00 97       	sbiw	r24, 0x00	; 0
     916:	d1 f0       	breq	.+52     	; 0x94c <fnd_loading_display+0x6e>
	{
		d = 13; b = 18, c = 17, a = 16;	// loading 1
	}
	else if (*loading_rot == 1)
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	91 05       	cpc	r25, r1
     91c:	19 f1       	breq	.+70     	; 0x964 <fnd_loading_display+0x86>
	{
		d = 15; b = 17, c = 18, a = 14; // loading 2
	}
	else if (*loading_rot == 2)
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	91 05       	cpc	r25, r1
     922:	61 f1       	breq	.+88     	; 0x97c <fnd_loading_display+0x9e>
	{
		d = 17; b = 19, c = 19, a = 18; // loaing 3
	}
	else if (*loading_rot == 4) // end screen
     924:	04 97       	sbiw	r24, 0x04	; 4
     926:	b1 f1       	breq	.+108    	; 0x994 <fnd_loading_display+0xb6>
		a = 9; b = 21; c = 1; d = 6;
	}
	
	else // main screen
	{
		d = *main_ment;
     928:	db 01       	movw	r26, r22
     92a:	ed 91       	ld	r30, X+
     92c:	fc 91       	ld	r31, X
		c = d + 1; c %= 13;
     92e:	cf 01       	movw	r24, r30
     930:	01 96       	adiw	r24, 0x01	; 1
     932:	2d e0       	ldi	r18, 0x0D	; 13
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	b9 01       	movw	r22, r18
     938:	fe d6       	rcall	.+3580   	; 0x1736 <__divmodhi4>
     93a:	8c 01       	movw	r16, r24
		b = c + 1; b %= 13;
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	b9 01       	movw	r22, r18
     940:	fa d6       	rcall	.+3572   	; 0x1736 <__divmodhi4>
     942:	7c 01       	movw	r14, r24
		a = b + 1; a %= 13;
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	b9 01       	movw	r22, r18
     948:	f6 d6       	rcall	.+3564   	; 0x1736 <__divmodhi4>
     94a:	2f c0       	rjmp	.+94     	; 0x9aa <fnd_loading_display+0xcc>
	uint8_t fnd_loading_font[] = {~0x92, ~0x86, ~0xc7, ~0x86, ~0xc6, ~0x87, ~0xff, ~0xaa, ~0xa3, ~0xa1, ~0x86, ~0xff, ~0xff,
		 ~0xce, ~0xf8, ~0xc7, ~0xf1, ~0xfe, ~0xf7, ~0xf6, ~0xff , ~0xab};
		//  |-     -|    |_     _|     -      _     -,_    꺼짐      n
	if (*loading_rot == 0)
	{
		d = 13; b = 18, c = 17, a = 16;	// loading 1
     94c:	ed e0       	ldi	r30, 0x0D	; 13
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	01 e1       	ldi	r16, 0x11	; 17
     952:	10 e0       	ldi	r17, 0x00	; 0
     954:	0f 2e       	mov	r0, r31
     956:	f2 e1       	ldi	r31, 0x12	; 18
     958:	ef 2e       	mov	r14, r31
     95a:	f1 2c       	mov	r15, r1
     95c:	f0 2d       	mov	r31, r0
     95e:	80 e1       	ldi	r24, 0x10	; 16
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	23 c0       	rjmp	.+70     	; 0x9aa <fnd_loading_display+0xcc>
	}
	else if (*loading_rot == 1)
	{
		d = 15; b = 17, c = 18, a = 14; // loading 2
     964:	ef e0       	ldi	r30, 0x0F	; 15
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	02 e1       	ldi	r16, 0x12	; 18
     96a:	10 e0       	ldi	r17, 0x00	; 0
     96c:	0f 2e       	mov	r0, r31
     96e:	f1 e1       	ldi	r31, 0x11	; 17
     970:	ef 2e       	mov	r14, r31
     972:	f1 2c       	mov	r15, r1
     974:	f0 2d       	mov	r31, r0
     976:	8e e0       	ldi	r24, 0x0E	; 14
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	17 c0       	rjmp	.+46     	; 0x9aa <fnd_loading_display+0xcc>
	}
	else if (*loading_rot == 2)
	{
		d = 17; b = 19, c = 19, a = 18; // loaing 3
     97c:	e1 e1       	ldi	r30, 0x11	; 17
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	03 e1       	ldi	r16, 0x13	; 19
     982:	10 e0       	ldi	r17, 0x00	; 0
     984:	0f 2e       	mov	r0, r31
     986:	f3 e1       	ldi	r31, 0x13	; 19
     988:	ef 2e       	mov	r14, r31
     98a:	f1 2c       	mov	r15, r1
     98c:	f0 2d       	mov	r31, r0
     98e:	82 e1       	ldi	r24, 0x12	; 18
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0b c0       	rjmp	.+22     	; 0x9aa <fnd_loading_display+0xcc>
	}
	else if (*loading_rot == 4) // end screen
	{
		a = 9; b = 21; c = 1; d = 6;
     994:	e6 e0       	ldi	r30, 0x06	; 6
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	01 e0       	ldi	r16, 0x01	; 1
     99a:	10 e0       	ldi	r17, 0x00	; 0
     99c:	0f 2e       	mov	r0, r31
     99e:	f5 e1       	ldi	r31, 0x15	; 21
     9a0:	ef 2e       	mov	r14, r31
     9a2:	f1 2c       	mov	r15, r1
     9a4:	f0 2d       	mov	r31, r0
     9a6:	89 e0       	ldi	r24, 0x09	; 9
     9a8:	90 e0       	ldi	r25, 0x00	; 0
		a = b + 1; a %= 13;
	}

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     9aa:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <digit_select.1864>
     9ae:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <digit_select.1864+0x1>
     9b2:	21 30       	cpi	r18, 0x01	; 1
     9b4:	31 05       	cpc	r19, r1
     9b6:	b1 f0       	breq	.+44     	; 0x9e4 <fnd_loading_display+0x106>
     9b8:	1c f4       	brge	.+6      	; 0x9c0 <fnd_loading_display+0xe2>
     9ba:	23 2b       	or	r18, r19
     9bc:	41 f0       	breq	.+16     	; 0x9ce <fnd_loading_display+0xf0>
     9be:	32 c0       	rjmp	.+100    	; 0xa24 <fnd_loading_display+0x146>
     9c0:	22 30       	cpi	r18, 0x02	; 2
     9c2:	31 05       	cpc	r19, r1
     9c4:	d1 f0       	breq	.+52     	; 0x9fa <fnd_loading_display+0x11c>
     9c6:	23 30       	cpi	r18, 0x03	; 3
     9c8:	31 05       	cpc	r19, r1
     9ca:	11 f1       	breq	.+68     	; 0xa10 <fnd_loading_display+0x132>
     9cc:	2b c0       	rjmp	.+86     	; 0xa24 <fnd_loading_display+0x146>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     9ce:	2f e7       	ldi	r18, 0x7F	; 127
     9d0:	28 bb       	out	0x18, r18	; 24
		FND_DATA_PORT = fnd_loading_font[a];
     9d2:	e1 e0       	ldi	r30, 0x01	; 1
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	ec 0f       	add	r30, r28
     9d8:	fd 1f       	adc	r31, r29
     9da:	e8 0f       	add	r30, r24
     9dc:	f9 1f       	adc	r31, r25
     9de:	80 81       	ld	r24, Z
     9e0:	85 bb       	out	0x15, r24	; 21
		break;
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <fnd_loading_display+0x146>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     9e4:	8f eb       	ldi	r24, 0xBF	; 191
     9e6:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[b];
     9e8:	e1 e0       	ldi	r30, 0x01	; 1
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	ec 0f       	add	r30, r28
     9ee:	fd 1f       	adc	r31, r29
     9f0:	ee 0d       	add	r30, r14
     9f2:	ff 1d       	adc	r31, r15
     9f4:	80 81       	ld	r24, Z
     9f6:	85 bb       	out	0x15, r24	; 21
		break;
     9f8:	15 c0       	rjmp	.+42     	; 0xa24 <fnd_loading_display+0x146>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     9fa:	8f ed       	ldi	r24, 0xDF	; 223
     9fc:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[c];
     9fe:	e1 e0       	ldi	r30, 0x01	; 1
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	ec 0f       	add	r30, r28
     a04:	fd 1f       	adc	r31, r29
     a06:	e0 0f       	add	r30, r16
     a08:	f1 1f       	adc	r31, r17
     a0a:	80 81       	ld	r24, Z
     a0c:	85 bb       	out	0x15, r24	; 21
		break;
     a0e:	0a c0       	rjmp	.+20     	; 0xa24 <fnd_loading_display+0x146>

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     a10:	8f ee       	ldi	r24, 0xEF	; 239
     a12:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[d];
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	8c 0f       	add	r24, r28
     a1a:	9d 1f       	adc	r25, r29
     a1c:	e8 0f       	add	r30, r24
     a1e:	f9 1f       	adc	r31, r25
     a20:	80 81       	ld	r24, Z
     a22:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
     a24:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <digit_select.1864>
     a28:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <digit_select.1864+0x1>
     a2c:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
     a2e:	83 70       	andi	r24, 0x03	; 3
     a30:	90 78       	andi	r25, 0x80	; 128
     a32:	99 23       	and	r25, r25
     a34:	24 f4       	brge	.+8      	; 0xa3e <fnd_loading_display+0x160>
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	8c 6f       	ori	r24, 0xFC	; 252
     a3a:	9f 6f       	ori	r25, 0xFF	; 255
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <digit_select.1864+0x1>
     a42:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <digit_select.1864>
}
     a46:	66 96       	adiw	r28, 0x16	; 22
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	08 95       	ret

00000a60 <fnd_main>:
	end_display, // end 화면
	dumy_fanc // dumy
};

int fnd_main(void)
{
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	00 d0       	rcall	.+0      	; 0xa66 <fnd_main+0x6>
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	8a bb       	out	0x1a, r24	; 26
	init_fnd(); // fnd 초기화
     a6e:	7f db       	rcall	.-2306   	; 0x16e <init_fnd>
	init_button(); // button 초기화
     a70:	2c db       	rcall	.-2472   	; 0xca <init_button>
     a72:	1a 82       	std	Y+2, r1	; 0x02
	
	int main_ment_on = 0; // select mode 글씨가 fnd에 돌아가면서 표시되도록 하는 변수
     a74:	19 82       	std	Y+1, r1	; 0x01
     a76:	64 e0       	ldi	r22, 0x04	; 4

	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 수동 세탁 모드로 진입
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	29 db       	rcall	.-2478   	; 0xd2 <get_button>
     a80:	89 2b       	or	r24, r25
     a82:	21 f0       	breq	.+8      	; 0xa8c <fnd_main+0x2c>
     a84:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <select_wash_mode+0x1>
		{
			select_wash_mode = CUSTOM_WASH;
     a88:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <select_wash_mode>
     a8c:	65 e0       	ldi	r22, 0x05	; 5
		}
		
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1을 받으면 쾌속 세탁 모드로 진입
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	1e db       	rcall	.-2500   	; 0xd2 <get_button>
     a96:	89 2b       	or	r24, r25
     a98:	31 f0       	breq	.+12     	; 0xaa6 <fnd_main+0x46>
     a9a:	81 e0       	ldi	r24, 0x01	; 1
		{
			select_wash_mode = FAST_WASH;
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     aa2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
     aa6:	66 e0       	ldi	r22, 0x06	; 6
		}
		
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2를 받으면 헹굼 + 탈수 모드로 진입
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	11 db       	rcall	.-2526   	; 0xd2 <get_button>
     ab0:	89 2b       	or	r24, r25
     ab2:	31 f0       	breq	.+12     	; 0xac0 <fnd_main+0x60>
     ab4:	82 e0       	ldi	r24, 0x02	; 2
		{
			select_wash_mode = RINSE_AND_SPINDRY;
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     abc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3을 받으면 탈수 단독 모드로 진입
     ac0:	67 e0       	ldi	r22, 0x07	; 7
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	04 db       	rcall	.-2552   	; 0xd2 <get_button>
     aca:	89 2b       	or	r24, r25
     acc:	31 f0       	breq	.+12     	; 0xada <fnd_main+0x7a>
     ace:	83 e0       	ldi	r24, 0x03	; 3
		{
			select_wash_mode = ONLY_SPINDRY;
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     ad6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
     ada:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <select_wash_mode>
		}
		
		fp_wash_mode[select_wash_mode]();
     ade:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <select_wash_mode+0x1>
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	e4 5f       	subi	r30, 0xF4	; 244
     ae8:	fe 4f       	sbci	r31, 0xFE	; 254
     aea:	01 90       	ld	r0, Z+
     aec:	f0 81       	ld	r31, Z
     aee:	e0 2d       	mov	r30, r0
     af0:	09 95       	icall
     af2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
		
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     af6:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     afa:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     afe:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     b02:	02 97       	sbiw	r24, 0x02	; 2
     b04:	a1 05       	cpc	r26, r1
     b06:	b1 05       	cpc	r27, r1
     b08:	70 f0       	brcs	.+28     	; 0xb26 <fnd_main+0xc6>
     b0a:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
		{
			fnd_refreshrate = 0;
     b0e:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     b12:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     b16:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			//fnd_display();
			fnd_loading_display(10,&main_ment_on);
     b1a:	be 01       	movw	r22, r28
     b1c:	6f 5f       	subi	r22, 0xFF	; 255
     b1e:	7f 4f       	sbci	r23, 0xFF	; 255
     b20:	8a e0       	ldi	r24, 0x0A	; 10
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	dc de       	rcall	.-584    	; 0x8de <fnd_loading_display>
     b26:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <msec_count>
		}
		if (msec_count >= 400)
     b2a:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <msec_count+0x1>
     b2e:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <msec_count+0x2>
     b32:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <msec_count+0x3>
     b36:	80 39       	cpi	r24, 0x90	; 144
     b38:	91 40       	sbci	r25, 0x01	; 1
     b3a:	a1 05       	cpc	r26, r1
     b3c:	b1 05       	cpc	r27, r1
     b3e:	08 f4       	brcc	.+2      	; 0xb42 <fnd_main+0xe2>
     b40:	9a cf       	rjmp	.-204    	; 0xa76 <fnd_main+0x16>
     b42:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <msec_count>
		{
			msec_count = 0;
     b46:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <msec_count+0x1>
     b4a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <msec_count+0x2>
     b4e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <msec_count+0x3>
			main_ment_on++;
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	9a 81       	ldd	r25, Y+2	; 0x02
     b56:	01 96       	adiw	r24, 0x01	; 1
			main_ment_on %= 13;
     b58:	6d e0       	ldi	r22, 0x0D	; 13
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	ec d5       	rcall	.+3032   	; 0x1736 <__divmodhi4>
     b5e:	9a 83       	std	Y+2, r25	; 0x02
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	89 cf       	rjmp	.-238    	; 0xa76 <fnd_main+0x16>

00000b64 <custom_wash_start>:
     b64:	0f 93       	push	r16
	}
}


void custom_wash_start(void)
{
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	00 d0       	rcall	.+0      	; 0xb6e <custom_wash_start+0xa>
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <custom_wash_start+0xc>
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
	int return_enable = 1;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	9a 83       	std	Y+2, r25	; 0x02
     b7a:	89 83       	std	Y+1, r24	; 0x01
	int led_pwm_count; // LED 몇개 킬건지 정하는 변수
	
	sec_count = total_wash_time;
     b7c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <total_wash_time>
     b80:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <total_wash_time+0x1>
     b84:	09 2e       	mov	r0, r25
     b86:	00 0c       	add	r0, r0
     b88:	aa 0b       	sbc	r26, r26
     b8a:	bb 0b       	sbc	r27, r27
     b8c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     b90:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     b94:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     b98:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
	
	while (sec_count > 0 && return_enable == 1)
     b9c:	d9 c0       	rjmp	.+434    	; 0xd50 <custom_wash_start+0x1ec>
	{
		washing_machine_fan_control(&spin_strength_val);
     b9e:	8c e6       	ldi	r24, 0x6C	; 108
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	67 d2       	rcall	.+1230   	; 0x1072 <washing_machine_fan_control>
		
		if (msec_count >= 250) // 1초마다 시간 1초씩 감소하고 로딩 회전이 됨.
     ba4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <msec_count>
     ba8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <msec_count+0x1>
     bac:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <msec_count+0x2>
     bb0:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <msec_count+0x3>
     bb4:	8a 3f       	cpi	r24, 0xFA	; 250
     bb6:	91 05       	cpc	r25, r1
     bb8:	a1 05       	cpc	r26, r1
     bba:	b1 05       	cpc	r27, r1
     bbc:	38 f1       	brcs	.+78     	; 0xc0c <custom_wash_start+0xa8>
		{
			msec_count = 0;
     bbe:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <msec_count>
     bc2:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <msec_count+0x1>
     bc6:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <msec_count+0x2>
     bca:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <msec_count+0x3>
			sec_count--;
     bce:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
     bd2:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     bd6:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     bda:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	a1 09       	sbc	r26, r1
     be2:	b1 09       	sbc	r27, r1
     be4:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <sec_count>
     be8:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <sec_count+0x1>
     bec:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <sec_count+0x2>
     bf0:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <sec_count+0x3>
			loading_rot++;
     bf4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <loading_rot>
     bf8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <loading_rot+0x1>
     bfc:	01 96       	adiw	r24, 0x01	; 1
			loading_rot %= 3;
     bfe:	63 e0       	ldi	r22, 0x03	; 3
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	99 d5       	rcall	.+2866   	; 0x1736 <__divmodhi4>
     c04:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     c08:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
		}
		if (loading_clock_change >= 3000) // 3초마다 로딩창이랑 시간 화면 뜨는거 토글
     c0c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <loading_clock_change>
     c10:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <loading_clock_change+0x1>
     c14:	a0 91 74 01 	lds	r26, 0x0174	; 0x800174 <loading_clock_change+0x2>
     c18:	b0 91 75 01 	lds	r27, 0x0175	; 0x800175 <loading_clock_change+0x3>
     c1c:	88 3b       	cpi	r24, 0xB8	; 184
     c1e:	9b 40       	sbci	r25, 0x0B	; 11
     c20:	a1 05       	cpc	r26, r1
     c22:	b1 05       	cpc	r27, r1
     c24:	b0 f0       	brcs	.+44     	; 0xc52 <custom_wash_start+0xee>
		{
			loading_clock_change = 0;
     c26:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <loading_clock_change>
     c2a:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <loading_clock_change+0x1>
     c2e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <loading_clock_change+0x2>
     c32:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <loading_clock_change+0x3>
			loading_clock_change_val = !loading_clock_change_val;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <loading_clock_change_val>
     c3e:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <loading_clock_change_val+0x1>
     c42:	23 2b       	or	r18, r19
     c44:	11 f0       	breq	.+4      	; 0xc4a <custom_wash_start+0xe6>
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <loading_clock_change_val+0x1>
     c4e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <loading_clock_change_val>
		}
		
		/////여기에 일반세탁 60초 + 헹굼 횟수 * 10초 + 탈수 30초로 구분을 해야함
		if (total_wash_time - sec_count <= 30) // 일반 세탁 30초 경과
     c52:	40 91 6e 01 	lds	r20, 0x016E	; 0x80016e <sec_count>
     c56:	50 91 6f 01 	lds	r21, 0x016F	; 0x80016f <sec_count+0x1>
     c5a:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <sec_count+0x2>
     c5e:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <sec_count+0x3>
     c62:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <total_wash_time>
     c66:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <total_wash_time+0x1>
     c6a:	09 2e       	mov	r0, r25
     c6c:	00 0c       	add	r0, r0
     c6e:	aa 0b       	sbc	r26, r26
     c70:	bb 0b       	sbc	r27, r27
     c72:	84 1b       	sub	r24, r20
     c74:	95 0b       	sbc	r25, r21
     c76:	a6 0b       	sbc	r26, r22
     c78:	b7 0b       	sbc	r27, r23
     c7a:	8f 31       	cpi	r24, 0x1F	; 31
     c7c:	91 05       	cpc	r25, r1
     c7e:	a1 05       	cpc	r26, r1
     c80:	b1 05       	cpc	r27, r1
     c82:	28 f4       	brcc	.+10     	; 0xc8e <custom_wash_start+0x12a>
		{
			led_pwm_count = 255; // 0xff
     c84:	8f ef       	ldi	r24, 0xFF	; 255
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	9c 83       	std	Y+4, r25	; 0x04
     c8a:	8b 83       	std	Y+3, r24	; 0x03
     c8c:	2e c0       	rjmp	.+92     	; 0xcea <custom_wash_start+0x186>
		}
		
		else if (total_wash_time - sec_count <= 60 && total_wash_time - sec_count > 30) // 일반세탁 60초 완료
     c8e:	8c 01       	movw	r16, r24
     c90:	9d 01       	movw	r18, r26
     c92:	0f 51       	subi	r16, 0x1F	; 31
     c94:	11 09       	sbc	r17, r1
     c96:	21 09       	sbc	r18, r1
     c98:	31 09       	sbc	r19, r1
     c9a:	0e 31       	cpi	r16, 0x1E	; 30
     c9c:	11 05       	cpc	r17, r1
     c9e:	21 05       	cpc	r18, r1
     ca0:	31 05       	cpc	r19, r1
     ca2:	28 f4       	brcc	.+10     	; 0xcae <custom_wash_start+0x14a>
		{
			led_pwm_count = 126; // 0x7c
     ca4:	8e e7       	ldi	r24, 0x7E	; 126
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	9c 83       	std	Y+4, r25	; 0x04
     caa:	8b 83       	std	Y+3, r24	; 0x03
     cac:	1e c0       	rjmp	.+60     	; 0xcea <custom_wash_start+0x186>
		}
		
		else if (total_wash_time - sec_count > 60 && sec_count >= 30) // 헹굼
     cae:	cd 97       	sbiw	r24, 0x3d	; 61
     cb0:	a1 05       	cpc	r26, r1
     cb2:	b1 05       	cpc	r27, r1
     cb4:	50 f0       	brcs	.+20     	; 0xcca <custom_wash_start+0x166>
     cb6:	4e 31       	cpi	r20, 0x1E	; 30
     cb8:	51 05       	cpc	r21, r1
     cba:	61 05       	cpc	r22, r1
     cbc:	71 05       	cpc	r23, r1
     cbe:	28 f0       	brcs	.+10     	; 0xcca <custom_wash_start+0x166>
		{
			led_pwm_count = 60; // 0x3c
     cc0:	8c e3       	ldi	r24, 0x3C	; 60
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	9c 83       	std	Y+4, r25	; 0x04
     cc6:	8b 83       	std	Y+3, r24	; 0x03
     cc8:	10 c0       	rjmp	.+32     	; 0xcea <custom_wash_start+0x186>
		}
		
		else if (sec_count < 30)
     cca:	4e 31       	cpi	r20, 0x1E	; 30
     ccc:	51 05       	cpc	r21, r1
     cce:	61 05       	cpc	r22, r1
     cd0:	71 05       	cpc	r23, r1
     cd2:	28 f4       	brcc	.+10     	; 0xcde <custom_wash_start+0x17a>
		{
			led_pwm_count = 24; // 0x18
     cd4:	88 e1       	ldi	r24, 0x18	; 24
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	9c 83       	std	Y+4, r25	; 0x04
     cda:	8b 83       	std	Y+3, r24	; 0x03
     cdc:	06 c0       	rjmp	.+12     	; 0xcea <custom_wash_start+0x186>
		}
		
		else if (sec_count == 0)
     cde:	45 2b       	or	r20, r21
     ce0:	46 2b       	or	r20, r22
     ce2:	47 2b       	or	r20, r23
     ce4:	11 f4       	brne	.+4      	; 0xcea <custom_wash_start+0x186>
		{
			led_pwm_count = 0;
     ce6:	1c 82       	std	Y+4, r1	; 0x04
     ce8:	1b 82       	std	Y+3, r1	; 0x03
		}
		
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     cea:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     cee:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     cf2:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     cf6:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     cfa:	02 97       	sbiw	r24, 0x02	; 2
     cfc:	a1 05       	cpc	r26, r1
     cfe:	b1 05       	cpc	r27, r1
     d00:	c0 f0       	brcs	.+48     	; 0xd32 <custom_wash_start+0x1ce>
		{
			fnd_refreshrate = 0;
     d02:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     d06:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     d0a:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     d0e:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			make_pwm_led_control(&led_pwm_count);
     d12:	ce 01       	movw	r24, r28
     d14:	03 96       	adiw	r24, 0x03	; 3
     d16:	e7 d0       	rcall	.+462    	; 0xee6 <make_pwm_led_control>
			if (loading_clock_change_val)
     d18:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <loading_clock_change_val>
     d1c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <loading_clock_change_val+0x1>
     d20:	89 2b       	or	r24, r25
			{
				fnd_display(); // 시간 보여주기
     d22:	11 f0       	breq	.+4      	; 0xd28 <custom_wash_start+0x1c4>
     d24:	2b da       	rcall	.-2986   	; 0x17c <fnd_display>
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <custom_wash_start+0x1ce>
			}
			else
			{
				fnd_loading_display(&loading_rot,10); // 로딩 보여주기
     d28:	6a e0       	ldi	r22, 0x0A	; 10
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	88 e1       	ldi	r24, 0x18	; 24
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	d6 dd       	rcall	.-1108   	; 0x8de <fnd_loading_display>
			}
		}
		///// 일시정지 구현 
		
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0 누르면 일시정지
     d32:	64 e0       	ldi	r22, 0x04	; 4
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	cb d9       	rcall	.-3178   	; 0xd2 <get_button>
     d3c:	89 2b       	or	r24, r25
     d3e:	41 f0       	breq	.+16     	; 0xd50 <custom_wash_start+0x1ec>
     d40:	1a 82       	std	Y+2, r1	; 0x02
		{
			return_enable = 0;
     d42:	19 82       	std	Y+1, r1	; 0x01
			pause_wash(&return_enable, &led_pwm_count);
     d44:	be 01       	movw	r22, r28
     d46:	6d 5f       	subi	r22, 0xFD	; 253
     d48:	7f 4f       	sbci	r23, 0xFF	; 255
     d4a:	ce 01       	movw	r24, r28
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	6c dd       	rcall	.-1320   	; 0x828 <pause_wash>
     d50:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <sec_count>
	int return_enable = 1;
	int led_pwm_count; // LED 몇개 킬건지 정하는 변수
	
	sec_count = total_wash_time;
	
	while (sec_count > 0 && return_enable == 1)
     d54:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <sec_count+0x1>
     d58:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <sec_count+0x2>
     d5c:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <sec_count+0x3>
     d60:	89 2b       	or	r24, r25
     d62:	8a 2b       	or	r24, r26
     d64:	8b 2b       	or	r24, r27
     d66:	29 f0       	breq	.+10     	; 0xd72 <custom_wash_start+0x20e>
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <custom_wash_start+0x20e>
     d70:	16 cf       	rjmp	.-468    	; 0xb9e <custom_wash_start+0x3a>
     d72:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
			return_enable = 0;
			pause_wash(&return_enable, &led_pwm_count);
		}
		
	}
	OCR3C = 0;
     d76:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     d7a:	84 e0       	ldi	r24, 0x04	; 4
	custom_wash_mode = 4; // end 화면으로 이동
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     d82:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
     d86:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <sec_count>
	sec_count = 0; // 다 끝나면 끝
     d8a:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <sec_count+0x1>
     d8e:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <sec_count+0x2>
     d92:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <sec_count+0x3>
     d96:	0f 90       	pop	r0
}
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	08 95       	ret

00000da8 <end_display>:
     da8:	cf 93       	push	r28
		PORTA = *led_pause_count;
	}
}

void end_display() // end 화면
{
     daa:	df 93       	push	r29
	int end_toggle = 1;
	PORTA = 0;
     dac:	1b ba       	out	0x1b, r1	; 27
	loading_rot = 4; // end fnd display
     dae:	84 e0       	ldi	r24, 0x04	; 4
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <loading_rot+0x1>
     db6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <loading_rot>
	}
}

void end_display() // end 화면
{
	int end_toggle = 1;
     dba:	c1 e0       	ldi	r28, 0x01	; 1
     dbc:	d0 e0       	ldi	r29, 0x00	; 0
	PORTA = 0;
	loading_rot = 4; // end fnd display
	while (end_toggle)
     dbe:	7b c0       	rjmp	.+246    	; 0xeb6 <end_display+0x10e>
	{
		if (get_button(BUTTON0, BUTTON0PIN) || get_button(BUTTON1, BUTTON1PIN) || get_button(BUTTON2, BUTTON2PIN) || get_button(BUTTON3, BUTTON3PIN)) // 아무 버튼 누르면 다시 메인 화면으로
     dc0:	64 e0       	ldi	r22, 0x04	; 4
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	84 d9       	rcall	.-3320   	; 0xd2 <get_button>
     dca:	89 2b       	or	r24, r25
     dcc:	a9 f4       	brne	.+42     	; 0xdf8 <end_display+0x50>
     dce:	65 e0       	ldi	r22, 0x05	; 5
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	7d d9       	rcall	.-3334   	; 0xd2 <get_button>
     dd8:	89 2b       	or	r24, r25
     dda:	71 f4       	brne	.+28     	; 0xdf8 <end_display+0x50>
     ddc:	66 e0       	ldi	r22, 0x06	; 6
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	82 e0       	ldi	r24, 0x02	; 2
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	76 d9       	rcall	.-3348   	; 0xd2 <get_button>
     de6:	89 2b       	or	r24, r25
     de8:	39 f4       	brne	.+14     	; 0xdf8 <end_display+0x50>
     dea:	67 e0       	ldi	r22, 0x07	; 7
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	83 e0       	ldi	r24, 0x03	; 3
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	6f d9       	rcall	.-3362   	; 0xd2 <get_button>
     df4:	89 2b       	or	r24, r25
     df6:	91 f0       	breq	.+36     	; 0xe1c <end_display+0x74>
		{
			select_wash_mode = MAIN_SCREEN;
     df8:	84 e0       	ldi	r24, 0x04	; 4
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <select_wash_mode+0x1>
     e00:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <select_wash_mode>
			end_toggle = !end_toggle;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	cd 2b       	or	r28, r29
     e08:	09 f0       	breq	.+2      	; 0xe0c <end_display+0x64>
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	c8 2f       	mov	r28, r24
     e0e:	d0 e0       	ldi	r29, 0x00	; 0
			custom_wash_mode = 5; // 끝
     e10:	85 e0       	ldi	r24, 0x05	; 5
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <custom_wash_mode+0x1>
     e18:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <custom_wash_mode>
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     e1c:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     e20:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     e24:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     e28:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     e2c:	02 97       	sbiw	r24, 0x02	; 2
     e2e:	a1 05       	cpc	r26, r1
     e30:	b1 05       	cpc	r27, r1
     e32:	68 f0       	brcs	.+26     	; 0xe4e <end_display+0xa6>
		{
			fnd_refreshrate = 0;
     e34:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <fnd_refreshrate>
     e38:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <fnd_refreshrate+0x1>
     e3c:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <fnd_refreshrate+0x2>
     e40:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <fnd_refreshrate+0x3>
			fnd_loading_display(&loading_rot,10); // end 보여주기
     e44:	6a e0       	ldi	r22, 0x0A	; 10
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	88 e1       	ldi	r24, 0x18	; 24
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	48 dd       	rcall	.-1392   	; 0x8de <fnd_loading_display>
		}
		if (msec_count <= 500)
     e4e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <msec_count>
     e52:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <msec_count+0x1>
     e56:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <msec_count+0x2>
     e5a:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <msec_count+0x3>
     e5e:	85 3f       	cpi	r24, 0xF5	; 245
     e60:	91 40       	sbci	r25, 0x01	; 1
     e62:	a1 05       	cpc	r26, r1
     e64:	b1 05       	cpc	r27, r1
     e66:	18 f4       	brcc	.+6      	; 0xe6e <end_display+0xc6>
		{
			PORTA = 0b01010101;
     e68:	85 e5       	ldi	r24, 0x55	; 85
     e6a:	8b bb       	out	0x1b, r24	; 27
     e6c:	24 c0       	rjmp	.+72     	; 0xeb6 <end_display+0x10e>
		}
		else if (msec_count > 500)
     e6e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <msec_count>
     e72:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <msec_count+0x1>
     e76:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <msec_count+0x2>
     e7a:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <msec_count+0x3>
     e7e:	85 3f       	cpi	r24, 0xF5	; 245
     e80:	91 40       	sbci	r25, 0x01	; 1
     e82:	a1 05       	cpc	r26, r1
     e84:	b1 05       	cpc	r27, r1
     e86:	b8 f0       	brcs	.+46     	; 0xeb6 <end_display+0x10e>
		{
			PORTA = 0b10101010;
     e88:	8a ea       	ldi	r24, 0xAA	; 170
     e8a:	8b bb       	out	0x1b, r24	; 27
			if (msec_count >= 1000)
     e8c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <msec_count>
     e90:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <msec_count+0x1>
     e94:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <msec_count+0x2>
     e98:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <msec_count+0x3>
     e9c:	88 3e       	cpi	r24, 0xE8	; 232
     e9e:	93 40       	sbci	r25, 0x03	; 3
     ea0:	a1 05       	cpc	r26, r1
     ea2:	b1 05       	cpc	r27, r1
     ea4:	40 f0       	brcs	.+16     	; 0xeb6 <end_display+0x10e>
			{
				msec_count = 0;
     ea6:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <msec_count>
     eaa:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <msec_count+0x1>
     eae:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <msec_count+0x2>
     eb2:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <msec_count+0x3>
void end_display() // end 화면
{
	int end_toggle = 1;
	PORTA = 0;
	loading_rot = 4; // end fnd display
	while (end_toggle)
     eb6:	20 97       	sbiw	r28, 0x00	; 0
     eb8:	09 f0       	breq	.+2      	; 0xebc <end_display+0x114>
     eba:	82 cf       	rjmp	.-252    	; 0xdc0 <end_display+0x18>
			{
				msec_count = 0;
			}
		}
	}
}
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <led_on_pwm>:
	//}
}

void led_on_pwm(int dim) // dim의 반복을 이용해서 밝기를 제어 (PWM의 HIGH 비율을 제어)
{
	for (int i = 0; i < 256; i++)
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	0a c0       	rjmp	.+20     	; 0xedc <led_on_pwm+0x1a>
	{
		if (i > dim)
     ec8:	82 17       	cp	r24, r18
     eca:	93 07       	cpc	r25, r19
     ecc:	0c f4       	brge	.+2      	; 0xed0 <led_on_pwm+0xe>
		{
			PORTA = 0; // duty cycle이 넘어가면 LED all off
     ece:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ed0:	4a e6       	ldi	r20, 0x6A	; 106
     ed2:	4a 95       	dec	r20
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <led_on_pwm+0x10>
     ed6:	00 c0       	rjmp	.+0      	; 0xed8 <led_on_pwm+0x16>
	//}
}

void led_on_pwm(int dim) // dim의 반복을 이용해서 밝기를 제어 (PWM의 HIGH 비율을 제어)
{
	for (int i = 0; i < 256; i++)
     ed8:	2f 5f       	subi	r18, 0xFF	; 255
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	2f 3f       	cpi	r18, 0xFF	; 255
     ede:	31 05       	cpc	r19, r1
     ee0:	99 f3       	breq	.-26     	; 0xec8 <led_on_pwm+0x6>
     ee2:	94 f3       	brlt	.-28     	; 0xec8 <led_on_pwm+0x6>
		{
			PORTA = 0; // duty cycle이 넘어가면 LED all off
		}
		_delay_us(20);
	}
     ee4:	08 95       	ret

00000ee6 <make_pwm_led_control>:
extern volatile uint32_t msec_count;


void make_pwm_led_control(int *led_pwm_count)
{
	DDRA = 0xff; // led 모두 출력 모드
     ee6:	2f ef       	ldi	r18, 0xFF	; 255
     ee8:	2a bb       	out	0x1a, r18	; 26
	PORTA = *led_pwm_count; // 입력받은 카운트 만큼 LED on
     eea:	fc 01       	movw	r30, r24
     eec:	80 81       	ld	r24, Z
     eee:	8b bb       	out	0x1b, r24	; 27
	//PORTA = "0xff"; // led all on
	
	// dark --> bright --> dark 순서로 진행되는 코드
	//while (1)
	//{
 		led_on_pwm(dim); // 지속적으로 on할거면 이 함수만 while 반복
     ef0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <dim>
     ef4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <dim+0x1>
     ef8:	e4 df       	rcall	.-56     	; 0xec2 <led_on_pwm>
  		dim += direction;
     efa:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <dim>
     efe:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <dim+0x1>
     f02:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <direction>
     f06:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <direction+0x1>
     f0a:	82 0f       	add	r24, r18
     f0c:	93 1f       	adc	r25, r19
     f0e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <dim+0x1>
     f12:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <dim>
		  
  		if (dim == 255) // 다 밝아지면 다시 어두워지도록 함
     f16:	8f 3f       	cpi	r24, 0xFF	; 255
     f18:	91 05       	cpc	r25, r1
     f1a:	31 f4       	brne	.+12     	; 0xf28 <make_pwm_led_control+0x42>
  		{
  			direction = -1;
     f1c:	2f ef       	ldi	r18, 0xFF	; 255
     f1e:	3f ef       	ldi	r19, 0xFF	; 255
     f20:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <direction+0x1>
     f24:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <direction>
  		}
 		if (dim == 0) // 다 어두워지면 다시 밝아지도록 함
     f28:	89 2b       	or	r24, r25
     f2a:	31 f4       	brne	.+12     	; 0xf38 <make_pwm_led_control+0x52>
  		{
  			direction = 1;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <direction+0x1>
     f34:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <direction>
     f38:	08 95       	ret

00000f3a <__vector_16>:
extern void init_n289n();

FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	8f 93       	push	r24
     f46:	9f 93       	push	r25
     f48:	af 93       	push	r26
     f4a:	bf 93       	push	r27
	TCNT0=6;
     f4c:	86 e0       	ldi	r24, 0x06	; 6
     f4e:	82 bf       	out	0x32, r24	; 50
	msec_count++; 
     f50:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <msec_count>
     f54:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <msec_count+0x1>
     f58:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <msec_count+0x2>
     f5c:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <msec_count+0x3>
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	a1 1d       	adc	r26, r1
     f64:	b1 1d       	adc	r27, r1
     f66:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <msec_count>
     f6a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <msec_count+0x1>
     f6e:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <msec_count+0x2>
     f72:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <msec_count+0x3>
	fnd_refreshrate++; 
     f76:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <fnd_refreshrate>
     f7a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <fnd_refreshrate+0x1>
     f7e:	a0 91 7c 01 	lds	r26, 0x017C	; 0x80017c <fnd_refreshrate+0x2>
     f82:	b0 91 7d 01 	lds	r27, 0x017D	; 0x80017d <fnd_refreshrate+0x3>
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	a1 1d       	adc	r26, r1
     f8a:	b1 1d       	adc	r27, r1
     f8c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <fnd_refreshrate>
     f90:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <fnd_refreshrate+0x1>
     f94:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <fnd_refreshrate+0x2>
     f98:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <fnd_refreshrate+0x3>
	check_timer++;
     f9c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <check_timer>
     fa0:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <check_timer+0x1>
     fa4:	a0 91 78 01 	lds	r26, 0x0178	; 0x800178 <check_timer+0x2>
     fa8:	b0 91 79 01 	lds	r27, 0x0179	; 0x800179 <check_timer+0x3>
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	a1 1d       	adc	r26, r1
     fb0:	b1 1d       	adc	r27, r1
     fb2:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <check_timer>
     fb6:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <check_timer+0x1>
     fba:	a0 93 78 01 	sts	0x0178, r26	; 0x800178 <check_timer+0x2>
     fbe:	b0 93 79 01 	sts	0x0179, r27	; 0x800179 <check_timer+0x3>
	loading_clock_change++;
     fc2:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <loading_clock_change>
     fc6:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <loading_clock_change+0x1>
     fca:	a0 91 74 01 	lds	r26, 0x0174	; 0x800174 <loading_clock_change+0x2>
     fce:	b0 91 75 01 	lds	r27, 0x0175	; 0x800175 <loading_clock_change+0x3>
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	a1 1d       	adc	r26, r1
     fd6:	b1 1d       	adc	r27, r1
     fd8:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <loading_clock_change>
     fdc:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <loading_clock_change+0x1>
     fe0:	a0 93 74 01 	sts	0x0174, r26	; 0x800174 <loading_clock_change+0x2>
     fe4:	b0 93 75 01 	sts	0x0175, r27	; 0x800175 <loading_clock_change+0x3>
}
     fe8:	bf 91       	pop	r27
     fea:	af 91       	pop	r26
     fec:	9f 91       	pop	r25
     fee:	8f 91       	pop	r24
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	0f 90       	pop	r0
     ff6:	1f 90       	pop	r1
     ff8:	18 95       	reti

00000ffa <init_timer0>:
	}
}

void init_timer0()
{
	TCNT0 = 6;
     ffa:	86 e0       	ldi	r24, 0x06	; 6
     ffc:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     ffe:	83 b7       	in	r24, 0x33	; 51
    1000:	84 60       	ori	r24, 0x04	; 4
    1002:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
    1004:	87 b7       	in	r24, 0x37	; 55
    1006:	81 60       	ori	r24, 0x01	; 1
    1008:	87 bf       	out	0x37, r24	; 55
    100a:	08 95       	ret

0000100c <main>:
	loading_clock_change++;
}

int main(void)
{
	init_timer0();
    100c:	f6 df       	rcall	.-20     	; 0xffa <init_timer0>
	init_uart0();
    100e:	f3 d0       	rcall	.+486    	; 0x11f6 <init_uart0>
	init_uart1();
    1010:	85 d1       	rcall	.+778    	; 0x131c <init_uart1>
	init_ultrasonic();
    1012:	f5 d1       	rcall	.+1002   	; 0x13fe <init_ultrasonic>
	init_button();
    1014:	5a d8       	rcall	.-3916   	; 0xca <init_button>
    1016:	0c d0       	rcall	.+24     	; 0x1030 <init_timer3_pwm>
	init_timer3_pwm();
    1018:	23 d0       	rcall	.+70     	; 0x1060 <init_n289n>
    101a:	84 e2       	ldi	r24, 0x24	; 36
	init_n289n();
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <__iob+0x3>
	
	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
    1022:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__iob+0x2>
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	8a bb       	out	0x1a, r24	; 26
	
	DDRA=0xff;   // led를 출력 모드로
    102a:	78 94       	sei
    102c:	19 dd       	rcall	.-1486   	; 0xa60 <fnd_main>
	sei();     // 전역적으로 interrupt 허용
    102e:	ff cf       	rjmp	.-2      	; 0x102e <main+0x22>

00001030 <init_timer3_pwm>:
	
	fnd_main();
    1030:	82 b1       	in	r24, 0x02	; 2
    1032:	88 62       	ori	r24, 0x28	; 40
    1034:	82 b9       	out	0x02, r24	; 2
void init_timer3_pwm(void)
{
	// DDRE |= 1 << 3 | 1 << 4 | 1 << 5; 현재 4번에 초음파가 연결되어 있다.
	DDRE |= 1 << 3 | 1 << 5;
	// 모드 5 : 8비트 고속 pwm    TCCR3A레지스터 WGM30과 TCCR3B레지스터 WGM32를 1로 만든다.
	TCCR3A |= 1 << WGM30;
    1036:	ab e8       	ldi	r26, 0x8B	; 139
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	8c 91       	ld	r24, X
    103c:	81 60       	ori	r24, 0x01	; 1
    103e:	8c 93       	st	X, r24
	TCCR3B |= 1 << WGM32;
    1040:	ea e8       	ldi	r30, 0x8A	; 138
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	88 60       	ori	r24, 0x08	; 8
    1048:	80 83       	st	Z, r24
	// 비반전모드 top : 0x00ff  비교일치값(pwm)지정 : OCR3C
	// TCCR3A레지스터의 COM3C1을 1로 set
	// 비교일치 발생시 OC3C의 출력 핀은 LOw로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR3A |= 1 << COM3C1;
    104a:	8c 91       	ld	r24, X
    104c:	88 60       	ori	r24, 0x08	; 8
    104e:	8c 93       	st	X, r24
	// 분주비 : 64   16,000,000hz -> 250,000hz         TCCR3B의 CS30, CS31을 1로 set
	// 주기 : 1 / 250,000 -> 4us
	// 250000hz에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//			    127개의 펄스를 count하면 소요시간 : 0.51ms
	TCCR3B |= 1 << CS31 | 1 << CS30;
    1050:	80 81       	ld	r24, Z
    1052:	83 60       	ori	r24, 0x03	; 3
    1054:	80 83       	st	Z, r24
	OCR3C = 0; // 비교일치값 (Output Compare Register : PWM 값
    1056:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    105a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    105e:	08 95       	ret

00001060 <init_n289n>:
}

void init_n289n(void)
{
	PORTF &= ~(1 << 6 | 1 << 7);  // 6, 7 reset
    1060:	e2 e6       	ldi	r30, 0x62	; 98
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8f 73       	andi	r24, 0x3F	; 63
    1068:	80 83       	st	Z, r24
	PORTF |= 1 << 6; // 정회전
    106a:	80 81       	ld	r24, Z
    106c:	80 64       	ori	r24, 0x40	; 64
    106e:	80 83       	st	Z, r24
    1070:	08 95       	ret

00001072 <washing_machine_fan_control>:
}

void washing_machine_fan_control(int *spin_strength)
{
	//int pause_toggle = 0; // 일시정지 토글
	OCR3C = *spin_strength;
    1072:	fc 01       	movw	r30, r24
    1074:	80 81       	ld	r24, Z
    1076:	91 81       	ldd	r25, Z+1	; 0x01
    1078:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    107c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	
	if (check_timer >= 5000)
    1080:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <check_timer>
    1084:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <check_timer+0x1>
    1088:	a0 91 78 01 	lds	r26, 0x0178	; 0x800178 <check_timer+0x2>
    108c:	b0 91 79 01 	lds	r27, 0x0179	; 0x800179 <check_timer+0x3>
    1090:	88 38       	cpi	r24, 0x88	; 136
    1092:	93 41       	sbci	r25, 0x13	; 19
    1094:	a1 05       	cpc	r26, r1
    1096:	b1 05       	cpc	r27, r1
    1098:	d8 f0       	brcs	.+54     	; 0x10d0 <washing_machine_fan_control+0x5e>
	{
		PORTF &= ~(1 << 6 | 1 << 7);  // 6, 7 reset
    109a:	e2 e6       	ldi	r30, 0x62	; 98
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8f 73       	andi	r24, 0x3F	; 63
    10a2:	80 83       	st	Z, r24
		fan_forward = !fan_forward;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <fan_forward>
    10ac:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <fan_forward+0x1>
    10b0:	23 2b       	or	r18, r19
    10b2:	11 f0       	breq	.+4      	; 0x10b8 <washing_machine_fan_control+0x46>
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <fan_forward+0x1>
    10bc:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <fan_forward>
		check_timer = 0;
    10c0:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <check_timer>
    10c4:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <check_timer+0x1>
    10c8:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <check_timer+0x2>
    10cc:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <check_timer+0x3>
	}
	
	if (fan_forward == 1 /*&& pause_toggle == 0*/)
    10d0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <fan_forward>
    10d4:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <fan_forward+0x1>
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	91 05       	cpc	r25, r1
    10dc:	31 f4       	brne	.+12     	; 0x10ea <washing_machine_fan_control+0x78>
	{
		PORTF |= 1 << 6; // 정회전
    10de:	e2 e6       	ldi	r30, 0x62	; 98
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 64       	ori	r24, 0x40	; 64
    10e6:	80 83       	st	Z, r24
    10e8:	08 95       	ret
	}
	else if (fan_forward == 0 /*&& pause_toggle == 0*/)
    10ea:	89 2b       	or	r24, r25
    10ec:	29 f4       	brne	.+10     	; 0x10f8 <washing_machine_fan_control+0x86>
	{
		PORTF |= 1 << 7; // 역회전
    10ee:	e2 e6       	ldi	r30, 0x62	; 98
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	80 68       	ori	r24, 0x80	; 128
    10f6:	80 83       	st	Z, r24
    10f8:	08 95       	ret

000010fa <__vector_18>:

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
    10fa:	1f 92       	push	r1
    10fc:	0f 92       	push	r0
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	0f 92       	push	r0
    1102:	11 24       	eor	r1, r1
    1104:	0b b6       	in	r0, 0x3b	; 59
    1106:	0f 92       	push	r0
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	ef 93       	push	r30
    111e:	ff 93       	push	r31
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	1f 92       	push	r1
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
    112a:	8c b1       	in	r24, 0x0c	; 12
    112c:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	8d 30       	cpi	r24, 0x0D	; 13
    1132:	19 f0       	breq	.+6      	; 0x113a <__stack+0x3b>
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	8a 30       	cpi	r24, 0x0A	; 10
    1138:	61 f5       	brne	.+88     	; 0x1192 <__stack+0x93>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
    113a:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <rear>
    113e:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <rear+0x1>
    1142:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <i.1894>
    1146:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <i.1894+0x1>
    114a:	40 e5       	ldi	r20, 0x50	; 80
    114c:	42 9f       	mul	r20, r18
    114e:	f0 01       	movw	r30, r0
    1150:	43 9f       	mul	r20, r19
    1152:	f0 0d       	add	r31, r0
    1154:	11 24       	eor	r1, r1
    1156:	e4 57       	subi	r30, 0x74	; 116
    1158:	fe 4f       	sbci	r31, 0xFE	; 254
    115a:	e8 0f       	add	r30, r24
    115c:	f9 1f       	adc	r31, r25
    115e:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
    1160:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <i.1894+0x1>
    1164:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <i.1894>
		rear++;
    1168:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <rear>
    116c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <rear+0x1>
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <rear+0x1>
    1176:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
    117a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <rear>
    117e:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <rear+0x1>
    1182:	6a e0       	ldi	r22, 0x0A	; 10
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	d7 d2       	rcall	.+1454   	; 0x1736 <__divmodhi4>
    1188:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <rear+0x1>
    118c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <rear>
    1190:	1c c0       	rjmp	.+56     	; 0x11ca <__stack+0xcb>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
    1192:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <rear>
    1196:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <rear+0x1>
    119a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <i.1894>
    119e:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <i.1894+0x1>
    11a2:	9c 01       	movw	r18, r24
    11a4:	2f 5f       	subi	r18, 0xFF	; 255
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
    11a8:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <i.1894+0x1>
    11ac:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <i.1894>
    11b0:	49 81       	ldd	r20, Y+1	; 0x01
    11b2:	50 e5       	ldi	r21, 0x50	; 80
    11b4:	56 9f       	mul	r21, r22
    11b6:	90 01       	movw	r18, r0
    11b8:	57 9f       	mul	r21, r23
    11ba:	30 0d       	add	r19, r0
    11bc:	11 24       	eor	r1, r1
    11be:	24 57       	subi	r18, 0x74	; 116
    11c0:	3e 4f       	sbci	r19, 0xFE	; 254
    11c2:	f9 01       	movw	r30, r18
    11c4:	e8 0f       	add	r30, r24
    11c6:	f9 1f       	adc	r31, r25
    11c8:	40 83       	st	Z, r20
	}
		  
}
    11ca:	0f 90       	pop	r0
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	ff 91       	pop	r31
    11d2:	ef 91       	pop	r30
    11d4:	bf 91       	pop	r27
    11d6:	af 91       	pop	r26
    11d8:	9f 91       	pop	r25
    11da:	8f 91       	pop	r24
    11dc:	7f 91       	pop	r23
    11de:	6f 91       	pop	r22
    11e0:	5f 91       	pop	r21
    11e2:	4f 91       	pop	r20
    11e4:	3f 91       	pop	r19
    11e6:	2f 91       	pop	r18
    11e8:	0f 90       	pop	r0
    11ea:	0b be       	out	0x3b, r0	; 59
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	0f 90       	pop	r0
    11f2:	1f 90       	pop	r1
    11f4:	18 95       	reti

000011f6 <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
    11f6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
    11fa:	8f ec       	ldi	r24, 0xCF	; 207
    11fc:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
    11fe:	8b b1       	in	r24, 0x0b	; 11
    1200:	82 60       	ori	r24, 0x02	; 2
    1202:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
    1204:	e5 e9       	ldi	r30, 0x95	; 149
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	86 60       	ori	r24, 0x06	; 6
    120c:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
    120e:	8a b1       	in	r24, 0x0a	; 10
    1210:	88 69       	ori	r24, 0x98	; 152
    1212:	8a b9       	out	0x0a, r24	; 10
    1214:	08 95       	ret

00001216 <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
    1216:	5d 9b       	sbis	0x0b, 5	; 11
    1218:	fe cf       	rjmp	.-4      	; 0x1216 <UART0_transmit>
		;   // no operation NOP
	
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
    121a:	8c b9       	out	0x0c, r24	; 12
    121c:	08 95       	ret

0000121e <__vector_30>:

// BT로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART1_RX_vect)
{
    121e:	1f 92       	push	r1
    1220:	0f 92       	push	r0
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	0f 92       	push	r0
    1226:	11 24       	eor	r1, r1
    1228:	0b b6       	in	r0, 0x3b	; 59
    122a:	0f 92       	push	r0
    122c:	2f 93       	push	r18
    122e:	3f 93       	push	r19
    1230:	4f 93       	push	r20
    1232:	5f 93       	push	r21
    1234:	6f 93       	push	r22
    1236:	7f 93       	push	r23
    1238:	8f 93       	push	r24
    123a:	9f 93       	push	r25
    123c:	af 93       	push	r26
    123e:	bf 93       	push	r27
    1240:	ef 93       	push	r30
    1242:	ff 93       	push	r31
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	1f 92       	push	r1
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
    124e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1252:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	8d 30       	cpi	r24, 0x0D	; 13
    1258:	19 f0       	breq	.+6      	; 0x1260 <__vector_30+0x42>
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	8a 30       	cpi	r24, 0x0A	; 10
    125e:	61 f5       	brne	.+88     	; 0x12b8 <__vector_30+0x9a>
	{
		rx1_buff[rear1][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
    1260:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <rear1>
    1264:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <rear1+0x1>
    1268:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <i.1896>
    126c:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <i.1896+0x1>
    1270:	40 e5       	ldi	r20, 0x50	; 80
    1272:	42 9f       	mul	r20, r18
    1274:	f0 01       	movw	r30, r0
    1276:	43 9f       	mul	r20, r19
    1278:	f0 0d       	add	r31, r0
    127a:	11 24       	eor	r1, r1
    127c:	e4 55       	subi	r30, 0x54	; 84
    127e:	fb 4f       	sbci	r31, 0xFB	; 251
    1280:	e8 0f       	add	r30, r24
    1282:	f9 1f       	adc	r31, r25
    1284:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
    1286:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <i.1896+0x1>
    128a:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <i.1896>
		rear1++;
    128e:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <rear1>
    1292:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <rear1+0x1>
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <rear1+0x1>
    129c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <rear1>
		rear1 %= COMMAND_NUMBER;   // 0 ~ 9 if (rear1 >= 9) rear1 =0;
    12a0:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <rear1>
    12a4:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <rear1+0x1>
    12a8:	6a e0       	ldi	r22, 0x0A	; 10
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	44 d2       	rcall	.+1160   	; 0x1736 <__divmodhi4>
    12ae:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <rear1+0x1>
    12b2:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <rear1>
    12b6:	1c c0       	rjmp	.+56     	; 0x12f0 <__vector_30+0xd2>
		// !!!! 이곳에 queue full (rx1_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx1_buff[rear1][i++] = data;
    12b8:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <rear1>
    12bc:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <rear1+0x1>
    12c0:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <i.1896>
    12c4:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <i.1896+0x1>
    12c8:	9c 01       	movw	r18, r24
    12ca:	2f 5f       	subi	r18, 0xFF	; 255
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
    12ce:	30 93 87 01 	sts	0x0187, r19	; 0x800187 <i.1896+0x1>
    12d2:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <i.1896>
    12d6:	49 81       	ldd	r20, Y+1	; 0x01
    12d8:	50 e5       	ldi	r21, 0x50	; 80
    12da:	56 9f       	mul	r21, r22
    12dc:	90 01       	movw	r18, r0
    12de:	57 9f       	mul	r21, r23
    12e0:	30 0d       	add	r19, r0
    12e2:	11 24       	eor	r1, r1
    12e4:	24 55       	subi	r18, 0x54	; 84
    12e6:	3b 4f       	sbci	r19, 0xFB	; 251
    12e8:	f9 01       	movw	r30, r18
    12ea:	e8 0f       	add	r30, r24
    12ec:	f9 1f       	adc	r31, r25
    12ee:	40 83       	st	Z, r20
	}
		  
}
    12f0:	0f 90       	pop	r0
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0b be       	out	0x3b, r0	; 59
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	0f 90       	pop	r0
    1318:	1f 90       	pop	r1
    131a:	18 95       	reti

0000131c <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
    131c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
    1320:	8f ec       	ldi	r24, 0xCF	; 207
    1322:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
    1326:	eb e9       	ldi	r30, 0x9B	; 155
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	82 60       	ori	r24, 0x02	; 2
    132e:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
    1330:	ed e9       	ldi	r30, 0x9D	; 157
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	86 60       	ori	r24, 0x06	; 6
    1338:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
    133a:	ea e9       	ldi	r30, 0x9A	; 154
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	88 69       	ori	r24, 0x98	; 152
    1342:	80 83       	st	Z, r24
    1344:	08 95       	ret

00001346 <__vector_5>:
char scm[50];

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect)
{
    1346:	1f 92       	push	r1
    1348:	0f 92       	push	r0
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	0f 92       	push	r0
    134e:	11 24       	eor	r1, r1
    1350:	0b b6       	in	r0, 0x3b	; 59
    1352:	0f 92       	push	r0
    1354:	2f 93       	push	r18
    1356:	3f 93       	push	r19
    1358:	4f 93       	push	r20
    135a:	5f 93       	push	r21
    135c:	6f 93       	push	r22
    135e:	7f 93       	push	r23
    1360:	8f 93       	push	r24
    1362:	9f 93       	push	r25
    1364:	af 93       	push	r26
    1366:	bf 93       	push	r27
    1368:	ef 93       	push	r30
    136a:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN & (1 << ECHO))
    136c:	0c 9b       	sbis	0x01, 4	; 1
    136e:	03 c0       	rjmp	.+6      	; 0x1376 <__vector_5+0x30>
	{
		TCNT1 = 0;
    1370:	1d bc       	out	0x2d, r1	; 45
    1372:	1c bc       	out	0x2c, r1	; 44
    1374:	31 c0       	rjmp	.+98     	; 0x13d8 <__vector_5+0x92>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
    1376:	6c b5       	in	r22, 0x2c	; 44
    1378:	7d b5       	in	r23, 0x2d	; 45
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	ea d0       	rcall	.+468    	; 0x1554 <__floatunsisf>
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	34 e2       	ldi	r19, 0x24	; 36
    1384:	44 e7       	ldi	r20, 0x74	; 116
    1386:	59 e4       	ldi	r21, 0x49	; 73
    1388:	73 d1       	rcall	.+742    	; 0x1670 <__mulsf3>
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e8       	ldi	r20, 0x80	; 128
    1390:	54 e4       	ldi	r21, 0x44	; 68
    1392:	6e d1       	rcall	.+732    	; 0x1670 <__mulsf3>
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	34 e2       	ldi	r19, 0x24	; 36
    1398:	44 e7       	ldi	r20, 0x74	; 116
    139a:	5b e4       	ldi	r21, 0x4B	; 75
    139c:	42 d0       	rcall	.+132    	; 0x1422 <__divsf3>
    139e:	a9 d0       	rcall	.+338    	; 0x14f2 <__fixsfsi>
    13a0:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <ultrasonic_distance+0x1>
    13a4:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <ultrasonic_distance>
		
		// 예) TCNT1에 10이 들어 있다고 가정하자
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
		sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
    13a8:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <ultrasonic_distance>
    13ac:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <ultrasonic_distance+0x1>
    13b0:	6a e3       	ldi	r22, 0x3A	; 58
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	c0 d1       	rcall	.+896    	; 0x1736 <__divmodhi4>
    13b6:	7f 93       	push	r23
    13b8:	6f 93       	push	r22
    13ba:	85 e5       	ldi	r24, 0x55	; 85
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	9f 93       	push	r25
    13c0:	8f 93       	push	r24
    13c2:	8c ec       	ldi	r24, 0xCC	; 204
    13c4:	97 e0       	ldi	r25, 0x07	; 7
    13c6:	9f 93       	push	r25
    13c8:	8f 93       	push	r24
    13ca:	fe d1       	rcall	.+1020   	; 0x17c8 <sprintf>
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
	}
}
    13d8:	ff 91       	pop	r31
    13da:	ef 91       	pop	r30
    13dc:	bf 91       	pop	r27
    13de:	af 91       	pop	r26
    13e0:	9f 91       	pop	r25
    13e2:	8f 91       	pop	r24
    13e4:	7f 91       	pop	r23
    13e6:	6f 91       	pop	r22
    13e8:	5f 91       	pop	r21
    13ea:	4f 91       	pop	r20
    13ec:	3f 91       	pop	r19
    13ee:	2f 91       	pop	r18
    13f0:	0f 90       	pop	r0
    13f2:	0b be       	out	0x3b, r0	; 59
    13f4:	0f 90       	pop	r0
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	0f 90       	pop	r0
    13fa:	1f 90       	pop	r1
    13fc:	18 95       	reti

000013fe <init_ultrasonic>:

void init_ultrasonic()
{
	TRIG_DDR |= 1 << TRIG; // output mode로 설정
    13fe:	e4 e6       	ldi	r30, 0x64	; 100
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 61       	ori	r24, 0x10	; 16
    1406:	80 83       	st	Z, r24
	ECHO_DDR &= ~(1 << ECHO); // input mode로 설정
    1408:	82 b1       	in	r24, 0x02	; 2
    140a:	8f 7e       	andi	r24, 0xEF	; 239
    140c:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
    140e:	8a b7       	in	r24, 0x3a	; 58
    1410:	81 60       	ori	r24, 0x01	; 1
    1412:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us	
	TCCR1B |=  1 << CS12 | 1 << CS10; // 1024로 분주
    1414:	8e b5       	in	r24, 0x2e	; 46
    1416:	85 60       	ori	r24, 0x05	; 5
    1418:	8e bd       	out	0x2e, r24	; 46
	EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
    141a:	89 b7       	in	r24, 0x39	; 57
    141c:	80 61       	ori	r24, 0x10	; 16
    141e:	89 bf       	out	0x39, r24	; 57
    1420:	08 95       	ret

00001422 <__divsf3>:
    1422:	0c d0       	rcall	.+24     	; 0x143c <__divsf3x>
    1424:	eb c0       	rjmp	.+470    	; 0x15fc <__fp_round>
    1426:	e3 d0       	rcall	.+454    	; 0x15ee <__fp_pscB>
    1428:	40 f0       	brcs	.+16     	; 0x143a <__divsf3+0x18>
    142a:	da d0       	rcall	.+436    	; 0x15e0 <__fp_pscA>
    142c:	30 f0       	brcs	.+12     	; 0x143a <__divsf3+0x18>
    142e:	21 f4       	brne	.+8      	; 0x1438 <__divsf3+0x16>
    1430:	5f 3f       	cpi	r21, 0xFF	; 255
    1432:	19 f0       	breq	.+6      	; 0x143a <__divsf3+0x18>
    1434:	cc c0       	rjmp	.+408    	; 0x15ce <__fp_inf>
    1436:	51 11       	cpse	r21, r1
    1438:	15 c1       	rjmp	.+554    	; 0x1664 <__fp_szero>
    143a:	cf c0       	rjmp	.+414    	; 0x15da <__fp_nan>

0000143c <__divsf3x>:
    143c:	f0 d0       	rcall	.+480    	; 0x161e <__fp_split3>
    143e:	98 f3       	brcs	.-26     	; 0x1426 <__divsf3+0x4>

00001440 <__divsf3_pse>:
    1440:	99 23       	and	r25, r25
    1442:	c9 f3       	breq	.-14     	; 0x1436 <__divsf3+0x14>
    1444:	55 23       	and	r21, r21
    1446:	b1 f3       	breq	.-20     	; 0x1434 <__divsf3+0x12>
    1448:	95 1b       	sub	r25, r21
    144a:	55 0b       	sbc	r21, r21
    144c:	bb 27       	eor	r27, r27
    144e:	aa 27       	eor	r26, r26
    1450:	62 17       	cp	r22, r18
    1452:	73 07       	cpc	r23, r19
    1454:	84 07       	cpc	r24, r20
    1456:	38 f0       	brcs	.+14     	; 0x1466 <__divsf3_pse+0x26>
    1458:	9f 5f       	subi	r25, 0xFF	; 255
    145a:	5f 4f       	sbci	r21, 0xFF	; 255
    145c:	22 0f       	add	r18, r18
    145e:	33 1f       	adc	r19, r19
    1460:	44 1f       	adc	r20, r20
    1462:	aa 1f       	adc	r26, r26
    1464:	a9 f3       	breq	.-22     	; 0x1450 <__divsf3_pse+0x10>
    1466:	33 d0       	rcall	.+102    	; 0x14ce <__divsf3_pse+0x8e>
    1468:	0e 2e       	mov	r0, r30
    146a:	3a f0       	brmi	.+14     	; 0x147a <__divsf3_pse+0x3a>
    146c:	e0 e8       	ldi	r30, 0x80	; 128
    146e:	30 d0       	rcall	.+96     	; 0x14d0 <__divsf3_pse+0x90>
    1470:	91 50       	subi	r25, 0x01	; 1
    1472:	50 40       	sbci	r21, 0x00	; 0
    1474:	e6 95       	lsr	r30
    1476:	00 1c       	adc	r0, r0
    1478:	ca f7       	brpl	.-14     	; 0x146c <__divsf3_pse+0x2c>
    147a:	29 d0       	rcall	.+82     	; 0x14ce <__divsf3_pse+0x8e>
    147c:	fe 2f       	mov	r31, r30
    147e:	27 d0       	rcall	.+78     	; 0x14ce <__divsf3_pse+0x8e>
    1480:	66 0f       	add	r22, r22
    1482:	77 1f       	adc	r23, r23
    1484:	88 1f       	adc	r24, r24
    1486:	bb 1f       	adc	r27, r27
    1488:	26 17       	cp	r18, r22
    148a:	37 07       	cpc	r19, r23
    148c:	48 07       	cpc	r20, r24
    148e:	ab 07       	cpc	r26, r27
    1490:	b0 e8       	ldi	r27, 0x80	; 128
    1492:	09 f0       	breq	.+2      	; 0x1496 <__divsf3_pse+0x56>
    1494:	bb 0b       	sbc	r27, r27
    1496:	80 2d       	mov	r24, r0
    1498:	bf 01       	movw	r22, r30
    149a:	ff 27       	eor	r31, r31
    149c:	93 58       	subi	r25, 0x83	; 131
    149e:	5f 4f       	sbci	r21, 0xFF	; 255
    14a0:	2a f0       	brmi	.+10     	; 0x14ac <__divsf3_pse+0x6c>
    14a2:	9e 3f       	cpi	r25, 0xFE	; 254
    14a4:	51 05       	cpc	r21, r1
    14a6:	68 f0       	brcs	.+26     	; 0x14c2 <__divsf3_pse+0x82>
    14a8:	92 c0       	rjmp	.+292    	; 0x15ce <__fp_inf>
    14aa:	dc c0       	rjmp	.+440    	; 0x1664 <__fp_szero>
    14ac:	5f 3f       	cpi	r21, 0xFF	; 255
    14ae:	ec f3       	brlt	.-6      	; 0x14aa <__divsf3_pse+0x6a>
    14b0:	98 3e       	cpi	r25, 0xE8	; 232
    14b2:	dc f3       	brlt	.-10     	; 0x14aa <__divsf3_pse+0x6a>
    14b4:	86 95       	lsr	r24
    14b6:	77 95       	ror	r23
    14b8:	67 95       	ror	r22
    14ba:	b7 95       	ror	r27
    14bc:	f7 95       	ror	r31
    14be:	9f 5f       	subi	r25, 0xFF	; 255
    14c0:	c9 f7       	brne	.-14     	; 0x14b4 <__divsf3_pse+0x74>
    14c2:	88 0f       	add	r24, r24
    14c4:	91 1d       	adc	r25, r1
    14c6:	96 95       	lsr	r25
    14c8:	87 95       	ror	r24
    14ca:	97 f9       	bld	r25, 7
    14cc:	08 95       	ret
    14ce:	e1 e0       	ldi	r30, 0x01	; 1
    14d0:	66 0f       	add	r22, r22
    14d2:	77 1f       	adc	r23, r23
    14d4:	88 1f       	adc	r24, r24
    14d6:	bb 1f       	adc	r27, r27
    14d8:	62 17       	cp	r22, r18
    14da:	73 07       	cpc	r23, r19
    14dc:	84 07       	cpc	r24, r20
    14de:	ba 07       	cpc	r27, r26
    14e0:	20 f0       	brcs	.+8      	; 0x14ea <__divsf3_pse+0xaa>
    14e2:	62 1b       	sub	r22, r18
    14e4:	73 0b       	sbc	r23, r19
    14e6:	84 0b       	sbc	r24, r20
    14e8:	ba 0b       	sbc	r27, r26
    14ea:	ee 1f       	adc	r30, r30
    14ec:	88 f7       	brcc	.-30     	; 0x14d0 <__divsf3_pse+0x90>
    14ee:	e0 95       	com	r30
    14f0:	08 95       	ret

000014f2 <__fixsfsi>:
    14f2:	04 d0       	rcall	.+8      	; 0x14fc <__fixunssfsi>
    14f4:	68 94       	set
    14f6:	b1 11       	cpse	r27, r1
    14f8:	b5 c0       	rjmp	.+362    	; 0x1664 <__fp_szero>
    14fa:	08 95       	ret

000014fc <__fixunssfsi>:
    14fc:	98 d0       	rcall	.+304    	; 0x162e <__fp_splitA>
    14fe:	88 f0       	brcs	.+34     	; 0x1522 <__fixunssfsi+0x26>
    1500:	9f 57       	subi	r25, 0x7F	; 127
    1502:	90 f0       	brcs	.+36     	; 0x1528 <__fixunssfsi+0x2c>
    1504:	b9 2f       	mov	r27, r25
    1506:	99 27       	eor	r25, r25
    1508:	b7 51       	subi	r27, 0x17	; 23
    150a:	a0 f0       	brcs	.+40     	; 0x1534 <__fixunssfsi+0x38>
    150c:	d1 f0       	breq	.+52     	; 0x1542 <__fixunssfsi+0x46>
    150e:	66 0f       	add	r22, r22
    1510:	77 1f       	adc	r23, r23
    1512:	88 1f       	adc	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	1a f0       	brmi	.+6      	; 0x151e <__fixunssfsi+0x22>
    1518:	ba 95       	dec	r27
    151a:	c9 f7       	brne	.-14     	; 0x150e <__fixunssfsi+0x12>
    151c:	12 c0       	rjmp	.+36     	; 0x1542 <__fixunssfsi+0x46>
    151e:	b1 30       	cpi	r27, 0x01	; 1
    1520:	81 f0       	breq	.+32     	; 0x1542 <__fixunssfsi+0x46>
    1522:	9f d0       	rcall	.+318    	; 0x1662 <__fp_zero>
    1524:	b1 e0       	ldi	r27, 0x01	; 1
    1526:	08 95       	ret
    1528:	9c c0       	rjmp	.+312    	; 0x1662 <__fp_zero>
    152a:	67 2f       	mov	r22, r23
    152c:	78 2f       	mov	r23, r24
    152e:	88 27       	eor	r24, r24
    1530:	b8 5f       	subi	r27, 0xF8	; 248
    1532:	39 f0       	breq	.+14     	; 0x1542 <__fixunssfsi+0x46>
    1534:	b9 3f       	cpi	r27, 0xF9	; 249
    1536:	cc f3       	brlt	.-14     	; 0x152a <__fixunssfsi+0x2e>
    1538:	86 95       	lsr	r24
    153a:	77 95       	ror	r23
    153c:	67 95       	ror	r22
    153e:	b3 95       	inc	r27
    1540:	d9 f7       	brne	.-10     	; 0x1538 <__fixunssfsi+0x3c>
    1542:	3e f4       	brtc	.+14     	; 0x1552 <__fixunssfsi+0x56>
    1544:	90 95       	com	r25
    1546:	80 95       	com	r24
    1548:	70 95       	com	r23
    154a:	61 95       	neg	r22
    154c:	7f 4f       	sbci	r23, 0xFF	; 255
    154e:	8f 4f       	sbci	r24, 0xFF	; 255
    1550:	9f 4f       	sbci	r25, 0xFF	; 255
    1552:	08 95       	ret

00001554 <__floatunsisf>:
    1554:	e8 94       	clt
    1556:	09 c0       	rjmp	.+18     	; 0x156a <__floatsisf+0x12>

00001558 <__floatsisf>:
    1558:	97 fb       	bst	r25, 7
    155a:	3e f4       	brtc	.+14     	; 0x156a <__floatsisf+0x12>
    155c:	90 95       	com	r25
    155e:	80 95       	com	r24
    1560:	70 95       	com	r23
    1562:	61 95       	neg	r22
    1564:	7f 4f       	sbci	r23, 0xFF	; 255
    1566:	8f 4f       	sbci	r24, 0xFF	; 255
    1568:	9f 4f       	sbci	r25, 0xFF	; 255
    156a:	99 23       	and	r25, r25
    156c:	a9 f0       	breq	.+42     	; 0x1598 <__floatsisf+0x40>
    156e:	f9 2f       	mov	r31, r25
    1570:	96 e9       	ldi	r25, 0x96	; 150
    1572:	bb 27       	eor	r27, r27
    1574:	93 95       	inc	r25
    1576:	f6 95       	lsr	r31
    1578:	87 95       	ror	r24
    157a:	77 95       	ror	r23
    157c:	67 95       	ror	r22
    157e:	b7 95       	ror	r27
    1580:	f1 11       	cpse	r31, r1
    1582:	f8 cf       	rjmp	.-16     	; 0x1574 <__floatsisf+0x1c>
    1584:	fa f4       	brpl	.+62     	; 0x15c4 <__floatsisf+0x6c>
    1586:	bb 0f       	add	r27, r27
    1588:	11 f4       	brne	.+4      	; 0x158e <__floatsisf+0x36>
    158a:	60 ff       	sbrs	r22, 0
    158c:	1b c0       	rjmp	.+54     	; 0x15c4 <__floatsisf+0x6c>
    158e:	6f 5f       	subi	r22, 0xFF	; 255
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	8f 4f       	sbci	r24, 0xFF	; 255
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	16 c0       	rjmp	.+44     	; 0x15c4 <__floatsisf+0x6c>
    1598:	88 23       	and	r24, r24
    159a:	11 f0       	breq	.+4      	; 0x15a0 <__floatsisf+0x48>
    159c:	96 e9       	ldi	r25, 0x96	; 150
    159e:	11 c0       	rjmp	.+34     	; 0x15c2 <__floatsisf+0x6a>
    15a0:	77 23       	and	r23, r23
    15a2:	21 f0       	breq	.+8      	; 0x15ac <__floatsisf+0x54>
    15a4:	9e e8       	ldi	r25, 0x8E	; 142
    15a6:	87 2f       	mov	r24, r23
    15a8:	76 2f       	mov	r23, r22
    15aa:	05 c0       	rjmp	.+10     	; 0x15b6 <__floatsisf+0x5e>
    15ac:	66 23       	and	r22, r22
    15ae:	71 f0       	breq	.+28     	; 0x15cc <__floatsisf+0x74>
    15b0:	96 e8       	ldi	r25, 0x86	; 134
    15b2:	86 2f       	mov	r24, r22
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	2a f0       	brmi	.+10     	; 0x15c4 <__floatsisf+0x6c>
    15ba:	9a 95       	dec	r25
    15bc:	66 0f       	add	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	88 1f       	adc	r24, r24
    15c2:	da f7       	brpl	.-10     	; 0x15ba <__floatsisf+0x62>
    15c4:	88 0f       	add	r24, r24
    15c6:	96 95       	lsr	r25
    15c8:	87 95       	ror	r24
    15ca:	97 f9       	bld	r25, 7
    15cc:	08 95       	ret

000015ce <__fp_inf>:
    15ce:	97 f9       	bld	r25, 7
    15d0:	9f 67       	ori	r25, 0x7F	; 127
    15d2:	80 e8       	ldi	r24, 0x80	; 128
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	08 95       	ret

000015da <__fp_nan>:
    15da:	9f ef       	ldi	r25, 0xFF	; 255
    15dc:	80 ec       	ldi	r24, 0xC0	; 192
    15de:	08 95       	ret

000015e0 <__fp_pscA>:
    15e0:	00 24       	eor	r0, r0
    15e2:	0a 94       	dec	r0
    15e4:	16 16       	cp	r1, r22
    15e6:	17 06       	cpc	r1, r23
    15e8:	18 06       	cpc	r1, r24
    15ea:	09 06       	cpc	r0, r25
    15ec:	08 95       	ret

000015ee <__fp_pscB>:
    15ee:	00 24       	eor	r0, r0
    15f0:	0a 94       	dec	r0
    15f2:	12 16       	cp	r1, r18
    15f4:	13 06       	cpc	r1, r19
    15f6:	14 06       	cpc	r1, r20
    15f8:	05 06       	cpc	r0, r21
    15fa:	08 95       	ret

000015fc <__fp_round>:
    15fc:	09 2e       	mov	r0, r25
    15fe:	03 94       	inc	r0
    1600:	00 0c       	add	r0, r0
    1602:	11 f4       	brne	.+4      	; 0x1608 <__fp_round+0xc>
    1604:	88 23       	and	r24, r24
    1606:	52 f0       	brmi	.+20     	; 0x161c <__fp_round+0x20>
    1608:	bb 0f       	add	r27, r27
    160a:	40 f4       	brcc	.+16     	; 0x161c <__fp_round+0x20>
    160c:	bf 2b       	or	r27, r31
    160e:	11 f4       	brne	.+4      	; 0x1614 <__fp_round+0x18>
    1610:	60 ff       	sbrs	r22, 0
    1612:	04 c0       	rjmp	.+8      	; 0x161c <__fp_round+0x20>
    1614:	6f 5f       	subi	r22, 0xFF	; 255
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	8f 4f       	sbci	r24, 0xFF	; 255
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	08 95       	ret

0000161e <__fp_split3>:
    161e:	57 fd       	sbrc	r21, 7
    1620:	90 58       	subi	r25, 0x80	; 128
    1622:	44 0f       	add	r20, r20
    1624:	55 1f       	adc	r21, r21
    1626:	59 f0       	breq	.+22     	; 0x163e <__fp_splitA+0x10>
    1628:	5f 3f       	cpi	r21, 0xFF	; 255
    162a:	71 f0       	breq	.+28     	; 0x1648 <__fp_splitA+0x1a>
    162c:	47 95       	ror	r20

0000162e <__fp_splitA>:
    162e:	88 0f       	add	r24, r24
    1630:	97 fb       	bst	r25, 7
    1632:	99 1f       	adc	r25, r25
    1634:	61 f0       	breq	.+24     	; 0x164e <__fp_splitA+0x20>
    1636:	9f 3f       	cpi	r25, 0xFF	; 255
    1638:	79 f0       	breq	.+30     	; 0x1658 <__fp_splitA+0x2a>
    163a:	87 95       	ror	r24
    163c:	08 95       	ret
    163e:	12 16       	cp	r1, r18
    1640:	13 06       	cpc	r1, r19
    1642:	14 06       	cpc	r1, r20
    1644:	55 1f       	adc	r21, r21
    1646:	f2 cf       	rjmp	.-28     	; 0x162c <__fp_split3+0xe>
    1648:	46 95       	lsr	r20
    164a:	f1 df       	rcall	.-30     	; 0x162e <__fp_splitA>
    164c:	08 c0       	rjmp	.+16     	; 0x165e <__fp_splitA+0x30>
    164e:	16 16       	cp	r1, r22
    1650:	17 06       	cpc	r1, r23
    1652:	18 06       	cpc	r1, r24
    1654:	99 1f       	adc	r25, r25
    1656:	f1 cf       	rjmp	.-30     	; 0x163a <__fp_splitA+0xc>
    1658:	86 95       	lsr	r24
    165a:	71 05       	cpc	r23, r1
    165c:	61 05       	cpc	r22, r1
    165e:	08 94       	sec
    1660:	08 95       	ret

00001662 <__fp_zero>:
    1662:	e8 94       	clt

00001664 <__fp_szero>:
    1664:	bb 27       	eor	r27, r27
    1666:	66 27       	eor	r22, r22
    1668:	77 27       	eor	r23, r23
    166a:	cb 01       	movw	r24, r22
    166c:	97 f9       	bld	r25, 7
    166e:	08 95       	ret

00001670 <__mulsf3>:
    1670:	0b d0       	rcall	.+22     	; 0x1688 <__mulsf3x>
    1672:	c4 cf       	rjmp	.-120    	; 0x15fc <__fp_round>
    1674:	b5 df       	rcall	.-150    	; 0x15e0 <__fp_pscA>
    1676:	28 f0       	brcs	.+10     	; 0x1682 <__mulsf3+0x12>
    1678:	ba df       	rcall	.-140    	; 0x15ee <__fp_pscB>
    167a:	18 f0       	brcs	.+6      	; 0x1682 <__mulsf3+0x12>
    167c:	95 23       	and	r25, r21
    167e:	09 f0       	breq	.+2      	; 0x1682 <__mulsf3+0x12>
    1680:	a6 cf       	rjmp	.-180    	; 0x15ce <__fp_inf>
    1682:	ab cf       	rjmp	.-170    	; 0x15da <__fp_nan>
    1684:	11 24       	eor	r1, r1
    1686:	ee cf       	rjmp	.-36     	; 0x1664 <__fp_szero>

00001688 <__mulsf3x>:
    1688:	ca df       	rcall	.-108    	; 0x161e <__fp_split3>
    168a:	a0 f3       	brcs	.-24     	; 0x1674 <__mulsf3+0x4>

0000168c <__mulsf3_pse>:
    168c:	95 9f       	mul	r25, r21
    168e:	d1 f3       	breq	.-12     	; 0x1684 <__mulsf3+0x14>
    1690:	95 0f       	add	r25, r21
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	55 1f       	adc	r21, r21
    1696:	62 9f       	mul	r22, r18
    1698:	f0 01       	movw	r30, r0
    169a:	72 9f       	mul	r23, r18
    169c:	bb 27       	eor	r27, r27
    169e:	f0 0d       	add	r31, r0
    16a0:	b1 1d       	adc	r27, r1
    16a2:	63 9f       	mul	r22, r19
    16a4:	aa 27       	eor	r26, r26
    16a6:	f0 0d       	add	r31, r0
    16a8:	b1 1d       	adc	r27, r1
    16aa:	aa 1f       	adc	r26, r26
    16ac:	64 9f       	mul	r22, r20
    16ae:	66 27       	eor	r22, r22
    16b0:	b0 0d       	add	r27, r0
    16b2:	a1 1d       	adc	r26, r1
    16b4:	66 1f       	adc	r22, r22
    16b6:	82 9f       	mul	r24, r18
    16b8:	22 27       	eor	r18, r18
    16ba:	b0 0d       	add	r27, r0
    16bc:	a1 1d       	adc	r26, r1
    16be:	62 1f       	adc	r22, r18
    16c0:	73 9f       	mul	r23, r19
    16c2:	b0 0d       	add	r27, r0
    16c4:	a1 1d       	adc	r26, r1
    16c6:	62 1f       	adc	r22, r18
    16c8:	83 9f       	mul	r24, r19
    16ca:	a0 0d       	add	r26, r0
    16cc:	61 1d       	adc	r22, r1
    16ce:	22 1f       	adc	r18, r18
    16d0:	74 9f       	mul	r23, r20
    16d2:	33 27       	eor	r19, r19
    16d4:	a0 0d       	add	r26, r0
    16d6:	61 1d       	adc	r22, r1
    16d8:	23 1f       	adc	r18, r19
    16da:	84 9f       	mul	r24, r20
    16dc:	60 0d       	add	r22, r0
    16de:	21 1d       	adc	r18, r1
    16e0:	82 2f       	mov	r24, r18
    16e2:	76 2f       	mov	r23, r22
    16e4:	6a 2f       	mov	r22, r26
    16e6:	11 24       	eor	r1, r1
    16e8:	9f 57       	subi	r25, 0x7F	; 127
    16ea:	50 40       	sbci	r21, 0x00	; 0
    16ec:	8a f0       	brmi	.+34     	; 0x1710 <__mulsf3_pse+0x84>
    16ee:	e1 f0       	breq	.+56     	; 0x1728 <__mulsf3_pse+0x9c>
    16f0:	88 23       	and	r24, r24
    16f2:	4a f0       	brmi	.+18     	; 0x1706 <__mulsf3_pse+0x7a>
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	bb 1f       	adc	r27, r27
    16fa:	66 1f       	adc	r22, r22
    16fc:	77 1f       	adc	r23, r23
    16fe:	88 1f       	adc	r24, r24
    1700:	91 50       	subi	r25, 0x01	; 1
    1702:	50 40       	sbci	r21, 0x00	; 0
    1704:	a9 f7       	brne	.-22     	; 0x16f0 <__mulsf3_pse+0x64>
    1706:	9e 3f       	cpi	r25, 0xFE	; 254
    1708:	51 05       	cpc	r21, r1
    170a:	70 f0       	brcs	.+28     	; 0x1728 <__mulsf3_pse+0x9c>
    170c:	60 cf       	rjmp	.-320    	; 0x15ce <__fp_inf>
    170e:	aa cf       	rjmp	.-172    	; 0x1664 <__fp_szero>
    1710:	5f 3f       	cpi	r21, 0xFF	; 255
    1712:	ec f3       	brlt	.-6      	; 0x170e <__mulsf3_pse+0x82>
    1714:	98 3e       	cpi	r25, 0xE8	; 232
    1716:	dc f3       	brlt	.-10     	; 0x170e <__mulsf3_pse+0x82>
    1718:	86 95       	lsr	r24
    171a:	77 95       	ror	r23
    171c:	67 95       	ror	r22
    171e:	b7 95       	ror	r27
    1720:	f7 95       	ror	r31
    1722:	e7 95       	ror	r30
    1724:	9f 5f       	subi	r25, 0xFF	; 255
    1726:	c1 f7       	brne	.-16     	; 0x1718 <__mulsf3_pse+0x8c>
    1728:	fe 2b       	or	r31, r30
    172a:	88 0f       	add	r24, r24
    172c:	91 1d       	adc	r25, r1
    172e:	96 95       	lsr	r25
    1730:	87 95       	ror	r24
    1732:	97 f9       	bld	r25, 7
    1734:	08 95       	ret

00001736 <__divmodhi4>:
    1736:	97 fb       	bst	r25, 7
    1738:	07 2e       	mov	r0, r23
    173a:	16 f4       	brtc	.+4      	; 0x1740 <__divmodhi4+0xa>
    173c:	00 94       	com	r0
    173e:	06 d0       	rcall	.+12     	; 0x174c <__divmodhi4_neg1>
    1740:	77 fd       	sbrc	r23, 7
    1742:	08 d0       	rcall	.+16     	; 0x1754 <__divmodhi4_neg2>
    1744:	2d d0       	rcall	.+90     	; 0x17a0 <__udivmodhi4>
    1746:	07 fc       	sbrc	r0, 7
    1748:	05 d0       	rcall	.+10     	; 0x1754 <__divmodhi4_neg2>
    174a:	3e f4       	brtc	.+14     	; 0x175a <__divmodhi4_exit>

0000174c <__divmodhi4_neg1>:
    174c:	90 95       	com	r25
    174e:	81 95       	neg	r24
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	08 95       	ret

00001754 <__divmodhi4_neg2>:
    1754:	70 95       	com	r23
    1756:	61 95       	neg	r22
    1758:	7f 4f       	sbci	r23, 0xFF	; 255

0000175a <__divmodhi4_exit>:
    175a:	08 95       	ret

0000175c <__udivmodsi4>:
    175c:	a1 e2       	ldi	r26, 0x21	; 33
    175e:	1a 2e       	mov	r1, r26
    1760:	aa 1b       	sub	r26, r26
    1762:	bb 1b       	sub	r27, r27
    1764:	fd 01       	movw	r30, r26
    1766:	0d c0       	rjmp	.+26     	; 0x1782 <__udivmodsi4_ep>

00001768 <__udivmodsi4_loop>:
    1768:	aa 1f       	adc	r26, r26
    176a:	bb 1f       	adc	r27, r27
    176c:	ee 1f       	adc	r30, r30
    176e:	ff 1f       	adc	r31, r31
    1770:	a2 17       	cp	r26, r18
    1772:	b3 07       	cpc	r27, r19
    1774:	e4 07       	cpc	r30, r20
    1776:	f5 07       	cpc	r31, r21
    1778:	20 f0       	brcs	.+8      	; 0x1782 <__udivmodsi4_ep>
    177a:	a2 1b       	sub	r26, r18
    177c:	b3 0b       	sbc	r27, r19
    177e:	e4 0b       	sbc	r30, r20
    1780:	f5 0b       	sbc	r31, r21

00001782 <__udivmodsi4_ep>:
    1782:	66 1f       	adc	r22, r22
    1784:	77 1f       	adc	r23, r23
    1786:	88 1f       	adc	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	1a 94       	dec	r1
    178c:	69 f7       	brne	.-38     	; 0x1768 <__udivmodsi4_loop>
    178e:	60 95       	com	r22
    1790:	70 95       	com	r23
    1792:	80 95       	com	r24
    1794:	90 95       	com	r25
    1796:	9b 01       	movw	r18, r22
    1798:	ac 01       	movw	r20, r24
    179a:	bd 01       	movw	r22, r26
    179c:	cf 01       	movw	r24, r30
    179e:	08 95       	ret

000017a0 <__udivmodhi4>:
    17a0:	aa 1b       	sub	r26, r26
    17a2:	bb 1b       	sub	r27, r27
    17a4:	51 e1       	ldi	r21, 0x11	; 17
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <__udivmodhi4_ep>

000017a8 <__udivmodhi4_loop>:
    17a8:	aa 1f       	adc	r26, r26
    17aa:	bb 1f       	adc	r27, r27
    17ac:	a6 17       	cp	r26, r22
    17ae:	b7 07       	cpc	r27, r23
    17b0:	10 f0       	brcs	.+4      	; 0x17b6 <__udivmodhi4_ep>
    17b2:	a6 1b       	sub	r26, r22
    17b4:	b7 0b       	sbc	r27, r23

000017b6 <__udivmodhi4_ep>:
    17b6:	88 1f       	adc	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	5a 95       	dec	r21
    17bc:	a9 f7       	brne	.-22     	; 0x17a8 <__udivmodhi4_loop>
    17be:	80 95       	com	r24
    17c0:	90 95       	com	r25
    17c2:	bc 01       	movw	r22, r24
    17c4:	cd 01       	movw	r24, r26
    17c6:	08 95       	ret

000017c8 <sprintf>:
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	2e 97       	sbiw	r28, 0x0e	; 14
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	0d 89       	ldd	r16, Y+21	; 0x15
    17e2:	1e 89       	ldd	r17, Y+22	; 0x16
    17e4:	86 e0       	ldi	r24, 0x06	; 6
    17e6:	8c 83       	std	Y+4, r24	; 0x04
    17e8:	1a 83       	std	Y+2, r17	; 0x02
    17ea:	09 83       	std	Y+1, r16	; 0x01
    17ec:	8f ef       	ldi	r24, 0xFF	; 255
    17ee:	9f e7       	ldi	r25, 0x7F	; 127
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	ae 01       	movw	r20, r28
    17f6:	47 5e       	subi	r20, 0xE7	; 231
    17f8:	5f 4f       	sbci	r21, 0xFF	; 255
    17fa:	6f 89       	ldd	r22, Y+23	; 0x17
    17fc:	78 8d       	ldd	r23, Y+24	; 0x18
    17fe:	ce 01       	movw	r24, r28
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	10 d0       	rcall	.+32     	; 0x1824 <vfprintf>
    1804:	ef 81       	ldd	r30, Y+7	; 0x07
    1806:	f8 85       	ldd	r31, Y+8	; 0x08
    1808:	e0 0f       	add	r30, r16
    180a:	f1 1f       	adc	r31, r17
    180c:	10 82       	st	Z, r1
    180e:	2e 96       	adiw	r28, 0x0e	; 14
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	08 95       	ret

00001824 <vfprintf>:
    1824:	2f 92       	push	r2
    1826:	3f 92       	push	r3
    1828:	4f 92       	push	r4
    182a:	5f 92       	push	r5
    182c:	6f 92       	push	r6
    182e:	7f 92       	push	r7
    1830:	8f 92       	push	r8
    1832:	9f 92       	push	r9
    1834:	af 92       	push	r10
    1836:	bf 92       	push	r11
    1838:	cf 92       	push	r12
    183a:	df 92       	push	r13
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	2b 97       	sbiw	r28, 0x0b	; 11
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	6c 01       	movw	r12, r24
    185a:	7b 01       	movw	r14, r22
    185c:	8a 01       	movw	r16, r20
    185e:	fc 01       	movw	r30, r24
    1860:	17 82       	std	Z+7, r1	; 0x07
    1862:	16 82       	std	Z+6, r1	; 0x06
    1864:	83 81       	ldd	r24, Z+3	; 0x03
    1866:	81 ff       	sbrs	r24, 1
    1868:	bf c1       	rjmp	.+894    	; 0x1be8 <vfprintf+0x3c4>
    186a:	ce 01       	movw	r24, r28
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	3c 01       	movw	r6, r24
    1870:	f6 01       	movw	r30, r12
    1872:	93 81       	ldd	r25, Z+3	; 0x03
    1874:	f7 01       	movw	r30, r14
    1876:	93 fd       	sbrc	r25, 3
    1878:	85 91       	lpm	r24, Z+
    187a:	93 ff       	sbrs	r25, 3
    187c:	81 91       	ld	r24, Z+
    187e:	7f 01       	movw	r14, r30
    1880:	88 23       	and	r24, r24
    1882:	09 f4       	brne	.+2      	; 0x1886 <vfprintf+0x62>
    1884:	ad c1       	rjmp	.+858    	; 0x1be0 <vfprintf+0x3bc>
    1886:	85 32       	cpi	r24, 0x25	; 37
    1888:	39 f4       	brne	.+14     	; 0x1898 <vfprintf+0x74>
    188a:	93 fd       	sbrc	r25, 3
    188c:	85 91       	lpm	r24, Z+
    188e:	93 ff       	sbrs	r25, 3
    1890:	81 91       	ld	r24, Z+
    1892:	7f 01       	movw	r14, r30
    1894:	85 32       	cpi	r24, 0x25	; 37
    1896:	21 f4       	brne	.+8      	; 0x18a0 <vfprintf+0x7c>
    1898:	b6 01       	movw	r22, r12
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	d6 d1       	rcall	.+940    	; 0x1c4a <fputc>
    189e:	e8 cf       	rjmp	.-48     	; 0x1870 <vfprintf+0x4c>
    18a0:	91 2c       	mov	r9, r1
    18a2:	21 2c       	mov	r2, r1
    18a4:	31 2c       	mov	r3, r1
    18a6:	ff e1       	ldi	r31, 0x1F	; 31
    18a8:	f3 15       	cp	r31, r3
    18aa:	d8 f0       	brcs	.+54     	; 0x18e2 <vfprintf+0xbe>
    18ac:	8b 32       	cpi	r24, 0x2B	; 43
    18ae:	79 f0       	breq	.+30     	; 0x18ce <vfprintf+0xaa>
    18b0:	38 f4       	brcc	.+14     	; 0x18c0 <vfprintf+0x9c>
    18b2:	80 32       	cpi	r24, 0x20	; 32
    18b4:	79 f0       	breq	.+30     	; 0x18d4 <vfprintf+0xb0>
    18b6:	83 32       	cpi	r24, 0x23	; 35
    18b8:	a1 f4       	brne	.+40     	; 0x18e2 <vfprintf+0xbe>
    18ba:	23 2d       	mov	r18, r3
    18bc:	20 61       	ori	r18, 0x10	; 16
    18be:	1d c0       	rjmp	.+58     	; 0x18fa <vfprintf+0xd6>
    18c0:	8d 32       	cpi	r24, 0x2D	; 45
    18c2:	61 f0       	breq	.+24     	; 0x18dc <vfprintf+0xb8>
    18c4:	80 33       	cpi	r24, 0x30	; 48
    18c6:	69 f4       	brne	.+26     	; 0x18e2 <vfprintf+0xbe>
    18c8:	23 2d       	mov	r18, r3
    18ca:	21 60       	ori	r18, 0x01	; 1
    18cc:	16 c0       	rjmp	.+44     	; 0x18fa <vfprintf+0xd6>
    18ce:	83 2d       	mov	r24, r3
    18d0:	82 60       	ori	r24, 0x02	; 2
    18d2:	38 2e       	mov	r3, r24
    18d4:	e3 2d       	mov	r30, r3
    18d6:	e4 60       	ori	r30, 0x04	; 4
    18d8:	3e 2e       	mov	r3, r30
    18da:	2a c0       	rjmp	.+84     	; 0x1930 <vfprintf+0x10c>
    18dc:	f3 2d       	mov	r31, r3
    18de:	f8 60       	ori	r31, 0x08	; 8
    18e0:	1d c0       	rjmp	.+58     	; 0x191c <vfprintf+0xf8>
    18e2:	37 fc       	sbrc	r3, 7
    18e4:	2d c0       	rjmp	.+90     	; 0x1940 <vfprintf+0x11c>
    18e6:	20 ed       	ldi	r18, 0xD0	; 208
    18e8:	28 0f       	add	r18, r24
    18ea:	2a 30       	cpi	r18, 0x0A	; 10
    18ec:	40 f0       	brcs	.+16     	; 0x18fe <vfprintf+0xda>
    18ee:	8e 32       	cpi	r24, 0x2E	; 46
    18f0:	b9 f4       	brne	.+46     	; 0x1920 <vfprintf+0xfc>
    18f2:	36 fc       	sbrc	r3, 6
    18f4:	75 c1       	rjmp	.+746    	; 0x1be0 <vfprintf+0x3bc>
    18f6:	23 2d       	mov	r18, r3
    18f8:	20 64       	ori	r18, 0x40	; 64
    18fa:	32 2e       	mov	r3, r18
    18fc:	19 c0       	rjmp	.+50     	; 0x1930 <vfprintf+0x10c>
    18fe:	36 fe       	sbrs	r3, 6
    1900:	06 c0       	rjmp	.+12     	; 0x190e <vfprintf+0xea>
    1902:	8a e0       	ldi	r24, 0x0A	; 10
    1904:	98 9e       	mul	r9, r24
    1906:	20 0d       	add	r18, r0
    1908:	11 24       	eor	r1, r1
    190a:	92 2e       	mov	r9, r18
    190c:	11 c0       	rjmp	.+34     	; 0x1930 <vfprintf+0x10c>
    190e:	ea e0       	ldi	r30, 0x0A	; 10
    1910:	2e 9e       	mul	r2, r30
    1912:	20 0d       	add	r18, r0
    1914:	11 24       	eor	r1, r1
    1916:	22 2e       	mov	r2, r18
    1918:	f3 2d       	mov	r31, r3
    191a:	f0 62       	ori	r31, 0x20	; 32
    191c:	3f 2e       	mov	r3, r31
    191e:	08 c0       	rjmp	.+16     	; 0x1930 <vfprintf+0x10c>
    1920:	8c 36       	cpi	r24, 0x6C	; 108
    1922:	21 f4       	brne	.+8      	; 0x192c <vfprintf+0x108>
    1924:	83 2d       	mov	r24, r3
    1926:	80 68       	ori	r24, 0x80	; 128
    1928:	38 2e       	mov	r3, r24
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <vfprintf+0x10c>
    192c:	88 36       	cpi	r24, 0x68	; 104
    192e:	41 f4       	brne	.+16     	; 0x1940 <vfprintf+0x11c>
    1930:	f7 01       	movw	r30, r14
    1932:	93 fd       	sbrc	r25, 3
    1934:	85 91       	lpm	r24, Z+
    1936:	93 ff       	sbrs	r25, 3
    1938:	81 91       	ld	r24, Z+
    193a:	7f 01       	movw	r14, r30
    193c:	81 11       	cpse	r24, r1
    193e:	b3 cf       	rjmp	.-154    	; 0x18a6 <vfprintf+0x82>
    1940:	98 2f       	mov	r25, r24
    1942:	9f 7d       	andi	r25, 0xDF	; 223
    1944:	95 54       	subi	r25, 0x45	; 69
    1946:	93 30       	cpi	r25, 0x03	; 3
    1948:	28 f4       	brcc	.+10     	; 0x1954 <vfprintf+0x130>
    194a:	0c 5f       	subi	r16, 0xFC	; 252
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	9f e3       	ldi	r25, 0x3F	; 63
    1950:	99 83       	std	Y+1, r25	; 0x01
    1952:	0d c0       	rjmp	.+26     	; 0x196e <vfprintf+0x14a>
    1954:	83 36       	cpi	r24, 0x63	; 99
    1956:	31 f0       	breq	.+12     	; 0x1964 <vfprintf+0x140>
    1958:	83 37       	cpi	r24, 0x73	; 115
    195a:	71 f0       	breq	.+28     	; 0x1978 <vfprintf+0x154>
    195c:	83 35       	cpi	r24, 0x53	; 83
    195e:	09 f0       	breq	.+2      	; 0x1962 <vfprintf+0x13e>
    1960:	55 c0       	rjmp	.+170    	; 0x1a0c <vfprintf+0x1e8>
    1962:	20 c0       	rjmp	.+64     	; 0x19a4 <vfprintf+0x180>
    1964:	f8 01       	movw	r30, r16
    1966:	80 81       	ld	r24, Z
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	0e 5f       	subi	r16, 0xFE	; 254
    196c:	1f 4f       	sbci	r17, 0xFF	; 255
    196e:	88 24       	eor	r8, r8
    1970:	83 94       	inc	r8
    1972:	91 2c       	mov	r9, r1
    1974:	53 01       	movw	r10, r6
    1976:	12 c0       	rjmp	.+36     	; 0x199c <vfprintf+0x178>
    1978:	28 01       	movw	r4, r16
    197a:	f2 e0       	ldi	r31, 0x02	; 2
    197c:	4f 0e       	add	r4, r31
    197e:	51 1c       	adc	r5, r1
    1980:	f8 01       	movw	r30, r16
    1982:	a0 80       	ld	r10, Z
    1984:	b1 80       	ldd	r11, Z+1	; 0x01
    1986:	36 fe       	sbrs	r3, 6
    1988:	03 c0       	rjmp	.+6      	; 0x1990 <vfprintf+0x16c>
    198a:	69 2d       	mov	r22, r9
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <vfprintf+0x170>
    1990:	6f ef       	ldi	r22, 0xFF	; 255
    1992:	7f ef       	ldi	r23, 0xFF	; 255
    1994:	c5 01       	movw	r24, r10
    1996:	4e d1       	rcall	.+668    	; 0x1c34 <strnlen>
    1998:	4c 01       	movw	r8, r24
    199a:	82 01       	movw	r16, r4
    199c:	f3 2d       	mov	r31, r3
    199e:	ff 77       	andi	r31, 0x7F	; 127
    19a0:	3f 2e       	mov	r3, r31
    19a2:	15 c0       	rjmp	.+42     	; 0x19ce <vfprintf+0x1aa>
    19a4:	28 01       	movw	r4, r16
    19a6:	22 e0       	ldi	r18, 0x02	; 2
    19a8:	42 0e       	add	r4, r18
    19aa:	51 1c       	adc	r5, r1
    19ac:	f8 01       	movw	r30, r16
    19ae:	a0 80       	ld	r10, Z
    19b0:	b1 80       	ldd	r11, Z+1	; 0x01
    19b2:	36 fe       	sbrs	r3, 6
    19b4:	03 c0       	rjmp	.+6      	; 0x19bc <vfprintf+0x198>
    19b6:	69 2d       	mov	r22, r9
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <vfprintf+0x19c>
    19bc:	6f ef       	ldi	r22, 0xFF	; 255
    19be:	7f ef       	ldi	r23, 0xFF	; 255
    19c0:	c5 01       	movw	r24, r10
    19c2:	2d d1       	rcall	.+602    	; 0x1c1e <strnlen_P>
    19c4:	4c 01       	movw	r8, r24
    19c6:	f3 2d       	mov	r31, r3
    19c8:	f0 68       	ori	r31, 0x80	; 128
    19ca:	3f 2e       	mov	r3, r31
    19cc:	82 01       	movw	r16, r4
    19ce:	33 fc       	sbrc	r3, 3
    19d0:	19 c0       	rjmp	.+50     	; 0x1a04 <vfprintf+0x1e0>
    19d2:	82 2d       	mov	r24, r2
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	88 16       	cp	r8, r24
    19d8:	99 06       	cpc	r9, r25
    19da:	a0 f4       	brcc	.+40     	; 0x1a04 <vfprintf+0x1e0>
    19dc:	b6 01       	movw	r22, r12
    19de:	80 e2       	ldi	r24, 0x20	; 32
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	33 d1       	rcall	.+614    	; 0x1c4a <fputc>
    19e4:	2a 94       	dec	r2
    19e6:	f5 cf       	rjmp	.-22     	; 0x19d2 <vfprintf+0x1ae>
    19e8:	f5 01       	movw	r30, r10
    19ea:	37 fc       	sbrc	r3, 7
    19ec:	85 91       	lpm	r24, Z+
    19ee:	37 fe       	sbrs	r3, 7
    19f0:	81 91       	ld	r24, Z+
    19f2:	5f 01       	movw	r10, r30
    19f4:	b6 01       	movw	r22, r12
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	28 d1       	rcall	.+592    	; 0x1c4a <fputc>
    19fa:	21 10       	cpse	r2, r1
    19fc:	2a 94       	dec	r2
    19fe:	21 e0       	ldi	r18, 0x01	; 1
    1a00:	82 1a       	sub	r8, r18
    1a02:	91 08       	sbc	r9, r1
    1a04:	81 14       	cp	r8, r1
    1a06:	91 04       	cpc	r9, r1
    1a08:	79 f7       	brne	.-34     	; 0x19e8 <vfprintf+0x1c4>
    1a0a:	e1 c0       	rjmp	.+450    	; 0x1bce <vfprintf+0x3aa>
    1a0c:	84 36       	cpi	r24, 0x64	; 100
    1a0e:	11 f0       	breq	.+4      	; 0x1a14 <vfprintf+0x1f0>
    1a10:	89 36       	cpi	r24, 0x69	; 105
    1a12:	39 f5       	brne	.+78     	; 0x1a62 <vfprintf+0x23e>
    1a14:	f8 01       	movw	r30, r16
    1a16:	37 fe       	sbrs	r3, 7
    1a18:	07 c0       	rjmp	.+14     	; 0x1a28 <vfprintf+0x204>
    1a1a:	60 81       	ld	r22, Z
    1a1c:	71 81       	ldd	r23, Z+1	; 0x01
    1a1e:	82 81       	ldd	r24, Z+2	; 0x02
    1a20:	93 81       	ldd	r25, Z+3	; 0x03
    1a22:	0c 5f       	subi	r16, 0xFC	; 252
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	08 c0       	rjmp	.+16     	; 0x1a38 <vfprintf+0x214>
    1a28:	60 81       	ld	r22, Z
    1a2a:	71 81       	ldd	r23, Z+1	; 0x01
    1a2c:	07 2e       	mov	r0, r23
    1a2e:	00 0c       	add	r0, r0
    1a30:	88 0b       	sbc	r24, r24
    1a32:	99 0b       	sbc	r25, r25
    1a34:	0e 5f       	subi	r16, 0xFE	; 254
    1a36:	1f 4f       	sbci	r17, 0xFF	; 255
    1a38:	f3 2d       	mov	r31, r3
    1a3a:	ff 76       	andi	r31, 0x6F	; 111
    1a3c:	3f 2e       	mov	r3, r31
    1a3e:	97 ff       	sbrs	r25, 7
    1a40:	09 c0       	rjmp	.+18     	; 0x1a54 <vfprintf+0x230>
    1a42:	90 95       	com	r25
    1a44:	80 95       	com	r24
    1a46:	70 95       	com	r23
    1a48:	61 95       	neg	r22
    1a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a50:	f0 68       	ori	r31, 0x80	; 128
    1a52:	3f 2e       	mov	r3, r31
    1a54:	2a e0       	ldi	r18, 0x0A	; 10
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	a3 01       	movw	r20, r6
    1a5a:	33 d1       	rcall	.+614    	; 0x1cc2 <__ultoa_invert>
    1a5c:	88 2e       	mov	r8, r24
    1a5e:	86 18       	sub	r8, r6
    1a60:	44 c0       	rjmp	.+136    	; 0x1aea <vfprintf+0x2c6>
    1a62:	85 37       	cpi	r24, 0x75	; 117
    1a64:	31 f4       	brne	.+12     	; 0x1a72 <vfprintf+0x24e>
    1a66:	23 2d       	mov	r18, r3
    1a68:	2f 7e       	andi	r18, 0xEF	; 239
    1a6a:	b2 2e       	mov	r11, r18
    1a6c:	2a e0       	ldi	r18, 0x0A	; 10
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	25 c0       	rjmp	.+74     	; 0x1abc <vfprintf+0x298>
    1a72:	93 2d       	mov	r25, r3
    1a74:	99 7f       	andi	r25, 0xF9	; 249
    1a76:	b9 2e       	mov	r11, r25
    1a78:	8f 36       	cpi	r24, 0x6F	; 111
    1a7a:	c1 f0       	breq	.+48     	; 0x1aac <vfprintf+0x288>
    1a7c:	18 f4       	brcc	.+6      	; 0x1a84 <vfprintf+0x260>
    1a7e:	88 35       	cpi	r24, 0x58	; 88
    1a80:	79 f0       	breq	.+30     	; 0x1aa0 <vfprintf+0x27c>
    1a82:	ae c0       	rjmp	.+348    	; 0x1be0 <vfprintf+0x3bc>
    1a84:	80 37       	cpi	r24, 0x70	; 112
    1a86:	19 f0       	breq	.+6      	; 0x1a8e <vfprintf+0x26a>
    1a88:	88 37       	cpi	r24, 0x78	; 120
    1a8a:	21 f0       	breq	.+8      	; 0x1a94 <vfprintf+0x270>
    1a8c:	a9 c0       	rjmp	.+338    	; 0x1be0 <vfprintf+0x3bc>
    1a8e:	e9 2f       	mov	r30, r25
    1a90:	e0 61       	ori	r30, 0x10	; 16
    1a92:	be 2e       	mov	r11, r30
    1a94:	b4 fe       	sbrs	r11, 4
    1a96:	0d c0       	rjmp	.+26     	; 0x1ab2 <vfprintf+0x28e>
    1a98:	fb 2d       	mov	r31, r11
    1a9a:	f4 60       	ori	r31, 0x04	; 4
    1a9c:	bf 2e       	mov	r11, r31
    1a9e:	09 c0       	rjmp	.+18     	; 0x1ab2 <vfprintf+0x28e>
    1aa0:	34 fe       	sbrs	r3, 4
    1aa2:	0a c0       	rjmp	.+20     	; 0x1ab8 <vfprintf+0x294>
    1aa4:	29 2f       	mov	r18, r25
    1aa6:	26 60       	ori	r18, 0x06	; 6
    1aa8:	b2 2e       	mov	r11, r18
    1aaa:	06 c0       	rjmp	.+12     	; 0x1ab8 <vfprintf+0x294>
    1aac:	28 e0       	ldi	r18, 0x08	; 8
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	05 c0       	rjmp	.+10     	; 0x1abc <vfprintf+0x298>
    1ab2:	20 e1       	ldi	r18, 0x10	; 16
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <vfprintf+0x298>
    1ab8:	20 e1       	ldi	r18, 0x10	; 16
    1aba:	32 e0       	ldi	r19, 0x02	; 2
    1abc:	f8 01       	movw	r30, r16
    1abe:	b7 fe       	sbrs	r11, 7
    1ac0:	07 c0       	rjmp	.+14     	; 0x1ad0 <vfprintf+0x2ac>
    1ac2:	60 81       	ld	r22, Z
    1ac4:	71 81       	ldd	r23, Z+1	; 0x01
    1ac6:	82 81       	ldd	r24, Z+2	; 0x02
    1ac8:	93 81       	ldd	r25, Z+3	; 0x03
    1aca:	0c 5f       	subi	r16, 0xFC	; 252
    1acc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ace:	06 c0       	rjmp	.+12     	; 0x1adc <vfprintf+0x2b8>
    1ad0:	60 81       	ld	r22, Z
    1ad2:	71 81       	ldd	r23, Z+1	; 0x01
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	0e 5f       	subi	r16, 0xFE	; 254
    1ada:	1f 4f       	sbci	r17, 0xFF	; 255
    1adc:	a3 01       	movw	r20, r6
    1ade:	f1 d0       	rcall	.+482    	; 0x1cc2 <__ultoa_invert>
    1ae0:	88 2e       	mov	r8, r24
    1ae2:	86 18       	sub	r8, r6
    1ae4:	fb 2d       	mov	r31, r11
    1ae6:	ff 77       	andi	r31, 0x7F	; 127
    1ae8:	3f 2e       	mov	r3, r31
    1aea:	36 fe       	sbrs	r3, 6
    1aec:	0d c0       	rjmp	.+26     	; 0x1b08 <vfprintf+0x2e4>
    1aee:	23 2d       	mov	r18, r3
    1af0:	2e 7f       	andi	r18, 0xFE	; 254
    1af2:	a2 2e       	mov	r10, r18
    1af4:	89 14       	cp	r8, r9
    1af6:	58 f4       	brcc	.+22     	; 0x1b0e <vfprintf+0x2ea>
    1af8:	34 fe       	sbrs	r3, 4
    1afa:	0b c0       	rjmp	.+22     	; 0x1b12 <vfprintf+0x2ee>
    1afc:	32 fc       	sbrc	r3, 2
    1afe:	09 c0       	rjmp	.+18     	; 0x1b12 <vfprintf+0x2ee>
    1b00:	83 2d       	mov	r24, r3
    1b02:	8e 7e       	andi	r24, 0xEE	; 238
    1b04:	a8 2e       	mov	r10, r24
    1b06:	05 c0       	rjmp	.+10     	; 0x1b12 <vfprintf+0x2ee>
    1b08:	b8 2c       	mov	r11, r8
    1b0a:	a3 2c       	mov	r10, r3
    1b0c:	03 c0       	rjmp	.+6      	; 0x1b14 <vfprintf+0x2f0>
    1b0e:	b8 2c       	mov	r11, r8
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <vfprintf+0x2f0>
    1b12:	b9 2c       	mov	r11, r9
    1b14:	a4 fe       	sbrs	r10, 4
    1b16:	0f c0       	rjmp	.+30     	; 0x1b36 <vfprintf+0x312>
    1b18:	fe 01       	movw	r30, r28
    1b1a:	e8 0d       	add	r30, r8
    1b1c:	f1 1d       	adc	r31, r1
    1b1e:	80 81       	ld	r24, Z
    1b20:	80 33       	cpi	r24, 0x30	; 48
    1b22:	21 f4       	brne	.+8      	; 0x1b2c <vfprintf+0x308>
    1b24:	9a 2d       	mov	r25, r10
    1b26:	99 7e       	andi	r25, 0xE9	; 233
    1b28:	a9 2e       	mov	r10, r25
    1b2a:	09 c0       	rjmp	.+18     	; 0x1b3e <vfprintf+0x31a>
    1b2c:	a2 fe       	sbrs	r10, 2
    1b2e:	06 c0       	rjmp	.+12     	; 0x1b3c <vfprintf+0x318>
    1b30:	b3 94       	inc	r11
    1b32:	b3 94       	inc	r11
    1b34:	04 c0       	rjmp	.+8      	; 0x1b3e <vfprintf+0x31a>
    1b36:	8a 2d       	mov	r24, r10
    1b38:	86 78       	andi	r24, 0x86	; 134
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <vfprintf+0x31a>
    1b3c:	b3 94       	inc	r11
    1b3e:	a3 fc       	sbrc	r10, 3
    1b40:	10 c0       	rjmp	.+32     	; 0x1b62 <vfprintf+0x33e>
    1b42:	a0 fe       	sbrs	r10, 0
    1b44:	06 c0       	rjmp	.+12     	; 0x1b52 <vfprintf+0x32e>
    1b46:	b2 14       	cp	r11, r2
    1b48:	80 f4       	brcc	.+32     	; 0x1b6a <vfprintf+0x346>
    1b4a:	28 0c       	add	r2, r8
    1b4c:	92 2c       	mov	r9, r2
    1b4e:	9b 18       	sub	r9, r11
    1b50:	0d c0       	rjmp	.+26     	; 0x1b6c <vfprintf+0x348>
    1b52:	b2 14       	cp	r11, r2
    1b54:	58 f4       	brcc	.+22     	; 0x1b6c <vfprintf+0x348>
    1b56:	b6 01       	movw	r22, r12
    1b58:	80 e2       	ldi	r24, 0x20	; 32
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	76 d0       	rcall	.+236    	; 0x1c4a <fputc>
    1b5e:	b3 94       	inc	r11
    1b60:	f8 cf       	rjmp	.-16     	; 0x1b52 <vfprintf+0x32e>
    1b62:	b2 14       	cp	r11, r2
    1b64:	18 f4       	brcc	.+6      	; 0x1b6c <vfprintf+0x348>
    1b66:	2b 18       	sub	r2, r11
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <vfprintf+0x34a>
    1b6a:	98 2c       	mov	r9, r8
    1b6c:	21 2c       	mov	r2, r1
    1b6e:	a4 fe       	sbrs	r10, 4
    1b70:	0f c0       	rjmp	.+30     	; 0x1b90 <vfprintf+0x36c>
    1b72:	b6 01       	movw	r22, r12
    1b74:	80 e3       	ldi	r24, 0x30	; 48
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	68 d0       	rcall	.+208    	; 0x1c4a <fputc>
    1b7a:	a2 fe       	sbrs	r10, 2
    1b7c:	16 c0       	rjmp	.+44     	; 0x1baa <vfprintf+0x386>
    1b7e:	a1 fc       	sbrc	r10, 1
    1b80:	03 c0       	rjmp	.+6      	; 0x1b88 <vfprintf+0x364>
    1b82:	88 e7       	ldi	r24, 0x78	; 120
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <vfprintf+0x368>
    1b88:	88 e5       	ldi	r24, 0x58	; 88
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	b6 01       	movw	r22, r12
    1b8e:	0c c0       	rjmp	.+24     	; 0x1ba8 <vfprintf+0x384>
    1b90:	8a 2d       	mov	r24, r10
    1b92:	86 78       	andi	r24, 0x86	; 134
    1b94:	51 f0       	breq	.+20     	; 0x1baa <vfprintf+0x386>
    1b96:	a1 fe       	sbrs	r10, 1
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <vfprintf+0x37a>
    1b9a:	8b e2       	ldi	r24, 0x2B	; 43
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <vfprintf+0x37c>
    1b9e:	80 e2       	ldi	r24, 0x20	; 32
    1ba0:	a7 fc       	sbrc	r10, 7
    1ba2:	8d e2       	ldi	r24, 0x2D	; 45
    1ba4:	b6 01       	movw	r22, r12
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	50 d0       	rcall	.+160    	; 0x1c4a <fputc>
    1baa:	89 14       	cp	r8, r9
    1bac:	30 f4       	brcc	.+12     	; 0x1bba <vfprintf+0x396>
    1bae:	b6 01       	movw	r22, r12
    1bb0:	80 e3       	ldi	r24, 0x30	; 48
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	4a d0       	rcall	.+148    	; 0x1c4a <fputc>
    1bb6:	9a 94       	dec	r9
    1bb8:	f8 cf       	rjmp	.-16     	; 0x1baa <vfprintf+0x386>
    1bba:	8a 94       	dec	r8
    1bbc:	f3 01       	movw	r30, r6
    1bbe:	e8 0d       	add	r30, r8
    1bc0:	f1 1d       	adc	r31, r1
    1bc2:	80 81       	ld	r24, Z
    1bc4:	b6 01       	movw	r22, r12
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	40 d0       	rcall	.+128    	; 0x1c4a <fputc>
    1bca:	81 10       	cpse	r8, r1
    1bcc:	f6 cf       	rjmp	.-20     	; 0x1bba <vfprintf+0x396>
    1bce:	22 20       	and	r2, r2
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <vfprintf+0x3b0>
    1bd2:	4e ce       	rjmp	.-868    	; 0x1870 <vfprintf+0x4c>
    1bd4:	b6 01       	movw	r22, r12
    1bd6:	80 e2       	ldi	r24, 0x20	; 32
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	37 d0       	rcall	.+110    	; 0x1c4a <fputc>
    1bdc:	2a 94       	dec	r2
    1bde:	f7 cf       	rjmp	.-18     	; 0x1bce <vfprintf+0x3aa>
    1be0:	f6 01       	movw	r30, r12
    1be2:	86 81       	ldd	r24, Z+6	; 0x06
    1be4:	97 81       	ldd	r25, Z+7	; 0x07
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <vfprintf+0x3c8>
    1be8:	8f ef       	ldi	r24, 0xFF	; 255
    1bea:	9f ef       	ldi	r25, 0xFF	; 255
    1bec:	2b 96       	adiw	r28, 0x0b	; 11
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	ff 90       	pop	r15
    1c02:	ef 90       	pop	r14
    1c04:	df 90       	pop	r13
    1c06:	cf 90       	pop	r12
    1c08:	bf 90       	pop	r11
    1c0a:	af 90       	pop	r10
    1c0c:	9f 90       	pop	r9
    1c0e:	8f 90       	pop	r8
    1c10:	7f 90       	pop	r7
    1c12:	6f 90       	pop	r6
    1c14:	5f 90       	pop	r5
    1c16:	4f 90       	pop	r4
    1c18:	3f 90       	pop	r3
    1c1a:	2f 90       	pop	r2
    1c1c:	08 95       	ret

00001c1e <strnlen_P>:
    1c1e:	fc 01       	movw	r30, r24
    1c20:	05 90       	lpm	r0, Z+
    1c22:	61 50       	subi	r22, 0x01	; 1
    1c24:	70 40       	sbci	r23, 0x00	; 0
    1c26:	01 10       	cpse	r0, r1
    1c28:	d8 f7       	brcc	.-10     	; 0x1c20 <strnlen_P+0x2>
    1c2a:	80 95       	com	r24
    1c2c:	90 95       	com	r25
    1c2e:	8e 0f       	add	r24, r30
    1c30:	9f 1f       	adc	r25, r31
    1c32:	08 95       	ret

00001c34 <strnlen>:
    1c34:	fc 01       	movw	r30, r24
    1c36:	61 50       	subi	r22, 0x01	; 1
    1c38:	70 40       	sbci	r23, 0x00	; 0
    1c3a:	01 90       	ld	r0, Z+
    1c3c:	01 10       	cpse	r0, r1
    1c3e:	d8 f7       	brcc	.-10     	; 0x1c36 <strnlen+0x2>
    1c40:	80 95       	com	r24
    1c42:	90 95       	com	r25
    1c44:	8e 0f       	add	r24, r30
    1c46:	9f 1f       	adc	r25, r31
    1c48:	08 95       	ret

00001c4a <fputc>:
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	fb 01       	movw	r30, r22
    1c54:	23 81       	ldd	r18, Z+3	; 0x03
    1c56:	21 fd       	sbrc	r18, 1
    1c58:	03 c0       	rjmp	.+6      	; 0x1c60 <fputc+0x16>
    1c5a:	8f ef       	ldi	r24, 0xFF	; 255
    1c5c:	9f ef       	ldi	r25, 0xFF	; 255
    1c5e:	2c c0       	rjmp	.+88     	; 0x1cb8 <fputc+0x6e>
    1c60:	22 ff       	sbrs	r18, 2
    1c62:	16 c0       	rjmp	.+44     	; 0x1c90 <fputc+0x46>
    1c64:	46 81       	ldd	r20, Z+6	; 0x06
    1c66:	57 81       	ldd	r21, Z+7	; 0x07
    1c68:	24 81       	ldd	r18, Z+4	; 0x04
    1c6a:	35 81       	ldd	r19, Z+5	; 0x05
    1c6c:	42 17       	cp	r20, r18
    1c6e:	53 07       	cpc	r21, r19
    1c70:	44 f4       	brge	.+16     	; 0x1c82 <fputc+0x38>
    1c72:	a0 81       	ld	r26, Z
    1c74:	b1 81       	ldd	r27, Z+1	; 0x01
    1c76:	9d 01       	movw	r18, r26
    1c78:	2f 5f       	subi	r18, 0xFF	; 255
    1c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7c:	31 83       	std	Z+1, r19	; 0x01
    1c7e:	20 83       	st	Z, r18
    1c80:	8c 93       	st	X, r24
    1c82:	26 81       	ldd	r18, Z+6	; 0x06
    1c84:	37 81       	ldd	r19, Z+7	; 0x07
    1c86:	2f 5f       	subi	r18, 0xFF	; 255
    1c88:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8a:	37 83       	std	Z+7, r19	; 0x07
    1c8c:	26 83       	std	Z+6, r18	; 0x06
    1c8e:	14 c0       	rjmp	.+40     	; 0x1cb8 <fputc+0x6e>
    1c90:	8b 01       	movw	r16, r22
    1c92:	ec 01       	movw	r28, r24
    1c94:	fb 01       	movw	r30, r22
    1c96:	00 84       	ldd	r0, Z+8	; 0x08
    1c98:	f1 85       	ldd	r31, Z+9	; 0x09
    1c9a:	e0 2d       	mov	r30, r0
    1c9c:	09 95       	icall
    1c9e:	89 2b       	or	r24, r25
    1ca0:	e1 f6       	brne	.-72     	; 0x1c5a <fputc+0x10>
    1ca2:	d8 01       	movw	r26, r16
    1ca4:	16 96       	adiw	r26, 0x06	; 6
    1ca6:	8d 91       	ld	r24, X+
    1ca8:	9c 91       	ld	r25, X
    1caa:	17 97       	sbiw	r26, 0x07	; 7
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	17 96       	adiw	r26, 0x07	; 7
    1cb0:	9c 93       	st	X, r25
    1cb2:	8e 93       	st	-X, r24
    1cb4:	16 97       	sbiw	r26, 0x06	; 6
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	08 95       	ret

00001cc2 <__ultoa_invert>:
    1cc2:	fa 01       	movw	r30, r20
    1cc4:	aa 27       	eor	r26, r26
    1cc6:	28 30       	cpi	r18, 0x08	; 8
    1cc8:	51 f1       	breq	.+84     	; 0x1d1e <__ultoa_invert+0x5c>
    1cca:	20 31       	cpi	r18, 0x10	; 16
    1ccc:	81 f1       	breq	.+96     	; 0x1d2e <__ultoa_invert+0x6c>
    1cce:	e8 94       	clt
    1cd0:	6f 93       	push	r22
    1cd2:	6e 7f       	andi	r22, 0xFE	; 254
    1cd4:	6e 5f       	subi	r22, 0xFE	; 254
    1cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cda:	9f 4f       	sbci	r25, 0xFF	; 255
    1cdc:	af 4f       	sbci	r26, 0xFF	; 255
    1cde:	b1 e0       	ldi	r27, 0x01	; 1
    1ce0:	3e d0       	rcall	.+124    	; 0x1d5e <__ultoa_invert+0x9c>
    1ce2:	b4 e0       	ldi	r27, 0x04	; 4
    1ce4:	3c d0       	rcall	.+120    	; 0x1d5e <__ultoa_invert+0x9c>
    1ce6:	67 0f       	add	r22, r23
    1ce8:	78 1f       	adc	r23, r24
    1cea:	89 1f       	adc	r24, r25
    1cec:	9a 1f       	adc	r25, r26
    1cee:	a1 1d       	adc	r26, r1
    1cf0:	68 0f       	add	r22, r24
    1cf2:	79 1f       	adc	r23, r25
    1cf4:	8a 1f       	adc	r24, r26
    1cf6:	91 1d       	adc	r25, r1
    1cf8:	a1 1d       	adc	r26, r1
    1cfa:	6a 0f       	add	r22, r26
    1cfc:	71 1d       	adc	r23, r1
    1cfe:	81 1d       	adc	r24, r1
    1d00:	91 1d       	adc	r25, r1
    1d02:	a1 1d       	adc	r26, r1
    1d04:	20 d0       	rcall	.+64     	; 0x1d46 <__ultoa_invert+0x84>
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <__ultoa_invert+0x48>
    1d08:	68 94       	set
    1d0a:	3f 91       	pop	r19
    1d0c:	2a e0       	ldi	r18, 0x0A	; 10
    1d0e:	26 9f       	mul	r18, r22
    1d10:	11 24       	eor	r1, r1
    1d12:	30 19       	sub	r19, r0
    1d14:	30 5d       	subi	r19, 0xD0	; 208
    1d16:	31 93       	st	Z+, r19
    1d18:	de f6       	brtc	.-74     	; 0x1cd0 <__ultoa_invert+0xe>
    1d1a:	cf 01       	movw	r24, r30
    1d1c:	08 95       	ret
    1d1e:	46 2f       	mov	r20, r22
    1d20:	47 70       	andi	r20, 0x07	; 7
    1d22:	40 5d       	subi	r20, 0xD0	; 208
    1d24:	41 93       	st	Z+, r20
    1d26:	b3 e0       	ldi	r27, 0x03	; 3
    1d28:	0f d0       	rcall	.+30     	; 0x1d48 <__ultoa_invert+0x86>
    1d2a:	c9 f7       	brne	.-14     	; 0x1d1e <__ultoa_invert+0x5c>
    1d2c:	f6 cf       	rjmp	.-20     	; 0x1d1a <__ultoa_invert+0x58>
    1d2e:	46 2f       	mov	r20, r22
    1d30:	4f 70       	andi	r20, 0x0F	; 15
    1d32:	40 5d       	subi	r20, 0xD0	; 208
    1d34:	4a 33       	cpi	r20, 0x3A	; 58
    1d36:	18 f0       	brcs	.+6      	; 0x1d3e <__ultoa_invert+0x7c>
    1d38:	49 5d       	subi	r20, 0xD9	; 217
    1d3a:	31 fd       	sbrc	r19, 1
    1d3c:	40 52       	subi	r20, 0x20	; 32
    1d3e:	41 93       	st	Z+, r20
    1d40:	02 d0       	rcall	.+4      	; 0x1d46 <__ultoa_invert+0x84>
    1d42:	a9 f7       	brne	.-22     	; 0x1d2e <__ultoa_invert+0x6c>
    1d44:	ea cf       	rjmp	.-44     	; 0x1d1a <__ultoa_invert+0x58>
    1d46:	b4 e0       	ldi	r27, 0x04	; 4
    1d48:	a6 95       	lsr	r26
    1d4a:	97 95       	ror	r25
    1d4c:	87 95       	ror	r24
    1d4e:	77 95       	ror	r23
    1d50:	67 95       	ror	r22
    1d52:	ba 95       	dec	r27
    1d54:	c9 f7       	brne	.-14     	; 0x1d48 <__ultoa_invert+0x86>
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	61 05       	cpc	r22, r1
    1d5a:	71 05       	cpc	r23, r1
    1d5c:	08 95       	ret
    1d5e:	9b 01       	movw	r18, r22
    1d60:	ac 01       	movw	r20, r24
    1d62:	0a 2e       	mov	r0, r26
    1d64:	06 94       	lsr	r0
    1d66:	57 95       	ror	r21
    1d68:	47 95       	ror	r20
    1d6a:	37 95       	ror	r19
    1d6c:	27 95       	ror	r18
    1d6e:	ba 95       	dec	r27
    1d70:	c9 f7       	brne	.-14     	; 0x1d64 <__ultoa_invert+0xa2>
    1d72:	62 0f       	add	r22, r18
    1d74:	73 1f       	adc	r23, r19
    1d76:	84 1f       	adc	r24, r20
    1d78:	95 1f       	adc	r25, r21
    1d7a:	a0 1d       	adc	r26, r0
    1d7c:	08 95       	ret

00001d7e <_exit>:
    1d7e:	f8 94       	cli

00001d80 <__stop_program>:
    1d80:	ff cf       	rjmp	.-2      	; 0x1d80 <__stop_program>
