
09_WASHING_MACHINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00001798  0000182c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001798  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000698  00800146  00800146  00001872  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bd8  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001188  00000000  00000000  000036a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001069  00000000  00000000  00004828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  00005894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086a  00000000  00000000  00005cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008de  00000000  00000000  0000652a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006e08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	a3 c6       	rjmp	.+3398   	; 0xd5c <__vector_5>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9d c4       	rjmp	.+2362   	; 0x97c <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	63 c5       	rjmp	.+2758   	; 0xb10 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	dd c5       	rjmp	.+3002   	; 0xc34 <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e9       	ldi	r30, 0x98	; 152
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 34       	cpi	r26, 0x46	; 70
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a6 e4       	ldi	r26, 0x46	; 70
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 3d       	cpi	r26, 0xDE	; 222
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	b2 d4       	rcall	.+2404   	; 0xa28 <main>
      c4:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <init_button>:
// 00001111
// DDRD &= 0x0f; // 4, 5, 6, 7을 input. PORTD.4 가독성이 떨어진다.

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN | 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN);
      ca:	81 b3       	in	r24, 0x11	; 17
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	81 bb       	out	0x11, r24	; 17
      d0:	08 95       	ret

000000d2 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
      d2:	20 b3       	in	r18, 0x10	; 16
      d4:	42 2f       	mov	r20, r18
      d6:	50 e0       	ldi	r21, 0x00	; 0
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <get_button+0x10>
      de:	22 0f       	add	r18, r18
      e0:	33 1f       	adc	r19, r19
      e2:	6a 95       	dec	r22
      e4:	e2 f7       	brpl	.-8      	; 0xde <get_button+0xc>
      e6:	24 23       	and	r18, r20
      e8:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
      ea:	21 15       	cp	r18, r1
      ec:	31 05       	cpc	r19, r1
      ee:	b9 f0       	breq	.+46     	; 0x11e <get_button+0x4c>
      f0:	fc 01       	movw	r30, r24
      f2:	ea 5b       	subi	r30, 0xBA	; 186
      f4:	fe 4f       	sbci	r31, 0xFE	; 254
      f6:	40 81       	ld	r20, Z
      f8:	41 11       	cpse	r20, r1
      fa:	11 c0       	rjmp	.+34     	; 0x11e <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fc:	2f ef       	ldi	r18, 0xFF	; 255
      fe:	3d ee       	ldi	r19, 0xED	; 237
     100:	42 e0       	ldi	r20, 0x02	; 2
     102:	21 50       	subi	r18, 0x01	; 1
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	e1 f7       	brne	.-8      	; 0x102 <get_button+0x30>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <get_button+0x3a>
     10c:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     10e:	fc 01       	movw	r30, r24
     110:	ea 5b       	subi	r30, 0xBA	; 186
     112:	fe 4f       	sbci	r31, 0xFE	; 254
     114:	21 e0       	ldi	r18, 0x01	; 1
     116:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     11e:	fc 01       	movw	r30, r24
     120:	ea 5b       	subi	r30, 0xBA	; 186
     122:	fe 4f       	sbci	r31, 0xFE	; 254
     124:	40 81       	ld	r20, Z
     126:	41 30       	cpi	r20, 0x01	; 1
     128:	91 f4       	brne	.+36     	; 0x14e <get_button+0x7c>
     12a:	23 2b       	or	r18, r19
     12c:	99 f4       	brne	.+38     	; 0x154 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     12e:	fc 01       	movw	r30, r24
     130:	ea 5b       	subi	r30, 0xBA	; 186
     132:	fe 4f       	sbci	r31, 0xFE	; 254
     134:	10 82       	st	Z, r1
     136:	8f ef       	ldi	r24, 0xFF	; 255
     138:	9d ee       	ldi	r25, 0xED	; 237
     13a:	22 e0       	ldi	r18, 0x02	; 2
     13c:	81 50       	subi	r24, 0x01	; 1
     13e:	90 40       	sbci	r25, 0x00	; 0
     140:	20 40       	sbci	r18, 0x00	; 0
     142:	e1 f7       	brne	.-8      	; 0x13c <get_button+0x6a>
     144:	00 c0       	rjmp	.+0      	; 0x146 <get_button+0x74>
     146:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	08 95       	ret
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	08 95       	ret

0000015a <fast_wash>:
	
}

void fast_wash(void) // 쾌속 세탁
{
	sec_count = 2;
     15a:	82 e0       	ldi	r24, 0x02	; 2
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	a0 e0       	ldi	r26, 0x00	; 0
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     166:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     16a:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     16e:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
     172:	08 95       	ret

00000174 <rinse_and_spindry>:
	
}

void rinse_and_spindry(void) // 헹굼 + 탈수
{
	sec_count = 3;
     174:	83 e0       	ldi	r24, 0x03	; 3
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     180:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     184:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     188:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
     18c:	08 95       	ret

0000018e <only_spindry>:
}

void only_spindry(void) // 탈수
{
	sec_count = 4;
     18e:	84 e0       	ldi	r24, 0x04	; 4
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	a0 e0       	ldi	r26, 0x00	; 0
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     19a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     19e:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     1a2:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
     1a6:	08 95       	ret

000001a8 <main_screen>:
}

void main_screen(void) // 메인 화면
{
	PORTA = 0;
     1a8:	1b ba       	out	0x1b, r1	; 27
	sec_count = 754; // 1234 표시 12 * 60 + 34
     1aa:	82 ef       	ldi	r24, 0xF2	; 242
     1ac:	92 e0       	ldi	r25, 0x02	; 2
     1ae:	a0 e0       	ldi	r26, 0x00	; 0
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     1b6:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     1ba:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     1be:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
     1c2:	08 95       	ret

000001c4 <dumy_fanc>:
	sec_count = 0;
	auto_wash_mode = 4;
}

void dumy_fanc()
{
     1c4:	08 95       	ret

000001c6 <init_fnd>:

////////////////////////////////////////////fnd 초기화 및 fnd 표시 함수들 ///////////////////////////////////////////////////////////

void init_fnd(void)
{
	FND_DATA_DDR = 0xff; // 출력모드로 설정
     1c6:	8f ef       	ldi	r24, 0xFF	; 255
     1c8:	84 bb       	out	0x14, r24	; 20

	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 |
     1ca:	87 b3       	in	r24, 0x17	; 23
     1cc:	80 6f       	ori	r24, 0xF0	; 240
     1ce:	87 bb       	out	0x17, r24	; 23
					 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4;

	FND_DATA_PORT = 0x00; // FND를 all off
     1d0:	15 ba       	out	0x15, r1	; 21
     1d2:	08 95       	ret

000001d4 <fnd_display>:
}



void fnd_display(void)
{
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	cd b7       	in	r28, 0x3d	; 61
     1da:	de b7       	in	r29, 0x3e	; 62
     1dc:	2b 97       	sbiw	r28, 0x0b	; 11
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
						//  0      1       2      3      4      5      6     7      8       9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
     1e8:	8b e0       	ldi	r24, 0x0B	; 11
     1ea:	ec e2       	ldi	r30, 0x2C	; 44
     1ec:	f1 e0       	ldi	r31, 0x01	; 1
     1ee:	de 01       	movw	r26, r28
     1f0:	11 96       	adiw	r26, 0x01	; 1
     1f2:	01 90       	ld	r0, Z+
     1f4:	0d 92       	st	X+, r0
     1f6:	8a 95       	dec	r24
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <fnd_display+0x1e>

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     1fa:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <digit_select.1822>
     1fe:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <digit_select.1822+0x1>
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	91 05       	cpc	r25, r1
     206:	19 f1       	breq	.+70     	; 0x24e <fnd_display+0x7a>
     208:	1c f4       	brge	.+6      	; 0x210 <fnd_display+0x3c>
     20a:	89 2b       	or	r24, r25
     20c:	41 f0       	breq	.+16     	; 0x21e <fnd_display+0x4a>
     20e:	94 c0       	rjmp	.+296    	; 0x338 <fnd_display+0x164>
     210:	82 30       	cpi	r24, 0x02	; 2
     212:	91 05       	cpc	r25, r1
     214:	d9 f1       	breq	.+118    	; 0x28c <fnd_display+0xb8>
     216:	03 97       	sbiw	r24, 0x03	; 3
     218:	09 f4       	brne	.+2      	; 0x21c <fnd_display+0x48>
     21a:	70 c0       	rjmp	.+224    	; 0x2fc <fnd_display+0x128>
     21c:	8d c0       	rjmp	.+282    	; 0x338 <fnd_display+0x164>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     21e:	8f e7       	ldi	r24, 0x7F	; 127
     220:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     222:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <sec_count>
     226:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <sec_count+0x1>
     22a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <sec_count+0x2>
     22e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <sec_count+0x3>
     232:	2a e0       	ldi	r18, 0x0A	; 10
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	9b d7       	rcall	.+3894   	; 0x1172 <__udivmodsi4>
     23c:	e1 e0       	ldi	r30, 0x01	; 1
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	ec 0f       	add	r30, r28
     242:	fd 1f       	adc	r31, r29
     244:	e6 0f       	add	r30, r22
     246:	f7 1f       	adc	r31, r23
     248:	80 81       	ld	r24, Z
     24a:	85 bb       	out	0x15, r24	; 21
		break;
     24c:	75 c0       	rjmp	.+234    	; 0x338 <fnd_display+0x164>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     24e:	8f eb       	ldi	r24, 0xBF	; 191
     250:	88 bb       	out	0x18, r24	; 24

		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     252:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <sec_count>
     256:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <sec_count+0x1>
     25a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <sec_count+0x2>
     25e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <sec_count+0x3>
     262:	2a e0       	ldi	r18, 0x0A	; 10
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	50 e0       	ldi	r21, 0x00	; 0
     26a:	83 d7       	rcall	.+3846   	; 0x1172 <__udivmodsi4>
     26c:	ca 01       	movw	r24, r20
     26e:	b9 01       	movw	r22, r18
     270:	26 e0       	ldi	r18, 0x06	; 6
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e0       	ldi	r20, 0x00	; 0
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	7c d7       	rcall	.+3832   	; 0x1172 <__udivmodsi4>
     27a:	e1 e0       	ldi	r30, 0x01	; 1
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	ec 0f       	add	r30, r28
     280:	fd 1f       	adc	r31, r29
     282:	e6 0f       	add	r30, r22
     284:	f7 1f       	adc	r31, r23
     286:	80 81       	ld	r24, Z
     288:	85 bb       	out	0x15, r24	; 21
		break;
     28a:	56 c0       	rjmp	.+172    	; 0x338 <fnd_display+0x164>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     28c:	8f ed       	ldi	r24, 0xDF	; 223
     28e:	88 bb       	out	0x18, r24	; 24
		if (sec_count % 2 == 1)
     290:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <sec_count>
     294:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <sec_count+0x1>
     298:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <sec_count+0x2>
     29c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <sec_count+0x3>
     2a0:	60 ff       	sbrs	r22, 0
     2a2:	17 c0       	rjmp	.+46     	; 0x2d2 <fnd_display+0xfe>
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     2a4:	2c e3       	ldi	r18, 0x3C	; 60
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	40 e0       	ldi	r20, 0x00	; 0
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	62 d7       	rcall	.+3780   	; 0x1172 <__udivmodsi4>
     2ae:	ca 01       	movw	r24, r20
     2b0:	b9 01       	movw	r22, r18
     2b2:	2a e0       	ldi	r18, 0x0A	; 10
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	5b d7       	rcall	.+3766   	; 0x1172 <__udivmodsi4>
     2bc:	e1 e0       	ldi	r30, 0x01	; 1
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	ec 0f       	add	r30, r28
     2c2:	fd 1f       	adc	r31, r29
     2c4:	e6 0f       	add	r30, r22
     2c6:	f7 1f       	adc	r31, r23
     2c8:	90 81       	ld	r25, Z
     2ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     2cc:	89 2b       	or	r24, r25
     2ce:	85 bb       	out	0x15, r24	; 21
     2d0:	33 c0       	rjmp	.+102    	; 0x338 <fnd_display+0x164>
		else
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10]; // 1단위 분
     2d2:	2c e3       	ldi	r18, 0x3C	; 60
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	40 e0       	ldi	r20, 0x00	; 0
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	4b d7       	rcall	.+3734   	; 0x1172 <__udivmodsi4>
     2dc:	ca 01       	movw	r24, r20
     2de:	b9 01       	movw	r22, r18
     2e0:	2a e0       	ldi	r18, 0x0A	; 10
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	44 d7       	rcall	.+3720   	; 0x1172 <__udivmodsi4>
     2ea:	e1 e0       	ldi	r30, 0x01	; 1
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	ec 0f       	add	r30, r28
     2f0:	fd 1f       	adc	r31, r29
     2f2:	e6 0f       	add	r30, r22
     2f4:	f7 1f       	adc	r31, r23
     2f6:	80 81       	ld	r24, Z
     2f8:	85 bb       	out	0x15, r24	; 21
     2fa:	1e c0       	rjmp	.+60     	; 0x338 <fnd_display+0x164>
     2fc:	8f ee       	ldi	r24, 0xEF	; 239
		break;

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     2fe:	88 bb       	out	0x18, r24	; 24
     300:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <sec_count>
		FND_DATA_PORT = fnd_font[sec_count / 600 % 6]; // 10단위 분
     304:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <sec_count+0x1>
     308:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <sec_count+0x2>
     30c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <sec_count+0x3>
     310:	28 e5       	ldi	r18, 0x58	; 88
     312:	32 e0       	ldi	r19, 0x02	; 2
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	2c d7       	rcall	.+3672   	; 0x1172 <__udivmodsi4>
     31a:	ca 01       	movw	r24, r20
     31c:	b9 01       	movw	r22, r18
     31e:	26 e0       	ldi	r18, 0x06	; 6
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	25 d7       	rcall	.+3658   	; 0x1172 <__udivmodsi4>
     328:	e1 e0       	ldi	r30, 0x01	; 1
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	ec 0f       	add	r30, r28
     32e:	fd 1f       	adc	r31, r29
     330:	e6 0f       	add	r30, r22
     332:	f7 1f       	adc	r31, r23
     334:	80 81       	ld	r24, Z
     336:	85 bb       	out	0x15, r24	; 21
     338:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <digit_select.1822>
		break;
	}
	digit_select++;
     33c:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <digit_select.1822+0x1>
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	83 70       	andi	r24, 0x03	; 3
	digit_select %= 4; //다음 표시할 자리수 선택
     344:	90 78       	andi	r25, 0x80	; 128
     346:	99 23       	and	r25, r25
     348:	24 f4       	brge	.+8      	; 0x352 <fnd_display+0x17e>
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	8c 6f       	ori	r24, 0xFC	; 252
     34e:	9f 6f       	ori	r25, 0xFF	; 255
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <digit_select.1822+0x1>
     356:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <digit_select.1822>
     35a:	2b 96       	adiw	r28, 0x0b	; 11
}
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <fnd_main>:
     36c:	8f ef       	ldi	r24, 0xFF	; 255
	dumy_fanc
};

int fnd_main(void)
{
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
     36e:	8a bb       	out	0x1a, r24	; 26
	init_fnd(); // fnd 초기화
     370:	2a df       	rcall	.-428    	; 0x1c6 <init_fnd>
	init_button(); // button 초기화
     372:	ab de       	rcall	.-682    	; 0xca <init_button>
     374:	e1 2c       	mov	r14, r1
	
	int button1_state = 0;
	int button2_state = 0;
	int button3_state = 0;
     376:	f1 2c       	mov	r15, r1
     378:	00 e0       	ldi	r16, 0x00	; 0
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
	init_fnd(); // fnd 초기화
	init_button(); // button 초기화
	
	int button1_state = 0;
	int button2_state = 0;
     37a:	10 e0       	ldi	r17, 0x00	; 0
     37c:	c0 e0       	ldi	r28, 0x00	; 0
{
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
	init_fnd(); // fnd 초기화
	init_button(); // button 초기화
	
	int button1_state = 0;
     37e:	d0 e0       	ldi	r29, 0x00	; 0
     380:	64 e0       	ldi	r22, 0x04	; 4
	int button2_state = 0;
	int button3_state = 0;
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 자동 세탁 모드로 진입
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	a4 de       	rcall	.-696    	; 0xd2 <get_button>
     38a:	89 2b       	or	r24, r25
     38c:	21 f0       	breq	.+8      	; 0x396 <fnd_main+0x2a>
     38e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <select_wash_mode+0x1>
		{
			select_wash_mode = AUTO_WASH;
     392:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <select_wash_mode>
     396:	65 e0       	ldi	r22, 0x05	; 5
		}
		
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1을 받으면 쾌속 세탁 모드로 진입
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	99 de       	rcall	.-718    	; 0xd2 <get_button>
     3a0:	89 2b       	or	r24, r25
     3a2:	b1 f0       	breq	.+44     	; 0x3d0 <fnd_main+0x64>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
		{
			button1_state = !button1_state;
     3a6:	20 97       	sbiw	r28, 0x00	; 0
     3a8:	09 f0       	breq	.+2      	; 0x3ac <fnd_main+0x40>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	cd 2b       	or	r28, r29
			
			if (button1_state) //
     3b0:	41 f4       	brne	.+16     	; 0x3c2 <fnd_main+0x56>
     3b2:	21 e0       	ldi	r18, 0x01	; 1
			{
				select_wash_mode = FAST_WASH;
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     3ba:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     3be:	ec 01       	movw	r28, r24
			select_wash_mode = AUTO_WASH;
		}
		
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1을 받으면 쾌속 세탁 모드로 진입
		{
			button1_state = !button1_state;
     3c0:	07 c0       	rjmp	.+14     	; 0x3d0 <fnd_main+0x64>
     3c2:	24 e0       	ldi	r18, 0x04	; 4
			{
				select_wash_mode = FAST_WASH;
			}
			else //
			{
				select_wash_mode = MAIN_SCREEN;
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     3ca:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     3ce:	ec 01       	movw	r28, r24
			select_wash_mode = AUTO_WASH;
		}
		
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1을 받으면 쾌속 세탁 모드로 진입
		{
			button1_state = !button1_state;
     3d0:	66 e0       	ldi	r22, 0x06	; 6
			{
				select_wash_mode = MAIN_SCREEN;
			}
		}
		
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2를 받으면 헹굼 + 탈수 모드로 진입
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	82 e0       	ldi	r24, 0x02	; 2
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	7c de       	rcall	.-776    	; 0xd2 <get_button>
     3da:	89 2b       	or	r24, r25
     3dc:	b9 f0       	breq	.+46     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3de:	81 e0       	ldi	r24, 0x01	; 1
		{
			button2_state = !button2_state;\
     3e0:	01 15       	cp	r16, r1
     3e2:	11 05       	cpc	r17, r1
     3e4:	09 f0       	breq	.+2      	; 0x3e8 <fnd_main+0x7c>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	01 2b       	or	r16, r17
			
			if (button2_state)
     3ec:	41 f4       	brne	.+16     	; 0x3fe <fnd_main+0x92>
     3ee:	22 e0       	ldi	r18, 0x02	; 2
			{
				select_wash_mode = RINSE_AND_SPINDRY;
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     3f6:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     3fa:	8c 01       	movw	r16, r24
			}
		}
		
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2를 받으면 헹굼 + 탈수 모드로 진입
		{
			button2_state = !button2_state;\
     3fc:	07 c0       	rjmp	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3fe:	24 e0       	ldi	r18, 0x04	; 4
			{
				select_wash_mode = RINSE_AND_SPINDRY;
			}
			else
			{
				select_wash_mode = MAIN_SCREEN;	
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     406:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     40a:	8c 01       	movw	r16, r24
			}
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3을 받으면 탈수 단독 모드로 진입
     40c:	67 e0       	ldi	r22, 0x07	; 7
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	83 e0       	ldi	r24, 0x03	; 3
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	5e de       	rcall	.-836    	; 0xd2 <get_button>
     416:	89 2b       	or	r24, r25
     418:	b9 f0       	breq	.+46     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     41a:	81 e0       	ldi	r24, 0x01	; 1
		{
			button3_state = !button3_state;
     41c:	e1 14       	cp	r14, r1
     41e:	f1 04       	cpc	r15, r1
     420:	09 f0       	breq	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	ef 28       	or	r14, r15
			
			if (button3_state) //
     428:	41 f4       	brne	.+16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     42a:	23 e0       	ldi	r18, 0x03	; 3
			{
				select_wash_mode = ONLY_SPINDRY;
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     432:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     436:	7c 01       	movw	r14, r24
			}
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3을 받으면 탈수 단독 모드로 진입
		{
			button3_state = !button3_state;
     438:	07 c0       	rjmp	.+14     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     43a:	24 e0       	ldi	r18, 0x04	; 4
			{
				select_wash_mode = ONLY_SPINDRY;
			}
			else //
			{
				select_wash_mode = MAIN_SCREEN;
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     442:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     446:	7c 01       	movw	r14, r24
			}
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3을 받으면 탈수 단독 모드로 진입
		{
			button3_state = !button3_state;
     448:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <select_wash_mode>
			else //
			{
				select_wash_mode = MAIN_SCREEN;
			}
		}
		fp_wash_mode[select_wash_mode]();
     44c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <select_wash_mode+0x1>
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	e6 5f       	subi	r30, 0xF6	; 246
     456:	fe 4f       	sbci	r31, 0xFE	; 254
     458:	01 90       	ld	r0, Z+
     45a:	f0 81       	ld	r31, Z
     45c:	e0 2d       	mov	r30, r0
     45e:	09 95       	icall
     460:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <fnd_refreshrate>
		//auto_wash_led_on(&led_shift_num);
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     464:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <fnd_refreshrate+0x1>
     468:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <fnd_refreshrate+0x2>
     46c:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <fnd_refreshrate+0x3>
     470:	02 97       	sbiw	r24, 0x02	; 2
     472:	a1 05       	cpc	r26, r1
     474:	b1 05       	cpc	r27, r1
     476:	08 f4       	brcc	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     478:	83 cf       	rjmp	.-250    	; 0x380 <fnd_main+0x14>
     47a:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate>
		{
			fnd_refreshrate = 0;
     47e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x1>
     482:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <fnd_refreshrate+0x2>
     486:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <fnd_refreshrate+0x3>
			fnd_display();
     48a:	a4 de       	rcall	.-696    	; 0x1d4 <fnd_display>
     48c:	79 cf       	rjmp	.-270    	; 0x380 <fnd_main+0x14>

0000048e <auto_wash>:
     48e:	8f ef       	ldi	r24, 0xFF	; 255

////////////////////////////////////////////메인화면에서 동작하는 함수들////////////////////////////////////////////////

void auto_wash(void) // 자동 세탁
{
	PORTA = 0xff;
     490:	8b bb       	out	0x1b, r24	; 27
	sec_count = 1;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	a0 e0       	ldi	r26, 0x00	; 0
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     49e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     4a2:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     4a6:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
     4aa:	33 c0       	rjmp	.+102    	; 0x512 <auto_wash+0x84>
	{
		if (get_button(BUTTON0, BUTTON0PIN))
		{
			select_wash_mode = 4;
     4ac:	84 e0       	ldi	r24, 0x04	; 4
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <select_wash_mode+0x1>
     4b4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <select_wash_mode>
	}
	// 여기까지 자동 세탁의 물온도, 헹굼횟수, 탈수 강도를 선택함 밑에서 지정한 시간만큼 모터가 돌아가고 탈수 강도에 맞게 30초 동안 강도에 맞게 진행
	
	//여기에 시간 만큼 회전하는 함수 추가.
	
}
     4b8:	08 95       	ret
		if (get_button(BUTTON0, BUTTON0PIN))
		{
			select_wash_mode = 4;
			break;
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     4ba:	65 e0       	ldi	r22, 0x05	; 5
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	07 de       	rcall	.-1010   	; 0xd2 <get_button>
     4c4:	89 2b       	or	r24, r25
     4c6:	21 f0       	breq	.+8      	; 0x4d0 <auto_wash+0x42>
		{
			if (auto_step_led == 0) // 물 온도 선택하기  --- 물온도 변수 필요하고 
			{
				auto_wash_mode = 0;
     4c8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <auto_wash_mode+0x1>
     4cc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <auto_wash_mode>
			}
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     4d0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <fnd_refreshrate>
     4d4:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <fnd_refreshrate+0x1>
     4d8:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <fnd_refreshrate+0x2>
     4dc:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <fnd_refreshrate+0x3>
     4e0:	02 97       	sbiw	r24, 0x02	; 2
     4e2:	a1 05       	cpc	r26, r1
     4e4:	b1 05       	cpc	r27, r1
     4e6:	48 f0       	brcs	.+18     	; 0x4fa <auto_wash+0x6c>
		{
			fnd_refreshrate = 0;
     4e8:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate>
     4ec:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x1>
     4f0:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <fnd_refreshrate+0x2>
     4f4:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <fnd_refreshrate+0x3>
			fnd_display();
     4f8:	6d de       	rcall	.-806    	; 0x1d4 <fnd_display>
		}
		auto_wash_select[auto_wash_mode]();
     4fa:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <auto_wash_mode>
     4fe:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <auto_wash_mode+0x1>
     502:	ee 0f       	add	r30, r30
     504:	ff 1f       	adc	r31, r31
     506:	e0 50       	subi	r30, 0x00	; 0
     508:	ff 4f       	sbci	r31, 0xFF	; 255
     50a:	01 90       	ld	r0, Z+
     50c:	f0 81       	ld	r31, Z
     50e:	e0 2d       	mov	r30, r0
     510:	09 95       	icall
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
	{
		if (get_button(BUTTON0, BUTTON0PIN))
     512:	64 e0       	ldi	r22, 0x04	; 4
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	db dd       	rcall	.-1098   	; 0xd2 <get_button>
     51c:	89 2b       	or	r24, r25
     51e:	69 f2       	breq	.-102    	; 0x4ba <auto_wash+0x2c>
     520:	c5 cf       	rjmp	.-118    	; 0x4ac <auto_wash+0x1e>

00000522 <water_temperature>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////자동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
	PORTA = 0x07;
     526:	87 e0       	ldi	r24, 0x07	; 7
     528:	8b bb       	out	0x1b, r24	; 27
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
     52a:	8e e1       	ldi	r24, 0x1E	; 30
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	a0 e0       	ldi	r26, 0x00	; 0
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     536:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     53a:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     53e:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>

/////////////////////////////////////////자동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
	PORTA = 0x07;
	int water_tem_toggle = 1;
     542:	c1 e0       	ldi	r28, 0x01	; 1
     544:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     546:	60 c0       	rjmp	.+192    	; 0x608 <water_temperature+0xe6>
	{
		if (get_button(BUTTON2, BUTTON2PIN))
     548:	66 e0       	ldi	r22, 0x06	; 6
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	c0 dd       	rcall	.-1152   	; 0xd2 <get_button>
     552:	89 2b       	or	r24, r25
     554:	99 f0       	breq	.+38     	; 0x57c <water_temperature+0x5a>
		{
			sec_count -= 5;
     556:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count>
     55a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x1>
     55e:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <sec_count+0x2>
     562:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <sec_count+0x3>
     566:	05 97       	sbiw	r24, 0x05	; 5
     568:	a1 09       	sbc	r26, r1
     56a:	b1 09       	sbc	r27, r1
     56c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     570:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     574:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     578:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     57c:	67 e0       	ldi	r22, 0x07	; 7
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	83 e0       	ldi	r24, 0x03	; 3
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a6 dd       	rcall	.-1204   	; 0xd2 <get_button>
     586:	89 2b       	or	r24, r25
     588:	99 f0       	breq	.+38     	; 0x5b0 <water_temperature+0x8e>
		{
			sec_count += 5;
     58a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count>
     58e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x1>
     592:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <sec_count+0x2>
     596:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <sec_count+0x3>
     59a:	05 96       	adiw	r24, 0x05	; 5
     59c:	a1 1d       	adc	r26, r1
     59e:	b1 1d       	adc	r27, r1
     5a0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     5a4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     5a8:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     5ac:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     5b0:	65 e0       	ldi	r22, 0x05	; 5
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	8c dd       	rcall	.-1256   	; 0xd2 <get_button>
     5ba:	89 2b       	or	r24, r25
     5bc:	81 f0       	breq	.+32     	; 0x5de <water_temperature+0xbc>
		{	
			sec_count = 0;
     5be:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <sec_count>
     5c2:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sec_count+0x1>
     5c6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <sec_count+0x2>
     5ca:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <sec_count+0x3>
			auto_wash_mode = 1;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <auto_wash_mode+0x1>
     5d6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <auto_wash_mode>
			water_tem_toggle = 0;
     5da:	c0 e0       	ldi	r28, 0x00	; 0
     5dc:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     5de:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <fnd_refreshrate>
     5e2:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <fnd_refreshrate+0x1>
     5e6:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <fnd_refreshrate+0x2>
     5ea:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <fnd_refreshrate+0x3>
     5ee:	02 97       	sbiw	r24, 0x02	; 2
     5f0:	a1 05       	cpc	r26, r1
     5f2:	b1 05       	cpc	r27, r1
     5f4:	48 f0       	brcs	.+18     	; 0x608 <water_temperature+0xe6>
		{
			fnd_refreshrate = 0;
     5f6:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate>
     5fa:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x1>
     5fe:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <fnd_refreshrate+0x2>
     602:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <fnd_refreshrate+0x3>
			fnd_display();
     606:	e6 dd       	rcall	.-1076   	; 0x1d4 <fnd_display>
	PORTA = 0x07;
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     608:	20 97       	sbiw	r28, 0x00	; 0
     60a:	09 f0       	breq	.+2      	; 0x60e <water_temperature+0xec>
     60c:	9d cf       	rjmp	.-198    	; 0x548 <water_temperature+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <rinse_frequency>:

void rinse_frequency() // 헹굼 횟수 조절
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
	PORTA = 0x03;
     618:	83 e0       	ldi	r24, 0x03	; 3
     61a:	8b bb       	out	0x1b, r24	; 27
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 5; // deflaut 헹굼 횟수
     61c:	85 e0       	ldi	r24, 0x05	; 5
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	a0 e0       	ldi	r26, 0x00	; 0
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     628:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     62c:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     630:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
}

void rinse_frequency() // 헹굼 횟수 조절
{
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
     634:	c1 e0       	ldi	r28, 0x01	; 1
     636:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 5; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     638:	79 c0       	rjmp	.+242    	; 0x72c <rinse_frequency+0x118>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     63a:	66 e0       	ldi	r22, 0x06	; 6
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	47 dd       	rcall	.-1394   	; 0xd2 <get_button>
     644:	89 2b       	or	r24, r25
     646:	99 f0       	breq	.+38     	; 0x66e <rinse_frequency+0x5a>
		{
			sec_count -= 1;
     648:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count>
     64c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x1>
     650:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <sec_count+0x2>
     654:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <sec_count+0x3>
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	a1 09       	sbc	r26, r1
     65c:	b1 09       	sbc	r27, r1
     65e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     662:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     666:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     66a:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     66e:	67 e0       	ldi	r22, 0x07	; 7
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	2d dd       	rcall	.-1446   	; 0xd2 <get_button>
     678:	89 2b       	or	r24, r25
     67a:	99 f0       	breq	.+38     	; 0x6a2 <rinse_frequency+0x8e>
		{
			sec_count += 1;
     67c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count>
     680:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x1>
     684:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <sec_count+0x2>
     688:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <sec_count+0x3>
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	a1 1d       	adc	r26, r1
     690:	b1 1d       	adc	r27, r1
     692:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     696:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     69a:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     69e:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     6a2:	65 e0       	ldi	r22, 0x05	; 5
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	13 dd       	rcall	.-1498   	; 0xd2 <get_button>
     6ac:	89 2b       	or	r24, r25
     6ae:	49 f1       	breq	.+82     	; 0x702 <rinse_frequency+0xee>
		{
			total_wash_time += sec_count * 10; // 버튼 1누르면 횟수 * 10초를 전역변수에 저장하고 다음 단계로 간 다음 탈출
     6b0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count>
     6b4:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x1>
     6b8:	9c 01       	movw	r18, r24
     6ba:	22 0f       	add	r18, r18
     6bc:	33 1f       	adc	r19, r19
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	82 0f       	add	r24, r18
     6cc:	93 1f       	adc	r25, r19
     6ce:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <total_wash_time>
     6d2:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <total_wash_time+0x1>
     6d6:	82 0f       	add	r24, r18
     6d8:	93 1f       	adc	r25, r19
     6da:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <total_wash_time+0x1>
     6de:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <total_wash_time>
			sec_count = 0;
     6e2:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <sec_count>
     6e6:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sec_count+0x1>
     6ea:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <sec_count+0x2>
     6ee:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <sec_count+0x3>
			auto_wash_mode = 2;
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <auto_wash_mode+0x1>
     6fa:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <auto_wash_mode>
			rinse_frequency_toggle = 0;
     6fe:	c0 e0       	ldi	r28, 0x00	; 0
     700:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     702:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <fnd_refreshrate>
     706:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <fnd_refreshrate+0x1>
     70a:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <fnd_refreshrate+0x2>
     70e:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <fnd_refreshrate+0x3>
     712:	02 97       	sbiw	r24, 0x02	; 2
     714:	a1 05       	cpc	r26, r1
     716:	b1 05       	cpc	r27, r1
     718:	48 f0       	brcs	.+18     	; 0x72c <rinse_frequency+0x118>
		{
			fnd_refreshrate = 0;
     71a:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate>
     71e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x1>
     722:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <fnd_refreshrate+0x2>
     726:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <fnd_refreshrate+0x3>
			fnd_display();
     72a:	54 dd       	rcall	.-1368   	; 0x1d4 <fnd_display>
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 5; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     72c:	20 97       	sbiw	r28, 0x00	; 0
     72e:	09 f0       	breq	.+2      	; 0x732 <rinse_frequency+0x11e>
     730:	84 cf       	rjmp	.-248    	; 0x63a <rinse_frequency+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <spindry_strength>:

void spindry_strength()
{
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
	PORTA = 0x01;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	8b bb       	out	0x1b, r24	; 27
	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	a0 e0       	ldi	r26, 0x00	; 0
     746:	b0 e0       	ldi	r27, 0x00	; 0
     748:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     74c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     750:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     754:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
}

void spindry_strength()
{
	PORTA = 0x01;
	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
     758:	c1 e0       	ldi	r28, 0x01	; 1
     75a:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
	
	while (spindry_strength_toggle)
     75c:	98 c0       	rjmp	.+304    	; 0x88e <spindry_strength+0x156>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     75e:	66 e0       	ldi	r22, 0x06	; 6
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	b5 dc       	rcall	.-1686   	; 0xd2 <get_button>
     768:	89 2b       	or	r24, r25
     76a:	99 f0       	breq	.+38     	; 0x792 <spindry_strength+0x5a>
		{
			sec_count -= 1;
     76c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count>
     770:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x1>
     774:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <sec_count+0x2>
     778:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <sec_count+0x3>
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	a1 09       	sbc	r26, r1
     780:	b1 09       	sbc	r27, r1
     782:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     786:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     78a:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     78e:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     792:	67 e0       	ldi	r22, 0x07	; 7
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	83 e0       	ldi	r24, 0x03	; 3
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	9b dc       	rcall	.-1738   	; 0xd2 <get_button>
     79c:	89 2b       	or	r24, r25
     79e:	99 f0       	breq	.+38     	; 0x7c6 <spindry_strength+0x8e>
		{
			sec_count += 1;
     7a0:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count>
     7a4:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x1>
     7a8:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <sec_count+0x2>
     7ac:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <sec_count+0x3>
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	a1 1d       	adc	r26, r1
     7b4:	b1 1d       	adc	r27, r1
     7b6:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     7ba:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     7be:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     7c2:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     7c6:	65 e0       	ldi	r22, 0x05	; 5
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	81 dc       	rcall	.-1790   	; 0xd2 <get_button>
     7d0:	89 2b       	or	r24, r25
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <spindry_strength+0x9e>
     7d4:	47 c0       	rjmp	.+142    	; 0x864 <spindry_strength+0x12c>
		{
			if(sec_count == 1)
     7d6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count>
     7da:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x1>
     7de:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <sec_count+0x2>
     7e2:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <sec_count+0x3>
     7e6:	81 30       	cpi	r24, 0x01	; 1
     7e8:	91 05       	cpc	r25, r1
     7ea:	a1 05       	cpc	r26, r1
     7ec:	b1 05       	cpc	r27, r1
     7ee:	39 f4       	brne	.+14     	; 0x7fe <spindry_strength+0xc6>
			{
				spin_strength_val = 115;
     7f0:	83 e7       	ldi	r24, 0x73	; 115
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <spin_strength_val+0x1>
     7f8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spin_strength_val>
     7fc:	22 c0       	rjmp	.+68     	; 0x842 <spindry_strength+0x10a>
			}
			else if (sec_count == 2)
     7fe:	82 30       	cpi	r24, 0x02	; 2
     800:	91 05       	cpc	r25, r1
     802:	a1 05       	cpc	r26, r1
     804:	b1 05       	cpc	r27, r1
     806:	39 f4       	brne	.+14     	; 0x816 <spindry_strength+0xde>
			{
				spin_strength_val = 160;
     808:	80 ea       	ldi	r24, 0xA0	; 160
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <spin_strength_val+0x1>
     810:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spin_strength_val>
     814:	16 c0       	rjmp	.+44     	; 0x842 <spindry_strength+0x10a>
			}
			else if (sec_count == 3)
     816:	83 30       	cpi	r24, 0x03	; 3
     818:	91 05       	cpc	r25, r1
     81a:	a1 05       	cpc	r26, r1
     81c:	b1 05       	cpc	r27, r1
     81e:	39 f4       	brne	.+14     	; 0x82e <spindry_strength+0xf6>
			{
				spin_strength_val = 205;
     820:	8d ec       	ldi	r24, 0xCD	; 205
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <spin_strength_val+0x1>
     828:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spin_strength_val>
     82c:	0a c0       	rjmp	.+20     	; 0x842 <spindry_strength+0x10a>
			}
			else if (sec_count == 4)
     82e:	04 97       	sbiw	r24, 0x04	; 4
     830:	a1 05       	cpc	r26, r1
     832:	b1 05       	cpc	r27, r1
     834:	31 f4       	brne	.+12     	; 0x842 <spindry_strength+0x10a>
			{
				spin_strength_val = 250;
     836:	8a ef       	ldi	r24, 0xFA	; 250
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <spin_strength_val+0x1>
     83e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spin_strength_val>
			}
			PORTA = 0;
     842:	1b ba       	out	0x1b, r1	; 27
			sec_count = 0;
     844:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <sec_count>
     848:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sec_count+0x1>
     84c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <sec_count+0x2>
     850:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <sec_count+0x3>
			auto_wash_mode = 3;
     854:	83 e0       	ldi	r24, 0x03	; 3
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <auto_wash_mode+0x1>
     85c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <auto_wash_mode>
			spindry_strength_toggle = 0;
     860:	c0 e0       	ldi	r28, 0x00	; 0
     862:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     864:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <fnd_refreshrate>
     868:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <fnd_refreshrate+0x1>
     86c:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <fnd_refreshrate+0x2>
     870:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <fnd_refreshrate+0x3>
     874:	02 97       	sbiw	r24, 0x02	; 2
     876:	a1 05       	cpc	r26, r1
     878:	b1 05       	cpc	r27, r1
     87a:	48 f0       	brcs	.+18     	; 0x88e <spindry_strength+0x156>
		{
			fnd_refreshrate = 0;
     87c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate>
     880:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x1>
     884:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <fnd_refreshrate+0x2>
     888:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <fnd_refreshrate+0x3>
			fnd_display();
     88c:	a3 dc       	rcall	.-1722   	; 0x1d4 <fnd_display>
	PORTA = 0x01;
	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
	
	while (spindry_strength_toggle)
     88e:	20 97       	sbiw	r28, 0x00	; 0
     890:	09 f0       	breq	.+2      	; 0x894 <spindry_strength+0x15c>
     892:	65 cf       	rjmp	.-310    	; 0x75e <spindry_strength+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <auto_wash_start>:

void auto_wash_start(void)
{
	sec_count = total_wash_time;
     89a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <total_wash_time>
     89e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <total_wash_time+0x1>
     8a2:	09 2e       	mov	r0, r25
     8a4:	00 0c       	add	r0, r0
     8a6:	aa 0b       	sbc	r26, r26
     8a8:	bb 0b       	sbc	r27, r27
     8aa:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     8ae:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     8b2:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     8b6:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
	
	while (sec_count > 0)
     8ba:	40 c0       	rjmp	.+128    	; 0x93c <auto_wash_start+0xa2>
	{
		//OCR3C = spin_strength_val; // 이부분을 함수로 표현하고 싶음
		washing_machine_fan_control(&spin_strength_val);
     8bc:	84 e1       	ldi	r24, 0x14	; 20
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	e6 d0       	rcall	.+460    	; 0xa8e <washing_machine_fan_control>
		if (msec_count >= 1000)
     8c2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <msec_count>
     8c6:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <msec_count+0x1>
     8ca:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <msec_count+0x2>
     8ce:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <msec_count+0x3>
     8d2:	88 3e       	cpi	r24, 0xE8	; 232
     8d4:	93 40       	sbci	r25, 0x03	; 3
     8d6:	a1 05       	cpc	r26, r1
     8d8:	b1 05       	cpc	r27, r1
     8da:	d8 f0       	brcs	.+54     	; 0x912 <auto_wash_start+0x78>
		{
			msec_count = 0;
     8dc:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <msec_count>
     8e0:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <msec_count+0x1>
     8e4:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <msec_count+0x2>
     8e8:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <msec_count+0x3>
			sec_count--;
     8ec:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count>
     8f0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x1>
     8f4:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <sec_count+0x2>
     8f8:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <sec_count+0x3>
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	a1 09       	sbc	r26, r1
     900:	b1 09       	sbc	r27, r1
     902:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <sec_count>
     906:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <sec_count+0x1>
     90a:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <sec_count+0x2>
     90e:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <sec_count+0x3>
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     912:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <fnd_refreshrate>
     916:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <fnd_refreshrate+0x1>
     91a:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <fnd_refreshrate+0x2>
     91e:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <fnd_refreshrate+0x3>
     922:	02 97       	sbiw	r24, 0x02	; 2
     924:	a1 05       	cpc	r26, r1
     926:	b1 05       	cpc	r27, r1
     928:	48 f0       	brcs	.+18     	; 0x93c <auto_wash_start+0xa2>
		{
			fnd_refreshrate = 0;
     92a:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate>
     92e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x1>
     932:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <fnd_refreshrate+0x2>
     936:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <fnd_refreshrate+0x3>
			fnd_display();
     93a:	4c dc       	rcall	.-1896   	; 0x1d4 <fnd_display>

void auto_wash_start(void)
{
	sec_count = total_wash_time;
	
	while (sec_count > 0)
     93c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count>
     940:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x1>
     944:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <sec_count+0x2>
     948:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <sec_count+0x3>
     94c:	89 2b       	or	r24, r25
     94e:	8a 2b       	or	r24, r26
     950:	8b 2b       	or	r24, r27
     952:	09 f0       	breq	.+2      	; 0x956 <auto_wash_start+0xbc>
     954:	b3 cf       	rjmp	.-154    	; 0x8bc <auto_wash_start+0x22>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
	OCR3C = 0;
     956:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     95a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	sec_count = 0;
     95e:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <sec_count>
     962:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sec_count+0x1>
     966:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <sec_count+0x2>
     96a:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <sec_count+0x3>
	auto_wash_mode = 4;
     96e:	84 e0       	ldi	r24, 0x04	; 4
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <auto_wash_mode+0x1>
     976:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <auto_wash_mode>
     97a:	08 95       	ret

0000097c <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     97c:	1f 92       	push	r1
     97e:	0f 92       	push	r0
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	0f 92       	push	r0
     984:	11 24       	eor	r1, r1
     986:	8f 93       	push	r24
     988:	9f 93       	push	r25
     98a:	af 93       	push	r26
     98c:	bf 93       	push	r27
	TCNT0=6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
     98e:	86 e0       	ldi	r24, 0x06	; 6
     990:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
     992:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <msec_count>
     996:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <msec_count+0x1>
     99a:	a0 91 5a 01 	lds	r26, 0x015A	; 0x80015a <msec_count+0x2>
     99e:	b0 91 5b 01 	lds	r27, 0x015B	; 0x80015b <msec_count+0x3>
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	a1 1d       	adc	r26, r1
     9a6:	b1 1d       	adc	r27, r1
     9a8:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <msec_count>
     9ac:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <msec_count+0x1>
     9b0:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <msec_count+0x2>
     9b4:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <msec_count+0x3>
	fnd_refreshrate++;   // fnd 잔상효과 유지 하기 위한 timer 2ms
     9b8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <fnd_refreshrate>
     9bc:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <fnd_refreshrate+0x1>
     9c0:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <fnd_refreshrate+0x2>
     9c4:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <fnd_refreshrate+0x3>
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	a1 1d       	adc	r26, r1
     9cc:	b1 1d       	adc	r27, r1
     9ce:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <fnd_refreshrate>
     9d2:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <fnd_refreshrate+0x1>
     9d6:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <fnd_refreshrate+0x2>
     9da:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <fnd_refreshrate+0x3>
	check_timer++;
     9de:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <check_timer>
     9e2:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <check_timer+0x1>
     9e6:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <check_timer+0x2>
     9ea:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <check_timer+0x3>
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	a1 1d       	adc	r26, r1
     9f2:	b1 1d       	adc	r27, r1
     9f4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <check_timer>
     9f8:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <check_timer+0x1>
     9fc:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <check_timer+0x2>
     a00:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <check_timer+0x3>
}
     a04:	bf 91       	pop	r27
     a06:	af 91       	pop	r26
     a08:	9f 91       	pop	r25
     a0a:	8f 91       	pop	r24
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	0f 90       	pop	r0
     a12:	1f 90       	pop	r1
     a14:	18 95       	reti

00000a16 <init_timer0>:
	}
}

void init_timer0()
{
	TCNT0 = 6;
     a16:	86 e0       	ldi	r24, 0x06	; 6
     a18:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     a1a:	83 b7       	in	r24, 0x33	; 51
     a1c:	84 60       	ori	r24, 0x04	; 4
     a1e:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
     a20:	87 b7       	in	r24, 0x37	; 55
     a22:	81 60       	ori	r24, 0x01	; 1
     a24:	87 bf       	out	0x37, r24	; 55
     a26:	08 95       	ret

00000a28 <main>:
	check_timer++;
}

int main(void)
{
	init_timer0();
     a28:	f6 df       	rcall	.-20     	; 0xa16 <init_timer0>
	init_uart0();
     a2a:	f0 d0       	rcall	.+480    	; 0xc0c <init_uart0>
	init_uart1();
     a2c:	82 d1       	rcall	.+772    	; 0xd32 <init_uart1>
	init_ultrasonic();
     a2e:	f2 d1       	rcall	.+996    	; 0xe14 <init_ultrasonic>
	init_button();
     a30:	4c db       	rcall	.-2408   	; 0xca <init_button>
     a32:	0c d0       	rcall	.+24     	; 0xa4c <init_timer3_pwm>
	init_timer3_pwm();
     a34:	23 d0       	rcall	.+70     	; 0xa7c <init_n289n>
     a36:	8c e1       	ldi	r24, 0x1C	; 28
	init_n289n();
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	90 93 db 07 	sts	0x07DB, r25	; 0x8007db <__iob+0x3>
	
	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     a3e:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <__iob+0x2>
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	8a bb       	out	0x1a, r24	; 26
	
	DDRA=0xff;   // led를 출력 모드로
     a46:	78 94       	sei
     a48:	91 dc       	rcall	.-1758   	; 0x36c <fnd_main>
	sei();     // 전역적으로 interrupt 허용
     a4a:	ff cf       	rjmp	.-2      	; 0xa4a <main+0x22>

00000a4c <init_timer3_pwm>:
	
	//hw_pwm_fan_control();
	
	fnd_main();
     a4c:	82 b1       	in	r24, 0x02	; 2
     a4e:	88 62       	ori	r24, 0x28	; 40
     a50:	82 b9       	out	0x02, r24	; 2
void init_timer3_pwm(void)
{
	// DDRE |= 1 << 3 | 1 << 4 | 1 << 5; 현재 4번에 초음파가 연결되어 있다.
	DDRE |= 1 << 3 | 1 << 5;
	// 모드 5 : 8비트 고속 pwm    TCCR3A레지스터 WGM30과 TCCR3B레지스터 WGM32를 1로 만든다.
	TCCR3A |= 1 << WGM30;
     a52:	ab e8       	ldi	r26, 0x8B	; 139
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	8c 91       	ld	r24, X
     a58:	81 60       	ori	r24, 0x01	; 1
     a5a:	8c 93       	st	X, r24
	TCCR3B |= 1 << WGM32;
     a5c:	ea e8       	ldi	r30, 0x8A	; 138
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	88 60       	ori	r24, 0x08	; 8
     a64:	80 83       	st	Z, r24
	// 비반전모드 top : 0x00ff  비교일치값(pwm)지정 : OCR3C
	// TCCR3A레지스터의 COM3C1을 1로 set
	// 비교일치 발생시 OC3C의 출력 핀은 LOw로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR3A |= 1 << COM3C1;
     a66:	8c 91       	ld	r24, X
     a68:	88 60       	ori	r24, 0x08	; 8
     a6a:	8c 93       	st	X, r24
	// 분주비 : 64   16,000,000hz -> 250,000hz         TCCR3B의 CS30, CS31을 1로 set
	// 주기 : 1 / 250,000 -> 4us
	// 250000hz에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//			    127개의 펄스를 count하면 소요시간 : 0.51ms
	TCCR3B |= 1 << CS31 | 1 << CS30;
     a6c:	80 81       	ld	r24, Z
     a6e:	83 60       	ori	r24, 0x03	; 3
     a70:	80 83       	st	Z, r24
	OCR3C = 0; // 비교일치값 (Output Compare Register : PWM 값
     a72:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     a76:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     a7a:	08 95       	ret

00000a7c <init_n289n>:

void init_n289n(void)
{
	//PF6 : IN1 (N298N)
	//PF7 : IN2 (N298N)
	PORTF &= ~(1 << 6 | 1 << 7);  // 6, 7 reset
     a7c:	e2 e6       	ldi	r30, 0x62	; 98
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	8f 73       	andi	r24, 0x3F	; 63
     a84:	80 83       	st	Z, r24
	PORTF |= 1 << 6; // 정회전
     a86:	80 81       	ld	r24, Z
     a88:	80 64       	ori	r24, 0x40	; 64
     a8a:	80 83       	st	Z, r24
     a8c:	08 95       	ret

00000a8e <washing_machine_fan_control>:
	1	0	정회전
	1	1	STOP // 둘 다 1인데 멈추는 이유는 둘다 5v가 걸리면 전압차가 없어서 멈춘다.
*/
void washing_machine_fan_control(int *spin_strength)
{
	OCR3C = *spin_strength;
     a8e:	fc 01       	movw	r30, r24
     a90:	80 81       	ld	r24, Z
     a92:	91 81       	ldd	r25, Z+1	; 0x01
     a94:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     a98:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	
	if (check_timer >= 5000)
     a9c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <check_timer>
     aa0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <check_timer+0x1>
     aa4:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <check_timer+0x2>
     aa8:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <check_timer+0x3>
     aac:	88 38       	cpi	r24, 0x88	; 136
     aae:	93 41       	sbci	r25, 0x13	; 19
     ab0:	a1 05       	cpc	r26, r1
     ab2:	b1 05       	cpc	r27, r1
     ab4:	d8 f0       	brcs	.+54     	; 0xaec <washing_machine_fan_control+0x5e>
	{
		
		PORTF &= ~(1 << 6 | 1 << 7);  // 6, 7 reset
     ab6:	e2 e6       	ldi	r30, 0x62	; 98
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	8f 73       	andi	r24, 0x3F	; 63
     abe:	80 83       	st	Z, r24
		fan_forward = !fan_forward;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <fan_forward>
     ac8:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <fan_forward+0x1>
     acc:	23 2b       	or	r18, r19
     ace:	11 f0       	breq	.+4      	; 0xad4 <washing_machine_fan_control+0x46>
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <fan_forward+0x1>
     ad8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <fan_forward>
		check_timer = 0;
     adc:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <check_timer>
     ae0:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <check_timer+0x1>
     ae4:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <check_timer+0x2>
     ae8:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <check_timer+0x3>
	}
	
	if (fan_forward)
     aec:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <fan_forward>
     af0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <fan_forward+0x1>
     af4:	89 2b       	or	r24, r25
     af6:	31 f0       	breq	.+12     	; 0xb04 <washing_machine_fan_control+0x76>
	{
		PORTF |= 1 << 6; // 정회전
     af8:	e2 e6       	ldi	r30, 0x62	; 98
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	80 64       	ori	r24, 0x40	; 64
     b00:	80 83       	st	Z, r24
     b02:	08 95       	ret
	}
	else
	{
		PORTF |= 1 << 7; // 정회전
     b04:	e2 e6       	ldi	r30, 0x62	; 98
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	80 68       	ori	r24, 0x80	; 128
     b0c:	80 83       	st	Z, r24
     b0e:	08 95       	ret

00000b10 <__vector_18>:

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
     b1a:	0b b6       	in	r0, 0x3b	; 59
     b1c:	0f 92       	push	r0
     b1e:	2f 93       	push	r18
     b20:	3f 93       	push	r19
     b22:	4f 93       	push	r20
     b24:	5f 93       	push	r21
     b26:	6f 93       	push	r22
     b28:	7f 93       	push	r23
     b2a:	8f 93       	push	r24
     b2c:	9f 93       	push	r25
     b2e:	af 93       	push	r26
     b30:	bf 93       	push	r27
     b32:	ef 93       	push	r30
     b34:	ff 93       	push	r31
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	1f 92       	push	r1
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     b40:	8c b1       	in	r24, 0x0c	; 12
     b42:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	8d 30       	cpi	r24, 0x0D	; 13
     b48:	19 f0       	breq	.+6      	; 0xb50 <__vector_18+0x40>
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	8a 30       	cpi	r24, 0x0A	; 10
     b4e:	61 f5       	brne	.+88     	; 0xba8 <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     b50:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <rear>
     b54:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <rear+0x1>
     b58:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <i.1894>
     b5c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <i.1894+0x1>
     b60:	40 e5       	ldi	r20, 0x50	; 80
     b62:	42 9f       	mul	r20, r18
     b64:	f0 01       	movw	r30, r0
     b66:	43 9f       	mul	r20, r19
     b68:	f0 0d       	add	r31, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	ea 59       	subi	r30, 0x9A	; 154
     b6e:	fe 4f       	sbci	r31, 0xFE	; 254
     b70:	e8 0f       	add	r30, r24
     b72:	f9 1f       	adc	r31, r25
     b74:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     b76:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <i.1894+0x1>
     b7a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <i.1894>
		rear++;
     b7e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <rear>
     b82:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <rear+0x1>
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <rear+0x1>
     b8c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
     b90:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <rear>
     b94:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <rear+0x1>
     b98:	6a e0       	ldi	r22, 0x0A	; 10
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	d7 d2       	rcall	.+1454   	; 0x114c <__divmodhi4>
     b9e:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <rear+0x1>
     ba2:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <rear>
     ba6:	1c c0       	rjmp	.+56     	; 0xbe0 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
     ba8:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <rear>
     bac:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <rear+0x1>
     bb0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <i.1894>
     bb4:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <i.1894+0x1>
     bb8:	9c 01       	movw	r18, r24
     bba:	2f 5f       	subi	r18, 0xFF	; 255
     bbc:	3f 4f       	sbci	r19, 0xFF	; 255
     bbe:	30 93 5d 01 	sts	0x015D, r19	; 0x80015d <i.1894+0x1>
     bc2:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <i.1894>
     bc6:	49 81       	ldd	r20, Y+1	; 0x01
     bc8:	50 e5       	ldi	r21, 0x50	; 80
     bca:	56 9f       	mul	r21, r22
     bcc:	90 01       	movw	r18, r0
     bce:	57 9f       	mul	r21, r23
     bd0:	30 0d       	add	r19, r0
     bd2:	11 24       	eor	r1, r1
     bd4:	2a 59       	subi	r18, 0x9A	; 154
     bd6:	3e 4f       	sbci	r19, 0xFE	; 254
     bd8:	f9 01       	movw	r30, r18
     bda:	e8 0f       	add	r30, r24
     bdc:	f9 1f       	adc	r31, r25
     bde:	40 83       	st	Z, r20
	}
		  
}
     be0:	0f 90       	pop	r0
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	ff 91       	pop	r31
     be8:	ef 91       	pop	r30
     bea:	bf 91       	pop	r27
     bec:	af 91       	pop	r26
     bee:	9f 91       	pop	r25
     bf0:	8f 91       	pop	r24
     bf2:	7f 91       	pop	r23
     bf4:	6f 91       	pop	r22
     bf6:	5f 91       	pop	r21
     bf8:	4f 91       	pop	r20
     bfa:	3f 91       	pop	r19
     bfc:	2f 91       	pop	r18
     bfe:	0f 90       	pop	r0
     c00:	0b be       	out	0x3b, r0	; 59
     c02:	0f 90       	pop	r0
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	0f 90       	pop	r0
     c08:	1f 90       	pop	r1
     c0a:	18 95       	reti

00000c0c <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
     c0c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
     c10:	8f ec       	ldi	r24, 0xCF	; 207
     c12:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
     c14:	8b b1       	in	r24, 0x0b	; 11
     c16:	82 60       	ori	r24, 0x02	; 2
     c18:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     c1a:	e5 e9       	ldi	r30, 0x95	; 149
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	86 60       	ori	r24, 0x06	; 6
     c22:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     c24:	8a b1       	in	r24, 0x0a	; 10
     c26:	88 69       	ori	r24, 0x98	; 152
     c28:	8a b9       	out	0x0a, r24	; 10
     c2a:	08 95       	ret

00000c2c <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
     c2c:	5d 9b       	sbis	0x0b, 5	; 11
     c2e:	fe cf       	rjmp	.-4      	; 0xc2c <UART0_transmit>
		;   // no operation NOP
	
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
     c30:	8c b9       	out	0x0c, r24	; 12
     c32:	08 95       	ret

00000c34 <__vector_30>:

// BT로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART1_RX_vect)
{
     c34:	1f 92       	push	r1
     c36:	0f 92       	push	r0
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	0f 92       	push	r0
     c3c:	11 24       	eor	r1, r1
     c3e:	0b b6       	in	r0, 0x3b	; 59
     c40:	0f 92       	push	r0
     c42:	2f 93       	push	r18
     c44:	3f 93       	push	r19
     c46:	4f 93       	push	r20
     c48:	5f 93       	push	r21
     c4a:	6f 93       	push	r22
     c4c:	7f 93       	push	r23
     c4e:	8f 93       	push	r24
     c50:	9f 93       	push	r25
     c52:	af 93       	push	r26
     c54:	bf 93       	push	r27
     c56:	ef 93       	push	r30
     c58:	ff 93       	push	r31
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	1f 92       	push	r1
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
     c64:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     c68:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	8d 30       	cpi	r24, 0x0D	; 13
     c6e:	19 f0       	breq	.+6      	; 0xc76 <__vector_30+0x42>
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	8a 30       	cpi	r24, 0x0A	; 10
     c74:	61 f5       	brne	.+88     	; 0xcce <__vector_30+0x9a>
	{
		rx1_buff[rear1][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     c76:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <rear1>
     c7a:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <rear1+0x1>
     c7e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <i.1896>
     c82:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <i.1896+0x1>
     c86:	40 e5       	ldi	r20, 0x50	; 80
     c88:	42 9f       	mul	r20, r18
     c8a:	f0 01       	movw	r30, r0
     c8c:	43 9f       	mul	r20, r19
     c8e:	f0 0d       	add	r31, r0
     c90:	11 24       	eor	r1, r1
     c92:	ea 57       	subi	r30, 0x7A	; 122
     c94:	fb 4f       	sbci	r31, 0xFB	; 251
     c96:	e8 0f       	add	r30, r24
     c98:	f9 1f       	adc	r31, r25
     c9a:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     c9c:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <i.1896+0x1>
     ca0:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <i.1896>
		rear1++;
     ca4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rear1>
     ca8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <rear1+0x1>
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <rear1+0x1>
     cb2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <rear1>
		rear1 %= COMMAND_NUMBER;   // 0 ~ 9 if (rear1 >= 9) rear1 =0;
     cb6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rear1>
     cba:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <rear1+0x1>
     cbe:	6a e0       	ldi	r22, 0x0A	; 10
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	44 d2       	rcall	.+1160   	; 0x114c <__divmodhi4>
     cc4:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <rear1+0x1>
     cc8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <rear1>
     ccc:	1c c0       	rjmp	.+56     	; 0xd06 <__vector_30+0xd2>
		// !!!! 이곳에 queue full (rx1_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx1_buff[rear1][i++] = data;
     cce:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <rear1>
     cd2:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <rear1+0x1>
     cd6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <i.1896>
     cda:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <i.1896+0x1>
     cde:	9c 01       	movw	r18, r24
     ce0:	2f 5f       	subi	r18, 0xFF	; 255
     ce2:	3f 4f       	sbci	r19, 0xFF	; 255
     ce4:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <i.1896+0x1>
     ce8:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <i.1896>
     cec:	49 81       	ldd	r20, Y+1	; 0x01
     cee:	50 e5       	ldi	r21, 0x50	; 80
     cf0:	56 9f       	mul	r21, r22
     cf2:	90 01       	movw	r18, r0
     cf4:	57 9f       	mul	r21, r23
     cf6:	30 0d       	add	r19, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	2a 57       	subi	r18, 0x7A	; 122
     cfc:	3b 4f       	sbci	r19, 0xFB	; 251
     cfe:	f9 01       	movw	r30, r18
     d00:	e8 0f       	add	r30, r24
     d02:	f9 1f       	adc	r31, r25
     d04:	40 83       	st	Z, r20
	}
		  
}
     d06:	0f 90       	pop	r0
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	ff 91       	pop	r31
     d0e:	ef 91       	pop	r30
     d10:	bf 91       	pop	r27
     d12:	af 91       	pop	r26
     d14:	9f 91       	pop	r25
     d16:	8f 91       	pop	r24
     d18:	7f 91       	pop	r23
     d1a:	6f 91       	pop	r22
     d1c:	5f 91       	pop	r21
     d1e:	4f 91       	pop	r20
     d20:	3f 91       	pop	r19
     d22:	2f 91       	pop	r18
     d24:	0f 90       	pop	r0
     d26:	0b be       	out	0x3b, r0	; 59
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0
     d2e:	1f 90       	pop	r1
     d30:	18 95       	reti

00000d32 <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
     d32:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
     d36:	8f ec       	ldi	r24, 0xCF	; 207
     d38:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
     d3c:	eb e9       	ldi	r30, 0x9B	; 155
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	82 60       	ori	r24, 0x02	; 2
     d44:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     d46:	ed e9       	ldi	r30, 0x9D	; 157
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	86 60       	ori	r24, 0x06	; 6
     d4e:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     d50:	ea e9       	ldi	r30, 0x9A	; 154
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	88 69       	ori	r24, 0x98	; 152
     d58:	80 83       	st	Z, r24
     d5a:	08 95       	ret

00000d5c <__vector_5>:
char scm[50];

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect)
{
     d5c:	1f 92       	push	r1
     d5e:	0f 92       	push	r0
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	0f 92       	push	r0
     d64:	11 24       	eor	r1, r1
     d66:	0b b6       	in	r0, 0x3b	; 59
     d68:	0f 92       	push	r0
     d6a:	2f 93       	push	r18
     d6c:	3f 93       	push	r19
     d6e:	4f 93       	push	r20
     d70:	5f 93       	push	r21
     d72:	6f 93       	push	r22
     d74:	7f 93       	push	r23
     d76:	8f 93       	push	r24
     d78:	9f 93       	push	r25
     d7a:	af 93       	push	r26
     d7c:	bf 93       	push	r27
     d7e:	ef 93       	push	r30
     d80:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN & (1 << ECHO))
     d82:	0c 9b       	sbis	0x01, 4	; 1
     d84:	03 c0       	rjmp	.+6      	; 0xd8c <__vector_5+0x30>
	{
		TCNT1 = 0;
     d86:	1d bc       	out	0x2d, r1	; 45
     d88:	1c bc       	out	0x2c, r1	; 44
     d8a:	31 c0       	rjmp	.+98     	; 0xdee <__vector_5+0x92>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
     d8c:	6c b5       	in	r22, 0x2c	; 44
     d8e:	7d b5       	in	r23, 0x2d	; 45
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	ea d0       	rcall	.+468    	; 0xf6a <__floatunsisf>
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	34 e2       	ldi	r19, 0x24	; 36
     d9a:	44 e7       	ldi	r20, 0x74	; 116
     d9c:	59 e4       	ldi	r21, 0x49	; 73
     d9e:	73 d1       	rcall	.+742    	; 0x1086 <__mulsf3>
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e8       	ldi	r20, 0x80	; 128
     da6:	54 e4       	ldi	r21, 0x44	; 68
     da8:	6e d1       	rcall	.+732    	; 0x1086 <__mulsf3>
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	34 e2       	ldi	r19, 0x24	; 36
     dae:	44 e7       	ldi	r20, 0x74	; 116
     db0:	5b e4       	ldi	r21, 0x4B	; 75
     db2:	42 d0       	rcall	.+132    	; 0xe38 <__divsf3>
     db4:	a9 d0       	rcall	.+338    	; 0xf08 <__fixsfsi>
     db6:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <ultrasonic_distance+0x1>
     dba:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <ultrasonic_distance>
		
		// 예) TCNT1에 10이 들어 있다고 가정하자
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
		sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
     dbe:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ultrasonic_distance>
     dc2:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <ultrasonic_distance+0x1>
     dc6:	6a e3       	ldi	r22, 0x3A	; 58
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	c0 d1       	rcall	.+896    	; 0x114c <__divmodhi4>
     dcc:	7f 93       	push	r23
     dce:	6f 93       	push	r22
     dd0:	87 e3       	ldi	r24, 0x37	; 55
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	9f 93       	push	r25
     dd6:	8f 93       	push	r24
     dd8:	86 ea       	ldi	r24, 0xA6	; 166
     dda:	97 e0       	ldi	r25, 0x07	; 7
     ddc:	9f 93       	push	r25
     dde:	8f 93       	push	r24
     de0:	fe d1       	rcall	.+1020   	; 0x11de <sprintf>
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
	}
}
     dee:	ff 91       	pop	r31
     df0:	ef 91       	pop	r30
     df2:	bf 91       	pop	r27
     df4:	af 91       	pop	r26
     df6:	9f 91       	pop	r25
     df8:	8f 91       	pop	r24
     dfa:	7f 91       	pop	r23
     dfc:	6f 91       	pop	r22
     dfe:	5f 91       	pop	r21
     e00:	4f 91       	pop	r20
     e02:	3f 91       	pop	r19
     e04:	2f 91       	pop	r18
     e06:	0f 90       	pop	r0
     e08:	0b be       	out	0x3b, r0	; 59
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0
     e10:	1f 90       	pop	r1
     e12:	18 95       	reti

00000e14 <init_ultrasonic>:

void init_ultrasonic()
{
	TRIG_DDR |= 1 << TRIG; // output mode로 설정
     e14:	e4 e6       	ldi	r30, 0x64	; 100
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	80 61       	ori	r24, 0x10	; 16
     e1c:	80 83       	st	Z, r24
	ECHO_DDR &= ~(1 << ECHO); // input mode로 설정
     e1e:	82 b1       	in	r24, 0x02	; 2
     e20:	8f 7e       	andi	r24, 0xEF	; 239
     e22:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
     e24:	8a b7       	in	r24, 0x3a	; 58
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us	
	TCCR1B |=  1 << CS12 | 1 << CS10; // 1024로 분주
     e2a:	8e b5       	in	r24, 0x2e	; 46
     e2c:	85 60       	ori	r24, 0x05	; 5
     e2e:	8e bd       	out	0x2e, r24	; 46
	EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
     e30:	89 b7       	in	r24, 0x39	; 57
     e32:	80 61       	ori	r24, 0x10	; 16
     e34:	89 bf       	out	0x39, r24	; 57
     e36:	08 95       	ret

00000e38 <__divsf3>:
     e38:	0c d0       	rcall	.+24     	; 0xe52 <__divsf3x>
     e3a:	eb c0       	rjmp	.+470    	; 0x1012 <__fp_round>
     e3c:	e3 d0       	rcall	.+454    	; 0x1004 <__fp_pscB>
     e3e:	40 f0       	brcs	.+16     	; 0xe50 <__divsf3+0x18>
     e40:	da d0       	rcall	.+436    	; 0xff6 <__fp_pscA>
     e42:	30 f0       	brcs	.+12     	; 0xe50 <__divsf3+0x18>
     e44:	21 f4       	brne	.+8      	; 0xe4e <__divsf3+0x16>
     e46:	5f 3f       	cpi	r21, 0xFF	; 255
     e48:	19 f0       	breq	.+6      	; 0xe50 <__divsf3+0x18>
     e4a:	cc c0       	rjmp	.+408    	; 0xfe4 <__fp_inf>
     e4c:	51 11       	cpse	r21, r1
     e4e:	15 c1       	rjmp	.+554    	; 0x107a <__fp_szero>
     e50:	cf c0       	rjmp	.+414    	; 0xff0 <__fp_nan>

00000e52 <__divsf3x>:
     e52:	f0 d0       	rcall	.+480    	; 0x1034 <__fp_split3>
     e54:	98 f3       	brcs	.-26     	; 0xe3c <__divsf3+0x4>

00000e56 <__divsf3_pse>:
     e56:	99 23       	and	r25, r25
     e58:	c9 f3       	breq	.-14     	; 0xe4c <__divsf3+0x14>
     e5a:	55 23       	and	r21, r21
     e5c:	b1 f3       	breq	.-20     	; 0xe4a <__divsf3+0x12>
     e5e:	95 1b       	sub	r25, r21
     e60:	55 0b       	sbc	r21, r21
     e62:	bb 27       	eor	r27, r27
     e64:	aa 27       	eor	r26, r26
     e66:	62 17       	cp	r22, r18
     e68:	73 07       	cpc	r23, r19
     e6a:	84 07       	cpc	r24, r20
     e6c:	38 f0       	brcs	.+14     	; 0xe7c <__divsf3_pse+0x26>
     e6e:	9f 5f       	subi	r25, 0xFF	; 255
     e70:	5f 4f       	sbci	r21, 0xFF	; 255
     e72:	22 0f       	add	r18, r18
     e74:	33 1f       	adc	r19, r19
     e76:	44 1f       	adc	r20, r20
     e78:	aa 1f       	adc	r26, r26
     e7a:	a9 f3       	breq	.-22     	; 0xe66 <__divsf3_pse+0x10>
     e7c:	33 d0       	rcall	.+102    	; 0xee4 <__divsf3_pse+0x8e>
     e7e:	0e 2e       	mov	r0, r30
     e80:	3a f0       	brmi	.+14     	; 0xe90 <__divsf3_pse+0x3a>
     e82:	e0 e8       	ldi	r30, 0x80	; 128
     e84:	30 d0       	rcall	.+96     	; 0xee6 <__divsf3_pse+0x90>
     e86:	91 50       	subi	r25, 0x01	; 1
     e88:	50 40       	sbci	r21, 0x00	; 0
     e8a:	e6 95       	lsr	r30
     e8c:	00 1c       	adc	r0, r0
     e8e:	ca f7       	brpl	.-14     	; 0xe82 <__divsf3_pse+0x2c>
     e90:	29 d0       	rcall	.+82     	; 0xee4 <__divsf3_pse+0x8e>
     e92:	fe 2f       	mov	r31, r30
     e94:	27 d0       	rcall	.+78     	; 0xee4 <__divsf3_pse+0x8e>
     e96:	66 0f       	add	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	88 1f       	adc	r24, r24
     e9c:	bb 1f       	adc	r27, r27
     e9e:	26 17       	cp	r18, r22
     ea0:	37 07       	cpc	r19, r23
     ea2:	48 07       	cpc	r20, r24
     ea4:	ab 07       	cpc	r26, r27
     ea6:	b0 e8       	ldi	r27, 0x80	; 128
     ea8:	09 f0       	breq	.+2      	; 0xeac <__divsf3_pse+0x56>
     eaa:	bb 0b       	sbc	r27, r27
     eac:	80 2d       	mov	r24, r0
     eae:	bf 01       	movw	r22, r30
     eb0:	ff 27       	eor	r31, r31
     eb2:	93 58       	subi	r25, 0x83	; 131
     eb4:	5f 4f       	sbci	r21, 0xFF	; 255
     eb6:	2a f0       	brmi	.+10     	; 0xec2 <__divsf3_pse+0x6c>
     eb8:	9e 3f       	cpi	r25, 0xFE	; 254
     eba:	51 05       	cpc	r21, r1
     ebc:	68 f0       	brcs	.+26     	; 0xed8 <__divsf3_pse+0x82>
     ebe:	92 c0       	rjmp	.+292    	; 0xfe4 <__fp_inf>
     ec0:	dc c0       	rjmp	.+440    	; 0x107a <__fp_szero>
     ec2:	5f 3f       	cpi	r21, 0xFF	; 255
     ec4:	ec f3       	brlt	.-6      	; 0xec0 <__divsf3_pse+0x6a>
     ec6:	98 3e       	cpi	r25, 0xE8	; 232
     ec8:	dc f3       	brlt	.-10     	; 0xec0 <__divsf3_pse+0x6a>
     eca:	86 95       	lsr	r24
     ecc:	77 95       	ror	r23
     ece:	67 95       	ror	r22
     ed0:	b7 95       	ror	r27
     ed2:	f7 95       	ror	r31
     ed4:	9f 5f       	subi	r25, 0xFF	; 255
     ed6:	c9 f7       	brne	.-14     	; 0xeca <__divsf3_pse+0x74>
     ed8:	88 0f       	add	r24, r24
     eda:	91 1d       	adc	r25, r1
     edc:	96 95       	lsr	r25
     ede:	87 95       	ror	r24
     ee0:	97 f9       	bld	r25, 7
     ee2:	08 95       	ret
     ee4:	e1 e0       	ldi	r30, 0x01	; 1
     ee6:	66 0f       	add	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	88 1f       	adc	r24, r24
     eec:	bb 1f       	adc	r27, r27
     eee:	62 17       	cp	r22, r18
     ef0:	73 07       	cpc	r23, r19
     ef2:	84 07       	cpc	r24, r20
     ef4:	ba 07       	cpc	r27, r26
     ef6:	20 f0       	brcs	.+8      	; 0xf00 <__divsf3_pse+0xaa>
     ef8:	62 1b       	sub	r22, r18
     efa:	73 0b       	sbc	r23, r19
     efc:	84 0b       	sbc	r24, r20
     efe:	ba 0b       	sbc	r27, r26
     f00:	ee 1f       	adc	r30, r30
     f02:	88 f7       	brcc	.-30     	; 0xee6 <__divsf3_pse+0x90>
     f04:	e0 95       	com	r30
     f06:	08 95       	ret

00000f08 <__fixsfsi>:
     f08:	04 d0       	rcall	.+8      	; 0xf12 <__fixunssfsi>
     f0a:	68 94       	set
     f0c:	b1 11       	cpse	r27, r1
     f0e:	b5 c0       	rjmp	.+362    	; 0x107a <__fp_szero>
     f10:	08 95       	ret

00000f12 <__fixunssfsi>:
     f12:	98 d0       	rcall	.+304    	; 0x1044 <__fp_splitA>
     f14:	88 f0       	brcs	.+34     	; 0xf38 <__fixunssfsi+0x26>
     f16:	9f 57       	subi	r25, 0x7F	; 127
     f18:	90 f0       	brcs	.+36     	; 0xf3e <__fixunssfsi+0x2c>
     f1a:	b9 2f       	mov	r27, r25
     f1c:	99 27       	eor	r25, r25
     f1e:	b7 51       	subi	r27, 0x17	; 23
     f20:	a0 f0       	brcs	.+40     	; 0xf4a <__fixunssfsi+0x38>
     f22:	d1 f0       	breq	.+52     	; 0xf58 <__fixunssfsi+0x46>
     f24:	66 0f       	add	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	88 1f       	adc	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	1a f0       	brmi	.+6      	; 0xf34 <__fixunssfsi+0x22>
     f2e:	ba 95       	dec	r27
     f30:	c9 f7       	brne	.-14     	; 0xf24 <__fixunssfsi+0x12>
     f32:	12 c0       	rjmp	.+36     	; 0xf58 <__fixunssfsi+0x46>
     f34:	b1 30       	cpi	r27, 0x01	; 1
     f36:	81 f0       	breq	.+32     	; 0xf58 <__fixunssfsi+0x46>
     f38:	9f d0       	rcall	.+318    	; 0x1078 <__fp_zero>
     f3a:	b1 e0       	ldi	r27, 0x01	; 1
     f3c:	08 95       	ret
     f3e:	9c c0       	rjmp	.+312    	; 0x1078 <__fp_zero>
     f40:	67 2f       	mov	r22, r23
     f42:	78 2f       	mov	r23, r24
     f44:	88 27       	eor	r24, r24
     f46:	b8 5f       	subi	r27, 0xF8	; 248
     f48:	39 f0       	breq	.+14     	; 0xf58 <__fixunssfsi+0x46>
     f4a:	b9 3f       	cpi	r27, 0xF9	; 249
     f4c:	cc f3       	brlt	.-14     	; 0xf40 <__fixunssfsi+0x2e>
     f4e:	86 95       	lsr	r24
     f50:	77 95       	ror	r23
     f52:	67 95       	ror	r22
     f54:	b3 95       	inc	r27
     f56:	d9 f7       	brne	.-10     	; 0xf4e <__fixunssfsi+0x3c>
     f58:	3e f4       	brtc	.+14     	; 0xf68 <__fixunssfsi+0x56>
     f5a:	90 95       	com	r25
     f5c:	80 95       	com	r24
     f5e:	70 95       	com	r23
     f60:	61 95       	neg	r22
     f62:	7f 4f       	sbci	r23, 0xFF	; 255
     f64:	8f 4f       	sbci	r24, 0xFF	; 255
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	08 95       	ret

00000f6a <__floatunsisf>:
     f6a:	e8 94       	clt
     f6c:	09 c0       	rjmp	.+18     	; 0xf80 <__floatsisf+0x12>

00000f6e <__floatsisf>:
     f6e:	97 fb       	bst	r25, 7
     f70:	3e f4       	brtc	.+14     	; 0xf80 <__floatsisf+0x12>
     f72:	90 95       	com	r25
     f74:	80 95       	com	r24
     f76:	70 95       	com	r23
     f78:	61 95       	neg	r22
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	8f 4f       	sbci	r24, 0xFF	; 255
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	99 23       	and	r25, r25
     f82:	a9 f0       	breq	.+42     	; 0xfae <__floatsisf+0x40>
     f84:	f9 2f       	mov	r31, r25
     f86:	96 e9       	ldi	r25, 0x96	; 150
     f88:	bb 27       	eor	r27, r27
     f8a:	93 95       	inc	r25
     f8c:	f6 95       	lsr	r31
     f8e:	87 95       	ror	r24
     f90:	77 95       	ror	r23
     f92:	67 95       	ror	r22
     f94:	b7 95       	ror	r27
     f96:	f1 11       	cpse	r31, r1
     f98:	f8 cf       	rjmp	.-16     	; 0xf8a <__floatsisf+0x1c>
     f9a:	fa f4       	brpl	.+62     	; 0xfda <__floatsisf+0x6c>
     f9c:	bb 0f       	add	r27, r27
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <__floatsisf+0x36>
     fa0:	60 ff       	sbrs	r22, 0
     fa2:	1b c0       	rjmp	.+54     	; 0xfda <__floatsisf+0x6c>
     fa4:	6f 5f       	subi	r22, 0xFF	; 255
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	8f 4f       	sbci	r24, 0xFF	; 255
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	16 c0       	rjmp	.+44     	; 0xfda <__floatsisf+0x6c>
     fae:	88 23       	and	r24, r24
     fb0:	11 f0       	breq	.+4      	; 0xfb6 <__floatsisf+0x48>
     fb2:	96 e9       	ldi	r25, 0x96	; 150
     fb4:	11 c0       	rjmp	.+34     	; 0xfd8 <__floatsisf+0x6a>
     fb6:	77 23       	and	r23, r23
     fb8:	21 f0       	breq	.+8      	; 0xfc2 <__floatsisf+0x54>
     fba:	9e e8       	ldi	r25, 0x8E	; 142
     fbc:	87 2f       	mov	r24, r23
     fbe:	76 2f       	mov	r23, r22
     fc0:	05 c0       	rjmp	.+10     	; 0xfcc <__floatsisf+0x5e>
     fc2:	66 23       	and	r22, r22
     fc4:	71 f0       	breq	.+28     	; 0xfe2 <__floatsisf+0x74>
     fc6:	96 e8       	ldi	r25, 0x86	; 134
     fc8:	86 2f       	mov	r24, r22
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	2a f0       	brmi	.+10     	; 0xfda <__floatsisf+0x6c>
     fd0:	9a 95       	dec	r25
     fd2:	66 0f       	add	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	88 1f       	adc	r24, r24
     fd8:	da f7       	brpl	.-10     	; 0xfd0 <__floatsisf+0x62>
     fda:	88 0f       	add	r24, r24
     fdc:	96 95       	lsr	r25
     fde:	87 95       	ror	r24
     fe0:	97 f9       	bld	r25, 7
     fe2:	08 95       	ret

00000fe4 <__fp_inf>:
     fe4:	97 f9       	bld	r25, 7
     fe6:	9f 67       	ori	r25, 0x7F	; 127
     fe8:	80 e8       	ldi	r24, 0x80	; 128
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	08 95       	ret

00000ff0 <__fp_nan>:
     ff0:	9f ef       	ldi	r25, 0xFF	; 255
     ff2:	80 ec       	ldi	r24, 0xC0	; 192
     ff4:	08 95       	ret

00000ff6 <__fp_pscA>:
     ff6:	00 24       	eor	r0, r0
     ff8:	0a 94       	dec	r0
     ffa:	16 16       	cp	r1, r22
     ffc:	17 06       	cpc	r1, r23
     ffe:	18 06       	cpc	r1, r24
    1000:	09 06       	cpc	r0, r25
    1002:	08 95       	ret

00001004 <__fp_pscB>:
    1004:	00 24       	eor	r0, r0
    1006:	0a 94       	dec	r0
    1008:	12 16       	cp	r1, r18
    100a:	13 06       	cpc	r1, r19
    100c:	14 06       	cpc	r1, r20
    100e:	05 06       	cpc	r0, r21
    1010:	08 95       	ret

00001012 <__fp_round>:
    1012:	09 2e       	mov	r0, r25
    1014:	03 94       	inc	r0
    1016:	00 0c       	add	r0, r0
    1018:	11 f4       	brne	.+4      	; 0x101e <__fp_round+0xc>
    101a:	88 23       	and	r24, r24
    101c:	52 f0       	brmi	.+20     	; 0x1032 <__fp_round+0x20>
    101e:	bb 0f       	add	r27, r27
    1020:	40 f4       	brcc	.+16     	; 0x1032 <__fp_round+0x20>
    1022:	bf 2b       	or	r27, r31
    1024:	11 f4       	brne	.+4      	; 0x102a <__fp_round+0x18>
    1026:	60 ff       	sbrs	r22, 0
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <__fp_round+0x20>
    102a:	6f 5f       	subi	r22, 0xFF	; 255
    102c:	7f 4f       	sbci	r23, 0xFF	; 255
    102e:	8f 4f       	sbci	r24, 0xFF	; 255
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	08 95       	ret

00001034 <__fp_split3>:
    1034:	57 fd       	sbrc	r21, 7
    1036:	90 58       	subi	r25, 0x80	; 128
    1038:	44 0f       	add	r20, r20
    103a:	55 1f       	adc	r21, r21
    103c:	59 f0       	breq	.+22     	; 0x1054 <__fp_splitA+0x10>
    103e:	5f 3f       	cpi	r21, 0xFF	; 255
    1040:	71 f0       	breq	.+28     	; 0x105e <__fp_splitA+0x1a>
    1042:	47 95       	ror	r20

00001044 <__fp_splitA>:
    1044:	88 0f       	add	r24, r24
    1046:	97 fb       	bst	r25, 7
    1048:	99 1f       	adc	r25, r25
    104a:	61 f0       	breq	.+24     	; 0x1064 <__fp_splitA+0x20>
    104c:	9f 3f       	cpi	r25, 0xFF	; 255
    104e:	79 f0       	breq	.+30     	; 0x106e <__fp_splitA+0x2a>
    1050:	87 95       	ror	r24
    1052:	08 95       	ret
    1054:	12 16       	cp	r1, r18
    1056:	13 06       	cpc	r1, r19
    1058:	14 06       	cpc	r1, r20
    105a:	55 1f       	adc	r21, r21
    105c:	f2 cf       	rjmp	.-28     	; 0x1042 <__fp_split3+0xe>
    105e:	46 95       	lsr	r20
    1060:	f1 df       	rcall	.-30     	; 0x1044 <__fp_splitA>
    1062:	08 c0       	rjmp	.+16     	; 0x1074 <__fp_splitA+0x30>
    1064:	16 16       	cp	r1, r22
    1066:	17 06       	cpc	r1, r23
    1068:	18 06       	cpc	r1, r24
    106a:	99 1f       	adc	r25, r25
    106c:	f1 cf       	rjmp	.-30     	; 0x1050 <__fp_splitA+0xc>
    106e:	86 95       	lsr	r24
    1070:	71 05       	cpc	r23, r1
    1072:	61 05       	cpc	r22, r1
    1074:	08 94       	sec
    1076:	08 95       	ret

00001078 <__fp_zero>:
    1078:	e8 94       	clt

0000107a <__fp_szero>:
    107a:	bb 27       	eor	r27, r27
    107c:	66 27       	eor	r22, r22
    107e:	77 27       	eor	r23, r23
    1080:	cb 01       	movw	r24, r22
    1082:	97 f9       	bld	r25, 7
    1084:	08 95       	ret

00001086 <__mulsf3>:
    1086:	0b d0       	rcall	.+22     	; 0x109e <__mulsf3x>
    1088:	c4 cf       	rjmp	.-120    	; 0x1012 <__fp_round>
    108a:	b5 df       	rcall	.-150    	; 0xff6 <__fp_pscA>
    108c:	28 f0       	brcs	.+10     	; 0x1098 <__mulsf3+0x12>
    108e:	ba df       	rcall	.-140    	; 0x1004 <__fp_pscB>
    1090:	18 f0       	brcs	.+6      	; 0x1098 <__mulsf3+0x12>
    1092:	95 23       	and	r25, r21
    1094:	09 f0       	breq	.+2      	; 0x1098 <__mulsf3+0x12>
    1096:	a6 cf       	rjmp	.-180    	; 0xfe4 <__fp_inf>
    1098:	ab cf       	rjmp	.-170    	; 0xff0 <__fp_nan>
    109a:	11 24       	eor	r1, r1
    109c:	ee cf       	rjmp	.-36     	; 0x107a <__fp_szero>

0000109e <__mulsf3x>:
    109e:	ca df       	rcall	.-108    	; 0x1034 <__fp_split3>
    10a0:	a0 f3       	brcs	.-24     	; 0x108a <__mulsf3+0x4>

000010a2 <__mulsf3_pse>:
    10a2:	95 9f       	mul	r25, r21
    10a4:	d1 f3       	breq	.-12     	; 0x109a <__mulsf3+0x14>
    10a6:	95 0f       	add	r25, r21
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	55 1f       	adc	r21, r21
    10ac:	62 9f       	mul	r22, r18
    10ae:	f0 01       	movw	r30, r0
    10b0:	72 9f       	mul	r23, r18
    10b2:	bb 27       	eor	r27, r27
    10b4:	f0 0d       	add	r31, r0
    10b6:	b1 1d       	adc	r27, r1
    10b8:	63 9f       	mul	r22, r19
    10ba:	aa 27       	eor	r26, r26
    10bc:	f0 0d       	add	r31, r0
    10be:	b1 1d       	adc	r27, r1
    10c0:	aa 1f       	adc	r26, r26
    10c2:	64 9f       	mul	r22, r20
    10c4:	66 27       	eor	r22, r22
    10c6:	b0 0d       	add	r27, r0
    10c8:	a1 1d       	adc	r26, r1
    10ca:	66 1f       	adc	r22, r22
    10cc:	82 9f       	mul	r24, r18
    10ce:	22 27       	eor	r18, r18
    10d0:	b0 0d       	add	r27, r0
    10d2:	a1 1d       	adc	r26, r1
    10d4:	62 1f       	adc	r22, r18
    10d6:	73 9f       	mul	r23, r19
    10d8:	b0 0d       	add	r27, r0
    10da:	a1 1d       	adc	r26, r1
    10dc:	62 1f       	adc	r22, r18
    10de:	83 9f       	mul	r24, r19
    10e0:	a0 0d       	add	r26, r0
    10e2:	61 1d       	adc	r22, r1
    10e4:	22 1f       	adc	r18, r18
    10e6:	74 9f       	mul	r23, r20
    10e8:	33 27       	eor	r19, r19
    10ea:	a0 0d       	add	r26, r0
    10ec:	61 1d       	adc	r22, r1
    10ee:	23 1f       	adc	r18, r19
    10f0:	84 9f       	mul	r24, r20
    10f2:	60 0d       	add	r22, r0
    10f4:	21 1d       	adc	r18, r1
    10f6:	82 2f       	mov	r24, r18
    10f8:	76 2f       	mov	r23, r22
    10fa:	6a 2f       	mov	r22, r26
    10fc:	11 24       	eor	r1, r1
    10fe:	9f 57       	subi	r25, 0x7F	; 127
    1100:	50 40       	sbci	r21, 0x00	; 0
    1102:	8a f0       	brmi	.+34     	; 0x1126 <__stack+0x27>
    1104:	e1 f0       	breq	.+56     	; 0x113e <__stack+0x3f>
    1106:	88 23       	and	r24, r24
    1108:	4a f0       	brmi	.+18     	; 0x111c <__stack+0x1d>
    110a:	ee 0f       	add	r30, r30
    110c:	ff 1f       	adc	r31, r31
    110e:	bb 1f       	adc	r27, r27
    1110:	66 1f       	adc	r22, r22
    1112:	77 1f       	adc	r23, r23
    1114:	88 1f       	adc	r24, r24
    1116:	91 50       	subi	r25, 0x01	; 1
    1118:	50 40       	sbci	r21, 0x00	; 0
    111a:	a9 f7       	brne	.-22     	; 0x1106 <__stack+0x7>
    111c:	9e 3f       	cpi	r25, 0xFE	; 254
    111e:	51 05       	cpc	r21, r1
    1120:	70 f0       	brcs	.+28     	; 0x113e <__stack+0x3f>
    1122:	60 cf       	rjmp	.-320    	; 0xfe4 <__fp_inf>
    1124:	aa cf       	rjmp	.-172    	; 0x107a <__fp_szero>
    1126:	5f 3f       	cpi	r21, 0xFF	; 255
    1128:	ec f3       	brlt	.-6      	; 0x1124 <__stack+0x25>
    112a:	98 3e       	cpi	r25, 0xE8	; 232
    112c:	dc f3       	brlt	.-10     	; 0x1124 <__stack+0x25>
    112e:	86 95       	lsr	r24
    1130:	77 95       	ror	r23
    1132:	67 95       	ror	r22
    1134:	b7 95       	ror	r27
    1136:	f7 95       	ror	r31
    1138:	e7 95       	ror	r30
    113a:	9f 5f       	subi	r25, 0xFF	; 255
    113c:	c1 f7       	brne	.-16     	; 0x112e <__stack+0x2f>
    113e:	fe 2b       	or	r31, r30
    1140:	88 0f       	add	r24, r24
    1142:	91 1d       	adc	r25, r1
    1144:	96 95       	lsr	r25
    1146:	87 95       	ror	r24
    1148:	97 f9       	bld	r25, 7
    114a:	08 95       	ret

0000114c <__divmodhi4>:
    114c:	97 fb       	bst	r25, 7
    114e:	07 2e       	mov	r0, r23
    1150:	16 f4       	brtc	.+4      	; 0x1156 <__divmodhi4+0xa>
    1152:	00 94       	com	r0
    1154:	06 d0       	rcall	.+12     	; 0x1162 <__divmodhi4_neg1>
    1156:	77 fd       	sbrc	r23, 7
    1158:	08 d0       	rcall	.+16     	; 0x116a <__divmodhi4_neg2>
    115a:	2d d0       	rcall	.+90     	; 0x11b6 <__udivmodhi4>
    115c:	07 fc       	sbrc	r0, 7
    115e:	05 d0       	rcall	.+10     	; 0x116a <__divmodhi4_neg2>
    1160:	3e f4       	brtc	.+14     	; 0x1170 <__divmodhi4_exit>

00001162 <__divmodhi4_neg1>:
    1162:	90 95       	com	r25
    1164:	81 95       	neg	r24
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	08 95       	ret

0000116a <__divmodhi4_neg2>:
    116a:	70 95       	com	r23
    116c:	61 95       	neg	r22
    116e:	7f 4f       	sbci	r23, 0xFF	; 255

00001170 <__divmodhi4_exit>:
    1170:	08 95       	ret

00001172 <__udivmodsi4>:
    1172:	a1 e2       	ldi	r26, 0x21	; 33
    1174:	1a 2e       	mov	r1, r26
    1176:	aa 1b       	sub	r26, r26
    1178:	bb 1b       	sub	r27, r27
    117a:	fd 01       	movw	r30, r26
    117c:	0d c0       	rjmp	.+26     	; 0x1198 <__udivmodsi4_ep>

0000117e <__udivmodsi4_loop>:
    117e:	aa 1f       	adc	r26, r26
    1180:	bb 1f       	adc	r27, r27
    1182:	ee 1f       	adc	r30, r30
    1184:	ff 1f       	adc	r31, r31
    1186:	a2 17       	cp	r26, r18
    1188:	b3 07       	cpc	r27, r19
    118a:	e4 07       	cpc	r30, r20
    118c:	f5 07       	cpc	r31, r21
    118e:	20 f0       	brcs	.+8      	; 0x1198 <__udivmodsi4_ep>
    1190:	a2 1b       	sub	r26, r18
    1192:	b3 0b       	sbc	r27, r19
    1194:	e4 0b       	sbc	r30, r20
    1196:	f5 0b       	sbc	r31, r21

00001198 <__udivmodsi4_ep>:
    1198:	66 1f       	adc	r22, r22
    119a:	77 1f       	adc	r23, r23
    119c:	88 1f       	adc	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	1a 94       	dec	r1
    11a2:	69 f7       	brne	.-38     	; 0x117e <__udivmodsi4_loop>
    11a4:	60 95       	com	r22
    11a6:	70 95       	com	r23
    11a8:	80 95       	com	r24
    11aa:	90 95       	com	r25
    11ac:	9b 01       	movw	r18, r22
    11ae:	ac 01       	movw	r20, r24
    11b0:	bd 01       	movw	r22, r26
    11b2:	cf 01       	movw	r24, r30
    11b4:	08 95       	ret

000011b6 <__udivmodhi4>:
    11b6:	aa 1b       	sub	r26, r26
    11b8:	bb 1b       	sub	r27, r27
    11ba:	51 e1       	ldi	r21, 0x11	; 17
    11bc:	07 c0       	rjmp	.+14     	; 0x11cc <__udivmodhi4_ep>

000011be <__udivmodhi4_loop>:
    11be:	aa 1f       	adc	r26, r26
    11c0:	bb 1f       	adc	r27, r27
    11c2:	a6 17       	cp	r26, r22
    11c4:	b7 07       	cpc	r27, r23
    11c6:	10 f0       	brcs	.+4      	; 0x11cc <__udivmodhi4_ep>
    11c8:	a6 1b       	sub	r26, r22
    11ca:	b7 0b       	sbc	r27, r23

000011cc <__udivmodhi4_ep>:
    11cc:	88 1f       	adc	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	5a 95       	dec	r21
    11d2:	a9 f7       	brne	.-22     	; 0x11be <__udivmodhi4_loop>
    11d4:	80 95       	com	r24
    11d6:	90 95       	com	r25
    11d8:	bc 01       	movw	r22, r24
    11da:	cd 01       	movw	r24, r26
    11dc:	08 95       	ret

000011de <sprintf>:
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	2e 97       	sbiw	r28, 0x0e	; 14
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	0d 89       	ldd	r16, Y+21	; 0x15
    11f8:	1e 89       	ldd	r17, Y+22	; 0x16
    11fa:	86 e0       	ldi	r24, 0x06	; 6
    11fc:	8c 83       	std	Y+4, r24	; 0x04
    11fe:	1a 83       	std	Y+2, r17	; 0x02
    1200:	09 83       	std	Y+1, r16	; 0x01
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	9f e7       	ldi	r25, 0x7F	; 127
    1206:	9e 83       	std	Y+6, r25	; 0x06
    1208:	8d 83       	std	Y+5, r24	; 0x05
    120a:	ae 01       	movw	r20, r28
    120c:	47 5e       	subi	r20, 0xE7	; 231
    120e:	5f 4f       	sbci	r21, 0xFF	; 255
    1210:	6f 89       	ldd	r22, Y+23	; 0x17
    1212:	78 8d       	ldd	r23, Y+24	; 0x18
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	10 d0       	rcall	.+32     	; 0x123a <vfprintf>
    121a:	ef 81       	ldd	r30, Y+7	; 0x07
    121c:	f8 85       	ldd	r31, Y+8	; 0x08
    121e:	e0 0f       	add	r30, r16
    1220:	f1 1f       	adc	r31, r17
    1222:	10 82       	st	Z, r1
    1224:	2e 96       	adiw	r28, 0x0e	; 14
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	08 95       	ret

0000123a <vfprintf>:
    123a:	2f 92       	push	r2
    123c:	3f 92       	push	r3
    123e:	4f 92       	push	r4
    1240:	5f 92       	push	r5
    1242:	6f 92       	push	r6
    1244:	7f 92       	push	r7
    1246:	8f 92       	push	r8
    1248:	9f 92       	push	r9
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	2b 97       	sbiw	r28, 0x0b	; 11
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	6c 01       	movw	r12, r24
    1270:	7b 01       	movw	r14, r22
    1272:	8a 01       	movw	r16, r20
    1274:	fc 01       	movw	r30, r24
    1276:	17 82       	std	Z+7, r1	; 0x07
    1278:	16 82       	std	Z+6, r1	; 0x06
    127a:	83 81       	ldd	r24, Z+3	; 0x03
    127c:	81 ff       	sbrs	r24, 1
    127e:	bf c1       	rjmp	.+894    	; 0x15fe <vfprintf+0x3c4>
    1280:	ce 01       	movw	r24, r28
    1282:	01 96       	adiw	r24, 0x01	; 1
    1284:	3c 01       	movw	r6, r24
    1286:	f6 01       	movw	r30, r12
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	f7 01       	movw	r30, r14
    128c:	93 fd       	sbrc	r25, 3
    128e:	85 91       	lpm	r24, Z+
    1290:	93 ff       	sbrs	r25, 3
    1292:	81 91       	ld	r24, Z+
    1294:	7f 01       	movw	r14, r30
    1296:	88 23       	and	r24, r24
    1298:	09 f4       	brne	.+2      	; 0x129c <vfprintf+0x62>
    129a:	ad c1       	rjmp	.+858    	; 0x15f6 <vfprintf+0x3bc>
    129c:	85 32       	cpi	r24, 0x25	; 37
    129e:	39 f4       	brne	.+14     	; 0x12ae <vfprintf+0x74>
    12a0:	93 fd       	sbrc	r25, 3
    12a2:	85 91       	lpm	r24, Z+
    12a4:	93 ff       	sbrs	r25, 3
    12a6:	81 91       	ld	r24, Z+
    12a8:	7f 01       	movw	r14, r30
    12aa:	85 32       	cpi	r24, 0x25	; 37
    12ac:	21 f4       	brne	.+8      	; 0x12b6 <vfprintf+0x7c>
    12ae:	b6 01       	movw	r22, r12
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	d6 d1       	rcall	.+940    	; 0x1660 <fputc>
    12b4:	e8 cf       	rjmp	.-48     	; 0x1286 <vfprintf+0x4c>
    12b6:	91 2c       	mov	r9, r1
    12b8:	21 2c       	mov	r2, r1
    12ba:	31 2c       	mov	r3, r1
    12bc:	ff e1       	ldi	r31, 0x1F	; 31
    12be:	f3 15       	cp	r31, r3
    12c0:	d8 f0       	brcs	.+54     	; 0x12f8 <vfprintf+0xbe>
    12c2:	8b 32       	cpi	r24, 0x2B	; 43
    12c4:	79 f0       	breq	.+30     	; 0x12e4 <vfprintf+0xaa>
    12c6:	38 f4       	brcc	.+14     	; 0x12d6 <vfprintf+0x9c>
    12c8:	80 32       	cpi	r24, 0x20	; 32
    12ca:	79 f0       	breq	.+30     	; 0x12ea <vfprintf+0xb0>
    12cc:	83 32       	cpi	r24, 0x23	; 35
    12ce:	a1 f4       	brne	.+40     	; 0x12f8 <vfprintf+0xbe>
    12d0:	23 2d       	mov	r18, r3
    12d2:	20 61       	ori	r18, 0x10	; 16
    12d4:	1d c0       	rjmp	.+58     	; 0x1310 <vfprintf+0xd6>
    12d6:	8d 32       	cpi	r24, 0x2D	; 45
    12d8:	61 f0       	breq	.+24     	; 0x12f2 <vfprintf+0xb8>
    12da:	80 33       	cpi	r24, 0x30	; 48
    12dc:	69 f4       	brne	.+26     	; 0x12f8 <vfprintf+0xbe>
    12de:	23 2d       	mov	r18, r3
    12e0:	21 60       	ori	r18, 0x01	; 1
    12e2:	16 c0       	rjmp	.+44     	; 0x1310 <vfprintf+0xd6>
    12e4:	83 2d       	mov	r24, r3
    12e6:	82 60       	ori	r24, 0x02	; 2
    12e8:	38 2e       	mov	r3, r24
    12ea:	e3 2d       	mov	r30, r3
    12ec:	e4 60       	ori	r30, 0x04	; 4
    12ee:	3e 2e       	mov	r3, r30
    12f0:	2a c0       	rjmp	.+84     	; 0x1346 <vfprintf+0x10c>
    12f2:	f3 2d       	mov	r31, r3
    12f4:	f8 60       	ori	r31, 0x08	; 8
    12f6:	1d c0       	rjmp	.+58     	; 0x1332 <vfprintf+0xf8>
    12f8:	37 fc       	sbrc	r3, 7
    12fa:	2d c0       	rjmp	.+90     	; 0x1356 <vfprintf+0x11c>
    12fc:	20 ed       	ldi	r18, 0xD0	; 208
    12fe:	28 0f       	add	r18, r24
    1300:	2a 30       	cpi	r18, 0x0A	; 10
    1302:	40 f0       	brcs	.+16     	; 0x1314 <vfprintf+0xda>
    1304:	8e 32       	cpi	r24, 0x2E	; 46
    1306:	b9 f4       	brne	.+46     	; 0x1336 <vfprintf+0xfc>
    1308:	36 fc       	sbrc	r3, 6
    130a:	75 c1       	rjmp	.+746    	; 0x15f6 <vfprintf+0x3bc>
    130c:	23 2d       	mov	r18, r3
    130e:	20 64       	ori	r18, 0x40	; 64
    1310:	32 2e       	mov	r3, r18
    1312:	19 c0       	rjmp	.+50     	; 0x1346 <vfprintf+0x10c>
    1314:	36 fe       	sbrs	r3, 6
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <vfprintf+0xea>
    1318:	8a e0       	ldi	r24, 0x0A	; 10
    131a:	98 9e       	mul	r9, r24
    131c:	20 0d       	add	r18, r0
    131e:	11 24       	eor	r1, r1
    1320:	92 2e       	mov	r9, r18
    1322:	11 c0       	rjmp	.+34     	; 0x1346 <vfprintf+0x10c>
    1324:	ea e0       	ldi	r30, 0x0A	; 10
    1326:	2e 9e       	mul	r2, r30
    1328:	20 0d       	add	r18, r0
    132a:	11 24       	eor	r1, r1
    132c:	22 2e       	mov	r2, r18
    132e:	f3 2d       	mov	r31, r3
    1330:	f0 62       	ori	r31, 0x20	; 32
    1332:	3f 2e       	mov	r3, r31
    1334:	08 c0       	rjmp	.+16     	; 0x1346 <vfprintf+0x10c>
    1336:	8c 36       	cpi	r24, 0x6C	; 108
    1338:	21 f4       	brne	.+8      	; 0x1342 <vfprintf+0x108>
    133a:	83 2d       	mov	r24, r3
    133c:	80 68       	ori	r24, 0x80	; 128
    133e:	38 2e       	mov	r3, r24
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <vfprintf+0x10c>
    1342:	88 36       	cpi	r24, 0x68	; 104
    1344:	41 f4       	brne	.+16     	; 0x1356 <vfprintf+0x11c>
    1346:	f7 01       	movw	r30, r14
    1348:	93 fd       	sbrc	r25, 3
    134a:	85 91       	lpm	r24, Z+
    134c:	93 ff       	sbrs	r25, 3
    134e:	81 91       	ld	r24, Z+
    1350:	7f 01       	movw	r14, r30
    1352:	81 11       	cpse	r24, r1
    1354:	b3 cf       	rjmp	.-154    	; 0x12bc <vfprintf+0x82>
    1356:	98 2f       	mov	r25, r24
    1358:	9f 7d       	andi	r25, 0xDF	; 223
    135a:	95 54       	subi	r25, 0x45	; 69
    135c:	93 30       	cpi	r25, 0x03	; 3
    135e:	28 f4       	brcc	.+10     	; 0x136a <vfprintf+0x130>
    1360:	0c 5f       	subi	r16, 0xFC	; 252
    1362:	1f 4f       	sbci	r17, 0xFF	; 255
    1364:	9f e3       	ldi	r25, 0x3F	; 63
    1366:	99 83       	std	Y+1, r25	; 0x01
    1368:	0d c0       	rjmp	.+26     	; 0x1384 <vfprintf+0x14a>
    136a:	83 36       	cpi	r24, 0x63	; 99
    136c:	31 f0       	breq	.+12     	; 0x137a <vfprintf+0x140>
    136e:	83 37       	cpi	r24, 0x73	; 115
    1370:	71 f0       	breq	.+28     	; 0x138e <vfprintf+0x154>
    1372:	83 35       	cpi	r24, 0x53	; 83
    1374:	09 f0       	breq	.+2      	; 0x1378 <vfprintf+0x13e>
    1376:	55 c0       	rjmp	.+170    	; 0x1422 <vfprintf+0x1e8>
    1378:	20 c0       	rjmp	.+64     	; 0x13ba <vfprintf+0x180>
    137a:	f8 01       	movw	r30, r16
    137c:	80 81       	ld	r24, Z
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	0e 5f       	subi	r16, 0xFE	; 254
    1382:	1f 4f       	sbci	r17, 0xFF	; 255
    1384:	88 24       	eor	r8, r8
    1386:	83 94       	inc	r8
    1388:	91 2c       	mov	r9, r1
    138a:	53 01       	movw	r10, r6
    138c:	12 c0       	rjmp	.+36     	; 0x13b2 <vfprintf+0x178>
    138e:	28 01       	movw	r4, r16
    1390:	f2 e0       	ldi	r31, 0x02	; 2
    1392:	4f 0e       	add	r4, r31
    1394:	51 1c       	adc	r5, r1
    1396:	f8 01       	movw	r30, r16
    1398:	a0 80       	ld	r10, Z
    139a:	b1 80       	ldd	r11, Z+1	; 0x01
    139c:	36 fe       	sbrs	r3, 6
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <vfprintf+0x16c>
    13a0:	69 2d       	mov	r22, r9
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <vfprintf+0x170>
    13a6:	6f ef       	ldi	r22, 0xFF	; 255
    13a8:	7f ef       	ldi	r23, 0xFF	; 255
    13aa:	c5 01       	movw	r24, r10
    13ac:	4e d1       	rcall	.+668    	; 0x164a <strnlen>
    13ae:	4c 01       	movw	r8, r24
    13b0:	82 01       	movw	r16, r4
    13b2:	f3 2d       	mov	r31, r3
    13b4:	ff 77       	andi	r31, 0x7F	; 127
    13b6:	3f 2e       	mov	r3, r31
    13b8:	15 c0       	rjmp	.+42     	; 0x13e4 <vfprintf+0x1aa>
    13ba:	28 01       	movw	r4, r16
    13bc:	22 e0       	ldi	r18, 0x02	; 2
    13be:	42 0e       	add	r4, r18
    13c0:	51 1c       	adc	r5, r1
    13c2:	f8 01       	movw	r30, r16
    13c4:	a0 80       	ld	r10, Z
    13c6:	b1 80       	ldd	r11, Z+1	; 0x01
    13c8:	36 fe       	sbrs	r3, 6
    13ca:	03 c0       	rjmp	.+6      	; 0x13d2 <vfprintf+0x198>
    13cc:	69 2d       	mov	r22, r9
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <vfprintf+0x19c>
    13d2:	6f ef       	ldi	r22, 0xFF	; 255
    13d4:	7f ef       	ldi	r23, 0xFF	; 255
    13d6:	c5 01       	movw	r24, r10
    13d8:	2d d1       	rcall	.+602    	; 0x1634 <strnlen_P>
    13da:	4c 01       	movw	r8, r24
    13dc:	f3 2d       	mov	r31, r3
    13de:	f0 68       	ori	r31, 0x80	; 128
    13e0:	3f 2e       	mov	r3, r31
    13e2:	82 01       	movw	r16, r4
    13e4:	33 fc       	sbrc	r3, 3
    13e6:	19 c0       	rjmp	.+50     	; 0x141a <vfprintf+0x1e0>
    13e8:	82 2d       	mov	r24, r2
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	88 16       	cp	r8, r24
    13ee:	99 06       	cpc	r9, r25
    13f0:	a0 f4       	brcc	.+40     	; 0x141a <vfprintf+0x1e0>
    13f2:	b6 01       	movw	r22, r12
    13f4:	80 e2       	ldi	r24, 0x20	; 32
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	33 d1       	rcall	.+614    	; 0x1660 <fputc>
    13fa:	2a 94       	dec	r2
    13fc:	f5 cf       	rjmp	.-22     	; 0x13e8 <vfprintf+0x1ae>
    13fe:	f5 01       	movw	r30, r10
    1400:	37 fc       	sbrc	r3, 7
    1402:	85 91       	lpm	r24, Z+
    1404:	37 fe       	sbrs	r3, 7
    1406:	81 91       	ld	r24, Z+
    1408:	5f 01       	movw	r10, r30
    140a:	b6 01       	movw	r22, r12
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	28 d1       	rcall	.+592    	; 0x1660 <fputc>
    1410:	21 10       	cpse	r2, r1
    1412:	2a 94       	dec	r2
    1414:	21 e0       	ldi	r18, 0x01	; 1
    1416:	82 1a       	sub	r8, r18
    1418:	91 08       	sbc	r9, r1
    141a:	81 14       	cp	r8, r1
    141c:	91 04       	cpc	r9, r1
    141e:	79 f7       	brne	.-34     	; 0x13fe <vfprintf+0x1c4>
    1420:	e1 c0       	rjmp	.+450    	; 0x15e4 <vfprintf+0x3aa>
    1422:	84 36       	cpi	r24, 0x64	; 100
    1424:	11 f0       	breq	.+4      	; 0x142a <vfprintf+0x1f0>
    1426:	89 36       	cpi	r24, 0x69	; 105
    1428:	39 f5       	brne	.+78     	; 0x1478 <vfprintf+0x23e>
    142a:	f8 01       	movw	r30, r16
    142c:	37 fe       	sbrs	r3, 7
    142e:	07 c0       	rjmp	.+14     	; 0x143e <vfprintf+0x204>
    1430:	60 81       	ld	r22, Z
    1432:	71 81       	ldd	r23, Z+1	; 0x01
    1434:	82 81       	ldd	r24, Z+2	; 0x02
    1436:	93 81       	ldd	r25, Z+3	; 0x03
    1438:	0c 5f       	subi	r16, 0xFC	; 252
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    143c:	08 c0       	rjmp	.+16     	; 0x144e <vfprintf+0x214>
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	07 2e       	mov	r0, r23
    1444:	00 0c       	add	r0, r0
    1446:	88 0b       	sbc	r24, r24
    1448:	99 0b       	sbc	r25, r25
    144a:	0e 5f       	subi	r16, 0xFE	; 254
    144c:	1f 4f       	sbci	r17, 0xFF	; 255
    144e:	f3 2d       	mov	r31, r3
    1450:	ff 76       	andi	r31, 0x6F	; 111
    1452:	3f 2e       	mov	r3, r31
    1454:	97 ff       	sbrs	r25, 7
    1456:	09 c0       	rjmp	.+18     	; 0x146a <vfprintf+0x230>
    1458:	90 95       	com	r25
    145a:	80 95       	com	r24
    145c:	70 95       	com	r23
    145e:	61 95       	neg	r22
    1460:	7f 4f       	sbci	r23, 0xFF	; 255
    1462:	8f 4f       	sbci	r24, 0xFF	; 255
    1464:	9f 4f       	sbci	r25, 0xFF	; 255
    1466:	f0 68       	ori	r31, 0x80	; 128
    1468:	3f 2e       	mov	r3, r31
    146a:	2a e0       	ldi	r18, 0x0A	; 10
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	a3 01       	movw	r20, r6
    1470:	33 d1       	rcall	.+614    	; 0x16d8 <__ultoa_invert>
    1472:	88 2e       	mov	r8, r24
    1474:	86 18       	sub	r8, r6
    1476:	44 c0       	rjmp	.+136    	; 0x1500 <vfprintf+0x2c6>
    1478:	85 37       	cpi	r24, 0x75	; 117
    147a:	31 f4       	brne	.+12     	; 0x1488 <vfprintf+0x24e>
    147c:	23 2d       	mov	r18, r3
    147e:	2f 7e       	andi	r18, 0xEF	; 239
    1480:	b2 2e       	mov	r11, r18
    1482:	2a e0       	ldi	r18, 0x0A	; 10
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	25 c0       	rjmp	.+74     	; 0x14d2 <vfprintf+0x298>
    1488:	93 2d       	mov	r25, r3
    148a:	99 7f       	andi	r25, 0xF9	; 249
    148c:	b9 2e       	mov	r11, r25
    148e:	8f 36       	cpi	r24, 0x6F	; 111
    1490:	c1 f0       	breq	.+48     	; 0x14c2 <vfprintf+0x288>
    1492:	18 f4       	brcc	.+6      	; 0x149a <vfprintf+0x260>
    1494:	88 35       	cpi	r24, 0x58	; 88
    1496:	79 f0       	breq	.+30     	; 0x14b6 <vfprintf+0x27c>
    1498:	ae c0       	rjmp	.+348    	; 0x15f6 <vfprintf+0x3bc>
    149a:	80 37       	cpi	r24, 0x70	; 112
    149c:	19 f0       	breq	.+6      	; 0x14a4 <vfprintf+0x26a>
    149e:	88 37       	cpi	r24, 0x78	; 120
    14a0:	21 f0       	breq	.+8      	; 0x14aa <vfprintf+0x270>
    14a2:	a9 c0       	rjmp	.+338    	; 0x15f6 <vfprintf+0x3bc>
    14a4:	e9 2f       	mov	r30, r25
    14a6:	e0 61       	ori	r30, 0x10	; 16
    14a8:	be 2e       	mov	r11, r30
    14aa:	b4 fe       	sbrs	r11, 4
    14ac:	0d c0       	rjmp	.+26     	; 0x14c8 <vfprintf+0x28e>
    14ae:	fb 2d       	mov	r31, r11
    14b0:	f4 60       	ori	r31, 0x04	; 4
    14b2:	bf 2e       	mov	r11, r31
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <vfprintf+0x28e>
    14b6:	34 fe       	sbrs	r3, 4
    14b8:	0a c0       	rjmp	.+20     	; 0x14ce <vfprintf+0x294>
    14ba:	29 2f       	mov	r18, r25
    14bc:	26 60       	ori	r18, 0x06	; 6
    14be:	b2 2e       	mov	r11, r18
    14c0:	06 c0       	rjmp	.+12     	; 0x14ce <vfprintf+0x294>
    14c2:	28 e0       	ldi	r18, 0x08	; 8
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	05 c0       	rjmp	.+10     	; 0x14d2 <vfprintf+0x298>
    14c8:	20 e1       	ldi	r18, 0x10	; 16
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <vfprintf+0x298>
    14ce:	20 e1       	ldi	r18, 0x10	; 16
    14d0:	32 e0       	ldi	r19, 0x02	; 2
    14d2:	f8 01       	movw	r30, r16
    14d4:	b7 fe       	sbrs	r11, 7
    14d6:	07 c0       	rjmp	.+14     	; 0x14e6 <vfprintf+0x2ac>
    14d8:	60 81       	ld	r22, Z
    14da:	71 81       	ldd	r23, Z+1	; 0x01
    14dc:	82 81       	ldd	r24, Z+2	; 0x02
    14de:	93 81       	ldd	r25, Z+3	; 0x03
    14e0:	0c 5f       	subi	r16, 0xFC	; 252
    14e2:	1f 4f       	sbci	r17, 0xFF	; 255
    14e4:	06 c0       	rjmp	.+12     	; 0x14f2 <vfprintf+0x2b8>
    14e6:	60 81       	ld	r22, Z
    14e8:	71 81       	ldd	r23, Z+1	; 0x01
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 5f       	subi	r16, 0xFE	; 254
    14f0:	1f 4f       	sbci	r17, 0xFF	; 255
    14f2:	a3 01       	movw	r20, r6
    14f4:	f1 d0       	rcall	.+482    	; 0x16d8 <__ultoa_invert>
    14f6:	88 2e       	mov	r8, r24
    14f8:	86 18       	sub	r8, r6
    14fa:	fb 2d       	mov	r31, r11
    14fc:	ff 77       	andi	r31, 0x7F	; 127
    14fe:	3f 2e       	mov	r3, r31
    1500:	36 fe       	sbrs	r3, 6
    1502:	0d c0       	rjmp	.+26     	; 0x151e <vfprintf+0x2e4>
    1504:	23 2d       	mov	r18, r3
    1506:	2e 7f       	andi	r18, 0xFE	; 254
    1508:	a2 2e       	mov	r10, r18
    150a:	89 14       	cp	r8, r9
    150c:	58 f4       	brcc	.+22     	; 0x1524 <vfprintf+0x2ea>
    150e:	34 fe       	sbrs	r3, 4
    1510:	0b c0       	rjmp	.+22     	; 0x1528 <vfprintf+0x2ee>
    1512:	32 fc       	sbrc	r3, 2
    1514:	09 c0       	rjmp	.+18     	; 0x1528 <vfprintf+0x2ee>
    1516:	83 2d       	mov	r24, r3
    1518:	8e 7e       	andi	r24, 0xEE	; 238
    151a:	a8 2e       	mov	r10, r24
    151c:	05 c0       	rjmp	.+10     	; 0x1528 <vfprintf+0x2ee>
    151e:	b8 2c       	mov	r11, r8
    1520:	a3 2c       	mov	r10, r3
    1522:	03 c0       	rjmp	.+6      	; 0x152a <vfprintf+0x2f0>
    1524:	b8 2c       	mov	r11, r8
    1526:	01 c0       	rjmp	.+2      	; 0x152a <vfprintf+0x2f0>
    1528:	b9 2c       	mov	r11, r9
    152a:	a4 fe       	sbrs	r10, 4
    152c:	0f c0       	rjmp	.+30     	; 0x154c <vfprintf+0x312>
    152e:	fe 01       	movw	r30, r28
    1530:	e8 0d       	add	r30, r8
    1532:	f1 1d       	adc	r31, r1
    1534:	80 81       	ld	r24, Z
    1536:	80 33       	cpi	r24, 0x30	; 48
    1538:	21 f4       	brne	.+8      	; 0x1542 <vfprintf+0x308>
    153a:	9a 2d       	mov	r25, r10
    153c:	99 7e       	andi	r25, 0xE9	; 233
    153e:	a9 2e       	mov	r10, r25
    1540:	09 c0       	rjmp	.+18     	; 0x1554 <vfprintf+0x31a>
    1542:	a2 fe       	sbrs	r10, 2
    1544:	06 c0       	rjmp	.+12     	; 0x1552 <vfprintf+0x318>
    1546:	b3 94       	inc	r11
    1548:	b3 94       	inc	r11
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <vfprintf+0x31a>
    154c:	8a 2d       	mov	r24, r10
    154e:	86 78       	andi	r24, 0x86	; 134
    1550:	09 f0       	breq	.+2      	; 0x1554 <vfprintf+0x31a>
    1552:	b3 94       	inc	r11
    1554:	a3 fc       	sbrc	r10, 3
    1556:	10 c0       	rjmp	.+32     	; 0x1578 <vfprintf+0x33e>
    1558:	a0 fe       	sbrs	r10, 0
    155a:	06 c0       	rjmp	.+12     	; 0x1568 <vfprintf+0x32e>
    155c:	b2 14       	cp	r11, r2
    155e:	80 f4       	brcc	.+32     	; 0x1580 <vfprintf+0x346>
    1560:	28 0c       	add	r2, r8
    1562:	92 2c       	mov	r9, r2
    1564:	9b 18       	sub	r9, r11
    1566:	0d c0       	rjmp	.+26     	; 0x1582 <vfprintf+0x348>
    1568:	b2 14       	cp	r11, r2
    156a:	58 f4       	brcc	.+22     	; 0x1582 <vfprintf+0x348>
    156c:	b6 01       	movw	r22, r12
    156e:	80 e2       	ldi	r24, 0x20	; 32
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	76 d0       	rcall	.+236    	; 0x1660 <fputc>
    1574:	b3 94       	inc	r11
    1576:	f8 cf       	rjmp	.-16     	; 0x1568 <vfprintf+0x32e>
    1578:	b2 14       	cp	r11, r2
    157a:	18 f4       	brcc	.+6      	; 0x1582 <vfprintf+0x348>
    157c:	2b 18       	sub	r2, r11
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <vfprintf+0x34a>
    1580:	98 2c       	mov	r9, r8
    1582:	21 2c       	mov	r2, r1
    1584:	a4 fe       	sbrs	r10, 4
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <vfprintf+0x36c>
    1588:	b6 01       	movw	r22, r12
    158a:	80 e3       	ldi	r24, 0x30	; 48
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	68 d0       	rcall	.+208    	; 0x1660 <fputc>
    1590:	a2 fe       	sbrs	r10, 2
    1592:	16 c0       	rjmp	.+44     	; 0x15c0 <vfprintf+0x386>
    1594:	a1 fc       	sbrc	r10, 1
    1596:	03 c0       	rjmp	.+6      	; 0x159e <vfprintf+0x364>
    1598:	88 e7       	ldi	r24, 0x78	; 120
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <vfprintf+0x368>
    159e:	88 e5       	ldi	r24, 0x58	; 88
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	b6 01       	movw	r22, r12
    15a4:	0c c0       	rjmp	.+24     	; 0x15be <vfprintf+0x384>
    15a6:	8a 2d       	mov	r24, r10
    15a8:	86 78       	andi	r24, 0x86	; 134
    15aa:	51 f0       	breq	.+20     	; 0x15c0 <vfprintf+0x386>
    15ac:	a1 fe       	sbrs	r10, 1
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <vfprintf+0x37a>
    15b0:	8b e2       	ldi	r24, 0x2B	; 43
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <vfprintf+0x37c>
    15b4:	80 e2       	ldi	r24, 0x20	; 32
    15b6:	a7 fc       	sbrc	r10, 7
    15b8:	8d e2       	ldi	r24, 0x2D	; 45
    15ba:	b6 01       	movw	r22, r12
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	50 d0       	rcall	.+160    	; 0x1660 <fputc>
    15c0:	89 14       	cp	r8, r9
    15c2:	30 f4       	brcc	.+12     	; 0x15d0 <vfprintf+0x396>
    15c4:	b6 01       	movw	r22, r12
    15c6:	80 e3       	ldi	r24, 0x30	; 48
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	4a d0       	rcall	.+148    	; 0x1660 <fputc>
    15cc:	9a 94       	dec	r9
    15ce:	f8 cf       	rjmp	.-16     	; 0x15c0 <vfprintf+0x386>
    15d0:	8a 94       	dec	r8
    15d2:	f3 01       	movw	r30, r6
    15d4:	e8 0d       	add	r30, r8
    15d6:	f1 1d       	adc	r31, r1
    15d8:	80 81       	ld	r24, Z
    15da:	b6 01       	movw	r22, r12
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	40 d0       	rcall	.+128    	; 0x1660 <fputc>
    15e0:	81 10       	cpse	r8, r1
    15e2:	f6 cf       	rjmp	.-20     	; 0x15d0 <vfprintf+0x396>
    15e4:	22 20       	and	r2, r2
    15e6:	09 f4       	brne	.+2      	; 0x15ea <vfprintf+0x3b0>
    15e8:	4e ce       	rjmp	.-868    	; 0x1286 <vfprintf+0x4c>
    15ea:	b6 01       	movw	r22, r12
    15ec:	80 e2       	ldi	r24, 0x20	; 32
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	37 d0       	rcall	.+110    	; 0x1660 <fputc>
    15f2:	2a 94       	dec	r2
    15f4:	f7 cf       	rjmp	.-18     	; 0x15e4 <vfprintf+0x3aa>
    15f6:	f6 01       	movw	r30, r12
    15f8:	86 81       	ldd	r24, Z+6	; 0x06
    15fa:	97 81       	ldd	r25, Z+7	; 0x07
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <vfprintf+0x3c8>
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	9f ef       	ldi	r25, 0xFF	; 255
    1602:	2b 96       	adiw	r28, 0x0b	; 11
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	df 90       	pop	r13
    161c:	cf 90       	pop	r12
    161e:	bf 90       	pop	r11
    1620:	af 90       	pop	r10
    1622:	9f 90       	pop	r9
    1624:	8f 90       	pop	r8
    1626:	7f 90       	pop	r7
    1628:	6f 90       	pop	r6
    162a:	5f 90       	pop	r5
    162c:	4f 90       	pop	r4
    162e:	3f 90       	pop	r3
    1630:	2f 90       	pop	r2
    1632:	08 95       	ret

00001634 <strnlen_P>:
    1634:	fc 01       	movw	r30, r24
    1636:	05 90       	lpm	r0, Z+
    1638:	61 50       	subi	r22, 0x01	; 1
    163a:	70 40       	sbci	r23, 0x00	; 0
    163c:	01 10       	cpse	r0, r1
    163e:	d8 f7       	brcc	.-10     	; 0x1636 <strnlen_P+0x2>
    1640:	80 95       	com	r24
    1642:	90 95       	com	r25
    1644:	8e 0f       	add	r24, r30
    1646:	9f 1f       	adc	r25, r31
    1648:	08 95       	ret

0000164a <strnlen>:
    164a:	fc 01       	movw	r30, r24
    164c:	61 50       	subi	r22, 0x01	; 1
    164e:	70 40       	sbci	r23, 0x00	; 0
    1650:	01 90       	ld	r0, Z+
    1652:	01 10       	cpse	r0, r1
    1654:	d8 f7       	brcc	.-10     	; 0x164c <strnlen+0x2>
    1656:	80 95       	com	r24
    1658:	90 95       	com	r25
    165a:	8e 0f       	add	r24, r30
    165c:	9f 1f       	adc	r25, r31
    165e:	08 95       	ret

00001660 <fputc>:
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	fb 01       	movw	r30, r22
    166a:	23 81       	ldd	r18, Z+3	; 0x03
    166c:	21 fd       	sbrc	r18, 1
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <fputc+0x16>
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	9f ef       	ldi	r25, 0xFF	; 255
    1674:	2c c0       	rjmp	.+88     	; 0x16ce <fputc+0x6e>
    1676:	22 ff       	sbrs	r18, 2
    1678:	16 c0       	rjmp	.+44     	; 0x16a6 <fputc+0x46>
    167a:	46 81       	ldd	r20, Z+6	; 0x06
    167c:	57 81       	ldd	r21, Z+7	; 0x07
    167e:	24 81       	ldd	r18, Z+4	; 0x04
    1680:	35 81       	ldd	r19, Z+5	; 0x05
    1682:	42 17       	cp	r20, r18
    1684:	53 07       	cpc	r21, r19
    1686:	44 f4       	brge	.+16     	; 0x1698 <fputc+0x38>
    1688:	a0 81       	ld	r26, Z
    168a:	b1 81       	ldd	r27, Z+1	; 0x01
    168c:	9d 01       	movw	r18, r26
    168e:	2f 5f       	subi	r18, 0xFF	; 255
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	31 83       	std	Z+1, r19	; 0x01
    1694:	20 83       	st	Z, r18
    1696:	8c 93       	st	X, r24
    1698:	26 81       	ldd	r18, Z+6	; 0x06
    169a:	37 81       	ldd	r19, Z+7	; 0x07
    169c:	2f 5f       	subi	r18, 0xFF	; 255
    169e:	3f 4f       	sbci	r19, 0xFF	; 255
    16a0:	37 83       	std	Z+7, r19	; 0x07
    16a2:	26 83       	std	Z+6, r18	; 0x06
    16a4:	14 c0       	rjmp	.+40     	; 0x16ce <fputc+0x6e>
    16a6:	8b 01       	movw	r16, r22
    16a8:	ec 01       	movw	r28, r24
    16aa:	fb 01       	movw	r30, r22
    16ac:	00 84       	ldd	r0, Z+8	; 0x08
    16ae:	f1 85       	ldd	r31, Z+9	; 0x09
    16b0:	e0 2d       	mov	r30, r0
    16b2:	09 95       	icall
    16b4:	89 2b       	or	r24, r25
    16b6:	e1 f6       	brne	.-72     	; 0x1670 <fputc+0x10>
    16b8:	d8 01       	movw	r26, r16
    16ba:	16 96       	adiw	r26, 0x06	; 6
    16bc:	8d 91       	ld	r24, X+
    16be:	9c 91       	ld	r25, X
    16c0:	17 97       	sbiw	r26, 0x07	; 7
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	17 96       	adiw	r26, 0x07	; 7
    16c6:	9c 93       	st	X, r25
    16c8:	8e 93       	st	-X, r24
    16ca:	16 97       	sbiw	r26, 0x06	; 6
    16cc:	ce 01       	movw	r24, r28
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	08 95       	ret

000016d8 <__ultoa_invert>:
    16d8:	fa 01       	movw	r30, r20
    16da:	aa 27       	eor	r26, r26
    16dc:	28 30       	cpi	r18, 0x08	; 8
    16de:	51 f1       	breq	.+84     	; 0x1734 <__ultoa_invert+0x5c>
    16e0:	20 31       	cpi	r18, 0x10	; 16
    16e2:	81 f1       	breq	.+96     	; 0x1744 <__ultoa_invert+0x6c>
    16e4:	e8 94       	clt
    16e6:	6f 93       	push	r22
    16e8:	6e 7f       	andi	r22, 0xFE	; 254
    16ea:	6e 5f       	subi	r22, 0xFE	; 254
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	8f 4f       	sbci	r24, 0xFF	; 255
    16f0:	9f 4f       	sbci	r25, 0xFF	; 255
    16f2:	af 4f       	sbci	r26, 0xFF	; 255
    16f4:	b1 e0       	ldi	r27, 0x01	; 1
    16f6:	3e d0       	rcall	.+124    	; 0x1774 <__ultoa_invert+0x9c>
    16f8:	b4 e0       	ldi	r27, 0x04	; 4
    16fa:	3c d0       	rcall	.+120    	; 0x1774 <__ultoa_invert+0x9c>
    16fc:	67 0f       	add	r22, r23
    16fe:	78 1f       	adc	r23, r24
    1700:	89 1f       	adc	r24, r25
    1702:	9a 1f       	adc	r25, r26
    1704:	a1 1d       	adc	r26, r1
    1706:	68 0f       	add	r22, r24
    1708:	79 1f       	adc	r23, r25
    170a:	8a 1f       	adc	r24, r26
    170c:	91 1d       	adc	r25, r1
    170e:	a1 1d       	adc	r26, r1
    1710:	6a 0f       	add	r22, r26
    1712:	71 1d       	adc	r23, r1
    1714:	81 1d       	adc	r24, r1
    1716:	91 1d       	adc	r25, r1
    1718:	a1 1d       	adc	r26, r1
    171a:	20 d0       	rcall	.+64     	; 0x175c <__ultoa_invert+0x84>
    171c:	09 f4       	brne	.+2      	; 0x1720 <__ultoa_invert+0x48>
    171e:	68 94       	set
    1720:	3f 91       	pop	r19
    1722:	2a e0       	ldi	r18, 0x0A	; 10
    1724:	26 9f       	mul	r18, r22
    1726:	11 24       	eor	r1, r1
    1728:	30 19       	sub	r19, r0
    172a:	30 5d       	subi	r19, 0xD0	; 208
    172c:	31 93       	st	Z+, r19
    172e:	de f6       	brtc	.-74     	; 0x16e6 <__ultoa_invert+0xe>
    1730:	cf 01       	movw	r24, r30
    1732:	08 95       	ret
    1734:	46 2f       	mov	r20, r22
    1736:	47 70       	andi	r20, 0x07	; 7
    1738:	40 5d       	subi	r20, 0xD0	; 208
    173a:	41 93       	st	Z+, r20
    173c:	b3 e0       	ldi	r27, 0x03	; 3
    173e:	0f d0       	rcall	.+30     	; 0x175e <__ultoa_invert+0x86>
    1740:	c9 f7       	brne	.-14     	; 0x1734 <__ultoa_invert+0x5c>
    1742:	f6 cf       	rjmp	.-20     	; 0x1730 <__ultoa_invert+0x58>
    1744:	46 2f       	mov	r20, r22
    1746:	4f 70       	andi	r20, 0x0F	; 15
    1748:	40 5d       	subi	r20, 0xD0	; 208
    174a:	4a 33       	cpi	r20, 0x3A	; 58
    174c:	18 f0       	brcs	.+6      	; 0x1754 <__ultoa_invert+0x7c>
    174e:	49 5d       	subi	r20, 0xD9	; 217
    1750:	31 fd       	sbrc	r19, 1
    1752:	40 52       	subi	r20, 0x20	; 32
    1754:	41 93       	st	Z+, r20
    1756:	02 d0       	rcall	.+4      	; 0x175c <__ultoa_invert+0x84>
    1758:	a9 f7       	brne	.-22     	; 0x1744 <__ultoa_invert+0x6c>
    175a:	ea cf       	rjmp	.-44     	; 0x1730 <__ultoa_invert+0x58>
    175c:	b4 e0       	ldi	r27, 0x04	; 4
    175e:	a6 95       	lsr	r26
    1760:	97 95       	ror	r25
    1762:	87 95       	ror	r24
    1764:	77 95       	ror	r23
    1766:	67 95       	ror	r22
    1768:	ba 95       	dec	r27
    176a:	c9 f7       	brne	.-14     	; 0x175e <__ultoa_invert+0x86>
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	61 05       	cpc	r22, r1
    1770:	71 05       	cpc	r23, r1
    1772:	08 95       	ret
    1774:	9b 01       	movw	r18, r22
    1776:	ac 01       	movw	r20, r24
    1778:	0a 2e       	mov	r0, r26
    177a:	06 94       	lsr	r0
    177c:	57 95       	ror	r21
    177e:	47 95       	ror	r20
    1780:	37 95       	ror	r19
    1782:	27 95       	ror	r18
    1784:	ba 95       	dec	r27
    1786:	c9 f7       	brne	.-14     	; 0x177a <__ultoa_invert+0xa2>
    1788:	62 0f       	add	r22, r18
    178a:	73 1f       	adc	r23, r19
    178c:	84 1f       	adc	r24, r20
    178e:	95 1f       	adc	r25, r21
    1790:	a0 1d       	adc	r26, r0
    1792:	08 95       	ret

00001794 <_exit>:
    1794:	f8 94       	cli

00001796 <__stop_program>:
    1796:	ff cf       	rjmp	.-2      	; 0x1796 <__stop_program>
