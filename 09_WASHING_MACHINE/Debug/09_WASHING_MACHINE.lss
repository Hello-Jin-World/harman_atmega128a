
09_WASHING_MACHINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00001730  000017c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000698  00800144  00800144  00001808  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b4b  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000113e  00000000  00000000  0000359f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000102e  00000000  00000000  000046dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  0000570c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000834  00000000  00000000  00005b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a8  00000000  00000000  0000635c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006c04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	6f c6       	rjmp	.+3294   	; 0xcf4 <__vector_5>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	aa c4       	rjmp	.+2388   	; 0x996 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	2f c5       	rjmp	.+2654   	; 0xaa8 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	a9 c5       	rjmp	.+2898   	; 0xbcc <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e3       	ldi	r30, 0x30	; 48
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 34       	cpi	r26, 0x44	; 68
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a4 e4       	ldi	r26, 0x44	; 68
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 3d       	cpi	r26, 0xDC	; 220
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	bf d4       	rcall	.+2430   	; 0xa42 <main>
      c4:	0c 94 96 0b 	jmp	0x172c	; 0x172c <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <init_button>:
// 00001111
// DDRD &= 0x0f; // 4, 5, 6, 7을 input. PORTD.4 가독성이 떨어진다.

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN | 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN);
      ca:	81 b3       	in	r24, 0x11	; 17
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	81 bb       	out	0x11, r24	; 17
      d0:	08 95       	ret

000000d2 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
      d2:	20 b3       	in	r18, 0x10	; 16
      d4:	42 2f       	mov	r20, r18
      d6:	50 e0       	ldi	r21, 0x00	; 0
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <get_button+0x10>
      de:	22 0f       	add	r18, r18
      e0:	33 1f       	adc	r19, r19
      e2:	6a 95       	dec	r22
      e4:	e2 f7       	brpl	.-8      	; 0xde <get_button+0xc>
      e6:	24 23       	and	r18, r20
      e8:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
      ea:	21 15       	cp	r18, r1
      ec:	31 05       	cpc	r19, r1
      ee:	b9 f0       	breq	.+46     	; 0x11e <get_button+0x4c>
      f0:	fc 01       	movw	r30, r24
      f2:	ec 5b       	subi	r30, 0xBC	; 188
      f4:	fe 4f       	sbci	r31, 0xFE	; 254
      f6:	40 81       	ld	r20, Z
      f8:	41 11       	cpse	r20, r1
      fa:	11 c0       	rjmp	.+34     	; 0x11e <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fc:	2f ef       	ldi	r18, 0xFF	; 255
      fe:	3d ee       	ldi	r19, 0xED	; 237
     100:	42 e0       	ldi	r20, 0x02	; 2
     102:	21 50       	subi	r18, 0x01	; 1
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	e1 f7       	brne	.-8      	; 0x102 <get_button+0x30>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <get_button+0x3a>
     10c:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     10e:	fc 01       	movw	r30, r24
     110:	ec 5b       	subi	r30, 0xBC	; 188
     112:	fe 4f       	sbci	r31, 0xFE	; 254
     114:	21 e0       	ldi	r18, 0x01	; 1
     116:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     11e:	fc 01       	movw	r30, r24
     120:	ec 5b       	subi	r30, 0xBC	; 188
     122:	fe 4f       	sbci	r31, 0xFE	; 254
     124:	40 81       	ld	r20, Z
     126:	41 30       	cpi	r20, 0x01	; 1
     128:	91 f4       	brne	.+36     	; 0x14e <get_button+0x7c>
     12a:	23 2b       	or	r18, r19
     12c:	99 f4       	brne	.+38     	; 0x154 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     12e:	fc 01       	movw	r30, r24
     130:	ec 5b       	subi	r30, 0xBC	; 188
     132:	fe 4f       	sbci	r31, 0xFE	; 254
     134:	10 82       	st	Z, r1
     136:	8f ef       	ldi	r24, 0xFF	; 255
     138:	9d ee       	ldi	r25, 0xED	; 237
     13a:	22 e0       	ldi	r18, 0x02	; 2
     13c:	81 50       	subi	r24, 0x01	; 1
     13e:	90 40       	sbci	r25, 0x00	; 0
     140:	20 40       	sbci	r18, 0x00	; 0
     142:	e1 f7       	brne	.-8      	; 0x13c <get_button+0x6a>
     144:	00 c0       	rjmp	.+0      	; 0x146 <get_button+0x74>
     146:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	08 95       	ret
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	08 95       	ret

0000015a <fast_wash>:
	
}

void fast_wash(void) // 쾌속 세탁
{
	sec_count = 2;
     15a:	82 e0       	ldi	r24, 0x02	; 2
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	a0 e0       	ldi	r26, 0x00	; 0
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     166:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     16a:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     16e:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
     172:	08 95       	ret

00000174 <rinse_and_spindry>:
}

void rinse_and_spindry(void) // 헹굼 + 탈수
{
	sec_count = 3;
     174:	83 e0       	ldi	r24, 0x03	; 3
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     180:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     184:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     188:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
     18c:	08 95       	ret

0000018e <only_spindry>:
}

void only_spindry(void) // 탈수
{
	sec_count = 4;
     18e:	84 e0       	ldi	r24, 0x04	; 4
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	a0 e0       	ldi	r26, 0x00	; 0
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     19a:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     19e:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     1a2:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
     1a6:	08 95       	ret

000001a8 <main_screen>:
}

void main_screen(void) // 메인 화면
{
	PORTA = 0;
     1a8:	1b ba       	out	0x1b, r1	; 27
	sec_count = 754; // 1234 표시 12 * 60 + 34
     1aa:	82 ef       	ldi	r24, 0xF2	; 242
     1ac:	92 e0       	ldi	r25, 0x02	; 2
     1ae:	a0 e0       	ldi	r26, 0x00	; 0
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     1b6:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     1ba:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     1be:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
     1c2:	08 95       	ret

000001c4 <dumy_fanc>:
	sec_count = 0;
	auto_wash_mode = 4;
}

void dumy_fanc()
{
     1c4:	08 95       	ret

000001c6 <init_fnd>:

////////////////////////////////////////////fnd 초기화 및 fnd 표시 함수들 ///////////////////////////////////////////////////////////

void init_fnd(void)
{
	FND_DATA_DDR = 0xff; // 출력모드로 설정
     1c6:	8f ef       	ldi	r24, 0xFF	; 255
     1c8:	84 bb       	out	0x14, r24	; 20

	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 |
     1ca:	87 b3       	in	r24, 0x17	; 23
     1cc:	80 6f       	ori	r24, 0xF0	; 240
     1ce:	87 bb       	out	0x17, r24	; 23
					 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4;

	FND_DATA_PORT = 0x00; // FND를 all off
     1d0:	15 ba       	out	0x15, r1	; 21
     1d2:	08 95       	ret

000001d4 <fnd_display>:
}



void fnd_display(void)
{
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	cd b7       	in	r28, 0x3d	; 61
     1da:	de b7       	in	r29, 0x3e	; 62
     1dc:	2b 97       	sbiw	r28, 0x0b	; 11
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
						//  0      1       2      3      4      5      6     7      8       9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
     1e8:	8b e0       	ldi	r24, 0x0B	; 11
     1ea:	ea e2       	ldi	r30, 0x2A	; 42
     1ec:	f1 e0       	ldi	r31, 0x01	; 1
     1ee:	de 01       	movw	r26, r28
     1f0:	11 96       	adiw	r26, 0x01	; 1
     1f2:	01 90       	ld	r0, Z+
     1f4:	0d 92       	st	X+, r0
     1f6:	8a 95       	dec	r24
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <fnd_display+0x1e>

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     1fa:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <digit_select.1820>
     1fe:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <digit_select.1820+0x1>
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	91 05       	cpc	r25, r1
     206:	19 f1       	breq	.+70     	; 0x24e <fnd_display+0x7a>
     208:	1c f4       	brge	.+6      	; 0x210 <fnd_display+0x3c>
     20a:	89 2b       	or	r24, r25
     20c:	41 f0       	breq	.+16     	; 0x21e <fnd_display+0x4a>
     20e:	94 c0       	rjmp	.+296    	; 0x338 <fnd_display+0x164>
     210:	82 30       	cpi	r24, 0x02	; 2
     212:	91 05       	cpc	r25, r1
     214:	d9 f1       	breq	.+118    	; 0x28c <fnd_display+0xb8>
     216:	03 97       	sbiw	r24, 0x03	; 3
     218:	09 f4       	brne	.+2      	; 0x21c <fnd_display+0x48>
     21a:	70 c0       	rjmp	.+224    	; 0x2fc <fnd_display+0x128>
     21c:	8d c0       	rjmp	.+282    	; 0x338 <fnd_display+0x164>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     21e:	8f e7       	ldi	r24, 0x7F	; 127
     220:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     222:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <sec_count>
     226:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <sec_count+0x1>
     22a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count+0x2>
     22e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x3>
     232:	2a e0       	ldi	r18, 0x0A	; 10
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	67 d7       	rcall	.+3790   	; 0x110a <__udivmodsi4>
     23c:	e1 e0       	ldi	r30, 0x01	; 1
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	ec 0f       	add	r30, r28
     242:	fd 1f       	adc	r31, r29
     244:	e6 0f       	add	r30, r22
     246:	f7 1f       	adc	r31, r23
     248:	80 81       	ld	r24, Z
     24a:	85 bb       	out	0x15, r24	; 21
		break;
     24c:	75 c0       	rjmp	.+234    	; 0x338 <fnd_display+0x164>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     24e:	8f eb       	ldi	r24, 0xBF	; 191
     250:	88 bb       	out	0x18, r24	; 24

		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     252:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <sec_count>
     256:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <sec_count+0x1>
     25a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count+0x2>
     25e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x3>
     262:	2a e0       	ldi	r18, 0x0A	; 10
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	50 e0       	ldi	r21, 0x00	; 0
     26a:	4f d7       	rcall	.+3742   	; 0x110a <__udivmodsi4>
     26c:	ca 01       	movw	r24, r20
     26e:	b9 01       	movw	r22, r18
     270:	26 e0       	ldi	r18, 0x06	; 6
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e0       	ldi	r20, 0x00	; 0
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	48 d7       	rcall	.+3728   	; 0x110a <__udivmodsi4>
     27a:	e1 e0       	ldi	r30, 0x01	; 1
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	ec 0f       	add	r30, r28
     280:	fd 1f       	adc	r31, r29
     282:	e6 0f       	add	r30, r22
     284:	f7 1f       	adc	r31, r23
     286:	80 81       	ld	r24, Z
     288:	85 bb       	out	0x15, r24	; 21
		break;
     28a:	56 c0       	rjmp	.+172    	; 0x338 <fnd_display+0x164>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     28c:	8f ed       	ldi	r24, 0xDF	; 223
     28e:	88 bb       	out	0x18, r24	; 24
		if (sec_count % 2 == 1)
     290:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <sec_count>
     294:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <sec_count+0x1>
     298:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count+0x2>
     29c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x3>
     2a0:	60 ff       	sbrs	r22, 0
     2a2:	17 c0       	rjmp	.+46     	; 0x2d2 <fnd_display+0xfe>
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     2a4:	2c e3       	ldi	r18, 0x3C	; 60
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	40 e0       	ldi	r20, 0x00	; 0
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	2e d7       	rcall	.+3676   	; 0x110a <__udivmodsi4>
     2ae:	ca 01       	movw	r24, r20
     2b0:	b9 01       	movw	r22, r18
     2b2:	2a e0       	ldi	r18, 0x0A	; 10
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	27 d7       	rcall	.+3662   	; 0x110a <__udivmodsi4>
     2bc:	e1 e0       	ldi	r30, 0x01	; 1
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	ec 0f       	add	r30, r28
     2c2:	fd 1f       	adc	r31, r29
     2c4:	e6 0f       	add	r30, r22
     2c6:	f7 1f       	adc	r31, r23
     2c8:	90 81       	ld	r25, Z
     2ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     2cc:	89 2b       	or	r24, r25
     2ce:	85 bb       	out	0x15, r24	; 21
     2d0:	33 c0       	rjmp	.+102    	; 0x338 <fnd_display+0x164>
		else
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10]; // 1단위 분
     2d2:	2c e3       	ldi	r18, 0x3C	; 60
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	40 e0       	ldi	r20, 0x00	; 0
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	17 d7       	rcall	.+3630   	; 0x110a <__udivmodsi4>
     2dc:	ca 01       	movw	r24, r20
     2de:	b9 01       	movw	r22, r18
     2e0:	2a e0       	ldi	r18, 0x0A	; 10
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	10 d7       	rcall	.+3616   	; 0x110a <__udivmodsi4>
     2ea:	e1 e0       	ldi	r30, 0x01	; 1
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	ec 0f       	add	r30, r28
     2f0:	fd 1f       	adc	r31, r29
     2f2:	e6 0f       	add	r30, r22
     2f4:	f7 1f       	adc	r31, r23
     2f6:	80 81       	ld	r24, Z
     2f8:	85 bb       	out	0x15, r24	; 21
     2fa:	1e c0       	rjmp	.+60     	; 0x338 <fnd_display+0x164>
     2fc:	8f ee       	ldi	r24, 0xEF	; 239
		break;

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     2fe:	88 bb       	out	0x18, r24	; 24
     300:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <sec_count>
		FND_DATA_PORT = fnd_font[sec_count / 600 % 6]; // 10단위 분
     304:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <sec_count+0x1>
     308:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <sec_count+0x2>
     30c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <sec_count+0x3>
     310:	28 e5       	ldi	r18, 0x58	; 88
     312:	32 e0       	ldi	r19, 0x02	; 2
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	f8 d6       	rcall	.+3568   	; 0x110a <__udivmodsi4>
     31a:	ca 01       	movw	r24, r20
     31c:	b9 01       	movw	r22, r18
     31e:	26 e0       	ldi	r18, 0x06	; 6
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	f1 d6       	rcall	.+3554   	; 0x110a <__udivmodsi4>
     328:	e1 e0       	ldi	r30, 0x01	; 1
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	ec 0f       	add	r30, r28
     32e:	fd 1f       	adc	r31, r29
     330:	e6 0f       	add	r30, r22
     332:	f7 1f       	adc	r31, r23
     334:	80 81       	ld	r24, Z
     336:	85 bb       	out	0x15, r24	; 21
     338:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <digit_select.1820>
		break;
	}
	digit_select++;
     33c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <digit_select.1820+0x1>
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	83 70       	andi	r24, 0x03	; 3
	digit_select %= 4; //다음 표시할 자리수 선택
     344:	90 78       	andi	r25, 0x80	; 128
     346:	99 23       	and	r25, r25
     348:	24 f4       	brge	.+8      	; 0x352 <fnd_display+0x17e>
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	8c 6f       	ori	r24, 0xFC	; 252
     34e:	9f 6f       	ori	r25, 0xFF	; 255
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <digit_select.1820+0x1>
     356:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <digit_select.1820>
     35a:	2b 96       	adiw	r28, 0x0b	; 11
}
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <fnd_main>:
     36c:	8f ef       	ldi	r24, 0xFF	; 255
	dumy_fanc
};

int fnd_main(void)
{
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
     36e:	8a bb       	out	0x1a, r24	; 26
	init_fnd(); // fnd 초기화
     370:	2a df       	rcall	.-428    	; 0x1c6 <init_fnd>
	init_button(); // button 초기화
     372:	ab de       	rcall	.-682    	; 0xca <init_button>
     374:	e1 2c       	mov	r14, r1
	
	int button1_state = 0;
	int button2_state = 0;
	int button3_state = 0;
     376:	f1 2c       	mov	r15, r1
     378:	00 e0       	ldi	r16, 0x00	; 0
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
	init_fnd(); // fnd 초기화
	init_button(); // button 초기화
	
	int button1_state = 0;
	int button2_state = 0;
     37a:	10 e0       	ldi	r17, 0x00	; 0
     37c:	c0 e0       	ldi	r28, 0x00	; 0
{
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
	init_fnd(); // fnd 초기화
	init_button(); // button 초기화
	
	int button1_state = 0;
     37e:	d0 e0       	ldi	r29, 0x00	; 0
     380:	64 e0       	ldi	r22, 0x04	; 4
	int button2_state = 0;
	int button3_state = 0;
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 자동 세탁 모드로 진입
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	a4 de       	rcall	.-696    	; 0xd2 <get_button>
     38a:	89 2b       	or	r24, r25
     38c:	21 f0       	breq	.+8      	; 0x396 <fnd_main+0x2a>
     38e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <select_wash_mode+0x1>
		{
			select_wash_mode = AUTO_WASH;
     392:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <select_wash_mode>
     396:	65 e0       	ldi	r22, 0x05	; 5
		}
		
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1을 받으면 쾌속 세탁 모드로 진입
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	99 de       	rcall	.-718    	; 0xd2 <get_button>
     3a0:	89 2b       	or	r24, r25
     3a2:	b1 f0       	breq	.+44     	; 0x3d0 <fnd_main+0x64>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
		{
			button1_state = !button1_state;
     3a6:	20 97       	sbiw	r28, 0x00	; 0
     3a8:	09 f0       	breq	.+2      	; 0x3ac <fnd_main+0x40>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	cd 2b       	or	r28, r29
			
			if (button1_state) //
     3b0:	41 f4       	brne	.+16     	; 0x3c2 <fnd_main+0x56>
     3b2:	21 e0       	ldi	r18, 0x01	; 1
			{
				select_wash_mode = FAST_WASH;
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     3ba:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     3be:	ec 01       	movw	r28, r24
			select_wash_mode = AUTO_WASH;
		}
		
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1을 받으면 쾌속 세탁 모드로 진입
		{
			button1_state = !button1_state;
     3c0:	07 c0       	rjmp	.+14     	; 0x3d0 <fnd_main+0x64>
     3c2:	24 e0       	ldi	r18, 0x04	; 4
			{
				select_wash_mode = FAST_WASH;
			}
			else //
			{
				select_wash_mode = MAIN_SCREEN;
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     3ca:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     3ce:	ec 01       	movw	r28, r24
			select_wash_mode = AUTO_WASH;
		}
		
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1을 받으면 쾌속 세탁 모드로 진입
		{
			button1_state = !button1_state;
     3d0:	66 e0       	ldi	r22, 0x06	; 6
			{
				select_wash_mode = MAIN_SCREEN;
			}
		}
		
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2를 받으면 헹굼 + 탈수 모드로 진입
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	82 e0       	ldi	r24, 0x02	; 2
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	7c de       	rcall	.-776    	; 0xd2 <get_button>
     3da:	89 2b       	or	r24, r25
     3dc:	b9 f0       	breq	.+46     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3de:	81 e0       	ldi	r24, 0x01	; 1
		{
			button2_state = !button2_state;\
     3e0:	01 15       	cp	r16, r1
     3e2:	11 05       	cpc	r17, r1
     3e4:	09 f0       	breq	.+2      	; 0x3e8 <fnd_main+0x7c>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	01 2b       	or	r16, r17
			
			if (button2_state)
     3ec:	41 f4       	brne	.+16     	; 0x3fe <fnd_main+0x92>
     3ee:	22 e0       	ldi	r18, 0x02	; 2
			{
				select_wash_mode = RINSE_AND_SPINDRY;
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     3f6:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     3fa:	8c 01       	movw	r16, r24
			}
		}
		
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2를 받으면 헹굼 + 탈수 모드로 진입
		{
			button2_state = !button2_state;\
     3fc:	07 c0       	rjmp	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3fe:	24 e0       	ldi	r18, 0x04	; 4
			{
				select_wash_mode = RINSE_AND_SPINDRY;
			}
			else
			{
				select_wash_mode = MAIN_SCREEN;	
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     406:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     40a:	8c 01       	movw	r16, r24
			}
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3을 받으면 탈수 단독 모드로 진입
     40c:	67 e0       	ldi	r22, 0x07	; 7
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	83 e0       	ldi	r24, 0x03	; 3
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	5e de       	rcall	.-836    	; 0xd2 <get_button>
     416:	89 2b       	or	r24, r25
     418:	b9 f0       	breq	.+46     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     41a:	81 e0       	ldi	r24, 0x01	; 1
		{
			button3_state = !button3_state;
     41c:	e1 14       	cp	r14, r1
     41e:	f1 04       	cpc	r15, r1
     420:	09 f0       	breq	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	ef 28       	or	r14, r15
			
			if (button3_state) //
     428:	41 f4       	brne	.+16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     42a:	23 e0       	ldi	r18, 0x03	; 3
			{
				select_wash_mode = ONLY_SPINDRY;
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     432:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     436:	7c 01       	movw	r14, r24
			}
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3을 받으면 탈수 단독 모드로 진입
		{
			button3_state = !button3_state;
     438:	07 c0       	rjmp	.+14     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     43a:	24 e0       	ldi	r18, 0x04	; 4
			{
				select_wash_mode = ONLY_SPINDRY;
			}
			else //
			{
				select_wash_mode = MAIN_SCREEN;
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     442:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     446:	7c 01       	movw	r14, r24
			}
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3을 받으면 탈수 단독 모드로 진입
		{
			button3_state = !button3_state;
     448:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <select_wash_mode>
			else //
			{
				select_wash_mode = MAIN_SCREEN;
			}
		}
		fp_wash_mode[select_wash_mode]();
     44c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <select_wash_mode+0x1>
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	e6 5f       	subi	r30, 0xF6	; 246
     456:	fe 4f       	sbci	r31, 0xFE	; 254
     458:	01 90       	ld	r0, Z+
     45a:	f0 81       	ld	r31, Z
     45c:	e0 2d       	mov	r30, r0
     45e:	09 95       	icall
     460:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <fnd_refreshrate>
		//auto_wash_led_on(&led_shift_num);
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     464:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <fnd_refreshrate+0x1>
     468:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <fnd_refreshrate+0x2>
     46c:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <fnd_refreshrate+0x3>
     470:	02 97       	sbiw	r24, 0x02	; 2
     472:	a1 05       	cpc	r26, r1
     474:	b1 05       	cpc	r27, r1
     476:	08 f4       	brcc	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     478:	83 cf       	rjmp	.-250    	; 0x380 <fnd_main+0x14>
     47a:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <fnd_refreshrate>
		{
			fnd_refreshrate = 0;
     47e:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <fnd_refreshrate+0x1>
     482:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate+0x2>
     486:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x3>
			fnd_display();
     48a:	a4 de       	rcall	.-696    	; 0x1d4 <fnd_display>
     48c:	79 cf       	rjmp	.-270    	; 0x380 <fnd_main+0x14>

0000048e <auto_wash>:
     48e:	8f ef       	ldi	r24, 0xFF	; 255

////////////////////////////////////////////메인화면에서 동작하는 함수들////////////////////////////////////////////////

void auto_wash(void) // 자동 세탁
{
	PORTA = 0xff;
     490:	8b bb       	out	0x1b, r24	; 27
	sec_count = 1;
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	a0 e0       	ldi	r26, 0x00	; 0
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     49e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     4a2:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     4a6:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
     4aa:	33 c0       	rjmp	.+102    	; 0x512 <auto_wash+0x84>
	{
		if (get_button(BUTTON0, BUTTON0PIN))
		{
			select_wash_mode = 4;
     4ac:	84 e0       	ldi	r24, 0x04	; 4
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <select_wash_mode+0x1>
     4b4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <select_wash_mode>
	}
	// 여기까지 자동 세탁의 물온도, 헹굼횟수, 탈수 강도를 선택함 밑에서 지정한 시간만큼 모터가 돌아가고 탈수 강도에 맞게 30초 동안 강도에 맞게 진행
	
	//여기에 시간 만큼 회전하는 함수 추가.
	
}
     4b8:	08 95       	ret
		if (get_button(BUTTON0, BUTTON0PIN))
		{
			select_wash_mode = 4;
			break;
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     4ba:	65 e0       	ldi	r22, 0x05	; 5
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	07 de       	rcall	.-1010   	; 0xd2 <get_button>
     4c4:	89 2b       	or	r24, r25
     4c6:	21 f0       	breq	.+8      	; 0x4d0 <auto_wash+0x42>
		{
			if (auto_step_led == 0) // 물 온도 선택하기  --- 물온도 변수 필요하고 
			{
				auto_wash_mode = 0;
     4c8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <auto_wash_mode+0x1>
     4cc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <auto_wash_mode>
			}
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     4d0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <fnd_refreshrate>
     4d4:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <fnd_refreshrate+0x1>
     4d8:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <fnd_refreshrate+0x2>
     4dc:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <fnd_refreshrate+0x3>
     4e0:	02 97       	sbiw	r24, 0x02	; 2
     4e2:	a1 05       	cpc	r26, r1
     4e4:	b1 05       	cpc	r27, r1
     4e6:	48 f0       	brcs	.+18     	; 0x4fa <auto_wash+0x6c>
		{
			fnd_refreshrate = 0;
     4e8:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <fnd_refreshrate>
     4ec:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <fnd_refreshrate+0x1>
     4f0:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate+0x2>
     4f4:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x3>
			fnd_display();
     4f8:	6d de       	rcall	.-806    	; 0x1d4 <fnd_display>
		}
		auto_wash_select[auto_wash_mode]();
     4fa:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <auto_wash_mode>
     4fe:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <auto_wash_mode+0x1>
     502:	ee 0f       	add	r30, r30
     504:	ff 1f       	adc	r31, r31
     506:	e0 50       	subi	r30, 0x00	; 0
     508:	ff 4f       	sbci	r31, 0xFF	; 255
     50a:	01 90       	ld	r0, Z+
     50c:	f0 81       	ld	r31, Z
     50e:	e0 2d       	mov	r30, r0
     510:	09 95       	icall
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
	{
		if (get_button(BUTTON0, BUTTON0PIN))
     512:	64 e0       	ldi	r22, 0x04	; 4
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	db dd       	rcall	.-1098   	; 0xd2 <get_button>
     51c:	89 2b       	or	r24, r25
     51e:	69 f2       	breq	.-102    	; 0x4ba <auto_wash+0x2c>
     520:	c5 cf       	rjmp	.-118    	; 0x4ac <auto_wash+0x1e>

00000522 <water_temperature>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////자동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
	PORTA = 0x07;
     526:	87 e0       	ldi	r24, 0x07	; 7
     528:	8b bb       	out	0x1b, r24	; 27
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
     52a:	8e e1       	ldi	r24, 0x1E	; 30
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	a0 e0       	ldi	r26, 0x00	; 0
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     536:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     53a:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     53e:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>

/////////////////////////////////////////자동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
	PORTA = 0x07;
	int water_tem_toggle = 1;
     542:	c1 e0       	ldi	r28, 0x01	; 1
     544:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     546:	60 c0       	rjmp	.+192    	; 0x608 <water_temperature+0xe6>
	{
		if (get_button(BUTTON2, BUTTON2PIN))
     548:	66 e0       	ldi	r22, 0x06	; 6
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	c0 dd       	rcall	.-1152   	; 0xd2 <get_button>
     552:	89 2b       	or	r24, r25
     554:	99 f0       	breq	.+38     	; 0x57c <water_temperature+0x5a>
		{
			sec_count -= 5;
     556:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     55a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     55e:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     562:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     566:	05 97       	sbiw	r24, 0x05	; 5
     568:	a1 09       	sbc	r26, r1
     56a:	b1 09       	sbc	r27, r1
     56c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     570:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     574:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     578:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     57c:	67 e0       	ldi	r22, 0x07	; 7
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	83 e0       	ldi	r24, 0x03	; 3
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a6 dd       	rcall	.-1204   	; 0xd2 <get_button>
     586:	89 2b       	or	r24, r25
     588:	99 f0       	breq	.+38     	; 0x5b0 <water_temperature+0x8e>
		{
			sec_count += 5;
     58a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     58e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     592:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     596:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     59a:	05 96       	adiw	r24, 0x05	; 5
     59c:	a1 1d       	adc	r26, r1
     59e:	b1 1d       	adc	r27, r1
     5a0:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     5a4:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     5a8:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     5ac:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     5b0:	65 e0       	ldi	r22, 0x05	; 5
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	8c dd       	rcall	.-1256   	; 0xd2 <get_button>
     5ba:	89 2b       	or	r24, r25
     5bc:	81 f0       	breq	.+32     	; 0x5de <water_temperature+0xbc>
		{	
			sec_count = 0;
     5be:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <sec_count>
     5c2:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <sec_count+0x1>
     5c6:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <sec_count+0x2>
     5ca:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sec_count+0x3>
			auto_wash_mode = 1;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <auto_wash_mode+0x1>
     5d6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <auto_wash_mode>
			water_tem_toggle = 0;
     5da:	c0 e0       	ldi	r28, 0x00	; 0
     5dc:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     5de:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <fnd_refreshrate>
     5e2:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <fnd_refreshrate+0x1>
     5e6:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <fnd_refreshrate+0x2>
     5ea:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <fnd_refreshrate+0x3>
     5ee:	02 97       	sbiw	r24, 0x02	; 2
     5f0:	a1 05       	cpc	r26, r1
     5f2:	b1 05       	cpc	r27, r1
     5f4:	48 f0       	brcs	.+18     	; 0x608 <water_temperature+0xe6>
		{
			fnd_refreshrate = 0;
     5f6:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <fnd_refreshrate>
     5fa:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <fnd_refreshrate+0x1>
     5fe:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate+0x2>
     602:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x3>
			fnd_display();
     606:	e6 dd       	rcall	.-1076   	; 0x1d4 <fnd_display>
	PORTA = 0x07;
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     608:	20 97       	sbiw	r28, 0x00	; 0
     60a:	09 f0       	breq	.+2      	; 0x60e <water_temperature+0xec>
     60c:	9d cf       	rjmp	.-198    	; 0x548 <water_temperature+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <rinse_frequency>:

void rinse_frequency() // 헹굼 횟수 조절
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
	PORTA = 0x03;
     618:	83 e0       	ldi	r24, 0x03	; 3
     61a:	8b bb       	out	0x1b, r24	; 27
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 5; // deflaut 헹굼 횟수
     61c:	85 e0       	ldi	r24, 0x05	; 5
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	a0 e0       	ldi	r26, 0x00	; 0
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     628:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     62c:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     630:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
}

void rinse_frequency() // 헹굼 횟수 조절
{
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
     634:	c1 e0       	ldi	r28, 0x01	; 1
     636:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 5; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     638:	79 c0       	rjmp	.+242    	; 0x72c <rinse_frequency+0x118>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     63a:	66 e0       	ldi	r22, 0x06	; 6
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	47 dd       	rcall	.-1394   	; 0xd2 <get_button>
     644:	89 2b       	or	r24, r25
     646:	99 f0       	breq	.+38     	; 0x66e <rinse_frequency+0x5a>
		{
			sec_count -= 1;
     648:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     64c:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     650:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     654:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	a1 09       	sbc	r26, r1
     65c:	b1 09       	sbc	r27, r1
     65e:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     662:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     666:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     66a:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     66e:	67 e0       	ldi	r22, 0x07	; 7
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	2d dd       	rcall	.-1446   	; 0xd2 <get_button>
     678:	89 2b       	or	r24, r25
     67a:	99 f0       	breq	.+38     	; 0x6a2 <rinse_frequency+0x8e>
		{
			sec_count += 1;
     67c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     680:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     684:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     688:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	a1 1d       	adc	r26, r1
     690:	b1 1d       	adc	r27, r1
     692:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     696:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     69a:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     69e:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     6a2:	65 e0       	ldi	r22, 0x05	; 5
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	13 dd       	rcall	.-1498   	; 0xd2 <get_button>
     6ac:	89 2b       	or	r24, r25
     6ae:	49 f1       	breq	.+82     	; 0x702 <rinse_frequency+0xee>
		{
			total_wash_time += sec_count * 10; // 버튼 1누르면 횟수 * 10초를 전역변수에 저장하고 다음 단계로 간 다음 탈출
     6b0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     6b4:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     6b8:	9c 01       	movw	r18, r24
     6ba:	22 0f       	add	r18, r18
     6bc:	33 1f       	adc	r19, r19
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	82 0f       	add	r24, r18
     6cc:	93 1f       	adc	r25, r19
     6ce:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <total_wash_time>
     6d2:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <total_wash_time+0x1>
     6d6:	82 0f       	add	r24, r18
     6d8:	93 1f       	adc	r25, r19
     6da:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <total_wash_time+0x1>
     6de:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <total_wash_time>
			sec_count = 0;
     6e2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <sec_count>
     6e6:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <sec_count+0x1>
     6ea:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <sec_count+0x2>
     6ee:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sec_count+0x3>
			auto_wash_mode = 2;
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <auto_wash_mode+0x1>
     6fa:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <auto_wash_mode>
			rinse_frequency_toggle = 0;
     6fe:	c0 e0       	ldi	r28, 0x00	; 0
     700:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     702:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <fnd_refreshrate>
     706:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <fnd_refreshrate+0x1>
     70a:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <fnd_refreshrate+0x2>
     70e:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <fnd_refreshrate+0x3>
     712:	02 97       	sbiw	r24, 0x02	; 2
     714:	a1 05       	cpc	r26, r1
     716:	b1 05       	cpc	r27, r1
     718:	48 f0       	brcs	.+18     	; 0x72c <rinse_frequency+0x118>
		{
			fnd_refreshrate = 0;
     71a:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <fnd_refreshrate>
     71e:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <fnd_refreshrate+0x1>
     722:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate+0x2>
     726:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x3>
			fnd_display();
     72a:	54 dd       	rcall	.-1368   	; 0x1d4 <fnd_display>
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 5; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     72c:	20 97       	sbiw	r28, 0x00	; 0
     72e:	09 f0       	breq	.+2      	; 0x732 <rinse_frequency+0x11e>
     730:	84 cf       	rjmp	.-248    	; 0x63a <rinse_frequency+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <spindry_strength>:

void spindry_strength()
{
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
	PORTA = 0x01;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	8b bb       	out	0x1b, r24	; 27
	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	a0 e0       	ldi	r26, 0x00	; 0
     746:	b0 e0       	ldi	r27, 0x00	; 0
     748:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     74c:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     750:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     754:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
}

void spindry_strength()
{
	PORTA = 0x01;
	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
     758:	c1 e0       	ldi	r28, 0x01	; 1
     75a:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 3; // deflaut 탈수 강도
	
	while (spindry_strength_toggle)
     75c:	a4 c0       	rjmp	.+328    	; 0x8a6 <spindry_strength+0x16e>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     75e:	66 e0       	ldi	r22, 0x06	; 6
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	b5 dc       	rcall	.-1686   	; 0xd2 <get_button>
     768:	89 2b       	or	r24, r25
     76a:	99 f0       	breq	.+38     	; 0x792 <spindry_strength+0x5a>
		{
			sec_count -= 1;
     76c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     770:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     774:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     778:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	a1 09       	sbc	r26, r1
     780:	b1 09       	sbc	r27, r1
     782:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     786:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     78a:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     78e:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     792:	67 e0       	ldi	r22, 0x07	; 7
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	83 e0       	ldi	r24, 0x03	; 3
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	9b dc       	rcall	.-1738   	; 0xd2 <get_button>
     79c:	89 2b       	or	r24, r25
     79e:	99 f0       	breq	.+38     	; 0x7c6 <spindry_strength+0x8e>
		{
			sec_count += 1;
     7a0:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     7a4:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     7a8:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     7ac:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	a1 1d       	adc	r26, r1
     7b4:	b1 1d       	adc	r27, r1
     7b6:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     7ba:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     7be:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     7c2:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     7c6:	65 e0       	ldi	r22, 0x05	; 5
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	81 dc       	rcall	.-1790   	; 0xd2 <get_button>
     7d0:	89 2b       	or	r24, r25
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <spindry_strength+0x9e>
     7d4:	53 c0       	rjmp	.+166    	; 0x87c <spindry_strength+0x144>
		{
			if(sec_count == 1)
     7d6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     7da:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     7de:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     7e2:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     7e6:	81 30       	cpi	r24, 0x01	; 1
     7e8:	91 05       	cpc	r25, r1
     7ea:	a1 05       	cpc	r26, r1
     7ec:	b1 05       	cpc	r27, r1
     7ee:	39 f4       	brne	.+14     	; 0x7fe <spindry_strength+0xc6>
			{
				spin_strength_val = 70;
     7f0:	86 e4       	ldi	r24, 0x46	; 70
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <spin_strength_val+0x1>
     7f8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spin_strength_val>
     7fc:	2e c0       	rjmp	.+92     	; 0x85a <spindry_strength+0x122>
			}
			else if (sec_count == 2)
     7fe:	82 30       	cpi	r24, 0x02	; 2
     800:	91 05       	cpc	r25, r1
     802:	a1 05       	cpc	r26, r1
     804:	b1 05       	cpc	r27, r1
     806:	39 f4       	brne	.+14     	; 0x816 <spindry_strength+0xde>
			{
				spin_strength_val = 115;
     808:	83 e7       	ldi	r24, 0x73	; 115
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <spin_strength_val+0x1>
     810:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spin_strength_val>
     814:	22 c0       	rjmp	.+68     	; 0x85a <spindry_strength+0x122>
			}
			else if (sec_count == 3)
     816:	83 30       	cpi	r24, 0x03	; 3
     818:	91 05       	cpc	r25, r1
     81a:	a1 05       	cpc	r26, r1
     81c:	b1 05       	cpc	r27, r1
     81e:	39 f4       	brne	.+14     	; 0x82e <spindry_strength+0xf6>
			{
				spin_strength_val = 160;
     820:	80 ea       	ldi	r24, 0xA0	; 160
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <spin_strength_val+0x1>
     828:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spin_strength_val>
     82c:	16 c0       	rjmp	.+44     	; 0x85a <spindry_strength+0x122>
			}
			else if (sec_count == 4)
     82e:	84 30       	cpi	r24, 0x04	; 4
     830:	91 05       	cpc	r25, r1
     832:	a1 05       	cpc	r26, r1
     834:	b1 05       	cpc	r27, r1
     836:	39 f4       	brne	.+14     	; 0x846 <spindry_strength+0x10e>
			{
				spin_strength_val = 205;
     838:	8d ec       	ldi	r24, 0xCD	; 205
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <spin_strength_val+0x1>
     840:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spin_strength_val>
     844:	0a c0       	rjmp	.+20     	; 0x85a <spindry_strength+0x122>
			}
			else if (sec_count == 5)
     846:	05 97       	sbiw	r24, 0x05	; 5
     848:	a1 05       	cpc	r26, r1
     84a:	b1 05       	cpc	r27, r1
     84c:	31 f4       	brne	.+12     	; 0x85a <spindry_strength+0x122>
			{
				spin_strength_val = 250;
     84e:	8a ef       	ldi	r24, 0xFA	; 250
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <spin_strength_val+0x1>
     856:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <spin_strength_val>
			}
			PORTA = 0;
     85a:	1b ba       	out	0x1b, r1	; 27
			sec_count = 0;
     85c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <sec_count>
     860:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <sec_count+0x1>
     864:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <sec_count+0x2>
     868:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sec_count+0x3>
			auto_wash_mode = 3;
     86c:	83 e0       	ldi	r24, 0x03	; 3
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <auto_wash_mode+0x1>
     874:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <auto_wash_mode>
			spindry_strength_toggle = 0;
     878:	c0 e0       	ldi	r28, 0x00	; 0
     87a:	d0 e0       	ldi	r29, 0x00	; 0
			
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     87c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <fnd_refreshrate>
     880:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <fnd_refreshrate+0x1>
     884:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <fnd_refreshrate+0x2>
     888:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <fnd_refreshrate+0x3>
     88c:	02 97       	sbiw	r24, 0x02	; 2
     88e:	a1 05       	cpc	r26, r1
     890:	b1 05       	cpc	r27, r1
     892:	48 f0       	brcs	.+18     	; 0x8a6 <spindry_strength+0x16e>
		{
			fnd_refreshrate = 0;
     894:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <fnd_refreshrate>
     898:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <fnd_refreshrate+0x1>
     89c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate+0x2>
     8a0:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x3>
			fnd_display();
     8a4:	97 dc       	rcall	.-1746   	; 0x1d4 <fnd_display>
	PORTA = 0x01;
	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도
	
	while (spindry_strength_toggle)
     8a6:	20 97       	sbiw	r28, 0x00	; 0
     8a8:	09 f0       	breq	.+2      	; 0x8ac <spindry_strength+0x174>
     8aa:	59 cf       	rjmp	.-334    	; 0x75e <spindry_strength+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <auto_wash_start>:

void auto_wash_start(void)
{
	sec_count = total_wash_time;
     8b2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <total_wash_time>
     8b6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <total_wash_time+0x1>
     8ba:	09 2e       	mov	r0, r25
     8bc:	00 0c       	add	r0, r0
     8be:	aa 0b       	sbc	r26, r26
     8c0:	bb 0b       	sbc	r27, r27
     8c2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     8c6:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     8ca:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     8ce:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
	
	while (sec_count > 0)
     8d2:	45 c0       	rjmp	.+138    	; 0x95e <auto_wash_start+0xac>
	{
		/*washing_machine_fan_control(&spin_strength_val);*/
		OCR3C = spin_strength_val;
     8d4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <spin_strength_val>
     8d8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <spin_strength_val+0x1>
     8dc:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     8e0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
		if (msec_count >= 1000)
     8e4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <msec_count>
     8e8:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <msec_count+0x1>
     8ec:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <msec_count+0x2>
     8f0:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <msec_count+0x3>
     8f4:	88 3e       	cpi	r24, 0xE8	; 232
     8f6:	93 40       	sbci	r25, 0x03	; 3
     8f8:	a1 05       	cpc	r26, r1
     8fa:	b1 05       	cpc	r27, r1
     8fc:	d8 f0       	brcs	.+54     	; 0x934 <auto_wash_start+0x82>
		{
			msec_count = 0;
     8fe:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <msec_count>
     902:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <msec_count+0x1>
     906:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <msec_count+0x2>
     90a:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <msec_count+0x3>
			sec_count--;
     90e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     912:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     916:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     91a:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	a1 09       	sbc	r26, r1
     922:	b1 09       	sbc	r27, r1
     924:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <sec_count>
     928:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <sec_count+0x1>
     92c:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <sec_count+0x2>
     930:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <sec_count+0x3>
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     934:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <fnd_refreshrate>
     938:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <fnd_refreshrate+0x1>
     93c:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <fnd_refreshrate+0x2>
     940:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <fnd_refreshrate+0x3>
     944:	02 97       	sbiw	r24, 0x02	; 2
     946:	a1 05       	cpc	r26, r1
     948:	b1 05       	cpc	r27, r1
     94a:	48 f0       	brcs	.+18     	; 0x95e <auto_wash_start+0xac>
		{
			fnd_refreshrate = 0;
     94c:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <fnd_refreshrate>
     950:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <fnd_refreshrate+0x1>
     954:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <fnd_refreshrate+0x2>
     958:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <fnd_refreshrate+0x3>
			fnd_display();
     95c:	3b dc       	rcall	.-1930   	; 0x1d4 <fnd_display>

void auto_wash_start(void)
{
	sec_count = total_wash_time;
	
	while (sec_count > 0)
     95e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <sec_count>
     962:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <sec_count+0x1>
     966:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <sec_count+0x2>
     96a:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <sec_count+0x3>
     96e:	89 2b       	or	r24, r25
     970:	8a 2b       	or	r24, r26
     972:	8b 2b       	or	r24, r27
     974:	09 f0       	breq	.+2      	; 0x978 <auto_wash_start+0xc6>
     976:	ae cf       	rjmp	.-164    	; 0x8d4 <auto_wash_start+0x22>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
	sec_count = 0;
     978:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <sec_count>
     97c:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <sec_count+0x1>
     980:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <sec_count+0x2>
     984:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <sec_count+0x3>
	auto_wash_mode = 4;
     988:	84 e0       	ldi	r24, 0x04	; 4
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <auto_wash_mode+0x1>
     990:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <auto_wash_mode>
     994:	08 95       	ret

00000996 <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     996:	1f 92       	push	r1
     998:	0f 92       	push	r0
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	0f 92       	push	r0
     99e:	11 24       	eor	r1, r1
     9a0:	8f 93       	push	r24
     9a2:	9f 93       	push	r25
     9a4:	af 93       	push	r26
     9a6:	bf 93       	push	r27
	TCNT0=6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
     9a8:	86 e0       	ldi	r24, 0x06	; 6
     9aa:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
     9ac:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <msec_count>
     9b0:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <msec_count+0x1>
     9b4:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <msec_count+0x2>
     9b8:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <msec_count+0x3>
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	a1 1d       	adc	r26, r1
     9c0:	b1 1d       	adc	r27, r1
     9c2:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <msec_count>
     9c6:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <msec_count+0x1>
     9ca:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <msec_count+0x2>
     9ce:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <msec_count+0x3>
	fnd_refreshrate++;   // fnd 잔상효과 유지 하기 위한 timer 2ms
     9d2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <fnd_refreshrate>
     9d6:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <fnd_refreshrate+0x1>
     9da:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <fnd_refreshrate+0x2>
     9de:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <fnd_refreshrate+0x3>
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	a1 1d       	adc	r26, r1
     9e6:	b1 1d       	adc	r27, r1
     9e8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <fnd_refreshrate>
     9ec:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <fnd_refreshrate+0x1>
     9f0:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <fnd_refreshrate+0x2>
     9f4:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <fnd_refreshrate+0x3>
	check_timer++;
     9f8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <check_timer>
     9fc:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <check_timer+0x1>
     a00:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <check_timer+0x2>
     a04:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <check_timer+0x3>
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	a1 1d       	adc	r26, r1
     a0c:	b1 1d       	adc	r27, r1
     a0e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <check_timer>
     a12:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <check_timer+0x1>
     a16:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <check_timer+0x2>
     a1a:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <check_timer+0x3>
}
     a1e:	bf 91       	pop	r27
     a20:	af 91       	pop	r26
     a22:	9f 91       	pop	r25
     a24:	8f 91       	pop	r24
     a26:	0f 90       	pop	r0
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	0f 90       	pop	r0
     a2c:	1f 90       	pop	r1
     a2e:	18 95       	reti

00000a30 <init_timer0>:
	}
}

void init_timer0()
{
	TCNT0 = 6;
     a30:	86 e0       	ldi	r24, 0x06	; 6
     a32:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     a34:	83 b7       	in	r24, 0x33	; 51
     a36:	84 60       	ori	r24, 0x04	; 4
     a38:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
     a3a:	87 b7       	in	r24, 0x37	; 55
     a3c:	81 60       	ori	r24, 0x01	; 1
     a3e:	87 bf       	out	0x37, r24	; 55
     a40:	08 95       	ret

00000a42 <main>:
	check_timer++;
}

int main(void)
{
	init_timer0();
     a42:	f6 df       	rcall	.-20     	; 0xa30 <init_timer0>
	init_uart0();
     a44:	af d0       	rcall	.+350    	; 0xba4 <init_uart0>
	init_uart1();
     a46:	41 d1       	rcall	.+642    	; 0xcca <init_uart1>
	init_ultrasonic();
     a48:	b1 d1       	rcall	.+866    	; 0xdac <init_ultrasonic>
	init_button();
     a4a:	3f db       	rcall	.-2434   	; 0xca <init_button>
     a4c:	0c d0       	rcall	.+24     	; 0xa66 <init_timer3_pwm>
	init_timer3_pwm();
     a4e:	23 d0       	rcall	.+70     	; 0xa96 <init_n289n>
     a50:	8c e1       	ldi	r24, 0x1C	; 28
	init_n289n();
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	90 93 d9 07 	sts	0x07D9, r25	; 0x8007d9 <__iob+0x3>
	
	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     a58:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <__iob+0x2>
     a5c:	8f ef       	ldi	r24, 0xFF	; 255
     a5e:	8a bb       	out	0x1a, r24	; 26
	
	DDRA=0xff;   // led를 출력 모드로
     a60:	78 94       	sei
     a62:	84 dc       	rcall	.-1784   	; 0x36c <fnd_main>
	sei();     // 전역적으로 interrupt 허용
     a64:	ff cf       	rjmp	.-2      	; 0xa64 <main+0x22>

00000a66 <init_timer3_pwm>:
	
	//hw_pwm_fan_control();
	
	fnd_main();
     a66:	82 b1       	in	r24, 0x02	; 2
     a68:	88 62       	ori	r24, 0x28	; 40
     a6a:	82 b9       	out	0x02, r24	; 2
void init_timer3_pwm(void)
{
	// DDRE |= 1 << 3 | 1 << 4 | 1 << 5; 현재 4번에 초음파가 연결되어 있다.
	DDRE |= 1 << 3 | 1 << 5;
	// 모드 5 : 8비트 고속 pwm    TCCR3A레지스터 WGM30과 TCCR3B레지스터 WGM32를 1로 만든다.
	TCCR3A |= 1 << WGM30;
     a6c:	ab e8       	ldi	r26, 0x8B	; 139
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	8c 91       	ld	r24, X
     a72:	81 60       	ori	r24, 0x01	; 1
     a74:	8c 93       	st	X, r24
	TCCR3B |= 1 << WGM32;
     a76:	ea e8       	ldi	r30, 0x8A	; 138
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	88 60       	ori	r24, 0x08	; 8
     a7e:	80 83       	st	Z, r24
	// 비반전모드 top : 0x00ff  비교일치값(pwm)지정 : OCR3C
	// TCCR3A레지스터의 COM3C1을 1로 set
	// 비교일치 발생시 OC3C의 출력 핀은 LOw로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR3A |= 1 << COM3C1;
     a80:	8c 91       	ld	r24, X
     a82:	88 60       	ori	r24, 0x08	; 8
     a84:	8c 93       	st	X, r24
	// 분주비 : 64   16,000,000hz -> 250,000hz         TCCR3B의 CS30, CS31을 1로 set
	// 주기 : 1 / 250,000 -> 4us
	// 250000hz에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//			    127개의 펄스를 count하면 소요시간 : 0.51ms
	TCCR3B |= 1 << CS31 | 1 << CS30;
     a86:	80 81       	ld	r24, Z
     a88:	83 60       	ori	r24, 0x03	; 3
     a8a:	80 83       	st	Z, r24
	OCR3C = 0; // 비교일치값 (Output Compare Register : PWM 값
     a8c:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     a90:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     a94:	08 95       	ret

00000a96 <init_n289n>:

void init_n289n(void)
{
	//PF6 : IN1 (N298N)
	//PF7 : IN2 (N298N)
	PORTF &= ~(1 << 6 | 1 << 7);  // 6, 7 reset
     a96:	e2 e6       	ldi	r30, 0x62	; 98
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	8f 73       	andi	r24, 0x3F	; 63
     a9e:	80 83       	st	Z, r24
	PORTF |= 1 << 6; // 정회전
     aa0:	80 81       	ld	r24, Z
     aa2:	80 64       	ori	r24, 0x40	; 64
     aa4:	80 83       	st	Z, r24
     aa6:	08 95       	ret

00000aa8 <__vector_18>:

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     aa8:	1f 92       	push	r1
     aaa:	0f 92       	push	r0
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	0f 92       	push	r0
     ab0:	11 24       	eor	r1, r1
     ab2:	0b b6       	in	r0, 0x3b	; 59
     ab4:	0f 92       	push	r0
     ab6:	2f 93       	push	r18
     ab8:	3f 93       	push	r19
     aba:	4f 93       	push	r20
     abc:	5f 93       	push	r21
     abe:	6f 93       	push	r22
     ac0:	7f 93       	push	r23
     ac2:	8f 93       	push	r24
     ac4:	9f 93       	push	r25
     ac6:	af 93       	push	r26
     ac8:	bf 93       	push	r27
     aca:	ef 93       	push	r30
     acc:	ff 93       	push	r31
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	1f 92       	push	r1
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     ad8:	8c b1       	in	r24, 0x0c	; 12
     ada:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	8d 30       	cpi	r24, 0x0D	; 13
     ae0:	19 f0       	breq	.+6      	; 0xae8 <__vector_18+0x40>
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	8a 30       	cpi	r24, 0x0A	; 10
     ae6:	61 f5       	brne	.+88     	; 0xb40 <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     ae8:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <rear>
     aec:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <rear+0x1>
     af0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <i.1894>
     af4:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <i.1894+0x1>
     af8:	40 e5       	ldi	r20, 0x50	; 80
     afa:	42 9f       	mul	r20, r18
     afc:	f0 01       	movw	r30, r0
     afe:	43 9f       	mul	r20, r19
     b00:	f0 0d       	add	r31, r0
     b02:	11 24       	eor	r1, r1
     b04:	ec 59       	subi	r30, 0x9C	; 156
     b06:	fe 4f       	sbci	r31, 0xFE	; 254
     b08:	e8 0f       	add	r30, r24
     b0a:	f9 1f       	adc	r31, r25
     b0c:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     b0e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <i.1894+0x1>
     b12:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <i.1894>
		rear++;
     b16:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rear>
     b1a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <rear+0x1>
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <rear+0x1>
     b24:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
     b28:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rear>
     b2c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <rear+0x1>
     b30:	6a e0       	ldi	r22, 0x0A	; 10
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	d7 d2       	rcall	.+1454   	; 0x10e4 <__divmodhi4>
     b36:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <rear+0x1>
     b3a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <rear>
     b3e:	1c c0       	rjmp	.+56     	; 0xb78 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
     b40:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <rear>
     b44:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <rear+0x1>
     b48:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <i.1894>
     b4c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <i.1894+0x1>
     b50:	9c 01       	movw	r18, r24
     b52:	2f 5f       	subi	r18, 0xFF	; 255
     b54:	3f 4f       	sbci	r19, 0xFF	; 255
     b56:	30 93 5b 01 	sts	0x015B, r19	; 0x80015b <i.1894+0x1>
     b5a:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <i.1894>
     b5e:	49 81       	ldd	r20, Y+1	; 0x01
     b60:	50 e5       	ldi	r21, 0x50	; 80
     b62:	56 9f       	mul	r21, r22
     b64:	90 01       	movw	r18, r0
     b66:	57 9f       	mul	r21, r23
     b68:	30 0d       	add	r19, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	2c 59       	subi	r18, 0x9C	; 156
     b6e:	3e 4f       	sbci	r19, 0xFE	; 254
     b70:	f9 01       	movw	r30, r18
     b72:	e8 0f       	add	r30, r24
     b74:	f9 1f       	adc	r31, r25
     b76:	40 83       	st	Z, r20
	}
		  
}
     b78:	0f 90       	pop	r0
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	ff 91       	pop	r31
     b80:	ef 91       	pop	r30
     b82:	bf 91       	pop	r27
     b84:	af 91       	pop	r26
     b86:	9f 91       	pop	r25
     b88:	8f 91       	pop	r24
     b8a:	7f 91       	pop	r23
     b8c:	6f 91       	pop	r22
     b8e:	5f 91       	pop	r21
     b90:	4f 91       	pop	r20
     b92:	3f 91       	pop	r19
     b94:	2f 91       	pop	r18
     b96:	0f 90       	pop	r0
     b98:	0b be       	out	0x3b, r0	; 59
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
     ba4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
     ba8:	8f ec       	ldi	r24, 0xCF	; 207
     baa:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
     bac:	8b b1       	in	r24, 0x0b	; 11
     bae:	82 60       	ori	r24, 0x02	; 2
     bb0:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     bb2:	e5 e9       	ldi	r30, 0x95	; 149
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	86 60       	ori	r24, 0x06	; 6
     bba:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     bbc:	8a b1       	in	r24, 0x0a	; 10
     bbe:	88 69       	ori	r24, 0x98	; 152
     bc0:	8a b9       	out	0x0a, r24	; 10
     bc2:	08 95       	ret

00000bc4 <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
     bc4:	5d 9b       	sbis	0x0b, 5	; 11
     bc6:	fe cf       	rjmp	.-4      	; 0xbc4 <UART0_transmit>
		;   // no operation NOP
	
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
     bc8:	8c b9       	out	0x0c, r24	; 12
     bca:	08 95       	ret

00000bcc <__vector_30>:

// BT로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART1_RX_vect)
{
     bcc:	1f 92       	push	r1
     bce:	0f 92       	push	r0
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1
     bd6:	0b b6       	in	r0, 0x3b	; 59
     bd8:	0f 92       	push	r0
     bda:	2f 93       	push	r18
     bdc:	3f 93       	push	r19
     bde:	4f 93       	push	r20
     be0:	5f 93       	push	r21
     be2:	6f 93       	push	r22
     be4:	7f 93       	push	r23
     be6:	8f 93       	push	r24
     be8:	9f 93       	push	r25
     bea:	af 93       	push	r26
     bec:	bf 93       	push	r27
     bee:	ef 93       	push	r30
     bf0:	ff 93       	push	r31
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	1f 92       	push	r1
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
     bfc:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     c00:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	8d 30       	cpi	r24, 0x0D	; 13
     c06:	19 f0       	breq	.+6      	; 0xc0e <__vector_30+0x42>
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	8a 30       	cpi	r24, 0x0A	; 10
     c0c:	61 f5       	brne	.+88     	; 0xc66 <__vector_30+0x9a>
	{
		rx1_buff[rear1][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     c0e:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <rear1>
     c12:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <rear1+0x1>
     c16:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <i.1896>
     c1a:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <i.1896+0x1>
     c1e:	40 e5       	ldi	r20, 0x50	; 80
     c20:	42 9f       	mul	r20, r18
     c22:	f0 01       	movw	r30, r0
     c24:	43 9f       	mul	r20, r19
     c26:	f0 0d       	add	r31, r0
     c28:	11 24       	eor	r1, r1
     c2a:	ec 57       	subi	r30, 0x7C	; 124
     c2c:	fb 4f       	sbci	r31, 0xFB	; 251
     c2e:	e8 0f       	add	r30, r24
     c30:	f9 1f       	adc	r31, r25
     c32:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     c34:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <i.1896+0x1>
     c38:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <i.1896>
		rear1++;
     c3c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rear1>
     c40:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <rear1+0x1>
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <rear1+0x1>
     c4a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <rear1>
		rear1 %= COMMAND_NUMBER;   // 0 ~ 9 if (rear1 >= 9) rear1 =0;
     c4e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rear1>
     c52:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <rear1+0x1>
     c56:	6a e0       	ldi	r22, 0x0A	; 10
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	44 d2       	rcall	.+1160   	; 0x10e4 <__divmodhi4>
     c5c:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <rear1+0x1>
     c60:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <rear1>
     c64:	1c c0       	rjmp	.+56     	; 0xc9e <__vector_30+0xd2>
		// !!!! 이곳에 queue full (rx1_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx1_buff[rear1][i++] = data;
     c66:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <rear1>
     c6a:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <rear1+0x1>
     c6e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <i.1896>
     c72:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <i.1896+0x1>
     c76:	9c 01       	movw	r18, r24
     c78:	2f 5f       	subi	r18, 0xFF	; 255
     c7a:	3f 4f       	sbci	r19, 0xFF	; 255
     c7c:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <i.1896+0x1>
     c80:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <i.1896>
     c84:	49 81       	ldd	r20, Y+1	; 0x01
     c86:	50 e5       	ldi	r21, 0x50	; 80
     c88:	56 9f       	mul	r21, r22
     c8a:	90 01       	movw	r18, r0
     c8c:	57 9f       	mul	r21, r23
     c8e:	30 0d       	add	r19, r0
     c90:	11 24       	eor	r1, r1
     c92:	2c 57       	subi	r18, 0x7C	; 124
     c94:	3b 4f       	sbci	r19, 0xFB	; 251
     c96:	f9 01       	movw	r30, r18
     c98:	e8 0f       	add	r30, r24
     c9a:	f9 1f       	adc	r31, r25
     c9c:	40 83       	st	Z, r20
	}
		  
}
     c9e:	0f 90       	pop	r0
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	ff 91       	pop	r31
     ca6:	ef 91       	pop	r30
     ca8:	bf 91       	pop	r27
     caa:	af 91       	pop	r26
     cac:	9f 91       	pop	r25
     cae:	8f 91       	pop	r24
     cb0:	7f 91       	pop	r23
     cb2:	6f 91       	pop	r22
     cb4:	5f 91       	pop	r21
     cb6:	4f 91       	pop	r20
     cb8:	3f 91       	pop	r19
     cba:	2f 91       	pop	r18
     cbc:	0f 90       	pop	r0
     cbe:	0b be       	out	0x3b, r0	; 59
     cc0:	0f 90       	pop	r0
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	0f 90       	pop	r0
     cc6:	1f 90       	pop	r1
     cc8:	18 95       	reti

00000cca <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
     cca:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
     cce:	8f ec       	ldi	r24, 0xCF	; 207
     cd0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
     cd4:	eb e9       	ldi	r30, 0x9B	; 155
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	82 60       	ori	r24, 0x02	; 2
     cdc:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     cde:	ed e9       	ldi	r30, 0x9D	; 157
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	86 60       	ori	r24, 0x06	; 6
     ce6:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     ce8:	ea e9       	ldi	r30, 0x9A	; 154
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	88 69       	ori	r24, 0x98	; 152
     cf0:	80 83       	st	Z, r24
     cf2:	08 95       	ret

00000cf4 <__vector_5>:
char scm[50];

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect)
{
     cf4:	1f 92       	push	r1
     cf6:	0f 92       	push	r0
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	0f 92       	push	r0
     cfc:	11 24       	eor	r1, r1
     cfe:	0b b6       	in	r0, 0x3b	; 59
     d00:	0f 92       	push	r0
     d02:	2f 93       	push	r18
     d04:	3f 93       	push	r19
     d06:	4f 93       	push	r20
     d08:	5f 93       	push	r21
     d0a:	6f 93       	push	r22
     d0c:	7f 93       	push	r23
     d0e:	8f 93       	push	r24
     d10:	9f 93       	push	r25
     d12:	af 93       	push	r26
     d14:	bf 93       	push	r27
     d16:	ef 93       	push	r30
     d18:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN & (1 << ECHO))
     d1a:	0c 9b       	sbis	0x01, 4	; 1
     d1c:	03 c0       	rjmp	.+6      	; 0xd24 <__vector_5+0x30>
	{
		TCNT1 = 0;
     d1e:	1d bc       	out	0x2d, r1	; 45
     d20:	1c bc       	out	0x2c, r1	; 44
     d22:	31 c0       	rjmp	.+98     	; 0xd86 <__vector_5+0x92>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
     d24:	6c b5       	in	r22, 0x2c	; 44
     d26:	7d b5       	in	r23, 0x2d	; 45
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	ea d0       	rcall	.+468    	; 0xf02 <__floatunsisf>
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	34 e2       	ldi	r19, 0x24	; 36
     d32:	44 e7       	ldi	r20, 0x74	; 116
     d34:	59 e4       	ldi	r21, 0x49	; 73
     d36:	73 d1       	rcall	.+742    	; 0x101e <__mulsf3>
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e8       	ldi	r20, 0x80	; 128
     d3e:	54 e4       	ldi	r21, 0x44	; 68
     d40:	6e d1       	rcall	.+732    	; 0x101e <__mulsf3>
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	34 e2       	ldi	r19, 0x24	; 36
     d46:	44 e7       	ldi	r20, 0x74	; 116
     d48:	5b e4       	ldi	r21, 0x4B	; 75
     d4a:	42 d0       	rcall	.+132    	; 0xdd0 <__divsf3>
     d4c:	a9 d0       	rcall	.+338    	; 0xea0 <__fixsfsi>
     d4e:	70 93 63 01 	sts	0x0163, r23	; 0x800163 <ultrasonic_distance+0x1>
     d52:	60 93 62 01 	sts	0x0162, r22	; 0x800162 <ultrasonic_distance>
		
		// 예) TCNT1에 10이 들어 있다고 가정하자
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
		sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
     d56:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <ultrasonic_distance>
     d5a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <ultrasonic_distance+0x1>
     d5e:	6a e3       	ldi	r22, 0x3A	; 58
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	c0 d1       	rcall	.+896    	; 0x10e4 <__divmodhi4>
     d64:	7f 93       	push	r23
     d66:	6f 93       	push	r22
     d68:	85 e3       	ldi	r24, 0x35	; 53
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	9f 93       	push	r25
     d6e:	8f 93       	push	r24
     d70:	84 ea       	ldi	r24, 0xA4	; 164
     d72:	97 e0       	ldi	r25, 0x07	; 7
     d74:	9f 93       	push	r25
     d76:	8f 93       	push	r24
     d78:	fe d1       	rcall	.+1020   	; 0x1176 <sprintf>
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
	}
}
     d86:	ff 91       	pop	r31
     d88:	ef 91       	pop	r30
     d8a:	bf 91       	pop	r27
     d8c:	af 91       	pop	r26
     d8e:	9f 91       	pop	r25
     d90:	8f 91       	pop	r24
     d92:	7f 91       	pop	r23
     d94:	6f 91       	pop	r22
     d96:	5f 91       	pop	r21
     d98:	4f 91       	pop	r20
     d9a:	3f 91       	pop	r19
     d9c:	2f 91       	pop	r18
     d9e:	0f 90       	pop	r0
     da0:	0b be       	out	0x3b, r0	; 59
     da2:	0f 90       	pop	r0
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	0f 90       	pop	r0
     da8:	1f 90       	pop	r1
     daa:	18 95       	reti

00000dac <init_ultrasonic>:

void init_ultrasonic()
{
	TRIG_DDR |= 1 << TRIG; // output mode로 설정
     dac:	e4 e6       	ldi	r30, 0x64	; 100
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	80 61       	ori	r24, 0x10	; 16
     db4:	80 83       	st	Z, r24
	ECHO_DDR &= ~(1 << ECHO); // input mode로 설정
     db6:	82 b1       	in	r24, 0x02	; 2
     db8:	8f 7e       	andi	r24, 0xEF	; 239
     dba:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
     dbc:	8a b7       	in	r24, 0x3a	; 58
     dbe:	81 60       	ori	r24, 0x01	; 1
     dc0:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us	
	TCCR1B |=  1 << CS12 | 1 << CS10; // 1024로 분주
     dc2:	8e b5       	in	r24, 0x2e	; 46
     dc4:	85 60       	ori	r24, 0x05	; 5
     dc6:	8e bd       	out	0x2e, r24	; 46
	EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
     dc8:	89 b7       	in	r24, 0x39	; 57
     dca:	80 61       	ori	r24, 0x10	; 16
     dcc:	89 bf       	out	0x39, r24	; 57
     dce:	08 95       	ret

00000dd0 <__divsf3>:
     dd0:	0c d0       	rcall	.+24     	; 0xdea <__divsf3x>
     dd2:	eb c0       	rjmp	.+470    	; 0xfaa <__fp_round>
     dd4:	e3 d0       	rcall	.+454    	; 0xf9c <__fp_pscB>
     dd6:	40 f0       	brcs	.+16     	; 0xde8 <__divsf3+0x18>
     dd8:	da d0       	rcall	.+436    	; 0xf8e <__fp_pscA>
     dda:	30 f0       	brcs	.+12     	; 0xde8 <__divsf3+0x18>
     ddc:	21 f4       	brne	.+8      	; 0xde6 <__divsf3+0x16>
     dde:	5f 3f       	cpi	r21, 0xFF	; 255
     de0:	19 f0       	breq	.+6      	; 0xde8 <__divsf3+0x18>
     de2:	cc c0       	rjmp	.+408    	; 0xf7c <__fp_inf>
     de4:	51 11       	cpse	r21, r1
     de6:	15 c1       	rjmp	.+554    	; 0x1012 <__fp_szero>
     de8:	cf c0       	rjmp	.+414    	; 0xf88 <__fp_nan>

00000dea <__divsf3x>:
     dea:	f0 d0       	rcall	.+480    	; 0xfcc <__fp_split3>
     dec:	98 f3       	brcs	.-26     	; 0xdd4 <__divsf3+0x4>

00000dee <__divsf3_pse>:
     dee:	99 23       	and	r25, r25
     df0:	c9 f3       	breq	.-14     	; 0xde4 <__divsf3+0x14>
     df2:	55 23       	and	r21, r21
     df4:	b1 f3       	breq	.-20     	; 0xde2 <__divsf3+0x12>
     df6:	95 1b       	sub	r25, r21
     df8:	55 0b       	sbc	r21, r21
     dfa:	bb 27       	eor	r27, r27
     dfc:	aa 27       	eor	r26, r26
     dfe:	62 17       	cp	r22, r18
     e00:	73 07       	cpc	r23, r19
     e02:	84 07       	cpc	r24, r20
     e04:	38 f0       	brcs	.+14     	; 0xe14 <__divsf3_pse+0x26>
     e06:	9f 5f       	subi	r25, 0xFF	; 255
     e08:	5f 4f       	sbci	r21, 0xFF	; 255
     e0a:	22 0f       	add	r18, r18
     e0c:	33 1f       	adc	r19, r19
     e0e:	44 1f       	adc	r20, r20
     e10:	aa 1f       	adc	r26, r26
     e12:	a9 f3       	breq	.-22     	; 0xdfe <__divsf3_pse+0x10>
     e14:	33 d0       	rcall	.+102    	; 0xe7c <__divsf3_pse+0x8e>
     e16:	0e 2e       	mov	r0, r30
     e18:	3a f0       	brmi	.+14     	; 0xe28 <__divsf3_pse+0x3a>
     e1a:	e0 e8       	ldi	r30, 0x80	; 128
     e1c:	30 d0       	rcall	.+96     	; 0xe7e <__divsf3_pse+0x90>
     e1e:	91 50       	subi	r25, 0x01	; 1
     e20:	50 40       	sbci	r21, 0x00	; 0
     e22:	e6 95       	lsr	r30
     e24:	00 1c       	adc	r0, r0
     e26:	ca f7       	brpl	.-14     	; 0xe1a <__divsf3_pse+0x2c>
     e28:	29 d0       	rcall	.+82     	; 0xe7c <__divsf3_pse+0x8e>
     e2a:	fe 2f       	mov	r31, r30
     e2c:	27 d0       	rcall	.+78     	; 0xe7c <__divsf3_pse+0x8e>
     e2e:	66 0f       	add	r22, r22
     e30:	77 1f       	adc	r23, r23
     e32:	88 1f       	adc	r24, r24
     e34:	bb 1f       	adc	r27, r27
     e36:	26 17       	cp	r18, r22
     e38:	37 07       	cpc	r19, r23
     e3a:	48 07       	cpc	r20, r24
     e3c:	ab 07       	cpc	r26, r27
     e3e:	b0 e8       	ldi	r27, 0x80	; 128
     e40:	09 f0       	breq	.+2      	; 0xe44 <__divsf3_pse+0x56>
     e42:	bb 0b       	sbc	r27, r27
     e44:	80 2d       	mov	r24, r0
     e46:	bf 01       	movw	r22, r30
     e48:	ff 27       	eor	r31, r31
     e4a:	93 58       	subi	r25, 0x83	; 131
     e4c:	5f 4f       	sbci	r21, 0xFF	; 255
     e4e:	2a f0       	brmi	.+10     	; 0xe5a <__divsf3_pse+0x6c>
     e50:	9e 3f       	cpi	r25, 0xFE	; 254
     e52:	51 05       	cpc	r21, r1
     e54:	68 f0       	brcs	.+26     	; 0xe70 <__divsf3_pse+0x82>
     e56:	92 c0       	rjmp	.+292    	; 0xf7c <__fp_inf>
     e58:	dc c0       	rjmp	.+440    	; 0x1012 <__fp_szero>
     e5a:	5f 3f       	cpi	r21, 0xFF	; 255
     e5c:	ec f3       	brlt	.-6      	; 0xe58 <__divsf3_pse+0x6a>
     e5e:	98 3e       	cpi	r25, 0xE8	; 232
     e60:	dc f3       	brlt	.-10     	; 0xe58 <__divsf3_pse+0x6a>
     e62:	86 95       	lsr	r24
     e64:	77 95       	ror	r23
     e66:	67 95       	ror	r22
     e68:	b7 95       	ror	r27
     e6a:	f7 95       	ror	r31
     e6c:	9f 5f       	subi	r25, 0xFF	; 255
     e6e:	c9 f7       	brne	.-14     	; 0xe62 <__divsf3_pse+0x74>
     e70:	88 0f       	add	r24, r24
     e72:	91 1d       	adc	r25, r1
     e74:	96 95       	lsr	r25
     e76:	87 95       	ror	r24
     e78:	97 f9       	bld	r25, 7
     e7a:	08 95       	ret
     e7c:	e1 e0       	ldi	r30, 0x01	; 1
     e7e:	66 0f       	add	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	88 1f       	adc	r24, r24
     e84:	bb 1f       	adc	r27, r27
     e86:	62 17       	cp	r22, r18
     e88:	73 07       	cpc	r23, r19
     e8a:	84 07       	cpc	r24, r20
     e8c:	ba 07       	cpc	r27, r26
     e8e:	20 f0       	brcs	.+8      	; 0xe98 <__divsf3_pse+0xaa>
     e90:	62 1b       	sub	r22, r18
     e92:	73 0b       	sbc	r23, r19
     e94:	84 0b       	sbc	r24, r20
     e96:	ba 0b       	sbc	r27, r26
     e98:	ee 1f       	adc	r30, r30
     e9a:	88 f7       	brcc	.-30     	; 0xe7e <__divsf3_pse+0x90>
     e9c:	e0 95       	com	r30
     e9e:	08 95       	ret

00000ea0 <__fixsfsi>:
     ea0:	04 d0       	rcall	.+8      	; 0xeaa <__fixunssfsi>
     ea2:	68 94       	set
     ea4:	b1 11       	cpse	r27, r1
     ea6:	b5 c0       	rjmp	.+362    	; 0x1012 <__fp_szero>
     ea8:	08 95       	ret

00000eaa <__fixunssfsi>:
     eaa:	98 d0       	rcall	.+304    	; 0xfdc <__fp_splitA>
     eac:	88 f0       	brcs	.+34     	; 0xed0 <__fixunssfsi+0x26>
     eae:	9f 57       	subi	r25, 0x7F	; 127
     eb0:	90 f0       	brcs	.+36     	; 0xed6 <__fixunssfsi+0x2c>
     eb2:	b9 2f       	mov	r27, r25
     eb4:	99 27       	eor	r25, r25
     eb6:	b7 51       	subi	r27, 0x17	; 23
     eb8:	a0 f0       	brcs	.+40     	; 0xee2 <__fixunssfsi+0x38>
     eba:	d1 f0       	breq	.+52     	; 0xef0 <__fixunssfsi+0x46>
     ebc:	66 0f       	add	r22, r22
     ebe:	77 1f       	adc	r23, r23
     ec0:	88 1f       	adc	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	1a f0       	brmi	.+6      	; 0xecc <__fixunssfsi+0x22>
     ec6:	ba 95       	dec	r27
     ec8:	c9 f7       	brne	.-14     	; 0xebc <__fixunssfsi+0x12>
     eca:	12 c0       	rjmp	.+36     	; 0xef0 <__fixunssfsi+0x46>
     ecc:	b1 30       	cpi	r27, 0x01	; 1
     ece:	81 f0       	breq	.+32     	; 0xef0 <__fixunssfsi+0x46>
     ed0:	9f d0       	rcall	.+318    	; 0x1010 <__fp_zero>
     ed2:	b1 e0       	ldi	r27, 0x01	; 1
     ed4:	08 95       	ret
     ed6:	9c c0       	rjmp	.+312    	; 0x1010 <__fp_zero>
     ed8:	67 2f       	mov	r22, r23
     eda:	78 2f       	mov	r23, r24
     edc:	88 27       	eor	r24, r24
     ede:	b8 5f       	subi	r27, 0xF8	; 248
     ee0:	39 f0       	breq	.+14     	; 0xef0 <__fixunssfsi+0x46>
     ee2:	b9 3f       	cpi	r27, 0xF9	; 249
     ee4:	cc f3       	brlt	.-14     	; 0xed8 <__fixunssfsi+0x2e>
     ee6:	86 95       	lsr	r24
     ee8:	77 95       	ror	r23
     eea:	67 95       	ror	r22
     eec:	b3 95       	inc	r27
     eee:	d9 f7       	brne	.-10     	; 0xee6 <__fixunssfsi+0x3c>
     ef0:	3e f4       	brtc	.+14     	; 0xf00 <__fixunssfsi+0x56>
     ef2:	90 95       	com	r25
     ef4:	80 95       	com	r24
     ef6:	70 95       	com	r23
     ef8:	61 95       	neg	r22
     efa:	7f 4f       	sbci	r23, 0xFF	; 255
     efc:	8f 4f       	sbci	r24, 0xFF	; 255
     efe:	9f 4f       	sbci	r25, 0xFF	; 255
     f00:	08 95       	ret

00000f02 <__floatunsisf>:
     f02:	e8 94       	clt
     f04:	09 c0       	rjmp	.+18     	; 0xf18 <__floatsisf+0x12>

00000f06 <__floatsisf>:
     f06:	97 fb       	bst	r25, 7
     f08:	3e f4       	brtc	.+14     	; 0xf18 <__floatsisf+0x12>
     f0a:	90 95       	com	r25
     f0c:	80 95       	com	r24
     f0e:	70 95       	com	r23
     f10:	61 95       	neg	r22
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	8f 4f       	sbci	r24, 0xFF	; 255
     f16:	9f 4f       	sbci	r25, 0xFF	; 255
     f18:	99 23       	and	r25, r25
     f1a:	a9 f0       	breq	.+42     	; 0xf46 <__floatsisf+0x40>
     f1c:	f9 2f       	mov	r31, r25
     f1e:	96 e9       	ldi	r25, 0x96	; 150
     f20:	bb 27       	eor	r27, r27
     f22:	93 95       	inc	r25
     f24:	f6 95       	lsr	r31
     f26:	87 95       	ror	r24
     f28:	77 95       	ror	r23
     f2a:	67 95       	ror	r22
     f2c:	b7 95       	ror	r27
     f2e:	f1 11       	cpse	r31, r1
     f30:	f8 cf       	rjmp	.-16     	; 0xf22 <__floatsisf+0x1c>
     f32:	fa f4       	brpl	.+62     	; 0xf72 <__floatsisf+0x6c>
     f34:	bb 0f       	add	r27, r27
     f36:	11 f4       	brne	.+4      	; 0xf3c <__floatsisf+0x36>
     f38:	60 ff       	sbrs	r22, 0
     f3a:	1b c0       	rjmp	.+54     	; 0xf72 <__floatsisf+0x6c>
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	8f 4f       	sbci	r24, 0xFF	; 255
     f42:	9f 4f       	sbci	r25, 0xFF	; 255
     f44:	16 c0       	rjmp	.+44     	; 0xf72 <__floatsisf+0x6c>
     f46:	88 23       	and	r24, r24
     f48:	11 f0       	breq	.+4      	; 0xf4e <__floatsisf+0x48>
     f4a:	96 e9       	ldi	r25, 0x96	; 150
     f4c:	11 c0       	rjmp	.+34     	; 0xf70 <__floatsisf+0x6a>
     f4e:	77 23       	and	r23, r23
     f50:	21 f0       	breq	.+8      	; 0xf5a <__floatsisf+0x54>
     f52:	9e e8       	ldi	r25, 0x8E	; 142
     f54:	87 2f       	mov	r24, r23
     f56:	76 2f       	mov	r23, r22
     f58:	05 c0       	rjmp	.+10     	; 0xf64 <__floatsisf+0x5e>
     f5a:	66 23       	and	r22, r22
     f5c:	71 f0       	breq	.+28     	; 0xf7a <__floatsisf+0x74>
     f5e:	96 e8       	ldi	r25, 0x86	; 134
     f60:	86 2f       	mov	r24, r22
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	2a f0       	brmi	.+10     	; 0xf72 <__floatsisf+0x6c>
     f68:	9a 95       	dec	r25
     f6a:	66 0f       	add	r22, r22
     f6c:	77 1f       	adc	r23, r23
     f6e:	88 1f       	adc	r24, r24
     f70:	da f7       	brpl	.-10     	; 0xf68 <__floatsisf+0x62>
     f72:	88 0f       	add	r24, r24
     f74:	96 95       	lsr	r25
     f76:	87 95       	ror	r24
     f78:	97 f9       	bld	r25, 7
     f7a:	08 95       	ret

00000f7c <__fp_inf>:
     f7c:	97 f9       	bld	r25, 7
     f7e:	9f 67       	ori	r25, 0x7F	; 127
     f80:	80 e8       	ldi	r24, 0x80	; 128
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	08 95       	ret

00000f88 <__fp_nan>:
     f88:	9f ef       	ldi	r25, 0xFF	; 255
     f8a:	80 ec       	ldi	r24, 0xC0	; 192
     f8c:	08 95       	ret

00000f8e <__fp_pscA>:
     f8e:	00 24       	eor	r0, r0
     f90:	0a 94       	dec	r0
     f92:	16 16       	cp	r1, r22
     f94:	17 06       	cpc	r1, r23
     f96:	18 06       	cpc	r1, r24
     f98:	09 06       	cpc	r0, r25
     f9a:	08 95       	ret

00000f9c <__fp_pscB>:
     f9c:	00 24       	eor	r0, r0
     f9e:	0a 94       	dec	r0
     fa0:	12 16       	cp	r1, r18
     fa2:	13 06       	cpc	r1, r19
     fa4:	14 06       	cpc	r1, r20
     fa6:	05 06       	cpc	r0, r21
     fa8:	08 95       	ret

00000faa <__fp_round>:
     faa:	09 2e       	mov	r0, r25
     fac:	03 94       	inc	r0
     fae:	00 0c       	add	r0, r0
     fb0:	11 f4       	brne	.+4      	; 0xfb6 <__fp_round+0xc>
     fb2:	88 23       	and	r24, r24
     fb4:	52 f0       	brmi	.+20     	; 0xfca <__fp_round+0x20>
     fb6:	bb 0f       	add	r27, r27
     fb8:	40 f4       	brcc	.+16     	; 0xfca <__fp_round+0x20>
     fba:	bf 2b       	or	r27, r31
     fbc:	11 f4       	brne	.+4      	; 0xfc2 <__fp_round+0x18>
     fbe:	60 ff       	sbrs	r22, 0
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__fp_round+0x20>
     fc2:	6f 5f       	subi	r22, 0xFF	; 255
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
     fc6:	8f 4f       	sbci	r24, 0xFF	; 255
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	08 95       	ret

00000fcc <__fp_split3>:
     fcc:	57 fd       	sbrc	r21, 7
     fce:	90 58       	subi	r25, 0x80	; 128
     fd0:	44 0f       	add	r20, r20
     fd2:	55 1f       	adc	r21, r21
     fd4:	59 f0       	breq	.+22     	; 0xfec <__fp_splitA+0x10>
     fd6:	5f 3f       	cpi	r21, 0xFF	; 255
     fd8:	71 f0       	breq	.+28     	; 0xff6 <__fp_splitA+0x1a>
     fda:	47 95       	ror	r20

00000fdc <__fp_splitA>:
     fdc:	88 0f       	add	r24, r24
     fde:	97 fb       	bst	r25, 7
     fe0:	99 1f       	adc	r25, r25
     fe2:	61 f0       	breq	.+24     	; 0xffc <__fp_splitA+0x20>
     fe4:	9f 3f       	cpi	r25, 0xFF	; 255
     fe6:	79 f0       	breq	.+30     	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
     fe8:	87 95       	ror	r24
     fea:	08 95       	ret
     fec:	12 16       	cp	r1, r18
     fee:	13 06       	cpc	r1, r19
     ff0:	14 06       	cpc	r1, r20
     ff2:	55 1f       	adc	r21, r21
     ff4:	f2 cf       	rjmp	.-28     	; 0xfda <__fp_split3+0xe>
     ff6:	46 95       	lsr	r20
     ff8:	f1 df       	rcall	.-30     	; 0xfdc <__fp_splitA>
     ffa:	08 c0       	rjmp	.+16     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     ffc:	16 16       	cp	r1, r22
     ffe:	17 06       	cpc	r1, r23
    1000:	18 06       	cpc	r1, r24
    1002:	99 1f       	adc	r25, r25
    1004:	f1 cf       	rjmp	.-30     	; 0xfe8 <__fp_splitA+0xc>
    1006:	86 95       	lsr	r24
    1008:	71 05       	cpc	r23, r1
    100a:	61 05       	cpc	r22, r1
    100c:	08 94       	sec
    100e:	08 95       	ret

00001010 <__fp_zero>:
    1010:	e8 94       	clt

00001012 <__fp_szero>:
    1012:	bb 27       	eor	r27, r27
    1014:	66 27       	eor	r22, r22
    1016:	77 27       	eor	r23, r23
    1018:	cb 01       	movw	r24, r22
    101a:	97 f9       	bld	r25, 7
    101c:	08 95       	ret

0000101e <__mulsf3>:
    101e:	0b d0       	rcall	.+22     	; 0x1036 <__mulsf3x>
    1020:	c4 cf       	rjmp	.-120    	; 0xfaa <__fp_round>
    1022:	b5 df       	rcall	.-150    	; 0xf8e <__fp_pscA>
    1024:	28 f0       	brcs	.+10     	; 0x1030 <__mulsf3+0x12>
    1026:	ba df       	rcall	.-140    	; 0xf9c <__fp_pscB>
    1028:	18 f0       	brcs	.+6      	; 0x1030 <__mulsf3+0x12>
    102a:	95 23       	and	r25, r21
    102c:	09 f0       	breq	.+2      	; 0x1030 <__mulsf3+0x12>
    102e:	a6 cf       	rjmp	.-180    	; 0xf7c <__fp_inf>
    1030:	ab cf       	rjmp	.-170    	; 0xf88 <__fp_nan>
    1032:	11 24       	eor	r1, r1
    1034:	ee cf       	rjmp	.-36     	; 0x1012 <__fp_szero>

00001036 <__mulsf3x>:
    1036:	ca df       	rcall	.-108    	; 0xfcc <__fp_split3>
    1038:	a0 f3       	brcs	.-24     	; 0x1022 <__mulsf3+0x4>

0000103a <__mulsf3_pse>:
    103a:	95 9f       	mul	r25, r21
    103c:	d1 f3       	breq	.-12     	; 0x1032 <__mulsf3+0x14>
    103e:	95 0f       	add	r25, r21
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	55 1f       	adc	r21, r21
    1044:	62 9f       	mul	r22, r18
    1046:	f0 01       	movw	r30, r0
    1048:	72 9f       	mul	r23, r18
    104a:	bb 27       	eor	r27, r27
    104c:	f0 0d       	add	r31, r0
    104e:	b1 1d       	adc	r27, r1
    1050:	63 9f       	mul	r22, r19
    1052:	aa 27       	eor	r26, r26
    1054:	f0 0d       	add	r31, r0
    1056:	b1 1d       	adc	r27, r1
    1058:	aa 1f       	adc	r26, r26
    105a:	64 9f       	mul	r22, r20
    105c:	66 27       	eor	r22, r22
    105e:	b0 0d       	add	r27, r0
    1060:	a1 1d       	adc	r26, r1
    1062:	66 1f       	adc	r22, r22
    1064:	82 9f       	mul	r24, r18
    1066:	22 27       	eor	r18, r18
    1068:	b0 0d       	add	r27, r0
    106a:	a1 1d       	adc	r26, r1
    106c:	62 1f       	adc	r22, r18
    106e:	73 9f       	mul	r23, r19
    1070:	b0 0d       	add	r27, r0
    1072:	a1 1d       	adc	r26, r1
    1074:	62 1f       	adc	r22, r18
    1076:	83 9f       	mul	r24, r19
    1078:	a0 0d       	add	r26, r0
    107a:	61 1d       	adc	r22, r1
    107c:	22 1f       	adc	r18, r18
    107e:	74 9f       	mul	r23, r20
    1080:	33 27       	eor	r19, r19
    1082:	a0 0d       	add	r26, r0
    1084:	61 1d       	adc	r22, r1
    1086:	23 1f       	adc	r18, r19
    1088:	84 9f       	mul	r24, r20
    108a:	60 0d       	add	r22, r0
    108c:	21 1d       	adc	r18, r1
    108e:	82 2f       	mov	r24, r18
    1090:	76 2f       	mov	r23, r22
    1092:	6a 2f       	mov	r22, r26
    1094:	11 24       	eor	r1, r1
    1096:	9f 57       	subi	r25, 0x7F	; 127
    1098:	50 40       	sbci	r21, 0x00	; 0
    109a:	8a f0       	brmi	.+34     	; 0x10be <__mulsf3_pse+0x84>
    109c:	e1 f0       	breq	.+56     	; 0x10d6 <__mulsf3_pse+0x9c>
    109e:	88 23       	and	r24, r24
    10a0:	4a f0       	brmi	.+18     	; 0x10b4 <__mulsf3_pse+0x7a>
    10a2:	ee 0f       	add	r30, r30
    10a4:	ff 1f       	adc	r31, r31
    10a6:	bb 1f       	adc	r27, r27
    10a8:	66 1f       	adc	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	88 1f       	adc	r24, r24
    10ae:	91 50       	subi	r25, 0x01	; 1
    10b0:	50 40       	sbci	r21, 0x00	; 0
    10b2:	a9 f7       	brne	.-22     	; 0x109e <__mulsf3_pse+0x64>
    10b4:	9e 3f       	cpi	r25, 0xFE	; 254
    10b6:	51 05       	cpc	r21, r1
    10b8:	70 f0       	brcs	.+28     	; 0x10d6 <__mulsf3_pse+0x9c>
    10ba:	60 cf       	rjmp	.-320    	; 0xf7c <__fp_inf>
    10bc:	aa cf       	rjmp	.-172    	; 0x1012 <__fp_szero>
    10be:	5f 3f       	cpi	r21, 0xFF	; 255
    10c0:	ec f3       	brlt	.-6      	; 0x10bc <__mulsf3_pse+0x82>
    10c2:	98 3e       	cpi	r25, 0xE8	; 232
    10c4:	dc f3       	brlt	.-10     	; 0x10bc <__mulsf3_pse+0x82>
    10c6:	86 95       	lsr	r24
    10c8:	77 95       	ror	r23
    10ca:	67 95       	ror	r22
    10cc:	b7 95       	ror	r27
    10ce:	f7 95       	ror	r31
    10d0:	e7 95       	ror	r30
    10d2:	9f 5f       	subi	r25, 0xFF	; 255
    10d4:	c1 f7       	brne	.-16     	; 0x10c6 <__mulsf3_pse+0x8c>
    10d6:	fe 2b       	or	r31, r30
    10d8:	88 0f       	add	r24, r24
    10da:	91 1d       	adc	r25, r1
    10dc:	96 95       	lsr	r25
    10de:	87 95       	ror	r24
    10e0:	97 f9       	bld	r25, 7
    10e2:	08 95       	ret

000010e4 <__divmodhi4>:
    10e4:	97 fb       	bst	r25, 7
    10e6:	07 2e       	mov	r0, r23
    10e8:	16 f4       	brtc	.+4      	; 0x10ee <__divmodhi4+0xa>
    10ea:	00 94       	com	r0
    10ec:	06 d0       	rcall	.+12     	; 0x10fa <__divmodhi4_neg1>
    10ee:	77 fd       	sbrc	r23, 7
    10f0:	08 d0       	rcall	.+16     	; 0x1102 <__divmodhi4_neg2>
    10f2:	2d d0       	rcall	.+90     	; 0x114e <__udivmodhi4>
    10f4:	07 fc       	sbrc	r0, 7
    10f6:	05 d0       	rcall	.+10     	; 0x1102 <__divmodhi4_neg2>
    10f8:	3e f4       	brtc	.+14     	; 0x1108 <__divmodhi4_exit>

000010fa <__divmodhi4_neg1>:
    10fa:	90 95       	com	r25
    10fc:	81 95       	neg	r24
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	08 95       	ret

00001102 <__divmodhi4_neg2>:
    1102:	70 95       	com	r23
    1104:	61 95       	neg	r22
    1106:	7f 4f       	sbci	r23, 0xFF	; 255

00001108 <__divmodhi4_exit>:
    1108:	08 95       	ret

0000110a <__udivmodsi4>:
    110a:	a1 e2       	ldi	r26, 0x21	; 33
    110c:	1a 2e       	mov	r1, r26
    110e:	aa 1b       	sub	r26, r26
    1110:	bb 1b       	sub	r27, r27
    1112:	fd 01       	movw	r30, r26
    1114:	0d c0       	rjmp	.+26     	; 0x1130 <__udivmodsi4_ep>

00001116 <__udivmodsi4_loop>:
    1116:	aa 1f       	adc	r26, r26
    1118:	bb 1f       	adc	r27, r27
    111a:	ee 1f       	adc	r30, r30
    111c:	ff 1f       	adc	r31, r31
    111e:	a2 17       	cp	r26, r18
    1120:	b3 07       	cpc	r27, r19
    1122:	e4 07       	cpc	r30, r20
    1124:	f5 07       	cpc	r31, r21
    1126:	20 f0       	brcs	.+8      	; 0x1130 <__udivmodsi4_ep>
    1128:	a2 1b       	sub	r26, r18
    112a:	b3 0b       	sbc	r27, r19
    112c:	e4 0b       	sbc	r30, r20
    112e:	f5 0b       	sbc	r31, r21

00001130 <__udivmodsi4_ep>:
    1130:	66 1f       	adc	r22, r22
    1132:	77 1f       	adc	r23, r23
    1134:	88 1f       	adc	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	1a 94       	dec	r1
    113a:	69 f7       	brne	.-38     	; 0x1116 <__udivmodsi4_loop>
    113c:	60 95       	com	r22
    113e:	70 95       	com	r23
    1140:	80 95       	com	r24
    1142:	90 95       	com	r25
    1144:	9b 01       	movw	r18, r22
    1146:	ac 01       	movw	r20, r24
    1148:	bd 01       	movw	r22, r26
    114a:	cf 01       	movw	r24, r30
    114c:	08 95       	ret

0000114e <__udivmodhi4>:
    114e:	aa 1b       	sub	r26, r26
    1150:	bb 1b       	sub	r27, r27
    1152:	51 e1       	ldi	r21, 0x11	; 17
    1154:	07 c0       	rjmp	.+14     	; 0x1164 <__udivmodhi4_ep>

00001156 <__udivmodhi4_loop>:
    1156:	aa 1f       	adc	r26, r26
    1158:	bb 1f       	adc	r27, r27
    115a:	a6 17       	cp	r26, r22
    115c:	b7 07       	cpc	r27, r23
    115e:	10 f0       	brcs	.+4      	; 0x1164 <__udivmodhi4_ep>
    1160:	a6 1b       	sub	r26, r22
    1162:	b7 0b       	sbc	r27, r23

00001164 <__udivmodhi4_ep>:
    1164:	88 1f       	adc	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	5a 95       	dec	r21
    116a:	a9 f7       	brne	.-22     	; 0x1156 <__udivmodhi4_loop>
    116c:	80 95       	com	r24
    116e:	90 95       	com	r25
    1170:	bc 01       	movw	r22, r24
    1172:	cd 01       	movw	r24, r26
    1174:	08 95       	ret

00001176 <sprintf>:
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	2e 97       	sbiw	r28, 0x0e	; 14
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	0d 89       	ldd	r16, Y+21	; 0x15
    1190:	1e 89       	ldd	r17, Y+22	; 0x16
    1192:	86 e0       	ldi	r24, 0x06	; 6
    1194:	8c 83       	std	Y+4, r24	; 0x04
    1196:	1a 83       	std	Y+2, r17	; 0x02
    1198:	09 83       	std	Y+1, r16	; 0x01
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	9f e7       	ldi	r25, 0x7F	; 127
    119e:	9e 83       	std	Y+6, r25	; 0x06
    11a0:	8d 83       	std	Y+5, r24	; 0x05
    11a2:	ae 01       	movw	r20, r28
    11a4:	47 5e       	subi	r20, 0xE7	; 231
    11a6:	5f 4f       	sbci	r21, 0xFF	; 255
    11a8:	6f 89       	ldd	r22, Y+23	; 0x17
    11aa:	78 8d       	ldd	r23, Y+24	; 0x18
    11ac:	ce 01       	movw	r24, r28
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	10 d0       	rcall	.+32     	; 0x11d2 <vfprintf>
    11b2:	ef 81       	ldd	r30, Y+7	; 0x07
    11b4:	f8 85       	ldd	r31, Y+8	; 0x08
    11b6:	e0 0f       	add	r30, r16
    11b8:	f1 1f       	adc	r31, r17
    11ba:	10 82       	st	Z, r1
    11bc:	2e 96       	adiw	r28, 0x0e	; 14
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	08 95       	ret

000011d2 <vfprintf>:
    11d2:	2f 92       	push	r2
    11d4:	3f 92       	push	r3
    11d6:	4f 92       	push	r4
    11d8:	5f 92       	push	r5
    11da:	6f 92       	push	r6
    11dc:	7f 92       	push	r7
    11de:	8f 92       	push	r8
    11e0:	9f 92       	push	r9
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	2b 97       	sbiw	r28, 0x0b	; 11
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	6c 01       	movw	r12, r24
    1208:	7b 01       	movw	r14, r22
    120a:	8a 01       	movw	r16, r20
    120c:	fc 01       	movw	r30, r24
    120e:	17 82       	std	Z+7, r1	; 0x07
    1210:	16 82       	std	Z+6, r1	; 0x06
    1212:	83 81       	ldd	r24, Z+3	; 0x03
    1214:	81 ff       	sbrs	r24, 1
    1216:	bf c1       	rjmp	.+894    	; 0x1596 <vfprintf+0x3c4>
    1218:	ce 01       	movw	r24, r28
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	3c 01       	movw	r6, r24
    121e:	f6 01       	movw	r30, r12
    1220:	93 81       	ldd	r25, Z+3	; 0x03
    1222:	f7 01       	movw	r30, r14
    1224:	93 fd       	sbrc	r25, 3
    1226:	85 91       	lpm	r24, Z+
    1228:	93 ff       	sbrs	r25, 3
    122a:	81 91       	ld	r24, Z+
    122c:	7f 01       	movw	r14, r30
    122e:	88 23       	and	r24, r24
    1230:	09 f4       	brne	.+2      	; 0x1234 <vfprintf+0x62>
    1232:	ad c1       	rjmp	.+858    	; 0x158e <vfprintf+0x3bc>
    1234:	85 32       	cpi	r24, 0x25	; 37
    1236:	39 f4       	brne	.+14     	; 0x1246 <vfprintf+0x74>
    1238:	93 fd       	sbrc	r25, 3
    123a:	85 91       	lpm	r24, Z+
    123c:	93 ff       	sbrs	r25, 3
    123e:	81 91       	ld	r24, Z+
    1240:	7f 01       	movw	r14, r30
    1242:	85 32       	cpi	r24, 0x25	; 37
    1244:	21 f4       	brne	.+8      	; 0x124e <vfprintf+0x7c>
    1246:	b6 01       	movw	r22, r12
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	d6 d1       	rcall	.+940    	; 0x15f8 <fputc>
    124c:	e8 cf       	rjmp	.-48     	; 0x121e <vfprintf+0x4c>
    124e:	91 2c       	mov	r9, r1
    1250:	21 2c       	mov	r2, r1
    1252:	31 2c       	mov	r3, r1
    1254:	ff e1       	ldi	r31, 0x1F	; 31
    1256:	f3 15       	cp	r31, r3
    1258:	d8 f0       	brcs	.+54     	; 0x1290 <vfprintf+0xbe>
    125a:	8b 32       	cpi	r24, 0x2B	; 43
    125c:	79 f0       	breq	.+30     	; 0x127c <vfprintf+0xaa>
    125e:	38 f4       	brcc	.+14     	; 0x126e <vfprintf+0x9c>
    1260:	80 32       	cpi	r24, 0x20	; 32
    1262:	79 f0       	breq	.+30     	; 0x1282 <vfprintf+0xb0>
    1264:	83 32       	cpi	r24, 0x23	; 35
    1266:	a1 f4       	brne	.+40     	; 0x1290 <vfprintf+0xbe>
    1268:	23 2d       	mov	r18, r3
    126a:	20 61       	ori	r18, 0x10	; 16
    126c:	1d c0       	rjmp	.+58     	; 0x12a8 <vfprintf+0xd6>
    126e:	8d 32       	cpi	r24, 0x2D	; 45
    1270:	61 f0       	breq	.+24     	; 0x128a <vfprintf+0xb8>
    1272:	80 33       	cpi	r24, 0x30	; 48
    1274:	69 f4       	brne	.+26     	; 0x1290 <vfprintf+0xbe>
    1276:	23 2d       	mov	r18, r3
    1278:	21 60       	ori	r18, 0x01	; 1
    127a:	16 c0       	rjmp	.+44     	; 0x12a8 <vfprintf+0xd6>
    127c:	83 2d       	mov	r24, r3
    127e:	82 60       	ori	r24, 0x02	; 2
    1280:	38 2e       	mov	r3, r24
    1282:	e3 2d       	mov	r30, r3
    1284:	e4 60       	ori	r30, 0x04	; 4
    1286:	3e 2e       	mov	r3, r30
    1288:	2a c0       	rjmp	.+84     	; 0x12de <vfprintf+0x10c>
    128a:	f3 2d       	mov	r31, r3
    128c:	f8 60       	ori	r31, 0x08	; 8
    128e:	1d c0       	rjmp	.+58     	; 0x12ca <vfprintf+0xf8>
    1290:	37 fc       	sbrc	r3, 7
    1292:	2d c0       	rjmp	.+90     	; 0x12ee <vfprintf+0x11c>
    1294:	20 ed       	ldi	r18, 0xD0	; 208
    1296:	28 0f       	add	r18, r24
    1298:	2a 30       	cpi	r18, 0x0A	; 10
    129a:	40 f0       	brcs	.+16     	; 0x12ac <vfprintf+0xda>
    129c:	8e 32       	cpi	r24, 0x2E	; 46
    129e:	b9 f4       	brne	.+46     	; 0x12ce <vfprintf+0xfc>
    12a0:	36 fc       	sbrc	r3, 6
    12a2:	75 c1       	rjmp	.+746    	; 0x158e <vfprintf+0x3bc>
    12a4:	23 2d       	mov	r18, r3
    12a6:	20 64       	ori	r18, 0x40	; 64
    12a8:	32 2e       	mov	r3, r18
    12aa:	19 c0       	rjmp	.+50     	; 0x12de <vfprintf+0x10c>
    12ac:	36 fe       	sbrs	r3, 6
    12ae:	06 c0       	rjmp	.+12     	; 0x12bc <vfprintf+0xea>
    12b0:	8a e0       	ldi	r24, 0x0A	; 10
    12b2:	98 9e       	mul	r9, r24
    12b4:	20 0d       	add	r18, r0
    12b6:	11 24       	eor	r1, r1
    12b8:	92 2e       	mov	r9, r18
    12ba:	11 c0       	rjmp	.+34     	; 0x12de <vfprintf+0x10c>
    12bc:	ea e0       	ldi	r30, 0x0A	; 10
    12be:	2e 9e       	mul	r2, r30
    12c0:	20 0d       	add	r18, r0
    12c2:	11 24       	eor	r1, r1
    12c4:	22 2e       	mov	r2, r18
    12c6:	f3 2d       	mov	r31, r3
    12c8:	f0 62       	ori	r31, 0x20	; 32
    12ca:	3f 2e       	mov	r3, r31
    12cc:	08 c0       	rjmp	.+16     	; 0x12de <vfprintf+0x10c>
    12ce:	8c 36       	cpi	r24, 0x6C	; 108
    12d0:	21 f4       	brne	.+8      	; 0x12da <vfprintf+0x108>
    12d2:	83 2d       	mov	r24, r3
    12d4:	80 68       	ori	r24, 0x80	; 128
    12d6:	38 2e       	mov	r3, r24
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <vfprintf+0x10c>
    12da:	88 36       	cpi	r24, 0x68	; 104
    12dc:	41 f4       	brne	.+16     	; 0x12ee <vfprintf+0x11c>
    12de:	f7 01       	movw	r30, r14
    12e0:	93 fd       	sbrc	r25, 3
    12e2:	85 91       	lpm	r24, Z+
    12e4:	93 ff       	sbrs	r25, 3
    12e6:	81 91       	ld	r24, Z+
    12e8:	7f 01       	movw	r14, r30
    12ea:	81 11       	cpse	r24, r1
    12ec:	b3 cf       	rjmp	.-154    	; 0x1254 <vfprintf+0x82>
    12ee:	98 2f       	mov	r25, r24
    12f0:	9f 7d       	andi	r25, 0xDF	; 223
    12f2:	95 54       	subi	r25, 0x45	; 69
    12f4:	93 30       	cpi	r25, 0x03	; 3
    12f6:	28 f4       	brcc	.+10     	; 0x1302 <vfprintf+0x130>
    12f8:	0c 5f       	subi	r16, 0xFC	; 252
    12fa:	1f 4f       	sbci	r17, 0xFF	; 255
    12fc:	9f e3       	ldi	r25, 0x3F	; 63
    12fe:	99 83       	std	Y+1, r25	; 0x01
    1300:	0d c0       	rjmp	.+26     	; 0x131c <vfprintf+0x14a>
    1302:	83 36       	cpi	r24, 0x63	; 99
    1304:	31 f0       	breq	.+12     	; 0x1312 <vfprintf+0x140>
    1306:	83 37       	cpi	r24, 0x73	; 115
    1308:	71 f0       	breq	.+28     	; 0x1326 <vfprintf+0x154>
    130a:	83 35       	cpi	r24, 0x53	; 83
    130c:	09 f0       	breq	.+2      	; 0x1310 <vfprintf+0x13e>
    130e:	55 c0       	rjmp	.+170    	; 0x13ba <vfprintf+0x1e8>
    1310:	20 c0       	rjmp	.+64     	; 0x1352 <vfprintf+0x180>
    1312:	f8 01       	movw	r30, r16
    1314:	80 81       	ld	r24, Z
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	0e 5f       	subi	r16, 0xFE	; 254
    131a:	1f 4f       	sbci	r17, 0xFF	; 255
    131c:	88 24       	eor	r8, r8
    131e:	83 94       	inc	r8
    1320:	91 2c       	mov	r9, r1
    1322:	53 01       	movw	r10, r6
    1324:	12 c0       	rjmp	.+36     	; 0x134a <vfprintf+0x178>
    1326:	28 01       	movw	r4, r16
    1328:	f2 e0       	ldi	r31, 0x02	; 2
    132a:	4f 0e       	add	r4, r31
    132c:	51 1c       	adc	r5, r1
    132e:	f8 01       	movw	r30, r16
    1330:	a0 80       	ld	r10, Z
    1332:	b1 80       	ldd	r11, Z+1	; 0x01
    1334:	36 fe       	sbrs	r3, 6
    1336:	03 c0       	rjmp	.+6      	; 0x133e <vfprintf+0x16c>
    1338:	69 2d       	mov	r22, r9
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <vfprintf+0x170>
    133e:	6f ef       	ldi	r22, 0xFF	; 255
    1340:	7f ef       	ldi	r23, 0xFF	; 255
    1342:	c5 01       	movw	r24, r10
    1344:	4e d1       	rcall	.+668    	; 0x15e2 <strnlen>
    1346:	4c 01       	movw	r8, r24
    1348:	82 01       	movw	r16, r4
    134a:	f3 2d       	mov	r31, r3
    134c:	ff 77       	andi	r31, 0x7F	; 127
    134e:	3f 2e       	mov	r3, r31
    1350:	15 c0       	rjmp	.+42     	; 0x137c <vfprintf+0x1aa>
    1352:	28 01       	movw	r4, r16
    1354:	22 e0       	ldi	r18, 0x02	; 2
    1356:	42 0e       	add	r4, r18
    1358:	51 1c       	adc	r5, r1
    135a:	f8 01       	movw	r30, r16
    135c:	a0 80       	ld	r10, Z
    135e:	b1 80       	ldd	r11, Z+1	; 0x01
    1360:	36 fe       	sbrs	r3, 6
    1362:	03 c0       	rjmp	.+6      	; 0x136a <vfprintf+0x198>
    1364:	69 2d       	mov	r22, r9
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	02 c0       	rjmp	.+4      	; 0x136e <vfprintf+0x19c>
    136a:	6f ef       	ldi	r22, 0xFF	; 255
    136c:	7f ef       	ldi	r23, 0xFF	; 255
    136e:	c5 01       	movw	r24, r10
    1370:	2d d1       	rcall	.+602    	; 0x15cc <strnlen_P>
    1372:	4c 01       	movw	r8, r24
    1374:	f3 2d       	mov	r31, r3
    1376:	f0 68       	ori	r31, 0x80	; 128
    1378:	3f 2e       	mov	r3, r31
    137a:	82 01       	movw	r16, r4
    137c:	33 fc       	sbrc	r3, 3
    137e:	19 c0       	rjmp	.+50     	; 0x13b2 <vfprintf+0x1e0>
    1380:	82 2d       	mov	r24, r2
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	88 16       	cp	r8, r24
    1386:	99 06       	cpc	r9, r25
    1388:	a0 f4       	brcc	.+40     	; 0x13b2 <vfprintf+0x1e0>
    138a:	b6 01       	movw	r22, r12
    138c:	80 e2       	ldi	r24, 0x20	; 32
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	33 d1       	rcall	.+614    	; 0x15f8 <fputc>
    1392:	2a 94       	dec	r2
    1394:	f5 cf       	rjmp	.-22     	; 0x1380 <vfprintf+0x1ae>
    1396:	f5 01       	movw	r30, r10
    1398:	37 fc       	sbrc	r3, 7
    139a:	85 91       	lpm	r24, Z+
    139c:	37 fe       	sbrs	r3, 7
    139e:	81 91       	ld	r24, Z+
    13a0:	5f 01       	movw	r10, r30
    13a2:	b6 01       	movw	r22, r12
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	28 d1       	rcall	.+592    	; 0x15f8 <fputc>
    13a8:	21 10       	cpse	r2, r1
    13aa:	2a 94       	dec	r2
    13ac:	21 e0       	ldi	r18, 0x01	; 1
    13ae:	82 1a       	sub	r8, r18
    13b0:	91 08       	sbc	r9, r1
    13b2:	81 14       	cp	r8, r1
    13b4:	91 04       	cpc	r9, r1
    13b6:	79 f7       	brne	.-34     	; 0x1396 <vfprintf+0x1c4>
    13b8:	e1 c0       	rjmp	.+450    	; 0x157c <vfprintf+0x3aa>
    13ba:	84 36       	cpi	r24, 0x64	; 100
    13bc:	11 f0       	breq	.+4      	; 0x13c2 <vfprintf+0x1f0>
    13be:	89 36       	cpi	r24, 0x69	; 105
    13c0:	39 f5       	brne	.+78     	; 0x1410 <vfprintf+0x23e>
    13c2:	f8 01       	movw	r30, r16
    13c4:	37 fe       	sbrs	r3, 7
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <vfprintf+0x204>
    13c8:	60 81       	ld	r22, Z
    13ca:	71 81       	ldd	r23, Z+1	; 0x01
    13cc:	82 81       	ldd	r24, Z+2	; 0x02
    13ce:	93 81       	ldd	r25, Z+3	; 0x03
    13d0:	0c 5f       	subi	r16, 0xFC	; 252
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	08 c0       	rjmp	.+16     	; 0x13e6 <vfprintf+0x214>
    13d6:	60 81       	ld	r22, Z
    13d8:	71 81       	ldd	r23, Z+1	; 0x01
    13da:	07 2e       	mov	r0, r23
    13dc:	00 0c       	add	r0, r0
    13de:	88 0b       	sbc	r24, r24
    13e0:	99 0b       	sbc	r25, r25
    13e2:	0e 5f       	subi	r16, 0xFE	; 254
    13e4:	1f 4f       	sbci	r17, 0xFF	; 255
    13e6:	f3 2d       	mov	r31, r3
    13e8:	ff 76       	andi	r31, 0x6F	; 111
    13ea:	3f 2e       	mov	r3, r31
    13ec:	97 ff       	sbrs	r25, 7
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <vfprintf+0x230>
    13f0:	90 95       	com	r25
    13f2:	80 95       	com	r24
    13f4:	70 95       	com	r23
    13f6:	61 95       	neg	r22
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	8f 4f       	sbci	r24, 0xFF	; 255
    13fc:	9f 4f       	sbci	r25, 0xFF	; 255
    13fe:	f0 68       	ori	r31, 0x80	; 128
    1400:	3f 2e       	mov	r3, r31
    1402:	2a e0       	ldi	r18, 0x0A	; 10
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	a3 01       	movw	r20, r6
    1408:	33 d1       	rcall	.+614    	; 0x1670 <__ultoa_invert>
    140a:	88 2e       	mov	r8, r24
    140c:	86 18       	sub	r8, r6
    140e:	44 c0       	rjmp	.+136    	; 0x1498 <vfprintf+0x2c6>
    1410:	85 37       	cpi	r24, 0x75	; 117
    1412:	31 f4       	brne	.+12     	; 0x1420 <vfprintf+0x24e>
    1414:	23 2d       	mov	r18, r3
    1416:	2f 7e       	andi	r18, 0xEF	; 239
    1418:	b2 2e       	mov	r11, r18
    141a:	2a e0       	ldi	r18, 0x0A	; 10
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	25 c0       	rjmp	.+74     	; 0x146a <vfprintf+0x298>
    1420:	93 2d       	mov	r25, r3
    1422:	99 7f       	andi	r25, 0xF9	; 249
    1424:	b9 2e       	mov	r11, r25
    1426:	8f 36       	cpi	r24, 0x6F	; 111
    1428:	c1 f0       	breq	.+48     	; 0x145a <vfprintf+0x288>
    142a:	18 f4       	brcc	.+6      	; 0x1432 <vfprintf+0x260>
    142c:	88 35       	cpi	r24, 0x58	; 88
    142e:	79 f0       	breq	.+30     	; 0x144e <vfprintf+0x27c>
    1430:	ae c0       	rjmp	.+348    	; 0x158e <vfprintf+0x3bc>
    1432:	80 37       	cpi	r24, 0x70	; 112
    1434:	19 f0       	breq	.+6      	; 0x143c <vfprintf+0x26a>
    1436:	88 37       	cpi	r24, 0x78	; 120
    1438:	21 f0       	breq	.+8      	; 0x1442 <vfprintf+0x270>
    143a:	a9 c0       	rjmp	.+338    	; 0x158e <vfprintf+0x3bc>
    143c:	e9 2f       	mov	r30, r25
    143e:	e0 61       	ori	r30, 0x10	; 16
    1440:	be 2e       	mov	r11, r30
    1442:	b4 fe       	sbrs	r11, 4
    1444:	0d c0       	rjmp	.+26     	; 0x1460 <vfprintf+0x28e>
    1446:	fb 2d       	mov	r31, r11
    1448:	f4 60       	ori	r31, 0x04	; 4
    144a:	bf 2e       	mov	r11, r31
    144c:	09 c0       	rjmp	.+18     	; 0x1460 <vfprintf+0x28e>
    144e:	34 fe       	sbrs	r3, 4
    1450:	0a c0       	rjmp	.+20     	; 0x1466 <vfprintf+0x294>
    1452:	29 2f       	mov	r18, r25
    1454:	26 60       	ori	r18, 0x06	; 6
    1456:	b2 2e       	mov	r11, r18
    1458:	06 c0       	rjmp	.+12     	; 0x1466 <vfprintf+0x294>
    145a:	28 e0       	ldi	r18, 0x08	; 8
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	05 c0       	rjmp	.+10     	; 0x146a <vfprintf+0x298>
    1460:	20 e1       	ldi	r18, 0x10	; 16
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	02 c0       	rjmp	.+4      	; 0x146a <vfprintf+0x298>
    1466:	20 e1       	ldi	r18, 0x10	; 16
    1468:	32 e0       	ldi	r19, 0x02	; 2
    146a:	f8 01       	movw	r30, r16
    146c:	b7 fe       	sbrs	r11, 7
    146e:	07 c0       	rjmp	.+14     	; 0x147e <vfprintf+0x2ac>
    1470:	60 81       	ld	r22, Z
    1472:	71 81       	ldd	r23, Z+1	; 0x01
    1474:	82 81       	ldd	r24, Z+2	; 0x02
    1476:	93 81       	ldd	r25, Z+3	; 0x03
    1478:	0c 5f       	subi	r16, 0xFC	; 252
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	06 c0       	rjmp	.+12     	; 0x148a <vfprintf+0x2b8>
    147e:	60 81       	ld	r22, Z
    1480:	71 81       	ldd	r23, Z+1	; 0x01
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 5f       	subi	r16, 0xFE	; 254
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	a3 01       	movw	r20, r6
    148c:	f1 d0       	rcall	.+482    	; 0x1670 <__ultoa_invert>
    148e:	88 2e       	mov	r8, r24
    1490:	86 18       	sub	r8, r6
    1492:	fb 2d       	mov	r31, r11
    1494:	ff 77       	andi	r31, 0x7F	; 127
    1496:	3f 2e       	mov	r3, r31
    1498:	36 fe       	sbrs	r3, 6
    149a:	0d c0       	rjmp	.+26     	; 0x14b6 <vfprintf+0x2e4>
    149c:	23 2d       	mov	r18, r3
    149e:	2e 7f       	andi	r18, 0xFE	; 254
    14a0:	a2 2e       	mov	r10, r18
    14a2:	89 14       	cp	r8, r9
    14a4:	58 f4       	brcc	.+22     	; 0x14bc <vfprintf+0x2ea>
    14a6:	34 fe       	sbrs	r3, 4
    14a8:	0b c0       	rjmp	.+22     	; 0x14c0 <vfprintf+0x2ee>
    14aa:	32 fc       	sbrc	r3, 2
    14ac:	09 c0       	rjmp	.+18     	; 0x14c0 <vfprintf+0x2ee>
    14ae:	83 2d       	mov	r24, r3
    14b0:	8e 7e       	andi	r24, 0xEE	; 238
    14b2:	a8 2e       	mov	r10, r24
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <vfprintf+0x2ee>
    14b6:	b8 2c       	mov	r11, r8
    14b8:	a3 2c       	mov	r10, r3
    14ba:	03 c0       	rjmp	.+6      	; 0x14c2 <vfprintf+0x2f0>
    14bc:	b8 2c       	mov	r11, r8
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <vfprintf+0x2f0>
    14c0:	b9 2c       	mov	r11, r9
    14c2:	a4 fe       	sbrs	r10, 4
    14c4:	0f c0       	rjmp	.+30     	; 0x14e4 <vfprintf+0x312>
    14c6:	fe 01       	movw	r30, r28
    14c8:	e8 0d       	add	r30, r8
    14ca:	f1 1d       	adc	r31, r1
    14cc:	80 81       	ld	r24, Z
    14ce:	80 33       	cpi	r24, 0x30	; 48
    14d0:	21 f4       	brne	.+8      	; 0x14da <vfprintf+0x308>
    14d2:	9a 2d       	mov	r25, r10
    14d4:	99 7e       	andi	r25, 0xE9	; 233
    14d6:	a9 2e       	mov	r10, r25
    14d8:	09 c0       	rjmp	.+18     	; 0x14ec <vfprintf+0x31a>
    14da:	a2 fe       	sbrs	r10, 2
    14dc:	06 c0       	rjmp	.+12     	; 0x14ea <vfprintf+0x318>
    14de:	b3 94       	inc	r11
    14e0:	b3 94       	inc	r11
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <vfprintf+0x31a>
    14e4:	8a 2d       	mov	r24, r10
    14e6:	86 78       	andi	r24, 0x86	; 134
    14e8:	09 f0       	breq	.+2      	; 0x14ec <vfprintf+0x31a>
    14ea:	b3 94       	inc	r11
    14ec:	a3 fc       	sbrc	r10, 3
    14ee:	10 c0       	rjmp	.+32     	; 0x1510 <vfprintf+0x33e>
    14f0:	a0 fe       	sbrs	r10, 0
    14f2:	06 c0       	rjmp	.+12     	; 0x1500 <vfprintf+0x32e>
    14f4:	b2 14       	cp	r11, r2
    14f6:	80 f4       	brcc	.+32     	; 0x1518 <vfprintf+0x346>
    14f8:	28 0c       	add	r2, r8
    14fa:	92 2c       	mov	r9, r2
    14fc:	9b 18       	sub	r9, r11
    14fe:	0d c0       	rjmp	.+26     	; 0x151a <vfprintf+0x348>
    1500:	b2 14       	cp	r11, r2
    1502:	58 f4       	brcc	.+22     	; 0x151a <vfprintf+0x348>
    1504:	b6 01       	movw	r22, r12
    1506:	80 e2       	ldi	r24, 0x20	; 32
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	76 d0       	rcall	.+236    	; 0x15f8 <fputc>
    150c:	b3 94       	inc	r11
    150e:	f8 cf       	rjmp	.-16     	; 0x1500 <vfprintf+0x32e>
    1510:	b2 14       	cp	r11, r2
    1512:	18 f4       	brcc	.+6      	; 0x151a <vfprintf+0x348>
    1514:	2b 18       	sub	r2, r11
    1516:	02 c0       	rjmp	.+4      	; 0x151c <vfprintf+0x34a>
    1518:	98 2c       	mov	r9, r8
    151a:	21 2c       	mov	r2, r1
    151c:	a4 fe       	sbrs	r10, 4
    151e:	0f c0       	rjmp	.+30     	; 0x153e <vfprintf+0x36c>
    1520:	b6 01       	movw	r22, r12
    1522:	80 e3       	ldi	r24, 0x30	; 48
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	68 d0       	rcall	.+208    	; 0x15f8 <fputc>
    1528:	a2 fe       	sbrs	r10, 2
    152a:	16 c0       	rjmp	.+44     	; 0x1558 <vfprintf+0x386>
    152c:	a1 fc       	sbrc	r10, 1
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <vfprintf+0x364>
    1530:	88 e7       	ldi	r24, 0x78	; 120
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 c0       	rjmp	.+4      	; 0x153a <vfprintf+0x368>
    1536:	88 e5       	ldi	r24, 0x58	; 88
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	b6 01       	movw	r22, r12
    153c:	0c c0       	rjmp	.+24     	; 0x1556 <vfprintf+0x384>
    153e:	8a 2d       	mov	r24, r10
    1540:	86 78       	andi	r24, 0x86	; 134
    1542:	51 f0       	breq	.+20     	; 0x1558 <vfprintf+0x386>
    1544:	a1 fe       	sbrs	r10, 1
    1546:	02 c0       	rjmp	.+4      	; 0x154c <vfprintf+0x37a>
    1548:	8b e2       	ldi	r24, 0x2B	; 43
    154a:	01 c0       	rjmp	.+2      	; 0x154e <vfprintf+0x37c>
    154c:	80 e2       	ldi	r24, 0x20	; 32
    154e:	a7 fc       	sbrc	r10, 7
    1550:	8d e2       	ldi	r24, 0x2D	; 45
    1552:	b6 01       	movw	r22, r12
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	50 d0       	rcall	.+160    	; 0x15f8 <fputc>
    1558:	89 14       	cp	r8, r9
    155a:	30 f4       	brcc	.+12     	; 0x1568 <vfprintf+0x396>
    155c:	b6 01       	movw	r22, r12
    155e:	80 e3       	ldi	r24, 0x30	; 48
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	4a d0       	rcall	.+148    	; 0x15f8 <fputc>
    1564:	9a 94       	dec	r9
    1566:	f8 cf       	rjmp	.-16     	; 0x1558 <vfprintf+0x386>
    1568:	8a 94       	dec	r8
    156a:	f3 01       	movw	r30, r6
    156c:	e8 0d       	add	r30, r8
    156e:	f1 1d       	adc	r31, r1
    1570:	80 81       	ld	r24, Z
    1572:	b6 01       	movw	r22, r12
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	40 d0       	rcall	.+128    	; 0x15f8 <fputc>
    1578:	81 10       	cpse	r8, r1
    157a:	f6 cf       	rjmp	.-20     	; 0x1568 <vfprintf+0x396>
    157c:	22 20       	and	r2, r2
    157e:	09 f4       	brne	.+2      	; 0x1582 <vfprintf+0x3b0>
    1580:	4e ce       	rjmp	.-868    	; 0x121e <vfprintf+0x4c>
    1582:	b6 01       	movw	r22, r12
    1584:	80 e2       	ldi	r24, 0x20	; 32
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	37 d0       	rcall	.+110    	; 0x15f8 <fputc>
    158a:	2a 94       	dec	r2
    158c:	f7 cf       	rjmp	.-18     	; 0x157c <vfprintf+0x3aa>
    158e:	f6 01       	movw	r30, r12
    1590:	86 81       	ldd	r24, Z+6	; 0x06
    1592:	97 81       	ldd	r25, Z+7	; 0x07
    1594:	02 c0       	rjmp	.+4      	; 0x159a <vfprintf+0x3c8>
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	9f ef       	ldi	r25, 0xFF	; 255
    159a:	2b 96       	adiw	r28, 0x0b	; 11
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	df 90       	pop	r13
    15b4:	cf 90       	pop	r12
    15b6:	bf 90       	pop	r11
    15b8:	af 90       	pop	r10
    15ba:	9f 90       	pop	r9
    15bc:	8f 90       	pop	r8
    15be:	7f 90       	pop	r7
    15c0:	6f 90       	pop	r6
    15c2:	5f 90       	pop	r5
    15c4:	4f 90       	pop	r4
    15c6:	3f 90       	pop	r3
    15c8:	2f 90       	pop	r2
    15ca:	08 95       	ret

000015cc <strnlen_P>:
    15cc:	fc 01       	movw	r30, r24
    15ce:	05 90       	lpm	r0, Z+
    15d0:	61 50       	subi	r22, 0x01	; 1
    15d2:	70 40       	sbci	r23, 0x00	; 0
    15d4:	01 10       	cpse	r0, r1
    15d6:	d8 f7       	brcc	.-10     	; 0x15ce <strnlen_P+0x2>
    15d8:	80 95       	com	r24
    15da:	90 95       	com	r25
    15dc:	8e 0f       	add	r24, r30
    15de:	9f 1f       	adc	r25, r31
    15e0:	08 95       	ret

000015e2 <strnlen>:
    15e2:	fc 01       	movw	r30, r24
    15e4:	61 50       	subi	r22, 0x01	; 1
    15e6:	70 40       	sbci	r23, 0x00	; 0
    15e8:	01 90       	ld	r0, Z+
    15ea:	01 10       	cpse	r0, r1
    15ec:	d8 f7       	brcc	.-10     	; 0x15e4 <strnlen+0x2>
    15ee:	80 95       	com	r24
    15f0:	90 95       	com	r25
    15f2:	8e 0f       	add	r24, r30
    15f4:	9f 1f       	adc	r25, r31
    15f6:	08 95       	ret

000015f8 <fputc>:
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	fb 01       	movw	r30, r22
    1602:	23 81       	ldd	r18, Z+3	; 0x03
    1604:	21 fd       	sbrc	r18, 1
    1606:	03 c0       	rjmp	.+6      	; 0x160e <fputc+0x16>
    1608:	8f ef       	ldi	r24, 0xFF	; 255
    160a:	9f ef       	ldi	r25, 0xFF	; 255
    160c:	2c c0       	rjmp	.+88     	; 0x1666 <fputc+0x6e>
    160e:	22 ff       	sbrs	r18, 2
    1610:	16 c0       	rjmp	.+44     	; 0x163e <fputc+0x46>
    1612:	46 81       	ldd	r20, Z+6	; 0x06
    1614:	57 81       	ldd	r21, Z+7	; 0x07
    1616:	24 81       	ldd	r18, Z+4	; 0x04
    1618:	35 81       	ldd	r19, Z+5	; 0x05
    161a:	42 17       	cp	r20, r18
    161c:	53 07       	cpc	r21, r19
    161e:	44 f4       	brge	.+16     	; 0x1630 <fputc+0x38>
    1620:	a0 81       	ld	r26, Z
    1622:	b1 81       	ldd	r27, Z+1	; 0x01
    1624:	9d 01       	movw	r18, r26
    1626:	2f 5f       	subi	r18, 0xFF	; 255
    1628:	3f 4f       	sbci	r19, 0xFF	; 255
    162a:	31 83       	std	Z+1, r19	; 0x01
    162c:	20 83       	st	Z, r18
    162e:	8c 93       	st	X, r24
    1630:	26 81       	ldd	r18, Z+6	; 0x06
    1632:	37 81       	ldd	r19, Z+7	; 0x07
    1634:	2f 5f       	subi	r18, 0xFF	; 255
    1636:	3f 4f       	sbci	r19, 0xFF	; 255
    1638:	37 83       	std	Z+7, r19	; 0x07
    163a:	26 83       	std	Z+6, r18	; 0x06
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <fputc+0x6e>
    163e:	8b 01       	movw	r16, r22
    1640:	ec 01       	movw	r28, r24
    1642:	fb 01       	movw	r30, r22
    1644:	00 84       	ldd	r0, Z+8	; 0x08
    1646:	f1 85       	ldd	r31, Z+9	; 0x09
    1648:	e0 2d       	mov	r30, r0
    164a:	09 95       	icall
    164c:	89 2b       	or	r24, r25
    164e:	e1 f6       	brne	.-72     	; 0x1608 <fputc+0x10>
    1650:	d8 01       	movw	r26, r16
    1652:	16 96       	adiw	r26, 0x06	; 6
    1654:	8d 91       	ld	r24, X+
    1656:	9c 91       	ld	r25, X
    1658:	17 97       	sbiw	r26, 0x07	; 7
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	17 96       	adiw	r26, 0x07	; 7
    165e:	9c 93       	st	X, r25
    1660:	8e 93       	st	-X, r24
    1662:	16 97       	sbiw	r26, 0x06	; 6
    1664:	ce 01       	movw	r24, r28
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	08 95       	ret

00001670 <__ultoa_invert>:
    1670:	fa 01       	movw	r30, r20
    1672:	aa 27       	eor	r26, r26
    1674:	28 30       	cpi	r18, 0x08	; 8
    1676:	51 f1       	breq	.+84     	; 0x16cc <__ultoa_invert+0x5c>
    1678:	20 31       	cpi	r18, 0x10	; 16
    167a:	81 f1       	breq	.+96     	; 0x16dc <__ultoa_invert+0x6c>
    167c:	e8 94       	clt
    167e:	6f 93       	push	r22
    1680:	6e 7f       	andi	r22, 0xFE	; 254
    1682:	6e 5f       	subi	r22, 0xFE	; 254
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	8f 4f       	sbci	r24, 0xFF	; 255
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	af 4f       	sbci	r26, 0xFF	; 255
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	3e d0       	rcall	.+124    	; 0x170c <__ultoa_invert+0x9c>
    1690:	b4 e0       	ldi	r27, 0x04	; 4
    1692:	3c d0       	rcall	.+120    	; 0x170c <__ultoa_invert+0x9c>
    1694:	67 0f       	add	r22, r23
    1696:	78 1f       	adc	r23, r24
    1698:	89 1f       	adc	r24, r25
    169a:	9a 1f       	adc	r25, r26
    169c:	a1 1d       	adc	r26, r1
    169e:	68 0f       	add	r22, r24
    16a0:	79 1f       	adc	r23, r25
    16a2:	8a 1f       	adc	r24, r26
    16a4:	91 1d       	adc	r25, r1
    16a6:	a1 1d       	adc	r26, r1
    16a8:	6a 0f       	add	r22, r26
    16aa:	71 1d       	adc	r23, r1
    16ac:	81 1d       	adc	r24, r1
    16ae:	91 1d       	adc	r25, r1
    16b0:	a1 1d       	adc	r26, r1
    16b2:	20 d0       	rcall	.+64     	; 0x16f4 <__ultoa_invert+0x84>
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <__ultoa_invert+0x48>
    16b6:	68 94       	set
    16b8:	3f 91       	pop	r19
    16ba:	2a e0       	ldi	r18, 0x0A	; 10
    16bc:	26 9f       	mul	r18, r22
    16be:	11 24       	eor	r1, r1
    16c0:	30 19       	sub	r19, r0
    16c2:	30 5d       	subi	r19, 0xD0	; 208
    16c4:	31 93       	st	Z+, r19
    16c6:	de f6       	brtc	.-74     	; 0x167e <__ultoa_invert+0xe>
    16c8:	cf 01       	movw	r24, r30
    16ca:	08 95       	ret
    16cc:	46 2f       	mov	r20, r22
    16ce:	47 70       	andi	r20, 0x07	; 7
    16d0:	40 5d       	subi	r20, 0xD0	; 208
    16d2:	41 93       	st	Z+, r20
    16d4:	b3 e0       	ldi	r27, 0x03	; 3
    16d6:	0f d0       	rcall	.+30     	; 0x16f6 <__ultoa_invert+0x86>
    16d8:	c9 f7       	brne	.-14     	; 0x16cc <__ultoa_invert+0x5c>
    16da:	f6 cf       	rjmp	.-20     	; 0x16c8 <__ultoa_invert+0x58>
    16dc:	46 2f       	mov	r20, r22
    16de:	4f 70       	andi	r20, 0x0F	; 15
    16e0:	40 5d       	subi	r20, 0xD0	; 208
    16e2:	4a 33       	cpi	r20, 0x3A	; 58
    16e4:	18 f0       	brcs	.+6      	; 0x16ec <__ultoa_invert+0x7c>
    16e6:	49 5d       	subi	r20, 0xD9	; 217
    16e8:	31 fd       	sbrc	r19, 1
    16ea:	40 52       	subi	r20, 0x20	; 32
    16ec:	41 93       	st	Z+, r20
    16ee:	02 d0       	rcall	.+4      	; 0x16f4 <__ultoa_invert+0x84>
    16f0:	a9 f7       	brne	.-22     	; 0x16dc <__ultoa_invert+0x6c>
    16f2:	ea cf       	rjmp	.-44     	; 0x16c8 <__ultoa_invert+0x58>
    16f4:	b4 e0       	ldi	r27, 0x04	; 4
    16f6:	a6 95       	lsr	r26
    16f8:	97 95       	ror	r25
    16fa:	87 95       	ror	r24
    16fc:	77 95       	ror	r23
    16fe:	67 95       	ror	r22
    1700:	ba 95       	dec	r27
    1702:	c9 f7       	brne	.-14     	; 0x16f6 <__ultoa_invert+0x86>
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	61 05       	cpc	r22, r1
    1708:	71 05       	cpc	r23, r1
    170a:	08 95       	ret
    170c:	9b 01       	movw	r18, r22
    170e:	ac 01       	movw	r20, r24
    1710:	0a 2e       	mov	r0, r26
    1712:	06 94       	lsr	r0
    1714:	57 95       	ror	r21
    1716:	47 95       	ror	r20
    1718:	37 95       	ror	r19
    171a:	27 95       	ror	r18
    171c:	ba 95       	dec	r27
    171e:	c9 f7       	brne	.-14     	; 0x1712 <__ultoa_invert+0xa2>
    1720:	62 0f       	add	r22, r18
    1722:	73 1f       	adc	r23, r19
    1724:	84 1f       	adc	r24, r20
    1726:	95 1f       	adc	r25, r21
    1728:	a0 1d       	adc	r26, r0
    172a:	08 95       	ret

0000172c <_exit>:
    172c:	f8 94       	cli

0000172e <__stop_program>:
    172e:	ff cf       	rjmp	.-2      	; 0x172e <__stop_program>
