
09_WASHING_MACHINE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00001a6e  00001b02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006a2  00800152  00800152  00001b54  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001df7  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000124a  00000000  00000000  00003bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001270  00000000  00000000  00004e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a0  00000000  00000000  00006084  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000936  00000000  00000000  00006524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a6f  00000000  00000000  00006e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000078c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__vector_5>
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f5 c5       	rjmp	.+3050   	; 0xc2c <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	ce c6       	rjmp	.+3484   	; 0xde6 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	48 c7       	rjmp	.+3728   	; 0xf0a <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e6       	ldi	r30, 0x6E	; 110
      a0:	fa e1       	ldi	r31, 0x1A	; 26
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 35       	cpi	r26, 0x52	; 82
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a2 e5       	ldi	r26, 0x52	; 82
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 3f       	cpi	r26, 0xF4	; 244
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	1d d6       	rcall	.+3130   	; 0xcfe <main>
      c4:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <init_button>:
      ca:	81 b3       	in	r24, 0x11	; 17
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	81 bb       	out	0x11, r24	; 17
      d0:	08 95       	ret

000000d2 <get_button>:
      d2:	20 b3       	in	r18, 0x10	; 16
      d4:	42 2f       	mov	r20, r18
      d6:	50 e0       	ldi	r21, 0x00	; 0
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <get_button+0x10>
      de:	22 0f       	add	r18, r18
      e0:	33 1f       	adc	r19, r19
      e2:	6a 95       	dec	r22
      e4:	e2 f7       	brpl	.-8      	; 0xde <get_button+0xc>
      e6:	24 23       	and	r18, r20
      e8:	35 23       	and	r19, r21
      ea:	21 15       	cp	r18, r1
      ec:	31 05       	cpc	r19, r1
      ee:	b9 f0       	breq	.+46     	; 0x11e <get_button+0x4c>
      f0:	fc 01       	movw	r30, r24
      f2:	ee 5a       	subi	r30, 0xAE	; 174
      f4:	fe 4f       	sbci	r31, 0xFE	; 254
      f6:	40 81       	ld	r20, Z
      f8:	41 11       	cpse	r20, r1
      fa:	11 c0       	rjmp	.+34     	; 0x11e <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fc:	2f ef       	ldi	r18, 0xFF	; 255
      fe:	3d ee       	ldi	r19, 0xED	; 237
     100:	42 e0       	ldi	r20, 0x02	; 2
     102:	21 50       	subi	r18, 0x01	; 1
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	e1 f7       	brne	.-8      	; 0x102 <get_button+0x30>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <get_button+0x3a>
     10c:	00 00       	nop
     10e:	fc 01       	movw	r30, r24
     110:	ee 5a       	subi	r30, 0xAE	; 174
     112:	fe 4f       	sbci	r31, 0xFE	; 254
     114:	21 e0       	ldi	r18, 0x01	; 1
     116:	20 83       	st	Z, r18
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	08 95       	ret
     11e:	fc 01       	movw	r30, r24
     120:	ee 5a       	subi	r30, 0xAE	; 174
     122:	fe 4f       	sbci	r31, 0xFE	; 254
     124:	40 81       	ld	r20, Z
     126:	41 30       	cpi	r20, 0x01	; 1
     128:	91 f4       	brne	.+36     	; 0x14e <get_button+0x7c>
     12a:	23 2b       	or	r18, r19
     12c:	99 f4       	brne	.+38     	; 0x154 <get_button+0x82>
     12e:	fc 01       	movw	r30, r24
     130:	ee 5a       	subi	r30, 0xAE	; 174
     132:	fe 4f       	sbci	r31, 0xFE	; 254
     134:	10 82       	st	Z, r1
     136:	8f ef       	ldi	r24, 0xFF	; 255
     138:	9d ee       	ldi	r25, 0xED	; 237
     13a:	22 e0       	ldi	r18, 0x02	; 2
     13c:	81 50       	subi	r24, 0x01	; 1
     13e:	90 40       	sbci	r25, 0x00	; 0
     140:	20 40       	sbci	r18, 0x00	; 0
     142:	e1 f7       	brne	.-8      	; 0x13c <get_button+0x6a>
     144:	00 c0       	rjmp	.+0      	; 0x146 <get_button+0x74>
     146:	00 00       	nop
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	08 95       	ret
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	08 95       	ret
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	08 95       	ret

0000015a <fast_wash>:
	
}

void fast_wash(void) // 쾌속 세탁
{
	sec_count = 2;
     15a:	82 e0       	ldi	r24, 0x02	; 2
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	a0 e0       	ldi	r26, 0x00	; 0
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     166:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     16a:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     16e:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
     172:	08 95       	ret

00000174 <rinse_and_spindry>:
}

void rinse_and_spindry(void) // 헹굼 + 탈수
{
	sec_count = 3;
     174:	83 e0       	ldi	r24, 0x03	; 3
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     180:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     184:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     188:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
     18c:	08 95       	ret

0000018e <only_spindry>:
}

void only_spindry(void) // 탈수
{
	sec_count = 4;
     18e:	84 e0       	ldi	r24, 0x04	; 4
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	a0 e0       	ldi	r26, 0x00	; 0
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     19a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     19e:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     1a2:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
     1a6:	08 95       	ret

000001a8 <main_screen>:
}

void main_screen(void) // 메인 화면
{
	PORTA = 0;
     1a8:	1b ba       	out	0x1b, r1	; 27
	sec_count = 754; // 1234 표시 12 * 60 + 34
     1aa:	82 ef       	ldi	r24, 0xF2	; 242
     1ac:	92 e0       	ldi	r25, 0x02	; 2
     1ae:	a0 e0       	ldi	r26, 0x00	; 0
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     1b6:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     1ba:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     1be:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
     1c2:	08 95       	ret

000001c4 <dumy_fanc>:
	sec_count = 0; // 다 끝나면 끝
	custom_wash_mode = 4;
}

void dumy_fanc()
{
     1c4:	08 95       	ret

000001c6 <init_fnd>:

////////////////////////////////////////////fnd 초기화 및 fnd 표시 함수들 ///////////////////////////////////////////////////////////

void init_fnd(void)
{
	FND_DATA_DDR = 0xff; // 출력모드로 설정
     1c6:	8f ef       	ldi	r24, 0xFF	; 255
     1c8:	84 bb       	out	0x14, r24	; 20

	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 |
     1ca:	87 b3       	in	r24, 0x17	; 23
     1cc:	80 6f       	ori	r24, 0xF0	; 240
     1ce:	87 bb       	out	0x17, r24	; 23
					 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4;

	FND_DATA_PORT = 0x00; // FND를 all off
     1d0:	15 ba       	out	0x15, r1	; 21
     1d2:	08 95       	ret

000001d4 <fnd_display>:
}

void fnd_display(void)
{
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	cd b7       	in	r28, 0x3d	; 61
     1da:	de b7       	in	r29, 0x3e	; 62
     1dc:	2b 97       	sbiw	r28, 0x0b	; 11
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
						//  0      1       2      3      4      5      6     7      8       9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
     1e8:	8b e0       	ldi	r24, 0x0B	; 11
     1ea:	e0 e3       	ldi	r30, 0x30	; 48
     1ec:	f1 e0       	ldi	r31, 0x01	; 1
     1ee:	de 01       	movw	r26, r28
     1f0:	11 96       	adiw	r26, 0x01	; 1
     1f2:	01 90       	ld	r0, Z+
     1f4:	0d 92       	st	X+, r0
     1f6:	8a 95       	dec	r24
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <fnd_display+0x1e>

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     1fa:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <digit_select.1828>
     1fe:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <digit_select.1828+0x1>
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	91 05       	cpc	r25, r1
     206:	21 f1       	breq	.+72     	; 0x250 <fnd_display+0x7c>
     208:	1c f4       	brge	.+6      	; 0x210 <fnd_display+0x3c>
     20a:	89 2b       	or	r24, r25
     20c:	41 f0       	breq	.+16     	; 0x21e <fnd_display+0x4a>
     20e:	84 c0       	rjmp	.+264    	; 0x318 <fnd_display+0x144>
     210:	82 30       	cpi	r24, 0x02	; 2
     212:	91 05       	cpc	r25, r1
     214:	f1 f1       	breq	.+124    	; 0x292 <fnd_display+0xbe>
     216:	03 97       	sbiw	r24, 0x03	; 3
     218:	09 f4       	brne	.+2      	; 0x21c <fnd_display+0x48>
     21a:	5e c0       	rjmp	.+188    	; 0x2d8 <fnd_display+0x104>
     21c:	7d c0       	rjmp	.+250    	; 0x318 <fnd_display+0x144>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     21e:	8f e7       	ldi	r24, 0x7F	; 127
     220:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     222:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <sec_count>
     226:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <sec_count+0x1>
     22a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <sec_count+0x2>
     22e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <sec_count+0x3>
     232:	2a e0       	ldi	r18, 0x0A	; 10
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	0e 94 24 0a 	call	0x1448	; 0x1448 <__udivmodsi4>
     23e:	e1 e0       	ldi	r30, 0x01	; 1
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	ec 0f       	add	r30, r28
     244:	fd 1f       	adc	r31, r29
     246:	e6 0f       	add	r30, r22
     248:	f7 1f       	adc	r31, r23
     24a:	80 81       	ld	r24, Z
     24c:	85 bb       	out	0x15, r24	; 21
		break;
     24e:	64 c0       	rjmp	.+200    	; 0x318 <fnd_display+0x144>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     250:	8f eb       	ldi	r24, 0xBF	; 191
     252:	88 bb       	out	0x18, r24	; 24

		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     254:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <sec_count>
     258:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <sec_count+0x1>
     25c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <sec_count+0x2>
     260:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <sec_count+0x3>
     264:	2a e0       	ldi	r18, 0x0A	; 10
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	0e 94 24 0a 	call	0x1448	; 0x1448 <__udivmodsi4>
     270:	ca 01       	movw	r24, r20
     272:	b9 01       	movw	r22, r18
     274:	26 e0       	ldi	r18, 0x06	; 6
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	0e 94 24 0a 	call	0x1448	; 0x1448 <__udivmodsi4>
     280:	e1 e0       	ldi	r30, 0x01	; 1
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	ec 0f       	add	r30, r28
     286:	fd 1f       	adc	r31, r29
     288:	e6 0f       	add	r30, r22
     28a:	f7 1f       	adc	r31, r23
     28c:	80 81       	ld	r24, Z
     28e:	85 bb       	out	0x15, r24	; 21
		break;
     290:	43 c0       	rjmp	.+134    	; 0x318 <fnd_display+0x144>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     292:	8f ed       	ldi	r24, 0xDF	; 223
     294:	88 bb       	out	0x18, r24	; 24
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     296:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <sec_count>
     29a:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <sec_count+0x1>
     29e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <sec_count+0x2>
     2a2:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <sec_count+0x3>
     2a6:	2c e3       	ldi	r18, 0x3C	; 60
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	0e 94 24 0a 	call	0x1448	; 0x1448 <__udivmodsi4>
     2b2:	ca 01       	movw	r24, r20
     2b4:	b9 01       	movw	r22, r18
     2b6:	2a e0       	ldi	r18, 0x0A	; 10
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	40 e0       	ldi	r20, 0x00	; 0
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	0e 94 24 0a 	call	0x1448	; 0x1448 <__udivmodsi4>
     2c2:	e1 e0       	ldi	r30, 0x01	; 1
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	ec 0f       	add	r30, r28
     2c8:	fd 1f       	adc	r31, r29
     2ca:	e6 0f       	add	r30, r22
     2cc:	f7 1f       	adc	r31, r23
     2ce:	90 81       	ld	r25, Z
     2d0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2d2:	89 2b       	or	r24, r25
     2d4:	85 bb       	out	0x15, r24	; 21
		break;
     2d6:	20 c0       	rjmp	.+64     	; 0x318 <fnd_display+0x144>

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     2d8:	8f ee       	ldi	r24, 0xEF	; 239
     2da:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count / 600 % 6]; // 10단위 분
     2dc:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <sec_count>
     2e0:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <sec_count+0x1>
     2e4:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <sec_count+0x2>
     2e8:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <sec_count+0x3>
     2ec:	28 e5       	ldi	r18, 0x58	; 88
     2ee:	32 e0       	ldi	r19, 0x02	; 2
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	0e 94 24 0a 	call	0x1448	; 0x1448 <__udivmodsi4>
     2f8:	ca 01       	movw	r24, r20
     2fa:	b9 01       	movw	r22, r18
     2fc:	26 e0       	ldi	r18, 0x06	; 6
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	40 e0       	ldi	r20, 0x00	; 0
     302:	50 e0       	ldi	r21, 0x00	; 0
     304:	0e 94 24 0a 	call	0x1448	; 0x1448 <__udivmodsi4>
     308:	e1 e0       	ldi	r30, 0x01	; 1
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	ec 0f       	add	r30, r28
     30e:	fd 1f       	adc	r31, r29
     310:	e6 0f       	add	r30, r22
     312:	f7 1f       	adc	r31, r23
     314:	80 81       	ld	r24, Z
     316:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
     318:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <digit_select.1828>
     31c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <digit_select.1828+0x1>
     320:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
     322:	83 70       	andi	r24, 0x03	; 3
     324:	90 78       	andi	r25, 0x80	; 128
     326:	99 23       	and	r25, r25
     328:	24 f4       	brge	.+8      	; 0x332 <fnd_display+0x15e>
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	8c 6f       	ori	r24, 0xFC	; 252
     32e:	9f 6f       	ori	r25, 0xFF	; 255
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <digit_select.1828+0x1>
     336:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <digit_select.1828>
}
     33a:	2b 96       	adiw	r28, 0x0b	; 11
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	de bf       	out	0x3e, r29	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	cd bf       	out	0x3d, r28	; 61
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <fnd_main>:
	dumy_fanc // 더미
};

int fnd_main(void)
{
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
     34c:	8f ef       	ldi	r24, 0xFF	; 255
     34e:	8a bb       	out	0x1a, r24	; 26
	init_fnd(); // fnd 초기화
     350:	3a df       	rcall	.-396    	; 0x1c6 <init_fnd>
	init_button(); // button 초기화
     352:	bb de       	rcall	.-650    	; 0xca <init_button>
     354:	e1 2c       	mov	r14, r1
	
	int button1_state = 0;
	int button2_state = 0;
	int button3_state = 0;
     356:	f1 2c       	mov	r15, r1
     358:	00 e0       	ldi	r16, 0x00	; 0
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
	init_fnd(); // fnd 초기화
	init_button(); // button 초기화
	
	int button1_state = 0;
	int button2_state = 0;
     35a:	10 e0       	ldi	r17, 0x00	; 0
     35c:	c0 e0       	ldi	r28, 0x00	; 0
{
	DDRA = 0xff;	//PORTA에 연결된 PIN 8개를 모두 output으로 설정. 출력 : 1
	init_fnd(); // fnd 초기화
	init_button(); // button 초기화
	
	int button1_state = 0;
     35e:	d0 e0       	ldi	r29, 0x00	; 0
     360:	64 e0       	ldi	r22, 0x04	; 4
	int button2_state = 0;
	int button3_state = 0;
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 0을 받으면 자동 세탁 모드로 진입
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	b4 de       	rcall	.-664    	; 0xd2 <get_button>
     36a:	89 2b       	or	r24, r25
     36c:	21 f0       	breq	.+8      	; 0x376 <fnd_main+0x2a>
     36e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <select_wash_mode+0x1>
		{
			select_wash_mode = CUSTOM_WASH;
     372:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <select_wash_mode>
     376:	65 e0       	ldi	r22, 0x05	; 5
		}
		
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1을 받으면 쾌속 세탁 모드로 진입
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	a9 de       	rcall	.-686    	; 0xd2 <get_button>
     380:	89 2b       	or	r24, r25
     382:	b1 f0       	breq	.+44     	; 0x3b0 <fnd_main+0x64>
     384:	81 e0       	ldi	r24, 0x01	; 1
		{
			button1_state = !button1_state;
     386:	20 97       	sbiw	r28, 0x00	; 0
     388:	09 f0       	breq	.+2      	; 0x38c <fnd_main+0x40>
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	cd 2b       	or	r28, r29
			
			if (button1_state) //
     390:	41 f4       	brne	.+16     	; 0x3a2 <fnd_main+0x56>
     392:	21 e0       	ldi	r18, 0x01	; 1
			{
				select_wash_mode = FAST_WASH;
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     39a:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     39e:	ec 01       	movw	r28, r24
			select_wash_mode = CUSTOM_WASH;
		}
		
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1을 받으면 쾌속 세탁 모드로 진입
		{
			button1_state = !button1_state;
     3a0:	07 c0       	rjmp	.+14     	; 0x3b0 <fnd_main+0x64>
     3a2:	24 e0       	ldi	r18, 0x04	; 4
			{
				select_wash_mode = FAST_WASH;
			}
			else //
			{
				select_wash_mode = MAIN_SCREEN;
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     3aa:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     3ae:	ec 01       	movw	r28, r24
			select_wash_mode = CUSTOM_WASH;
		}
		
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1을 받으면 쾌속 세탁 모드로 진입
		{
			button1_state = !button1_state;
     3b0:	66 e0       	ldi	r22, 0x06	; 6
			{
				select_wash_mode = MAIN_SCREEN;
			}
		}
		
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2를 받으면 헹굼 + 탈수 모드로 진입
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	8c de       	rcall	.-744    	; 0xd2 <get_button>
     3ba:	89 2b       	or	r24, r25
     3bc:	b9 f0       	breq	.+46     	; 0x3ec <fnd_main+0xa0>
     3be:	81 e0       	ldi	r24, 0x01	; 1
		{
			button2_state = !button2_state;
     3c0:	01 15       	cp	r16, r1
     3c2:	11 05       	cpc	r17, r1
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <fnd_main+0x7c>
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	01 2b       	or	r16, r17
			
			if (button2_state)
     3cc:	41 f4       	brne	.+16     	; 0x3de <fnd_main+0x92>
     3ce:	22 e0       	ldi	r18, 0x02	; 2
			{
				select_wash_mode = RINSE_AND_SPINDRY;
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     3d6:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     3da:	8c 01       	movw	r16, r24
			}
		}
		
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2를 받으면 헹굼 + 탈수 모드로 진입
		{
			button2_state = !button2_state;
     3dc:	07 c0       	rjmp	.+14     	; 0x3ec <fnd_main+0xa0>
     3de:	24 e0       	ldi	r18, 0x04	; 4
			{
				select_wash_mode = RINSE_AND_SPINDRY;
			}
			else
			{
				select_wash_mode = MAIN_SCREEN;	
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     3e6:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     3ea:	8c 01       	movw	r16, r24
			}
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3을 받으면 탈수 단독 모드로 진입
     3ec:	67 e0       	ldi	r22, 0x07	; 7
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	83 e0       	ldi	r24, 0x03	; 3
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	6e de       	rcall	.-804    	; 0xd2 <get_button>
     3f6:	89 2b       	or	r24, r25
     3f8:	b9 f0       	breq	.+46     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3fa:	81 e0       	ldi	r24, 0x01	; 1
		{
			button3_state = !button3_state;
     3fc:	e1 14       	cp	r14, r1
     3fe:	f1 04       	cpc	r15, r1
     400:	09 f0       	breq	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	ef 28       	or	r14, r15
			
			if (button3_state) //
     408:	41 f4       	brne	.+16     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     40a:	23 e0       	ldi	r18, 0x03	; 3
			{
				select_wash_mode = ONLY_SPINDRY;
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     412:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     416:	7c 01       	movw	r14, r24
			}
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3을 받으면 탈수 단독 모드로 진입
		{
			button3_state = !button3_state;
     418:	07 c0       	rjmp	.+14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     41a:	24 e0       	ldi	r18, 0x04	; 4
			{
				select_wash_mode = ONLY_SPINDRY;
			}
			else //
			{
				select_wash_mode = MAIN_SCREEN;
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <select_wash_mode+0x1>
     422:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <select_wash_mode>
     426:	7c 01       	movw	r14, r24
			}
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3을 받으면 탈수 단독 모드로 진입
		{
			button3_state = !button3_state;
     428:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <select_wash_mode>
			else //
			{
				select_wash_mode = MAIN_SCREEN;
			}
		}
		fp_wash_mode[select_wash_mode]();
     42c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <select_wash_mode+0x1>
     430:	ee 0f       	add	r30, r30
     432:	ff 1f       	adc	r31, r31
     434:	e6 5f       	subi	r30, 0xF6	; 246
     436:	fe 4f       	sbci	r31, 0xFE	; 254
     438:	01 90       	ld	r0, Z+
     43a:	f0 81       	ld	r31, Z
     43c:	e0 2d       	mov	r30, r0
     43e:	09 95       	icall
     440:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <fnd_refreshrate>
		
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     444:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <fnd_refreshrate+0x1>
     448:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <fnd_refreshrate+0x2>
     44c:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <fnd_refreshrate+0x3>
     450:	02 97       	sbiw	r24, 0x02	; 2
     452:	a1 05       	cpc	r26, r1
     454:	b1 05       	cpc	r27, r1
     456:	08 f4       	brcc	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	83 cf       	rjmp	.-250    	; 0x360 <fnd_main+0x14>
     45a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <fnd_refreshrate>
		{
			fnd_refreshrate = 0;
     45e:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <fnd_refreshrate+0x1>
     462:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <fnd_refreshrate+0x2>
     466:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <fnd_refreshrate+0x3>
			fnd_display();
     46a:	b4 de       	rcall	.-664    	; 0x1d4 <fnd_display>
     46c:	79 cf       	rjmp	.-270    	; 0x360 <fnd_main+0x14>

0000046e <custom_wash>:
     46e:	81 e0       	ldi	r24, 0x01	; 1
////////////////////////////////////////////메인화면에서 동작하는 함수들////////////////////////////////////////////////

void custom_wash(void) // 자동 세탁
{

	sec_count = 1;
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	a0 e0       	ldi	r26, 0x00	; 0
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     47a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     47e:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     482:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
     486:	33 c0       	rjmp	.+102    	; 0x4ee <custom_wash+0x80>
	{
		if (get_button(BUTTON0, BUTTON0PIN))
		{
			select_wash_mode = 4;
     488:	84 e0       	ldi	r24, 0x04	; 4
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <select_wash_mode+0x1>
     490:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <select_wash_mode>
	}
	// 여기까지 자동 세탁의 물온도, 헹굼횟수, 탈수 강도를 선택함 밑에서 지정한 시간만큼 모터가 돌아가고 탈수 강도에 맞게 30초 동안 강도에 맞게 진행
	
	//여기에 시간 만큼 회전하는 함수 추가.
	
}
     494:	08 95       	ret
		if (get_button(BUTTON0, BUTTON0PIN))
		{
			select_wash_mode = 4;
			break;
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     496:	65 e0       	ldi	r22, 0x05	; 5
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	19 de       	rcall	.-974    	; 0xd2 <get_button>
     4a0:	89 2b       	or	r24, r25
     4a2:	21 f0       	breq	.+8      	; 0x4ac <custom_wash+0x3e>
		{
			if (auto_step_led == 0) // 물 온도 선택하기  --- 물온도 변수 필요하고 
			{
				custom_wash_mode = 0;
     4a4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <custom_wash_mode+0x1>
     4a8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <custom_wash_mode>
			}
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     4ac:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <fnd_refreshrate>
     4b0:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <fnd_refreshrate+0x1>
     4b4:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <fnd_refreshrate+0x2>
     4b8:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <fnd_refreshrate+0x3>
     4bc:	02 97       	sbiw	r24, 0x02	; 2
     4be:	a1 05       	cpc	r26, r1
     4c0:	b1 05       	cpc	r27, r1
     4c2:	48 f0       	brcs	.+18     	; 0x4d6 <custom_wash+0x68>
		{
			fnd_refreshrate = 0;
     4c4:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <fnd_refreshrate>
     4c8:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <fnd_refreshrate+0x1>
     4cc:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <fnd_refreshrate+0x2>
     4d0:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <fnd_refreshrate+0x3>
			fnd_display();
     4d4:	7f de       	rcall	.-770    	; 0x1d4 <fnd_display>
		}
		custom_wash_select[custom_wash_mode]();
     4d6:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <custom_wash_mode>
     4da:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <custom_wash_mode+0x1>
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	e0 50       	subi	r30, 0x00	; 0
     4e4:	ff 4f       	sbci	r31, 0xFF	; 255
     4e6:	01 90       	ld	r0, Z+
     4e8:	f0 81       	ld	r31, Z
     4ea:	e0 2d       	mov	r30, r0
     4ec:	09 95       	icall
	
	int auto_step_led = 0;
	
	while (auto_step_led < 4)
	{
		if (get_button(BUTTON0, BUTTON0PIN))
     4ee:	64 e0       	ldi	r22, 0x04	; 4
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	ed dd       	rcall	.-1062   	; 0xd2 <get_button>
     4f8:	89 2b       	or	r24, r25
     4fa:	69 f2       	breq	.-102    	; 0x496 <custom_wash+0x28>
     4fc:	c5 cf       	rjmp	.-118    	; 0x488 <custom_wash+0x1a>

000004fe <water_temperature>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////자동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
	PORTA = 0x07;
     502:	87 e0       	ldi	r24, 0x07	; 7
     504:	8b bb       	out	0x1b, r24	; 27
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
     506:	8e e1       	ldi	r24, 0x1E	; 30
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	a0 e0       	ldi	r26, 0x00	; 0
     50c:	b0 e0       	ldi	r27, 0x00	; 0
     50e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     512:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     516:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     51a:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>

/////////////////////////////////////////자동 세척 모드에서 동작하는 함수들////////////////////////////////////////////
void water_temperature() // 물 온도 선택
{
	PORTA = 0x07;
	int water_tem_toggle = 1;
     51e:	c1 e0       	ldi	r28, 0x01	; 1
     520:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     522:	60 c0       	rjmp	.+192    	; 0x5e4 <water_temperature+0xe6>
	{
		if (get_button(BUTTON2, BUTTON2PIN))
     524:	66 e0       	ldi	r22, 0x06	; 6
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	d2 dd       	rcall	.-1116   	; 0xd2 <get_button>
     52e:	89 2b       	or	r24, r25
     530:	99 f0       	breq	.+38     	; 0x558 <water_temperature+0x5a>
		{
			sec_count -= 5;
     532:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <sec_count>
     536:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <sec_count+0x1>
     53a:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <sec_count+0x2>
     53e:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <sec_count+0x3>
     542:	05 97       	sbiw	r24, 0x05	; 5
     544:	a1 09       	sbc	r26, r1
     546:	b1 09       	sbc	r27, r1
     548:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     54c:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     550:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     554:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN))
     558:	67 e0       	ldi	r22, 0x07	; 7
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	83 e0       	ldi	r24, 0x03	; 3
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	b8 dd       	rcall	.-1168   	; 0xd2 <get_button>
     562:	89 2b       	or	r24, r25
     564:	99 f0       	breq	.+38     	; 0x58c <water_temperature+0x8e>
		{
			sec_count += 5;
     566:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <sec_count>
     56a:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <sec_count+0x1>
     56e:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <sec_count+0x2>
     572:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <sec_count+0x3>
     576:	05 96       	adiw	r24, 0x05	; 5
     578:	a1 1d       	adc	r26, r1
     57a:	b1 1d       	adc	r27, r1
     57c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     580:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     584:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     588:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     58c:	65 e0       	ldi	r22, 0x05	; 5
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	9e dd       	rcall	.-1220   	; 0xd2 <get_button>
     596:	89 2b       	or	r24, r25
     598:	81 f0       	breq	.+32     	; 0x5ba <water_temperature+0xbc>
		{	
			sec_count = 0;
     59a:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <sec_count>
     59e:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <sec_count+0x1>
     5a2:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <sec_count+0x2>
     5a6:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <sec_count+0x3>
			custom_wash_mode = 1;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <custom_wash_mode+0x1>
     5b2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <custom_wash_mode>
			water_tem_toggle = 0;
     5b6:	c0 e0       	ldi	r28, 0x00	; 0
     5b8:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     5ba:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <fnd_refreshrate>
     5be:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <fnd_refreshrate+0x1>
     5c2:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <fnd_refreshrate+0x2>
     5c6:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <fnd_refreshrate+0x3>
     5ca:	02 97       	sbiw	r24, 0x02	; 2
     5cc:	a1 05       	cpc	r26, r1
     5ce:	b1 05       	cpc	r27, r1
     5d0:	48 f0       	brcs	.+18     	; 0x5e4 <water_temperature+0xe6>
		{
			fnd_refreshrate = 0;
     5d2:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <fnd_refreshrate>
     5d6:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <fnd_refreshrate+0x1>
     5da:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <fnd_refreshrate+0x2>
     5de:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <fnd_refreshrate+0x3>
			fnd_display();
     5e2:	f8 dd       	rcall	.-1040   	; 0x1d4 <fnd_display>
	PORTA = 0x07;
	int water_tem_toggle = 1;
	
	sec_count = 30;  // deflaut 물 온도
	
	while (water_tem_toggle)
     5e4:	20 97       	sbiw	r28, 0x00	; 0
     5e6:	09 f0       	breq	.+2      	; 0x5ea <water_temperature+0xec>
     5e8:	9d cf       	rjmp	.-198    	; 0x524 <water_temperature+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	08 95       	ret

000005f0 <rinse_frequency>:

void rinse_frequency() // 헹굼 횟수 조절
{
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
	PORTA = 0x03;
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	8b bb       	out	0x1b, r24	; 27
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 2; // deflaut 헹굼 횟수
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	a0 e0       	ldi	r26, 0x00	; 0
     5fe:	b0 e0       	ldi	r27, 0x00	; 0
     600:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     604:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     608:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     60c:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
}

void rinse_frequency() // 헹굼 횟수 조절
{
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
     610:	c1 e0       	ldi	r28, 0x01	; 1
     612:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 2; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     614:	79 c0       	rjmp	.+242    	; 0x708 <rinse_frequency+0x118>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     616:	66 e0       	ldi	r22, 0x06	; 6
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	82 e0       	ldi	r24, 0x02	; 2
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	59 dd       	rcall	.-1358   	; 0xd2 <get_button>
     620:	89 2b       	or	r24, r25
     622:	99 f0       	breq	.+38     	; 0x64a <rinse_frequency+0x5a>
		{
			sec_count -= 1;
     624:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <sec_count>
     628:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <sec_count+0x1>
     62c:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <sec_count+0x2>
     630:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <sec_count+0x3>
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	a1 09       	sbc	r26, r1
     638:	b1 09       	sbc	r27, r1
     63a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     63e:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     642:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     646:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     64a:	67 e0       	ldi	r22, 0x07	; 7
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	3f dd       	rcall	.-1410   	; 0xd2 <get_button>
     654:	89 2b       	or	r24, r25
     656:	99 f0       	breq	.+38     	; 0x67e <rinse_frequency+0x8e>
		{
			sec_count += 1;
     658:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <sec_count>
     65c:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <sec_count+0x1>
     660:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <sec_count+0x2>
     664:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <sec_count+0x3>
     668:	01 96       	adiw	r24, 0x01	; 1
     66a:	a1 1d       	adc	r26, r1
     66c:	b1 1d       	adc	r27, r1
     66e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     672:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     676:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     67a:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     67e:	65 e0       	ldi	r22, 0x05	; 5
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	25 dd       	rcall	.-1462   	; 0xd2 <get_button>
     688:	89 2b       	or	r24, r25
     68a:	49 f1       	breq	.+82     	; 0x6de <rinse_frequency+0xee>
		{
			total_wash_time += sec_count * 10; // 버튼 1누르면 횟수 * 10초를 전역변수에 저장하고 다음 단계로 간 다음 탈출
     68c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <sec_count>
     690:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <sec_count+0x1>
     694:	9c 01       	movw	r18, r24
     696:	22 0f       	add	r18, r18
     698:	33 1f       	adc	r19, r19
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	82 0f       	add	r24, r18
     6a8:	93 1f       	adc	r25, r19
     6aa:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <total_wash_time>
     6ae:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <total_wash_time+0x1>
     6b2:	82 0f       	add	r24, r18
     6b4:	93 1f       	adc	r25, r19
     6b6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <total_wash_time+0x1>
     6ba:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <total_wash_time>
			sec_count = 0;
     6be:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <sec_count>
     6c2:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <sec_count+0x1>
     6c6:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <sec_count+0x2>
     6ca:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <sec_count+0x3>
			custom_wash_mode = 2;
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <custom_wash_mode+0x1>
     6d6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <custom_wash_mode>
			rinse_frequency_toggle = 0;
     6da:	c0 e0       	ldi	r28, 0x00	; 0
     6dc:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     6de:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <fnd_refreshrate>
     6e2:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <fnd_refreshrate+0x1>
     6e6:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <fnd_refreshrate+0x2>
     6ea:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <fnd_refreshrate+0x3>
     6ee:	02 97       	sbiw	r24, 0x02	; 2
     6f0:	a1 05       	cpc	r26, r1
     6f2:	b1 05       	cpc	r27, r1
     6f4:	48 f0       	brcs	.+18     	; 0x708 <rinse_frequency+0x118>
		{
			fnd_refreshrate = 0;
     6f6:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <fnd_refreshrate>
     6fa:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <fnd_refreshrate+0x1>
     6fe:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <fnd_refreshrate+0x2>
     702:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <fnd_refreshrate+0x3>
			fnd_display();
     706:	66 dd       	rcall	.-1332   	; 0x1d4 <fnd_display>
	PORTA = 0x03;
	int rinse_frequency_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 2; // deflaut 헹굼 횟수
	
	while (rinse_frequency_toggle)
     708:	20 97       	sbiw	r28, 0x00	; 0
     70a:	09 f0       	breq	.+2      	; 0x70e <rinse_frequency+0x11e>
     70c:	84 cf       	rjmp	.-248    	; 0x616 <rinse_frequency+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <spindry_strength>:

void spindry_strength()
{
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
	PORTA = 0x01;	
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	8b bb       	out	0x1b, r24	; 27

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	a0 e0       	ldi	r26, 0x00	; 0
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     728:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     72c:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     730:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>

void spindry_strength()
{
	PORTA = 0x01;	

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
     734:	c1 e0       	ldi	r28, 0x01	; 1
     736:	d0 e0       	ldi	r29, 0x00	; 0
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
	
	while (spindry_strength_toggle)
     738:	98 c0       	rjmp	.+304    	; 0x86a <spindry_strength+0x156>
	{
		if (get_button(BUTTON2, BUTTON2PIN)) // 버튼 2 누르면 횟수 1 감소
     73a:	66 e0       	ldi	r22, 0x06	; 6
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	82 e0       	ldi	r24, 0x02	; 2
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	c7 dc       	rcall	.-1650   	; 0xd2 <get_button>
     744:	89 2b       	or	r24, r25
     746:	99 f0       	breq	.+38     	; 0x76e <spindry_strength+0x5a>
		{
			sec_count -= 1;
     748:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <sec_count>
     74c:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <sec_count+0x1>
     750:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <sec_count+0x2>
     754:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <sec_count+0x3>
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	a1 09       	sbc	r26, r1
     75c:	b1 09       	sbc	r27, r1
     75e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     762:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     766:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     76a:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
		}
		
		if (get_button(BUTTON3, BUTTON3PIN)) // 버튼 3 누르면 횟수 1 증가
     76e:	67 e0       	ldi	r22, 0x07	; 7
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	83 e0       	ldi	r24, 0x03	; 3
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	ad dc       	rcall	.-1702   	; 0xd2 <get_button>
     778:	89 2b       	or	r24, r25
     77a:	99 f0       	breq	.+38     	; 0x7a2 <spindry_strength+0x8e>
		{
			sec_count += 1;
     77c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <sec_count>
     780:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <sec_count+0x1>
     784:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <sec_count+0x2>
     788:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <sec_count+0x3>
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	a1 1d       	adc	r26, r1
     790:	b1 1d       	adc	r27, r1
     792:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     796:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     79a:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     79e:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN)) // 버튼 1 누르면 세팅한 강도에 맞는 회전값 반환
     7a2:	65 e0       	ldi	r22, 0x05	; 5
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	93 dc       	rcall	.-1754   	; 0xd2 <get_button>
     7ac:	89 2b       	or	r24, r25
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <spindry_strength+0x9e>
     7b0:	47 c0       	rjmp	.+142    	; 0x840 <spindry_strength+0x12c>
		{
			if(sec_count == 1)
     7b2:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <sec_count>
     7b6:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <sec_count+0x1>
     7ba:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <sec_count+0x2>
     7be:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <sec_count+0x3>
     7c2:	81 30       	cpi	r24, 0x01	; 1
     7c4:	91 05       	cpc	r25, r1
     7c6:	a1 05       	cpc	r26, r1
     7c8:	b1 05       	cpc	r27, r1
     7ca:	39 f4       	brne	.+14     	; 0x7da <spindry_strength+0xc6>
			{
				spin_strength_val = 115;
     7cc:	83 e7       	ldi	r24, 0x73	; 115
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <spin_strength_val+0x1>
     7d4:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <spin_strength_val>
     7d8:	22 c0       	rjmp	.+68     	; 0x81e <spindry_strength+0x10a>
			}
			else if (sec_count == 2)
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	91 05       	cpc	r25, r1
     7de:	a1 05       	cpc	r26, r1
     7e0:	b1 05       	cpc	r27, r1
     7e2:	39 f4       	brne	.+14     	; 0x7f2 <spindry_strength+0xde>
			{
				spin_strength_val = 160;
     7e4:	80 ea       	ldi	r24, 0xA0	; 160
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <spin_strength_val+0x1>
     7ec:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <spin_strength_val>
     7f0:	16 c0       	rjmp	.+44     	; 0x81e <spindry_strength+0x10a>
			}
			else if (sec_count == 3)
     7f2:	83 30       	cpi	r24, 0x03	; 3
     7f4:	91 05       	cpc	r25, r1
     7f6:	a1 05       	cpc	r26, r1
     7f8:	b1 05       	cpc	r27, r1
     7fa:	39 f4       	brne	.+14     	; 0x80a <spindry_strength+0xf6>
			{
				spin_strength_val = 205;
     7fc:	8d ec       	ldi	r24, 0xCD	; 205
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <spin_strength_val+0x1>
     804:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <spin_strength_val>
     808:	0a c0       	rjmp	.+20     	; 0x81e <spindry_strength+0x10a>
			}
			else if (sec_count == 4)
     80a:	04 97       	sbiw	r24, 0x04	; 4
     80c:	a1 05       	cpc	r26, r1
     80e:	b1 05       	cpc	r27, r1
     810:	31 f4       	brne	.+12     	; 0x81e <spindry_strength+0x10a>
			{
				spin_strength_val = 250;
     812:	8a ef       	ldi	r24, 0xFA	; 250
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <spin_strength_val+0x1>
     81a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <spin_strength_val>
			}
			PORTA = 0;
     81e:	1b ba       	out	0x1b, r1	; 27
			spindry_strength_toggle = 0;
			custom_wash_mode = 3;
     820:	83 e0       	ldi	r24, 0x03	; 3
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <custom_wash_mode+0x1>
     828:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <custom_wash_mode>
			sec_count = 0;
     82c:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <sec_count>
     830:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <sec_count+0x1>
     834:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <sec_count+0x2>
     838:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <sec_count+0x3>
			else if (sec_count == 4)
			{
				spin_strength_val = 250;
			}
			PORTA = 0;
			spindry_strength_toggle = 0;
     83c:	c0 e0       	ldi	r28, 0x00	; 0
     83e:	d0 e0       	ldi	r29, 0x00	; 0
			custom_wash_mode = 3;
			sec_count = 0;
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     840:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <fnd_refreshrate>
     844:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <fnd_refreshrate+0x1>
     848:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <fnd_refreshrate+0x2>
     84c:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <fnd_refreshrate+0x3>
     850:	02 97       	sbiw	r24, 0x02	; 2
     852:	a1 05       	cpc	r26, r1
     854:	b1 05       	cpc	r27, r1
     856:	48 f0       	brcs	.+18     	; 0x86a <spindry_strength+0x156>
		{
			fnd_refreshrate = 0;
     858:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <fnd_refreshrate>
     85c:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <fnd_refreshrate+0x1>
     860:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <fnd_refreshrate+0x2>
     864:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <fnd_refreshrate+0x3>
			fnd_display();
     868:	b5 dc       	rcall	.-1686   	; 0x1d4 <fnd_display>

	int spindry_strength_toggle = 1; // 버튼1 누를 때 까지 반복
	
	sec_count = 3; // deflaut 탈수 강도 최대 4까지
	
	while (spindry_strength_toggle)
     86a:	20 97       	sbiw	r28, 0x00	; 0
     86c:	09 f0       	breq	.+2      	; 0x870 <spindry_strength+0x15c>
     86e:	65 cf       	rjmp	.-310    	; 0x73a <spindry_strength+0x26>
		{
			fnd_refreshrate = 0;
			fnd_display();
		}
	}
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <fnd_loading_display>:
	digit_select++;
	digit_select %= 4; //다음 표시할 자리수 선택
}

void fnd_loading_display(int *loading_rot) // 진행 로딩 상황 표시 
{
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
     886:	28 97       	sbiw	r28, 0x08	; 8
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	cd bf       	out	0x3d, r28	; 61
     892:	9c 01       	movw	r18, r24
	int a,b,c,d;                 //  |-     -|    |_   _|     -      _    -,_	  꺼짐
	uint8_t fnd_loading_font[] = {~0xce, ~0xf8, ~0xc7, ~0xf1, ~0xfe, ~0xf7, ~0xf6, ~0xff};
     894:	98 e0       	ldi	r25, 0x08	; 8
     896:	eb e3       	ldi	r30, 0x3B	; 59
     898:	f1 e0       	ldi	r31, 0x01	; 1
     89a:	de 01       	movw	r26, r28
     89c:	11 96       	adiw	r26, 0x01	; 1
     89e:	01 90       	ld	r0, Z+
     8a0:	0d 92       	st	X+, r0
     8a2:	9a 95       	dec	r25
     8a4:	e1 f7       	brne	.-8      	; 0x89e <fnd_loading_display+0x28>
	if (*loading_rot == 0)
     8a6:	f9 01       	movw	r30, r18
     8a8:	80 81       	ld	r24, Z
     8aa:	91 81       	ldd	r25, Z+1	; 0x01
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	31 f0       	breq	.+12     	; 0x8bc <fnd_loading_display+0x46>
	{
		a = 0; b = 5, c = 4, d = 3;	
	}
	else if (*loading_rot == 1)
     8b0:	81 30       	cpi	r24, 0x01	; 1
     8b2:	91 05       	cpc	r25, r1
     8b4:	79 f0       	breq	.+30     	; 0x8d4 <fnd_loading_display+0x5e>
	{
		a = 2; b = 4, c = 5, d = 1;
	}
	else if (*loading_rot == 2)
     8b6:	02 97       	sbiw	r24, 0x02	; 2
     8b8:	11 f5       	brne	.+68     	; 0x8fe <fnd_loading_display+0x88>
     8ba:	16 c0       	rjmp	.+44     	; 0x8e8 <fnd_loading_display+0x72>
{
	int a,b,c,d;                 //  |-     -|    |_   _|     -      _    -,_	  꺼짐
	uint8_t fnd_loading_font[] = {~0xce, ~0xf8, ~0xc7, ~0xf1, ~0xfe, ~0xf7, ~0xf6, ~0xff};
	if (*loading_rot == 0)
	{
		a = 0; b = 5, c = 4, d = 3;	
     8bc:	0f 2e       	mov	r0, r31
     8be:	f3 e0       	ldi	r31, 0x03	; 3
     8c0:	ef 2e       	mov	r14, r31
     8c2:	f1 2c       	mov	r15, r1
     8c4:	f0 2d       	mov	r31, r0
     8c6:	64 e0       	ldi	r22, 0x04	; 4
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	05 e0       	ldi	r16, 0x05	; 5
     8cc:	10 e0       	ldi	r17, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	15 c0       	rjmp	.+42     	; 0x8fe <fnd_loading_display+0x88>
	}
	else if (*loading_rot == 1)
	{
		a = 2; b = 4, c = 5, d = 1;
     8d4:	ee 24       	eor	r14, r14
     8d6:	e3 94       	inc	r14
     8d8:	f1 2c       	mov	r15, r1
     8da:	65 e0       	ldi	r22, 0x05	; 5
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	04 e0       	ldi	r16, 0x04	; 4
     8e0:	10 e0       	ldi	r17, 0x00	; 0
     8e2:	42 e0       	ldi	r20, 0x02	; 2
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	0b c0       	rjmp	.+22     	; 0x8fe <fnd_loading_display+0x88>
	}
	else if (*loading_rot == 2)
	{
		a = 4; b = 6, c = 6, d = 5;
     8e8:	0f 2e       	mov	r0, r31
     8ea:	f5 e0       	ldi	r31, 0x05	; 5
     8ec:	ef 2e       	mov	r14, r31
     8ee:	f1 2c       	mov	r15, r1
     8f0:	f0 2d       	mov	r31, r0
     8f2:	66 e0       	ldi	r22, 0x06	; 6
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	06 e0       	ldi	r16, 0x06	; 6
     8f8:	10 e0       	ldi	r17, 0x00	; 0
     8fa:	44 e0       	ldi	r20, 0x04	; 4
     8fc:	50 e0       	ldi	r21, 0x00	; 0
	}

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     8fe:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <digit_select.1842>
     902:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <digit_select.1842+0x1>
     906:	81 30       	cpi	r24, 0x01	; 1
     908:	91 05       	cpc	r25, r1
     90a:	a9 f0       	breq	.+42     	; 0x936 <fnd_loading_display+0xc0>
     90c:	1c f4       	brge	.+6      	; 0x914 <fnd_loading_display+0x9e>
     90e:	89 2b       	or	r24, r25
     910:	39 f0       	breq	.+14     	; 0x920 <fnd_loading_display+0xaa>
     912:	31 c0       	rjmp	.+98     	; 0x976 <fnd_loading_display+0x100>
     914:	82 30       	cpi	r24, 0x02	; 2
     916:	91 05       	cpc	r25, r1
     918:	c9 f0       	breq	.+50     	; 0x94c <fnd_loading_display+0xd6>
     91a:	03 97       	sbiw	r24, 0x03	; 3
     91c:	11 f1       	breq	.+68     	; 0x962 <fnd_loading_display+0xec>
     91e:	2b c0       	rjmp	.+86     	; 0x976 <fnd_loading_display+0x100>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     920:	8f e7       	ldi	r24, 0x7F	; 127
     922:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[d];
     924:	e1 e0       	ldi	r30, 0x01	; 1
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	ec 0f       	add	r30, r28
     92a:	fd 1f       	adc	r31, r29
     92c:	ee 0d       	add	r30, r14
     92e:	ff 1d       	adc	r31, r15
     930:	80 81       	ld	r24, Z
     932:	85 bb       	out	0x15, r24	; 21
		break;
     934:	20 c0       	rjmp	.+64     	; 0x976 <fnd_loading_display+0x100>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     936:	8f eb       	ldi	r24, 0xBF	; 191
     938:	88 bb       	out	0x18, r24	; 24

		FND_DATA_PORT = fnd_loading_font[b];
     93a:	e1 e0       	ldi	r30, 0x01	; 1
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	ec 0f       	add	r30, r28
     940:	fd 1f       	adc	r31, r29
     942:	e0 0f       	add	r30, r16
     944:	f1 1f       	adc	r31, r17
     946:	80 81       	ld	r24, Z
     948:	85 bb       	out	0x15, r24	; 21
		break;
     94a:	15 c0       	rjmp	.+42     	; 0x976 <fnd_loading_display+0x100>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     94c:	8f ed       	ldi	r24, 0xDF	; 223
     94e:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[c];
     950:	e1 e0       	ldi	r30, 0x01	; 1
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	ec 0f       	add	r30, r28
     956:	fd 1f       	adc	r31, r29
     958:	e6 0f       	add	r30, r22
     95a:	f7 1f       	adc	r31, r23
     95c:	80 81       	ld	r24, Z
     95e:	85 bb       	out	0x15, r24	; 21
		break;
     960:	0a c0       	rjmp	.+20     	; 0x976 <fnd_loading_display+0x100>

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     962:	8f ee       	ldi	r24, 0xEF	; 239
     964:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_loading_font[a];
     966:	e1 e0       	ldi	r30, 0x01	; 1
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	ec 0f       	add	r30, r28
     96c:	fd 1f       	adc	r31, r29
     96e:	e4 0f       	add	r30, r20
     970:	f5 1f       	adc	r31, r21
     972:	80 81       	ld	r24, Z
     974:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
     976:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <digit_select.1842>
     97a:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <digit_select.1842+0x1>
     97e:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
     980:	83 70       	andi	r24, 0x03	; 3
     982:	90 78       	andi	r25, 0x80	; 128
     984:	99 23       	and	r25, r25
     986:	24 f4       	brge	.+8      	; 0x990 <fnd_loading_display+0x11a>
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	8c 6f       	ori	r24, 0xFC	; 252
     98c:	9f 6f       	ori	r25, 0xFF	; 255
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <digit_select.1842+0x1>
     994:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <digit_select.1842>
}
     998:	28 96       	adiw	r28, 0x08	; 8
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	08 95       	ret

000009b2 <custom_wash_start>:
	}
}


void custom_wash_start(void)
{
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	00 d0       	rcall	.+0      	; 0x9bc <custom_wash_start+0xa>
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62
	int led_pwm_count; // LED 몇개 킬건지 정하는 변수
	sec_count = total_wash_time;
     9c0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <total_wash_time>
     9c4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <total_wash_time+0x1>
     9c8:	09 2e       	mov	r0, r25
     9ca:	00 0c       	add	r0, r0
     9cc:	aa 0b       	sbc	r26, r26
     9ce:	bb 0b       	sbc	r27, r27
     9d0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     9d4:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     9d8:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     9dc:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
	
	while (sec_count > 0)
     9e0:	c3 c0       	rjmp	.+390    	; 0xb68 <custom_wash_start+0x1b6>
	{
		washing_machine_fan_control(&spin_strength_val);
     9e2:	8c e5       	ldi	r24, 0x5C	; 92
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	be d1       	rcall	.+892    	; 0xd64 <washing_machine_fan_control>
		
		if (msec_count >= 250) // 1초마다 시간 1초씩 감소하고 로딩 회전이 됨.
     9e8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <msec_count>
     9ec:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <msec_count+0x1>
     9f0:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <msec_count+0x2>
     9f4:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <msec_count+0x3>
     9f8:	8a 3f       	cpi	r24, 0xFA	; 250
     9fa:	91 05       	cpc	r25, r1
     9fc:	a1 05       	cpc	r26, r1
     9fe:	b1 05       	cpc	r27, r1
     a00:	38 f1       	brcs	.+78     	; 0xa50 <custom_wash_start+0x9e>
		{
			msec_count = 0;
     a02:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <msec_count>
     a06:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <msec_count+0x1>
     a0a:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <msec_count+0x2>
     a0e:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <msec_count+0x3>
			sec_count--;
     a12:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <sec_count>
     a16:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <sec_count+0x1>
     a1a:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <sec_count+0x2>
     a1e:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <sec_count+0x3>
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	a1 09       	sbc	r26, r1
     a26:	b1 09       	sbc	r27, r1
     a28:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     a2c:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     a30:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     a34:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
			loading_rot++;
     a38:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <loading_rot>
     a3c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <loading_rot+0x1>
     a40:	01 96       	adiw	r24, 0x01	; 1
			loading_rot %= 3;
     a42:	63 e0       	ldi	r22, 0x03	; 3
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	ed d4       	rcall	.+2522   	; 0x1422 <__divmodhi4>
     a48:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <loading_rot+0x1>
     a4c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <loading_rot>
		}
		if (loading_clock_change >= 3000) // 3초마다 로딩창이랑 시간 화면 뜨는거 토글
     a50:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <loading_clock_change>
     a54:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <loading_clock_change+0x1>
     a58:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <loading_clock_change+0x2>
     a5c:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <loading_clock_change+0x3>
     a60:	88 3b       	cpi	r24, 0xB8	; 184
     a62:	9b 40       	sbci	r25, 0x0B	; 11
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	b0 f0       	brcs	.+44     	; 0xa96 <custom_wash_start+0xe4>
		{
			loading_clock_change = 0;
     a6a:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <loading_clock_change>
     a6e:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <loading_clock_change+0x1>
     a72:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <loading_clock_change+0x2>
     a76:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <loading_clock_change+0x3>
			loading_clock_change_val = !loading_clock_change_val;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <loading_clock_change_val>
     a82:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <loading_clock_change_val+0x1>
     a86:	23 2b       	or	r18, r19
     a88:	11 f0       	breq	.+4      	; 0xa8e <custom_wash_start+0xdc>
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <loading_clock_change_val+0x1>
     a92:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <loading_clock_change_val>
		}
		
		/////여기에 일반세탁 60초 + 헹굼 횟수 * 10초 + 탈수 30초로 구분을 해야함
		if (total_wash_time - sec_count <= 30)
     a96:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <sec_count>
     a9a:	50 91 5f 01 	lds	r21, 0x015F	; 0x80015f <sec_count+0x1>
     a9e:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <sec_count+0x2>
     aa2:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <sec_count+0x3>
     aa6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <total_wash_time>
     aaa:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <total_wash_time+0x1>
     aae:	09 2e       	mov	r0, r25
     ab0:	00 0c       	add	r0, r0
     ab2:	aa 0b       	sbc	r26, r26
     ab4:	bb 0b       	sbc	r27, r27
     ab6:	84 1b       	sub	r24, r20
     ab8:	95 0b       	sbc	r25, r21
     aba:	a6 0b       	sbc	r26, r22
     abc:	b7 0b       	sbc	r27, r23
     abe:	8f 31       	cpi	r24, 0x1F	; 31
     ac0:	91 05       	cpc	r25, r1
     ac2:	a1 05       	cpc	r26, r1
     ac4:	b1 05       	cpc	r27, r1
     ac6:	28 f4       	brcc	.+10     	; 0xad2 <custom_wash_start+0x120>
		{
			led_pwm_count = 255; // 0xff
     ac8:	8f ef       	ldi	r24, 0xFF	; 255
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	9a 83       	std	Y+2, r25	; 0x02
     ace:	89 83       	std	Y+1, r24	; 0x01
     ad0:	29 c0       	rjmp	.+82     	; 0xb24 <custom_wash_start+0x172>
		}
		
		else if (total_wash_time - sec_count < 60 && total_wash_time - sec_count > 30)
     ad2:	8c 01       	movw	r16, r24
     ad4:	9d 01       	movw	r18, r26
     ad6:	0f 51       	subi	r16, 0x1F	; 31
     ad8:	11 09       	sbc	r17, r1
     ada:	21 09       	sbc	r18, r1
     adc:	31 09       	sbc	r19, r1
     ade:	0d 31       	cpi	r16, 0x1D	; 29
     ae0:	11 05       	cpc	r17, r1
     ae2:	21 05       	cpc	r18, r1
     ae4:	31 05       	cpc	r19, r1
     ae6:	28 f4       	brcc	.+10     	; 0xaf2 <custom_wash_start+0x140>
		{
			led_pwm_count = 126; // 0x7c
     ae8:	8e e7       	ldi	r24, 0x7E	; 126
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	9a 83       	std	Y+2, r25	; 0x02
     aee:	89 83       	std	Y+1, r24	; 0x01
     af0:	19 c0       	rjmp	.+50     	; 0xb24 <custom_wash_start+0x172>
		}
		
		else if (total_wash_time - sec_count == 60)
     af2:	cc 97       	sbiw	r24, 0x3c	; 60
     af4:	a1 05       	cpc	r26, r1
     af6:	b1 05       	cpc	r27, r1
     af8:	29 f4       	brne	.+10     	; 0xb04 <custom_wash_start+0x152>
		{
			led_pwm_count = 60; // 0x3c
     afa:	8c e3       	ldi	r24, 0x3C	; 60
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
     b02:	10 c0       	rjmp	.+32     	; 0xb24 <custom_wash_start+0x172>
		}
		
		else if (sec_count == 30)
     b04:	4e 31       	cpi	r20, 0x1E	; 30
     b06:	51 05       	cpc	r21, r1
     b08:	61 05       	cpc	r22, r1
     b0a:	71 05       	cpc	r23, r1
     b0c:	29 f4       	brne	.+10     	; 0xb18 <custom_wash_start+0x166>
		{
			led_pwm_count = 24; // 0x18
     b0e:	88 e1       	ldi	r24, 0x18	; 24
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	9a 83       	std	Y+2, r25	; 0x02
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	06 c0       	rjmp	.+12     	; 0xb24 <custom_wash_start+0x172>
		}
		
		else if (sec_count == 0)
     b18:	45 2b       	or	r20, r21
     b1a:	46 2b       	or	r20, r22
     b1c:	47 2b       	or	r20, r23
     b1e:	11 f4       	brne	.+4      	; 0xb24 <custom_wash_start+0x172>
		{
			led_pwm_count = 0;
     b20:	1a 82       	std	Y+2, r1	; 0x02
     b22:	19 82       	std	Y+1, r1	; 0x01
		}
		
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     b24:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <fnd_refreshrate>
     b28:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <fnd_refreshrate+0x1>
     b2c:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <fnd_refreshrate+0x2>
     b30:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <fnd_refreshrate+0x3>
     b34:	02 97       	sbiw	r24, 0x02	; 2
     b36:	a1 05       	cpc	r26, r1
     b38:	b1 05       	cpc	r27, r1
     b3a:	b0 f0       	brcs	.+44     	; 0xb68 <custom_wash_start+0x1b6>
		{
			fnd_refreshrate = 0;
     b3c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <fnd_refreshrate>
     b40:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <fnd_refreshrate+0x1>
     b44:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <fnd_refreshrate+0x2>
     b48:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <fnd_refreshrate+0x3>
			make_pwm_led_control(&led_pwm_count);
     b4c:	ce 01       	movw	r24, r28
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	43 d0       	rcall	.+134    	; 0xbd8 <make_pwm_led_control>
			if (loading_clock_change_val)
     b52:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <loading_clock_change_val>
     b56:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <loading_clock_change_val+0x1>
     b5a:	89 2b       	or	r24, r25
			{
				fnd_display(); // 시간 보여주기
     b5c:	11 f0       	breq	.+4      	; 0xb62 <custom_wash_start+0x1b0>
     b5e:	3a db       	rcall	.-2444   	; 0x1d4 <fnd_display>
			}
			else
			{
				fnd_loading_display(&loading_rot); // 로딩 보여주기
     b60:	03 c0       	rjmp	.+6      	; 0xb68 <custom_wash_start+0x1b6>
     b62:	8a e5       	ldi	r24, 0x5A	; 90
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	87 de       	rcall	.-754    	; 0x876 <fnd_loading_display>
void custom_wash_start(void)
{
	int led_pwm_count; // LED 몇개 킬건지 정하는 변수
	sec_count = total_wash_time;
	
	while (sec_count > 0)
     b68:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <sec_count>
     b6c:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <sec_count+0x1>
     b70:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <sec_count+0x2>
     b74:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <sec_count+0x3>
     b78:	89 2b       	or	r24, r25
     b7a:	8a 2b       	or	r24, r26
     b7c:	8b 2b       	or	r24, r27
     b7e:	09 f0       	breq	.+2      	; 0xb82 <custom_wash_start+0x1d0>
     b80:	30 cf       	rjmp	.-416    	; 0x9e2 <custom_wash_start+0x30>
				fnd_loading_display(&loading_rot); // 로딩 보여주기
			}
		}
		
	}
	OCR3C = 0;
     b82:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     b86:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	sec_count = 0; // 다 끝나면 끝
     b8a:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <sec_count>
     b8e:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <sec_count+0x1>
     b92:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <sec_count+0x2>
     b96:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <sec_count+0x3>
	custom_wash_mode = 4;
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <custom_wash_mode+0x1>
     ba2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <custom_wash_mode>
}
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <led_on_pwm>:
	//}
}

void led_on_pwm(int dim) // dim의 반복을 이용해서 밝기를 제어 (PWM의 HIGH 비율을 제어)
{
	for (int i = 0; i < 256; i++)
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	0a c0       	rjmp	.+20     	; 0xbce <led_on_pwm+0x1a>
	{
		if (i > dim)
     bba:	82 17       	cp	r24, r18
     bbc:	93 07       	cpc	r25, r19
     bbe:	0c f4       	brge	.+2      	; 0xbc2 <led_on_pwm+0xe>
		{
			PORTA = 0; // duty cycle이 넘어가면 LED all off
     bc0:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bc2:	4a e6       	ldi	r20, 0x6A	; 106
     bc4:	4a 95       	dec	r20
     bc6:	f1 f7       	brne	.-4      	; 0xbc4 <led_on_pwm+0x10>
     bc8:	00 c0       	rjmp	.+0      	; 0xbca <led_on_pwm+0x16>
	//}
}

void led_on_pwm(int dim) // dim의 반복을 이용해서 밝기를 제어 (PWM의 HIGH 비율을 제어)
{
	for (int i = 0; i < 256; i++)
     bca:	2f 5f       	subi	r18, 0xFF	; 255
     bcc:	3f 4f       	sbci	r19, 0xFF	; 255
     bce:	2f 3f       	cpi	r18, 0xFF	; 255
     bd0:	31 05       	cpc	r19, r1
     bd2:	99 f3       	breq	.-26     	; 0xbba <led_on_pwm+0x6>
     bd4:	94 f3       	brlt	.-28     	; 0xbba <led_on_pwm+0x6>
		{
			PORTA = 0; // duty cycle이 넘어가면 LED all off
		}
		_delay_us(20);
	}
     bd6:	08 95       	ret

00000bd8 <make_pwm_led_control>:
extern volatile uint32_t msec_count;


void make_pwm_led_control(int *led_pwm_count)
{
	DDRA = 0xff; // led 모두 출력 모드
     bd8:	2f ef       	ldi	r18, 0xFF	; 255
     bda:	2a bb       	out	0x1a, r18	; 26
	PORTA = *led_pwm_count; // 입력받은 카운트 만큼 LED on
     bdc:	fc 01       	movw	r30, r24
     bde:	80 81       	ld	r24, Z
     be0:	8b bb       	out	0x1b, r24	; 27
	//PORTA = "0xff"; // led all on
	
	// dark --> bright --> dark 순서로 진행되는 코드
	//while (1)
	//{
 		led_on_pwm(dim); // 지속적으로 on할거면 이 함수만 while 반복
     be2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <dim>
     be6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <dim+0x1>
     bea:	e4 df       	rcall	.-56     	; 0xbb4 <led_on_pwm>
  		dim += direction;
     bec:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <dim>
     bf0:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <dim+0x1>
     bf4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <direction>
     bf8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <direction+0x1>
     bfc:	82 0f       	add	r24, r18
     bfe:	93 1f       	adc	r25, r19
     c00:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <dim+0x1>
     c04:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <dim>
		  
  		if (dim == 255) // 다 밝아지면 다시 어두워지도록 함
     c08:	8f 3f       	cpi	r24, 0xFF	; 255
     c0a:	91 05       	cpc	r25, r1
     c0c:	31 f4       	brne	.+12     	; 0xc1a <make_pwm_led_control+0x42>
  		{
  			direction = -1;
     c0e:	2f ef       	ldi	r18, 0xFF	; 255
     c10:	3f ef       	ldi	r19, 0xFF	; 255
     c12:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <direction+0x1>
     c16:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <direction>
  		}
 		if (dim == 0) // 다 어두워지면 다시 밝아지도록 함
     c1a:	89 2b       	or	r24, r25
     c1c:	31 f4       	brne	.+12     	; 0xc2a <make_pwm_led_control+0x52>
  		{
  			direction = 1;
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <direction+0x1>
     c26:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <direction>
     c2a:	08 95       	ret

00000c2c <__vector_16>:
extern void init_n289n();

FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     c2c:	1f 92       	push	r1
     c2e:	0f 92       	push	r0
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	0f 92       	push	r0
     c34:	11 24       	eor	r1, r1
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	af 93       	push	r26
     c3c:	bf 93       	push	r27
	TCNT0=6;
     c3e:	86 e0       	ldi	r24, 0x06	; 6
     c40:	82 bf       	out	0x32, r24	; 50
	msec_count++; 
     c42:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <msec_count>
     c46:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <msec_count+0x1>
     c4a:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <msec_count+0x2>
     c4e:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <msec_count+0x3>
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	a1 1d       	adc	r26, r1
     c56:	b1 1d       	adc	r27, r1
     c58:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <msec_count>
     c5c:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <msec_count+0x1>
     c60:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <msec_count+0x2>
     c64:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <msec_count+0x3>
	fnd_refreshrate++; 
     c68:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <fnd_refreshrate>
     c6c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <fnd_refreshrate+0x1>
     c70:	a0 91 6c 01 	lds	r26, 0x016C	; 0x80016c <fnd_refreshrate+0x2>
     c74:	b0 91 6d 01 	lds	r27, 0x016D	; 0x80016d <fnd_refreshrate+0x3>
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	a1 1d       	adc	r26, r1
     c7c:	b1 1d       	adc	r27, r1
     c7e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <fnd_refreshrate>
     c82:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <fnd_refreshrate+0x1>
     c86:	a0 93 6c 01 	sts	0x016C, r26	; 0x80016c <fnd_refreshrate+0x2>
     c8a:	b0 93 6d 01 	sts	0x016D, r27	; 0x80016d <fnd_refreshrate+0x3>
	check_timer++;
     c8e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <check_timer>
     c92:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <check_timer+0x1>
     c96:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <check_timer+0x2>
     c9a:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <check_timer+0x3>
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	a1 1d       	adc	r26, r1
     ca2:	b1 1d       	adc	r27, r1
     ca4:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <check_timer>
     ca8:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <check_timer+0x1>
     cac:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <check_timer+0x2>
     cb0:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <check_timer+0x3>
	loading_clock_change++;
     cb4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <loading_clock_change>
     cb8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <loading_clock_change+0x1>
     cbc:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <loading_clock_change+0x2>
     cc0:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <loading_clock_change+0x3>
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	a1 1d       	adc	r26, r1
     cc8:	b1 1d       	adc	r27, r1
     cca:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <loading_clock_change>
     cce:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <loading_clock_change+0x1>
     cd2:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <loading_clock_change+0x2>
     cd6:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <loading_clock_change+0x3>
}
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	0f 90       	pop	r0
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	0f 90       	pop	r0
     ce8:	1f 90       	pop	r1
     cea:	18 95       	reti

00000cec <init_timer0>:
	}
}

void init_timer0()
{
	TCNT0 = 6;
     cec:	86 e0       	ldi	r24, 0x06	; 6
     cee:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     cf0:	83 b7       	in	r24, 0x33	; 51
     cf2:	84 60       	ori	r24, 0x04	; 4
     cf4:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;
     cf6:	87 b7       	in	r24, 0x37	; 55
     cf8:	81 60       	ori	r24, 0x01	; 1
     cfa:	87 bf       	out	0x37, r24	; 55
     cfc:	08 95       	ret

00000cfe <main>:
	loading_clock_change++;
}

int main(void)
{
	init_timer0();
     cfe:	f6 df       	rcall	.-20     	; 0xcec <init_timer0>
	init_uart0();
     d00:	f0 d0       	rcall	.+480    	; 0xee2 <init_uart0>
	init_uart1();
     d02:	82 d1       	rcall	.+772    	; 0x1008 <init_uart1>
	init_ultrasonic();
     d04:	f2 d1       	rcall	.+996    	; 0x10ea <init_ultrasonic>
	init_button();
     d06:	e1 d9       	rcall	.-3134   	; 0xca <init_button>
     d08:	0c d0       	rcall	.+24     	; 0xd22 <init_timer3_pwm>
	init_timer3_pwm();
     d0a:	23 d0       	rcall	.+70     	; 0xd52 <init_n289n>
     d0c:	80 e2       	ldi	r24, 0x20	; 32
	init_n289n();
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	90 93 f1 07 	sts	0x07F1, r25	; 0x8007f1 <__iob+0x3>
	
	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     d14:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <__iob+0x2>
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	8a bb       	out	0x1a, r24	; 26
	
	DDRA=0xff;   // led를 출력 모드로
     d1c:	78 94       	sei
     d1e:	16 db       	rcall	.-2516   	; 0x34c <fnd_main>
	sei();     // 전역적으로 interrupt 허용
     d20:	ff cf       	rjmp	.-2      	; 0xd20 <main+0x22>

00000d22 <init_timer3_pwm>:
	
	fnd_main();
     d22:	82 b1       	in	r24, 0x02	; 2
     d24:	88 62       	ori	r24, 0x28	; 40
     d26:	82 b9       	out	0x02, r24	; 2
void init_timer3_pwm(void)
{
	// DDRE |= 1 << 3 | 1 << 4 | 1 << 5; 현재 4번에 초음파가 연결되어 있다.
	DDRE |= 1 << 3 | 1 << 5;
	// 모드 5 : 8비트 고속 pwm    TCCR3A레지스터 WGM30과 TCCR3B레지스터 WGM32를 1로 만든다.
	TCCR3A |= 1 << WGM30;
     d28:	ab e8       	ldi	r26, 0x8B	; 139
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	8c 91       	ld	r24, X
     d2e:	81 60       	ori	r24, 0x01	; 1
     d30:	8c 93       	st	X, r24
	TCCR3B |= 1 << WGM32;
     d32:	ea e8       	ldi	r30, 0x8A	; 138
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	88 60       	ori	r24, 0x08	; 8
     d3a:	80 83       	st	Z, r24
	// 비반전모드 top : 0x00ff  비교일치값(pwm)지정 : OCR3C
	// TCCR3A레지스터의 COM3C1을 1로 set
	// 비교일치 발생시 OC3C의 출력 핀은 LOw로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR3A |= 1 << COM3C1;
     d3c:	8c 91       	ld	r24, X
     d3e:	88 60       	ori	r24, 0x08	; 8
     d40:	8c 93       	st	X, r24
	// 분주비 : 64   16,000,000hz -> 250,000hz         TCCR3B의 CS30, CS31을 1로 set
	// 주기 : 1 / 250,000 -> 4us
	// 250000hz에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//			    127개의 펄스를 count하면 소요시간 : 0.51ms
	TCCR3B |= 1 << CS31 | 1 << CS30;
     d42:	80 81       	ld	r24, Z
     d44:	83 60       	ori	r24, 0x03	; 3
     d46:	80 83       	st	Z, r24
	OCR3C = 0; // 비교일치값 (Output Compare Register : PWM 값
     d48:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     d4c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     d50:	08 95       	ret

00000d52 <init_n289n>:
}

void init_n289n(void)
{
	PORTF &= ~(1 << 6 | 1 << 7);  // 6, 7 reset
     d52:	e2 e6       	ldi	r30, 0x62	; 98
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8f 73       	andi	r24, 0x3F	; 63
     d5a:	80 83       	st	Z, r24
	PORTF |= 1 << 6; // 정회전
     d5c:	80 81       	ld	r24, Z
     d5e:	80 64       	ori	r24, 0x40	; 64
     d60:	80 83       	st	Z, r24
     d62:	08 95       	ret

00000d64 <washing_machine_fan_control>:
}

void washing_machine_fan_control(int *spin_strength)
{
	OCR3C = *spin_strength;
     d64:	fc 01       	movw	r30, r24
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     d6e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	
	if (check_timer >= 5000)
     d72:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <check_timer>
     d76:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <check_timer+0x1>
     d7a:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <check_timer+0x2>
     d7e:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <check_timer+0x3>
     d82:	88 38       	cpi	r24, 0x88	; 136
     d84:	93 41       	sbci	r25, 0x13	; 19
     d86:	a1 05       	cpc	r26, r1
     d88:	b1 05       	cpc	r27, r1
     d8a:	d8 f0       	brcs	.+54     	; 0xdc2 <washing_machine_fan_control+0x5e>
	{
		PORTF &= ~(1 << 6 | 1 << 7);  // 6, 7 reset
     d8c:	e2 e6       	ldi	r30, 0x62	; 98
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8f 73       	andi	r24, 0x3F	; 63
     d94:	80 83       	st	Z, r24
		fan_forward = !fan_forward;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <fan_forward>
     d9e:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <fan_forward+0x1>
     da2:	23 2b       	or	r18, r19
     da4:	11 f0       	breq	.+4      	; 0xdaa <washing_machine_fan_control+0x46>
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <fan_forward+0x1>
     dae:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <fan_forward>
		check_timer = 0;
     db2:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <check_timer>
     db6:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <check_timer+0x1>
     dba:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <check_timer+0x2>
     dbe:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <check_timer+0x3>
	}
	
	if (fan_forward)
     dc2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <fan_forward>
     dc6:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <fan_forward+0x1>
     dca:	89 2b       	or	r24, r25
     dcc:	31 f0       	breq	.+12     	; 0xdda <washing_machine_fan_control+0x76>
	{
		PORTF |= 1 << 6; // 정회전
     dce:	e2 e6       	ldi	r30, 0x62	; 98
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	80 64       	ori	r24, 0x40	; 64
     dd6:	80 83       	st	Z, r24
     dd8:	08 95       	ret
	}
	else
	{
		PORTF |= 1 << 7; // 역회전
     dda:	e2 e6       	ldi	r30, 0x62	; 98
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	80 68       	ori	r24, 0x80	; 128
     de2:	80 83       	st	Z, r24
     de4:	08 95       	ret

00000de6 <__vector_18>:
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	0b b6       	in	r0, 0x3b	; 59
     df2:	0f 92       	push	r0
     df4:	2f 93       	push	r18
     df6:	3f 93       	push	r19
     df8:	4f 93       	push	r20
     dfa:	5f 93       	push	r21
     dfc:	6f 93       	push	r22
     dfe:	7f 93       	push	r23
     e00:	8f 93       	push	r24
     e02:	9f 93       	push	r25
     e04:	af 93       	push	r26
     e06:	bf 93       	push	r27
     e08:	ef 93       	push	r30
     e0a:	ff 93       	push	r31
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	1f 92       	push	r1
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	8c b1       	in	r24, 0x0c	; 12
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	8d 30       	cpi	r24, 0x0D	; 13
     e1e:	19 f0       	breq	.+6      	; 0xe26 <__vector_18+0x40>
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	8a 30       	cpi	r24, 0x0A	; 10
     e24:	61 f5       	brne	.+88     	; 0xe7e <__vector_18+0x98>
     e26:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <rear>
     e2a:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <rear+0x1>
     e2e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <i.1894>
     e32:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <i.1894+0x1>
     e36:	40 e5       	ldi	r20, 0x50	; 80
     e38:	42 9f       	mul	r20, r18
     e3a:	f0 01       	movw	r30, r0
     e3c:	43 9f       	mul	r20, r19
     e3e:	f0 0d       	add	r31, r0
     e40:	11 24       	eor	r1, r1
     e42:	e4 58       	subi	r30, 0x84	; 132
     e44:	fe 4f       	sbci	r31, 0xFE	; 254
     e46:	e8 0f       	add	r30, r24
     e48:	f9 1f       	adc	r31, r25
     e4a:	10 82       	st	Z, r1
     e4c:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <i.1894+0x1>
     e50:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <i.1894>
     e54:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rear>
     e58:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <rear+0x1>
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <rear+0x1>
     e62:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <rear>
     e66:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <rear>
     e6a:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <rear+0x1>
     e6e:	6a e0       	ldi	r22, 0x0A	; 10
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	d7 d2       	rcall	.+1454   	; 0x1422 <__divmodhi4>
     e74:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <rear+0x1>
     e78:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <rear>
     e7c:	1c c0       	rjmp	.+56     	; 0xeb6 <__vector_18+0xd0>
     e7e:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <rear>
     e82:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <rear+0x1>
     e86:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <i.1894>
     e8a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <i.1894+0x1>
     e8e:	9c 01       	movw	r18, r24
     e90:	2f 5f       	subi	r18, 0xFF	; 255
     e92:	3f 4f       	sbci	r19, 0xFF	; 255
     e94:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <i.1894+0x1>
     e98:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <i.1894>
     e9c:	49 81       	ldd	r20, Y+1	; 0x01
     e9e:	50 e5       	ldi	r21, 0x50	; 80
     ea0:	56 9f       	mul	r21, r22
     ea2:	90 01       	movw	r18, r0
     ea4:	57 9f       	mul	r21, r23
     ea6:	30 0d       	add	r19, r0
     ea8:	11 24       	eor	r1, r1
     eaa:	24 58       	subi	r18, 0x84	; 132
     eac:	3e 4f       	sbci	r19, 0xFE	; 254
     eae:	f9 01       	movw	r30, r18
     eb0:	e8 0f       	add	r30, r24
     eb2:	f9 1f       	adc	r31, r25
     eb4:	40 83       	st	Z, r20
     eb6:	0f 90       	pop	r0
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	ff 91       	pop	r31
     ebe:	ef 91       	pop	r30
     ec0:	bf 91       	pop	r27
     ec2:	af 91       	pop	r26
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	7f 91       	pop	r23
     eca:	6f 91       	pop	r22
     ecc:	5f 91       	pop	r21
     ece:	4f 91       	pop	r20
     ed0:	3f 91       	pop	r19
     ed2:	2f 91       	pop	r18
     ed4:	0f 90       	pop	r0
     ed6:	0b be       	out	0x3b, r0	; 59
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	0f 90       	pop	r0
     ede:	1f 90       	pop	r1
     ee0:	18 95       	reti

00000ee2 <init_uart0>:
     ee2:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     ee6:	8f ec       	ldi	r24, 0xCF	; 207
     ee8:	89 b9       	out	0x09, r24	; 9
     eea:	8b b1       	in	r24, 0x0b	; 11
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	8b b9       	out	0x0b, r24	; 11
     ef0:	e5 e9       	ldi	r30, 0x95	; 149
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	86 60       	ori	r24, 0x06	; 6
     ef8:	80 83       	st	Z, r24
     efa:	8a b1       	in	r24, 0x0a	; 10
     efc:	88 69       	ori	r24, 0x98	; 152
     efe:	8a b9       	out	0x0a, r24	; 10
     f00:	08 95       	ret

00000f02 <UART0_transmit>:
     f02:	5d 9b       	sbis	0x0b, 5	; 11
     f04:	fe cf       	rjmp	.-4      	; 0xf02 <UART0_transmit>
     f06:	8c b9       	out	0x0c, r24	; 12
     f08:	08 95       	ret

00000f0a <__vector_30>:
     f0a:	1f 92       	push	r1
     f0c:	0f 92       	push	r0
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	0f 92       	push	r0
     f12:	11 24       	eor	r1, r1
     f14:	0b b6       	in	r0, 0x3b	; 59
     f16:	0f 92       	push	r0
     f18:	2f 93       	push	r18
     f1a:	3f 93       	push	r19
     f1c:	4f 93       	push	r20
     f1e:	5f 93       	push	r21
     f20:	6f 93       	push	r22
     f22:	7f 93       	push	r23
     f24:	8f 93       	push	r24
     f26:	9f 93       	push	r25
     f28:	af 93       	push	r26
     f2a:	bf 93       	push	r27
     f2c:	ef 93       	push	r30
     f2e:	ff 93       	push	r31
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	1f 92       	push	r1
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	8d 30       	cpi	r24, 0x0D	; 13
     f44:	19 f0       	breq	.+6      	; 0xf4c <__vector_30+0x42>
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	8a 30       	cpi	r24, 0x0A	; 10
     f4a:	61 f5       	brne	.+88     	; 0xfa4 <__vector_30+0x9a>
     f4c:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <rear1>
     f50:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <rear1+0x1>
     f54:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <i.1896>
     f58:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <i.1896+0x1>
     f5c:	40 e5       	ldi	r20, 0x50	; 80
     f5e:	42 9f       	mul	r20, r18
     f60:	f0 01       	movw	r30, r0
     f62:	43 9f       	mul	r20, r19
     f64:	f0 0d       	add	r31, r0
     f66:	11 24       	eor	r1, r1
     f68:	e4 56       	subi	r30, 0x64	; 100
     f6a:	fb 4f       	sbci	r31, 0xFB	; 251
     f6c:	e8 0f       	add	r30, r24
     f6e:	f9 1f       	adc	r31, r25
     f70:	10 82       	st	Z, r1
     f72:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <i.1896+0x1>
     f76:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <i.1896>
     f7a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rear1>
     f7e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <rear1+0x1>
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <rear1+0x1>
     f88:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <rear1>
     f8c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rear1>
     f90:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <rear1+0x1>
     f94:	6a e0       	ldi	r22, 0x0A	; 10
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	44 d2       	rcall	.+1160   	; 0x1422 <__divmodhi4>
     f9a:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <rear1+0x1>
     f9e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <rear1>
     fa2:	1c c0       	rjmp	.+56     	; 0xfdc <__vector_30+0xd2>
     fa4:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <rear1>
     fa8:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <rear1+0x1>
     fac:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <i.1896>
     fb0:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <i.1896+0x1>
     fb4:	9c 01       	movw	r18, r24
     fb6:	2f 5f       	subi	r18, 0xFF	; 255
     fb8:	3f 4f       	sbci	r19, 0xFF	; 255
     fba:	30 93 77 01 	sts	0x0177, r19	; 0x800177 <i.1896+0x1>
     fbe:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <i.1896>
     fc2:	49 81       	ldd	r20, Y+1	; 0x01
     fc4:	50 e5       	ldi	r21, 0x50	; 80
     fc6:	56 9f       	mul	r21, r22
     fc8:	90 01       	movw	r18, r0
     fca:	57 9f       	mul	r21, r23
     fcc:	30 0d       	add	r19, r0
     fce:	11 24       	eor	r1, r1
     fd0:	24 56       	subi	r18, 0x64	; 100
     fd2:	3b 4f       	sbci	r19, 0xFB	; 251
     fd4:	f9 01       	movw	r30, r18
     fd6:	e8 0f       	add	r30, r24
     fd8:	f9 1f       	adc	r31, r25
     fda:	40 83       	st	Z, r20
     fdc:	0f 90       	pop	r0
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	ff 91       	pop	r31
     fe4:	ef 91       	pop	r30
     fe6:	bf 91       	pop	r27
     fe8:	af 91       	pop	r26
     fea:	9f 91       	pop	r25
     fec:	8f 91       	pop	r24
     fee:	7f 91       	pop	r23
     ff0:	6f 91       	pop	r22
     ff2:	5f 91       	pop	r21
     ff4:	4f 91       	pop	r20
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0b be       	out	0x3b, r0	; 59
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	0f 90       	pop	r0
    1004:	1f 90       	pop	r1
    1006:	18 95       	reti

00001008 <init_uart1>:
    1008:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    100c:	8f ec       	ldi	r24, 0xCF	; 207
    100e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1012:	eb e9       	ldi	r30, 0x9B	; 155
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	82 60       	ori	r24, 0x02	; 2
    101a:	80 83       	st	Z, r24
    101c:	ed e9       	ldi	r30, 0x9D	; 157
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	86 60       	ori	r24, 0x06	; 6
    1024:	80 83       	st	Z, r24
    1026:	ea e9       	ldi	r30, 0x9A	; 154
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	88 69       	ori	r24, 0x98	; 152
    102e:	80 83       	st	Z, r24
    1030:	08 95       	ret

00001032 <__vector_5>:
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
    103c:	0b b6       	in	r0, 0x3b	; 59
    103e:	0f 92       	push	r0
    1040:	2f 93       	push	r18
    1042:	3f 93       	push	r19
    1044:	4f 93       	push	r20
    1046:	5f 93       	push	r21
    1048:	6f 93       	push	r22
    104a:	7f 93       	push	r23
    104c:	8f 93       	push	r24
    104e:	9f 93       	push	r25
    1050:	af 93       	push	r26
    1052:	bf 93       	push	r27
    1054:	ef 93       	push	r30
    1056:	ff 93       	push	r31
    1058:	0c 9b       	sbis	0x01, 4	; 1
    105a:	03 c0       	rjmp	.+6      	; 0x1062 <__vector_5+0x30>
    105c:	1d bc       	out	0x2d, r1	; 45
    105e:	1c bc       	out	0x2c, r1	; 44
    1060:	31 c0       	rjmp	.+98     	; 0x10c4 <__vector_5+0x92>
    1062:	6c b5       	in	r22, 0x2c	; 44
    1064:	7d b5       	in	r23, 0x2d	; 45
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	ea d0       	rcall	.+468    	; 0x1240 <__floatunsisf>
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	34 e2       	ldi	r19, 0x24	; 36
    1070:	44 e7       	ldi	r20, 0x74	; 116
    1072:	59 e4       	ldi	r21, 0x49	; 73
    1074:	73 d1       	rcall	.+742    	; 0x135c <__mulsf3>
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e8       	ldi	r20, 0x80	; 128
    107c:	54 e4       	ldi	r21, 0x44	; 68
    107e:	6e d1       	rcall	.+732    	; 0x135c <__mulsf3>
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	34 e2       	ldi	r19, 0x24	; 36
    1084:	44 e7       	ldi	r20, 0x74	; 116
    1086:	5b e4       	ldi	r21, 0x4B	; 75
    1088:	42 d0       	rcall	.+132    	; 0x110e <__divsf3>
    108a:	a9 d0       	rcall	.+338    	; 0x11de <__fixsfsi>
    108c:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <ultrasonic_distance+0x1>
    1090:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <ultrasonic_distance>
    1094:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_distance>
    1098:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_distance+0x1>
    109c:	6a e3       	ldi	r22, 0x3A	; 58
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	c0 d1       	rcall	.+896    	; 0x1422 <__divmodhi4>
    10a2:	7f 93       	push	r23
    10a4:	6f 93       	push	r22
    10a6:	83 e4       	ldi	r24, 0x43	; 67
    10a8:	91 e0       	ldi	r25, 0x01	; 1
    10aa:	9f 93       	push	r25
    10ac:	8f 93       	push	r24
    10ae:	8c eb       	ldi	r24, 0xBC	; 188
    10b0:	97 e0       	ldi	r25, 0x07	; 7
    10b2:	9f 93       	push	r25
    10b4:	8f 93       	push	r24
    10b6:	fe d1       	rcall	.+1020   	; 0x14b4 <sprintf>
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	ff 91       	pop	r31
    10c6:	ef 91       	pop	r30
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	0b be       	out	0x3b, r0	; 59
    10e0:	0f 90       	pop	r0
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	0f 90       	pop	r0
    10e6:	1f 90       	pop	r1
    10e8:	18 95       	reti

000010ea <init_ultrasonic>:
    10ea:	e4 e6       	ldi	r30, 0x64	; 100
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	80 61       	ori	r24, 0x10	; 16
    10f2:	80 83       	st	Z, r24
    10f4:	82 b1       	in	r24, 0x02	; 2
    10f6:	8f 7e       	andi	r24, 0xEF	; 239
    10f8:	82 b9       	out	0x02, r24	; 2
    10fa:	8a b7       	in	r24, 0x3a	; 58
    10fc:	81 60       	ori	r24, 0x01	; 1
    10fe:	8a bf       	out	0x3a, r24	; 58
    1100:	8e b5       	in	r24, 0x2e	; 46
    1102:	85 60       	ori	r24, 0x05	; 5
    1104:	8e bd       	out	0x2e, r24	; 46
    1106:	89 b7       	in	r24, 0x39	; 57
    1108:	80 61       	ori	r24, 0x10	; 16
    110a:	89 bf       	out	0x39, r24	; 57
    110c:	08 95       	ret

0000110e <__divsf3>:
    110e:	0c d0       	rcall	.+24     	; 0x1128 <__divsf3x>
    1110:	eb c0       	rjmp	.+470    	; 0x12e8 <__fp_round>
    1112:	e3 d0       	rcall	.+454    	; 0x12da <__fp_pscB>
    1114:	40 f0       	brcs	.+16     	; 0x1126 <__divsf3+0x18>
    1116:	da d0       	rcall	.+436    	; 0x12cc <__fp_pscA>
    1118:	30 f0       	brcs	.+12     	; 0x1126 <__divsf3+0x18>
    111a:	21 f4       	brne	.+8      	; 0x1124 <__divsf3+0x16>
    111c:	5f 3f       	cpi	r21, 0xFF	; 255
    111e:	19 f0       	breq	.+6      	; 0x1126 <__divsf3+0x18>
    1120:	cc c0       	rjmp	.+408    	; 0x12ba <__fp_inf>
    1122:	51 11       	cpse	r21, r1
    1124:	15 c1       	rjmp	.+554    	; 0x1350 <__fp_szero>
    1126:	cf c0       	rjmp	.+414    	; 0x12c6 <__fp_nan>

00001128 <__divsf3x>:
    1128:	f0 d0       	rcall	.+480    	; 0x130a <__fp_split3>
    112a:	98 f3       	brcs	.-26     	; 0x1112 <__divsf3+0x4>

0000112c <__divsf3_pse>:
    112c:	99 23       	and	r25, r25
    112e:	c9 f3       	breq	.-14     	; 0x1122 <__divsf3+0x14>
    1130:	55 23       	and	r21, r21
    1132:	b1 f3       	breq	.-20     	; 0x1120 <__divsf3+0x12>
    1134:	95 1b       	sub	r25, r21
    1136:	55 0b       	sbc	r21, r21
    1138:	bb 27       	eor	r27, r27
    113a:	aa 27       	eor	r26, r26
    113c:	62 17       	cp	r22, r18
    113e:	73 07       	cpc	r23, r19
    1140:	84 07       	cpc	r24, r20
    1142:	38 f0       	brcs	.+14     	; 0x1152 <__divsf3_pse+0x26>
    1144:	9f 5f       	subi	r25, 0xFF	; 255
    1146:	5f 4f       	sbci	r21, 0xFF	; 255
    1148:	22 0f       	add	r18, r18
    114a:	33 1f       	adc	r19, r19
    114c:	44 1f       	adc	r20, r20
    114e:	aa 1f       	adc	r26, r26
    1150:	a9 f3       	breq	.-22     	; 0x113c <__divsf3_pse+0x10>
    1152:	33 d0       	rcall	.+102    	; 0x11ba <__divsf3_pse+0x8e>
    1154:	0e 2e       	mov	r0, r30
    1156:	3a f0       	brmi	.+14     	; 0x1166 <__divsf3_pse+0x3a>
    1158:	e0 e8       	ldi	r30, 0x80	; 128
    115a:	30 d0       	rcall	.+96     	; 0x11bc <__divsf3_pse+0x90>
    115c:	91 50       	subi	r25, 0x01	; 1
    115e:	50 40       	sbci	r21, 0x00	; 0
    1160:	e6 95       	lsr	r30
    1162:	00 1c       	adc	r0, r0
    1164:	ca f7       	brpl	.-14     	; 0x1158 <__divsf3_pse+0x2c>
    1166:	29 d0       	rcall	.+82     	; 0x11ba <__divsf3_pse+0x8e>
    1168:	fe 2f       	mov	r31, r30
    116a:	27 d0       	rcall	.+78     	; 0x11ba <__divsf3_pse+0x8e>
    116c:	66 0f       	add	r22, r22
    116e:	77 1f       	adc	r23, r23
    1170:	88 1f       	adc	r24, r24
    1172:	bb 1f       	adc	r27, r27
    1174:	26 17       	cp	r18, r22
    1176:	37 07       	cpc	r19, r23
    1178:	48 07       	cpc	r20, r24
    117a:	ab 07       	cpc	r26, r27
    117c:	b0 e8       	ldi	r27, 0x80	; 128
    117e:	09 f0       	breq	.+2      	; 0x1182 <__divsf3_pse+0x56>
    1180:	bb 0b       	sbc	r27, r27
    1182:	80 2d       	mov	r24, r0
    1184:	bf 01       	movw	r22, r30
    1186:	ff 27       	eor	r31, r31
    1188:	93 58       	subi	r25, 0x83	; 131
    118a:	5f 4f       	sbci	r21, 0xFF	; 255
    118c:	2a f0       	brmi	.+10     	; 0x1198 <__divsf3_pse+0x6c>
    118e:	9e 3f       	cpi	r25, 0xFE	; 254
    1190:	51 05       	cpc	r21, r1
    1192:	68 f0       	brcs	.+26     	; 0x11ae <__divsf3_pse+0x82>
    1194:	92 c0       	rjmp	.+292    	; 0x12ba <__fp_inf>
    1196:	dc c0       	rjmp	.+440    	; 0x1350 <__fp_szero>
    1198:	5f 3f       	cpi	r21, 0xFF	; 255
    119a:	ec f3       	brlt	.-6      	; 0x1196 <__divsf3_pse+0x6a>
    119c:	98 3e       	cpi	r25, 0xE8	; 232
    119e:	dc f3       	brlt	.-10     	; 0x1196 <__divsf3_pse+0x6a>
    11a0:	86 95       	lsr	r24
    11a2:	77 95       	ror	r23
    11a4:	67 95       	ror	r22
    11a6:	b7 95       	ror	r27
    11a8:	f7 95       	ror	r31
    11aa:	9f 5f       	subi	r25, 0xFF	; 255
    11ac:	c9 f7       	brne	.-14     	; 0x11a0 <__divsf3_pse+0x74>
    11ae:	88 0f       	add	r24, r24
    11b0:	91 1d       	adc	r25, r1
    11b2:	96 95       	lsr	r25
    11b4:	87 95       	ror	r24
    11b6:	97 f9       	bld	r25, 7
    11b8:	08 95       	ret
    11ba:	e1 e0       	ldi	r30, 0x01	; 1
    11bc:	66 0f       	add	r22, r22
    11be:	77 1f       	adc	r23, r23
    11c0:	88 1f       	adc	r24, r24
    11c2:	bb 1f       	adc	r27, r27
    11c4:	62 17       	cp	r22, r18
    11c6:	73 07       	cpc	r23, r19
    11c8:	84 07       	cpc	r24, r20
    11ca:	ba 07       	cpc	r27, r26
    11cc:	20 f0       	brcs	.+8      	; 0x11d6 <__divsf3_pse+0xaa>
    11ce:	62 1b       	sub	r22, r18
    11d0:	73 0b       	sbc	r23, r19
    11d2:	84 0b       	sbc	r24, r20
    11d4:	ba 0b       	sbc	r27, r26
    11d6:	ee 1f       	adc	r30, r30
    11d8:	88 f7       	brcc	.-30     	; 0x11bc <__divsf3_pse+0x90>
    11da:	e0 95       	com	r30
    11dc:	08 95       	ret

000011de <__fixsfsi>:
    11de:	04 d0       	rcall	.+8      	; 0x11e8 <__fixunssfsi>
    11e0:	68 94       	set
    11e2:	b1 11       	cpse	r27, r1
    11e4:	b5 c0       	rjmp	.+362    	; 0x1350 <__fp_szero>
    11e6:	08 95       	ret

000011e8 <__fixunssfsi>:
    11e8:	98 d0       	rcall	.+304    	; 0x131a <__fp_splitA>
    11ea:	88 f0       	brcs	.+34     	; 0x120e <__fixunssfsi+0x26>
    11ec:	9f 57       	subi	r25, 0x7F	; 127
    11ee:	90 f0       	brcs	.+36     	; 0x1214 <__fixunssfsi+0x2c>
    11f0:	b9 2f       	mov	r27, r25
    11f2:	99 27       	eor	r25, r25
    11f4:	b7 51       	subi	r27, 0x17	; 23
    11f6:	a0 f0       	brcs	.+40     	; 0x1220 <__fixunssfsi+0x38>
    11f8:	d1 f0       	breq	.+52     	; 0x122e <__fixunssfsi+0x46>
    11fa:	66 0f       	add	r22, r22
    11fc:	77 1f       	adc	r23, r23
    11fe:	88 1f       	adc	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	1a f0       	brmi	.+6      	; 0x120a <__fixunssfsi+0x22>
    1204:	ba 95       	dec	r27
    1206:	c9 f7       	brne	.-14     	; 0x11fa <__fixunssfsi+0x12>
    1208:	12 c0       	rjmp	.+36     	; 0x122e <__fixunssfsi+0x46>
    120a:	b1 30       	cpi	r27, 0x01	; 1
    120c:	81 f0       	breq	.+32     	; 0x122e <__fixunssfsi+0x46>
    120e:	9f d0       	rcall	.+318    	; 0x134e <__fp_zero>
    1210:	b1 e0       	ldi	r27, 0x01	; 1
    1212:	08 95       	ret
    1214:	9c c0       	rjmp	.+312    	; 0x134e <__fp_zero>
    1216:	67 2f       	mov	r22, r23
    1218:	78 2f       	mov	r23, r24
    121a:	88 27       	eor	r24, r24
    121c:	b8 5f       	subi	r27, 0xF8	; 248
    121e:	39 f0       	breq	.+14     	; 0x122e <__fixunssfsi+0x46>
    1220:	b9 3f       	cpi	r27, 0xF9	; 249
    1222:	cc f3       	brlt	.-14     	; 0x1216 <__fixunssfsi+0x2e>
    1224:	86 95       	lsr	r24
    1226:	77 95       	ror	r23
    1228:	67 95       	ror	r22
    122a:	b3 95       	inc	r27
    122c:	d9 f7       	brne	.-10     	; 0x1224 <__fixunssfsi+0x3c>
    122e:	3e f4       	brtc	.+14     	; 0x123e <__fixunssfsi+0x56>
    1230:	90 95       	com	r25
    1232:	80 95       	com	r24
    1234:	70 95       	com	r23
    1236:	61 95       	neg	r22
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	8f 4f       	sbci	r24, 0xFF	; 255
    123c:	9f 4f       	sbci	r25, 0xFF	; 255
    123e:	08 95       	ret

00001240 <__floatunsisf>:
    1240:	e8 94       	clt
    1242:	09 c0       	rjmp	.+18     	; 0x1256 <__floatsisf+0x12>

00001244 <__floatsisf>:
    1244:	97 fb       	bst	r25, 7
    1246:	3e f4       	brtc	.+14     	; 0x1256 <__floatsisf+0x12>
    1248:	90 95       	com	r25
    124a:	80 95       	com	r24
    124c:	70 95       	com	r23
    124e:	61 95       	neg	r22
    1250:	7f 4f       	sbci	r23, 0xFF	; 255
    1252:	8f 4f       	sbci	r24, 0xFF	; 255
    1254:	9f 4f       	sbci	r25, 0xFF	; 255
    1256:	99 23       	and	r25, r25
    1258:	a9 f0       	breq	.+42     	; 0x1284 <__floatsisf+0x40>
    125a:	f9 2f       	mov	r31, r25
    125c:	96 e9       	ldi	r25, 0x96	; 150
    125e:	bb 27       	eor	r27, r27
    1260:	93 95       	inc	r25
    1262:	f6 95       	lsr	r31
    1264:	87 95       	ror	r24
    1266:	77 95       	ror	r23
    1268:	67 95       	ror	r22
    126a:	b7 95       	ror	r27
    126c:	f1 11       	cpse	r31, r1
    126e:	f8 cf       	rjmp	.-16     	; 0x1260 <__floatsisf+0x1c>
    1270:	fa f4       	brpl	.+62     	; 0x12b0 <__floatsisf+0x6c>
    1272:	bb 0f       	add	r27, r27
    1274:	11 f4       	brne	.+4      	; 0x127a <__floatsisf+0x36>
    1276:	60 ff       	sbrs	r22, 0
    1278:	1b c0       	rjmp	.+54     	; 0x12b0 <__floatsisf+0x6c>
    127a:	6f 5f       	subi	r22, 0xFF	; 255
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	8f 4f       	sbci	r24, 0xFF	; 255
    1280:	9f 4f       	sbci	r25, 0xFF	; 255
    1282:	16 c0       	rjmp	.+44     	; 0x12b0 <__floatsisf+0x6c>
    1284:	88 23       	and	r24, r24
    1286:	11 f0       	breq	.+4      	; 0x128c <__floatsisf+0x48>
    1288:	96 e9       	ldi	r25, 0x96	; 150
    128a:	11 c0       	rjmp	.+34     	; 0x12ae <__floatsisf+0x6a>
    128c:	77 23       	and	r23, r23
    128e:	21 f0       	breq	.+8      	; 0x1298 <__floatsisf+0x54>
    1290:	9e e8       	ldi	r25, 0x8E	; 142
    1292:	87 2f       	mov	r24, r23
    1294:	76 2f       	mov	r23, r22
    1296:	05 c0       	rjmp	.+10     	; 0x12a2 <__floatsisf+0x5e>
    1298:	66 23       	and	r22, r22
    129a:	71 f0       	breq	.+28     	; 0x12b8 <__floatsisf+0x74>
    129c:	96 e8       	ldi	r25, 0x86	; 134
    129e:	86 2f       	mov	r24, r22
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	2a f0       	brmi	.+10     	; 0x12b0 <__floatsisf+0x6c>
    12a6:	9a 95       	dec	r25
    12a8:	66 0f       	add	r22, r22
    12aa:	77 1f       	adc	r23, r23
    12ac:	88 1f       	adc	r24, r24
    12ae:	da f7       	brpl	.-10     	; 0x12a6 <__floatsisf+0x62>
    12b0:	88 0f       	add	r24, r24
    12b2:	96 95       	lsr	r25
    12b4:	87 95       	ror	r24
    12b6:	97 f9       	bld	r25, 7
    12b8:	08 95       	ret

000012ba <__fp_inf>:
    12ba:	97 f9       	bld	r25, 7
    12bc:	9f 67       	ori	r25, 0x7F	; 127
    12be:	80 e8       	ldi	r24, 0x80	; 128
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	08 95       	ret

000012c6 <__fp_nan>:
    12c6:	9f ef       	ldi	r25, 0xFF	; 255
    12c8:	80 ec       	ldi	r24, 0xC0	; 192
    12ca:	08 95       	ret

000012cc <__fp_pscA>:
    12cc:	00 24       	eor	r0, r0
    12ce:	0a 94       	dec	r0
    12d0:	16 16       	cp	r1, r22
    12d2:	17 06       	cpc	r1, r23
    12d4:	18 06       	cpc	r1, r24
    12d6:	09 06       	cpc	r0, r25
    12d8:	08 95       	ret

000012da <__fp_pscB>:
    12da:	00 24       	eor	r0, r0
    12dc:	0a 94       	dec	r0
    12de:	12 16       	cp	r1, r18
    12e0:	13 06       	cpc	r1, r19
    12e2:	14 06       	cpc	r1, r20
    12e4:	05 06       	cpc	r0, r21
    12e6:	08 95       	ret

000012e8 <__fp_round>:
    12e8:	09 2e       	mov	r0, r25
    12ea:	03 94       	inc	r0
    12ec:	00 0c       	add	r0, r0
    12ee:	11 f4       	brne	.+4      	; 0x12f4 <__fp_round+0xc>
    12f0:	88 23       	and	r24, r24
    12f2:	52 f0       	brmi	.+20     	; 0x1308 <__fp_round+0x20>
    12f4:	bb 0f       	add	r27, r27
    12f6:	40 f4       	brcc	.+16     	; 0x1308 <__fp_round+0x20>
    12f8:	bf 2b       	or	r27, r31
    12fa:	11 f4       	brne	.+4      	; 0x1300 <__fp_round+0x18>
    12fc:	60 ff       	sbrs	r22, 0
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <__fp_round+0x20>
    1300:	6f 5f       	subi	r22, 0xFF	; 255
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	8f 4f       	sbci	r24, 0xFF	; 255
    1306:	9f 4f       	sbci	r25, 0xFF	; 255
    1308:	08 95       	ret

0000130a <__fp_split3>:
    130a:	57 fd       	sbrc	r21, 7
    130c:	90 58       	subi	r25, 0x80	; 128
    130e:	44 0f       	add	r20, r20
    1310:	55 1f       	adc	r21, r21
    1312:	59 f0       	breq	.+22     	; 0x132a <__fp_splitA+0x10>
    1314:	5f 3f       	cpi	r21, 0xFF	; 255
    1316:	71 f0       	breq	.+28     	; 0x1334 <__fp_splitA+0x1a>
    1318:	47 95       	ror	r20

0000131a <__fp_splitA>:
    131a:	88 0f       	add	r24, r24
    131c:	97 fb       	bst	r25, 7
    131e:	99 1f       	adc	r25, r25
    1320:	61 f0       	breq	.+24     	; 0x133a <__fp_splitA+0x20>
    1322:	9f 3f       	cpi	r25, 0xFF	; 255
    1324:	79 f0       	breq	.+30     	; 0x1344 <__fp_splitA+0x2a>
    1326:	87 95       	ror	r24
    1328:	08 95       	ret
    132a:	12 16       	cp	r1, r18
    132c:	13 06       	cpc	r1, r19
    132e:	14 06       	cpc	r1, r20
    1330:	55 1f       	adc	r21, r21
    1332:	f2 cf       	rjmp	.-28     	; 0x1318 <__fp_split3+0xe>
    1334:	46 95       	lsr	r20
    1336:	f1 df       	rcall	.-30     	; 0x131a <__fp_splitA>
    1338:	08 c0       	rjmp	.+16     	; 0x134a <__fp_splitA+0x30>
    133a:	16 16       	cp	r1, r22
    133c:	17 06       	cpc	r1, r23
    133e:	18 06       	cpc	r1, r24
    1340:	99 1f       	adc	r25, r25
    1342:	f1 cf       	rjmp	.-30     	; 0x1326 <__fp_splitA+0xc>
    1344:	86 95       	lsr	r24
    1346:	71 05       	cpc	r23, r1
    1348:	61 05       	cpc	r22, r1
    134a:	08 94       	sec
    134c:	08 95       	ret

0000134e <__fp_zero>:
    134e:	e8 94       	clt

00001350 <__fp_szero>:
    1350:	bb 27       	eor	r27, r27
    1352:	66 27       	eor	r22, r22
    1354:	77 27       	eor	r23, r23
    1356:	cb 01       	movw	r24, r22
    1358:	97 f9       	bld	r25, 7
    135a:	08 95       	ret

0000135c <__mulsf3>:
    135c:	0b d0       	rcall	.+22     	; 0x1374 <__mulsf3x>
    135e:	c4 cf       	rjmp	.-120    	; 0x12e8 <__fp_round>
    1360:	b5 df       	rcall	.-150    	; 0x12cc <__fp_pscA>
    1362:	28 f0       	brcs	.+10     	; 0x136e <__mulsf3+0x12>
    1364:	ba df       	rcall	.-140    	; 0x12da <__fp_pscB>
    1366:	18 f0       	brcs	.+6      	; 0x136e <__mulsf3+0x12>
    1368:	95 23       	and	r25, r21
    136a:	09 f0       	breq	.+2      	; 0x136e <__mulsf3+0x12>
    136c:	a6 cf       	rjmp	.-180    	; 0x12ba <__fp_inf>
    136e:	ab cf       	rjmp	.-170    	; 0x12c6 <__fp_nan>
    1370:	11 24       	eor	r1, r1
    1372:	ee cf       	rjmp	.-36     	; 0x1350 <__fp_szero>

00001374 <__mulsf3x>:
    1374:	ca df       	rcall	.-108    	; 0x130a <__fp_split3>
    1376:	a0 f3       	brcs	.-24     	; 0x1360 <__mulsf3+0x4>

00001378 <__mulsf3_pse>:
    1378:	95 9f       	mul	r25, r21
    137a:	d1 f3       	breq	.-12     	; 0x1370 <__mulsf3+0x14>
    137c:	95 0f       	add	r25, r21
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	55 1f       	adc	r21, r21
    1382:	62 9f       	mul	r22, r18
    1384:	f0 01       	movw	r30, r0
    1386:	72 9f       	mul	r23, r18
    1388:	bb 27       	eor	r27, r27
    138a:	f0 0d       	add	r31, r0
    138c:	b1 1d       	adc	r27, r1
    138e:	63 9f       	mul	r22, r19
    1390:	aa 27       	eor	r26, r26
    1392:	f0 0d       	add	r31, r0
    1394:	b1 1d       	adc	r27, r1
    1396:	aa 1f       	adc	r26, r26
    1398:	64 9f       	mul	r22, r20
    139a:	66 27       	eor	r22, r22
    139c:	b0 0d       	add	r27, r0
    139e:	a1 1d       	adc	r26, r1
    13a0:	66 1f       	adc	r22, r22
    13a2:	82 9f       	mul	r24, r18
    13a4:	22 27       	eor	r18, r18
    13a6:	b0 0d       	add	r27, r0
    13a8:	a1 1d       	adc	r26, r1
    13aa:	62 1f       	adc	r22, r18
    13ac:	73 9f       	mul	r23, r19
    13ae:	b0 0d       	add	r27, r0
    13b0:	a1 1d       	adc	r26, r1
    13b2:	62 1f       	adc	r22, r18
    13b4:	83 9f       	mul	r24, r19
    13b6:	a0 0d       	add	r26, r0
    13b8:	61 1d       	adc	r22, r1
    13ba:	22 1f       	adc	r18, r18
    13bc:	74 9f       	mul	r23, r20
    13be:	33 27       	eor	r19, r19
    13c0:	a0 0d       	add	r26, r0
    13c2:	61 1d       	adc	r22, r1
    13c4:	23 1f       	adc	r18, r19
    13c6:	84 9f       	mul	r24, r20
    13c8:	60 0d       	add	r22, r0
    13ca:	21 1d       	adc	r18, r1
    13cc:	82 2f       	mov	r24, r18
    13ce:	76 2f       	mov	r23, r22
    13d0:	6a 2f       	mov	r22, r26
    13d2:	11 24       	eor	r1, r1
    13d4:	9f 57       	subi	r25, 0x7F	; 127
    13d6:	50 40       	sbci	r21, 0x00	; 0
    13d8:	8a f0       	brmi	.+34     	; 0x13fc <__mulsf3_pse+0x84>
    13da:	e1 f0       	breq	.+56     	; 0x1414 <__mulsf3_pse+0x9c>
    13dc:	88 23       	and	r24, r24
    13de:	4a f0       	brmi	.+18     	; 0x13f2 <__mulsf3_pse+0x7a>
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	bb 1f       	adc	r27, r27
    13e6:	66 1f       	adc	r22, r22
    13e8:	77 1f       	adc	r23, r23
    13ea:	88 1f       	adc	r24, r24
    13ec:	91 50       	subi	r25, 0x01	; 1
    13ee:	50 40       	sbci	r21, 0x00	; 0
    13f0:	a9 f7       	brne	.-22     	; 0x13dc <__mulsf3_pse+0x64>
    13f2:	9e 3f       	cpi	r25, 0xFE	; 254
    13f4:	51 05       	cpc	r21, r1
    13f6:	70 f0       	brcs	.+28     	; 0x1414 <__mulsf3_pse+0x9c>
    13f8:	60 cf       	rjmp	.-320    	; 0x12ba <__fp_inf>
    13fa:	aa cf       	rjmp	.-172    	; 0x1350 <__fp_szero>
    13fc:	5f 3f       	cpi	r21, 0xFF	; 255
    13fe:	ec f3       	brlt	.-6      	; 0x13fa <__mulsf3_pse+0x82>
    1400:	98 3e       	cpi	r25, 0xE8	; 232
    1402:	dc f3       	brlt	.-10     	; 0x13fa <__mulsf3_pse+0x82>
    1404:	86 95       	lsr	r24
    1406:	77 95       	ror	r23
    1408:	67 95       	ror	r22
    140a:	b7 95       	ror	r27
    140c:	f7 95       	ror	r31
    140e:	e7 95       	ror	r30
    1410:	9f 5f       	subi	r25, 0xFF	; 255
    1412:	c1 f7       	brne	.-16     	; 0x1404 <__mulsf3_pse+0x8c>
    1414:	fe 2b       	or	r31, r30
    1416:	88 0f       	add	r24, r24
    1418:	91 1d       	adc	r25, r1
    141a:	96 95       	lsr	r25
    141c:	87 95       	ror	r24
    141e:	97 f9       	bld	r25, 7
    1420:	08 95       	ret

00001422 <__divmodhi4>:
    1422:	97 fb       	bst	r25, 7
    1424:	07 2e       	mov	r0, r23
    1426:	16 f4       	brtc	.+4      	; 0x142c <__divmodhi4+0xa>
    1428:	00 94       	com	r0
    142a:	06 d0       	rcall	.+12     	; 0x1438 <__divmodhi4_neg1>
    142c:	77 fd       	sbrc	r23, 7
    142e:	08 d0       	rcall	.+16     	; 0x1440 <__divmodhi4_neg2>
    1430:	2d d0       	rcall	.+90     	; 0x148c <__udivmodhi4>
    1432:	07 fc       	sbrc	r0, 7
    1434:	05 d0       	rcall	.+10     	; 0x1440 <__divmodhi4_neg2>
    1436:	3e f4       	brtc	.+14     	; 0x1446 <__divmodhi4_exit>

00001438 <__divmodhi4_neg1>:
    1438:	90 95       	com	r25
    143a:	81 95       	neg	r24
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	08 95       	ret

00001440 <__divmodhi4_neg2>:
    1440:	70 95       	com	r23
    1442:	61 95       	neg	r22
    1444:	7f 4f       	sbci	r23, 0xFF	; 255

00001446 <__divmodhi4_exit>:
    1446:	08 95       	ret

00001448 <__udivmodsi4>:
    1448:	a1 e2       	ldi	r26, 0x21	; 33
    144a:	1a 2e       	mov	r1, r26
    144c:	aa 1b       	sub	r26, r26
    144e:	bb 1b       	sub	r27, r27
    1450:	fd 01       	movw	r30, r26
    1452:	0d c0       	rjmp	.+26     	; 0x146e <__udivmodsi4_ep>

00001454 <__udivmodsi4_loop>:
    1454:	aa 1f       	adc	r26, r26
    1456:	bb 1f       	adc	r27, r27
    1458:	ee 1f       	adc	r30, r30
    145a:	ff 1f       	adc	r31, r31
    145c:	a2 17       	cp	r26, r18
    145e:	b3 07       	cpc	r27, r19
    1460:	e4 07       	cpc	r30, r20
    1462:	f5 07       	cpc	r31, r21
    1464:	20 f0       	brcs	.+8      	; 0x146e <__udivmodsi4_ep>
    1466:	a2 1b       	sub	r26, r18
    1468:	b3 0b       	sbc	r27, r19
    146a:	e4 0b       	sbc	r30, r20
    146c:	f5 0b       	sbc	r31, r21

0000146e <__udivmodsi4_ep>:
    146e:	66 1f       	adc	r22, r22
    1470:	77 1f       	adc	r23, r23
    1472:	88 1f       	adc	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	1a 94       	dec	r1
    1478:	69 f7       	brne	.-38     	; 0x1454 <__udivmodsi4_loop>
    147a:	60 95       	com	r22
    147c:	70 95       	com	r23
    147e:	80 95       	com	r24
    1480:	90 95       	com	r25
    1482:	9b 01       	movw	r18, r22
    1484:	ac 01       	movw	r20, r24
    1486:	bd 01       	movw	r22, r26
    1488:	cf 01       	movw	r24, r30
    148a:	08 95       	ret

0000148c <__udivmodhi4>:
    148c:	aa 1b       	sub	r26, r26
    148e:	bb 1b       	sub	r27, r27
    1490:	51 e1       	ldi	r21, 0x11	; 17
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <__udivmodhi4_ep>

00001494 <__udivmodhi4_loop>:
    1494:	aa 1f       	adc	r26, r26
    1496:	bb 1f       	adc	r27, r27
    1498:	a6 17       	cp	r26, r22
    149a:	b7 07       	cpc	r27, r23
    149c:	10 f0       	brcs	.+4      	; 0x14a2 <__udivmodhi4_ep>
    149e:	a6 1b       	sub	r26, r22
    14a0:	b7 0b       	sbc	r27, r23

000014a2 <__udivmodhi4_ep>:
    14a2:	88 1f       	adc	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	5a 95       	dec	r21
    14a8:	a9 f7       	brne	.-22     	; 0x1494 <__udivmodhi4_loop>
    14aa:	80 95       	com	r24
    14ac:	90 95       	com	r25
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	08 95       	ret

000014b4 <sprintf>:
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	2e 97       	sbiw	r28, 0x0e	; 14
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	0d 89       	ldd	r16, Y+21	; 0x15
    14ce:	1e 89       	ldd	r17, Y+22	; 0x16
    14d0:	86 e0       	ldi	r24, 0x06	; 6
    14d2:	8c 83       	std	Y+4, r24	; 0x04
    14d4:	1a 83       	std	Y+2, r17	; 0x02
    14d6:	09 83       	std	Y+1, r16	; 0x01
    14d8:	8f ef       	ldi	r24, 0xFF	; 255
    14da:	9f e7       	ldi	r25, 0x7F	; 127
    14dc:	9e 83       	std	Y+6, r25	; 0x06
    14de:	8d 83       	std	Y+5, r24	; 0x05
    14e0:	ae 01       	movw	r20, r28
    14e2:	47 5e       	subi	r20, 0xE7	; 231
    14e4:	5f 4f       	sbci	r21, 0xFF	; 255
    14e6:	6f 89       	ldd	r22, Y+23	; 0x17
    14e8:	78 8d       	ldd	r23, Y+24	; 0x18
    14ea:	ce 01       	movw	r24, r28
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	10 d0       	rcall	.+32     	; 0x1510 <vfprintf>
    14f0:	ef 81       	ldd	r30, Y+7	; 0x07
    14f2:	f8 85       	ldd	r31, Y+8	; 0x08
    14f4:	e0 0f       	add	r30, r16
    14f6:	f1 1f       	adc	r31, r17
    14f8:	10 82       	st	Z, r1
    14fa:	2e 96       	adiw	r28, 0x0e	; 14
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	08 95       	ret

00001510 <vfprintf>:
    1510:	2f 92       	push	r2
    1512:	3f 92       	push	r3
    1514:	4f 92       	push	r4
    1516:	5f 92       	push	r5
    1518:	6f 92       	push	r6
    151a:	7f 92       	push	r7
    151c:	8f 92       	push	r8
    151e:	9f 92       	push	r9
    1520:	af 92       	push	r10
    1522:	bf 92       	push	r11
    1524:	cf 92       	push	r12
    1526:	df 92       	push	r13
    1528:	ef 92       	push	r14
    152a:	ff 92       	push	r15
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	2b 97       	sbiw	r28, 0x0b	; 11
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	6c 01       	movw	r12, r24
    1546:	7b 01       	movw	r14, r22
    1548:	8a 01       	movw	r16, r20
    154a:	fc 01       	movw	r30, r24
    154c:	17 82       	std	Z+7, r1	; 0x07
    154e:	16 82       	std	Z+6, r1	; 0x06
    1550:	83 81       	ldd	r24, Z+3	; 0x03
    1552:	81 ff       	sbrs	r24, 1
    1554:	bf c1       	rjmp	.+894    	; 0x18d4 <vfprintf+0x3c4>
    1556:	ce 01       	movw	r24, r28
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	3c 01       	movw	r6, r24
    155c:	f6 01       	movw	r30, r12
    155e:	93 81       	ldd	r25, Z+3	; 0x03
    1560:	f7 01       	movw	r30, r14
    1562:	93 fd       	sbrc	r25, 3
    1564:	85 91       	lpm	r24, Z+
    1566:	93 ff       	sbrs	r25, 3
    1568:	81 91       	ld	r24, Z+
    156a:	7f 01       	movw	r14, r30
    156c:	88 23       	and	r24, r24
    156e:	09 f4       	brne	.+2      	; 0x1572 <vfprintf+0x62>
    1570:	ad c1       	rjmp	.+858    	; 0x18cc <vfprintf+0x3bc>
    1572:	85 32       	cpi	r24, 0x25	; 37
    1574:	39 f4       	brne	.+14     	; 0x1584 <vfprintf+0x74>
    1576:	93 fd       	sbrc	r25, 3
    1578:	85 91       	lpm	r24, Z+
    157a:	93 ff       	sbrs	r25, 3
    157c:	81 91       	ld	r24, Z+
    157e:	7f 01       	movw	r14, r30
    1580:	85 32       	cpi	r24, 0x25	; 37
    1582:	21 f4       	brne	.+8      	; 0x158c <vfprintf+0x7c>
    1584:	b6 01       	movw	r22, r12
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	d6 d1       	rcall	.+940    	; 0x1936 <fputc>
    158a:	e8 cf       	rjmp	.-48     	; 0x155c <vfprintf+0x4c>
    158c:	91 2c       	mov	r9, r1
    158e:	21 2c       	mov	r2, r1
    1590:	31 2c       	mov	r3, r1
    1592:	ff e1       	ldi	r31, 0x1F	; 31
    1594:	f3 15       	cp	r31, r3
    1596:	d8 f0       	brcs	.+54     	; 0x15ce <vfprintf+0xbe>
    1598:	8b 32       	cpi	r24, 0x2B	; 43
    159a:	79 f0       	breq	.+30     	; 0x15ba <vfprintf+0xaa>
    159c:	38 f4       	brcc	.+14     	; 0x15ac <vfprintf+0x9c>
    159e:	80 32       	cpi	r24, 0x20	; 32
    15a0:	79 f0       	breq	.+30     	; 0x15c0 <vfprintf+0xb0>
    15a2:	83 32       	cpi	r24, 0x23	; 35
    15a4:	a1 f4       	brne	.+40     	; 0x15ce <vfprintf+0xbe>
    15a6:	23 2d       	mov	r18, r3
    15a8:	20 61       	ori	r18, 0x10	; 16
    15aa:	1d c0       	rjmp	.+58     	; 0x15e6 <vfprintf+0xd6>
    15ac:	8d 32       	cpi	r24, 0x2D	; 45
    15ae:	61 f0       	breq	.+24     	; 0x15c8 <vfprintf+0xb8>
    15b0:	80 33       	cpi	r24, 0x30	; 48
    15b2:	69 f4       	brne	.+26     	; 0x15ce <vfprintf+0xbe>
    15b4:	23 2d       	mov	r18, r3
    15b6:	21 60       	ori	r18, 0x01	; 1
    15b8:	16 c0       	rjmp	.+44     	; 0x15e6 <vfprintf+0xd6>
    15ba:	83 2d       	mov	r24, r3
    15bc:	82 60       	ori	r24, 0x02	; 2
    15be:	38 2e       	mov	r3, r24
    15c0:	e3 2d       	mov	r30, r3
    15c2:	e4 60       	ori	r30, 0x04	; 4
    15c4:	3e 2e       	mov	r3, r30
    15c6:	2a c0       	rjmp	.+84     	; 0x161c <vfprintf+0x10c>
    15c8:	f3 2d       	mov	r31, r3
    15ca:	f8 60       	ori	r31, 0x08	; 8
    15cc:	1d c0       	rjmp	.+58     	; 0x1608 <vfprintf+0xf8>
    15ce:	37 fc       	sbrc	r3, 7
    15d0:	2d c0       	rjmp	.+90     	; 0x162c <vfprintf+0x11c>
    15d2:	20 ed       	ldi	r18, 0xD0	; 208
    15d4:	28 0f       	add	r18, r24
    15d6:	2a 30       	cpi	r18, 0x0A	; 10
    15d8:	40 f0       	brcs	.+16     	; 0x15ea <vfprintf+0xda>
    15da:	8e 32       	cpi	r24, 0x2E	; 46
    15dc:	b9 f4       	brne	.+46     	; 0x160c <vfprintf+0xfc>
    15de:	36 fc       	sbrc	r3, 6
    15e0:	75 c1       	rjmp	.+746    	; 0x18cc <vfprintf+0x3bc>
    15e2:	23 2d       	mov	r18, r3
    15e4:	20 64       	ori	r18, 0x40	; 64
    15e6:	32 2e       	mov	r3, r18
    15e8:	19 c0       	rjmp	.+50     	; 0x161c <vfprintf+0x10c>
    15ea:	36 fe       	sbrs	r3, 6
    15ec:	06 c0       	rjmp	.+12     	; 0x15fa <vfprintf+0xea>
    15ee:	8a e0       	ldi	r24, 0x0A	; 10
    15f0:	98 9e       	mul	r9, r24
    15f2:	20 0d       	add	r18, r0
    15f4:	11 24       	eor	r1, r1
    15f6:	92 2e       	mov	r9, r18
    15f8:	11 c0       	rjmp	.+34     	; 0x161c <vfprintf+0x10c>
    15fa:	ea e0       	ldi	r30, 0x0A	; 10
    15fc:	2e 9e       	mul	r2, r30
    15fe:	20 0d       	add	r18, r0
    1600:	11 24       	eor	r1, r1
    1602:	22 2e       	mov	r2, r18
    1604:	f3 2d       	mov	r31, r3
    1606:	f0 62       	ori	r31, 0x20	; 32
    1608:	3f 2e       	mov	r3, r31
    160a:	08 c0       	rjmp	.+16     	; 0x161c <vfprintf+0x10c>
    160c:	8c 36       	cpi	r24, 0x6C	; 108
    160e:	21 f4       	brne	.+8      	; 0x1618 <vfprintf+0x108>
    1610:	83 2d       	mov	r24, r3
    1612:	80 68       	ori	r24, 0x80	; 128
    1614:	38 2e       	mov	r3, r24
    1616:	02 c0       	rjmp	.+4      	; 0x161c <vfprintf+0x10c>
    1618:	88 36       	cpi	r24, 0x68	; 104
    161a:	41 f4       	brne	.+16     	; 0x162c <vfprintf+0x11c>
    161c:	f7 01       	movw	r30, r14
    161e:	93 fd       	sbrc	r25, 3
    1620:	85 91       	lpm	r24, Z+
    1622:	93 ff       	sbrs	r25, 3
    1624:	81 91       	ld	r24, Z+
    1626:	7f 01       	movw	r14, r30
    1628:	81 11       	cpse	r24, r1
    162a:	b3 cf       	rjmp	.-154    	; 0x1592 <vfprintf+0x82>
    162c:	98 2f       	mov	r25, r24
    162e:	9f 7d       	andi	r25, 0xDF	; 223
    1630:	95 54       	subi	r25, 0x45	; 69
    1632:	93 30       	cpi	r25, 0x03	; 3
    1634:	28 f4       	brcc	.+10     	; 0x1640 <vfprintf+0x130>
    1636:	0c 5f       	subi	r16, 0xFC	; 252
    1638:	1f 4f       	sbci	r17, 0xFF	; 255
    163a:	9f e3       	ldi	r25, 0x3F	; 63
    163c:	99 83       	std	Y+1, r25	; 0x01
    163e:	0d c0       	rjmp	.+26     	; 0x165a <vfprintf+0x14a>
    1640:	83 36       	cpi	r24, 0x63	; 99
    1642:	31 f0       	breq	.+12     	; 0x1650 <vfprintf+0x140>
    1644:	83 37       	cpi	r24, 0x73	; 115
    1646:	71 f0       	breq	.+28     	; 0x1664 <vfprintf+0x154>
    1648:	83 35       	cpi	r24, 0x53	; 83
    164a:	09 f0       	breq	.+2      	; 0x164e <vfprintf+0x13e>
    164c:	55 c0       	rjmp	.+170    	; 0x16f8 <vfprintf+0x1e8>
    164e:	20 c0       	rjmp	.+64     	; 0x1690 <vfprintf+0x180>
    1650:	f8 01       	movw	r30, r16
    1652:	80 81       	ld	r24, Z
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	0e 5f       	subi	r16, 0xFE	; 254
    1658:	1f 4f       	sbci	r17, 0xFF	; 255
    165a:	88 24       	eor	r8, r8
    165c:	83 94       	inc	r8
    165e:	91 2c       	mov	r9, r1
    1660:	53 01       	movw	r10, r6
    1662:	12 c0       	rjmp	.+36     	; 0x1688 <vfprintf+0x178>
    1664:	28 01       	movw	r4, r16
    1666:	f2 e0       	ldi	r31, 0x02	; 2
    1668:	4f 0e       	add	r4, r31
    166a:	51 1c       	adc	r5, r1
    166c:	f8 01       	movw	r30, r16
    166e:	a0 80       	ld	r10, Z
    1670:	b1 80       	ldd	r11, Z+1	; 0x01
    1672:	36 fe       	sbrs	r3, 6
    1674:	03 c0       	rjmp	.+6      	; 0x167c <vfprintf+0x16c>
    1676:	69 2d       	mov	r22, r9
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <vfprintf+0x170>
    167c:	6f ef       	ldi	r22, 0xFF	; 255
    167e:	7f ef       	ldi	r23, 0xFF	; 255
    1680:	c5 01       	movw	r24, r10
    1682:	4e d1       	rcall	.+668    	; 0x1920 <strnlen>
    1684:	4c 01       	movw	r8, r24
    1686:	82 01       	movw	r16, r4
    1688:	f3 2d       	mov	r31, r3
    168a:	ff 77       	andi	r31, 0x7F	; 127
    168c:	3f 2e       	mov	r3, r31
    168e:	15 c0       	rjmp	.+42     	; 0x16ba <vfprintf+0x1aa>
    1690:	28 01       	movw	r4, r16
    1692:	22 e0       	ldi	r18, 0x02	; 2
    1694:	42 0e       	add	r4, r18
    1696:	51 1c       	adc	r5, r1
    1698:	f8 01       	movw	r30, r16
    169a:	a0 80       	ld	r10, Z
    169c:	b1 80       	ldd	r11, Z+1	; 0x01
    169e:	36 fe       	sbrs	r3, 6
    16a0:	03 c0       	rjmp	.+6      	; 0x16a8 <vfprintf+0x198>
    16a2:	69 2d       	mov	r22, r9
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <vfprintf+0x19c>
    16a8:	6f ef       	ldi	r22, 0xFF	; 255
    16aa:	7f ef       	ldi	r23, 0xFF	; 255
    16ac:	c5 01       	movw	r24, r10
    16ae:	2d d1       	rcall	.+602    	; 0x190a <strnlen_P>
    16b0:	4c 01       	movw	r8, r24
    16b2:	f3 2d       	mov	r31, r3
    16b4:	f0 68       	ori	r31, 0x80	; 128
    16b6:	3f 2e       	mov	r3, r31
    16b8:	82 01       	movw	r16, r4
    16ba:	33 fc       	sbrc	r3, 3
    16bc:	19 c0       	rjmp	.+50     	; 0x16f0 <vfprintf+0x1e0>
    16be:	82 2d       	mov	r24, r2
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	88 16       	cp	r8, r24
    16c4:	99 06       	cpc	r9, r25
    16c6:	a0 f4       	brcc	.+40     	; 0x16f0 <vfprintf+0x1e0>
    16c8:	b6 01       	movw	r22, r12
    16ca:	80 e2       	ldi	r24, 0x20	; 32
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	33 d1       	rcall	.+614    	; 0x1936 <fputc>
    16d0:	2a 94       	dec	r2
    16d2:	f5 cf       	rjmp	.-22     	; 0x16be <vfprintf+0x1ae>
    16d4:	f5 01       	movw	r30, r10
    16d6:	37 fc       	sbrc	r3, 7
    16d8:	85 91       	lpm	r24, Z+
    16da:	37 fe       	sbrs	r3, 7
    16dc:	81 91       	ld	r24, Z+
    16de:	5f 01       	movw	r10, r30
    16e0:	b6 01       	movw	r22, r12
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	28 d1       	rcall	.+592    	; 0x1936 <fputc>
    16e6:	21 10       	cpse	r2, r1
    16e8:	2a 94       	dec	r2
    16ea:	21 e0       	ldi	r18, 0x01	; 1
    16ec:	82 1a       	sub	r8, r18
    16ee:	91 08       	sbc	r9, r1
    16f0:	81 14       	cp	r8, r1
    16f2:	91 04       	cpc	r9, r1
    16f4:	79 f7       	brne	.-34     	; 0x16d4 <vfprintf+0x1c4>
    16f6:	e1 c0       	rjmp	.+450    	; 0x18ba <vfprintf+0x3aa>
    16f8:	84 36       	cpi	r24, 0x64	; 100
    16fa:	11 f0       	breq	.+4      	; 0x1700 <vfprintf+0x1f0>
    16fc:	89 36       	cpi	r24, 0x69	; 105
    16fe:	39 f5       	brne	.+78     	; 0x174e <vfprintf+0x23e>
    1700:	f8 01       	movw	r30, r16
    1702:	37 fe       	sbrs	r3, 7
    1704:	07 c0       	rjmp	.+14     	; 0x1714 <vfprintf+0x204>
    1706:	60 81       	ld	r22, Z
    1708:	71 81       	ldd	r23, Z+1	; 0x01
    170a:	82 81       	ldd	r24, Z+2	; 0x02
    170c:	93 81       	ldd	r25, Z+3	; 0x03
    170e:	0c 5f       	subi	r16, 0xFC	; 252
    1710:	1f 4f       	sbci	r17, 0xFF	; 255
    1712:	08 c0       	rjmp	.+16     	; 0x1724 <vfprintf+0x214>
    1714:	60 81       	ld	r22, Z
    1716:	71 81       	ldd	r23, Z+1	; 0x01
    1718:	07 2e       	mov	r0, r23
    171a:	00 0c       	add	r0, r0
    171c:	88 0b       	sbc	r24, r24
    171e:	99 0b       	sbc	r25, r25
    1720:	0e 5f       	subi	r16, 0xFE	; 254
    1722:	1f 4f       	sbci	r17, 0xFF	; 255
    1724:	f3 2d       	mov	r31, r3
    1726:	ff 76       	andi	r31, 0x6F	; 111
    1728:	3f 2e       	mov	r3, r31
    172a:	97 ff       	sbrs	r25, 7
    172c:	09 c0       	rjmp	.+18     	; 0x1740 <vfprintf+0x230>
    172e:	90 95       	com	r25
    1730:	80 95       	com	r24
    1732:	70 95       	com	r23
    1734:	61 95       	neg	r22
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	8f 4f       	sbci	r24, 0xFF	; 255
    173a:	9f 4f       	sbci	r25, 0xFF	; 255
    173c:	f0 68       	ori	r31, 0x80	; 128
    173e:	3f 2e       	mov	r3, r31
    1740:	2a e0       	ldi	r18, 0x0A	; 10
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	a3 01       	movw	r20, r6
    1746:	33 d1       	rcall	.+614    	; 0x19ae <__ultoa_invert>
    1748:	88 2e       	mov	r8, r24
    174a:	86 18       	sub	r8, r6
    174c:	44 c0       	rjmp	.+136    	; 0x17d6 <vfprintf+0x2c6>
    174e:	85 37       	cpi	r24, 0x75	; 117
    1750:	31 f4       	brne	.+12     	; 0x175e <vfprintf+0x24e>
    1752:	23 2d       	mov	r18, r3
    1754:	2f 7e       	andi	r18, 0xEF	; 239
    1756:	b2 2e       	mov	r11, r18
    1758:	2a e0       	ldi	r18, 0x0A	; 10
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	25 c0       	rjmp	.+74     	; 0x17a8 <vfprintf+0x298>
    175e:	93 2d       	mov	r25, r3
    1760:	99 7f       	andi	r25, 0xF9	; 249
    1762:	b9 2e       	mov	r11, r25
    1764:	8f 36       	cpi	r24, 0x6F	; 111
    1766:	c1 f0       	breq	.+48     	; 0x1798 <vfprintf+0x288>
    1768:	18 f4       	brcc	.+6      	; 0x1770 <vfprintf+0x260>
    176a:	88 35       	cpi	r24, 0x58	; 88
    176c:	79 f0       	breq	.+30     	; 0x178c <vfprintf+0x27c>
    176e:	ae c0       	rjmp	.+348    	; 0x18cc <vfprintf+0x3bc>
    1770:	80 37       	cpi	r24, 0x70	; 112
    1772:	19 f0       	breq	.+6      	; 0x177a <vfprintf+0x26a>
    1774:	88 37       	cpi	r24, 0x78	; 120
    1776:	21 f0       	breq	.+8      	; 0x1780 <vfprintf+0x270>
    1778:	a9 c0       	rjmp	.+338    	; 0x18cc <vfprintf+0x3bc>
    177a:	e9 2f       	mov	r30, r25
    177c:	e0 61       	ori	r30, 0x10	; 16
    177e:	be 2e       	mov	r11, r30
    1780:	b4 fe       	sbrs	r11, 4
    1782:	0d c0       	rjmp	.+26     	; 0x179e <vfprintf+0x28e>
    1784:	fb 2d       	mov	r31, r11
    1786:	f4 60       	ori	r31, 0x04	; 4
    1788:	bf 2e       	mov	r11, r31
    178a:	09 c0       	rjmp	.+18     	; 0x179e <vfprintf+0x28e>
    178c:	34 fe       	sbrs	r3, 4
    178e:	0a c0       	rjmp	.+20     	; 0x17a4 <vfprintf+0x294>
    1790:	29 2f       	mov	r18, r25
    1792:	26 60       	ori	r18, 0x06	; 6
    1794:	b2 2e       	mov	r11, r18
    1796:	06 c0       	rjmp	.+12     	; 0x17a4 <vfprintf+0x294>
    1798:	28 e0       	ldi	r18, 0x08	; 8
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	05 c0       	rjmp	.+10     	; 0x17a8 <vfprintf+0x298>
    179e:	20 e1       	ldi	r18, 0x10	; 16
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <vfprintf+0x298>
    17a4:	20 e1       	ldi	r18, 0x10	; 16
    17a6:	32 e0       	ldi	r19, 0x02	; 2
    17a8:	f8 01       	movw	r30, r16
    17aa:	b7 fe       	sbrs	r11, 7
    17ac:	07 c0       	rjmp	.+14     	; 0x17bc <vfprintf+0x2ac>
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	0c 5f       	subi	r16, 0xFC	; 252
    17b8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ba:	06 c0       	rjmp	.+12     	; 0x17c8 <vfprintf+0x2b8>
    17bc:	60 81       	ld	r22, Z
    17be:	71 81       	ldd	r23, Z+1	; 0x01
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 5f       	subi	r16, 0xFE	; 254
    17c6:	1f 4f       	sbci	r17, 0xFF	; 255
    17c8:	a3 01       	movw	r20, r6
    17ca:	f1 d0       	rcall	.+482    	; 0x19ae <__ultoa_invert>
    17cc:	88 2e       	mov	r8, r24
    17ce:	86 18       	sub	r8, r6
    17d0:	fb 2d       	mov	r31, r11
    17d2:	ff 77       	andi	r31, 0x7F	; 127
    17d4:	3f 2e       	mov	r3, r31
    17d6:	36 fe       	sbrs	r3, 6
    17d8:	0d c0       	rjmp	.+26     	; 0x17f4 <vfprintf+0x2e4>
    17da:	23 2d       	mov	r18, r3
    17dc:	2e 7f       	andi	r18, 0xFE	; 254
    17de:	a2 2e       	mov	r10, r18
    17e0:	89 14       	cp	r8, r9
    17e2:	58 f4       	brcc	.+22     	; 0x17fa <vfprintf+0x2ea>
    17e4:	34 fe       	sbrs	r3, 4
    17e6:	0b c0       	rjmp	.+22     	; 0x17fe <vfprintf+0x2ee>
    17e8:	32 fc       	sbrc	r3, 2
    17ea:	09 c0       	rjmp	.+18     	; 0x17fe <vfprintf+0x2ee>
    17ec:	83 2d       	mov	r24, r3
    17ee:	8e 7e       	andi	r24, 0xEE	; 238
    17f0:	a8 2e       	mov	r10, r24
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <vfprintf+0x2ee>
    17f4:	b8 2c       	mov	r11, r8
    17f6:	a3 2c       	mov	r10, r3
    17f8:	03 c0       	rjmp	.+6      	; 0x1800 <vfprintf+0x2f0>
    17fa:	b8 2c       	mov	r11, r8
    17fc:	01 c0       	rjmp	.+2      	; 0x1800 <vfprintf+0x2f0>
    17fe:	b9 2c       	mov	r11, r9
    1800:	a4 fe       	sbrs	r10, 4
    1802:	0f c0       	rjmp	.+30     	; 0x1822 <vfprintf+0x312>
    1804:	fe 01       	movw	r30, r28
    1806:	e8 0d       	add	r30, r8
    1808:	f1 1d       	adc	r31, r1
    180a:	80 81       	ld	r24, Z
    180c:	80 33       	cpi	r24, 0x30	; 48
    180e:	21 f4       	brne	.+8      	; 0x1818 <vfprintf+0x308>
    1810:	9a 2d       	mov	r25, r10
    1812:	99 7e       	andi	r25, 0xE9	; 233
    1814:	a9 2e       	mov	r10, r25
    1816:	09 c0       	rjmp	.+18     	; 0x182a <vfprintf+0x31a>
    1818:	a2 fe       	sbrs	r10, 2
    181a:	06 c0       	rjmp	.+12     	; 0x1828 <vfprintf+0x318>
    181c:	b3 94       	inc	r11
    181e:	b3 94       	inc	r11
    1820:	04 c0       	rjmp	.+8      	; 0x182a <vfprintf+0x31a>
    1822:	8a 2d       	mov	r24, r10
    1824:	86 78       	andi	r24, 0x86	; 134
    1826:	09 f0       	breq	.+2      	; 0x182a <vfprintf+0x31a>
    1828:	b3 94       	inc	r11
    182a:	a3 fc       	sbrc	r10, 3
    182c:	10 c0       	rjmp	.+32     	; 0x184e <vfprintf+0x33e>
    182e:	a0 fe       	sbrs	r10, 0
    1830:	06 c0       	rjmp	.+12     	; 0x183e <vfprintf+0x32e>
    1832:	b2 14       	cp	r11, r2
    1834:	80 f4       	brcc	.+32     	; 0x1856 <vfprintf+0x346>
    1836:	28 0c       	add	r2, r8
    1838:	92 2c       	mov	r9, r2
    183a:	9b 18       	sub	r9, r11
    183c:	0d c0       	rjmp	.+26     	; 0x1858 <vfprintf+0x348>
    183e:	b2 14       	cp	r11, r2
    1840:	58 f4       	brcc	.+22     	; 0x1858 <vfprintf+0x348>
    1842:	b6 01       	movw	r22, r12
    1844:	80 e2       	ldi	r24, 0x20	; 32
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	76 d0       	rcall	.+236    	; 0x1936 <fputc>
    184a:	b3 94       	inc	r11
    184c:	f8 cf       	rjmp	.-16     	; 0x183e <vfprintf+0x32e>
    184e:	b2 14       	cp	r11, r2
    1850:	18 f4       	brcc	.+6      	; 0x1858 <vfprintf+0x348>
    1852:	2b 18       	sub	r2, r11
    1854:	02 c0       	rjmp	.+4      	; 0x185a <vfprintf+0x34a>
    1856:	98 2c       	mov	r9, r8
    1858:	21 2c       	mov	r2, r1
    185a:	a4 fe       	sbrs	r10, 4
    185c:	0f c0       	rjmp	.+30     	; 0x187c <vfprintf+0x36c>
    185e:	b6 01       	movw	r22, r12
    1860:	80 e3       	ldi	r24, 0x30	; 48
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	68 d0       	rcall	.+208    	; 0x1936 <fputc>
    1866:	a2 fe       	sbrs	r10, 2
    1868:	16 c0       	rjmp	.+44     	; 0x1896 <vfprintf+0x386>
    186a:	a1 fc       	sbrc	r10, 1
    186c:	03 c0       	rjmp	.+6      	; 0x1874 <vfprintf+0x364>
    186e:	88 e7       	ldi	r24, 0x78	; 120
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <vfprintf+0x368>
    1874:	88 e5       	ldi	r24, 0x58	; 88
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	b6 01       	movw	r22, r12
    187a:	0c c0       	rjmp	.+24     	; 0x1894 <vfprintf+0x384>
    187c:	8a 2d       	mov	r24, r10
    187e:	86 78       	andi	r24, 0x86	; 134
    1880:	51 f0       	breq	.+20     	; 0x1896 <vfprintf+0x386>
    1882:	a1 fe       	sbrs	r10, 1
    1884:	02 c0       	rjmp	.+4      	; 0x188a <vfprintf+0x37a>
    1886:	8b e2       	ldi	r24, 0x2B	; 43
    1888:	01 c0       	rjmp	.+2      	; 0x188c <vfprintf+0x37c>
    188a:	80 e2       	ldi	r24, 0x20	; 32
    188c:	a7 fc       	sbrc	r10, 7
    188e:	8d e2       	ldi	r24, 0x2D	; 45
    1890:	b6 01       	movw	r22, r12
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	50 d0       	rcall	.+160    	; 0x1936 <fputc>
    1896:	89 14       	cp	r8, r9
    1898:	30 f4       	brcc	.+12     	; 0x18a6 <vfprintf+0x396>
    189a:	b6 01       	movw	r22, r12
    189c:	80 e3       	ldi	r24, 0x30	; 48
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	4a d0       	rcall	.+148    	; 0x1936 <fputc>
    18a2:	9a 94       	dec	r9
    18a4:	f8 cf       	rjmp	.-16     	; 0x1896 <vfprintf+0x386>
    18a6:	8a 94       	dec	r8
    18a8:	f3 01       	movw	r30, r6
    18aa:	e8 0d       	add	r30, r8
    18ac:	f1 1d       	adc	r31, r1
    18ae:	80 81       	ld	r24, Z
    18b0:	b6 01       	movw	r22, r12
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	40 d0       	rcall	.+128    	; 0x1936 <fputc>
    18b6:	81 10       	cpse	r8, r1
    18b8:	f6 cf       	rjmp	.-20     	; 0x18a6 <vfprintf+0x396>
    18ba:	22 20       	and	r2, r2
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <vfprintf+0x3b0>
    18be:	4e ce       	rjmp	.-868    	; 0x155c <vfprintf+0x4c>
    18c0:	b6 01       	movw	r22, r12
    18c2:	80 e2       	ldi	r24, 0x20	; 32
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	37 d0       	rcall	.+110    	; 0x1936 <fputc>
    18c8:	2a 94       	dec	r2
    18ca:	f7 cf       	rjmp	.-18     	; 0x18ba <vfprintf+0x3aa>
    18cc:	f6 01       	movw	r30, r12
    18ce:	86 81       	ldd	r24, Z+6	; 0x06
    18d0:	97 81       	ldd	r25, Z+7	; 0x07
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <vfprintf+0x3c8>
    18d4:	8f ef       	ldi	r24, 0xFF	; 255
    18d6:	9f ef       	ldi	r25, 0xFF	; 255
    18d8:	2b 96       	adiw	r28, 0x0b	; 11
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	df 90       	pop	r13
    18f2:	cf 90       	pop	r12
    18f4:	bf 90       	pop	r11
    18f6:	af 90       	pop	r10
    18f8:	9f 90       	pop	r9
    18fa:	8f 90       	pop	r8
    18fc:	7f 90       	pop	r7
    18fe:	6f 90       	pop	r6
    1900:	5f 90       	pop	r5
    1902:	4f 90       	pop	r4
    1904:	3f 90       	pop	r3
    1906:	2f 90       	pop	r2
    1908:	08 95       	ret

0000190a <strnlen_P>:
    190a:	fc 01       	movw	r30, r24
    190c:	05 90       	lpm	r0, Z+
    190e:	61 50       	subi	r22, 0x01	; 1
    1910:	70 40       	sbci	r23, 0x00	; 0
    1912:	01 10       	cpse	r0, r1
    1914:	d8 f7       	brcc	.-10     	; 0x190c <strnlen_P+0x2>
    1916:	80 95       	com	r24
    1918:	90 95       	com	r25
    191a:	8e 0f       	add	r24, r30
    191c:	9f 1f       	adc	r25, r31
    191e:	08 95       	ret

00001920 <strnlen>:
    1920:	fc 01       	movw	r30, r24
    1922:	61 50       	subi	r22, 0x01	; 1
    1924:	70 40       	sbci	r23, 0x00	; 0
    1926:	01 90       	ld	r0, Z+
    1928:	01 10       	cpse	r0, r1
    192a:	d8 f7       	brcc	.-10     	; 0x1922 <strnlen+0x2>
    192c:	80 95       	com	r24
    192e:	90 95       	com	r25
    1930:	8e 0f       	add	r24, r30
    1932:	9f 1f       	adc	r25, r31
    1934:	08 95       	ret

00001936 <fputc>:
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	fb 01       	movw	r30, r22
    1940:	23 81       	ldd	r18, Z+3	; 0x03
    1942:	21 fd       	sbrc	r18, 1
    1944:	03 c0       	rjmp	.+6      	; 0x194c <fputc+0x16>
    1946:	8f ef       	ldi	r24, 0xFF	; 255
    1948:	9f ef       	ldi	r25, 0xFF	; 255
    194a:	2c c0       	rjmp	.+88     	; 0x19a4 <fputc+0x6e>
    194c:	22 ff       	sbrs	r18, 2
    194e:	16 c0       	rjmp	.+44     	; 0x197c <fputc+0x46>
    1950:	46 81       	ldd	r20, Z+6	; 0x06
    1952:	57 81       	ldd	r21, Z+7	; 0x07
    1954:	24 81       	ldd	r18, Z+4	; 0x04
    1956:	35 81       	ldd	r19, Z+5	; 0x05
    1958:	42 17       	cp	r20, r18
    195a:	53 07       	cpc	r21, r19
    195c:	44 f4       	brge	.+16     	; 0x196e <fputc+0x38>
    195e:	a0 81       	ld	r26, Z
    1960:	b1 81       	ldd	r27, Z+1	; 0x01
    1962:	9d 01       	movw	r18, r26
    1964:	2f 5f       	subi	r18, 0xFF	; 255
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	31 83       	std	Z+1, r19	; 0x01
    196a:	20 83       	st	Z, r18
    196c:	8c 93       	st	X, r24
    196e:	26 81       	ldd	r18, Z+6	; 0x06
    1970:	37 81       	ldd	r19, Z+7	; 0x07
    1972:	2f 5f       	subi	r18, 0xFF	; 255
    1974:	3f 4f       	sbci	r19, 0xFF	; 255
    1976:	37 83       	std	Z+7, r19	; 0x07
    1978:	26 83       	std	Z+6, r18	; 0x06
    197a:	14 c0       	rjmp	.+40     	; 0x19a4 <fputc+0x6e>
    197c:	8b 01       	movw	r16, r22
    197e:	ec 01       	movw	r28, r24
    1980:	fb 01       	movw	r30, r22
    1982:	00 84       	ldd	r0, Z+8	; 0x08
    1984:	f1 85       	ldd	r31, Z+9	; 0x09
    1986:	e0 2d       	mov	r30, r0
    1988:	09 95       	icall
    198a:	89 2b       	or	r24, r25
    198c:	e1 f6       	brne	.-72     	; 0x1946 <fputc+0x10>
    198e:	d8 01       	movw	r26, r16
    1990:	16 96       	adiw	r26, 0x06	; 6
    1992:	8d 91       	ld	r24, X+
    1994:	9c 91       	ld	r25, X
    1996:	17 97       	sbiw	r26, 0x07	; 7
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	17 96       	adiw	r26, 0x07	; 7
    199c:	9c 93       	st	X, r25
    199e:	8e 93       	st	-X, r24
    19a0:	16 97       	sbiw	r26, 0x06	; 6
    19a2:	ce 01       	movw	r24, r28
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	08 95       	ret

000019ae <__ultoa_invert>:
    19ae:	fa 01       	movw	r30, r20
    19b0:	aa 27       	eor	r26, r26
    19b2:	28 30       	cpi	r18, 0x08	; 8
    19b4:	51 f1       	breq	.+84     	; 0x1a0a <__ultoa_invert+0x5c>
    19b6:	20 31       	cpi	r18, 0x10	; 16
    19b8:	81 f1       	breq	.+96     	; 0x1a1a <__ultoa_invert+0x6c>
    19ba:	e8 94       	clt
    19bc:	6f 93       	push	r22
    19be:	6e 7f       	andi	r22, 0xFE	; 254
    19c0:	6e 5f       	subi	r22, 0xFE	; 254
    19c2:	7f 4f       	sbci	r23, 0xFF	; 255
    19c4:	8f 4f       	sbci	r24, 0xFF	; 255
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	af 4f       	sbci	r26, 0xFF	; 255
    19ca:	b1 e0       	ldi	r27, 0x01	; 1
    19cc:	3e d0       	rcall	.+124    	; 0x1a4a <__ultoa_invert+0x9c>
    19ce:	b4 e0       	ldi	r27, 0x04	; 4
    19d0:	3c d0       	rcall	.+120    	; 0x1a4a <__ultoa_invert+0x9c>
    19d2:	67 0f       	add	r22, r23
    19d4:	78 1f       	adc	r23, r24
    19d6:	89 1f       	adc	r24, r25
    19d8:	9a 1f       	adc	r25, r26
    19da:	a1 1d       	adc	r26, r1
    19dc:	68 0f       	add	r22, r24
    19de:	79 1f       	adc	r23, r25
    19e0:	8a 1f       	adc	r24, r26
    19e2:	91 1d       	adc	r25, r1
    19e4:	a1 1d       	adc	r26, r1
    19e6:	6a 0f       	add	r22, r26
    19e8:	71 1d       	adc	r23, r1
    19ea:	81 1d       	adc	r24, r1
    19ec:	91 1d       	adc	r25, r1
    19ee:	a1 1d       	adc	r26, r1
    19f0:	20 d0       	rcall	.+64     	; 0x1a32 <__ultoa_invert+0x84>
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <__ultoa_invert+0x48>
    19f4:	68 94       	set
    19f6:	3f 91       	pop	r19
    19f8:	2a e0       	ldi	r18, 0x0A	; 10
    19fa:	26 9f       	mul	r18, r22
    19fc:	11 24       	eor	r1, r1
    19fe:	30 19       	sub	r19, r0
    1a00:	30 5d       	subi	r19, 0xD0	; 208
    1a02:	31 93       	st	Z+, r19
    1a04:	de f6       	brtc	.-74     	; 0x19bc <__ultoa_invert+0xe>
    1a06:	cf 01       	movw	r24, r30
    1a08:	08 95       	ret
    1a0a:	46 2f       	mov	r20, r22
    1a0c:	47 70       	andi	r20, 0x07	; 7
    1a0e:	40 5d       	subi	r20, 0xD0	; 208
    1a10:	41 93       	st	Z+, r20
    1a12:	b3 e0       	ldi	r27, 0x03	; 3
    1a14:	0f d0       	rcall	.+30     	; 0x1a34 <__ultoa_invert+0x86>
    1a16:	c9 f7       	brne	.-14     	; 0x1a0a <__ultoa_invert+0x5c>
    1a18:	f6 cf       	rjmp	.-20     	; 0x1a06 <__ultoa_invert+0x58>
    1a1a:	46 2f       	mov	r20, r22
    1a1c:	4f 70       	andi	r20, 0x0F	; 15
    1a1e:	40 5d       	subi	r20, 0xD0	; 208
    1a20:	4a 33       	cpi	r20, 0x3A	; 58
    1a22:	18 f0       	brcs	.+6      	; 0x1a2a <__ultoa_invert+0x7c>
    1a24:	49 5d       	subi	r20, 0xD9	; 217
    1a26:	31 fd       	sbrc	r19, 1
    1a28:	40 52       	subi	r20, 0x20	; 32
    1a2a:	41 93       	st	Z+, r20
    1a2c:	02 d0       	rcall	.+4      	; 0x1a32 <__ultoa_invert+0x84>
    1a2e:	a9 f7       	brne	.-22     	; 0x1a1a <__ultoa_invert+0x6c>
    1a30:	ea cf       	rjmp	.-44     	; 0x1a06 <__ultoa_invert+0x58>
    1a32:	b4 e0       	ldi	r27, 0x04	; 4
    1a34:	a6 95       	lsr	r26
    1a36:	97 95       	ror	r25
    1a38:	87 95       	ror	r24
    1a3a:	77 95       	ror	r23
    1a3c:	67 95       	ror	r22
    1a3e:	ba 95       	dec	r27
    1a40:	c9 f7       	brne	.-14     	; 0x1a34 <__ultoa_invert+0x86>
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	61 05       	cpc	r22, r1
    1a46:	71 05       	cpc	r23, r1
    1a48:	08 95       	ret
    1a4a:	9b 01       	movw	r18, r22
    1a4c:	ac 01       	movw	r20, r24
    1a4e:	0a 2e       	mov	r0, r26
    1a50:	06 94       	lsr	r0
    1a52:	57 95       	ror	r21
    1a54:	47 95       	ror	r20
    1a56:	37 95       	ror	r19
    1a58:	27 95       	ror	r18
    1a5a:	ba 95       	dec	r27
    1a5c:	c9 f7       	brne	.-14     	; 0x1a50 <__ultoa_invert+0xa2>
    1a5e:	62 0f       	add	r22, r18
    1a60:	73 1f       	adc	r23, r19
    1a62:	84 1f       	adc	r24, r20
    1a64:	95 1f       	adc	r25, r21
    1a66:	a0 1d       	adc	r26, r0
    1a68:	08 95       	ret

00001a6a <_exit>:
    1a6a:	f8 94       	cli

00001a6c <__stop_program>:
    1a6c:	ff cf       	rjmp	.-2      	; 0x1a6c <__stop_program>
