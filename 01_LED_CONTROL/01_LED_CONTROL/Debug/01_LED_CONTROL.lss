
01_LED_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000410  000004a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  000004b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ffc  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a77  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000827  00000000  00000000  0000203f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00002868  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056c  00000000  00000000  00002964  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000646  00000000  00000000  00002ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003516  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	31 d1       	rcall	.+610    	; 0x326 <main>
  c4:	a3 c1       	rjmp	.+838    	; 0x40c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_button>:
// 00001111
// DDRD &= 0x0f; // 4, 5, 6, 7을 input. PORTD.4 가독성이 떨어진다.

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN | 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN);
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	08 95       	ret

000000d0 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
  d0:	20 b3       	in	r18, 0x10	; 16
  d2:	42 2f       	mov	r20, r18
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <get_button+0x10>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <get_button+0xc>
  e4:	24 23       	and	r18, r20
  e6:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
  e8:	21 15       	cp	r18, r1
  ea:	31 05       	cpc	r19, r1
  ec:	b9 f0       	breq	.+46     	; 0x11c <get_button+0x4c>
  ee:	fc 01       	movw	r30, r24
  f0:	e0 5f       	subi	r30, 0xF0	; 240
  f2:	fe 4f       	sbci	r31, 0xFE	; 254
  f4:	40 81       	ld	r20, Z
  f6:	41 11       	cpse	r20, r1
  f8:	11 c0       	rjmp	.+34     	; 0x11c <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	3d ee       	ldi	r19, 0xED	; 237
  fe:	42 e0       	ldi	r20, 0x02	; 2
 100:	21 50       	subi	r18, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	40 40       	sbci	r20, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <get_button+0x30>
 108:	00 c0       	rjmp	.+0      	; 0x10a <get_button+0x3a>
 10a:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
 10c:	fc 01       	movw	r30, r24
 10e:	e0 5f       	subi	r30, 0xF0	; 240
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
 11c:	fc 01       	movw	r30, r24
 11e:	e0 5f       	subi	r30, 0xF0	; 240
 120:	fe 4f       	sbci	r31, 0xFE	; 254
 122:	40 81       	ld	r20, Z
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	91 f4       	brne	.+36     	; 0x14c <get_button+0x7c>
 128:	23 2b       	or	r18, r19
 12a:	99 f4       	brne	.+38     	; 0x152 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
 12c:	fc 01       	movw	r30, r24
 12e:	e0 5f       	subi	r30, 0xF0	; 240
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	10 82       	st	Z, r1
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	9d ee       	ldi	r25, 0xED	; 237
 138:	22 e0       	ldi	r18, 0x02	; 2
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	20 40       	sbci	r18, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <get_button+0x6a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <get_button+0x74>
 144:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret

00000158 <shift_left_keep_ledon>:
	}
}

void shift_left_keep_ledon(void)
{
	for (int i = 0; i < 8; i++)
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	16 c0       	rjmp	.+44     	; 0x18a <shift_left_keep_ledon+0x32>
	{
		PORTA += 0b00000001 << i;
 15e:	4b b3       	in	r20, 0x1b	; 27
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 2e       	mov	r0, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <shift_left_keep_ledon+0x14>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <shift_left_keep_ledon+0x10>
 170:	84 0f       	add	r24, r20
 172:	8b bb       	out	0x1b, r24	; 27
 174:	4f ef       	ldi	r20, 0xFF	; 255
 176:	80 e7       	ldi	r24, 0x70	; 112
 178:	92 e0       	ldi	r25, 0x02	; 2
 17a:	41 50       	subi	r20, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <shift_left_keep_ledon+0x22>
 182:	00 c0       	rjmp	.+0      	; 0x184 <shift_left_keep_ledon+0x2c>
 184:	00 00       	nop
	}
}

void shift_left_keep_ledon(void)
{
	for (int i = 0; i < 8; i++)
 186:	2f 5f       	subi	r18, 0xFF	; 255
 188:	3f 4f       	sbci	r19, 0xFF	; 255
 18a:	28 30       	cpi	r18, 0x08	; 8
 18c:	31 05       	cpc	r19, r1
 18e:	3c f3       	brlt	.-50     	; 0x15e <shift_left_keep_ledon+0x6>
	  //(i = 0)          1
	  //(i = 1)         1
	  //(i = 2)        1
		_delay_ms(50);
	}
}
 190:	08 95       	ret

00000192 <shift_right_keep_ledon>:

void shift_right_keep_ledon(void)
{
	for (int i = 0; i < 8; i++)
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	15 c0       	rjmp	.+42     	; 0x1c2 <shift_right_keep_ledon+0x30>
	{
		PORTA -= 0b10000000 >> i;
 198:	2b b3       	in	r18, 0x1b	; 27
 19a:	40 e8       	ldi	r20, 0x80	; 128
 19c:	50 e0       	ldi	r21, 0x00	; 0
 19e:	08 2e       	mov	r0, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <shift_right_keep_ledon+0x14>
 1a2:	55 95       	asr	r21
 1a4:	47 95       	ror	r20
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <shift_right_keep_ledon+0x10>
 1aa:	24 1b       	sub	r18, r20
 1ac:	2b bb       	out	0x1b, r18	; 27
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	30 e7       	ldi	r19, 0x70	; 112
 1b2:	42 e0       	ldi	r20, 0x02	; 2
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	30 40       	sbci	r19, 0x00	; 0
 1b8:	40 40       	sbci	r20, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <shift_right_keep_ledon+0x22>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <shift_right_keep_ledon+0x2c>
 1be:	00 00       	nop
	}
}

void shift_right_keep_ledon(void)
{
	for (int i = 0; i < 8; i++)
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	88 30       	cpi	r24, 0x08	; 8
 1c4:	91 05       	cpc	r25, r1
 1c6:	44 f3       	brlt	.-48     	; 0x198 <shift_right_keep_ledon+0x6>
	{
		PORTA -= 0b10000000 >> i;
		_delay_ms(50);
	}
}
 1c8:	08 95       	ret

000001ca <shift_left_ledon>:

void shift_left_ledon(void)
{
	for (int i = 0; i < 8; i++)
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	13 c0       	rjmp	.+38     	; 0x1f6 <shift_left_ledon+0x2c>
	{
		PORTA = 0b00000001 << i;
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	08 2e       	mov	r0, r24
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <shift_left_ledon+0x12>
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	0a 94       	dec	r0
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <shift_left_ledon+0xe>
 1e0:	2b bb       	out	0x1b, r18	; 27
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	30 e7       	ldi	r19, 0x70	; 112
 1e6:	42 e0       	ldi	r20, 0x02	; 2
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	30 40       	sbci	r19, 0x00	; 0
 1ec:	40 40       	sbci	r20, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <shift_left_ledon+0x1e>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <shift_left_ledon+0x28>
 1f2:	00 00       	nop
	}
}

void shift_left_ledon(void)
{
	for (int i = 0; i < 8; i++)
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	88 30       	cpi	r24, 0x08	; 8
 1f8:	91 05       	cpc	r25, r1
 1fa:	54 f3       	brlt	.-44     	; 0x1d0 <shift_left_ledon+0x6>
		//(i = 0)          1
		//(i = 1)         1
		//(i = 2)        1
		_delay_ms(50);
	}
}
 1fc:	08 95       	ret

000001fe <shift_right_ledon>:

void shift_right_ledon(void)
{
	for (int i = 1; i < 9; i++)
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	13 c0       	rjmp	.+38     	; 0x22a <shift_right_ledon+0x2c>
	{
		PORTA = 0b10000000 >> i;
 204:	20 e8       	ldi	r18, 0x80	; 128
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	08 2e       	mov	r0, r24
 20a:	02 c0       	rjmp	.+4      	; 0x210 <shift_right_ledon+0x12>
 20c:	35 95       	asr	r19
 20e:	27 95       	ror	r18
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <shift_right_ledon+0xe>
 214:	2b bb       	out	0x1b, r18	; 27
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	30 e7       	ldi	r19, 0x70	; 112
 21a:	42 e0       	ldi	r20, 0x02	; 2
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	30 40       	sbci	r19, 0x00	; 0
 220:	40 40       	sbci	r20, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <shift_right_ledon+0x1e>
 224:	00 c0       	rjmp	.+0      	; 0x226 <shift_right_ledon+0x28>
 226:	00 00       	nop
	}
}

void shift_right_ledon(void)
{
	for (int i = 1; i < 9; i++)
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	89 30       	cpi	r24, 0x09	; 9
 22c:	91 05       	cpc	r25, r1
 22e:	54 f3       	brlt	.-44     	; 0x204 <shift_right_ledon+0x6>
	{
		PORTA = 0b10000000 >> i;
		_delay_ms(50);
	}
}
 230:	08 95       	ret

00000232 <led_all_on>:

void led_all_on(void)
{
	PORTA = 0xff;
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	8b bb       	out	0x1b, r24	; 27
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	80 e7       	ldi	r24, 0x70	; 112
 23a:	92 e0       	ldi	r25, 0x02	; 2
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <led_all_on+0xa>
 244:	00 c0       	rjmp	.+0      	; 0x246 <led_all_on+0x14>
 246:	00 00       	nop
 248:	08 95       	ret

0000024a <led_all_off>:
	_delay_ms(50);
}

void led_all_off(void)
{
	PORTA = 0x00;
 24a:	1b ba       	out	0x1b, r1	; 27
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	80 e7       	ldi	r24, 0x70	; 112
 250:	92 e0       	ldi	r25, 0x02	; 2
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <led_all_off+0x8>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <led_all_off+0x12>
 25c:	00 00       	nop
 25e:	08 95       	ret

00000260 <floweron>:
}

void floweron(void)
{
	int j, i;
	for (i = 0; i < 4; i++)
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	2b c0       	rjmp	.+86     	; 0x2bc <floweron+0x5c>
	{
		for (j = i; j < i + 1; j++)
		{
			PORTA += 0b00001000 >> i;
 266:	4b b3       	in	r20, 0x1b	; 27
 268:	28 e0       	ldi	r18, 0x08	; 8
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	08 2e       	mov	r0, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <floweron+0x14>
 270:	35 95       	asr	r19
 272:	27 95       	ror	r18
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <floweron+0x10>
 278:	24 0f       	add	r18, r20
 27a:	2b bb       	out	0x1b, r18	; 27
void floweron(void)
{
	int j, i;
	for (i = 0; i < 4; i++)
	{
		for (j = i; j < i + 1; j++)
 27c:	6f 5f       	subi	r22, 0xFF	; 255
 27e:	7f 4f       	sbci	r23, 0xFF	; 255
 280:	01 c0       	rjmp	.+2      	; 0x284 <floweron+0x24>
 282:	bc 01       	movw	r22, r24
 284:	ac 01       	movw	r20, r24
 286:	4f 5f       	subi	r20, 0xFF	; 255
 288:	5f 4f       	sbci	r21, 0xFF	; 255
 28a:	64 17       	cp	r22, r20
 28c:	75 07       	cpc	r23, r21
 28e:	5c f3       	brlt	.-42     	; 0x266 <floweron+0x6>
		{
			PORTA += 0b00001000 >> i;
		}
		PORTA += 0b00010000 << i;
 290:	6b b3       	in	r22, 0x1b	; 27
 292:	20 e1       	ldi	r18, 0x10	; 16
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	f9 01       	movw	r30, r18
 298:	02 c0       	rjmp	.+4      	; 0x29e <floweron+0x3e>
 29a:	ee 0f       	add	r30, r30
 29c:	ff 1f       	adc	r31, r31
 29e:	8a 95       	dec	r24
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <floweron+0x3a>
 2a2:	cf 01       	movw	r24, r30
 2a4:	86 0f       	add	r24, r22
 2a6:	8b bb       	out	0x1b, r24	; 27
 2a8:	ff ef       	ldi	r31, 0xFF	; 255
 2aa:	20 e7       	ldi	r18, 0x70	; 112
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	f1 50       	subi	r31, 0x01	; 1
 2b0:	20 40       	sbci	r18, 0x00	; 0
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <floweron+0x4e>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <floweron+0x58>
 2b8:	00 00       	nop
}

void floweron(void)
{
	int j, i;
	for (i = 0; i < 4; i++)
 2ba:	ca 01       	movw	r24, r20
 2bc:	84 30       	cpi	r24, 0x04	; 4
 2be:	91 05       	cpc	r25, r1
 2c0:	04 f3       	brlt	.-64     	; 0x282 <floweron+0x22>
		}
		PORTA += 0b00010000 << i;
		_delay_ms(50);
	}
	
}
 2c2:	08 95       	ret

000002c4 <floweroff>:

void floweroff(void)
{
	int j, i;
	for (i = 0; i < 4; i++)
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	2a c0       	rjmp	.+84     	; 0x31e <floweroff+0x5a>
	{
		for (j = i; j < i + 1; j++)
		{
			PORTA -= 0b00000001 << i;
 2ca:	2b b3       	in	r18, 0x1b	; 27
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	08 2e       	mov	r0, r24
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <floweroff+0x14>
 2d4:	66 0f       	add	r22, r22
 2d6:	77 1f       	adc	r23, r23
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <floweroff+0x10>
 2dc:	26 1b       	sub	r18, r22
 2de:	2b bb       	out	0x1b, r18	; 27
void floweroff(void)
{
	int j, i;
	for (i = 0; i < 4; i++)
	{
		for (j = i; j < i + 1; j++)
 2e0:	4f 5f       	subi	r20, 0xFF	; 255
 2e2:	5f 4f       	sbci	r21, 0xFF	; 255
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <floweroff+0x24>
 2e6:	ac 01       	movw	r20, r24
 2e8:	9c 01       	movw	r18, r24
 2ea:	2f 5f       	subi	r18, 0xFF	; 255
 2ec:	3f 4f       	sbci	r19, 0xFF	; 255
 2ee:	42 17       	cp	r20, r18
 2f0:	53 07       	cpc	r21, r19
 2f2:	5c f3       	brlt	.-42     	; 0x2ca <floweroff+0x6>
		{
			PORTA -= 0b00000001 << i;
		}
		PORTA -= 0b10000000 >> i;
 2f4:	9b b3       	in	r25, 0x1b	; 27
 2f6:	40 e8       	ldi	r20, 0x80	; 128
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <floweroff+0x3c>
 2fc:	55 95       	asr	r21
 2fe:	47 95       	ror	r20
 300:	8a 95       	dec	r24
 302:	e2 f7       	brpl	.-8      	; 0x2fc <floweroff+0x38>
 304:	89 2f       	mov	r24, r25
 306:	84 1b       	sub	r24, r20
 308:	8b bb       	out	0x1b, r24	; 27
 30a:	4f ef       	ldi	r20, 0xFF	; 255
 30c:	80 e7       	ldi	r24, 0x70	; 112
 30e:	92 e0       	ldi	r25, 0x02	; 2
 310:	41 50       	subi	r20, 0x01	; 1
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <floweroff+0x4c>
 318:	00 c0       	rjmp	.+0      	; 0x31a <floweroff+0x56>
 31a:	00 00       	nop
}

void floweroff(void)
{
	int j, i;
	for (i = 0; i < 4; i++)
 31c:	c9 01       	movw	r24, r18
 31e:	84 30       	cpi	r24, 0x04	; 4
 320:	91 05       	cpc	r25, r1
 322:	0c f3       	brlt	.-62     	; 0x2e6 <floweroff+0x22>
			PORTA -= 0b00000001 << i;
		}
		PORTA -= 0b10000000 >> i;
		_delay_ms(50);
	}
 324:	08 95       	ret

00000326 <main>:
	int button0_state = 0;
	int button1_state = 0;
	int button2_state = 0;
	int button3_state = 0;
	
	init_button();
 326:	d0 de       	rcall	.-608    	; 0xc8 <init_button>
	//led_main();
	DDRA = 0xff; // PORTA를 출력으로 설정
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00; // led를 all off
 32c:	1b ba       	out	0x1b, r1	; 27
int main(void)
{	
	int button0_state = 0;
	int button1_state = 0;
	int button2_state = 0;
	int button3_state = 0;
 32e:	c1 2c       	mov	r12, r1
 330:	d1 2c       	mov	r13, r1

int main(void)
{	
	int button0_state = 0;
	int button1_state = 0;
	int button2_state = 0;
 332:	e1 2c       	mov	r14, r1
 334:	f1 2c       	mov	r15, r1
};

int main(void)
{	
	int button0_state = 0;
	int button1_state = 0;
 336:	00 e0       	ldi	r16, 0x00	; 0
 338:	10 e0       	ldi	r17, 0x00	; 0
	floweroff
};

int main(void)
{	
	int button0_state = 0;
 33a:	a1 2c       	mov	r10, r1
 33c:	b1 2c       	mov	r11, r1
	{
		// -- 1버튼 처리 (토글)
		// button0을 1번 눌렀다 떼면 led를 all on
		// button1을 1번 눌렀다 떼면 led를 all off
		
		 if (get_button(BUTTON0, BUTTON0PIN))
 33e:	64 e0       	ldi	r22, 0x04	; 4
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	c4 de       	rcall	.-632    	; 0xd0 <get_button>
 348:	89 2b       	or	r24, r25
 34a:	11 f1       	breq	.+68     	; 0x390 <main+0x6a>
 34c:	2f ef       	ldi	r18, 0xFF	; 255
 34e:	80 e7       	ldi	r24, 0x70	; 112
 350:	92 e0       	ldi	r25, 0x02	; 2
 352:	21 50       	subi	r18, 0x01	; 1
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x2c>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0x36>
 35c:	00 00       	nop
		 {
			 _delay_ms(DEBOUNCE_DELAY); // 디바운스 처리
			 if (get_button(BUTTON0, BUTTON0PIN)) // 버튼 상태 확인
 35e:	64 e0       	ldi	r22, 0x04	; 4
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	b4 de       	rcall	.-664    	; 0xd0 <get_button>
 368:	89 2b       	or	r24, r25
 36a:	91 f0       	breq	.+36     	; 0x390 <main+0x6a>
			 {
				 button0_state++;
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	a2 1a       	sub	r10, r18
 370:	b2 0a       	sbc	r11, r18
				 if (button0_state == 8)
 372:	88 e0       	ldi	r24, 0x08	; 8
 374:	a8 16       	cp	r10, r24
 376:	b1 04       	cpc	r11, r1
 378:	11 f4       	brne	.+4      	; 0x37e <main+0x58>
				 {
					 button0_state = 0;
 37a:	a1 2c       	mov	r10, r1
 37c:	b1 2c       	mov	r11, r1
				 }
				 (*fp[button0_state])(); // 함수 포인터를 현재 button0_state에 맞는 인덱스로 호출
 37e:	f5 01       	movw	r30, r10
 380:	ee 0f       	add	r30, r30
 382:	ff 1f       	adc	r31, r31
 384:	e0 50       	subi	r30, 0x00	; 0
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	01 90       	ld	r0, Z+
 38a:	f0 81       	ld	r31, Z
 38c:	e0 2d       	mov	r30, r0
 38e:	09 95       	icall
			 }
		 }
		
		if (get_button(BUTTON1, BUTTON1PIN))
 390:	65 e0       	ldi	r22, 0x05	; 5
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	9b de       	rcall	.-714    	; 0xd0 <get_button>
 39a:	89 2b       	or	r24, r25
 39c:	69 f0       	breq	.+26     	; 0x3b8 <main+0x92>
		{
			button1_state = !button1_state;
 39e:	c1 e0       	ldi	r28, 0x01	; 1
 3a0:	01 15       	cp	r16, r1
 3a2:	11 05       	cpc	r17, r1
 3a4:	09 f0       	breq	.+2      	; 0x3a8 <main+0x82>
 3a6:	c0 e0       	ldi	r28, 0x00	; 0
			
			if (button1_state)
 3a8:	d0 e0       	ldi	r29, 0x00	; 0
			{
				shift_left_ledon();
 3aa:	01 2b       	or	r16, r17
 3ac:	19 f4       	brne	.+6      	; 0x3b4 <main+0x8e>
			 }
		 }
		
		if (get_button(BUTTON1, BUTTON1PIN))
		{
			button1_state = !button1_state;
 3ae:	0d df       	rcall	.-486    	; 0x1ca <shift_left_ledon>
 3b0:	8e 01       	movw	r16, r28
			if (button1_state)
			{
				shift_left_ledon();
			}
			else
				shift_right_ledon();
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <main+0x92>
			 }
		 }
		
		if (get_button(BUTTON1, BUTTON1PIN))
		{
			button1_state = !button1_state;
 3b4:	24 df       	rcall	.-440    	; 0x1fe <shift_right_ledon>
				shift_left_ledon();
			}
			else
				shift_right_ledon();
		}
		if (get_button(BUTTON2, BUTTON2PIN))
 3b6:	8e 01       	movw	r16, r28
 3b8:	66 e0       	ldi	r22, 0x06	; 6
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	87 de       	rcall	.-754    	; 0xd0 <get_button>
 3c2:	89 2b       	or	r24, r25
 3c4:	69 f0       	breq	.+26     	; 0x3e0 <main+0xba>
		{
			button2_state = !button2_state;
 3c6:	c1 e0       	ldi	r28, 0x01	; 1
 3c8:	e1 14       	cp	r14, r1
 3ca:	f1 04       	cpc	r15, r1
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <main+0xaa>
			
			if (button2_state)
 3ce:	c0 e0       	ldi	r28, 0x00	; 0
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
			{
				shift_left_keep_ledon();
 3d2:	ef 28       	or	r14, r15
 3d4:	19 f4       	brne	.+6      	; 0x3dc <main+0xb6>
			else
				shift_right_ledon();
		}
		if (get_button(BUTTON2, BUTTON2PIN))
		{
			button2_state = !button2_state;
 3d6:	c0 de       	rcall	.-640    	; 0x158 <shift_left_keep_ledon>
			if (button2_state)
			{
				shift_left_keep_ledon();
			}
			else
				shift_right_keep_ledon();
 3d8:	7e 01       	movw	r14, r28
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <main+0xba>
			else
				shift_right_ledon();
		}
		if (get_button(BUTTON2, BUTTON2PIN))
		{
			button2_state = !button2_state;
 3dc:	da de       	rcall	.-588    	; 0x192 <shift_right_keep_ledon>
				shift_left_keep_ledon();
			}
			else
				shift_right_keep_ledon();
		}
		if (get_button(BUTTON3, BUTTON3PIN))
 3de:	7e 01       	movw	r14, r28
 3e0:	67 e0       	ldi	r22, 0x07	; 7
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	73 de       	rcall	.-794    	; 0xd0 <get_button>
 3ea:	89 2b       	or	r24, r25
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <main+0xca>
		{
			button3_state = !button3_state;
 3ee:	a7 cf       	rjmp	.-178    	; 0x33e <main+0x18>
 3f0:	c1 e0       	ldi	r28, 0x01	; 1
 3f2:	c1 14       	cp	r12, r1
 3f4:	d1 04       	cpc	r13, r1
 3f6:	09 f0       	breq	.+2      	; 0x3fa <main+0xd4>
			
			if (button3_state)
 3f8:	c0 e0       	ldi	r28, 0x00	; 0
 3fa:	d0 e0       	ldi	r29, 0x00	; 0
			{
				floweron();
 3fc:	cd 28       	or	r12, r13
 3fe:	19 f4       	brne	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			else
				shift_right_keep_ledon();
		}
		if (get_button(BUTTON3, BUTTON3PIN))
		{
			button3_state = !button3_state;
 400:	2f df       	rcall	.-418    	; 0x260 <floweron>
 402:	6e 01       	movw	r12, r28
			if (button3_state)
			{
				floweron();
			}
			else
				floweroff();
 404:	9c cf       	rjmp	.-200    	; 0x33e <main+0x18>
 406:	5e df       	rcall	.-324    	; 0x2c4 <floweroff>
			else
				shift_right_keep_ledon();
		}
		if (get_button(BUTTON3, BUTTON3PIN))
		{
			button3_state = !button3_state;
 408:	6e 01       	movw	r12, r28
 40a:	99 cf       	rjmp	.-206    	; 0x33e <main+0x18>

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
