
11_AUTO_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00001b14  00001ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000066f  00800156  00800156  00001bfe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000218a  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012e2  00000000  00000000  0000408e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000150d  00000000  00000000  00005370  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000600  00000000  00000000  00006880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087e  00000000  00000000  00006e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e9e  00000000  00000000  000076fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000859c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	77 c0       	rjmp	.+238    	; 0xf0 <__ctors_end>
       2:	00 00       	nop
       4:	93 c0       	rjmp	.+294    	; 0x12c <__bad_interrupt>
       6:	00 00       	nop
       8:	91 c0       	rjmp	.+290    	; 0x12c <__bad_interrupt>
       a:	00 00       	nop
       c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	e7 c6       	rjmp	.+3534   	; 0xde4 <__vector_5>
      16:	00 00       	nop
      18:	32 c7       	rjmp	.+3684   	; 0xe7e <__vector_6>
      1a:	00 00       	nop
      1c:	7d c7       	rjmp	.+3834   	; 0xf18 <__vector_7>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	77 c0       	rjmp	.+238    	; 0x12c <__bad_interrupt>
      3e:	00 00       	nop
      40:	bd c2       	rjmp	.+1402   	; 0x5bc <__vector_16>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	f8 c5       	rjmp	.+3056   	; 0xc3a <__vector_18>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	6b c0       	rjmp	.+214    	; 0x12c <__bad_interrupt>
      56:	00 00       	nop
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	63 c0       	rjmp	.+198    	; 0x12c <__bad_interrupt>
      66:	00 00       	nop
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
      76:	00 00       	nop
      78:	72 c6       	rjmp	.+3300   	; 0xd5e <__vector_30>
      7a:	00 00       	nop
      7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ca 02       	muls	r28, r26
      8e:	d7 02       	muls	r29, r23
      90:	d7 02       	muls	r29, r23
      92:	d7 02       	muls	r29, r23
      94:	c6 02       	muls	r28, r22
      96:	d7 02       	muls	r29, r23
      98:	d7 02       	muls	r29, r23
      9a:	d7 02       	muls	r29, r23
      9c:	d7 02       	muls	r29, r23
      9e:	d7 02       	muls	r29, r23
      a0:	ce 02       	muls	r28, r30
      a2:	d7 02       	muls	r29, r23
      a4:	d7 02       	muls	r29, r23
      a6:	d7 02       	muls	r29, r23
      a8:	d7 02       	muls	r29, r23
      aa:	d7 02       	muls	r29, r23
      ac:	d2 02       	muls	r29, r18
      ae:	d6 02       	muls	r29, r22
      b0:	d7 02       	muls	r29, r23
      b2:	d7 02       	muls	r29, r23
      b4:	d7 02       	muls	r29, r23
      b6:	d7 02       	muls	r29, r23
      b8:	d7 02       	muls	r29, r23
      ba:	d7 02       	muls	r29, r23
      bc:	d7 02       	muls	r29, r23
      be:	d7 02       	muls	r29, r23
      c0:	d7 02       	muls	r29, r23
      c2:	d7 02       	muls	r29, r23
      c4:	d7 02       	muls	r29, r23
      c6:	d7 02       	muls	r29, r23
      c8:	d7 02       	muls	r29, r23
      ca:	d7 02       	muls	r29, r23
      cc:	ca 02       	muls	r28, r26
      ce:	d7 02       	muls	r29, r23
      d0:	d7 02       	muls	r29, r23
      d2:	d7 02       	muls	r29, r23
      d4:	c6 02       	muls	r28, r22
      d6:	d7 02       	muls	r29, r23
      d8:	d7 02       	muls	r29, r23
      da:	d7 02       	muls	r29, r23
      dc:	d7 02       	muls	r29, r23
      de:	d7 02       	muls	r29, r23
      e0:	ce 02       	muls	r28, r30
      e2:	d7 02       	muls	r29, r23
      e4:	d7 02       	muls	r29, r23
      e6:	d7 02       	muls	r29, r23
      e8:	d7 02       	muls	r29, r23
      ea:	d7 02       	muls	r29, r23
      ec:	d2 02       	muls	r29, r18
      ee:	d6 02       	muls	r29, r22

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d0 e1       	ldi	r29, 0x10	; 16
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	11 e0       	ldi	r17, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	e4 e1       	ldi	r30, 0x14	; 20
     104:	fb e1       	ldi	r31, 0x1B	; 27
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0b bf       	out	0x3b, r16	; 59
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x14>
     10c:	07 90       	elpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	a6 35       	cpi	r26, 0x56	; 86
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0x10>

00000116 <__do_clear_bss>:
     116:	27 e0       	ldi	r18, 0x07	; 7
     118:	a6 e5       	ldi	r26, 0x56	; 86
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	a5 3c       	cpi	r26, 0xC5	; 197
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	b3 d2       	rcall	.+1382   	; 0x68e <main>
     128:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <init_button>:

int button0_state = 0;

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN /*| 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN*/);
     12e:	8a b3       	in	r24, 0x1a	; 26
     130:	8f 7b       	andi	r24, 0xBF	; 191
     132:	8a bb       	out	0x1a, r24	; 26
     134:	08 95       	ret

00000136 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE/*, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE*/}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
     136:	29 b3       	in	r18, 0x19	; 25
     138:	42 2f       	mov	r20, r18
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	02 c0       	rjmp	.+4      	; 0x146 <get_button+0x10>
     142:	22 0f       	add	r18, r18
     144:	33 1f       	adc	r19, r19
     146:	6a 95       	dec	r22
     148:	e2 f7       	brpl	.-8      	; 0x142 <get_button+0xc>
     14a:	24 23       	and	r18, r20
     14c:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
     14e:	21 15       	cp	r18, r1
     150:	31 05       	cpc	r19, r1
     152:	b9 f0       	breq	.+46     	; 0x182 <get_button+0x4c>
     154:	fc 01       	movw	r30, r24
     156:	ea 5a       	subi	r30, 0xAA	; 170
     158:	fe 4f       	sbci	r31, 0xFE	; 254
     15a:	40 81       	ld	r20, Z
     15c:	41 11       	cpse	r20, r1
     15e:	11 c0       	rjmp	.+34     	; 0x182 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     160:	2f ef       	ldi	r18, 0xFF	; 255
     162:	3d ee       	ldi	r19, 0xED	; 237
     164:	42 e0       	ldi	r20, 0x02	; 2
     166:	21 50       	subi	r18, 0x01	; 1
     168:	30 40       	sbci	r19, 0x00	; 0
     16a:	40 40       	sbci	r20, 0x00	; 0
     16c:	e1 f7       	brne	.-8      	; 0x166 <get_button+0x30>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <get_button+0x3a>
     170:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     172:	fc 01       	movw	r30, r24
     174:	ea 5a       	subi	r30, 0xAA	; 170
     176:	fe 4f       	sbci	r31, 0xFE	; 254
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     182:	fc 01       	movw	r30, r24
     184:	ea 5a       	subi	r30, 0xAA	; 170
     186:	fe 4f       	sbci	r31, 0xFE	; 254
     188:	40 81       	ld	r20, Z
     18a:	41 30       	cpi	r20, 0x01	; 1
     18c:	91 f4       	brne	.+36     	; 0x1b2 <get_button+0x7c>
     18e:	23 2b       	or	r18, r19
     190:	99 f4       	brne	.+38     	; 0x1b8 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     192:	fc 01       	movw	r30, r24
     194:	ea 5a       	subi	r30, 0xAA	; 170
     196:	fe 4f       	sbci	r31, 0xFE	; 254
     198:	10 82       	st	Z, r1
     19a:	8f ef       	ldi	r24, 0xFF	; 255
     19c:	9d ee       	ldi	r25, 0xED	; 237
     19e:	22 e0       	ldi	r18, 0x02	; 2
     1a0:	81 50       	subi	r24, 0x01	; 1
     1a2:	90 40       	sbci	r25, 0x00	; 0
     1a4:	20 40       	sbci	r18, 0x00	; 0
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <get_button+0x6a>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <get_button+0x74>
     1aa:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	08 95       	ret
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
}
     1bc:	08 95       	ret

000001be <auto_mode_check>:

void auto_mode_check(void)
{
	if (get_button(BUTTON0, BUTTON0PIN))
     1be:	66 e0       	ldi	r22, 0x06	; 6
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	b7 df       	rcall	.-146    	; 0x136 <get_button>
     1c8:	89 2b       	or	r24, r25
     1ca:	71 f0       	breq	.+28     	; 0x1e8 <auto_mode_check+0x2a>
	{
		button0_state = !button0_state;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <button0_state>
     1d4:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <button0_state+0x1>
     1d8:	23 2b       	or	r18, r19
     1da:	11 f0       	breq	.+4      	; 0x1e0 <auto_mode_check+0x22>
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <button0_state+0x1>
     1e4:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <button0_state>
	}
	
	if (button0_state)
     1e8:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <button0_state>
     1ec:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <button0_state+0x1>
     1f0:	89 2b       	or	r24, r25
     1f2:	39 f0       	breq	.+14     	; 0x202 <auto_mode_check+0x44>
	{
		AUTO_RUN_LED_PORT |= 1 << AUTO_RUN_LED_PIN; // LED ON
     1f4:	e5 e6       	ldi	r30, 0x65	; 101
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	88 60       	ori	r24, 0x08	; 8
		auto_start();
     1fc:	80 83       	st	Z, r24
     1fe:	cf d2       	rcall	.+1438   	; 0x79e <auto_start>
     200:	06 c0       	rjmp	.+12     	; 0x20e <auto_mode_check+0x50>
	}
	else
	{
		AUTO_RUN_LED_PORT &= ~(1 << AUTO_RUN_LED_PIN); // LED OFF
     202:	e5 e6       	ldi	r30, 0x65	; 101
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	80 81       	ld	r24, Z
     208:	87 7f       	andi	r24, 0xF7	; 247
		stop();
     20a:	80 83       	st	Z, r24
     20c:	bb d2       	rcall	.+1398   	; 0x784 <stop>
	}
	func_state = AUTO_MODE;
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <func_state+0x1>
     216:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <func_state>
     21a:	08 95       	ret

0000021c <init_fnd>:
extern volatile uint32_t fnd_refreshrate; // fnd 잔상효과를 유지하기 위한 변수 2ms
extern volatile uint32_t msec_count;

void init_fnd(void)
{
	FND_DATA_DDR = 0xff;
     21c:	8f ef       	ldi	r24, 0xFF	; 255
     21e:	84 bb       	out	0x14, r24	; 20
	//FND_DIGIT_DDR |= 0xf0; //자리 수 선택 핀 4 5 6 7
	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 |
     220:	e1 e6       	ldi	r30, 0x61	; 97
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	80 6f       	ori	r24, 0xF0	; 240
     228:	80 83       	st	Z, r24
					 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4;


	FND_DATA_PORT = 0x00; // FND를 all off
     22a:	15 ba       	out	0x15, r1	; 21
     22c:	08 95       	ret

0000022e <fnd_display>:
}



void fnd_display(int *run_state)
{
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	2f 97       	sbiw	r28, 0x0f	; 15
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
     242:	ac 01       	movw	r20, r24
						  // 0      1      2      3      4      5      6      7      8      9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f
     244:	9f e0       	ldi	r25, 0x0F	; 15
     246:	e6 e1       	ldi	r30, 0x16	; 22
     248:	f1 e0       	ldi	r31, 0x01	; 1
     24a:	de 01       	movw	r26, r28
     24c:	11 96       	adiw	r26, 0x01	; 1
     24e:	01 90       	ld	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	9a 95       	dec	r25
     254:	e1 f7       	brne	.-8      	; 0x24e <fnd_display+0x20>
		, ~0x8e, ~0x83, ~0xc7, ~0xaf
		};

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     256:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <digit_select.1752>
     25a:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <digit_select.1752+0x1>
     25e:	21 30       	cpi	r18, 0x01	; 1
     260:	31 05       	cpc	r19, r1
     262:	39 f1       	breq	.+78     	; 0x2b2 <fnd_display+0x84>
     264:	1c f4       	brge	.+6      	; 0x26c <fnd_display+0x3e>
     266:	23 2b       	or	r18, r19
     268:	51 f0       	breq	.+20     	; 0x27e <fnd_display+0x50>
     26a:	91 c0       	rjmp	.+290    	; 0x38e <fnd_display+0x160>
     26c:	22 30       	cpi	r18, 0x02	; 2
     26e:	31 05       	cpc	r19, r1
     270:	09 f4       	brne	.+2      	; 0x274 <fnd_display+0x46>
     272:	41 c0       	rjmp	.+130    	; 0x2f6 <fnd_display+0xc8>
     274:	23 30       	cpi	r18, 0x03	; 3
     276:	31 05       	cpc	r19, r1
     278:	09 f4       	brne	.+2      	; 0x27c <fnd_display+0x4e>
     27a:	7a c0       	rjmp	.+244    	; 0x370 <fnd_display+0x142>
     27c:	88 c0       	rjmp	.+272    	; 0x38e <fnd_display+0x160>
	{
		case 0 :

			FND_DIGIT_PORT = ~0x80;
     27e:	8f e7       	ldi	r24, 0x7F	; 127
     280:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     284:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <sec_count>
     288:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <sec_count+0x1>
     28c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <sec_count+0x2>
     290:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <sec_count+0x3>
     294:	2a e0       	ldi	r18, 0x0A	; 10
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__udivmodsi4>
     2a0:	e1 e0       	ldi	r30, 0x01	; 1
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	ec 0f       	add	r30, r28
     2a6:	fd 1f       	adc	r31, r29
     2a8:	e6 0f       	add	r30, r22
     2aa:	f7 1f       	adc	r31, r23
     2ac:	80 81       	ld	r24, Z
     2ae:	85 bb       	out	0x15, r24	; 21
		break;
     2b0:	6e c0       	rjmp	.+220    	; 0x38e <fnd_display+0x160>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     2b2:	8f eb       	ldi	r24, 0xBF	; 191
     2b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     2b8:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <sec_count>
     2bc:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <sec_count+0x1>
     2c0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <sec_count+0x2>
     2c4:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <sec_count+0x3>
     2c8:	2a e0       	ldi	r18, 0x0A	; 10
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__udivmodsi4>
     2d4:	ca 01       	movw	r24, r20
     2d6:	b9 01       	movw	r22, r18
     2d8:	26 e0       	ldi	r18, 0x06	; 6
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__udivmodsi4>
     2e4:	e1 e0       	ldi	r30, 0x01	; 1
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	ec 0f       	add	r30, r28
     2ea:	fd 1f       	adc	r31, r29
     2ec:	e6 0f       	add	r30, r22
     2ee:	f7 1f       	adc	r31, r23
     2f0:	80 81       	ld	r24, Z
     2f2:	85 bb       	out	0x15, r24	; 21
		break;
     2f4:	4c c0       	rjmp	.+152    	; 0x38e <fnd_display+0x160>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     2f6:	8f ed       	ldi	r24, 0xDF	; 223
     2f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		if (sec_count % 2 == 1)
     2fc:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <sec_count>
     300:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <sec_count+0x1>
     304:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <sec_count+0x2>
     308:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <sec_count+0x3>
     30c:	60 ff       	sbrs	r22, 0
     30e:	19 c0       	rjmp	.+50     	; 0x342 <fnd_display+0x114>
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     310:	2c e3       	ldi	r18, 0x3C	; 60
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__udivmodsi4>
     31c:	ca 01       	movw	r24, r20
     31e:	b9 01       	movw	r22, r18
     320:	2a e0       	ldi	r18, 0x0A	; 10
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__udivmodsi4>
     32c:	e1 e0       	ldi	r30, 0x01	; 1
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	ec 0f       	add	r30, r28
     332:	fd 1f       	adc	r31, r29
     334:	e6 0f       	add	r30, r22
     336:	f7 1f       	adc	r31, r23
     338:	90 81       	ld	r25, Z
     33a:	8b 85       	ldd	r24, Y+11	; 0x0b
     33c:	89 2b       	or	r24, r25
     33e:	85 bb       	out	0x15, r24	; 21
     340:	26 c0       	rjmp	.+76     	; 0x38e <fnd_display+0x160>
		else
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10]; // 1단위 분
     342:	2c e3       	ldi	r18, 0x3C	; 60
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e0       	ldi	r20, 0x00	; 0
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__udivmodsi4>
     34e:	ca 01       	movw	r24, r20
     350:	b9 01       	movw	r22, r18
     352:	2a e0       	ldi	r18, 0x0A	; 10
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	40 e0       	ldi	r20, 0x00	; 0
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__udivmodsi4>
     35e:	e1 e0       	ldi	r30, 0x01	; 1
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	ec 0f       	add	r30, r28
     364:	fd 1f       	adc	r31, r29
     366:	e6 0f       	add	r30, r22
     368:	f7 1f       	adc	r31, r23
     36a:	80 81       	ld	r24, Z
     36c:	85 bb       	out	0x15, r24	; 21
     36e:	0f c0       	rjmp	.+30     	; 0x38e <fnd_display+0x160>
		break;

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     370:	8f ee       	ldi	r24, 0xEF	; 239
     372:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		
		FND_DATA_PORT = fnd_font[*run_state+11]; // 10단위 분
     376:	da 01       	movw	r26, r20
     378:	ed 91       	ld	r30, X+
     37a:	fc 91       	ld	r31, X
     37c:	3b 96       	adiw	r30, 0x0b	; 11
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	8c 0f       	add	r24, r28
     384:	9d 1f       	adc	r25, r29
     386:	e8 0f       	add	r30, r24
     388:	f9 1f       	adc	r31, r25
     38a:	80 81       	ld	r24, Z
     38c:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
     38e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <digit_select.1752>
     392:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <digit_select.1752+0x1>
     396:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
     398:	83 70       	andi	r24, 0x03	; 3
     39a:	90 78       	andi	r25, 0x80	; 128
     39c:	99 23       	and	r25, r25
     39e:	24 f4       	brge	.+8      	; 0x3a8 <fnd_display+0x17a>
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	8c 6f       	ori	r24, 0xFC	; 252
     3a4:	9f 6f       	ori	r25, 0xFF	; 255
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <digit_select.1752+0x1>
     3ac:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <digit_select.1752>
}
     3b0:	2f 96       	adiw	r28, 0x0f	; 15
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	08 95       	ret

000003c2 <I2C_init>:
 */ 
#include <avr/io.h>
#include "I2C.h"

void I2C_init(unsigned int baud){
	TWBR = baud;
     3c2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     3c6:	08 95       	ret

000003c8 <I2C_start>:
}

void I2C_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     3c8:	84 ea       	ldi	r24, 0xA4	; 164
     3ca:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));  // 시작 완료 대기
     3ce:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     3d2:	88 23       	and	r24, r24
     3d4:	e4 f7       	brge	.-8      	; 0x3ce <I2C_start+0x6>
}
     3d6:	08 95       	ret

000003d8 <I2C_transmit>:

void I2C_transmit(uint8_t data)
{
	TWDR = data;
     3d8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
     3dc:	84 e8       	ldi	r24, 0x84	; 132
     3de:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
     3e2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     3e6:	88 23       	and	r24, r24
     3e8:	e4 f7       	brge	.-8      	; 0x3e2 <I2C_transmit+0xa>
}
     3ea:	08 95       	ret

000003ec <I2C_stop>:
	I2C_stop();
}

void I2C_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     3ec:	84 e9       	ldi	r24, 0x94	; 148
     3ee:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     3f2:	08 95       	ret

000003f4 <I2C_write_byte>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
}

void I2C_write_byte(uint8_t address, uint8_t data)
{
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	d8 2f       	mov	r29, r24
     3fa:	c6 2f       	mov	r28, r22
	I2C_start();
     3fc:	e5 df       	rcall	.-54     	; 0x3c8 <I2C_start>
	I2C_transmit(address);
     3fe:	8d 2f       	mov	r24, r29
     400:	eb df       	rcall	.-42     	; 0x3d8 <I2C_transmit>
	I2C_transmit(data);
     402:	8c 2f       	mov	r24, r28
     404:	e9 df       	rcall	.-46     	; 0x3d8 <I2C_transmit>
	I2C_stop();
     406:	f2 df       	rcall	.-28     	; 0x3ec <I2C_stop>
     408:	df 91       	pop	r29
}
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <I2C_LCD_write_data>:
     40e:	1f 93       	push	r17
// 		_delay_ms(100); //프로토콜에 의해 실행되므로, 데이터를 다 받을때까지 기다려야한다.
	}
}
// 1byte를 write
void I2C_LCD_write_data(uint8_t data)
{
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	00 d0       	rcall	.+0      	; 0x416 <I2C_LCD_write_data+0x8>
     416:	00 d0       	rcall	.+0      	; 0x418 <I2C_LCD_write_data+0xa>
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
	char data_u, data_l;
	uint8_t data_t[4] = {0,};
		
	data_u = (data&0xf0);      // 상위 4bit 데이터
     41c:	28 2f       	mov	r18, r24
     41e:	20 7f       	andi	r18, 0xF0	; 240
	data_l = ((data<<4)&0xf0); // 하위 4bit 데이터
     420:	30 e1       	ldi	r19, 0x10	; 16
     422:	83 9f       	mul	r24, r19
     424:	c0 01       	movw	r24, r0
     426:	11 24       	eor	r1, r1
	data_t[0] = data_u|0x0D;   //en=1, rs=1           |D7|D6|D5|D4|X|E|RW|RS|
     428:	92 2f       	mov	r25, r18
     42a:	9d 60       	ori	r25, 0x0D	; 13
     42c:	99 83       	std	Y+1, r25	; 0x01
	data_t[1] = data_u|0x09;   //en=0, rs=1
     42e:	29 60       	ori	r18, 0x09	; 9
     430:	2a 83       	std	Y+2, r18	; 0x02
	data_t[2] = data_l|0x0D;   //en=1, rs=1
     432:	98 2f       	mov	r25, r24
     434:	9d 60       	ori	r25, 0x0D	; 13
     436:	9b 83       	std	Y+3, r25	; 0x03
	data_t[3] = data_l|0x09;   //en=0, rs=1
     438:	89 60       	ori	r24, 0x09	; 9
     43a:	8c 83       	std	Y+4, r24	; 0x04

	for(char i=0;i<4;i++){
     43c:	10 e0       	ldi	r17, 0x00	; 0
     43e:	0a c0       	rjmp	.+20     	; 0x454 <I2C_LCD_write_data+0x46>
		I2C_write_byte(SLA_W, data_t[i]);
     440:	e1 e0       	ldi	r30, 0x01	; 1
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	ec 0f       	add	r30, r28
     446:	fd 1f       	adc	r31, r29
     448:	e1 0f       	add	r30, r17
     44a:	f1 1d       	adc	r31, r1
     44c:	60 81       	ld	r22, Z
     44e:	8e e4       	ldi	r24, 0x4E	; 78
     450:	d1 df       	rcall	.-94     	; 0x3f4 <I2C_write_byte>
	data_t[0] = data_u|0x0D;   //en=1, rs=1           |D7|D6|D5|D4|X|E|RW|RS|
	data_t[1] = data_u|0x09;   //en=0, rs=1
	data_t[2] = data_l|0x0D;   //en=1, rs=1
	data_t[3] = data_l|0x09;   //en=0, rs=1

	for(char i=0;i<4;i++){
     452:	1f 5f       	subi	r17, 0xFF	; 255
     454:	14 30       	cpi	r17, 0x04	; 4
     456:	a0 f3       	brcs	.-24     	; 0x440 <I2C_LCD_write_data+0x32>
		I2C_write_byte(SLA_W, data_t[i]);
	}
}
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	08 95       	ret

00000468 <I2C_LCD_write_command>:

void I2C_LCD_write_command(uint8_t command)
{
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	00 d0       	rcall	.+0      	; 0x470 <I2C_LCD_write_command+0x8>
     470:	00 d0       	rcall	.+0      	; 0x472 <I2C_LCD_write_command+0xa>
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (command&0xf0);      // command의 상위 4bit 저장
     476:	28 2f       	mov	r18, r24
     478:	20 7f       	andi	r18, 0xF0	; 240
	data_l = ((command<<4)&0xf0); // command의 하위 4bit 저장
     47a:	30 e1       	ldi	r19, 0x10	; 16
     47c:	83 9f       	mul	r24, r19
     47e:	c0 01       	movw	r24, r0
     480:	11 24       	eor	r1, r1
	data_t[0] = data_u|0x0C;  //en=1, rs=0           |D7|D6|D5|D4|X|E|RW|RS|
     482:	92 2f       	mov	r25, r18
     484:	9c 60       	ori	r25, 0x0C	; 12
     486:	99 83       	std	Y+1, r25	; 0x01
	data_t[1] = data_u|0x08;  //en=0, rs=0
     488:	28 60       	ori	r18, 0x08	; 8
     48a:	2a 83       	std	Y+2, r18	; 0x02
	data_t[2] = data_l|0x0C;  //en=1, rs=0
     48c:	98 2f       	mov	r25, r24
     48e:	9c 60       	ori	r25, 0x0C	; 12
     490:	9b 83       	std	Y+3, r25	; 0x03
	data_t[3] = data_l|0x08;  //en=0, rs=0
     492:	88 60       	ori	r24, 0x08	; 8
     494:	8c 83       	std	Y+4, r24	; 0x04
	
	for(char i=0;i<4;i++){
     496:	10 e0       	ldi	r17, 0x00	; 0
     498:	0a c0       	rjmp	.+20     	; 0x4ae <I2C_LCD_write_command+0x46>
		I2C_write_byte(SLA_W, data_t[i]);
     49a:	e1 e0       	ldi	r30, 0x01	; 1
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	ec 0f       	add	r30, r28
     4a0:	fd 1f       	adc	r31, r29
     4a2:	e1 0f       	add	r30, r17
     4a4:	f1 1d       	adc	r31, r1
     4a6:	60 81       	ld	r22, Z
     4a8:	8e e4       	ldi	r24, 0x4E	; 78
     4aa:	a4 df       	rcall	.-184    	; 0x3f4 <I2C_write_byte>
	data_t[0] = data_u|0x0C;  //en=1, rs=0           |D7|D6|D5|D4|X|E|RW|RS|
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
	
	for(char i=0;i<4;i++){
     4ac:	1f 5f       	subi	r17, 0xFF	; 255
     4ae:	14 30       	cpi	r17, 0x04	; 4
     4b0:	a0 f3       	brcs	.-24     	; 0x49a <I2C_LCD_write_command+0x32>
		I2C_write_byte(SLA_W, data_t[i]);
	}
}
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	08 95       	ret

000004c2 <I2C_LCD_clear>:

// 화면 clear
// 화면에 있는 내용만 지운다. 
void I2C_LCD_clear(void)
{
	I2C_LCD_write_command(COMMAND_CLEAR_DISPLAY);
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	d1 df       	rcall	.-94     	; 0x468 <I2C_LCD_write_command>
     4c6:	8f e3       	ldi	r24, 0x3F	; 63
     4c8:	9f e1       	ldi	r25, 0x1F	; 31
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <I2C_LCD_clear+0x8>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <I2C_LCD_clear+0xe>
     4d0:	00 00       	nop
     4d2:	08 95       	ret

000004d4 <I2C_LCD_init>:
}

// LCD를 초기화
void I2C_LCD_init(void)
{
	I2C_init(10000);
     4d4:	80 e1       	ldi	r24, 0x10	; 16
     4d6:	97 e2       	ldi	r25, 0x27	; 39
     4d8:	74 df       	rcall	.-280    	; 0x3c2 <I2C_init>
     4da:	2f ef       	ldi	r18, 0xFF	; 255
     4dc:	80 e7       	ldi	r24, 0x70	; 112
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	21 50       	subi	r18, 0x01	; 1
     4e2:	80 40       	sbci	r24, 0x00	; 0
     4e4:	90 40       	sbci	r25, 0x00	; 0
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <I2C_LCD_init+0xc>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <I2C_LCD_init+0x16>
     4ea:	00 00       	nop
	_delay_ms(50);
	//Initialization of HD44780-based LCD (4-bit HW)
	I2C_LCD_write_command(0x33);
     4ec:	83 e3       	ldi	r24, 0x33	; 51
     4ee:	bc df       	rcall	.-136    	; 0x468 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x32);
     4f0:	82 e3       	ldi	r24, 0x32	; 50
     4f2:	ba df       	rcall	.-140    	; 0x468 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x28);   //Function Set 4-bit mode
     4f4:	88 e2       	ldi	r24, 0x28	; 40
     4f6:	b8 df       	rcall	.-144    	; 0x468 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x0c);   //Display On/Off Control
     4f8:	8c e0       	ldi	r24, 0x0C	; 12
     4fa:	b6 df       	rcall	.-148    	; 0x468 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x06);   //Entry mode set
     4fc:	86 e0       	ldi	r24, 0x06	; 6
     4fe:	b4 df       	rcall	.-152    	; 0x468 <I2C_LCD_write_command>
     500:	81 e0       	ldi	r24, 0x01	; 1
	I2C_LCD_write_command(0x01);   //Clear Display
     502:	b2 df       	rcall	.-156    	; 0x468 <I2C_LCD_write_command>
     504:	8f e3       	ldi	r24, 0x3F	; 63
     506:	9c e9       	ldi	r25, 0x9C	; 156
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	f1 f7       	brne	.-4      	; 0x508 <I2C_LCD_init+0x34>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <I2C_LCD_init+0x3a>
     50e:	00 00       	nop
     510:	08 95       	ret

00000512 <I2C_LCD_write_string>:
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
	//Minimum delay to wait before driving LCD module
	_delay_ms(10);
}
// 현재의 xy좌표에 printf처럼 스트링 값을 출력 
void I2C_LCD_write_string(char *string)
{
     516:	cf 93       	push	r28
     518:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i=0; string[i]; i++) //"hello !!\0" 마지막 널문자에서 조건 거짓이 되어 빠져나온다.
     51a:	c0 e0       	ldi	r28, 0x00	; 0
     51c:	02 c0       	rjmp	.+4      	; 0x522 <I2C_LCD_write_string+0x10>
	I2C_LCD_write_data(string[i]);
     51e:	77 df       	rcall	.-274    	; 0x40e <I2C_LCD_write_data>
}
// 현재의 xy좌표에 printf처럼 스트링 값을 출력 
void I2C_LCD_write_string(char *string)
{
	uint8_t i;
	for(i=0; string[i]; i++) //"hello !!\0" 마지막 널문자에서 조건 거짓이 되어 빠져나온다.
     520:	cf 5f       	subi	r28, 0xFF	; 255
     522:	f8 01       	movw	r30, r16
     524:	ec 0f       	add	r30, r28
     526:	f1 1d       	adc	r31, r1
     528:	80 81       	ld	r24, Z
     52a:	81 11       	cpse	r24, r1
     52c:	f8 cf       	rjmp	.-16     	; 0x51e <I2C_LCD_write_string+0xc>
	I2C_LCD_write_data(string[i]);
}
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <I2C_LCD_goto_XY>:

// 커서를 x,y좌표로 이동
void I2C_LCD_goto_XY(uint8_t row, uint8_t col)
{
	col %= 16;
     536:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2;
     538:	81 70       	andi	r24, 0x01	; 1
	
	uint8_t address = (0x40 * row) + col;
     53a:	90 e4       	ldi	r25, 0x40	; 64
     53c:	89 9f       	mul	r24, r25
     53e:	60 0d       	add	r22, r0
     540:	11 24       	eor	r1, r1
     542:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + address;
	
	I2C_LCD_write_command(command);
     544:	80 58       	subi	r24, 0x80	; 128
     546:	90 cf       	rjmp	.-224    	; 0x468 <I2C_LCD_write_command>
     548:	08 95       	ret

0000054a <I2C_LCD_write_string_XY>:
}

// x,y좌표로 이동을 하고 string값을 출력 한다. 
void I2C_LCD_write_string_XY(uint8_t row, uint8_t col, char *string)
{
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	ea 01       	movw	r28, r20
	I2C_LCD_goto_XY(row, col);
     550:	f2 df       	rcall	.-28     	; 0x536 <I2C_LCD_goto_XY>
	I2C_LCD_write_string(string);
     552:	ce 01       	movw	r24, r28
     554:	de df       	rcall	.-68     	; 0x512 <I2C_LCD_write_string>
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <init_led>:

void init_led(void);

void init_led(void)
{
	AUTO_RUN_LED_PORT_DDR |= 1 << AUTO_RUN_LED_PIN;
     55c:	e4 e6       	ldi	r30, 0x64	; 100
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	80 81       	ld	r24, Z
     562:	88 60       	ori	r24, 0x08	; 8
     564:	80 83       	st	Z, r24
     566:	08 95       	ret

00000568 <auto_mode>:
{
	if (button0_state)
	{
		/// 자율주행 코드
	}
	func_state = MANUAL_MODE;
     568:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <func_state+0x1>
     56c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <func_state>
     570:	08 95       	ret

00000572 <manual_mode>:
	//sei();    // 전역적(대문)으로 interrupt 허용
}

void manual_mode(void)
{
	switch (bt_data)
     572:	e0 91 be 07 	lds	r30, 0x07BE	; 0x8007be <bt_data>
     576:	8e 2f       	mov	r24, r30
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	fc 01       	movw	r30, r24
     57c:	e2 54       	subi	r30, 0x42	; 66
     57e:	f1 09       	sbc	r31, r1
     580:	e2 33       	cpi	r30, 0x32	; 50
     582:	f1 05       	cpc	r31, r1
     584:	a0 f4       	brcc	.+40     	; 0x5ae <manual_mode+0x3c>
     586:	ea 5b       	subi	r30, 0xBA	; 186
     588:	ff 4f       	sbci	r31, 0xFF	; 255
     58a:	b7 c7       	rjmp	.+3950   	; 0x14fa <__tablejump2__>
	{
		case 'F':
		case 'f':
			forward(500);
     58c:	84 ef       	ldi	r24, 0xF4	; 244
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	c1 d0       	rcall	.+386    	; 0x714 <forward>
			break;
     592:	0d c0       	rjmp	.+26     	; 0x5ae <manual_mode+0x3c>
			
		case 'B':
		case 'b':
			backward(500);
     594:	84 ef       	ldi	r24, 0xF4	; 244
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	cb d0       	rcall	.+406    	; 0x730 <backward>
			break;
     59a:	09 c0       	rjmp	.+18     	; 0x5ae <manual_mode+0x3c>
			
		case 'L':
		case 'l':
			turn_left(700);
     59c:	8c eb       	ldi	r24, 0xBC	; 188
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	d5 d0       	rcall	.+426    	; 0x74c <turn_left>
			break;
			
		case 'R':
		case 'r':
			turn_right(700);
     5a2:	05 c0       	rjmp	.+10     	; 0x5ae <manual_mode+0x3c>
     5a4:	8c eb       	ldi	r24, 0xBC	; 188
     5a6:	92 e0       	ldi	r25, 0x02	; 2
			break;
     5a8:	df d0       	rcall	.+446    	; 0x768 <turn_right>
			
		case 'S':
		case 's':
			stop();
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <manual_mode+0x3c>
     5ac:	eb d0       	rcall	.+470    	; 0x784 <stop>
			break;
			
		default:
			break;
	}
	func_state = DISTANCE_CHECK;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <func_state+0x1>
     5b6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <func_state>
     5ba:	08 95       	ret

000005bc <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     5bc:	1f 92       	push	r1
     5be:	0f 92       	push	r0
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	0f 92       	push	r0
     5c4:	11 24       	eor	r1, r1
     5c6:	8f 93       	push	r24
     5c8:	9f 93       	push	r25
     5ca:	af 93       	push	r26
     5cc:	bf 93       	push	r27
	TCNT0 = 6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
     5ce:	86 e0       	ldi	r24, 0x06	; 6
     5d0:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
     5d2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <msec_count>
     5d6:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <msec_count+0x1>
     5da:	a0 91 72 01 	lds	r26, 0x0172	; 0x800172 <msec_count+0x2>
     5de:	b0 91 73 01 	lds	r27, 0x0173	; 0x800173 <msec_count+0x3>
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	a1 1d       	adc	r26, r1
     5e6:	b1 1d       	adc	r27, r1
     5e8:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <msec_count>
     5ec:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <msec_count+0x1>
     5f0:	a0 93 72 01 	sts	0x0172, r26	; 0x800172 <msec_count+0x2>
     5f4:	b0 93 73 01 	sts	0x0173, r27	; 0x800173 <msec_count+0x3>
	fnd_refreshrate++;   // fnd 잔상효과 유지 하기 위한 timer 2ms
     5f8:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <fnd_refreshrate>
     5fc:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <fnd_refreshrate+0x1>
     600:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <fnd_refreshrate+0x2>
     604:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <fnd_refreshrate+0x3>
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	a1 1d       	adc	r26, r1
     60c:	b1 1d       	adc	r27, r1
     60e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <fnd_refreshrate>
     612:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <fnd_refreshrate+0x1>
     616:	a0 93 6e 01 	sts	0x016E, r26	; 0x80016e <fnd_refreshrate+0x2>
     61a:	b0 93 6f 01 	sts	0x016F, r27	; 0x80016f <fnd_refreshrate+0x3>
	ultrasonic_check_timer++;
     61e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ultrasonic_check_timer>
     622:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <ultrasonic_check_timer+0x1>
     626:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <ultrasonic_check_timer+0x2>
     62a:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <ultrasonic_check_timer+0x3>
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	a1 1d       	adc	r26, r1
     632:	b1 1d       	adc	r27, r1
     634:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <ultrasonic_check_timer>
     638:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <ultrasonic_check_timer+0x1>
     63c:	a0 93 6a 01 	sts	0x016A, r26	; 0x80016a <ultrasonic_check_timer+0x2>
     640:	b0 93 6b 01 	sts	0x016B, r27	; 0x80016b <ultrasonic_check_timer+0x3>
	lcd_refreshrate++;
     644:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <lcd_refreshrate>
     648:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <lcd_refreshrate+0x1>
     64c:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <lcd_refreshrate+0x2>
     650:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <lcd_refreshrate+0x3>
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	a1 1d       	adc	r26, r1
     658:	b1 1d       	adc	r27, r1
     65a:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <lcd_refreshrate>
     65e:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <lcd_refreshrate+0x1>
     662:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <lcd_refreshrate+0x2>
     666:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <lcd_refreshrate+0x3>
}
     66a:	bf 91       	pop	r27
     66c:	af 91       	pop	r26
     66e:	9f 91       	pop	r25
     670:	8f 91       	pop	r24
     672:	0f 90       	pop	r0
     674:	0f be       	out	0x3f, r0	; 63
     676:	0f 90       	pop	r0
     678:	1f 90       	pop	r1
     67a:	18 95       	reti

0000067c <init_timer0>:
	// 1. 분주비 계산
	// 16000000HZ/64 ==> 250,000HZ
	// 2. T(주기) 1가 잡아 먹는 시간 : 1/f = 1/250,000 ==> 0.000004sec(4us) : 0.004ms
	// 3. 8bit timer OV(OVflow) : 0.004ms x 256 = 0.001024sec --> 1.024ms
	// 그러면 정확히 1ms 를 재고 싶다면 0.004ms x 250개 = 0.001sec ==> 1ms
	TCNT0 = 6;   // TCNT : 0~256 ==> 1ms마다 TIMER0_OVF_vect로 진입한다.
     67c:	86 e0       	ldi	r24, 0x06	; 6
     67e:	82 bf       	out	0x32, r24	; 50
	// TCNT0 = 6로 설정을 한이유: 6~256 : 250개를 count(정확히 1MS를맞추기 위해서)
	//
	// 4 분주비를 설정 (250khz)
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     680:	83 b7       	in	r24, 0x33	; 51
     682:	84 60       	ori	r24, 0x04	; 4
     684:	83 bf       	out	0x33, r24	; 51
	// 5. TIMER0 OVERFLOW를 허용(enable)
	TIMSK |= 1 << TOIE0;  // TIMSK |= 0x01;
     686:	87 b7       	in	r24, 0x37	; 55
     688:	81 60       	ori	r24, 0x01	; 1
     68a:	87 bf       	out	0x37, r24	; 55
     68c:	08 95       	ret

0000068e <main>:
	lcd_refreshrate++;
}

int main(void)
{
	I2C_LCD_init();
     68e:	22 df       	rcall	.-444    	; 0x4d4 <I2C_LCD_init>
	init_led();
     690:	65 df       	rcall	.-310    	; 0x55c <init_led>
	init_fnd();
     692:	c4 dd       	rcall	.-1144   	; 0x21c <init_fnd>
	init_button();
     694:	4c dd       	rcall	.-1384   	; 0x12e <init_button>
	init_timer0();
     696:	f2 df       	rcall	.-28     	; 0x67c <init_timer0>
	init_uart0();
     698:	4e d3       	rcall	.+1692   	; 0xd36 <init_uart0>
     69a:	8f d3       	rcall	.+1822   	; 0xdba <init_uart1>
	init_uart1();
     69c:	16 d0       	rcall	.+44     	; 0x6ca <init_n289n>
     69e:	26 d0       	rcall	.+76     	; 0x6ec <init_timer1_pwm>
	init_n289n();
     6a0:	88 d4       	rcall	.+2320   	; 0xfb2 <init_ultrasonic>
     6a2:	80 e0       	ldi	r24, 0x00	; 0
	init_timer1_pwm();
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	90 93 c2 07 	sts	0x07C2, r25	; 0x8007c2 <__iob+0x3>
	init_ultrasonic(); // timer 3
     6aa:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <__iob+0x2>
	

	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     6ae:	78 94       	sei
     6b0:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <func_state>
     6b4:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <func_state+0x1>
	
	sei();     // 전역적으로 interrupt 허용
     6b8:	ee 0f       	add	r30, r30

	while (1)
	{
		pfunc[func_state] ();
     6ba:	ff 1f       	adc	r31, r31
     6bc:	e2 5f       	subi	r30, 0xF2	; 242
     6be:	fe 4f       	sbci	r31, 0xFE	; 254
     6c0:	01 90       	ld	r0, Z+
     6c2:	f0 81       	ld	r31, Z
     6c4:	e0 2d       	mov	r30, r0
     6c6:	09 95       	icall
     6c8:	f3 cf       	rjmp	.-26     	; 0x6b0 <main+0x22>

000006ca <init_n289n>:
	   1         1   : STOP
*/

void init_n289n(void)
{
	MOTOR_PWM_DDR |= 1 << MOTOR_LEFT_PORT_DDR | 1 << MOTOR_RIGHT_PORT_DDR; // DDR설정
     6ca:	87 b3       	in	r24, 0x17	; 23
     6cc:	80 66       	ori	r24, 0x60	; 96
     6ce:	87 bb       	out	0x17, r24	; 23
	MOTOR_DRIVER_DIRECTION_PORT_DDR |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3; // PF1234 출력으로 설정
     6d0:	e1 e6       	ldi	r30, 0x61	; 97
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	80 81       	ld	r24, Z
     6d6:	8f 60       	ori	r24, 0x0F	; 15
     6d8:	80 83       	st	Z, r24
	
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     6da:	e2 e6       	ldi	r30, 0x62	; 98
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	80 81       	ld	r24, Z
     6e0:	80 7f       	andi	r24, 0xF0	; 240
     6e2:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 2; // 자동차를 전진모드로 
     6e4:	80 81       	ld	r24, Z
     6e6:	85 60       	ori	r24, 0x05	; 5
     6e8:	80 83       	st	Z, r24
     6ea:	08 95       	ret

000006ec <init_timer1_pwm>:
	// 분주비 : 64 16000000HZ/64 ==> 250000HZ(250kHZ)
	// T=1/f 1/250000HZ ==> 0.000004sec (4us)
	// 250000HZ에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//              127                             : 0.5ms
	//              0x3ff(1023) --> 4ms
	TCCR1B |= 1 << CS11 | 1 << CS10;   // 분주비 64  P318 표14-1
     6ec:	8e b5       	in	r24, 0x2e	; 46
     6ee:	83 60       	ori	r24, 0x03	; 3
     6f0:	8e bd       	out	0x2e, r24	; 46
	
	// 모드 14: 고속 PWM timer1사용  (P327 표14-5)
	TCCR1A |= 1 << WGM11;   // TOP --> ICR1에 설정
     6f2:	8f b5       	in	r24, 0x2f	; 47
     6f4:	82 60       	ori	r24, 0x02	; 2
     6f6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM13 | 1 << WGM12;
     6f8:	8e b5       	in	r24, 0x2e	; 46
     6fa:	88 61       	ori	r24, 0x18	; 24
     6fc:	8e bd       	out	0x2e, r24	; 46
	
	// 비반전모드 top: ICR1 비교일치값(PWM) 지정 : OCR1A, OCR1B P350 표15-7
	// 비교일치 발생시 OCR1A, OCR1B의 출력 핀은 LOW로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR1A |= 1 << COM1A1;
     6fe:	8f b5       	in	r24, 0x2f	; 47
     700:	80 68       	ori	r24, 0x80	; 128
     702:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= 1 << COM1B1;
     704:	8f b5       	in	r24, 0x2f	; 47
     706:	80 62       	ori	r24, 0x20	; 32
     708:	8f bd       	out	0x2f, r24	; 47

	ICR1 = 0x3ff;  // 1023 ==> 4ms TOP : PWM 값
     70a:	8f ef       	ldi	r24, 0xFF	; 255
     70c:	93 e0       	ldi	r25, 0x03	; 3
     70e:	97 bd       	out	0x27, r25	; 39
     710:	86 bd       	out	0x26, r24	; 38
     712:	08 95       	ret

00000714 <forward>:
}

///////////////////////////////           수동모드          //////////////////////////////////////
void forward(int speed)
{
     714:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     716:	e2 e6       	ldi	r30, 0x62	; 98
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	90 81       	ld	r25, Z
     71c:	90 7f       	andi	r25, 0xF0	; 240
     71e:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     720:	90 81       	ld	r25, Z
     722:	95 60       	ori	r25, 0x05	; 5
     724:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     726:	3b bd       	out	0x2b, r19	; 43
     728:	2a bd       	out	0x2a, r18	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     72a:	39 bd       	out	0x29, r19	; 41
     72c:	28 bd       	out	0x28, r18	; 40
     72e:	08 95       	ret

00000730 <backward>:
}

void backward(int speed)
{
     730:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     732:	e2 e6       	ldi	r30, 0x62	; 98
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	90 81       	ld	r25, Z
     738:	90 7f       	andi	r25, 0xF0	; 240
     73a:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 3 | 1 << 1;  // 1010 후진 모드
     73c:	90 81       	ld	r25, Z
     73e:	9a 60       	ori	r25, 0x0A	; 10
     740:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     742:	3b bd       	out	0x2b, r19	; 43
     744:	2a bd       	out	0x2a, r18	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     746:	39 bd       	out	0x29, r19	; 41
     748:	28 bd       	out	0x28, r18	; 40
     74a:	08 95       	ret

0000074c <turn_left>:
}

void turn_left(int speed)
{
     74c:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     74e:	e2 e6       	ldi	r30, 0x62	; 98
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	90 81       	ld	r25, Z
     754:	90 7f       	andi	r25, 0xF0	; 240
     756:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     758:	90 81       	ld	r25, Z
     75a:	95 60       	ori	r25, 0x05	; 5
     75c:	90 83       	st	Z, r25
	
	OCR1A = 0;  // PB5 PWM 출력 port left
     75e:	1b bc       	out	0x2b, r1	; 43
     760:	1a bc       	out	0x2a, r1	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     762:	39 bd       	out	0x29, r19	; 41
     764:	28 bd       	out	0x28, r18	; 40
     766:	08 95       	ret

00000768 <turn_right>:
}

void turn_right(int speed)
{
     768:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     76a:	e2 e6       	ldi	r30, 0x62	; 98
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	90 81       	ld	r25, Z
     770:	90 7f       	andi	r25, 0xF0	; 240
     772:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     774:	90 81       	ld	r25, Z
     776:	95 60       	ori	r25, 0x05	; 5
     778:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     77a:	3b bd       	out	0x2b, r19	; 43
     77c:	2a bd       	out	0x2a, r18	; 42
	OCR1B = 0;  // PB6 PWM 출력 port right
     77e:	19 bc       	out	0x29, r1	; 41
     780:	18 bc       	out	0x28, r1	; 40
     782:	08 95       	ret

00000784 <stop>:
}

void stop(void)
{
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     784:	e2 e6       	ldi	r30, 0x62	; 98
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
     78a:	80 7f       	andi	r24, 0xF0	; 240
     78c:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3;  // stop 모드로 설정
     78e:	80 81       	ld	r24, Z
     790:	8f 60       	ori	r24, 0x0F	; 15
     792:	80 83       	st	Z, r24
	
	OCR1A = 0;  // PB5 PWM 출력 port left
     794:	1b bc       	out	0x2b, r1	; 43
     796:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;  // PB6 PWM 출력 port right
     798:	19 bc       	out	0x29, r1	; 41
     79a:	18 bc       	out	0x28, r1	; 40
     79c:	08 95       	ret

0000079e <auto_start>:
}
////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////         자동모드            //////////////////////////////////
void auto_start(void)
{
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	66 97       	sbiw	r28, 0x16	; 22
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
	int run_state;
	sec_count = 120;
     7b2:	88 e7       	ldi	r24, 0x78	; 120
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	a0 e0       	ldi	r26, 0x00	; 0
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     7be:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     7c2:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     7c6:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
	char sbuf[20];

	while(sec_count > 0)
     7ca:	21 c2       	rjmp	.+1090   	; 0xc0e <auto_start+0x470>
	{
		ultrasonic_trigger();
     7cc:	22 d4       	rcall	.+2116   	; 0x1012 <ultrasonic_trigger>
		if (msec_count >= 1000)
     7ce:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <msec_count>
     7d2:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <msec_count+0x1>
     7d6:	a0 91 72 01 	lds	r26, 0x0172	; 0x800172 <msec_count+0x2>
     7da:	b0 91 73 01 	lds	r27, 0x0173	; 0x800173 <msec_count+0x3>
     7de:	88 3e       	cpi	r24, 0xE8	; 232
     7e0:	93 40       	sbci	r25, 0x03	; 3
     7e2:	a1 05       	cpc	r26, r1
     7e4:	b1 05       	cpc	r27, r1
     7e6:	d8 f0       	brcs	.+54     	; 0x81e <auto_start+0x80>
		{
			msec_count = 0;
     7e8:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <msec_count>
     7ec:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <msec_count+0x1>
     7f0:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <msec_count+0x2>
     7f4:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <msec_count+0x3>
			sec_count--;
     7f8:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <sec_count>
     7fc:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <sec_count+0x1>
     800:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <sec_count+0x2>
     804:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <sec_count+0x3>
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	a1 09       	sbc	r26, r1
     80c:	b1 09       	sbc	r27, r1
     80e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <sec_count>
     812:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <sec_count+0x1>
     816:	a0 93 60 01 	sts	0x0160, r26	; 0x800160 <sec_count+0x2>
     81a:	b0 93 61 01 	sts	0x0161, r27	; 0x800161 <sec_count+0x3>
		} // 1초씩 감소

		if (fnd_refreshrate >= 2)
     81e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <fnd_refreshrate>
     822:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <fnd_refreshrate+0x1>
     826:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <fnd_refreshrate+0x2>
     82a:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <fnd_refreshrate+0x3>
     82e:	02 97       	sbiw	r24, 0x02	; 2
     830:	a1 05       	cpc	r26, r1
     832:	b1 05       	cpc	r27, r1
		{
			I2C_LCD_clear();
     834:	60 f0       	brcs	.+24     	; 0x84e <auto_start+0xb0>
     836:	45 de       	rcall	.-886    	; 0x4c2 <I2C_LCD_clear>
			fnd_refreshrate = 0;
     838:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <fnd_refreshrate>
     83c:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <fnd_refreshrate+0x1>
     840:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <fnd_refreshrate+0x2>
     844:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <fnd_refreshrate+0x3>
			fnd_display(&run_state);
     848:	ce 01       	movw	r24, r28
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	f0 dc       	rcall	.-1568   	; 0x22e <fnd_display>
		} // fnd와 lcd 표시

// 		volatile int gap1= ultrasonic_right_distance - ultrasonic_left_distance;
// 		volatile int gap2= ultrasonic_left_distance - ultrasonic_right_distance;

		sprintf(sbuf,"%3d", run_state);
     84e:	8a 81       	ldd	r24, Y+2	; 0x02
     850:	8f 93       	push	r24
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	8f 93       	push	r24
     856:	85 e2       	ldi	r24, 0x25	; 37
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	9f 93       	push	r25
     85c:	8f 93       	push	r24
     85e:	ce 01       	movw	r24, r28
     860:	03 96       	adiw	r24, 0x03	; 3
     862:	9f 93       	push	r25
     864:	8f 93       	push	r24
     866:	79 d6       	rcall	.+3314   	; 0x155a <sprintf>
		
		 if (ultrasonic_right_distance <= 3 && ultrasonic_center_distance <= 3)
     868:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
     86c:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	04 97       	sbiw	r24, 0x04	; 4
     87e:	74 f4       	brge	.+28     	; 0x89c <auto_start+0xfe>
     880:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     884:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     888:	04 97       	sbiw	r24, 0x04	; 4
     88a:	44 f4       	brge	.+16     	; 0x89c <auto_start+0xfe>
		{
			run_state = BACKWARD;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	9a 83       	std	Y+2, r25	; 0x02
			backward(600);
     892:	89 83       	std	Y+1, r24	; 0x01
     894:	88 e5       	ldi	r24, 0x58	; 88
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	4b df       	rcall	.-362    	; 0x730 <backward>
     89a:	b3 c1       	rjmp	.+870    	; 0xc02 <auto_start+0x464>
		}
		else if (ultrasonic_left_distance <= 3 && ultrasonic_center_distance <= 3)
     89c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
     8a0:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     8a4:	04 97       	sbiw	r24, 0x04	; 4
     8a6:	74 f4       	brge	.+28     	; 0x8c4 <auto_start+0x126>
     8a8:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     8ac:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     8b0:	04 97       	sbiw	r24, 0x04	; 4
     8b2:	44 f4       	brge	.+16     	; 0x8c4 <auto_start+0x126>
		{
			run_state = BACKWARD;
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	9a 83       	std	Y+2, r25	; 0x02
			backward(600);
     8ba:	89 83       	std	Y+1, r24	; 0x01
     8bc:	88 e5       	ldi	r24, 0x58	; 88
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	37 df       	rcall	.-402    	; 0x730 <backward>
     8c2:	9f c1       	rjmp	.+830    	; 0xc02 <auto_start+0x464>
		}
		else if (ultrasonic_left_distance <= 3 && ultrasonic_right_distance <= 3)
     8c4:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
     8c8:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     8cc:	04 97       	sbiw	r24, 0x04	; 4
     8ce:	74 f4       	brge	.+28     	; 0x8ec <auto_start+0x14e>
     8d0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
     8d4:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     8d8:	04 97       	sbiw	r24, 0x04	; 4
     8da:	44 f4       	brge	.+16     	; 0x8ec <auto_start+0x14e>
		{
			run_state = BACKWARD;
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	9a 83       	std	Y+2, r25	; 0x02
			backward(600);
     8e2:	89 83       	std	Y+1, r24	; 0x01
     8e4:	88 e5       	ldi	r24, 0x58	; 88
     8e6:	92 e0       	ldi	r25, 0x02	; 2
     8e8:	23 df       	rcall	.-442    	; 0x730 <backward>
     8ea:	8b c1       	rjmp	.+790    	; 0xc02 <auto_start+0x464>
		}
		else if (ultrasonic_left_distance <= 3 && ultrasonic_center_distance <= 3 && ultrasonic_right_distance <= 3)
     8ec:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
     8f0:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     8f4:	04 97       	sbiw	r24, 0x04	; 4
     8f6:	a4 f4       	brge	.+40     	; 0x920 <auto_start+0x182>
     8f8:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     8fc:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     900:	04 97       	sbiw	r24, 0x04	; 4
     902:	74 f4       	brge	.+28     	; 0x920 <auto_start+0x182>
     904:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
     908:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     90c:	04 97       	sbiw	r24, 0x04	; 4
		{
			run_state = BACKWARD;
     90e:	44 f4       	brge	.+16     	; 0x920 <auto_start+0x182>
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	9a 83       	std	Y+2, r25	; 0x02
			backward(600);
     916:	89 83       	std	Y+1, r24	; 0x01
     918:	88 e5       	ldi	r24, 0x58	; 88
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	09 df       	rcall	.-494    	; 0x730 <backward>
     91e:	71 c1       	rjmp	.+738    	; 0xc02 <auto_start+0x464>
		}
		else if(ultrasonic_right_distance - ultrasonic_left_distance < 4 && ultrasonic_left_distance - ultrasonic_right_distance < 4 && ultrasonic_center_distance >= 10)
     920:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
     924:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     928:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <ultrasonic_left_distance>
     92c:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     930:	82 1b       	sub	r24, r18
     932:	93 0b       	sbc	r25, r19
     934:	04 97       	sbiw	r24, 0x04	; 4
     936:	c4 f4       	brge	.+48     	; 0x968 <auto_start+0x1ca>
     938:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
     93c:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     940:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <ultrasonic_right_distance>
     944:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     948:	82 1b       	sub	r24, r18
     94a:	93 0b       	sbc	r25, r19
     94c:	04 97       	sbiw	r24, 0x04	; 4
     94e:	64 f4       	brge	.+24     	; 0x968 <auto_start+0x1ca>
     950:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     954:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     958:	0a 97       	sbiw	r24, 0x0a	; 10
		{
			run_state = FORWARD;
     95a:	34 f0       	brlt	.+12     	; 0x968 <auto_start+0x1ca>
     95c:	1a 82       	std	Y+2, r1	; 0x02
			forward(300);
     95e:	19 82       	std	Y+1, r1	; 0x01
     960:	8c e2       	ldi	r24, 0x2C	; 44
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	d7 de       	rcall	.-594    	; 0x714 <forward>
     966:	4d c1       	rjmp	.+666    	; 0xc02 <auto_start+0x464>
		}
		else if (ultrasonic_center_distance >= 800 || ultrasonic_left_distance >= 800 || ultrasonic_right_distance >= 800)
     968:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     96c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     970:	80 32       	cpi	r24, 0x20	; 32
     972:	93 40       	sbci	r25, 0x03	; 3
     974:	74 f4       	brge	.+28     	; 0x992 <auto_start+0x1f4>
     976:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
     97a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     97e:	80 32       	cpi	r24, 0x20	; 32
     980:	93 40       	sbci	r25, 0x03	; 3
     982:	3c f4       	brge	.+14     	; 0x992 <auto_start+0x1f4>
     984:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
     988:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     98c:	80 32       	cpi	r24, 0x20	; 32
     98e:	93 40       	sbci	r25, 0x03	; 3
		{
			run_state = BACKWARD;
     990:	44 f0       	brlt	.+16     	; 0x9a2 <auto_start+0x204>
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	9a 83       	std	Y+2, r25	; 0x02
			backward(400);
     998:	89 83       	std	Y+1, r24	; 0x01
     99a:	80 e9       	ldi	r24, 0x90	; 144
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	c8 de       	rcall	.-624    	; 0x730 <backward>
     9a0:	30 c1       	rjmp	.+608    	; 0xc02 <auto_start+0x464>
		}
 		else if(ultrasonic_center_distance <= 4)
     9a2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     9a6:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     9aa:	05 97       	sbiw	r24, 0x05	; 5
 		{
 			run_state = BACKWARD;
     9ac:	44 f4       	brge	.+16     	; 0x9be <auto_start+0x220>
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	9a 83       	std	Y+2, r25	; 0x02
 			backward(600);
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	88 e5       	ldi	r24, 0x58	; 88
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	ba de       	rcall	.-652    	; 0x730 <backward>
     9bc:	22 c1       	rjmp	.+580    	; 0xc02 <auto_start+0x464>
 		}
 		else if (ultrasonic_right_distance <= 4)
     9be:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
     9c2:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     9c6:	05 97       	sbiw	r24, 0x05	; 5
 		{
 			run_state = BACKWARD;
     9c8:	44 f4       	brge	.+16     	; 0x9da <auto_start+0x23c>
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	9a 83       	std	Y+2, r25	; 0x02
 			turn_left(400);
     9d0:	89 83       	std	Y+1, r24	; 0x01
     9d2:	80 e9       	ldi	r24, 0x90	; 144
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	ba de       	rcall	.-652    	; 0x74c <turn_left>
     9d8:	14 c1       	rjmp	.+552    	; 0xc02 <auto_start+0x464>
 		}
 		else if (ultrasonic_left_distance <= 4)
     9da:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
     9de:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     9e2:	05 97       	sbiw	r24, 0x05	; 5
 		{
 			run_state = BACKWARD;
     9e4:	44 f4       	brge	.+16     	; 0x9f6 <auto_start+0x258>
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	9a 83       	std	Y+2, r25	; 0x02
 			turn_right(400);
     9ec:	89 83       	std	Y+1, r24	; 0x01
     9ee:	80 e9       	ldi	r24, 0x90	; 144
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	ba de       	rcall	.-652    	; 0x768 <turn_right>
     9f4:	06 c1       	rjmp	.+524    	; 0xc02 <auto_start+0x464>
 		}
		 ///좁은 길
		else if (ultrasonic_right_distance <= 7 && ultrasonic_center_distance <= 15 && ultrasonic_right_distance > 3 && ultrasonic_center_distance > 3)
     9f6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
     9fa:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     9fe:	08 97       	sbiw	r24, 0x08	; 8
     a00:	d4 f4       	brge	.+52     	; 0xa36 <auto_start+0x298>
     a02:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     a06:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     a0a:	40 97       	sbiw	r24, 0x10	; 16
     a0c:	a4 f4       	brge	.+40     	; 0xa36 <auto_start+0x298>
     a0e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
     a12:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     a16:	04 97       	sbiw	r24, 0x04	; 4
     a18:	74 f0       	brlt	.+28     	; 0xa36 <auto_start+0x298>
     a1a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     a1e:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     a22:	04 97       	sbiw	r24, 0x04	; 4
		{
			run_state = TURN_LEFT;
     a24:	44 f0       	brlt	.+16     	; 0xa36 <auto_start+0x298>
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	9a 83       	std	Y+2, r25	; 0x02
			turn_left(400);
     a2c:	89 83       	std	Y+1, r24	; 0x01
     a2e:	80 e9       	ldi	r24, 0x90	; 144
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	8c de       	rcall	.-744    	; 0x74c <turn_left>
     a34:	e6 c0       	rjmp	.+460    	; 0xc02 <auto_start+0x464>
		}
		else if (ultrasonic_left_distance <= 7 && ultrasonic_center_distance <= 15 && ultrasonic_left_distance > 3 && ultrasonic_center_distance > 3)
     a36:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
     a3a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     a3e:	08 97       	sbiw	r24, 0x08	; 8
     a40:	d4 f4       	brge	.+52     	; 0xa76 <auto_start+0x2d8>
     a42:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     a46:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     a4a:	40 97       	sbiw	r24, 0x10	; 16
     a4c:	a4 f4       	brge	.+40     	; 0xa76 <auto_start+0x2d8>
     a4e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
     a52:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     a56:	04 97       	sbiw	r24, 0x04	; 4
     a58:	74 f0       	brlt	.+28     	; 0xa76 <auto_start+0x2d8>
     a5a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     a5e:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     a62:	04 97       	sbiw	r24, 0x04	; 4
		{
			run_state = TURN_RIGHT;
     a64:	44 f0       	brlt	.+16     	; 0xa76 <auto_start+0x2d8>
     a66:	83 e0       	ldi	r24, 0x03	; 3
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9a 83       	std	Y+2, r25	; 0x02
			turn_right(400);
     a6c:	89 83       	std	Y+1, r24	; 0x01
     a6e:	80 e9       	ldi	r24, 0x90	; 144
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	7a de       	rcall	.-780    	; 0x768 <turn_right>
     a74:	c6 c0       	rjmp	.+396    	; 0xc02 <auto_start+0x464>
		}		
		
		 ///
		 
		 /// 넓은 길
		 else if (ultrasonic_right_distance <= 20 && ultrasonic_center_distance <= 30 && ultrasonic_right_distance > 3 && ultrasonic_center_distance > 3)
     a76:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
     a7a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     a7e:	45 97       	sbiw	r24, 0x15	; 21
     a80:	d4 f4       	brge	.+52     	; 0xab6 <auto_start+0x318>
     a82:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     a86:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     a8a:	4f 97       	sbiw	r24, 0x1f	; 31
     a8c:	a4 f4       	brge	.+40     	; 0xab6 <auto_start+0x318>
     a8e:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
     a92:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     a96:	04 97       	sbiw	r24, 0x04	; 4
     a98:	74 f0       	brlt	.+28     	; 0xab6 <auto_start+0x318>
     a9a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     a9e:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     aa2:	04 97       	sbiw	r24, 0x04	; 4
		 {
			 run_state = TURN_LEFT;
     aa4:	44 f0       	brlt	.+16     	; 0xab6 <auto_start+0x318>
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	9a 83       	std	Y+2, r25	; 0x02
			 turn_left(400);
     aac:	89 83       	std	Y+1, r24	; 0x01
     aae:	80 e9       	ldi	r24, 0x90	; 144
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	4c de       	rcall	.-872    	; 0x74c <turn_left>
     ab4:	a6 c0       	rjmp	.+332    	; 0xc02 <auto_start+0x464>
		 }
		 else if (ultrasonic_left_distance <= 20 && ultrasonic_center_distance <= 30 && ultrasonic_left_distance > 3 && ultrasonic_center_distance > 3)
     ab6:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
     aba:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     abe:	45 97       	sbiw	r24, 0x15	; 21
     ac0:	d4 f4       	brge	.+52     	; 0xaf6 <auto_start+0x358>
     ac2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     ac6:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     aca:	4f 97       	sbiw	r24, 0x1f	; 31
     acc:	a4 f4       	brge	.+40     	; 0xaf6 <auto_start+0x358>
     ace:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
     ad2:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     ad6:	04 97       	sbiw	r24, 0x04	; 4
     ad8:	74 f0       	brlt	.+28     	; 0xaf6 <auto_start+0x358>
     ada:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     ade:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     ae2:	04 97       	sbiw	r24, 0x04	; 4
		 {
			 run_state = TURN_RIGHT;
     ae4:	44 f0       	brlt	.+16     	; 0xaf6 <auto_start+0x358>
     ae6:	83 e0       	ldi	r24, 0x03	; 3
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	9a 83       	std	Y+2, r25	; 0x02
			 turn_right(400);
     aec:	89 83       	std	Y+1, r24	; 0x01
     aee:	80 e9       	ldi	r24, 0x90	; 144
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	3a de       	rcall	.-908    	; 0x768 <turn_right>
		 }
		 ///
		 else if (ultrasonic_right_distance <= 20)
     af4:	86 c0       	rjmp	.+268    	; 0xc02 <auto_start+0x464>
     af6:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
     afa:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     afe:	45 97       	sbiw	r24, 0x15	; 21
		 {
			 run_state = TURN_LEFT;
     b00:	44 f4       	brge	.+16     	; 0xb12 <auto_start+0x374>
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	90 e0       	ldi	r25, 0x00	; 0
			 turn_left(400);
     b06:	9a 83       	std	Y+2, r25	; 0x02
     b08:	89 83       	std	Y+1, r24	; 0x01
     b0a:	80 e9       	ldi	r24, 0x90	; 144
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	1e de       	rcall	.-964    	; 0x74c <turn_left>
		 }
		 else if (ultrasonic_left_distance <= 20)
     b10:	78 c0       	rjmp	.+240    	; 0xc02 <auto_start+0x464>
     b12:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
     b16:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     b1a:	45 97       	sbiw	r24, 0x15	; 21
		 {
			 run_state = TURN_RIGHT;
     b1c:	44 f4       	brge	.+16     	; 0xb2e <auto_start+0x390>
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	9a 83       	std	Y+2, r25	; 0x02
			 turn_right(400);
     b24:	89 83       	std	Y+1, r24	; 0x01
     b26:	80 e9       	ldi	r24, 0x90	; 144
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	1e de       	rcall	.-964    	; 0x768 <turn_right>
     b2c:	6a c0       	rjmp	.+212    	; 0xc02 <auto_start+0x464>
		 }
		 
		
		else if ((ultrasonic_left_distance - ultrasonic_right_distance <= 2 && ultrasonic_right_distance - ultrasonic_left_distance <= 2) || ultrasonic_center_distance >= 20 && ultrasonic_center_distance <= 200)
     b2e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
     b32:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     b36:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <ultrasonic_right_distance>
     b3a:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     b3e:	82 1b       	sub	r24, r18
     b40:	93 0b       	sbc	r25, r19
     b42:	03 97       	sbiw	r24, 0x03	; 3
     b44:	64 f4       	brge	.+24     	; 0xb5e <auto_start+0x3c0>
     b46:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
     b4a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     b4e:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <ultrasonic_left_distance>
     b52:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     b56:	82 1b       	sub	r24, r18
     b58:	93 0b       	sbc	r25, r19
     b5a:	03 97       	sbiw	r24, 0x03	; 3
     b5c:	6c f0       	brlt	.+26     	; 0xb78 <auto_start+0x3da>
     b5e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     b62:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     b66:	44 97       	sbiw	r24, 0x14	; 20
     b68:	6c f0       	brlt	.+26     	; 0xb84 <auto_start+0x3e6>
     b6a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     b6e:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     b72:	89 3c       	cpi	r24, 0xC9	; 201
     b74:	91 05       	cpc	r25, r1
		{
			run_state = FORWARD;
     b76:	34 f4       	brge	.+12     	; 0xb84 <auto_start+0x3e6>
     b78:	1a 82       	std	Y+2, r1	; 0x02
			forward(350);
     b7a:	19 82       	std	Y+1, r1	; 0x01
     b7c:	8e e5       	ldi	r24, 0x5E	; 94
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	c9 dd       	rcall	.-1134   	; 0x714 <forward>
     b82:	3f c0       	rjmp	.+126    	; 0xc02 <auto_start+0x464>
		}
		else if(ultrasonic_right_distance - ultrasonic_left_distance <= 4 && ultrasonic_center_distance <= 7 && ultrasonic_right_distance > 5)
     b84:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
     b88:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     b8c:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <ultrasonic_left_distance>
     b90:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     b94:	82 1b       	sub	r24, r18
     b96:	93 0b       	sbc	r25, r19
     b98:	05 97       	sbiw	r24, 0x05	; 5
     b9a:	a4 f4       	brge	.+40     	; 0xbc4 <auto_start+0x426>
     b9c:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     ba0:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     ba4:	08 97       	sbiw	r24, 0x08	; 8
     ba6:	74 f4       	brge	.+28     	; 0xbc4 <auto_start+0x426>
     ba8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
     bac:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     bb0:	06 97       	sbiw	r24, 0x06	; 6
		{
			run_state = TURN_LEFT;
     bb2:	44 f0       	brlt	.+16     	; 0xbc4 <auto_start+0x426>
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	9a 83       	std	Y+2, r25	; 0x02
			turn_left(400);
     bba:	89 83       	std	Y+1, r24	; 0x01
     bbc:	80 e9       	ldi	r24, 0x90	; 144
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	c5 dd       	rcall	.-1142   	; 0x74c <turn_left>
     bc2:	1f c0       	rjmp	.+62     	; 0xc02 <auto_start+0x464>
		}
		else if(ultrasonic_left_distance - ultrasonic_right_distance <= 4 && ultrasonic_center_distance <= 7 && ultrasonic_left_distance > 5)
     bc4:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
     bc8:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
     bcc:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <ultrasonic_right_distance>
     bd0:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
     bd4:	82 1b       	sub	r24, r18
     bd6:	93 0b       	sbc	r25, r19
     bd8:	05 97       	sbiw	r24, 0x05	; 5
     bda:	9c f4       	brge	.+38     	; 0xc02 <auto_start+0x464>
     bdc:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
     be0:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
     be4:	08 97       	sbiw	r24, 0x08	; 8
     be6:	6c f4       	brge	.+26     	; 0xc02 <auto_start+0x464>
     be8:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
     bec:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
		{
			run_state = TURN_RIGHT;
     bf0:	06 97       	sbiw	r24, 0x06	; 6
     bf2:	3c f0       	brlt	.+14     	; 0xc02 <auto_start+0x464>
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	90 e0       	ldi	r25, 0x00	; 0
			turn_right(400);
     bf8:	9a 83       	std	Y+2, r25	; 0x02
     bfa:	89 83       	std	Y+1, r24	; 0x01
     bfc:	80 e9       	ldi	r24, 0x90	; 144
     bfe:	91 e0       	ldi	r25, 0x01	; 1
		}
		I2C_LCD_write_string_XY(1,0,sbuf);
     c00:	b3 dd       	rcall	.-1178   	; 0x768 <turn_right>
     c02:	ae 01       	movw	r20, r28
     c04:	4d 5f       	subi	r20, 0xFD	; 253
     c06:	5f 4f       	sbci	r21, 0xFF	; 255
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	9e dc       	rcall	.-1732   	; 0x54a <I2C_LCD_write_string_XY>
{
	int run_state;
	sec_count = 120;
	char sbuf[20];

	while(sec_count > 0)
     c0e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <sec_count>
     c12:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <sec_count+0x1>
     c16:	a0 91 60 01 	lds	r26, 0x0160	; 0x800160 <sec_count+0x2>
     c1a:	b0 91 61 01 	lds	r27, 0x0161	; 0x800161 <sec_count+0x3>
     c1e:	89 2b       	or	r24, r25
     c20:	8a 2b       	or	r24, r26
     c22:	8b 2b       	or	r24, r27
     c24:	09 f0       	breq	.+2      	; 0xc28 <auto_start+0x48a>
     c26:	d2 cd       	rjmp	.-1116   	; 0x7cc <auto_start+0x2e>
// 		{
// 			run_state = BACKWARD;
// 			forward(350);
// 		}
	}
}
     c28:	66 96       	adiw	r28, 0x16	; 22
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	08 95       	ret

00000c3a <__vector_18>:

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     c3a:	1f 92       	push	r1
     c3c:	0f 92       	push	r0
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	0f 92       	push	r0
     c42:	11 24       	eor	r1, r1
     c44:	0b b6       	in	r0, 0x3b	; 59
     c46:	0f 92       	push	r0
     c48:	2f 93       	push	r18
     c4a:	3f 93       	push	r19
     c4c:	4f 93       	push	r20
     c4e:	5f 93       	push	r21
     c50:	6f 93       	push	r22
     c52:	7f 93       	push	r23
     c54:	8f 93       	push	r24
     c56:	9f 93       	push	r25
     c58:	af 93       	push	r26
     c5a:	bf 93       	push	r27
     c5c:	ef 93       	push	r30
     c5e:	ff 93       	push	r31
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	1f 92       	push	r1
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     c6a:	8c b1       	in	r24, 0x0c	; 12
     c6c:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	8d 30       	cpi	r24, 0x0D	; 13
     c72:	19 f0       	breq	.+6      	; 0xc7a <__vector_18+0x40>
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	8a 30       	cpi	r24, 0x0A	; 10
     c78:	61 f5       	brne	.+88     	; 0xcd2 <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     c7a:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <rear>
     c7e:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <rear+0x1>
     c82:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <i.1878>
     c86:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <i.1878+0x1>
     c8a:	40 e5       	ldi	r20, 0x50	; 80
     c8c:	42 9f       	mul	r20, r18
     c8e:	f0 01       	movw	r30, r0
     c90:	43 9f       	mul	r20, r19
     c92:	f0 0d       	add	r31, r0
     c94:	11 24       	eor	r1, r1
     c96:	e2 58       	subi	r30, 0x82	; 130
     c98:	fe 4f       	sbci	r31, 0xFE	; 254
     c9a:	e8 0f       	add	r30, r24
     c9c:	f9 1f       	adc	r31, r25
     c9e:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     ca0:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <i.1878+0x1>
     ca4:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <i.1878>
		rear++;
     ca8:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <rear>
     cac:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <rear+0x1>
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <rear+0x1>
     cb6:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
     cba:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <rear>
     cbe:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <rear+0x1>
     cc2:	6a e0       	ldi	r22, 0x0A	; 10
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	e4 d3       	rcall	.+1992   	; 0x1490 <__divmodhi4>
     cc8:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <rear+0x1>
     ccc:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <rear>
     cd0:	1c c0       	rjmp	.+56     	; 0xd0a <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
     cd2:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <rear>
     cd6:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <rear+0x1>
     cda:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <i.1878>
     cde:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <i.1878+0x1>
     ce2:	9c 01       	movw	r18, r24
     ce4:	2f 5f       	subi	r18, 0xFF	; 255
     ce6:	3f 4f       	sbci	r19, 0xFF	; 255
     ce8:	30 93 75 01 	sts	0x0175, r19	; 0x800175 <i.1878+0x1>
     cec:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <i.1878>
     cf0:	49 81       	ldd	r20, Y+1	; 0x01
     cf2:	50 e5       	ldi	r21, 0x50	; 80
     cf4:	56 9f       	mul	r21, r22
     cf6:	90 01       	movw	r18, r0
     cf8:	57 9f       	mul	r21, r23
     cfa:	30 0d       	add	r19, r0
     cfc:	11 24       	eor	r1, r1
     cfe:	22 58       	subi	r18, 0x82	; 130
     d00:	3e 4f       	sbci	r19, 0xFE	; 254
     d02:	f9 01       	movw	r30, r18
     d04:	e8 0f       	add	r30, r24
     d06:	f9 1f       	adc	r31, r25
     d08:	40 83       	st	Z, r20
	}
		  
}
     d0a:	0f 90       	pop	r0
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	bf 91       	pop	r27
     d16:	af 91       	pop	r26
     d18:	9f 91       	pop	r25
     d1a:	8f 91       	pop	r24
     d1c:	7f 91       	pop	r23
     d1e:	6f 91       	pop	r22
     d20:	5f 91       	pop	r21
     d22:	4f 91       	pop	r20
     d24:	3f 91       	pop	r19
     d26:	2f 91       	pop	r18
     d28:	0f 90       	pop	r0
     d2a:	0b be       	out	0x3b, r0	; 59
     d2c:	0f 90       	pop	r0
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	0f 90       	pop	r0
     d32:	1f 90       	pop	r1
     d34:	18 95       	reti

00000d36 <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
     d36:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
     d3a:	8f ec       	ldi	r24, 0xCF	; 207
     d3c:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
     d3e:	8b b1       	in	r24, 0x0b	; 11
     d40:	82 60       	ori	r24, 0x02	; 2
     d42:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     d44:	e5 e9       	ldi	r30, 0x95	; 149
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	86 60       	ori	r24, 0x06	; 6
     d4c:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     d4e:	8a b1       	in	r24, 0x0a	; 10
     d50:	88 69       	ori	r24, 0x98	; 152
     d52:	8a b9       	out	0x0a, r24	; 10
     d54:	08 95       	ret

00000d56 <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
     d56:	5d 9b       	sbis	0x0b, 5	; 11
     d58:	fe cf       	rjmp	.-4      	; 0xd56 <UART0_transmit>
		;   // no operation NOP
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
     d5a:	8c b9       	out	0x0c, r24	; 12
     d5c:	08 95       	ret

00000d5e <__vector_30>:
volatile uint8_t bt_data;

extern void UART0_transmit();

ISR(USART1_RX_vect)
{
     d5e:	1f 92       	push	r1
     d60:	0f 92       	push	r0
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	0b b6       	in	r0, 0x3b	; 59
     d6a:	0f 92       	push	r0
     d6c:	2f 93       	push	r18
     d6e:	3f 93       	push	r19
     d70:	4f 93       	push	r20
     d72:	5f 93       	push	r21
     d74:	6f 93       	push	r22
     d76:	7f 93       	push	r23
     d78:	8f 93       	push	r24
     d7a:	9f 93       	push	r25
     d7c:	af 93       	push	r26
     d7e:	bf 93       	push	r27
     d80:	ef 93       	push	r30
     d82:	ff 93       	push	r31
	
	bt_data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
     d84:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     d88:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <bt_data>
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	UART0_transmit(bt_data); // BT로 들어온 char를 확인하기 위해 comport master로 출력
     d8c:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <bt_data>
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	e1 df       	rcall	.-62     	; 0xd56 <UART0_transmit>
// 	{
// 		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
// 		rx1_buff[rear1][i++] = data;
// 	}
		  
}
     d94:	ff 91       	pop	r31
     d96:	ef 91       	pop	r30
     d98:	bf 91       	pop	r27
     d9a:	af 91       	pop	r26
     d9c:	9f 91       	pop	r25
     d9e:	8f 91       	pop	r24
     da0:	7f 91       	pop	r23
     da2:	6f 91       	pop	r22
     da4:	5f 91       	pop	r21
     da6:	4f 91       	pop	r20
     da8:	3f 91       	pop	r19
     daa:	2f 91       	pop	r18
     dac:	0f 90       	pop	r0
     dae:	0b be       	out	0x3b, r0	; 59
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
     dba:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
     dbe:	8f ec       	ldi	r24, 0xCF	; 207
     dc0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
     dc4:	eb e9       	ldi	r30, 0x9B	; 155
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	82 60       	ori	r24, 0x02	; 2
     dcc:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     dce:	ed e9       	ldi	r30, 0x9D	; 157
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	86 60       	ori	r24, 0x06	; 6
     dd6:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     dd8:	ea e9       	ldi	r30, 0x9A	; 154
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	88 69       	ori	r24, 0x98	; 152
     de0:	80 83       	st	Z, r24
     de2:	08 95       	ret

00000de4 <__vector_5>:
volatile int ultrasonic_right_distance = 0;

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect) // LEFT
{
     de4:	1f 92       	push	r1
     de6:	0f 92       	push	r0
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	0f 92       	push	r0
     dec:	11 24       	eor	r1, r1
     dee:	0b b6       	in	r0, 0x3b	; 59
     df0:	0f 92       	push	r0
     df2:	2f 93       	push	r18
     df4:	3f 93       	push	r19
     df6:	4f 93       	push	r20
     df8:	5f 93       	push	r21
     dfa:	6f 93       	push	r22
     dfc:	7f 93       	push	r23
     dfe:	8f 93       	push	r24
     e00:	9f 93       	push	r25
     e02:	af 93       	push	r26
     e04:	bf 93       	push	r27
     e06:	ef 93       	push	r30
     e08:	ff 93       	push	r31
   // 1. 상승 edge
   if (ECHO_PIN_LEFT & (1 << ECHO_LEFT))
     e0a:	0c 9b       	sbis	0x01, 4	; 1
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__vector_5+0x34>
   {
      TCNT3 = 0;
     e0e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e12:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e16:	20 c0       	rjmp	.+64     	; 0xe58 <__vector_5+0x74>
   }
   // 2. 하강 edge
   else
   {
      // ECHO 핀에 들어온 펄스 길이를 us로 환산
      ultrasonic_left_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     e18:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e1c:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	44 d2       	rcall	.+1160   	; 0x12ae <__floatunsisf>
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	34 e2       	ldi	r19, 0x24	; 36
     e2a:	44 e7       	ldi	r20, 0x74	; 116
     e2c:	59 e4       	ldi	r21, 0x49	; 73
     e2e:	cd d2       	rcall	.+1434   	; 0x13ca <__mulsf3>
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e8       	ldi	r20, 0x80	; 128
     e36:	54 e4       	ldi	r21, 0x44	; 68
     e38:	c8 d2       	rcall	.+1424   	; 0x13ca <__mulsf3>
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	34 e2       	ldi	r19, 0x24	; 36
     e3e:	44 e7       	ldi	r20, 0x74	; 116
     e40:	5b e4       	ldi	r21, 0x4B	; 75
     e42:	9c d1       	rcall	.+824    	; 0x117c <__divsf3>
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	48 e6       	ldi	r20, 0x68	; 104
     e4a:	52 e4       	ldi	r21, 0x42	; 66
     e4c:	97 d1       	rcall	.+814    	; 0x117c <__divsf3>
     e4e:	fe d1       	rcall	.+1020   	; 0x124c <__fixsfsi>
     e50:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <ultrasonic_left_distance+0x1>
     e54:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <ultrasonic_left_distance>
      // 15.625khz의 1주기가 64us이다.
      // 64us * 10 == 640us
      // 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
      // sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
   }
}
     e58:	ff 91       	pop	r31
     e5a:	ef 91       	pop	r30
     e5c:	bf 91       	pop	r27
     e5e:	af 91       	pop	r26
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	7f 91       	pop	r23
     e66:	6f 91       	pop	r22
     e68:	5f 91       	pop	r21
     e6a:	4f 91       	pop	r20
     e6c:	3f 91       	pop	r19
     e6e:	2f 91       	pop	r18
     e70:	0f 90       	pop	r0
     e72:	0b be       	out	0x3b, r0	; 59
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <__vector_6>:

ISR(INT5_vect) // CENTER
{
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	0b b6       	in	r0, 0x3b	; 59
     e8a:	0f 92       	push	r0
     e8c:	2f 93       	push	r18
     e8e:	3f 93       	push	r19
     e90:	4f 93       	push	r20
     e92:	5f 93       	push	r21
     e94:	6f 93       	push	r22
     e96:	7f 93       	push	r23
     e98:	8f 93       	push	r24
     e9a:	9f 93       	push	r25
     e9c:	af 93       	push	r26
     e9e:	bf 93       	push	r27
     ea0:	ef 93       	push	r30
     ea2:	ff 93       	push	r31
   // 1. 상승 edge
   if (ECHO_PIN_CENTER & (1 << ECHO_CENTER))
     ea4:	0d 9b       	sbis	0x01, 5	; 1
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <__vector_6+0x34>
   {
      TCNT3 = 0;
     ea8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     eac:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     eb0:	20 c0       	rjmp	.+64     	; 0xef2 <__vector_6+0x74>
   }
   // 2. 하강 edge
   else
   {
      // ECHO 핀에 들어온 펄스 길이를 us로 환산
      ultrasonic_center_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     eb2:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     eb6:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	f7 d1       	rcall	.+1006   	; 0x12ae <__floatunsisf>
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	34 e2       	ldi	r19, 0x24	; 36
     ec4:	44 e7       	ldi	r20, 0x74	; 116
     ec6:	59 e4       	ldi	r21, 0x49	; 73
     ec8:	80 d2       	rcall	.+1280   	; 0x13ca <__mulsf3>
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e8       	ldi	r20, 0x80	; 128
     ed0:	54 e4       	ldi	r21, 0x44	; 68
     ed2:	7b d2       	rcall	.+1270   	; 0x13ca <__mulsf3>
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	34 e2       	ldi	r19, 0x24	; 36
     ed8:	44 e7       	ldi	r20, 0x74	; 116
     eda:	5b e4       	ldi	r21, 0x4B	; 75
     edc:	4f d1       	rcall	.+670    	; 0x117c <__divsf3>
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	48 e6       	ldi	r20, 0x68	; 104
     ee4:	52 e4       	ldi	r21, 0x42	; 66
     ee6:	4a d1       	rcall	.+660    	; 0x117c <__divsf3>
     ee8:	b1 d1       	rcall	.+866    	; 0x124c <__fixsfsi>
     eea:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <ultrasonic_center_distance+0x1>
     eee:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <ultrasonic_center_distance>
      // 15.625khz의 1주기가 64us이다.
      // 64us * 10 == 640us
      // 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
      // sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
   }
}
     ef2:	ff 91       	pop	r31
     ef4:	ef 91       	pop	r30
     ef6:	bf 91       	pop	r27
     ef8:	af 91       	pop	r26
     efa:	9f 91       	pop	r25
     efc:	8f 91       	pop	r24
     efe:	7f 91       	pop	r23
     f00:	6f 91       	pop	r22
     f02:	5f 91       	pop	r21
     f04:	4f 91       	pop	r20
     f06:	3f 91       	pop	r19
     f08:	2f 91       	pop	r18
     f0a:	0f 90       	pop	r0
     f0c:	0b be       	out	0x3b, r0	; 59
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <__vector_7>:

ISR(INT6_vect) // RIGHT
{
     f18:	1f 92       	push	r1
     f1a:	0f 92       	push	r0
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	0f 92       	push	r0
     f20:	11 24       	eor	r1, r1
     f22:	0b b6       	in	r0, 0x3b	; 59
     f24:	0f 92       	push	r0
     f26:	2f 93       	push	r18
     f28:	3f 93       	push	r19
     f2a:	4f 93       	push	r20
     f2c:	5f 93       	push	r21
     f2e:	6f 93       	push	r22
     f30:	7f 93       	push	r23
     f32:	8f 93       	push	r24
     f34:	9f 93       	push	r25
     f36:	af 93       	push	r26
     f38:	bf 93       	push	r27
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
   // 1. 상승 edge
   if (ECHO_PIN_RIGHT & (1 << ECHO_RIGHT))
     f3e:	0e 9b       	sbis	0x01, 6	; 1
     f40:	05 c0       	rjmp	.+10     	; 0xf4c <__vector_7+0x34>
   {
      TCNT3 = 0;
     f42:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     f46:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     f4a:	20 c0       	rjmp	.+64     	; 0xf8c <__vector_7+0x74>
   }
   // 2. 하강 edge
   else
   {
      // ECHO 핀에 들어온 펄스 길이를 us로 환산
      ultrasonic_right_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     f4c:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     f50:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	aa d1       	rcall	.+852    	; 0x12ae <__floatunsisf>
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	34 e2       	ldi	r19, 0x24	; 36
     f5e:	44 e7       	ldi	r20, 0x74	; 116
     f60:	59 e4       	ldi	r21, 0x49	; 73
     f62:	33 d2       	rcall	.+1126   	; 0x13ca <__mulsf3>
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e8       	ldi	r20, 0x80	; 128
     f6a:	54 e4       	ldi	r21, 0x44	; 68
     f6c:	2e d2       	rcall	.+1116   	; 0x13ca <__mulsf3>
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	34 e2       	ldi	r19, 0x24	; 36
     f72:	44 e7       	ldi	r20, 0x74	; 116
     f74:	5b e4       	ldi	r21, 0x4B	; 75
     f76:	02 d1       	rcall	.+516    	; 0x117c <__divsf3>
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	48 e6       	ldi	r20, 0x68	; 104
     f7e:	52 e4       	ldi	r21, 0x42	; 66
     f80:	fd d0       	rcall	.+506    	; 0x117c <__divsf3>
     f82:	64 d1       	rcall	.+712    	; 0x124c <__fixsfsi>
     f84:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <ultrasonic_right_distance+0x1>
     f88:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <ultrasonic_right_distance>
      // 15.625khz의 1주기가 64us이다.
      // 64us * 10 == 640us
      // 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
      // sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
   }
}
     f8c:	ff 91       	pop	r31
     f8e:	ef 91       	pop	r30
     f90:	bf 91       	pop	r27
     f92:	af 91       	pop	r26
     f94:	9f 91       	pop	r25
     f96:	8f 91       	pop	r24
     f98:	7f 91       	pop	r23
     f9a:	6f 91       	pop	r22
     f9c:	5f 91       	pop	r21
     f9e:	4f 91       	pop	r20
     fa0:	3f 91       	pop	r19
     fa2:	2f 91       	pop	r18
     fa4:	0f 90       	pop	r0
     fa6:	0b be       	out	0x3b, r0	; 59
     fa8:	0f 90       	pop	r0
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	0f 90       	pop	r0
     fae:	1f 90       	pop	r1
     fb0:	18 95       	reti

00000fb2 <init_ultrasonic>:

void init_ultrasonic()
{

		   //////////////// left ////////////////
		   TRIG_DDR_LEFT |= 1 << TRIG_LEFT; // output mode로 설정
     fb2:	8a b3       	in	r24, 0x1a	; 26
     fb4:	81 60       	ori	r24, 0x01	; 1
     fb6:	8a bb       	out	0x1a, r24	; 26
		   ECHO_DDR_LEFT &= ~(1 << ECHO_LEFT); // input mode로 설정
     fb8:	82 b1       	in	r24, 0x02	; 2
     fba:	8f 7e       	andi	r24, 0xEF	; 239
     fbc:	82 b9       	out	0x02, r24	; 2
   
		   // 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
		   // INT0~3은 EICRA, INT4~7은 EICRB 레지스터
		   EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
     fbe:	8a b7       	in	r24, 0x3a	; 58
     fc0:	81 60       	ori	r24, 0x01	; 1
     fc2:	8a bf       	out	0x3a, r24	; 58
   
		   // 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
		   // 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
		   // 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us   
		   TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     fc4:	ea e8       	ldi	r30, 0x8A	; 138
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	85 60       	ori	r24, 0x05	; 5
     fcc:	80 83       	st	Z, r24
		   EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
     fce:	89 b7       	in	r24, 0x39	; 57
     fd0:	80 61       	ori	r24, 0x10	; 16
     fd2:	89 bf       	out	0x39, r24	; 57

	      //////////////// center ////////////////
	      TRIG_DDR_CENTER |= 1 << TRIG_CENTER; // output mode로 설정
     fd4:	8a b3       	in	r24, 0x1a	; 26
     fd6:	82 60       	ori	r24, 0x02	; 2
     fd8:	8a bb       	out	0x1a, r24	; 26
	      ECHO_DDR_CENTER &= ~(1 << ECHO_CENTER); // input mode로 설정
     fda:	82 b1       	in	r24, 0x02	; 2
     fdc:	8f 7d       	andi	r24, 0xDF	; 223
     fde:	82 b9       	out	0x02, r24	; 2
	      
	      // 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	      // INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	      EICRB |= 0 << ISC51 | 1 << ISC50; // INT5니까 EICRB에서 ISC51, 50
     fe0:	8a b7       	in	r24, 0x3a	; 58
     fe2:	84 60       	ori	r24, 0x04	; 4
     fe4:	8a bf       	out	0x3a, r24	; 58
	      
	      // 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	      // 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	      // 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
	      TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     fe6:	80 81       	ld	r24, Z
     fe8:	85 60       	ori	r24, 0x05	; 5
     fea:	80 83       	st	Z, r24
	      EIMSK |= 1 << INT5; // 외부 인터럽트4번 (ECHO) 사용
     fec:	89 b7       	in	r24, 0x39	; 57
     fee:	80 62       	ori	r24, 0x20	; 32
     ff0:	89 bf       	out	0x39, r24	; 57
		  
			//////////////// right ////////////////
		   TRIG_DDR_RIGHT |= 1 << TRIG_RIGHT; // output mode로 설정
     ff2:	8a b3       	in	r24, 0x1a	; 26
     ff4:	84 60       	ori	r24, 0x04	; 4
     ff6:	8a bb       	out	0x1a, r24	; 26
		   ECHO_DDR_RIGHT &= ~(1 << ECHO_RIGHT); // input mode로 설정
     ff8:	82 b1       	in	r24, 0x02	; 2
     ffa:	8f 7b       	andi	r24, 0xBF	; 191
     ffc:	82 b9       	out	0x02, r24	; 2
   
		   // 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
		   // INT0~3은 EICRA, INT4~7은 EICRB 레지스터
		   EICRB |= 0 << ISC61 | 1 << ISC60; // INT6니까 EICRB에서 ISC61, 60
     ffe:	8a b7       	in	r24, 0x3a	; 58
    1000:	80 61       	ori	r24, 0x10	; 16
    1002:	8a bf       	out	0x3a, r24	; 58
   
		   // 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
		   // 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
		   // 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
		   TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
    1004:	80 81       	ld	r24, Z
    1006:	85 60       	ori	r24, 0x05	; 5
    1008:	80 83       	st	Z, r24
		   EIMSK |= 1 << INT6; // 외부 인터럽트4번 (ECHO) 사용
    100a:	89 b7       	in	r24, 0x39	; 57
    100c:	80 64       	ori	r24, 0x40	; 64
    100e:	89 bf       	out	0x39, r24	; 57
    1010:	08 95       	ret

00001012 <ultrasonic_trigger>:
   
}

void ultrasonic_trigger()
{
	if(ultrasonic_check_timer <= 4)
    1012:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ultrasonic_check_timer>
    1016:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <ultrasonic_check_timer+0x1>
    101a:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <ultrasonic_check_timer+0x2>
    101e:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <ultrasonic_check_timer+0x3>
    1022:	05 97       	sbiw	r24, 0x05	; 5
    1024:	a1 05       	cpc	r26, r1
    1026:	b1 05       	cpc	r27, r1
    1028:	80 f4       	brcc	.+32     	; 0x104a <ultrasonic_trigger+0x38>
	{
		////////// left //////////
		TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // 해당되는 포트만 LOW로 만듦
    102a:	8b b3       	in	r24, 0x1b	; 27
    102c:	8e 7f       	andi	r24, 0xFE	; 254
    102e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1030:	85 e0       	ldi	r24, 0x05	; 5
    1032:	8a 95       	dec	r24
    1034:	f1 f7       	brne	.-4      	; 0x1032 <ultrasonic_trigger+0x20>
    1036:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_LEFT |= 1 << TRIG_LEFT; // HIGH
    1038:	8b b3       	in	r24, 0x1b	; 27
    103a:	81 60       	ori	r24, 0x01	; 1
    103c:	8b bb       	out	0x1b, r24	; 27
    103e:	80 e5       	ldi	r24, 0x50	; 80
    1040:	8a 95       	dec	r24
    1042:	f1 f7       	brne	.-4      	; 0x1040 <ultrasonic_trigger+0x2e>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // LOW
    1044:	8b b3       	in	r24, 0x1b	; 27
    1046:	8e 7f       	andi	r24, 0xFE	; 254
    1048:	8b bb       	out	0x1b, r24	; 27
		// 초음파센서 echo 응답 대기시간이 최대 38ms
	}
	
	if (ultrasonic_check_timer >= 44 && ultrasonic_check_timer <= 48)
    104a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ultrasonic_check_timer>
    104e:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <ultrasonic_check_timer+0x1>
    1052:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <ultrasonic_check_timer+0x2>
    1056:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <ultrasonic_check_timer+0x3>
    105a:	8c 97       	sbiw	r24, 0x2c	; 44
    105c:	a1 05       	cpc	r26, r1
    105e:	b1 05       	cpc	r27, r1
    1060:	e0 f0       	brcs	.+56     	; 0x109a <ultrasonic_trigger+0x88>
    1062:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ultrasonic_check_timer>
    1066:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <ultrasonic_check_timer+0x1>
    106a:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <ultrasonic_check_timer+0x2>
    106e:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <ultrasonic_check_timer+0x3>
    1072:	c1 97       	sbiw	r24, 0x31	; 49
    1074:	a1 05       	cpc	r26, r1
    1076:	b1 05       	cpc	r27, r1
    1078:	80 f4       	brcc	.+32     	; 0x109a <ultrasonic_trigger+0x88>
	{
		////////// center //////////
		TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // 해당되는 포트만 LOW로 만듦
    107a:	8b b3       	in	r24, 0x1b	; 27
    107c:	8d 7f       	andi	r24, 0xFD	; 253
    107e:	8b bb       	out	0x1b, r24	; 27
    1080:	85 e0       	ldi	r24, 0x05	; 5
    1082:	8a 95       	dec	r24
    1084:	f1 f7       	brne	.-4      	; 0x1082 <ultrasonic_trigger+0x70>
    1086:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_CENTER |= 1 << TRIG_CENTER; // HIGH
    1088:	8b b3       	in	r24, 0x1b	; 27
    108a:	82 60       	ori	r24, 0x02	; 2
    108c:	8b bb       	out	0x1b, r24	; 27
    108e:	80 e5       	ldi	r24, 0x50	; 80
    1090:	8a 95       	dec	r24
    1092:	f1 f7       	brne	.-4      	; 0x1090 <ultrasonic_trigger+0x7e>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // LOW
    1094:	8b b3       	in	r24, 0x1b	; 27
    1096:	8d 7f       	andi	r24, 0xFD	; 253
    1098:	8b bb       	out	0x1b, r24	; 27
	}
	
	if (ultrasonic_check_timer >= 88 && ultrasonic_check_timer <= 92)
    109a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ultrasonic_check_timer>
    109e:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <ultrasonic_check_timer+0x1>
    10a2:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <ultrasonic_check_timer+0x2>
    10a6:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <ultrasonic_check_timer+0x3>
    10aa:	88 35       	cpi	r24, 0x58	; 88
    10ac:	91 05       	cpc	r25, r1
    10ae:	a1 05       	cpc	r26, r1
    10b0:	b1 05       	cpc	r27, r1
    10b2:	e8 f0       	brcs	.+58     	; 0x10ee <ultrasonic_trigger+0xdc>
    10b4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ultrasonic_check_timer>
    10b8:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <ultrasonic_check_timer+0x1>
    10bc:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <ultrasonic_check_timer+0x2>
    10c0:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <ultrasonic_check_timer+0x3>
    10c4:	8d 35       	cpi	r24, 0x5D	; 93
    10c6:	91 05       	cpc	r25, r1
    10c8:	a1 05       	cpc	r26, r1
    10ca:	b1 05       	cpc	r27, r1
    10cc:	80 f4       	brcc	.+32     	; 0x10ee <ultrasonic_trigger+0xdc>
	{
		////////// right //////////
		TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // 해당되는 포트만 LOW로 만듦
    10ce:	8b b3       	in	r24, 0x1b	; 27
    10d0:	8b 7f       	andi	r24, 0xFB	; 251
    10d2:	8b bb       	out	0x1b, r24	; 27
    10d4:	85 e0       	ldi	r24, 0x05	; 5
    10d6:	8a 95       	dec	r24
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <ultrasonic_trigger+0xc4>
    10da:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_RIGHT |= 1 << TRIG_RIGHT; // HIGH
    10dc:	8b b3       	in	r24, 0x1b	; 27
    10de:	84 60       	ori	r24, 0x04	; 4
    10e0:	8b bb       	out	0x1b, r24	; 27
    10e2:	80 e5       	ldi	r24, 0x50	; 80
    10e4:	8a 95       	dec	r24
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <ultrasonic_trigger+0xd2>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // LOW
    10e8:	8b b3       	in	r24, 0x1b	; 27
    10ea:	8b 7f       	andi	r24, 0xFB	; 251
    10ec:	8b bb       	out	0x1b, r24	; 27
	}
	
	ultrasonic_check_timer %= 95;
    10ee:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <ultrasonic_check_timer>
    10f2:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <ultrasonic_check_timer+0x1>
    10f6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <ultrasonic_check_timer+0x2>
    10fa:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <ultrasonic_check_timer+0x3>
    10fe:	2f e5       	ldi	r18, 0x5F	; 95
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	d7 d1       	rcall	.+942    	; 0x14b6 <__udivmodsi4>
    1108:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <ultrasonic_check_timer>
    110c:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <ultrasonic_check_timer+0x1>
    1110:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <ultrasonic_check_timer+0x2>
    1114:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <ultrasonic_check_timer+0x3>
    1118:	08 95       	ret

0000111a <distance_check>:
}

void distance_check(void)
{
      printf("left   :  %5d\n", ultrasonic_left_distance); // printf 찍으면 delay생김
    111a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ultrasonic_left_distance>
    111e:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ultrasonic_left_distance+0x1>
    1122:	9f 93       	push	r25
    1124:	8f 93       	push	r24
    1126:	89 e2       	ldi	r24, 0x29	; 41
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	9f 93       	push	r25
    112c:	8f 93       	push	r24
    112e:	02 d2       	rcall	.+1028   	; 0x1534 <printf>
      printf("center :  %5d\n", ultrasonic_center_distance);
    1130:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ultrasonic_center_distance>
    1134:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <ultrasonic_center_distance+0x1>
    1138:	9f 93       	push	r25
    113a:	8f 93       	push	r24
    113c:	88 e3       	ldi	r24, 0x38	; 56
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	9f 93       	push	r25
    1142:	8f 93       	push	r24
    1144:	f7 d1       	rcall	.+1006   	; 0x1534 <printf>
      printf("right  :  %5d\n", ultrasonic_right_distance);
    1146:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_right_distance>
    114a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_right_distance+0x1>
    114e:	9f 93       	push	r25
    1150:	8f 93       	push	r24
    1152:	87 e4       	ldi	r24, 0x47	; 71
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	9f 93       	push	r25
    1158:	8f 93       	push	r24

   ultrasonic_trigger(); // 이것도 수정해야한다.
    115a:	ec d1       	rcall	.+984    	; 0x1534 <printf>
    115c:	5a df       	rcall	.-332    	; 0x1012 <ultrasonic_trigger>
   func_state = AUTO_MODE_CHECK;
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <func_state+0x1>
    1166:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <func_state>
    116a:	8d b7       	in	r24, 0x3d	; 61
    116c:	9e b7       	in	r25, 0x3e	; 62
    116e:	0c 96       	adiw	r24, 0x0c	; 12
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	9e bf       	out	0x3e, r25	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	8d bf       	out	0x3d, r24	; 61
    117a:	08 95       	ret

0000117c <__divsf3>:
    117c:	0c d0       	rcall	.+24     	; 0x1196 <__divsf3x>
    117e:	eb c0       	rjmp	.+470    	; 0x1356 <__fp_round>
    1180:	e3 d0       	rcall	.+454    	; 0x1348 <__fp_pscB>
    1182:	40 f0       	brcs	.+16     	; 0x1194 <__divsf3+0x18>
    1184:	da d0       	rcall	.+436    	; 0x133a <__fp_pscA>
    1186:	30 f0       	brcs	.+12     	; 0x1194 <__divsf3+0x18>
    1188:	21 f4       	brne	.+8      	; 0x1192 <__divsf3+0x16>
    118a:	5f 3f       	cpi	r21, 0xFF	; 255
    118c:	19 f0       	breq	.+6      	; 0x1194 <__divsf3+0x18>
    118e:	cc c0       	rjmp	.+408    	; 0x1328 <__fp_inf>
    1190:	51 11       	cpse	r21, r1
    1192:	15 c1       	rjmp	.+554    	; 0x13be <__fp_szero>
    1194:	cf c0       	rjmp	.+414    	; 0x1334 <__fp_nan>

00001196 <__divsf3x>:
    1196:	f0 d0       	rcall	.+480    	; 0x1378 <__fp_split3>
    1198:	98 f3       	brcs	.-26     	; 0x1180 <__divsf3+0x4>

0000119a <__divsf3_pse>:
    119a:	99 23       	and	r25, r25
    119c:	c9 f3       	breq	.-14     	; 0x1190 <__divsf3+0x14>
    119e:	55 23       	and	r21, r21
    11a0:	b1 f3       	breq	.-20     	; 0x118e <__divsf3+0x12>
    11a2:	95 1b       	sub	r25, r21
    11a4:	55 0b       	sbc	r21, r21
    11a6:	bb 27       	eor	r27, r27
    11a8:	aa 27       	eor	r26, r26
    11aa:	62 17       	cp	r22, r18
    11ac:	73 07       	cpc	r23, r19
    11ae:	84 07       	cpc	r24, r20
    11b0:	38 f0       	brcs	.+14     	; 0x11c0 <__divsf3_pse+0x26>
    11b2:	9f 5f       	subi	r25, 0xFF	; 255
    11b4:	5f 4f       	sbci	r21, 0xFF	; 255
    11b6:	22 0f       	add	r18, r18
    11b8:	33 1f       	adc	r19, r19
    11ba:	44 1f       	adc	r20, r20
    11bc:	aa 1f       	adc	r26, r26
    11be:	a9 f3       	breq	.-22     	; 0x11aa <__divsf3_pse+0x10>
    11c0:	33 d0       	rcall	.+102    	; 0x1228 <__divsf3_pse+0x8e>
    11c2:	0e 2e       	mov	r0, r30
    11c4:	3a f0       	brmi	.+14     	; 0x11d4 <__divsf3_pse+0x3a>
    11c6:	e0 e8       	ldi	r30, 0x80	; 128
    11c8:	30 d0       	rcall	.+96     	; 0x122a <__divsf3_pse+0x90>
    11ca:	91 50       	subi	r25, 0x01	; 1
    11cc:	50 40       	sbci	r21, 0x00	; 0
    11ce:	e6 95       	lsr	r30
    11d0:	00 1c       	adc	r0, r0
    11d2:	ca f7       	brpl	.-14     	; 0x11c6 <__divsf3_pse+0x2c>
    11d4:	29 d0       	rcall	.+82     	; 0x1228 <__divsf3_pse+0x8e>
    11d6:	fe 2f       	mov	r31, r30
    11d8:	27 d0       	rcall	.+78     	; 0x1228 <__divsf3_pse+0x8e>
    11da:	66 0f       	add	r22, r22
    11dc:	77 1f       	adc	r23, r23
    11de:	88 1f       	adc	r24, r24
    11e0:	bb 1f       	adc	r27, r27
    11e2:	26 17       	cp	r18, r22
    11e4:	37 07       	cpc	r19, r23
    11e6:	48 07       	cpc	r20, r24
    11e8:	ab 07       	cpc	r26, r27
    11ea:	b0 e8       	ldi	r27, 0x80	; 128
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <__divsf3_pse+0x56>
    11ee:	bb 0b       	sbc	r27, r27
    11f0:	80 2d       	mov	r24, r0
    11f2:	bf 01       	movw	r22, r30
    11f4:	ff 27       	eor	r31, r31
    11f6:	93 58       	subi	r25, 0x83	; 131
    11f8:	5f 4f       	sbci	r21, 0xFF	; 255
    11fa:	2a f0       	brmi	.+10     	; 0x1206 <__divsf3_pse+0x6c>
    11fc:	9e 3f       	cpi	r25, 0xFE	; 254
    11fe:	51 05       	cpc	r21, r1
    1200:	68 f0       	brcs	.+26     	; 0x121c <__divsf3_pse+0x82>
    1202:	92 c0       	rjmp	.+292    	; 0x1328 <__fp_inf>
    1204:	dc c0       	rjmp	.+440    	; 0x13be <__fp_szero>
    1206:	5f 3f       	cpi	r21, 0xFF	; 255
    1208:	ec f3       	brlt	.-6      	; 0x1204 <__divsf3_pse+0x6a>
    120a:	98 3e       	cpi	r25, 0xE8	; 232
    120c:	dc f3       	brlt	.-10     	; 0x1204 <__divsf3_pse+0x6a>
    120e:	86 95       	lsr	r24
    1210:	77 95       	ror	r23
    1212:	67 95       	ror	r22
    1214:	b7 95       	ror	r27
    1216:	f7 95       	ror	r31
    1218:	9f 5f       	subi	r25, 0xFF	; 255
    121a:	c9 f7       	brne	.-14     	; 0x120e <__divsf3_pse+0x74>
    121c:	88 0f       	add	r24, r24
    121e:	91 1d       	adc	r25, r1
    1220:	96 95       	lsr	r25
    1222:	87 95       	ror	r24
    1224:	97 f9       	bld	r25, 7
    1226:	08 95       	ret
    1228:	e1 e0       	ldi	r30, 0x01	; 1
    122a:	66 0f       	add	r22, r22
    122c:	77 1f       	adc	r23, r23
    122e:	88 1f       	adc	r24, r24
    1230:	bb 1f       	adc	r27, r27
    1232:	62 17       	cp	r22, r18
    1234:	73 07       	cpc	r23, r19
    1236:	84 07       	cpc	r24, r20
    1238:	ba 07       	cpc	r27, r26
    123a:	20 f0       	brcs	.+8      	; 0x1244 <__divsf3_pse+0xaa>
    123c:	62 1b       	sub	r22, r18
    123e:	73 0b       	sbc	r23, r19
    1240:	84 0b       	sbc	r24, r20
    1242:	ba 0b       	sbc	r27, r26
    1244:	ee 1f       	adc	r30, r30
    1246:	88 f7       	brcc	.-30     	; 0x122a <__divsf3_pse+0x90>
    1248:	e0 95       	com	r30
    124a:	08 95       	ret

0000124c <__fixsfsi>:
    124c:	04 d0       	rcall	.+8      	; 0x1256 <__fixunssfsi>
    124e:	68 94       	set
    1250:	b1 11       	cpse	r27, r1
    1252:	b5 c0       	rjmp	.+362    	; 0x13be <__fp_szero>
    1254:	08 95       	ret

00001256 <__fixunssfsi>:
    1256:	98 d0       	rcall	.+304    	; 0x1388 <__fp_splitA>
    1258:	88 f0       	brcs	.+34     	; 0x127c <__fixunssfsi+0x26>
    125a:	9f 57       	subi	r25, 0x7F	; 127
    125c:	90 f0       	brcs	.+36     	; 0x1282 <__fixunssfsi+0x2c>
    125e:	b9 2f       	mov	r27, r25
    1260:	99 27       	eor	r25, r25
    1262:	b7 51       	subi	r27, 0x17	; 23
    1264:	a0 f0       	brcs	.+40     	; 0x128e <__fixunssfsi+0x38>
    1266:	d1 f0       	breq	.+52     	; 0x129c <__fixunssfsi+0x46>
    1268:	66 0f       	add	r22, r22
    126a:	77 1f       	adc	r23, r23
    126c:	88 1f       	adc	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	1a f0       	brmi	.+6      	; 0x1278 <__fixunssfsi+0x22>
    1272:	ba 95       	dec	r27
    1274:	c9 f7       	brne	.-14     	; 0x1268 <__fixunssfsi+0x12>
    1276:	12 c0       	rjmp	.+36     	; 0x129c <__fixunssfsi+0x46>
    1278:	b1 30       	cpi	r27, 0x01	; 1
    127a:	81 f0       	breq	.+32     	; 0x129c <__fixunssfsi+0x46>
    127c:	9f d0       	rcall	.+318    	; 0x13bc <__fp_zero>
    127e:	b1 e0       	ldi	r27, 0x01	; 1
    1280:	08 95       	ret
    1282:	9c c0       	rjmp	.+312    	; 0x13bc <__fp_zero>
    1284:	67 2f       	mov	r22, r23
    1286:	78 2f       	mov	r23, r24
    1288:	88 27       	eor	r24, r24
    128a:	b8 5f       	subi	r27, 0xF8	; 248
    128c:	39 f0       	breq	.+14     	; 0x129c <__fixunssfsi+0x46>
    128e:	b9 3f       	cpi	r27, 0xF9	; 249
    1290:	cc f3       	brlt	.-14     	; 0x1284 <__fixunssfsi+0x2e>
    1292:	86 95       	lsr	r24
    1294:	77 95       	ror	r23
    1296:	67 95       	ror	r22
    1298:	b3 95       	inc	r27
    129a:	d9 f7       	brne	.-10     	; 0x1292 <__fixunssfsi+0x3c>
    129c:	3e f4       	brtc	.+14     	; 0x12ac <__fixunssfsi+0x56>
    129e:	90 95       	com	r25
    12a0:	80 95       	com	r24
    12a2:	70 95       	com	r23
    12a4:	61 95       	neg	r22
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255
    12a8:	8f 4f       	sbci	r24, 0xFF	; 255
    12aa:	9f 4f       	sbci	r25, 0xFF	; 255
    12ac:	08 95       	ret

000012ae <__floatunsisf>:
    12ae:	e8 94       	clt
    12b0:	09 c0       	rjmp	.+18     	; 0x12c4 <__floatsisf+0x12>

000012b2 <__floatsisf>:
    12b2:	97 fb       	bst	r25, 7
    12b4:	3e f4       	brtc	.+14     	; 0x12c4 <__floatsisf+0x12>
    12b6:	90 95       	com	r25
    12b8:	80 95       	com	r24
    12ba:	70 95       	com	r23
    12bc:	61 95       	neg	r22
    12be:	7f 4f       	sbci	r23, 0xFF	; 255
    12c0:	8f 4f       	sbci	r24, 0xFF	; 255
    12c2:	9f 4f       	sbci	r25, 0xFF	; 255
    12c4:	99 23       	and	r25, r25
    12c6:	a9 f0       	breq	.+42     	; 0x12f2 <__floatsisf+0x40>
    12c8:	f9 2f       	mov	r31, r25
    12ca:	96 e9       	ldi	r25, 0x96	; 150
    12cc:	bb 27       	eor	r27, r27
    12ce:	93 95       	inc	r25
    12d0:	f6 95       	lsr	r31
    12d2:	87 95       	ror	r24
    12d4:	77 95       	ror	r23
    12d6:	67 95       	ror	r22
    12d8:	b7 95       	ror	r27
    12da:	f1 11       	cpse	r31, r1
    12dc:	f8 cf       	rjmp	.-16     	; 0x12ce <__floatsisf+0x1c>
    12de:	fa f4       	brpl	.+62     	; 0x131e <__floatsisf+0x6c>
    12e0:	bb 0f       	add	r27, r27
    12e2:	11 f4       	brne	.+4      	; 0x12e8 <__floatsisf+0x36>
    12e4:	60 ff       	sbrs	r22, 0
    12e6:	1b c0       	rjmp	.+54     	; 0x131e <__floatsisf+0x6c>
    12e8:	6f 5f       	subi	r22, 0xFF	; 255
    12ea:	7f 4f       	sbci	r23, 0xFF	; 255
    12ec:	8f 4f       	sbci	r24, 0xFF	; 255
    12ee:	9f 4f       	sbci	r25, 0xFF	; 255
    12f0:	16 c0       	rjmp	.+44     	; 0x131e <__floatsisf+0x6c>
    12f2:	88 23       	and	r24, r24
    12f4:	11 f0       	breq	.+4      	; 0x12fa <__floatsisf+0x48>
    12f6:	96 e9       	ldi	r25, 0x96	; 150
    12f8:	11 c0       	rjmp	.+34     	; 0x131c <__floatsisf+0x6a>
    12fa:	77 23       	and	r23, r23
    12fc:	21 f0       	breq	.+8      	; 0x1306 <__floatsisf+0x54>
    12fe:	9e e8       	ldi	r25, 0x8E	; 142
    1300:	87 2f       	mov	r24, r23
    1302:	76 2f       	mov	r23, r22
    1304:	05 c0       	rjmp	.+10     	; 0x1310 <__floatsisf+0x5e>
    1306:	66 23       	and	r22, r22
    1308:	71 f0       	breq	.+28     	; 0x1326 <__floatsisf+0x74>
    130a:	96 e8       	ldi	r25, 0x86	; 134
    130c:	86 2f       	mov	r24, r22
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	2a f0       	brmi	.+10     	; 0x131e <__floatsisf+0x6c>
    1314:	9a 95       	dec	r25
    1316:	66 0f       	add	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	88 1f       	adc	r24, r24
    131c:	da f7       	brpl	.-10     	; 0x1314 <__floatsisf+0x62>
    131e:	88 0f       	add	r24, r24
    1320:	96 95       	lsr	r25
    1322:	87 95       	ror	r24
    1324:	97 f9       	bld	r25, 7
    1326:	08 95       	ret

00001328 <__fp_inf>:
    1328:	97 f9       	bld	r25, 7
    132a:	9f 67       	ori	r25, 0x7F	; 127
    132c:	80 e8       	ldi	r24, 0x80	; 128
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	08 95       	ret

00001334 <__fp_nan>:
    1334:	9f ef       	ldi	r25, 0xFF	; 255
    1336:	80 ec       	ldi	r24, 0xC0	; 192
    1338:	08 95       	ret

0000133a <__fp_pscA>:
    133a:	00 24       	eor	r0, r0
    133c:	0a 94       	dec	r0
    133e:	16 16       	cp	r1, r22
    1340:	17 06       	cpc	r1, r23
    1342:	18 06       	cpc	r1, r24
    1344:	09 06       	cpc	r0, r25
    1346:	08 95       	ret

00001348 <__fp_pscB>:
    1348:	00 24       	eor	r0, r0
    134a:	0a 94       	dec	r0
    134c:	12 16       	cp	r1, r18
    134e:	13 06       	cpc	r1, r19
    1350:	14 06       	cpc	r1, r20
    1352:	05 06       	cpc	r0, r21
    1354:	08 95       	ret

00001356 <__fp_round>:
    1356:	09 2e       	mov	r0, r25
    1358:	03 94       	inc	r0
    135a:	00 0c       	add	r0, r0
    135c:	11 f4       	brne	.+4      	; 0x1362 <__fp_round+0xc>
    135e:	88 23       	and	r24, r24
    1360:	52 f0       	brmi	.+20     	; 0x1376 <__fp_round+0x20>
    1362:	bb 0f       	add	r27, r27
    1364:	40 f4       	brcc	.+16     	; 0x1376 <__fp_round+0x20>
    1366:	bf 2b       	or	r27, r31
    1368:	11 f4       	brne	.+4      	; 0x136e <__fp_round+0x18>
    136a:	60 ff       	sbrs	r22, 0
    136c:	04 c0       	rjmp	.+8      	; 0x1376 <__fp_round+0x20>
    136e:	6f 5f       	subi	r22, 0xFF	; 255
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	8f 4f       	sbci	r24, 0xFF	; 255
    1374:	9f 4f       	sbci	r25, 0xFF	; 255
    1376:	08 95       	ret

00001378 <__fp_split3>:
    1378:	57 fd       	sbrc	r21, 7
    137a:	90 58       	subi	r25, 0x80	; 128
    137c:	44 0f       	add	r20, r20
    137e:	55 1f       	adc	r21, r21
    1380:	59 f0       	breq	.+22     	; 0x1398 <__fp_splitA+0x10>
    1382:	5f 3f       	cpi	r21, 0xFF	; 255
    1384:	71 f0       	breq	.+28     	; 0x13a2 <__fp_splitA+0x1a>
    1386:	47 95       	ror	r20

00001388 <__fp_splitA>:
    1388:	88 0f       	add	r24, r24
    138a:	97 fb       	bst	r25, 7
    138c:	99 1f       	adc	r25, r25
    138e:	61 f0       	breq	.+24     	; 0x13a8 <__fp_splitA+0x20>
    1390:	9f 3f       	cpi	r25, 0xFF	; 255
    1392:	79 f0       	breq	.+30     	; 0x13b2 <__fp_splitA+0x2a>
    1394:	87 95       	ror	r24
    1396:	08 95       	ret
    1398:	12 16       	cp	r1, r18
    139a:	13 06       	cpc	r1, r19
    139c:	14 06       	cpc	r1, r20
    139e:	55 1f       	adc	r21, r21
    13a0:	f2 cf       	rjmp	.-28     	; 0x1386 <__fp_split3+0xe>
    13a2:	46 95       	lsr	r20
    13a4:	f1 df       	rcall	.-30     	; 0x1388 <__fp_splitA>
    13a6:	08 c0       	rjmp	.+16     	; 0x13b8 <__fp_splitA+0x30>
    13a8:	16 16       	cp	r1, r22
    13aa:	17 06       	cpc	r1, r23
    13ac:	18 06       	cpc	r1, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	f1 cf       	rjmp	.-30     	; 0x1394 <__fp_splitA+0xc>
    13b2:	86 95       	lsr	r24
    13b4:	71 05       	cpc	r23, r1
    13b6:	61 05       	cpc	r22, r1
    13b8:	08 94       	sec
    13ba:	08 95       	ret

000013bc <__fp_zero>:
    13bc:	e8 94       	clt

000013be <__fp_szero>:
    13be:	bb 27       	eor	r27, r27
    13c0:	66 27       	eor	r22, r22
    13c2:	77 27       	eor	r23, r23
    13c4:	cb 01       	movw	r24, r22
    13c6:	97 f9       	bld	r25, 7
    13c8:	08 95       	ret

000013ca <__mulsf3>:
    13ca:	0b d0       	rcall	.+22     	; 0x13e2 <__mulsf3x>
    13cc:	c4 cf       	rjmp	.-120    	; 0x1356 <__fp_round>
    13ce:	b5 df       	rcall	.-150    	; 0x133a <__fp_pscA>
    13d0:	28 f0       	brcs	.+10     	; 0x13dc <__mulsf3+0x12>
    13d2:	ba df       	rcall	.-140    	; 0x1348 <__fp_pscB>
    13d4:	18 f0       	brcs	.+6      	; 0x13dc <__mulsf3+0x12>
    13d6:	95 23       	and	r25, r21
    13d8:	09 f0       	breq	.+2      	; 0x13dc <__mulsf3+0x12>
    13da:	a6 cf       	rjmp	.-180    	; 0x1328 <__fp_inf>
    13dc:	ab cf       	rjmp	.-170    	; 0x1334 <__fp_nan>
    13de:	11 24       	eor	r1, r1
    13e0:	ee cf       	rjmp	.-36     	; 0x13be <__fp_szero>

000013e2 <__mulsf3x>:
    13e2:	ca df       	rcall	.-108    	; 0x1378 <__fp_split3>
    13e4:	a0 f3       	brcs	.-24     	; 0x13ce <__mulsf3+0x4>

000013e6 <__mulsf3_pse>:
    13e6:	95 9f       	mul	r25, r21
    13e8:	d1 f3       	breq	.-12     	; 0x13de <__mulsf3+0x14>
    13ea:	95 0f       	add	r25, r21
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	55 1f       	adc	r21, r21
    13f0:	62 9f       	mul	r22, r18
    13f2:	f0 01       	movw	r30, r0
    13f4:	72 9f       	mul	r23, r18
    13f6:	bb 27       	eor	r27, r27
    13f8:	f0 0d       	add	r31, r0
    13fa:	b1 1d       	adc	r27, r1
    13fc:	63 9f       	mul	r22, r19
    13fe:	aa 27       	eor	r26, r26
    1400:	f0 0d       	add	r31, r0
    1402:	b1 1d       	adc	r27, r1
    1404:	aa 1f       	adc	r26, r26
    1406:	64 9f       	mul	r22, r20
    1408:	66 27       	eor	r22, r22
    140a:	b0 0d       	add	r27, r0
    140c:	a1 1d       	adc	r26, r1
    140e:	66 1f       	adc	r22, r22
    1410:	82 9f       	mul	r24, r18
    1412:	22 27       	eor	r18, r18
    1414:	b0 0d       	add	r27, r0
    1416:	a1 1d       	adc	r26, r1
    1418:	62 1f       	adc	r22, r18
    141a:	73 9f       	mul	r23, r19
    141c:	b0 0d       	add	r27, r0
    141e:	a1 1d       	adc	r26, r1
    1420:	62 1f       	adc	r22, r18
    1422:	83 9f       	mul	r24, r19
    1424:	a0 0d       	add	r26, r0
    1426:	61 1d       	adc	r22, r1
    1428:	22 1f       	adc	r18, r18
    142a:	74 9f       	mul	r23, r20
    142c:	33 27       	eor	r19, r19
    142e:	a0 0d       	add	r26, r0
    1430:	61 1d       	adc	r22, r1
    1432:	23 1f       	adc	r18, r19
    1434:	84 9f       	mul	r24, r20
    1436:	60 0d       	add	r22, r0
    1438:	21 1d       	adc	r18, r1
    143a:	82 2f       	mov	r24, r18
    143c:	76 2f       	mov	r23, r22
    143e:	6a 2f       	mov	r22, r26
    1440:	11 24       	eor	r1, r1
    1442:	9f 57       	subi	r25, 0x7F	; 127
    1444:	50 40       	sbci	r21, 0x00	; 0
    1446:	8a f0       	brmi	.+34     	; 0x146a <__mulsf3_pse+0x84>
    1448:	e1 f0       	breq	.+56     	; 0x1482 <__mulsf3_pse+0x9c>
    144a:	88 23       	and	r24, r24
    144c:	4a f0       	brmi	.+18     	; 0x1460 <__mulsf3_pse+0x7a>
    144e:	ee 0f       	add	r30, r30
    1450:	ff 1f       	adc	r31, r31
    1452:	bb 1f       	adc	r27, r27
    1454:	66 1f       	adc	r22, r22
    1456:	77 1f       	adc	r23, r23
    1458:	88 1f       	adc	r24, r24
    145a:	91 50       	subi	r25, 0x01	; 1
    145c:	50 40       	sbci	r21, 0x00	; 0
    145e:	a9 f7       	brne	.-22     	; 0x144a <__mulsf3_pse+0x64>
    1460:	9e 3f       	cpi	r25, 0xFE	; 254
    1462:	51 05       	cpc	r21, r1
    1464:	70 f0       	brcs	.+28     	; 0x1482 <__mulsf3_pse+0x9c>
    1466:	60 cf       	rjmp	.-320    	; 0x1328 <__fp_inf>
    1468:	aa cf       	rjmp	.-172    	; 0x13be <__fp_szero>
    146a:	5f 3f       	cpi	r21, 0xFF	; 255
    146c:	ec f3       	brlt	.-6      	; 0x1468 <__mulsf3_pse+0x82>
    146e:	98 3e       	cpi	r25, 0xE8	; 232
    1470:	dc f3       	brlt	.-10     	; 0x1468 <__mulsf3_pse+0x82>
    1472:	86 95       	lsr	r24
    1474:	77 95       	ror	r23
    1476:	67 95       	ror	r22
    1478:	b7 95       	ror	r27
    147a:	f7 95       	ror	r31
    147c:	e7 95       	ror	r30
    147e:	9f 5f       	subi	r25, 0xFF	; 255
    1480:	c1 f7       	brne	.-16     	; 0x1472 <__mulsf3_pse+0x8c>
    1482:	fe 2b       	or	r31, r30
    1484:	88 0f       	add	r24, r24
    1486:	91 1d       	adc	r25, r1
    1488:	96 95       	lsr	r25
    148a:	87 95       	ror	r24
    148c:	97 f9       	bld	r25, 7
    148e:	08 95       	ret

00001490 <__divmodhi4>:
    1490:	97 fb       	bst	r25, 7
    1492:	07 2e       	mov	r0, r23
    1494:	16 f4       	brtc	.+4      	; 0x149a <__divmodhi4+0xa>
    1496:	00 94       	com	r0
    1498:	06 d0       	rcall	.+12     	; 0x14a6 <__divmodhi4_neg1>
    149a:	77 fd       	sbrc	r23, 7
    149c:	08 d0       	rcall	.+16     	; 0x14ae <__divmodhi4_neg2>
    149e:	36 d0       	rcall	.+108    	; 0x150c <__udivmodhi4>
    14a0:	07 fc       	sbrc	r0, 7
    14a2:	05 d0       	rcall	.+10     	; 0x14ae <__divmodhi4_neg2>
    14a4:	3e f4       	brtc	.+14     	; 0x14b4 <__divmodhi4_exit>

000014a6 <__divmodhi4_neg1>:
    14a6:	90 95       	com	r25
    14a8:	81 95       	neg	r24
    14aa:	9f 4f       	sbci	r25, 0xFF	; 255
    14ac:	08 95       	ret

000014ae <__divmodhi4_neg2>:
    14ae:	70 95       	com	r23
    14b0:	61 95       	neg	r22
    14b2:	7f 4f       	sbci	r23, 0xFF	; 255

000014b4 <__divmodhi4_exit>:
    14b4:	08 95       	ret

000014b6 <__udivmodsi4>:
    14b6:	a1 e2       	ldi	r26, 0x21	; 33
    14b8:	1a 2e       	mov	r1, r26
    14ba:	aa 1b       	sub	r26, r26
    14bc:	bb 1b       	sub	r27, r27
    14be:	fd 01       	movw	r30, r26
    14c0:	0d c0       	rjmp	.+26     	; 0x14dc <__udivmodsi4_ep>

000014c2 <__udivmodsi4_loop>:
    14c2:	aa 1f       	adc	r26, r26
    14c4:	bb 1f       	adc	r27, r27
    14c6:	ee 1f       	adc	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	a2 17       	cp	r26, r18
    14cc:	b3 07       	cpc	r27, r19
    14ce:	e4 07       	cpc	r30, r20
    14d0:	f5 07       	cpc	r31, r21
    14d2:	20 f0       	brcs	.+8      	; 0x14dc <__udivmodsi4_ep>
    14d4:	a2 1b       	sub	r26, r18
    14d6:	b3 0b       	sbc	r27, r19
    14d8:	e4 0b       	sbc	r30, r20
    14da:	f5 0b       	sbc	r31, r21

000014dc <__udivmodsi4_ep>:
    14dc:	66 1f       	adc	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	1a 94       	dec	r1
    14e6:	69 f7       	brne	.-38     	; 0x14c2 <__udivmodsi4_loop>
    14e8:	60 95       	com	r22
    14ea:	70 95       	com	r23
    14ec:	80 95       	com	r24
    14ee:	90 95       	com	r25
    14f0:	9b 01       	movw	r18, r22
    14f2:	ac 01       	movw	r20, r24
    14f4:	bd 01       	movw	r22, r26
    14f6:	cf 01       	movw	r24, r30
    14f8:	08 95       	ret

000014fa <__tablejump2__>:
    14fa:	ee 0f       	add	r30, r30
    14fc:	ff 1f       	adc	r31, r31
    14fe:	00 24       	eor	r0, r0
    1500:	00 1c       	adc	r0, r0
    1502:	0b be       	out	0x3b, r0	; 59
    1504:	07 90       	elpm	r0, Z+
    1506:	f6 91       	elpm	r31, Z
    1508:	e0 2d       	mov	r30, r0
    150a:	09 94       	ijmp

0000150c <__udivmodhi4>:
    150c:	aa 1b       	sub	r26, r26
    150e:	bb 1b       	sub	r27, r27
    1510:	51 e1       	ldi	r21, 0x11	; 17
    1512:	07 c0       	rjmp	.+14     	; 0x1522 <__udivmodhi4_ep>

00001514 <__udivmodhi4_loop>:
    1514:	aa 1f       	adc	r26, r26
    1516:	bb 1f       	adc	r27, r27
    1518:	a6 17       	cp	r26, r22
    151a:	b7 07       	cpc	r27, r23
    151c:	10 f0       	brcs	.+4      	; 0x1522 <__udivmodhi4_ep>
    151e:	a6 1b       	sub	r26, r22
    1520:	b7 0b       	sbc	r27, r23

00001522 <__udivmodhi4_ep>:
    1522:	88 1f       	adc	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	5a 95       	dec	r21
    1528:	a9 f7       	brne	.-22     	; 0x1514 <__udivmodhi4_loop>
    152a:	80 95       	com	r24
    152c:	90 95       	com	r25
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	08 95       	ret

00001534 <printf>:
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	ae 01       	movw	r20, r28
    153e:	4b 5f       	subi	r20, 0xFB	; 251
    1540:	5f 4f       	sbci	r21, 0xFF	; 255
    1542:	fa 01       	movw	r30, r20
    1544:	61 91       	ld	r22, Z+
    1546:	71 91       	ld	r23, Z+
    1548:	af 01       	movw	r20, r30
    154a:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <__iob+0x2>
    154e:	90 91 c2 07 	lds	r25, 0x07C2	; 0x8007c2 <__iob+0x3>
    1552:	31 d0       	rcall	.+98     	; 0x15b6 <vfprintf>
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	08 95       	ret

0000155a <sprintf>:
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	2e 97       	sbiw	r28, 0x0e	; 14
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	0d 89       	ldd	r16, Y+21	; 0x15
    1574:	1e 89       	ldd	r17, Y+22	; 0x16
    1576:	86 e0       	ldi	r24, 0x06	; 6
    1578:	8c 83       	std	Y+4, r24	; 0x04
    157a:	1a 83       	std	Y+2, r17	; 0x02
    157c:	09 83       	std	Y+1, r16	; 0x01
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	9f e7       	ldi	r25, 0x7F	; 127
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	ae 01       	movw	r20, r28
    1588:	47 5e       	subi	r20, 0xE7	; 231
    158a:	5f 4f       	sbci	r21, 0xFF	; 255
    158c:	6f 89       	ldd	r22, Y+23	; 0x17
    158e:	78 8d       	ldd	r23, Y+24	; 0x18
    1590:	ce 01       	movw	r24, r28
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	10 d0       	rcall	.+32     	; 0x15b6 <vfprintf>
    1596:	ef 81       	ldd	r30, Y+7	; 0x07
    1598:	f8 85       	ldd	r31, Y+8	; 0x08
    159a:	e0 0f       	add	r30, r16
    159c:	f1 1f       	adc	r31, r17
    159e:	10 82       	st	Z, r1
    15a0:	2e 96       	adiw	r28, 0x0e	; 14
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	08 95       	ret

000015b6 <vfprintf>:
    15b6:	2f 92       	push	r2
    15b8:	3f 92       	push	r3
    15ba:	4f 92       	push	r4
    15bc:	5f 92       	push	r5
    15be:	6f 92       	push	r6
    15c0:	7f 92       	push	r7
    15c2:	8f 92       	push	r8
    15c4:	9f 92       	push	r9
    15c6:	af 92       	push	r10
    15c8:	bf 92       	push	r11
    15ca:	cf 92       	push	r12
    15cc:	df 92       	push	r13
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	2b 97       	sbiw	r28, 0x0b	; 11
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	6c 01       	movw	r12, r24
    15ec:	7b 01       	movw	r14, r22
    15ee:	8a 01       	movw	r16, r20
    15f0:	fc 01       	movw	r30, r24
    15f2:	17 82       	std	Z+7, r1	; 0x07
    15f4:	16 82       	std	Z+6, r1	; 0x06
    15f6:	83 81       	ldd	r24, Z+3	; 0x03
    15f8:	81 ff       	sbrs	r24, 1
    15fa:	bf c1       	rjmp	.+894    	; 0x197a <vfprintf+0x3c4>
    15fc:	ce 01       	movw	r24, r28
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	3c 01       	movw	r6, r24
    1602:	f6 01       	movw	r30, r12
    1604:	93 81       	ldd	r25, Z+3	; 0x03
    1606:	f7 01       	movw	r30, r14
    1608:	93 fd       	sbrc	r25, 3
    160a:	85 91       	lpm	r24, Z+
    160c:	93 ff       	sbrs	r25, 3
    160e:	81 91       	ld	r24, Z+
    1610:	7f 01       	movw	r14, r30
    1612:	88 23       	and	r24, r24
    1614:	09 f4       	brne	.+2      	; 0x1618 <vfprintf+0x62>
    1616:	ad c1       	rjmp	.+858    	; 0x1972 <vfprintf+0x3bc>
    1618:	85 32       	cpi	r24, 0x25	; 37
    161a:	39 f4       	brne	.+14     	; 0x162a <vfprintf+0x74>
    161c:	93 fd       	sbrc	r25, 3
    161e:	85 91       	lpm	r24, Z+
    1620:	93 ff       	sbrs	r25, 3
    1622:	81 91       	ld	r24, Z+
    1624:	7f 01       	movw	r14, r30
    1626:	85 32       	cpi	r24, 0x25	; 37
    1628:	21 f4       	brne	.+8      	; 0x1632 <vfprintf+0x7c>
    162a:	b6 01       	movw	r22, r12
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	d6 d1       	rcall	.+940    	; 0x19dc <fputc>
    1630:	e8 cf       	rjmp	.-48     	; 0x1602 <vfprintf+0x4c>
    1632:	91 2c       	mov	r9, r1
    1634:	21 2c       	mov	r2, r1
    1636:	31 2c       	mov	r3, r1
    1638:	ff e1       	ldi	r31, 0x1F	; 31
    163a:	f3 15       	cp	r31, r3
    163c:	d8 f0       	brcs	.+54     	; 0x1674 <vfprintf+0xbe>
    163e:	8b 32       	cpi	r24, 0x2B	; 43
    1640:	79 f0       	breq	.+30     	; 0x1660 <vfprintf+0xaa>
    1642:	38 f4       	brcc	.+14     	; 0x1652 <vfprintf+0x9c>
    1644:	80 32       	cpi	r24, 0x20	; 32
    1646:	79 f0       	breq	.+30     	; 0x1666 <vfprintf+0xb0>
    1648:	83 32       	cpi	r24, 0x23	; 35
    164a:	a1 f4       	brne	.+40     	; 0x1674 <vfprintf+0xbe>
    164c:	23 2d       	mov	r18, r3
    164e:	20 61       	ori	r18, 0x10	; 16
    1650:	1d c0       	rjmp	.+58     	; 0x168c <vfprintf+0xd6>
    1652:	8d 32       	cpi	r24, 0x2D	; 45
    1654:	61 f0       	breq	.+24     	; 0x166e <vfprintf+0xb8>
    1656:	80 33       	cpi	r24, 0x30	; 48
    1658:	69 f4       	brne	.+26     	; 0x1674 <vfprintf+0xbe>
    165a:	23 2d       	mov	r18, r3
    165c:	21 60       	ori	r18, 0x01	; 1
    165e:	16 c0       	rjmp	.+44     	; 0x168c <vfprintf+0xd6>
    1660:	83 2d       	mov	r24, r3
    1662:	82 60       	ori	r24, 0x02	; 2
    1664:	38 2e       	mov	r3, r24
    1666:	e3 2d       	mov	r30, r3
    1668:	e4 60       	ori	r30, 0x04	; 4
    166a:	3e 2e       	mov	r3, r30
    166c:	2a c0       	rjmp	.+84     	; 0x16c2 <vfprintf+0x10c>
    166e:	f3 2d       	mov	r31, r3
    1670:	f8 60       	ori	r31, 0x08	; 8
    1672:	1d c0       	rjmp	.+58     	; 0x16ae <vfprintf+0xf8>
    1674:	37 fc       	sbrc	r3, 7
    1676:	2d c0       	rjmp	.+90     	; 0x16d2 <vfprintf+0x11c>
    1678:	20 ed       	ldi	r18, 0xD0	; 208
    167a:	28 0f       	add	r18, r24
    167c:	2a 30       	cpi	r18, 0x0A	; 10
    167e:	40 f0       	brcs	.+16     	; 0x1690 <vfprintf+0xda>
    1680:	8e 32       	cpi	r24, 0x2E	; 46
    1682:	b9 f4       	brne	.+46     	; 0x16b2 <vfprintf+0xfc>
    1684:	36 fc       	sbrc	r3, 6
    1686:	75 c1       	rjmp	.+746    	; 0x1972 <vfprintf+0x3bc>
    1688:	23 2d       	mov	r18, r3
    168a:	20 64       	ori	r18, 0x40	; 64
    168c:	32 2e       	mov	r3, r18
    168e:	19 c0       	rjmp	.+50     	; 0x16c2 <vfprintf+0x10c>
    1690:	36 fe       	sbrs	r3, 6
    1692:	06 c0       	rjmp	.+12     	; 0x16a0 <vfprintf+0xea>
    1694:	8a e0       	ldi	r24, 0x0A	; 10
    1696:	98 9e       	mul	r9, r24
    1698:	20 0d       	add	r18, r0
    169a:	11 24       	eor	r1, r1
    169c:	92 2e       	mov	r9, r18
    169e:	11 c0       	rjmp	.+34     	; 0x16c2 <vfprintf+0x10c>
    16a0:	ea e0       	ldi	r30, 0x0A	; 10
    16a2:	2e 9e       	mul	r2, r30
    16a4:	20 0d       	add	r18, r0
    16a6:	11 24       	eor	r1, r1
    16a8:	22 2e       	mov	r2, r18
    16aa:	f3 2d       	mov	r31, r3
    16ac:	f0 62       	ori	r31, 0x20	; 32
    16ae:	3f 2e       	mov	r3, r31
    16b0:	08 c0       	rjmp	.+16     	; 0x16c2 <vfprintf+0x10c>
    16b2:	8c 36       	cpi	r24, 0x6C	; 108
    16b4:	21 f4       	brne	.+8      	; 0x16be <vfprintf+0x108>
    16b6:	83 2d       	mov	r24, r3
    16b8:	80 68       	ori	r24, 0x80	; 128
    16ba:	38 2e       	mov	r3, r24
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <vfprintf+0x10c>
    16be:	88 36       	cpi	r24, 0x68	; 104
    16c0:	41 f4       	brne	.+16     	; 0x16d2 <vfprintf+0x11c>
    16c2:	f7 01       	movw	r30, r14
    16c4:	93 fd       	sbrc	r25, 3
    16c6:	85 91       	lpm	r24, Z+
    16c8:	93 ff       	sbrs	r25, 3
    16ca:	81 91       	ld	r24, Z+
    16cc:	7f 01       	movw	r14, r30
    16ce:	81 11       	cpse	r24, r1
    16d0:	b3 cf       	rjmp	.-154    	; 0x1638 <vfprintf+0x82>
    16d2:	98 2f       	mov	r25, r24
    16d4:	9f 7d       	andi	r25, 0xDF	; 223
    16d6:	95 54       	subi	r25, 0x45	; 69
    16d8:	93 30       	cpi	r25, 0x03	; 3
    16da:	28 f4       	brcc	.+10     	; 0x16e6 <vfprintf+0x130>
    16dc:	0c 5f       	subi	r16, 0xFC	; 252
    16de:	1f 4f       	sbci	r17, 0xFF	; 255
    16e0:	9f e3       	ldi	r25, 0x3F	; 63
    16e2:	99 83       	std	Y+1, r25	; 0x01
    16e4:	0d c0       	rjmp	.+26     	; 0x1700 <vfprintf+0x14a>
    16e6:	83 36       	cpi	r24, 0x63	; 99
    16e8:	31 f0       	breq	.+12     	; 0x16f6 <vfprintf+0x140>
    16ea:	83 37       	cpi	r24, 0x73	; 115
    16ec:	71 f0       	breq	.+28     	; 0x170a <vfprintf+0x154>
    16ee:	83 35       	cpi	r24, 0x53	; 83
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <vfprintf+0x13e>
    16f2:	55 c0       	rjmp	.+170    	; 0x179e <vfprintf+0x1e8>
    16f4:	20 c0       	rjmp	.+64     	; 0x1736 <vfprintf+0x180>
    16f6:	f8 01       	movw	r30, r16
    16f8:	80 81       	ld	r24, Z
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	0e 5f       	subi	r16, 0xFE	; 254
    16fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1700:	88 24       	eor	r8, r8
    1702:	83 94       	inc	r8
    1704:	91 2c       	mov	r9, r1
    1706:	53 01       	movw	r10, r6
    1708:	12 c0       	rjmp	.+36     	; 0x172e <vfprintf+0x178>
    170a:	28 01       	movw	r4, r16
    170c:	f2 e0       	ldi	r31, 0x02	; 2
    170e:	4f 0e       	add	r4, r31
    1710:	51 1c       	adc	r5, r1
    1712:	f8 01       	movw	r30, r16
    1714:	a0 80       	ld	r10, Z
    1716:	b1 80       	ldd	r11, Z+1	; 0x01
    1718:	36 fe       	sbrs	r3, 6
    171a:	03 c0       	rjmp	.+6      	; 0x1722 <vfprintf+0x16c>
    171c:	69 2d       	mov	r22, r9
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <vfprintf+0x170>
    1722:	6f ef       	ldi	r22, 0xFF	; 255
    1724:	7f ef       	ldi	r23, 0xFF	; 255
    1726:	c5 01       	movw	r24, r10
    1728:	4e d1       	rcall	.+668    	; 0x19c6 <strnlen>
    172a:	4c 01       	movw	r8, r24
    172c:	82 01       	movw	r16, r4
    172e:	f3 2d       	mov	r31, r3
    1730:	ff 77       	andi	r31, 0x7F	; 127
    1732:	3f 2e       	mov	r3, r31
    1734:	15 c0       	rjmp	.+42     	; 0x1760 <vfprintf+0x1aa>
    1736:	28 01       	movw	r4, r16
    1738:	22 e0       	ldi	r18, 0x02	; 2
    173a:	42 0e       	add	r4, r18
    173c:	51 1c       	adc	r5, r1
    173e:	f8 01       	movw	r30, r16
    1740:	a0 80       	ld	r10, Z
    1742:	b1 80       	ldd	r11, Z+1	; 0x01
    1744:	36 fe       	sbrs	r3, 6
    1746:	03 c0       	rjmp	.+6      	; 0x174e <vfprintf+0x198>
    1748:	69 2d       	mov	r22, r9
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <vfprintf+0x19c>
    174e:	6f ef       	ldi	r22, 0xFF	; 255
    1750:	7f ef       	ldi	r23, 0xFF	; 255
    1752:	c5 01       	movw	r24, r10
    1754:	2d d1       	rcall	.+602    	; 0x19b0 <strnlen_P>
    1756:	4c 01       	movw	r8, r24
    1758:	f3 2d       	mov	r31, r3
    175a:	f0 68       	ori	r31, 0x80	; 128
    175c:	3f 2e       	mov	r3, r31
    175e:	82 01       	movw	r16, r4
    1760:	33 fc       	sbrc	r3, 3
    1762:	19 c0       	rjmp	.+50     	; 0x1796 <vfprintf+0x1e0>
    1764:	82 2d       	mov	r24, r2
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	88 16       	cp	r8, r24
    176a:	99 06       	cpc	r9, r25
    176c:	a0 f4       	brcc	.+40     	; 0x1796 <vfprintf+0x1e0>
    176e:	b6 01       	movw	r22, r12
    1770:	80 e2       	ldi	r24, 0x20	; 32
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	33 d1       	rcall	.+614    	; 0x19dc <fputc>
    1776:	2a 94       	dec	r2
    1778:	f5 cf       	rjmp	.-22     	; 0x1764 <vfprintf+0x1ae>
    177a:	f5 01       	movw	r30, r10
    177c:	37 fc       	sbrc	r3, 7
    177e:	85 91       	lpm	r24, Z+
    1780:	37 fe       	sbrs	r3, 7
    1782:	81 91       	ld	r24, Z+
    1784:	5f 01       	movw	r10, r30
    1786:	b6 01       	movw	r22, r12
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	28 d1       	rcall	.+592    	; 0x19dc <fputc>
    178c:	21 10       	cpse	r2, r1
    178e:	2a 94       	dec	r2
    1790:	21 e0       	ldi	r18, 0x01	; 1
    1792:	82 1a       	sub	r8, r18
    1794:	91 08       	sbc	r9, r1
    1796:	81 14       	cp	r8, r1
    1798:	91 04       	cpc	r9, r1
    179a:	79 f7       	brne	.-34     	; 0x177a <vfprintf+0x1c4>
    179c:	e1 c0       	rjmp	.+450    	; 0x1960 <vfprintf+0x3aa>
    179e:	84 36       	cpi	r24, 0x64	; 100
    17a0:	11 f0       	breq	.+4      	; 0x17a6 <vfprintf+0x1f0>
    17a2:	89 36       	cpi	r24, 0x69	; 105
    17a4:	39 f5       	brne	.+78     	; 0x17f4 <vfprintf+0x23e>
    17a6:	f8 01       	movw	r30, r16
    17a8:	37 fe       	sbrs	r3, 7
    17aa:	07 c0       	rjmp	.+14     	; 0x17ba <vfprintf+0x204>
    17ac:	60 81       	ld	r22, Z
    17ae:	71 81       	ldd	r23, Z+1	; 0x01
    17b0:	82 81       	ldd	r24, Z+2	; 0x02
    17b2:	93 81       	ldd	r25, Z+3	; 0x03
    17b4:	0c 5f       	subi	r16, 0xFC	; 252
    17b6:	1f 4f       	sbci	r17, 0xFF	; 255
    17b8:	08 c0       	rjmp	.+16     	; 0x17ca <vfprintf+0x214>
    17ba:	60 81       	ld	r22, Z
    17bc:	71 81       	ldd	r23, Z+1	; 0x01
    17be:	07 2e       	mov	r0, r23
    17c0:	00 0c       	add	r0, r0
    17c2:	88 0b       	sbc	r24, r24
    17c4:	99 0b       	sbc	r25, r25
    17c6:	0e 5f       	subi	r16, 0xFE	; 254
    17c8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ca:	f3 2d       	mov	r31, r3
    17cc:	ff 76       	andi	r31, 0x6F	; 111
    17ce:	3f 2e       	mov	r3, r31
    17d0:	97 ff       	sbrs	r25, 7
    17d2:	09 c0       	rjmp	.+18     	; 0x17e6 <vfprintf+0x230>
    17d4:	90 95       	com	r25
    17d6:	80 95       	com	r24
    17d8:	70 95       	com	r23
    17da:	61 95       	neg	r22
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	8f 4f       	sbci	r24, 0xFF	; 255
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	f0 68       	ori	r31, 0x80	; 128
    17e4:	3f 2e       	mov	r3, r31
    17e6:	2a e0       	ldi	r18, 0x0A	; 10
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	a3 01       	movw	r20, r6
    17ec:	33 d1       	rcall	.+614    	; 0x1a54 <__ultoa_invert>
    17ee:	88 2e       	mov	r8, r24
    17f0:	86 18       	sub	r8, r6
    17f2:	44 c0       	rjmp	.+136    	; 0x187c <vfprintf+0x2c6>
    17f4:	85 37       	cpi	r24, 0x75	; 117
    17f6:	31 f4       	brne	.+12     	; 0x1804 <vfprintf+0x24e>
    17f8:	23 2d       	mov	r18, r3
    17fa:	2f 7e       	andi	r18, 0xEF	; 239
    17fc:	b2 2e       	mov	r11, r18
    17fe:	2a e0       	ldi	r18, 0x0A	; 10
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	25 c0       	rjmp	.+74     	; 0x184e <vfprintf+0x298>
    1804:	93 2d       	mov	r25, r3
    1806:	99 7f       	andi	r25, 0xF9	; 249
    1808:	b9 2e       	mov	r11, r25
    180a:	8f 36       	cpi	r24, 0x6F	; 111
    180c:	c1 f0       	breq	.+48     	; 0x183e <vfprintf+0x288>
    180e:	18 f4       	brcc	.+6      	; 0x1816 <vfprintf+0x260>
    1810:	88 35       	cpi	r24, 0x58	; 88
    1812:	79 f0       	breq	.+30     	; 0x1832 <vfprintf+0x27c>
    1814:	ae c0       	rjmp	.+348    	; 0x1972 <vfprintf+0x3bc>
    1816:	80 37       	cpi	r24, 0x70	; 112
    1818:	19 f0       	breq	.+6      	; 0x1820 <vfprintf+0x26a>
    181a:	88 37       	cpi	r24, 0x78	; 120
    181c:	21 f0       	breq	.+8      	; 0x1826 <vfprintf+0x270>
    181e:	a9 c0       	rjmp	.+338    	; 0x1972 <vfprintf+0x3bc>
    1820:	e9 2f       	mov	r30, r25
    1822:	e0 61       	ori	r30, 0x10	; 16
    1824:	be 2e       	mov	r11, r30
    1826:	b4 fe       	sbrs	r11, 4
    1828:	0d c0       	rjmp	.+26     	; 0x1844 <vfprintf+0x28e>
    182a:	fb 2d       	mov	r31, r11
    182c:	f4 60       	ori	r31, 0x04	; 4
    182e:	bf 2e       	mov	r11, r31
    1830:	09 c0       	rjmp	.+18     	; 0x1844 <vfprintf+0x28e>
    1832:	34 fe       	sbrs	r3, 4
    1834:	0a c0       	rjmp	.+20     	; 0x184a <vfprintf+0x294>
    1836:	29 2f       	mov	r18, r25
    1838:	26 60       	ori	r18, 0x06	; 6
    183a:	b2 2e       	mov	r11, r18
    183c:	06 c0       	rjmp	.+12     	; 0x184a <vfprintf+0x294>
    183e:	28 e0       	ldi	r18, 0x08	; 8
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	05 c0       	rjmp	.+10     	; 0x184e <vfprintf+0x298>
    1844:	20 e1       	ldi	r18, 0x10	; 16
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	02 c0       	rjmp	.+4      	; 0x184e <vfprintf+0x298>
    184a:	20 e1       	ldi	r18, 0x10	; 16
    184c:	32 e0       	ldi	r19, 0x02	; 2
    184e:	f8 01       	movw	r30, r16
    1850:	b7 fe       	sbrs	r11, 7
    1852:	07 c0       	rjmp	.+14     	; 0x1862 <vfprintf+0x2ac>
    1854:	60 81       	ld	r22, Z
    1856:	71 81       	ldd	r23, Z+1	; 0x01
    1858:	82 81       	ldd	r24, Z+2	; 0x02
    185a:	93 81       	ldd	r25, Z+3	; 0x03
    185c:	0c 5f       	subi	r16, 0xFC	; 252
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
    1860:	06 c0       	rjmp	.+12     	; 0x186e <vfprintf+0x2b8>
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 5f       	subi	r16, 0xFE	; 254
    186c:	1f 4f       	sbci	r17, 0xFF	; 255
    186e:	a3 01       	movw	r20, r6
    1870:	f1 d0       	rcall	.+482    	; 0x1a54 <__ultoa_invert>
    1872:	88 2e       	mov	r8, r24
    1874:	86 18       	sub	r8, r6
    1876:	fb 2d       	mov	r31, r11
    1878:	ff 77       	andi	r31, 0x7F	; 127
    187a:	3f 2e       	mov	r3, r31
    187c:	36 fe       	sbrs	r3, 6
    187e:	0d c0       	rjmp	.+26     	; 0x189a <vfprintf+0x2e4>
    1880:	23 2d       	mov	r18, r3
    1882:	2e 7f       	andi	r18, 0xFE	; 254
    1884:	a2 2e       	mov	r10, r18
    1886:	89 14       	cp	r8, r9
    1888:	58 f4       	brcc	.+22     	; 0x18a0 <vfprintf+0x2ea>
    188a:	34 fe       	sbrs	r3, 4
    188c:	0b c0       	rjmp	.+22     	; 0x18a4 <vfprintf+0x2ee>
    188e:	32 fc       	sbrc	r3, 2
    1890:	09 c0       	rjmp	.+18     	; 0x18a4 <vfprintf+0x2ee>
    1892:	83 2d       	mov	r24, r3
    1894:	8e 7e       	andi	r24, 0xEE	; 238
    1896:	a8 2e       	mov	r10, r24
    1898:	05 c0       	rjmp	.+10     	; 0x18a4 <vfprintf+0x2ee>
    189a:	b8 2c       	mov	r11, r8
    189c:	a3 2c       	mov	r10, r3
    189e:	03 c0       	rjmp	.+6      	; 0x18a6 <vfprintf+0x2f0>
    18a0:	b8 2c       	mov	r11, r8
    18a2:	01 c0       	rjmp	.+2      	; 0x18a6 <vfprintf+0x2f0>
    18a4:	b9 2c       	mov	r11, r9
    18a6:	a4 fe       	sbrs	r10, 4
    18a8:	0f c0       	rjmp	.+30     	; 0x18c8 <vfprintf+0x312>
    18aa:	fe 01       	movw	r30, r28
    18ac:	e8 0d       	add	r30, r8
    18ae:	f1 1d       	adc	r31, r1
    18b0:	80 81       	ld	r24, Z
    18b2:	80 33       	cpi	r24, 0x30	; 48
    18b4:	21 f4       	brne	.+8      	; 0x18be <vfprintf+0x308>
    18b6:	9a 2d       	mov	r25, r10
    18b8:	99 7e       	andi	r25, 0xE9	; 233
    18ba:	a9 2e       	mov	r10, r25
    18bc:	09 c0       	rjmp	.+18     	; 0x18d0 <vfprintf+0x31a>
    18be:	a2 fe       	sbrs	r10, 2
    18c0:	06 c0       	rjmp	.+12     	; 0x18ce <vfprintf+0x318>
    18c2:	b3 94       	inc	r11
    18c4:	b3 94       	inc	r11
    18c6:	04 c0       	rjmp	.+8      	; 0x18d0 <vfprintf+0x31a>
    18c8:	8a 2d       	mov	r24, r10
    18ca:	86 78       	andi	r24, 0x86	; 134
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <vfprintf+0x31a>
    18ce:	b3 94       	inc	r11
    18d0:	a3 fc       	sbrc	r10, 3
    18d2:	10 c0       	rjmp	.+32     	; 0x18f4 <vfprintf+0x33e>
    18d4:	a0 fe       	sbrs	r10, 0
    18d6:	06 c0       	rjmp	.+12     	; 0x18e4 <vfprintf+0x32e>
    18d8:	b2 14       	cp	r11, r2
    18da:	80 f4       	brcc	.+32     	; 0x18fc <vfprintf+0x346>
    18dc:	28 0c       	add	r2, r8
    18de:	92 2c       	mov	r9, r2
    18e0:	9b 18       	sub	r9, r11
    18e2:	0d c0       	rjmp	.+26     	; 0x18fe <vfprintf+0x348>
    18e4:	b2 14       	cp	r11, r2
    18e6:	58 f4       	brcc	.+22     	; 0x18fe <vfprintf+0x348>
    18e8:	b6 01       	movw	r22, r12
    18ea:	80 e2       	ldi	r24, 0x20	; 32
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	76 d0       	rcall	.+236    	; 0x19dc <fputc>
    18f0:	b3 94       	inc	r11
    18f2:	f8 cf       	rjmp	.-16     	; 0x18e4 <vfprintf+0x32e>
    18f4:	b2 14       	cp	r11, r2
    18f6:	18 f4       	brcc	.+6      	; 0x18fe <vfprintf+0x348>
    18f8:	2b 18       	sub	r2, r11
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <vfprintf+0x34a>
    18fc:	98 2c       	mov	r9, r8
    18fe:	21 2c       	mov	r2, r1
    1900:	a4 fe       	sbrs	r10, 4
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <vfprintf+0x36c>
    1904:	b6 01       	movw	r22, r12
    1906:	80 e3       	ldi	r24, 0x30	; 48
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	68 d0       	rcall	.+208    	; 0x19dc <fputc>
    190c:	a2 fe       	sbrs	r10, 2
    190e:	16 c0       	rjmp	.+44     	; 0x193c <vfprintf+0x386>
    1910:	a1 fc       	sbrc	r10, 1
    1912:	03 c0       	rjmp	.+6      	; 0x191a <vfprintf+0x364>
    1914:	88 e7       	ldi	r24, 0x78	; 120
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 c0       	rjmp	.+4      	; 0x191e <vfprintf+0x368>
    191a:	88 e5       	ldi	r24, 0x58	; 88
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	b6 01       	movw	r22, r12
    1920:	0c c0       	rjmp	.+24     	; 0x193a <vfprintf+0x384>
    1922:	8a 2d       	mov	r24, r10
    1924:	86 78       	andi	r24, 0x86	; 134
    1926:	51 f0       	breq	.+20     	; 0x193c <vfprintf+0x386>
    1928:	a1 fe       	sbrs	r10, 1
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <vfprintf+0x37a>
    192c:	8b e2       	ldi	r24, 0x2B	; 43
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <vfprintf+0x37c>
    1930:	80 e2       	ldi	r24, 0x20	; 32
    1932:	a7 fc       	sbrc	r10, 7
    1934:	8d e2       	ldi	r24, 0x2D	; 45
    1936:	b6 01       	movw	r22, r12
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	50 d0       	rcall	.+160    	; 0x19dc <fputc>
    193c:	89 14       	cp	r8, r9
    193e:	30 f4       	brcc	.+12     	; 0x194c <vfprintf+0x396>
    1940:	b6 01       	movw	r22, r12
    1942:	80 e3       	ldi	r24, 0x30	; 48
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	4a d0       	rcall	.+148    	; 0x19dc <fputc>
    1948:	9a 94       	dec	r9
    194a:	f8 cf       	rjmp	.-16     	; 0x193c <vfprintf+0x386>
    194c:	8a 94       	dec	r8
    194e:	f3 01       	movw	r30, r6
    1950:	e8 0d       	add	r30, r8
    1952:	f1 1d       	adc	r31, r1
    1954:	80 81       	ld	r24, Z
    1956:	b6 01       	movw	r22, r12
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	40 d0       	rcall	.+128    	; 0x19dc <fputc>
    195c:	81 10       	cpse	r8, r1
    195e:	f6 cf       	rjmp	.-20     	; 0x194c <vfprintf+0x396>
    1960:	22 20       	and	r2, r2
    1962:	09 f4       	brne	.+2      	; 0x1966 <vfprintf+0x3b0>
    1964:	4e ce       	rjmp	.-868    	; 0x1602 <vfprintf+0x4c>
    1966:	b6 01       	movw	r22, r12
    1968:	80 e2       	ldi	r24, 0x20	; 32
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	37 d0       	rcall	.+110    	; 0x19dc <fputc>
    196e:	2a 94       	dec	r2
    1970:	f7 cf       	rjmp	.-18     	; 0x1960 <vfprintf+0x3aa>
    1972:	f6 01       	movw	r30, r12
    1974:	86 81       	ldd	r24, Z+6	; 0x06
    1976:	97 81       	ldd	r25, Z+7	; 0x07
    1978:	02 c0       	rjmp	.+4      	; 0x197e <vfprintf+0x3c8>
    197a:	8f ef       	ldi	r24, 0xFF	; 255
    197c:	9f ef       	ldi	r25, 0xFF	; 255
    197e:	2b 96       	adiw	r28, 0x0b	; 11
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ff 90       	pop	r15
    1994:	ef 90       	pop	r14
    1996:	df 90       	pop	r13
    1998:	cf 90       	pop	r12
    199a:	bf 90       	pop	r11
    199c:	af 90       	pop	r10
    199e:	9f 90       	pop	r9
    19a0:	8f 90       	pop	r8
    19a2:	7f 90       	pop	r7
    19a4:	6f 90       	pop	r6
    19a6:	5f 90       	pop	r5
    19a8:	4f 90       	pop	r4
    19aa:	3f 90       	pop	r3
    19ac:	2f 90       	pop	r2
    19ae:	08 95       	ret

000019b0 <strnlen_P>:
    19b0:	fc 01       	movw	r30, r24
    19b2:	05 90       	lpm	r0, Z+
    19b4:	61 50       	subi	r22, 0x01	; 1
    19b6:	70 40       	sbci	r23, 0x00	; 0
    19b8:	01 10       	cpse	r0, r1
    19ba:	d8 f7       	brcc	.-10     	; 0x19b2 <strnlen_P+0x2>
    19bc:	80 95       	com	r24
    19be:	90 95       	com	r25
    19c0:	8e 0f       	add	r24, r30
    19c2:	9f 1f       	adc	r25, r31
    19c4:	08 95       	ret

000019c6 <strnlen>:
    19c6:	fc 01       	movw	r30, r24
    19c8:	61 50       	subi	r22, 0x01	; 1
    19ca:	70 40       	sbci	r23, 0x00	; 0
    19cc:	01 90       	ld	r0, Z+
    19ce:	01 10       	cpse	r0, r1
    19d0:	d8 f7       	brcc	.-10     	; 0x19c8 <strnlen+0x2>
    19d2:	80 95       	com	r24
    19d4:	90 95       	com	r25
    19d6:	8e 0f       	add	r24, r30
    19d8:	9f 1f       	adc	r25, r31
    19da:	08 95       	ret

000019dc <fputc>:
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	fb 01       	movw	r30, r22
    19e6:	23 81       	ldd	r18, Z+3	; 0x03
    19e8:	21 fd       	sbrc	r18, 1
    19ea:	03 c0       	rjmp	.+6      	; 0x19f2 <fputc+0x16>
    19ec:	8f ef       	ldi	r24, 0xFF	; 255
    19ee:	9f ef       	ldi	r25, 0xFF	; 255
    19f0:	2c c0       	rjmp	.+88     	; 0x1a4a <fputc+0x6e>
    19f2:	22 ff       	sbrs	r18, 2
    19f4:	16 c0       	rjmp	.+44     	; 0x1a22 <fputc+0x46>
    19f6:	46 81       	ldd	r20, Z+6	; 0x06
    19f8:	57 81       	ldd	r21, Z+7	; 0x07
    19fa:	24 81       	ldd	r18, Z+4	; 0x04
    19fc:	35 81       	ldd	r19, Z+5	; 0x05
    19fe:	42 17       	cp	r20, r18
    1a00:	53 07       	cpc	r21, r19
    1a02:	44 f4       	brge	.+16     	; 0x1a14 <fputc+0x38>
    1a04:	a0 81       	ld	r26, Z
    1a06:	b1 81       	ldd	r27, Z+1	; 0x01
    1a08:	9d 01       	movw	r18, r26
    1a0a:	2f 5f       	subi	r18, 0xFF	; 255
    1a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0e:	31 83       	std	Z+1, r19	; 0x01
    1a10:	20 83       	st	Z, r18
    1a12:	8c 93       	st	X, r24
    1a14:	26 81       	ldd	r18, Z+6	; 0x06
    1a16:	37 81       	ldd	r19, Z+7	; 0x07
    1a18:	2f 5f       	subi	r18, 0xFF	; 255
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	37 83       	std	Z+7, r19	; 0x07
    1a1e:	26 83       	std	Z+6, r18	; 0x06
    1a20:	14 c0       	rjmp	.+40     	; 0x1a4a <fputc+0x6e>
    1a22:	8b 01       	movw	r16, r22
    1a24:	ec 01       	movw	r28, r24
    1a26:	fb 01       	movw	r30, r22
    1a28:	00 84       	ldd	r0, Z+8	; 0x08
    1a2a:	f1 85       	ldd	r31, Z+9	; 0x09
    1a2c:	e0 2d       	mov	r30, r0
    1a2e:	09 95       	icall
    1a30:	89 2b       	or	r24, r25
    1a32:	e1 f6       	brne	.-72     	; 0x19ec <fputc+0x10>
    1a34:	d8 01       	movw	r26, r16
    1a36:	16 96       	adiw	r26, 0x06	; 6
    1a38:	8d 91       	ld	r24, X+
    1a3a:	9c 91       	ld	r25, X
    1a3c:	17 97       	sbiw	r26, 0x07	; 7
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	17 96       	adiw	r26, 0x07	; 7
    1a42:	9c 93       	st	X, r25
    1a44:	8e 93       	st	-X, r24
    1a46:	16 97       	sbiw	r26, 0x06	; 6
    1a48:	ce 01       	movw	r24, r28
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	08 95       	ret

00001a54 <__ultoa_invert>:
    1a54:	fa 01       	movw	r30, r20
    1a56:	aa 27       	eor	r26, r26
    1a58:	28 30       	cpi	r18, 0x08	; 8
    1a5a:	51 f1       	breq	.+84     	; 0x1ab0 <__ultoa_invert+0x5c>
    1a5c:	20 31       	cpi	r18, 0x10	; 16
    1a5e:	81 f1       	breq	.+96     	; 0x1ac0 <__ultoa_invert+0x6c>
    1a60:	e8 94       	clt
    1a62:	6f 93       	push	r22
    1a64:	6e 7f       	andi	r22, 0xFE	; 254
    1a66:	6e 5f       	subi	r22, 0xFE	; 254
    1a68:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	af 4f       	sbci	r26, 0xFF	; 255
    1a70:	b1 e0       	ldi	r27, 0x01	; 1
    1a72:	3e d0       	rcall	.+124    	; 0x1af0 <__ultoa_invert+0x9c>
    1a74:	b4 e0       	ldi	r27, 0x04	; 4
    1a76:	3c d0       	rcall	.+120    	; 0x1af0 <__ultoa_invert+0x9c>
    1a78:	67 0f       	add	r22, r23
    1a7a:	78 1f       	adc	r23, r24
    1a7c:	89 1f       	adc	r24, r25
    1a7e:	9a 1f       	adc	r25, r26
    1a80:	a1 1d       	adc	r26, r1
    1a82:	68 0f       	add	r22, r24
    1a84:	79 1f       	adc	r23, r25
    1a86:	8a 1f       	adc	r24, r26
    1a88:	91 1d       	adc	r25, r1
    1a8a:	a1 1d       	adc	r26, r1
    1a8c:	6a 0f       	add	r22, r26
    1a8e:	71 1d       	adc	r23, r1
    1a90:	81 1d       	adc	r24, r1
    1a92:	91 1d       	adc	r25, r1
    1a94:	a1 1d       	adc	r26, r1
    1a96:	20 d0       	rcall	.+64     	; 0x1ad8 <__ultoa_invert+0x84>
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <__ultoa_invert+0x48>
    1a9a:	68 94       	set
    1a9c:	3f 91       	pop	r19
    1a9e:	2a e0       	ldi	r18, 0x0A	; 10
    1aa0:	26 9f       	mul	r18, r22
    1aa2:	11 24       	eor	r1, r1
    1aa4:	30 19       	sub	r19, r0
    1aa6:	30 5d       	subi	r19, 0xD0	; 208
    1aa8:	31 93       	st	Z+, r19
    1aaa:	de f6       	brtc	.-74     	; 0x1a62 <__ultoa_invert+0xe>
    1aac:	cf 01       	movw	r24, r30
    1aae:	08 95       	ret
    1ab0:	46 2f       	mov	r20, r22
    1ab2:	47 70       	andi	r20, 0x07	; 7
    1ab4:	40 5d       	subi	r20, 0xD0	; 208
    1ab6:	41 93       	st	Z+, r20
    1ab8:	b3 e0       	ldi	r27, 0x03	; 3
    1aba:	0f d0       	rcall	.+30     	; 0x1ada <__ultoa_invert+0x86>
    1abc:	c9 f7       	brne	.-14     	; 0x1ab0 <__ultoa_invert+0x5c>
    1abe:	f6 cf       	rjmp	.-20     	; 0x1aac <__ultoa_invert+0x58>
    1ac0:	46 2f       	mov	r20, r22
    1ac2:	4f 70       	andi	r20, 0x0F	; 15
    1ac4:	40 5d       	subi	r20, 0xD0	; 208
    1ac6:	4a 33       	cpi	r20, 0x3A	; 58
    1ac8:	18 f0       	brcs	.+6      	; 0x1ad0 <__ultoa_invert+0x7c>
    1aca:	49 5d       	subi	r20, 0xD9	; 217
    1acc:	31 fd       	sbrc	r19, 1
    1ace:	40 52       	subi	r20, 0x20	; 32
    1ad0:	41 93       	st	Z+, r20
    1ad2:	02 d0       	rcall	.+4      	; 0x1ad8 <__ultoa_invert+0x84>
    1ad4:	a9 f7       	brne	.-22     	; 0x1ac0 <__ultoa_invert+0x6c>
    1ad6:	ea cf       	rjmp	.-44     	; 0x1aac <__ultoa_invert+0x58>
    1ad8:	b4 e0       	ldi	r27, 0x04	; 4
    1ada:	a6 95       	lsr	r26
    1adc:	97 95       	ror	r25
    1ade:	87 95       	ror	r24
    1ae0:	77 95       	ror	r23
    1ae2:	67 95       	ror	r22
    1ae4:	ba 95       	dec	r27
    1ae6:	c9 f7       	brne	.-14     	; 0x1ada <__ultoa_invert+0x86>
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	61 05       	cpc	r22, r1
    1aec:	71 05       	cpc	r23, r1
    1aee:	08 95       	ret
    1af0:	9b 01       	movw	r18, r22
    1af2:	ac 01       	movw	r20, r24
    1af4:	0a 2e       	mov	r0, r26
    1af6:	06 94       	lsr	r0
    1af8:	57 95       	ror	r21
    1afa:	47 95       	ror	r20
    1afc:	37 95       	ror	r19
    1afe:	27 95       	ror	r18
    1b00:	ba 95       	dec	r27
    1b02:	c9 f7       	brne	.-14     	; 0x1af6 <__ultoa_invert+0xa2>
    1b04:	62 0f       	add	r22, r18
    1b06:	73 1f       	adc	r23, r19
    1b08:	84 1f       	adc	r24, r20
    1b0a:	95 1f       	adc	r25, r21
    1b0c:	a0 1d       	adc	r26, r0
    1b0e:	08 95       	ret

00001b10 <_exit>:
    1b10:	f8 94       	cli

00001b12 <__stop_program>:
    1b12:	ff cf       	rjmp	.-2      	; 0x1b12 <__stop_program>
