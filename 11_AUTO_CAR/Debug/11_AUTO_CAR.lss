
11_AUTO_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00001226  000012ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000665  00800144  00800144  000012fe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ca  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ece  00000000  00000000  00002bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c57  00000000  00000000  00003ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  0000471c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f0  00000000  00000000  00004b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000091a  00000000  00000000  00005228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005b42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	77 c0       	rjmp	.+238    	; 0xf0 <__ctors_end>
       2:	00 00       	nop
       4:	93 c0       	rjmp	.+294    	; 0x12c <__bad_interrupt>
       6:	00 00       	nop
       8:	91 c0       	rjmp	.+290    	; 0x12c <__bad_interrupt>
       a:	00 00       	nop
       c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	e3 c2       	rjmp	.+1478   	; 0x5dc <__vector_5>
      16:	00 00       	nop
      18:	2e c3       	rjmp	.+1628   	; 0x676 <__vector_6>
      1a:	00 00       	nop
      1c:	79 c3       	rjmp	.+1778   	; 0x710 <__vector_7>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	77 c0       	rjmp	.+238    	; 0x12c <__bad_interrupt>
      3e:	00 00       	nop
      40:	1c c1       	rjmp	.+568    	; 0x27a <__vector_16>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	f4 c1       	rjmp	.+1000   	; 0x432 <__vector_18>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	6b c0       	rjmp	.+214    	; 0x12c <__bad_interrupt>
      56:	00 00       	nop
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	63 c0       	rjmp	.+198    	; 0x12c <__bad_interrupt>
      66:	00 00       	nop
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
      76:	00 00       	nop
      78:	6e c2       	rjmp	.+1244   	; 0x556 <__vector_30>
      7a:	00 00       	nop
      7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 01       	movw	r4, r18
      8e:	36 01       	movw	r6, r12
      90:	36 01       	movw	r6, r12
      92:	36 01       	movw	r6, r12
      94:	25 01       	movw	r4, r10
      96:	36 01       	movw	r6, r12
      98:	36 01       	movw	r6, r12
      9a:	36 01       	movw	r6, r12
      9c:	36 01       	movw	r6, r12
      9e:	36 01       	movw	r6, r12
      a0:	2d 01       	movw	r4, r26
      a2:	36 01       	movw	r6, r12
      a4:	36 01       	movw	r6, r12
      a6:	36 01       	movw	r6, r12
      a8:	36 01       	movw	r6, r12
      aa:	36 01       	movw	r6, r12
      ac:	31 01       	movw	r6, r2
      ae:	35 01       	movw	r6, r10
      b0:	36 01       	movw	r6, r12
      b2:	36 01       	movw	r6, r12
      b4:	36 01       	movw	r6, r12
      b6:	36 01       	movw	r6, r12
      b8:	36 01       	movw	r6, r12
      ba:	36 01       	movw	r6, r12
      bc:	36 01       	movw	r6, r12
      be:	36 01       	movw	r6, r12
      c0:	36 01       	movw	r6, r12
      c2:	36 01       	movw	r6, r12
      c4:	36 01       	movw	r6, r12
      c6:	36 01       	movw	r6, r12
      c8:	36 01       	movw	r6, r12
      ca:	36 01       	movw	r6, r12
      cc:	29 01       	movw	r4, r18
      ce:	36 01       	movw	r6, r12
      d0:	36 01       	movw	r6, r12
      d2:	36 01       	movw	r6, r12
      d4:	25 01       	movw	r4, r10
      d6:	36 01       	movw	r6, r12
      d8:	36 01       	movw	r6, r12
      da:	36 01       	movw	r6, r12
      dc:	36 01       	movw	r6, r12
      de:	36 01       	movw	r6, r12
      e0:	2d 01       	movw	r4, r26
      e2:	36 01       	movw	r6, r12
      e4:	36 01       	movw	r6, r12
      e6:	36 01       	movw	r6, r12
      e8:	36 01       	movw	r6, r12
      ea:	36 01       	movw	r6, r12
      ec:	31 01       	movw	r6, r2
      ee:	35 01       	movw	r6, r10

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d0 e1       	ldi	r29, 0x10	; 16
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	11 e0       	ldi	r17, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	e6 e2       	ldi	r30, 0x26	; 38
     104:	f2 e1       	ldi	r31, 0x12	; 18
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0b bf       	out	0x3b, r16	; 59
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x14>
     10c:	07 90       	elpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	a4 34       	cpi	r26, 0x44	; 68
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0x10>

00000116 <__do_clear_bss>:
     116:	27 e0       	ldi	r18, 0x07	; 7
     118:	a4 e4       	ldi	r26, 0x44	; 68
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	a9 3a       	cpi	r26, 0xA9	; 169
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	ff d0       	rcall	.+510    	; 0x326 <main>
     128:	0c 94 11 09 	jmp	0x1222	; 0x1222 <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <init_button>:
// 00001111
// DDRD &= 0x0f; // 4, 5, 6, 7을 input. PORTD.4 가독성이 떨어진다.

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN /*| 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN*/);
     12e:	84 b3       	in	r24, 0x14	; 20
     130:	8f 77       	andi	r24, 0x7F	; 127
     132:	84 bb       	out	0x14, r24	; 20
     134:	08 95       	ret

00000136 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE/*, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE*/}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
     136:	23 b3       	in	r18, 0x13	; 19
     138:	42 2f       	mov	r20, r18
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	02 c0       	rjmp	.+4      	; 0x146 <get_button+0x10>
     142:	22 0f       	add	r18, r18
     144:	33 1f       	adc	r19, r19
     146:	6a 95       	dec	r22
     148:	e2 f7       	brpl	.-8      	; 0x142 <get_button+0xc>
     14a:	24 23       	and	r18, r20
     14c:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
     14e:	21 15       	cp	r18, r1
     150:	31 05       	cpc	r19, r1
     152:	b9 f0       	breq	.+46     	; 0x182 <get_button+0x4c>
     154:	fc 01       	movw	r30, r24
     156:	ec 5b       	subi	r30, 0xBC	; 188
     158:	fe 4f       	sbci	r31, 0xFE	; 254
     15a:	40 81       	ld	r20, Z
     15c:	41 11       	cpse	r20, r1
     15e:	11 c0       	rjmp	.+34     	; 0x182 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     160:	2f ef       	ldi	r18, 0xFF	; 255
     162:	3d ee       	ldi	r19, 0xED	; 237
     164:	42 e0       	ldi	r20, 0x02	; 2
     166:	21 50       	subi	r18, 0x01	; 1
     168:	30 40       	sbci	r19, 0x00	; 0
     16a:	40 40       	sbci	r20, 0x00	; 0
     16c:	e1 f7       	brne	.-8      	; 0x166 <get_button+0x30>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <get_button+0x3a>
     170:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     172:	fc 01       	movw	r30, r24
     174:	ec 5b       	subi	r30, 0xBC	; 188
     176:	fe 4f       	sbci	r31, 0xFE	; 254
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     182:	fc 01       	movw	r30, r24
     184:	ec 5b       	subi	r30, 0xBC	; 188
     186:	fe 4f       	sbci	r31, 0xFE	; 254
     188:	40 81       	ld	r20, Z
     18a:	41 30       	cpi	r20, 0x01	; 1
     18c:	91 f4       	brne	.+36     	; 0x1b2 <get_button+0x7c>
     18e:	23 2b       	or	r18, r19
     190:	99 f4       	brne	.+38     	; 0x1b8 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     192:	fc 01       	movw	r30, r24
     194:	ec 5b       	subi	r30, 0xBC	; 188
     196:	fe 4f       	sbci	r31, 0xFE	; 254
     198:	10 82       	st	Z, r1
     19a:	8f ef       	ldi	r24, 0xFF	; 255
     19c:	9d ee       	ldi	r25, 0xED	; 237
     19e:	22 e0       	ldi	r18, 0x02	; 2
     1a0:	81 50       	subi	r24, 0x01	; 1
     1a2:	90 40       	sbci	r25, 0x00	; 0
     1a4:	20 40       	sbci	r18, 0x00	; 0
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <get_button+0x6a>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <get_button+0x74>
     1aa:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	08 95       	ret
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
}
     1bc:	08 95       	ret

000001be <auto_mode_check>:

void auto_mode_check(void)
{
	if (get_button(BUTTON0, BUTTON0PIN))
     1be:	67 e0       	ldi	r22, 0x07	; 7
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	b7 df       	rcall	.-146    	; 0x136 <get_button>
     1c8:	89 2b       	or	r24, r25
     1ca:	71 f0       	breq	.+28     	; 0x1e8 <auto_mode_check+0x2a>
	{
		button0_state = !button0_state;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <button0_state>
     1d4:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <button0_state+0x1>
     1d8:	23 2b       	or	r18, r19
     1da:	11 f0       	breq	.+4      	; 0x1e0 <auto_mode_check+0x22>
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <button0_state+0x1>
     1e4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <button0_state>
	}
	
	if (button0_state)
     1e8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <button0_state>
     1ec:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <button0_state+0x1>
     1f0:	89 2b       	or	r24, r25
     1f2:	31 f0       	breq	.+12     	; 0x200 <auto_mode_check+0x42>
	{
		AUTO_RUN_LED_PORT |= 1 << AUTO_RUN_LED_PIN; // LED ON
     1f4:	e5 e6       	ldi	r30, 0x65	; 101
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	88 60       	ori	r24, 0x08	; 8
     1fc:	80 83       	st	Z, r24
     1fe:	06 c0       	rjmp	.+12     	; 0x20c <auto_mode_check+0x4e>
	}
	else
	{
		AUTO_RUN_LED_PORT &= ~(1 << AUTO_RUN_LED_PIN); // LED OFF
     200:	e5 e6       	ldi	r30, 0x65	; 101
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
     206:	87 7f       	andi	r24, 0xF7	; 247
		stop();
     208:	80 83       	st	Z, r24
     20a:	06 d1       	rcall	.+524    	; 0x418 <stop>
	}
	func_state = AUTO_MODE;
     20c:	83 e0       	ldi	r24, 0x03	; 3
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <func_state+0x1>
     214:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <func_state>
     218:	08 95       	ret

0000021a <init_led>:

void init_led(void);

void init_led(void)
{
	AUTO_RUN_LED_PORT_DDR |= 1 << AUTO_RUN_LED_PIN;
     21a:	e4 e6       	ldi	r30, 0x64	; 100
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	88 60       	ori	r24, 0x08	; 8
     222:	80 83       	st	Z, r24
     224:	08 95       	ret

00000226 <auto_mode>:
{
	if (button0_state)
	{
		/// 자율주행 코드
	}
	func_state = MANUAL_MODE;
     226:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <func_state+0x1>
     22a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <func_state>
     22e:	08 95       	ret

00000230 <manual_mode>:
	//sei();    // 전역적(대문)으로 interrupt 허용
}

void manual_mode(void)
{
	switch (bt_data)
     230:	e0 91 a2 07 	lds	r30, 0x07A2	; 0x8007a2 <bt_data>
     234:	8e 2f       	mov	r24, r30
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	fc 01       	movw	r30, r24
     23a:	e2 54       	subi	r30, 0x42	; 66
     23c:	f1 09       	sbc	r31, r1
     23e:	e2 33       	cpi	r30, 0x32	; 50
     240:	f1 05       	cpc	r31, r1
     242:	a0 f4       	brcc	.+40     	; 0x26c <manual_mode+0x3c>
     244:	ea 5b       	subi	r30, 0xBA	; 186
     246:	ff 4f       	sbci	r31, 0xFF	; 255
     248:	0f c5       	rjmp	.+2590   	; 0xc68 <__tablejump2__>
	{
		case 'F':
		case 'f':
			forward(500);
     24a:	84 ef       	ldi	r24, 0xF4	; 244
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	ac d0       	rcall	.+344    	; 0x3a8 <forward>
			break;
     250:	0d c0       	rjmp	.+26     	; 0x26c <manual_mode+0x3c>
			
		case 'B':
		case 'b':
			backward(500);
     252:	84 ef       	ldi	r24, 0xF4	; 244
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	b6 d0       	rcall	.+364    	; 0x3c4 <backward>
			break;
			
		case 'L':
		case 'l':
			turn_left(700);
     258:	09 c0       	rjmp	.+18     	; 0x26c <manual_mode+0x3c>
     25a:	8c eb       	ldi	r24, 0xBC	; 188
     25c:	92 e0       	ldi	r25, 0x02	; 2
			break;
     25e:	c0 d0       	rcall	.+384    	; 0x3e0 <turn_left>
			
		case 'R':
		case 'r':
			turn_right(700);
     260:	05 c0       	rjmp	.+10     	; 0x26c <manual_mode+0x3c>
     262:	8c eb       	ldi	r24, 0xBC	; 188
     264:	92 e0       	ldi	r25, 0x02	; 2
			break;
     266:	ca d0       	rcall	.+404    	; 0x3fc <turn_right>
			
		case 'S':
		case 's':
			stop();
     268:	01 c0       	rjmp	.+2      	; 0x26c <manual_mode+0x3c>
     26a:	d6 d0       	rcall	.+428    	; 0x418 <stop>
			break;
			
		default:
			break;
	}
	func_state = DISTANCE_CHECK;
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <func_state+0x1>
     274:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <func_state>
     278:	08 95       	ret

0000027a <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     27a:	1f 92       	push	r1
     27c:	0f 92       	push	r0
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	0f 92       	push	r0
     282:	11 24       	eor	r1, r1
     284:	8f 93       	push	r24
     286:	9f 93       	push	r25
     288:	af 93       	push	r26
     28a:	bf 93       	push	r27
	TCNT0 = 6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
     28c:	86 e0       	ldi	r24, 0x06	; 6
     28e:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
     290:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <msec_count>
     294:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <msec_count+0x1>
     298:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <msec_count+0x2>
     29c:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <msec_count+0x3>
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	a1 1d       	adc	r26, r1
     2a4:	b1 1d       	adc	r27, r1
     2a6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <msec_count>
     2aa:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <msec_count+0x1>
     2ae:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <msec_count+0x2>
     2b2:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <msec_count+0x3>
	fnd_dis++;   // fnd 잔상효과 유지 하기 위한 timer 2ms
     2b6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <fnd_dis>
     2ba:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <fnd_dis+0x1>
     2be:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <fnd_dis+0x2>
     2c2:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <fnd_dis+0x3>
     2c6:	01 96       	adiw	r24, 0x01	; 1
     2c8:	a1 1d       	adc	r26, r1
     2ca:	b1 1d       	adc	r27, r1
     2cc:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <fnd_dis>
     2d0:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <fnd_dis+0x1>
     2d4:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <fnd_dis+0x2>
     2d8:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <fnd_dis+0x3>
	ultrasonic_check_timer++;
     2dc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <ultrasonic_check_timer>
     2e0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <ultrasonic_check_timer+0x1>
     2e4:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <ultrasonic_check_timer+0x2>
     2e8:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <ultrasonic_check_timer+0x3>
     2ec:	01 96       	adiw	r24, 0x01	; 1
     2ee:	a1 1d       	adc	r26, r1
     2f0:	b1 1d       	adc	r27, r1
     2f2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <ultrasonic_check_timer>
     2f6:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <ultrasonic_check_timer+0x1>
     2fa:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <ultrasonic_check_timer+0x2>
     2fe:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <ultrasonic_check_timer+0x3>
}
     302:	bf 91       	pop	r27
     304:	af 91       	pop	r26
     306:	9f 91       	pop	r25
     308:	8f 91       	pop	r24
     30a:	0f 90       	pop	r0
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	0f 90       	pop	r0
     310:	1f 90       	pop	r1
     312:	18 95       	reti

00000314 <init_timer0>:
	// 1. 분주비 계산
	// 16000000HZ/64 ==> 250,000HZ
	// 2. T(주기) 1가 잡아 먹는 시간 : 1/f = 1/250,000 ==> 0.000004sec(4us) : 0.004ms
	// 3. 8bit timer OV(OVflow) : 0.004ms x 256 = 0.001024sec --> 1.024ms
	// 그러면 정확히 1ms 를 재고 싶다면 0.004ms x 250개 = 0.001sec ==> 1ms
	TCNT0 = 6;   // TCNT : 0~256 ==> 1ms마다 TIMER0_OVF_vect로 진입한다.
     314:	86 e0       	ldi	r24, 0x06	; 6
     316:	82 bf       	out	0x32, r24	; 50
	// TCNT0 = 6로 설정을 한이유: 6~256 : 250개를 count(정확히 1MS를맞추기 위해서)
	//
	// 4 분주비를 설정 (250khz)
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     318:	83 b7       	in	r24, 0x33	; 51
     31a:	84 60       	ori	r24, 0x04	; 4
     31c:	83 bf       	out	0x33, r24	; 51
	// 5. TIMER0 OVERFLOW를 허용(enable)
	TIMSK |= 1 << TOIE0;  // TIMSK |= 0x01;
     31e:	87 b7       	in	r24, 0x37	; 55
     320:	81 60       	ori	r24, 0x01	; 1
     322:	87 bf       	out	0x37, r24	; 55
     324:	08 95       	ret

00000326 <main>:
	ultrasonic_check_timer++;
}

int main(void)
{
	init_led();
     326:	79 df       	rcall	.-270    	; 0x21a <init_led>
	init_button();
     328:	02 df       	rcall	.-508    	; 0x12e <init_button>
	init_timer0();
     32a:	f4 df       	rcall	.-24     	; 0x314 <init_timer0>
	init_uart0();
     32c:	00 d1       	rcall	.+512    	; 0x52e <init_uart0>
	init_uart1();
     32e:	41 d1       	rcall	.+642    	; 0x5b2 <init_uart1>
     330:	16 d0       	rcall	.+44     	; 0x35e <init_n289n>
	init_n289n();
     332:	26 d0       	rcall	.+76     	; 0x380 <init_timer1_pwm>
     334:	3a d2       	rcall	.+1140   	; 0x7aa <init_ultrasonic>
	init_timer1_pwm();
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	91 e0       	ldi	r25, 0x01	; 1
	init_ultrasonic(); // timer 3
     33a:	90 93 a6 07 	sts	0x07A6, r25	; 0x8007a6 <__iob+0x3>
	

	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     33e:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <__iob+0x2>
     342:	78 94       	sei
     344:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <func_state>
     348:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <func_state+0x1>
	{
// 		pc_command_processing();
// 		ultrasonic_distance_check();
//		washing_machine_fan_control();
		
		pfunc[func_state] ();
     34c:	ee 0f       	add	r30, r30
     34e:	ff 1f       	adc	r31, r31
     350:	e2 5f       	subi	r30, 0xF2	; 242
     352:	fe 4f       	sbci	r31, 0xFE	; 254
     354:	01 90       	ld	r0, Z+
     356:	f0 81       	ld	r31, Z
     358:	e0 2d       	mov	r30, r0
     35a:	09 95       	icall
     35c:	f3 cf       	rjmp	.-26     	; 0x344 <main+0x1e>

0000035e <init_n289n>:
	   1         1   : STOP
*/

void init_n289n(void)
{
	MOTOR_PWM_DDR |= 1 << MOTOR_LEFT_PORT_DDR | 1 << MOTOR_RIGHT_PORT_DDR; // DDR설정
     35e:	87 b3       	in	r24, 0x17	; 23
     360:	80 66       	ori	r24, 0x60	; 96
     362:	87 bb       	out	0x17, r24	; 23
	MOTOR_DRIVER_DIRECTION_PORT_DDR |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3; // PF1234 출력으로 설정
     364:	e1 e6       	ldi	r30, 0x61	; 97
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	8f 60       	ori	r24, 0x0F	; 15
     36c:	80 83       	st	Z, r24
	
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     36e:	e2 e6       	ldi	r30, 0x62	; 98
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	80 81       	ld	r24, Z
     374:	80 7f       	andi	r24, 0xF0	; 240
     376:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 2; // 자동차를 전진모드로 
     378:	80 81       	ld	r24, Z
     37a:	85 60       	ori	r24, 0x05	; 5
     37c:	80 83       	st	Z, r24
     37e:	08 95       	ret

00000380 <init_timer1_pwm>:
	// 분주비 : 64 16000000HZ/64 ==> 250000HZ(250kHZ)
	// T=1/f 1/250000HZ ==> 0.000004sec (4us)
	// 250000HZ에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//              127                             : 0.5ms
	//              0x3ff(1023) --> 4ms
	TCCR1B |= 1 << CS11 | 1 << CS10;   // 분주비 64  P318 표14-1
     380:	8e b5       	in	r24, 0x2e	; 46
     382:	83 60       	ori	r24, 0x03	; 3
     384:	8e bd       	out	0x2e, r24	; 46
	
	// 모드 14: 고속 PWM timer1사용  (P327 표14-5)
	TCCR1A |= 1 << WGM11;   // TOP --> ICR1에 설정
     386:	8f b5       	in	r24, 0x2f	; 47
     388:	82 60       	ori	r24, 0x02	; 2
     38a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM13 | 1 << WGM12;
     38c:	8e b5       	in	r24, 0x2e	; 46
     38e:	88 61       	ori	r24, 0x18	; 24
     390:	8e bd       	out	0x2e, r24	; 46
	
	// 비반전모드 top: ICR1 비교일치값(PWM) 지정 : OCR1A, OCR1B P350 표15-7
	// 비교일치 발생시 OCR1A, OCR1B의 출력 핀은 LOW로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR1A |= 1 << COM1A1;
     392:	8f b5       	in	r24, 0x2f	; 47
     394:	80 68       	ori	r24, 0x80	; 128
     396:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= 1 << COM1B1;
     398:	8f b5       	in	r24, 0x2f	; 47
     39a:	80 62       	ori	r24, 0x20	; 32
     39c:	8f bd       	out	0x2f, r24	; 47

	ICR1 = 0x3ff;  // 1023 ==> 4ms TOP : PWM 값
     39e:	8f ef       	ldi	r24, 0xFF	; 255
     3a0:	93 e0       	ldi	r25, 0x03	; 3
     3a2:	97 bd       	out	0x27, r25	; 39
     3a4:	86 bd       	out	0x26, r24	; 38
     3a6:	08 95       	ret

000003a8 <forward>:
}

void forward(int speed)
{
     3a8:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     3aa:	e2 e6       	ldi	r30, 0x62	; 98
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	90 81       	ld	r25, Z
     3b0:	90 7f       	andi	r25, 0xF0	; 240
     3b2:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     3b4:	90 81       	ld	r25, Z
     3b6:	95 60       	ori	r25, 0x05	; 5
     3b8:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     3ba:	3b bd       	out	0x2b, r19	; 43
     3bc:	2a bd       	out	0x2a, r18	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     3be:	39 bd       	out	0x29, r19	; 41
     3c0:	28 bd       	out	0x28, r18	; 40
     3c2:	08 95       	ret

000003c4 <backward>:
}

void backward(int speed)
{
     3c4:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     3c6:	e2 e6       	ldi	r30, 0x62	; 98
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	90 81       	ld	r25, Z
     3cc:	90 7f       	andi	r25, 0xF0	; 240
     3ce:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 3 | 1 << 1;  // 1010 후진 모드
     3d0:	90 81       	ld	r25, Z
     3d2:	9a 60       	ori	r25, 0x0A	; 10
     3d4:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     3d6:	3b bd       	out	0x2b, r19	; 43
     3d8:	2a bd       	out	0x2a, r18	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     3da:	39 bd       	out	0x29, r19	; 41
     3dc:	28 bd       	out	0x28, r18	; 40
     3de:	08 95       	ret

000003e0 <turn_left>:
}

void turn_left(int speed)
{
     3e0:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     3e2:	e2 e6       	ldi	r30, 0x62	; 98
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	90 81       	ld	r25, Z
     3e8:	90 7f       	andi	r25, 0xF0	; 240
     3ea:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     3ec:	90 81       	ld	r25, Z
     3ee:	95 60       	ori	r25, 0x05	; 5
     3f0:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     3f2:	3b bd       	out	0x2b, r19	; 43
     3f4:	2a bd       	out	0x2a, r18	; 42
	OCR1B = 0;  // PB6 PWM 출력 port right
     3f6:	19 bc       	out	0x29, r1	; 41
     3f8:	18 bc       	out	0x28, r1	; 40
     3fa:	08 95       	ret

000003fc <turn_right>:
}

void turn_right(int speed)
{
     3fc:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     3fe:	e2 e6       	ldi	r30, 0x62	; 98
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	90 81       	ld	r25, Z
     404:	90 7f       	andi	r25, 0xF0	; 240
     406:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     408:	90 81       	ld	r25, Z
     40a:	95 60       	ori	r25, 0x05	; 5
     40c:	90 83       	st	Z, r25
	
	OCR1A = 0;  // PB5 PWM 출력 port left
     40e:	1b bc       	out	0x2b, r1	; 43
     410:	1a bc       	out	0x2a, r1	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     412:	39 bd       	out	0x29, r19	; 41
     414:	28 bd       	out	0x28, r18	; 40
     416:	08 95       	ret

00000418 <stop>:
}

void stop(void)
{
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     418:	e2 e6       	ldi	r30, 0x62	; 98
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	80 7f       	andi	r24, 0xF0	; 240
     420:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3;  // stop 모드로 설정
     422:	80 81       	ld	r24, Z
     424:	8f 60       	ori	r24, 0x0F	; 15
     426:	80 83       	st	Z, r24
	
	OCR1A = 0;  // PB5 PWM 출력 port left
     428:	1b bc       	out	0x2b, r1	; 43
     42a:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;  // PB6 PWM 출력 port right
     42c:	19 bc       	out	0x29, r1	; 41
     42e:	18 bc       	out	0x28, r1	; 40
     430:	08 95       	ret

00000432 <__vector_18>:

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     432:	1f 92       	push	r1
     434:	0f 92       	push	r0
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	0f 92       	push	r0
     43a:	11 24       	eor	r1, r1
     43c:	0b b6       	in	r0, 0x3b	; 59
     43e:	0f 92       	push	r0
     440:	2f 93       	push	r18
     442:	3f 93       	push	r19
     444:	4f 93       	push	r20
     446:	5f 93       	push	r21
     448:	6f 93       	push	r22
     44a:	7f 93       	push	r23
     44c:	8f 93       	push	r24
     44e:	9f 93       	push	r25
     450:	af 93       	push	r26
     452:	bf 93       	push	r27
     454:	ef 93       	push	r30
     456:	ff 93       	push	r31
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	1f 92       	push	r1
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     462:	8c b1       	in	r24, 0x0c	; 12
     464:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	8d 30       	cpi	r24, 0x0D	; 13
     46a:	19 f0       	breq	.+6      	; 0x472 <__vector_18+0x40>
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	8a 30       	cpi	r24, 0x0A	; 10
     470:	61 f5       	brne	.+88     	; 0x4ca <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     472:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <rear>
     476:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <rear+0x1>
     47a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <i.1878>
     47e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <i.1878+0x1>
     482:	40 e5       	ldi	r20, 0x50	; 80
     484:	42 9f       	mul	r20, r18
     486:	f0 01       	movw	r30, r0
     488:	43 9f       	mul	r20, r19
     48a:	f0 0d       	add	r31, r0
     48c:	11 24       	eor	r1, r1
     48e:	ee 59       	subi	r30, 0x9E	; 158
     490:	fe 4f       	sbci	r31, 0xFE	; 254
     492:	e8 0f       	add	r30, r24
     494:	f9 1f       	adc	r31, r25
     496:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     498:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <i.1878+0x1>
     49c:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <i.1878>
		rear++;
     4a0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rear>
     4a4:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <rear+0x1>
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <rear+0x1>
     4ae:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
     4b2:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rear>
     4b6:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <rear+0x1>
     4ba:	6a e0       	ldi	r22, 0x0A	; 10
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	c1 d3       	rcall	.+1922   	; 0xc42 <__divmodhi4>
     4c0:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <rear+0x1>
     4c4:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <rear>
     4c8:	1c c0       	rjmp	.+56     	; 0x502 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
     4ca:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <rear>
     4ce:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <rear+0x1>
     4d2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <i.1878>
     4d6:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <i.1878+0x1>
     4da:	9c 01       	movw	r18, r24
     4dc:	2f 5f       	subi	r18, 0xFF	; 255
     4de:	3f 4f       	sbci	r19, 0xFF	; 255
     4e0:	30 93 59 01 	sts	0x0159, r19	; 0x800159 <i.1878+0x1>
     4e4:	20 93 58 01 	sts	0x0158, r18	; 0x800158 <i.1878>
     4e8:	49 81       	ldd	r20, Y+1	; 0x01
     4ea:	50 e5       	ldi	r21, 0x50	; 80
     4ec:	56 9f       	mul	r21, r22
     4ee:	90 01       	movw	r18, r0
     4f0:	57 9f       	mul	r21, r23
     4f2:	30 0d       	add	r19, r0
     4f4:	11 24       	eor	r1, r1
     4f6:	2e 59       	subi	r18, 0x9E	; 158
     4f8:	3e 4f       	sbci	r19, 0xFE	; 254
     4fa:	f9 01       	movw	r30, r18
     4fc:	e8 0f       	add	r30, r24
     4fe:	f9 1f       	adc	r31, r25
     500:	40 83       	st	Z, r20
	}
		  
}
     502:	0f 90       	pop	r0
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	ff 91       	pop	r31
     50a:	ef 91       	pop	r30
     50c:	bf 91       	pop	r27
     50e:	af 91       	pop	r26
     510:	9f 91       	pop	r25
     512:	8f 91       	pop	r24
     514:	7f 91       	pop	r23
     516:	6f 91       	pop	r22
     518:	5f 91       	pop	r21
     51a:	4f 91       	pop	r20
     51c:	3f 91       	pop	r19
     51e:	2f 91       	pop	r18
     520:	0f 90       	pop	r0
     522:	0b be       	out	0x3b, r0	; 59
     524:	0f 90       	pop	r0
     526:	0f be       	out	0x3f, r0	; 63
     528:	0f 90       	pop	r0
     52a:	1f 90       	pop	r1
     52c:	18 95       	reti

0000052e <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
     52e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
     532:	8f ec       	ldi	r24, 0xCF	; 207
     534:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
     536:	8b b1       	in	r24, 0x0b	; 11
     538:	82 60       	ori	r24, 0x02	; 2
     53a:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     53c:	e5 e9       	ldi	r30, 0x95	; 149
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	86 60       	ori	r24, 0x06	; 6
     544:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     546:	8a b1       	in	r24, 0x0a	; 10
     548:	88 69       	ori	r24, 0x98	; 152
     54a:	8a b9       	out	0x0a, r24	; 10
     54c:	08 95       	ret

0000054e <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
     54e:	5d 9b       	sbis	0x0b, 5	; 11
     550:	fe cf       	rjmp	.-4      	; 0x54e <UART0_transmit>
		;   // no operation NOP
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
     552:	8c b9       	out	0x0c, r24	; 12
     554:	08 95       	ret

00000556 <__vector_30>:
volatile uint8_t bt_data;

extern void UART0_transmit();

ISR(USART1_RX_vect)
{
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	0b b6       	in	r0, 0x3b	; 59
     562:	0f 92       	push	r0
     564:	2f 93       	push	r18
     566:	3f 93       	push	r19
     568:	4f 93       	push	r20
     56a:	5f 93       	push	r21
     56c:	6f 93       	push	r22
     56e:	7f 93       	push	r23
     570:	8f 93       	push	r24
     572:	9f 93       	push	r25
     574:	af 93       	push	r26
     576:	bf 93       	push	r27
     578:	ef 93       	push	r30
     57a:	ff 93       	push	r31
	
	bt_data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
     57c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     580:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <bt_data>
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	UART0_transmit(bt_data); // BT로 들어온 char를 확인하기 위해 comport master로 출력
     584:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <bt_data>
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	e1 df       	rcall	.-62     	; 0x54e <UART0_transmit>
// 	{
// 		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
// 		rx1_buff[rear1][i++] = data;
// 	}
		  
}
     58c:	ff 91       	pop	r31
     58e:	ef 91       	pop	r30
     590:	bf 91       	pop	r27
     592:	af 91       	pop	r26
     594:	9f 91       	pop	r25
     596:	8f 91       	pop	r24
     598:	7f 91       	pop	r23
     59a:	6f 91       	pop	r22
     59c:	5f 91       	pop	r21
     59e:	4f 91       	pop	r20
     5a0:	3f 91       	pop	r19
     5a2:	2f 91       	pop	r18
     5a4:	0f 90       	pop	r0
     5a6:	0b be       	out	0x3b, r0	; 59
     5a8:	0f 90       	pop	r0
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	0f 90       	pop	r0
     5ae:	1f 90       	pop	r1
     5b0:	18 95       	reti

000005b2 <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
     5b2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
     5b6:	8f ec       	ldi	r24, 0xCF	; 207
     5b8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
     5bc:	eb e9       	ldi	r30, 0x9B	; 155
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	82 60       	ori	r24, 0x02	; 2
     5c4:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     5c6:	ed e9       	ldi	r30, 0x9D	; 157
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	86 60       	ori	r24, 0x06	; 6
     5ce:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     5d0:	ea e9       	ldi	r30, 0x9A	; 154
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	80 81       	ld	r24, Z
     5d6:	88 69       	ori	r24, 0x98	; 152
     5d8:	80 83       	st	Z, r24
     5da:	08 95       	ret

000005dc <__vector_5>:
void init_ultrasonic();

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect) // LEFT
{
     5dc:	1f 92       	push	r1
     5de:	0f 92       	push	r0
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	0f 92       	push	r0
     5e4:	11 24       	eor	r1, r1
     5e6:	0b b6       	in	r0, 0x3b	; 59
     5e8:	0f 92       	push	r0
     5ea:	2f 93       	push	r18
     5ec:	3f 93       	push	r19
     5ee:	4f 93       	push	r20
     5f0:	5f 93       	push	r21
     5f2:	6f 93       	push	r22
     5f4:	7f 93       	push	r23
     5f6:	8f 93       	push	r24
     5f8:	9f 93       	push	r25
     5fa:	af 93       	push	r26
     5fc:	bf 93       	push	r27
     5fe:	ef 93       	push	r30
     600:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN_LEFT & (1 << ECHO_LEFT))
     602:	0c 9b       	sbis	0x01, 4	; 1
     604:	05 c0       	rjmp	.+10     	; 0x610 <__vector_5+0x34>
	{
		TCNT3 = 0;
     606:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     60a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     60e:	20 c0       	rjmp	.+64     	; 0x650 <__vector_5+0x74>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_left_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     610:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     614:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	21 d2       	rcall	.+1090   	; 0xa60 <__floatunsisf>
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	34 e2       	ldi	r19, 0x24	; 36
     622:	44 e7       	ldi	r20, 0x74	; 116
     624:	59 e4       	ldi	r21, 0x49	; 73
     626:	aa d2       	rcall	.+1364   	; 0xb7c <__mulsf3>
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	40 e8       	ldi	r20, 0x80	; 128
     62e:	54 e4       	ldi	r21, 0x44	; 68
     630:	a5 d2       	rcall	.+1354   	; 0xb7c <__mulsf3>
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	34 e2       	ldi	r19, 0x24	; 36
     636:	44 e7       	ldi	r20, 0x74	; 116
     638:	5b e4       	ldi	r21, 0x4B	; 75
     63a:	79 d1       	rcall	.+754    	; 0x92e <__divsf3>
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	48 e6       	ldi	r20, 0x68	; 104
     642:	52 e4       	ldi	r21, 0x42	; 66
     644:	74 d1       	rcall	.+744    	; 0x92e <__divsf3>
     646:	db d1       	rcall	.+950    	; 0x9fe <__fixsfsi>
     648:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <ultrasonic_left_distance+0x1>
     64c:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <ultrasonic_left_distance>
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
		// sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
	}
}
     650:	ff 91       	pop	r31
     652:	ef 91       	pop	r30
     654:	bf 91       	pop	r27
     656:	af 91       	pop	r26
     658:	9f 91       	pop	r25
     65a:	8f 91       	pop	r24
     65c:	7f 91       	pop	r23
     65e:	6f 91       	pop	r22
     660:	5f 91       	pop	r21
     662:	4f 91       	pop	r20
     664:	3f 91       	pop	r19
     666:	2f 91       	pop	r18
     668:	0f 90       	pop	r0
     66a:	0b be       	out	0x3b, r0	; 59
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <__vector_6>:

ISR(INT5_vect) // CENTER
{
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	0b b6       	in	r0, 0x3b	; 59
     682:	0f 92       	push	r0
     684:	2f 93       	push	r18
     686:	3f 93       	push	r19
     688:	4f 93       	push	r20
     68a:	5f 93       	push	r21
     68c:	6f 93       	push	r22
     68e:	7f 93       	push	r23
     690:	8f 93       	push	r24
     692:	9f 93       	push	r25
     694:	af 93       	push	r26
     696:	bf 93       	push	r27
     698:	ef 93       	push	r30
     69a:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN_CENTER & (1 << ECHO_CENTER))
     69c:	0d 9b       	sbis	0x01, 5	; 1
     69e:	05 c0       	rjmp	.+10     	; 0x6aa <__vector_6+0x34>
	{
		TCNT3 = 0;
     6a0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     6a4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     6a8:	20 c0       	rjmp	.+64     	; 0x6ea <__vector_6+0x74>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_center_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     6aa:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     6ae:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	d4 d1       	rcall	.+936    	; 0xa60 <__floatunsisf>
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	34 e2       	ldi	r19, 0x24	; 36
     6bc:	44 e7       	ldi	r20, 0x74	; 116
     6be:	59 e4       	ldi	r21, 0x49	; 73
     6c0:	5d d2       	rcall	.+1210   	; 0xb7c <__mulsf3>
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	40 e8       	ldi	r20, 0x80	; 128
     6c8:	54 e4       	ldi	r21, 0x44	; 68
     6ca:	58 d2       	rcall	.+1200   	; 0xb7c <__mulsf3>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	34 e2       	ldi	r19, 0x24	; 36
     6d0:	44 e7       	ldi	r20, 0x74	; 116
     6d2:	5b e4       	ldi	r21, 0x4B	; 75
     6d4:	2c d1       	rcall	.+600    	; 0x92e <__divsf3>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	48 e6       	ldi	r20, 0x68	; 104
     6dc:	52 e4       	ldi	r21, 0x42	; 66
     6de:	27 d1       	rcall	.+590    	; 0x92e <__divsf3>
     6e0:	8e d1       	rcall	.+796    	; 0x9fe <__fixsfsi>
     6e2:	70 93 5f 01 	sts	0x015F, r23	; 0x80015f <ultrasonic_center_distance+0x1>
     6e6:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <ultrasonic_center_distance>
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
		// sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
	}
}
     6ea:	ff 91       	pop	r31
     6ec:	ef 91       	pop	r30
     6ee:	bf 91       	pop	r27
     6f0:	af 91       	pop	r26
     6f2:	9f 91       	pop	r25
     6f4:	8f 91       	pop	r24
     6f6:	7f 91       	pop	r23
     6f8:	6f 91       	pop	r22
     6fa:	5f 91       	pop	r21
     6fc:	4f 91       	pop	r20
     6fe:	3f 91       	pop	r19
     700:	2f 91       	pop	r18
     702:	0f 90       	pop	r0
     704:	0b be       	out	0x3b, r0	; 59
     706:	0f 90       	pop	r0
     708:	0f be       	out	0x3f, r0	; 63
     70a:	0f 90       	pop	r0
     70c:	1f 90       	pop	r1
     70e:	18 95       	reti

00000710 <__vector_7>:

ISR(INT6_vect) // RIGHT
{
     710:	1f 92       	push	r1
     712:	0f 92       	push	r0
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	0f 92       	push	r0
     718:	11 24       	eor	r1, r1
     71a:	0b b6       	in	r0, 0x3b	; 59
     71c:	0f 92       	push	r0
     71e:	2f 93       	push	r18
     720:	3f 93       	push	r19
     722:	4f 93       	push	r20
     724:	5f 93       	push	r21
     726:	6f 93       	push	r22
     728:	7f 93       	push	r23
     72a:	8f 93       	push	r24
     72c:	9f 93       	push	r25
     72e:	af 93       	push	r26
     730:	bf 93       	push	r27
     732:	ef 93       	push	r30
     734:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN_RIGHT & (1 << ECHO_RIGHT))
     736:	0e 9b       	sbis	0x01, 6	; 1
     738:	05 c0       	rjmp	.+10     	; 0x744 <__vector_7+0x34>
	{
		TCNT3 = 0;
     73a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     73e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     742:	20 c0       	rjmp	.+64     	; 0x784 <__vector_7+0x74>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_right_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     744:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     748:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	87 d1       	rcall	.+782    	; 0xa60 <__floatunsisf>
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	34 e2       	ldi	r19, 0x24	; 36
     756:	44 e7       	ldi	r20, 0x74	; 116
     758:	59 e4       	ldi	r21, 0x49	; 73
     75a:	10 d2       	rcall	.+1056   	; 0xb7c <__mulsf3>
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	40 e8       	ldi	r20, 0x80	; 128
     762:	54 e4       	ldi	r21, 0x44	; 68
     764:	0b d2       	rcall	.+1046   	; 0xb7c <__mulsf3>
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	34 e2       	ldi	r19, 0x24	; 36
     76a:	44 e7       	ldi	r20, 0x74	; 116
     76c:	5b e4       	ldi	r21, 0x4B	; 75
     76e:	df d0       	rcall	.+446    	; 0x92e <__divsf3>
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	48 e6       	ldi	r20, 0x68	; 104
     776:	52 e4       	ldi	r21, 0x42	; 66
     778:	da d0       	rcall	.+436    	; 0x92e <__divsf3>
     77a:	41 d1       	rcall	.+642    	; 0x9fe <__fixsfsi>
     77c:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <ultrasonic_right_distance+0x1>
     780:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <ultrasonic_right_distance>
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
		// sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
	}
}
     784:	ff 91       	pop	r31
     786:	ef 91       	pop	r30
     788:	bf 91       	pop	r27
     78a:	af 91       	pop	r26
     78c:	9f 91       	pop	r25
     78e:	8f 91       	pop	r24
     790:	7f 91       	pop	r23
     792:	6f 91       	pop	r22
     794:	5f 91       	pop	r21
     796:	4f 91       	pop	r20
     798:	3f 91       	pop	r19
     79a:	2f 91       	pop	r18
     79c:	0f 90       	pop	r0
     79e:	0b be       	out	0x3b, r0	; 59
     7a0:	0f 90       	pop	r0
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	0f 90       	pop	r0
     7a6:	1f 90       	pop	r1
     7a8:	18 95       	reti

000007aa <init_ultrasonic>:

void init_ultrasonic()
{
	//////////////// left ////////////////
	TRIG_DDR_LEFT |= 1 << TRIG_LEFT; // output mode로 설정
     7aa:	8a b3       	in	r24, 0x1a	; 26
     7ac:	81 60       	ori	r24, 0x01	; 1
     7ae:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_LEFT &= ~(1 << ECHO_LEFT); // input mode로 설정
     7b0:	82 b1       	in	r24, 0x02	; 2
     7b2:	8f 7e       	andi	r24, 0xEF	; 239
     7b4:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
     7b6:	8a b7       	in	r24, 0x3a	; 58
     7b8:	81 60       	ori	r24, 0x01	; 1
     7ba:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us	
	TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     7bc:	ea e8       	ldi	r30, 0x8A	; 138
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	80 81       	ld	r24, Z
     7c2:	85 60       	ori	r24, 0x05	; 5
     7c4:	80 83       	st	Z, r24
	EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
     7c6:	89 b7       	in	r24, 0x39	; 57
     7c8:	80 61       	ori	r24, 0x10	; 16
     7ca:	89 bf       	out	0x39, r24	; 57
	
	
	//////////////// center ////////////////
	TRIG_DDR_CENTER |= 1 << TRIG_CENTER; // output mode로 설정
     7cc:	8a b3       	in	r24, 0x1a	; 26
     7ce:	82 60       	ori	r24, 0x02	; 2
     7d0:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_CENTER &= ~(1 << ECHO_CENTER); // input mode로 설정
     7d2:	82 b1       	in	r24, 0x02	; 2
     7d4:	8f 7d       	andi	r24, 0xDF	; 223
     7d6:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC51 | 1 << ISC50; // INT5니까 EICRB에서 ISC51, 50
     7d8:	8a b7       	in	r24, 0x3a	; 58
     7da:	84 60       	ori	r24, 0x04	; 4
     7dc:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
	TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     7de:	80 81       	ld	r24, Z
     7e0:	85 60       	ori	r24, 0x05	; 5
     7e2:	80 83       	st	Z, r24
	EIMSK |= 1 << INT5; // 외부 인터럽트4번 (ECHO) 사용
     7e4:	89 b7       	in	r24, 0x39	; 57
     7e6:	80 62       	ori	r24, 0x20	; 32
     7e8:	89 bf       	out	0x39, r24	; 57
	
	
	//////////////// right ////////////////
	TRIG_DDR_RIGHT |= 1 << TRIG_RIGHT; // output mode로 설정
     7ea:	8a b3       	in	r24, 0x1a	; 26
     7ec:	84 60       	ori	r24, 0x04	; 4
     7ee:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_RIGHT &= ~(1 << ECHO_RIGHT); // input mode로 설정
     7f0:	82 b1       	in	r24, 0x02	; 2
     7f2:	8f 7b       	andi	r24, 0xBF	; 191
     7f4:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC61 | 1 << ISC60; // INT6니까 EICRB에서 ISC61, 60
     7f6:	8a b7       	in	r24, 0x3a	; 58
     7f8:	80 61       	ori	r24, 0x10	; 16
     7fa:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
	TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     7fc:	80 81       	ld	r24, Z
     7fe:	85 60       	ori	r24, 0x05	; 5
     800:	80 83       	st	Z, r24
	EIMSK |= 1 << INT6; // 외부 인터럽트4번 (ECHO) 사용
     802:	89 b7       	in	r24, 0x39	; 57
     804:	80 64       	ori	r24, 0x40	; 64
     806:	89 bf       	out	0x39, r24	; 57
     808:	08 95       	ret

0000080a <ultrasonic_trigger>:
}

void ultrasonic_trigger()
{
		////////// left //////////
		TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // 해당되는 포트만 LOW로 만듦
     80a:	8b b3       	in	r24, 0x1b	; 27
     80c:	8e 7f       	andi	r24, 0xFE	; 254
     80e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     810:	25 e0       	ldi	r18, 0x05	; 5
     812:	2a 95       	dec	r18
     814:	f1 f7       	brne	.-4      	; 0x812 <ultrasonic_trigger+0x8>
     816:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_LEFT |= 1 << TRIG_LEFT; // HIGH
     818:	8b b3       	in	r24, 0x1b	; 27
     81a:	81 60       	ori	r24, 0x01	; 1
     81c:	8b bb       	out	0x1b, r24	; 27
     81e:	80 e5       	ldi	r24, 0x50	; 80
     820:	8a 95       	dec	r24
     822:	f1 f7       	brne	.-4      	; 0x820 <ultrasonic_trigger+0x16>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // LOW
     824:	8b b3       	in	r24, 0x1b	; 27
     826:	8e 7f       	andi	r24, 0xFE	; 254
     828:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     82a:	9f ef       	ldi	r25, 0xFF	; 255
     82c:	20 e7       	ldi	r18, 0x70	; 112
     82e:	82 e0       	ldi	r24, 0x02	; 2
     830:	91 50       	subi	r25, 0x01	; 1
     832:	20 40       	sbci	r18, 0x00	; 0
     834:	80 40       	sbci	r24, 0x00	; 0
     836:	e1 f7       	brne	.-8      	; 0x830 <ultrasonic_trigger+0x26>
     838:	00 c0       	rjmp	.+0      	; 0x83a <ultrasonic_trigger+0x30>
     83a:	00 00       	nop
		_delay_ms(50); // delay 기다리는 시간을 timer0 변수로 체크할 수 있도록 개선
		// 초음파센서 echo 응답 대기시간이 최대 38ms
		
		////////// center //////////
		TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // 해당되는 포트만 LOW로 만듦
     83c:	8b b3       	in	r24, 0x1b	; 27
     83e:	8d 7f       	andi	r24, 0xFD	; 253
     840:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     842:	95 e0       	ldi	r25, 0x05	; 5
     844:	9a 95       	dec	r25
     846:	f1 f7       	brne	.-4      	; 0x844 <ultrasonic_trigger+0x3a>
     848:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_CENTER |= 1 << TRIG_CENTER; // HIGH
     84a:	8b b3       	in	r24, 0x1b	; 27
     84c:	82 60       	ori	r24, 0x02	; 2
     84e:	8b bb       	out	0x1b, r24	; 27
     850:	20 e5       	ldi	r18, 0x50	; 80
     852:	2a 95       	dec	r18
     854:	f1 f7       	brne	.-4      	; 0x852 <ultrasonic_trigger+0x48>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // LOW
     856:	8b b3       	in	r24, 0x1b	; 27
     858:	8d 7f       	andi	r24, 0xFD	; 253
     85a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	90 e7       	ldi	r25, 0x70	; 112
     860:	22 e0       	ldi	r18, 0x02	; 2
     862:	81 50       	subi	r24, 0x01	; 1
     864:	90 40       	sbci	r25, 0x00	; 0
     866:	20 40       	sbci	r18, 0x00	; 0
     868:	e1 f7       	brne	.-8      	; 0x862 <ultrasonic_trigger+0x58>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <ultrasonic_trigger+0x62>
     86c:	00 00       	nop
		_delay_ms(50); // delay 기다리는 시간을 timer0 변수로 체크할 수 있도록 개선
		
		////////// right //////////
		TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // 해당되는 포트만 LOW로 만듦
     86e:	8b b3       	in	r24, 0x1b	; 27
     870:	8b 7f       	andi	r24, 0xFB	; 251
     872:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     874:	85 e0       	ldi	r24, 0x05	; 5
     876:	8a 95       	dec	r24
     878:	f1 f7       	brne	.-4      	; 0x876 <ultrasonic_trigger+0x6c>
     87a:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_RIGHT |= 1 << TRIG_RIGHT; // HIGH
     87c:	8b b3       	in	r24, 0x1b	; 27
     87e:	84 60       	ori	r24, 0x04	; 4
     880:	8b bb       	out	0x1b, r24	; 27
     882:	90 e5       	ldi	r25, 0x50	; 80
     884:	9a 95       	dec	r25
     886:	f1 f7       	brne	.-4      	; 0x884 <ultrasonic_trigger+0x7a>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // LOW
     888:	8b b3       	in	r24, 0x1b	; 27
     88a:	8b 7f       	andi	r24, 0xFB	; 251
     88c:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88e:	2f ef       	ldi	r18, 0xFF	; 255
     890:	80 e7       	ldi	r24, 0x70	; 112
     892:	92 e0       	ldi	r25, 0x02	; 2
     894:	21 50       	subi	r18, 0x01	; 1
     896:	80 40       	sbci	r24, 0x00	; 0
     898:	90 40       	sbci	r25, 0x00	; 0
     89a:	e1 f7       	brne	.-8      	; 0x894 <ultrasonic_trigger+0x8a>
     89c:	00 c0       	rjmp	.+0      	; 0x89e <ultrasonic_trigger+0x94>
     89e:	00 00       	nop
     8a0:	08 95       	ret

000008a2 <distance_check>:
		_delay_ms(50); // delay 기다리는 시간을 timer0 변수로 체크할 수 있도록 개선
}

void distance_check(void)
{
	if (ultrasonic_check_timer >= 500)
     8a2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <ultrasonic_check_timer>
     8a6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <ultrasonic_check_timer+0x1>
     8aa:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <ultrasonic_check_timer+0x2>
     8ae:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <ultrasonic_check_timer+0x3>
     8b2:	84 3f       	cpi	r24, 0xF4	; 244
     8b4:	91 40       	sbci	r25, 0x01	; 1
     8b6:	a1 05       	cpc	r26, r1
     8b8:	b1 05       	cpc	r27, r1
     8ba:	88 f1       	brcs	.+98     	; 0x91e <distance_check+0x7c>
	{
		ultrasonic_check_timer = 0;
     8bc:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <ultrasonic_check_timer>
     8c0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <ultrasonic_check_timer+0x1>
     8c4:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <ultrasonic_check_timer+0x2>
     8c8:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <ultrasonic_check_timer+0x3>
		printf("left   :  %5d\n", ultrasonic_left_distance); // printf 찍으면 delay생김
     8cc:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <ultrasonic_left_distance>
     8d0:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <ultrasonic_left_distance+0x1>
     8d4:	9f 93       	push	r25
     8d6:	8f 93       	push	r24
     8d8:	86 e1       	ldi	r24, 0x16	; 22
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	9f 93       	push	r25
     8de:	8f 93       	push	r24
     8e0:	e0 d1       	rcall	.+960    	; 0xca2 <printf>
		printf("center :  %5d\n", ultrasonic_center_distance);
     8e2:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <ultrasonic_center_distance>
     8e6:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <ultrasonic_center_distance+0x1>
     8ea:	9f 93       	push	r25
     8ec:	8f 93       	push	r24
     8ee:	85 e2       	ldi	r24, 0x25	; 37
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	9f 93       	push	r25
     8f4:	8f 93       	push	r24
     8f6:	d5 d1       	rcall	.+938    	; 0xca2 <printf>
		printf("right  :  %5d\n", ultrasonic_right_distance);
     8f8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <ultrasonic_right_distance>
     8fc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <ultrasonic_right_distance+0x1>
     900:	9f 93       	push	r25
     902:	8f 93       	push	r24
     904:	84 e3       	ldi	r24, 0x34	; 52
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	9f 93       	push	r25
     90a:	8f 93       	push	r24
     90c:	ca d1       	rcall	.+916    	; 0xca2 <printf>
     90e:	8d b7       	in	r24, 0x3d	; 61
     910:	9e b7       	in	r25, 0x3e	; 62
     912:	0c 96       	adiw	r24, 0x0c	; 12
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	9e bf       	out	0x3e, r25	; 62
     91a:	0f be       	out	0x3f, r0	; 63
	}
	ultrasonic_trigger(); // 이것도 수정해야한다.
     91c:	8d bf       	out	0x3d, r24	; 61
     91e:	75 df       	rcall	.-278    	; 0x80a <ultrasonic_trigger>
	func_state = AUTO_MODE_CHECK;
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <func_state+0x1>
     928:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <func_state>
     92c:	08 95       	ret

0000092e <__divsf3>:
     92e:	0c d0       	rcall	.+24     	; 0x948 <__divsf3x>
     930:	eb c0       	rjmp	.+470    	; 0xb08 <__fp_round>
     932:	e3 d0       	rcall	.+454    	; 0xafa <__fp_pscB>
     934:	40 f0       	brcs	.+16     	; 0x946 <__divsf3+0x18>
     936:	da d0       	rcall	.+436    	; 0xaec <__fp_pscA>
     938:	30 f0       	brcs	.+12     	; 0x946 <__divsf3+0x18>
     93a:	21 f4       	brne	.+8      	; 0x944 <__divsf3+0x16>
     93c:	5f 3f       	cpi	r21, 0xFF	; 255
     93e:	19 f0       	breq	.+6      	; 0x946 <__divsf3+0x18>
     940:	cc c0       	rjmp	.+408    	; 0xada <__fp_inf>
     942:	51 11       	cpse	r21, r1
     944:	15 c1       	rjmp	.+554    	; 0xb70 <__fp_szero>
     946:	cf c0       	rjmp	.+414    	; 0xae6 <__fp_nan>

00000948 <__divsf3x>:
     948:	f0 d0       	rcall	.+480    	; 0xb2a <__fp_split3>
     94a:	98 f3       	brcs	.-26     	; 0x932 <__divsf3+0x4>

0000094c <__divsf3_pse>:
     94c:	99 23       	and	r25, r25
     94e:	c9 f3       	breq	.-14     	; 0x942 <__divsf3+0x14>
     950:	55 23       	and	r21, r21
     952:	b1 f3       	breq	.-20     	; 0x940 <__divsf3+0x12>
     954:	95 1b       	sub	r25, r21
     956:	55 0b       	sbc	r21, r21
     958:	bb 27       	eor	r27, r27
     95a:	aa 27       	eor	r26, r26
     95c:	62 17       	cp	r22, r18
     95e:	73 07       	cpc	r23, r19
     960:	84 07       	cpc	r24, r20
     962:	38 f0       	brcs	.+14     	; 0x972 <__divsf3_pse+0x26>
     964:	9f 5f       	subi	r25, 0xFF	; 255
     966:	5f 4f       	sbci	r21, 0xFF	; 255
     968:	22 0f       	add	r18, r18
     96a:	33 1f       	adc	r19, r19
     96c:	44 1f       	adc	r20, r20
     96e:	aa 1f       	adc	r26, r26
     970:	a9 f3       	breq	.-22     	; 0x95c <__divsf3_pse+0x10>
     972:	33 d0       	rcall	.+102    	; 0x9da <__divsf3_pse+0x8e>
     974:	0e 2e       	mov	r0, r30
     976:	3a f0       	brmi	.+14     	; 0x986 <__divsf3_pse+0x3a>
     978:	e0 e8       	ldi	r30, 0x80	; 128
     97a:	30 d0       	rcall	.+96     	; 0x9dc <__divsf3_pse+0x90>
     97c:	91 50       	subi	r25, 0x01	; 1
     97e:	50 40       	sbci	r21, 0x00	; 0
     980:	e6 95       	lsr	r30
     982:	00 1c       	adc	r0, r0
     984:	ca f7       	brpl	.-14     	; 0x978 <__divsf3_pse+0x2c>
     986:	29 d0       	rcall	.+82     	; 0x9da <__divsf3_pse+0x8e>
     988:	fe 2f       	mov	r31, r30
     98a:	27 d0       	rcall	.+78     	; 0x9da <__divsf3_pse+0x8e>
     98c:	66 0f       	add	r22, r22
     98e:	77 1f       	adc	r23, r23
     990:	88 1f       	adc	r24, r24
     992:	bb 1f       	adc	r27, r27
     994:	26 17       	cp	r18, r22
     996:	37 07       	cpc	r19, r23
     998:	48 07       	cpc	r20, r24
     99a:	ab 07       	cpc	r26, r27
     99c:	b0 e8       	ldi	r27, 0x80	; 128
     99e:	09 f0       	breq	.+2      	; 0x9a2 <__divsf3_pse+0x56>
     9a0:	bb 0b       	sbc	r27, r27
     9a2:	80 2d       	mov	r24, r0
     9a4:	bf 01       	movw	r22, r30
     9a6:	ff 27       	eor	r31, r31
     9a8:	93 58       	subi	r25, 0x83	; 131
     9aa:	5f 4f       	sbci	r21, 0xFF	; 255
     9ac:	2a f0       	brmi	.+10     	; 0x9b8 <__divsf3_pse+0x6c>
     9ae:	9e 3f       	cpi	r25, 0xFE	; 254
     9b0:	51 05       	cpc	r21, r1
     9b2:	68 f0       	brcs	.+26     	; 0x9ce <__divsf3_pse+0x82>
     9b4:	92 c0       	rjmp	.+292    	; 0xada <__fp_inf>
     9b6:	dc c0       	rjmp	.+440    	; 0xb70 <__fp_szero>
     9b8:	5f 3f       	cpi	r21, 0xFF	; 255
     9ba:	ec f3       	brlt	.-6      	; 0x9b6 <__divsf3_pse+0x6a>
     9bc:	98 3e       	cpi	r25, 0xE8	; 232
     9be:	dc f3       	brlt	.-10     	; 0x9b6 <__divsf3_pse+0x6a>
     9c0:	86 95       	lsr	r24
     9c2:	77 95       	ror	r23
     9c4:	67 95       	ror	r22
     9c6:	b7 95       	ror	r27
     9c8:	f7 95       	ror	r31
     9ca:	9f 5f       	subi	r25, 0xFF	; 255
     9cc:	c9 f7       	brne	.-14     	; 0x9c0 <__divsf3_pse+0x74>
     9ce:	88 0f       	add	r24, r24
     9d0:	91 1d       	adc	r25, r1
     9d2:	96 95       	lsr	r25
     9d4:	87 95       	ror	r24
     9d6:	97 f9       	bld	r25, 7
     9d8:	08 95       	ret
     9da:	e1 e0       	ldi	r30, 0x01	; 1
     9dc:	66 0f       	add	r22, r22
     9de:	77 1f       	adc	r23, r23
     9e0:	88 1f       	adc	r24, r24
     9e2:	bb 1f       	adc	r27, r27
     9e4:	62 17       	cp	r22, r18
     9e6:	73 07       	cpc	r23, r19
     9e8:	84 07       	cpc	r24, r20
     9ea:	ba 07       	cpc	r27, r26
     9ec:	20 f0       	brcs	.+8      	; 0x9f6 <__divsf3_pse+0xaa>
     9ee:	62 1b       	sub	r22, r18
     9f0:	73 0b       	sbc	r23, r19
     9f2:	84 0b       	sbc	r24, r20
     9f4:	ba 0b       	sbc	r27, r26
     9f6:	ee 1f       	adc	r30, r30
     9f8:	88 f7       	brcc	.-30     	; 0x9dc <__divsf3_pse+0x90>
     9fa:	e0 95       	com	r30
     9fc:	08 95       	ret

000009fe <__fixsfsi>:
     9fe:	04 d0       	rcall	.+8      	; 0xa08 <__fixunssfsi>
     a00:	68 94       	set
     a02:	b1 11       	cpse	r27, r1
     a04:	b5 c0       	rjmp	.+362    	; 0xb70 <__fp_szero>
     a06:	08 95       	ret

00000a08 <__fixunssfsi>:
     a08:	98 d0       	rcall	.+304    	; 0xb3a <__fp_splitA>
     a0a:	88 f0       	brcs	.+34     	; 0xa2e <__fixunssfsi+0x26>
     a0c:	9f 57       	subi	r25, 0x7F	; 127
     a0e:	90 f0       	brcs	.+36     	; 0xa34 <__fixunssfsi+0x2c>
     a10:	b9 2f       	mov	r27, r25
     a12:	99 27       	eor	r25, r25
     a14:	b7 51       	subi	r27, 0x17	; 23
     a16:	a0 f0       	brcs	.+40     	; 0xa40 <__fixunssfsi+0x38>
     a18:	d1 f0       	breq	.+52     	; 0xa4e <__fixunssfsi+0x46>
     a1a:	66 0f       	add	r22, r22
     a1c:	77 1f       	adc	r23, r23
     a1e:	88 1f       	adc	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	1a f0       	brmi	.+6      	; 0xa2a <__fixunssfsi+0x22>
     a24:	ba 95       	dec	r27
     a26:	c9 f7       	brne	.-14     	; 0xa1a <__fixunssfsi+0x12>
     a28:	12 c0       	rjmp	.+36     	; 0xa4e <__fixunssfsi+0x46>
     a2a:	b1 30       	cpi	r27, 0x01	; 1
     a2c:	81 f0       	breq	.+32     	; 0xa4e <__fixunssfsi+0x46>
     a2e:	9f d0       	rcall	.+318    	; 0xb6e <__fp_zero>
     a30:	b1 e0       	ldi	r27, 0x01	; 1
     a32:	08 95       	ret
     a34:	9c c0       	rjmp	.+312    	; 0xb6e <__fp_zero>
     a36:	67 2f       	mov	r22, r23
     a38:	78 2f       	mov	r23, r24
     a3a:	88 27       	eor	r24, r24
     a3c:	b8 5f       	subi	r27, 0xF8	; 248
     a3e:	39 f0       	breq	.+14     	; 0xa4e <__fixunssfsi+0x46>
     a40:	b9 3f       	cpi	r27, 0xF9	; 249
     a42:	cc f3       	brlt	.-14     	; 0xa36 <__fixunssfsi+0x2e>
     a44:	86 95       	lsr	r24
     a46:	77 95       	ror	r23
     a48:	67 95       	ror	r22
     a4a:	b3 95       	inc	r27
     a4c:	d9 f7       	brne	.-10     	; 0xa44 <__fixunssfsi+0x3c>
     a4e:	3e f4       	brtc	.+14     	; 0xa5e <__fixunssfsi+0x56>
     a50:	90 95       	com	r25
     a52:	80 95       	com	r24
     a54:	70 95       	com	r23
     a56:	61 95       	neg	r22
     a58:	7f 4f       	sbci	r23, 0xFF	; 255
     a5a:	8f 4f       	sbci	r24, 0xFF	; 255
     a5c:	9f 4f       	sbci	r25, 0xFF	; 255
     a5e:	08 95       	ret

00000a60 <__floatunsisf>:
     a60:	e8 94       	clt
     a62:	09 c0       	rjmp	.+18     	; 0xa76 <__floatsisf+0x12>

00000a64 <__floatsisf>:
     a64:	97 fb       	bst	r25, 7
     a66:	3e f4       	brtc	.+14     	; 0xa76 <__floatsisf+0x12>
     a68:	90 95       	com	r25
     a6a:	80 95       	com	r24
     a6c:	70 95       	com	r23
     a6e:	61 95       	neg	r22
     a70:	7f 4f       	sbci	r23, 0xFF	; 255
     a72:	8f 4f       	sbci	r24, 0xFF	; 255
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	99 23       	and	r25, r25
     a78:	a9 f0       	breq	.+42     	; 0xaa4 <__floatsisf+0x40>
     a7a:	f9 2f       	mov	r31, r25
     a7c:	96 e9       	ldi	r25, 0x96	; 150
     a7e:	bb 27       	eor	r27, r27
     a80:	93 95       	inc	r25
     a82:	f6 95       	lsr	r31
     a84:	87 95       	ror	r24
     a86:	77 95       	ror	r23
     a88:	67 95       	ror	r22
     a8a:	b7 95       	ror	r27
     a8c:	f1 11       	cpse	r31, r1
     a8e:	f8 cf       	rjmp	.-16     	; 0xa80 <__floatsisf+0x1c>
     a90:	fa f4       	brpl	.+62     	; 0xad0 <__floatsisf+0x6c>
     a92:	bb 0f       	add	r27, r27
     a94:	11 f4       	brne	.+4      	; 0xa9a <__floatsisf+0x36>
     a96:	60 ff       	sbrs	r22, 0
     a98:	1b c0       	rjmp	.+54     	; 0xad0 <__floatsisf+0x6c>
     a9a:	6f 5f       	subi	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	8f 4f       	sbci	r24, 0xFF	; 255
     aa0:	9f 4f       	sbci	r25, 0xFF	; 255
     aa2:	16 c0       	rjmp	.+44     	; 0xad0 <__floatsisf+0x6c>
     aa4:	88 23       	and	r24, r24
     aa6:	11 f0       	breq	.+4      	; 0xaac <__floatsisf+0x48>
     aa8:	96 e9       	ldi	r25, 0x96	; 150
     aaa:	11 c0       	rjmp	.+34     	; 0xace <__floatsisf+0x6a>
     aac:	77 23       	and	r23, r23
     aae:	21 f0       	breq	.+8      	; 0xab8 <__floatsisf+0x54>
     ab0:	9e e8       	ldi	r25, 0x8E	; 142
     ab2:	87 2f       	mov	r24, r23
     ab4:	76 2f       	mov	r23, r22
     ab6:	05 c0       	rjmp	.+10     	; 0xac2 <__floatsisf+0x5e>
     ab8:	66 23       	and	r22, r22
     aba:	71 f0       	breq	.+28     	; 0xad8 <__floatsisf+0x74>
     abc:	96 e8       	ldi	r25, 0x86	; 134
     abe:	86 2f       	mov	r24, r22
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	2a f0       	brmi	.+10     	; 0xad0 <__floatsisf+0x6c>
     ac6:	9a 95       	dec	r25
     ac8:	66 0f       	add	r22, r22
     aca:	77 1f       	adc	r23, r23
     acc:	88 1f       	adc	r24, r24
     ace:	da f7       	brpl	.-10     	; 0xac6 <__floatsisf+0x62>
     ad0:	88 0f       	add	r24, r24
     ad2:	96 95       	lsr	r25
     ad4:	87 95       	ror	r24
     ad6:	97 f9       	bld	r25, 7
     ad8:	08 95       	ret

00000ada <__fp_inf>:
     ada:	97 f9       	bld	r25, 7
     adc:	9f 67       	ori	r25, 0x7F	; 127
     ade:	80 e8       	ldi	r24, 0x80	; 128
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	08 95       	ret

00000ae6 <__fp_nan>:
     ae6:	9f ef       	ldi	r25, 0xFF	; 255
     ae8:	80 ec       	ldi	r24, 0xC0	; 192
     aea:	08 95       	ret

00000aec <__fp_pscA>:
     aec:	00 24       	eor	r0, r0
     aee:	0a 94       	dec	r0
     af0:	16 16       	cp	r1, r22
     af2:	17 06       	cpc	r1, r23
     af4:	18 06       	cpc	r1, r24
     af6:	09 06       	cpc	r0, r25
     af8:	08 95       	ret

00000afa <__fp_pscB>:
     afa:	00 24       	eor	r0, r0
     afc:	0a 94       	dec	r0
     afe:	12 16       	cp	r1, r18
     b00:	13 06       	cpc	r1, r19
     b02:	14 06       	cpc	r1, r20
     b04:	05 06       	cpc	r0, r21
     b06:	08 95       	ret

00000b08 <__fp_round>:
     b08:	09 2e       	mov	r0, r25
     b0a:	03 94       	inc	r0
     b0c:	00 0c       	add	r0, r0
     b0e:	11 f4       	brne	.+4      	; 0xb14 <__fp_round+0xc>
     b10:	88 23       	and	r24, r24
     b12:	52 f0       	brmi	.+20     	; 0xb28 <__fp_round+0x20>
     b14:	bb 0f       	add	r27, r27
     b16:	40 f4       	brcc	.+16     	; 0xb28 <__fp_round+0x20>
     b18:	bf 2b       	or	r27, r31
     b1a:	11 f4       	brne	.+4      	; 0xb20 <__fp_round+0x18>
     b1c:	60 ff       	sbrs	r22, 0
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__fp_round+0x20>
     b20:	6f 5f       	subi	r22, 0xFF	; 255
     b22:	7f 4f       	sbci	r23, 0xFF	; 255
     b24:	8f 4f       	sbci	r24, 0xFF	; 255
     b26:	9f 4f       	sbci	r25, 0xFF	; 255
     b28:	08 95       	ret

00000b2a <__fp_split3>:
     b2a:	57 fd       	sbrc	r21, 7
     b2c:	90 58       	subi	r25, 0x80	; 128
     b2e:	44 0f       	add	r20, r20
     b30:	55 1f       	adc	r21, r21
     b32:	59 f0       	breq	.+22     	; 0xb4a <__fp_splitA+0x10>
     b34:	5f 3f       	cpi	r21, 0xFF	; 255
     b36:	71 f0       	breq	.+28     	; 0xb54 <__fp_splitA+0x1a>
     b38:	47 95       	ror	r20

00000b3a <__fp_splitA>:
     b3a:	88 0f       	add	r24, r24
     b3c:	97 fb       	bst	r25, 7
     b3e:	99 1f       	adc	r25, r25
     b40:	61 f0       	breq	.+24     	; 0xb5a <__fp_splitA+0x20>
     b42:	9f 3f       	cpi	r25, 0xFF	; 255
     b44:	79 f0       	breq	.+30     	; 0xb64 <__fp_splitA+0x2a>
     b46:	87 95       	ror	r24
     b48:	08 95       	ret
     b4a:	12 16       	cp	r1, r18
     b4c:	13 06       	cpc	r1, r19
     b4e:	14 06       	cpc	r1, r20
     b50:	55 1f       	adc	r21, r21
     b52:	f2 cf       	rjmp	.-28     	; 0xb38 <__fp_split3+0xe>
     b54:	46 95       	lsr	r20
     b56:	f1 df       	rcall	.-30     	; 0xb3a <__fp_splitA>
     b58:	08 c0       	rjmp	.+16     	; 0xb6a <__fp_splitA+0x30>
     b5a:	16 16       	cp	r1, r22
     b5c:	17 06       	cpc	r1, r23
     b5e:	18 06       	cpc	r1, r24
     b60:	99 1f       	adc	r25, r25
     b62:	f1 cf       	rjmp	.-30     	; 0xb46 <__fp_splitA+0xc>
     b64:	86 95       	lsr	r24
     b66:	71 05       	cpc	r23, r1
     b68:	61 05       	cpc	r22, r1
     b6a:	08 94       	sec
     b6c:	08 95       	ret

00000b6e <__fp_zero>:
     b6e:	e8 94       	clt

00000b70 <__fp_szero>:
     b70:	bb 27       	eor	r27, r27
     b72:	66 27       	eor	r22, r22
     b74:	77 27       	eor	r23, r23
     b76:	cb 01       	movw	r24, r22
     b78:	97 f9       	bld	r25, 7
     b7a:	08 95       	ret

00000b7c <__mulsf3>:
     b7c:	0b d0       	rcall	.+22     	; 0xb94 <__mulsf3x>
     b7e:	c4 cf       	rjmp	.-120    	; 0xb08 <__fp_round>
     b80:	b5 df       	rcall	.-150    	; 0xaec <__fp_pscA>
     b82:	28 f0       	brcs	.+10     	; 0xb8e <__mulsf3+0x12>
     b84:	ba df       	rcall	.-140    	; 0xafa <__fp_pscB>
     b86:	18 f0       	brcs	.+6      	; 0xb8e <__mulsf3+0x12>
     b88:	95 23       	and	r25, r21
     b8a:	09 f0       	breq	.+2      	; 0xb8e <__mulsf3+0x12>
     b8c:	a6 cf       	rjmp	.-180    	; 0xada <__fp_inf>
     b8e:	ab cf       	rjmp	.-170    	; 0xae6 <__fp_nan>
     b90:	11 24       	eor	r1, r1
     b92:	ee cf       	rjmp	.-36     	; 0xb70 <__fp_szero>

00000b94 <__mulsf3x>:
     b94:	ca df       	rcall	.-108    	; 0xb2a <__fp_split3>
     b96:	a0 f3       	brcs	.-24     	; 0xb80 <__mulsf3+0x4>

00000b98 <__mulsf3_pse>:
     b98:	95 9f       	mul	r25, r21
     b9a:	d1 f3       	breq	.-12     	; 0xb90 <__mulsf3+0x14>
     b9c:	95 0f       	add	r25, r21
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	55 1f       	adc	r21, r21
     ba2:	62 9f       	mul	r22, r18
     ba4:	f0 01       	movw	r30, r0
     ba6:	72 9f       	mul	r23, r18
     ba8:	bb 27       	eor	r27, r27
     baa:	f0 0d       	add	r31, r0
     bac:	b1 1d       	adc	r27, r1
     bae:	63 9f       	mul	r22, r19
     bb0:	aa 27       	eor	r26, r26
     bb2:	f0 0d       	add	r31, r0
     bb4:	b1 1d       	adc	r27, r1
     bb6:	aa 1f       	adc	r26, r26
     bb8:	64 9f       	mul	r22, r20
     bba:	66 27       	eor	r22, r22
     bbc:	b0 0d       	add	r27, r0
     bbe:	a1 1d       	adc	r26, r1
     bc0:	66 1f       	adc	r22, r22
     bc2:	82 9f       	mul	r24, r18
     bc4:	22 27       	eor	r18, r18
     bc6:	b0 0d       	add	r27, r0
     bc8:	a1 1d       	adc	r26, r1
     bca:	62 1f       	adc	r22, r18
     bcc:	73 9f       	mul	r23, r19
     bce:	b0 0d       	add	r27, r0
     bd0:	a1 1d       	adc	r26, r1
     bd2:	62 1f       	adc	r22, r18
     bd4:	83 9f       	mul	r24, r19
     bd6:	a0 0d       	add	r26, r0
     bd8:	61 1d       	adc	r22, r1
     bda:	22 1f       	adc	r18, r18
     bdc:	74 9f       	mul	r23, r20
     bde:	33 27       	eor	r19, r19
     be0:	a0 0d       	add	r26, r0
     be2:	61 1d       	adc	r22, r1
     be4:	23 1f       	adc	r18, r19
     be6:	84 9f       	mul	r24, r20
     be8:	60 0d       	add	r22, r0
     bea:	21 1d       	adc	r18, r1
     bec:	82 2f       	mov	r24, r18
     bee:	76 2f       	mov	r23, r22
     bf0:	6a 2f       	mov	r22, r26
     bf2:	11 24       	eor	r1, r1
     bf4:	9f 57       	subi	r25, 0x7F	; 127
     bf6:	50 40       	sbci	r21, 0x00	; 0
     bf8:	8a f0       	brmi	.+34     	; 0xc1c <__mulsf3_pse+0x84>
     bfa:	e1 f0       	breq	.+56     	; 0xc34 <__mulsf3_pse+0x9c>
     bfc:	88 23       	and	r24, r24
     bfe:	4a f0       	brmi	.+18     	; 0xc12 <__mulsf3_pse+0x7a>
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	bb 1f       	adc	r27, r27
     c06:	66 1f       	adc	r22, r22
     c08:	77 1f       	adc	r23, r23
     c0a:	88 1f       	adc	r24, r24
     c0c:	91 50       	subi	r25, 0x01	; 1
     c0e:	50 40       	sbci	r21, 0x00	; 0
     c10:	a9 f7       	brne	.-22     	; 0xbfc <__mulsf3_pse+0x64>
     c12:	9e 3f       	cpi	r25, 0xFE	; 254
     c14:	51 05       	cpc	r21, r1
     c16:	70 f0       	brcs	.+28     	; 0xc34 <__mulsf3_pse+0x9c>
     c18:	60 cf       	rjmp	.-320    	; 0xada <__fp_inf>
     c1a:	aa cf       	rjmp	.-172    	; 0xb70 <__fp_szero>
     c1c:	5f 3f       	cpi	r21, 0xFF	; 255
     c1e:	ec f3       	brlt	.-6      	; 0xc1a <__mulsf3_pse+0x82>
     c20:	98 3e       	cpi	r25, 0xE8	; 232
     c22:	dc f3       	brlt	.-10     	; 0xc1a <__mulsf3_pse+0x82>
     c24:	86 95       	lsr	r24
     c26:	77 95       	ror	r23
     c28:	67 95       	ror	r22
     c2a:	b7 95       	ror	r27
     c2c:	f7 95       	ror	r31
     c2e:	e7 95       	ror	r30
     c30:	9f 5f       	subi	r25, 0xFF	; 255
     c32:	c1 f7       	brne	.-16     	; 0xc24 <__mulsf3_pse+0x8c>
     c34:	fe 2b       	or	r31, r30
     c36:	88 0f       	add	r24, r24
     c38:	91 1d       	adc	r25, r1
     c3a:	96 95       	lsr	r25
     c3c:	87 95       	ror	r24
     c3e:	97 f9       	bld	r25, 7
     c40:	08 95       	ret

00000c42 <__divmodhi4>:
     c42:	97 fb       	bst	r25, 7
     c44:	07 2e       	mov	r0, r23
     c46:	16 f4       	brtc	.+4      	; 0xc4c <__divmodhi4+0xa>
     c48:	00 94       	com	r0
     c4a:	06 d0       	rcall	.+12     	; 0xc58 <__divmodhi4_neg1>
     c4c:	77 fd       	sbrc	r23, 7
     c4e:	08 d0       	rcall	.+16     	; 0xc60 <__divmodhi4_neg2>
     c50:	14 d0       	rcall	.+40     	; 0xc7a <__udivmodhi4>
     c52:	07 fc       	sbrc	r0, 7
     c54:	05 d0       	rcall	.+10     	; 0xc60 <__divmodhi4_neg2>
     c56:	3e f4       	brtc	.+14     	; 0xc66 <__divmodhi4_exit>

00000c58 <__divmodhi4_neg1>:
     c58:	90 95       	com	r25
     c5a:	81 95       	neg	r24
     c5c:	9f 4f       	sbci	r25, 0xFF	; 255
     c5e:	08 95       	ret

00000c60 <__divmodhi4_neg2>:
     c60:	70 95       	com	r23
     c62:	61 95       	neg	r22
     c64:	7f 4f       	sbci	r23, 0xFF	; 255

00000c66 <__divmodhi4_exit>:
     c66:	08 95       	ret

00000c68 <__tablejump2__>:
     c68:	ee 0f       	add	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	00 24       	eor	r0, r0
     c6e:	00 1c       	adc	r0, r0
     c70:	0b be       	out	0x3b, r0	; 59
     c72:	07 90       	elpm	r0, Z+
     c74:	f6 91       	elpm	r31, Z
     c76:	e0 2d       	mov	r30, r0
     c78:	09 94       	ijmp

00000c7a <__udivmodhi4>:
     c7a:	aa 1b       	sub	r26, r26
     c7c:	bb 1b       	sub	r27, r27
     c7e:	51 e1       	ldi	r21, 0x11	; 17
     c80:	07 c0       	rjmp	.+14     	; 0xc90 <__udivmodhi4_ep>

00000c82 <__udivmodhi4_loop>:
     c82:	aa 1f       	adc	r26, r26
     c84:	bb 1f       	adc	r27, r27
     c86:	a6 17       	cp	r26, r22
     c88:	b7 07       	cpc	r27, r23
     c8a:	10 f0       	brcs	.+4      	; 0xc90 <__udivmodhi4_ep>
     c8c:	a6 1b       	sub	r26, r22
     c8e:	b7 0b       	sbc	r27, r23

00000c90 <__udivmodhi4_ep>:
     c90:	88 1f       	adc	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	5a 95       	dec	r21
     c96:	a9 f7       	brne	.-22     	; 0xc82 <__udivmodhi4_loop>
     c98:	80 95       	com	r24
     c9a:	90 95       	com	r25
     c9c:	bc 01       	movw	r22, r24
     c9e:	cd 01       	movw	r24, r26
     ca0:	08 95       	ret

00000ca2 <printf>:
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	ae 01       	movw	r20, r28
     cac:	4b 5f       	subi	r20, 0xFB	; 251
     cae:	5f 4f       	sbci	r21, 0xFF	; 255
     cb0:	fa 01       	movw	r30, r20
     cb2:	61 91       	ld	r22, Z+
     cb4:	71 91       	ld	r23, Z+
     cb6:	af 01       	movw	r20, r30
     cb8:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <__iob+0x2>
     cbc:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <__iob+0x3>
     cc0:	03 d0       	rcall	.+6      	; 0xcc8 <vfprintf>
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <vfprintf>:
     cc8:	2f 92       	push	r2
     cca:	3f 92       	push	r3
     ccc:	4f 92       	push	r4
     cce:	5f 92       	push	r5
     cd0:	6f 92       	push	r6
     cd2:	7f 92       	push	r7
     cd4:	8f 92       	push	r8
     cd6:	9f 92       	push	r9
     cd8:	af 92       	push	r10
     cda:	bf 92       	push	r11
     cdc:	cf 92       	push	r12
     cde:	df 92       	push	r13
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	2b 97       	sbiw	r28, 0x0b	; 11
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	6c 01       	movw	r12, r24
     cfe:	7b 01       	movw	r14, r22
     d00:	8a 01       	movw	r16, r20
     d02:	fc 01       	movw	r30, r24
     d04:	17 82       	std	Z+7, r1	; 0x07
     d06:	16 82       	std	Z+6, r1	; 0x06
     d08:	83 81       	ldd	r24, Z+3	; 0x03
     d0a:	81 ff       	sbrs	r24, 1
     d0c:	bf c1       	rjmp	.+894    	; 0x108c <__DATA_REGION_LENGTH__+0x8c>
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	3c 01       	movw	r6, r24
     d14:	f6 01       	movw	r30, r12
     d16:	93 81       	ldd	r25, Z+3	; 0x03
     d18:	f7 01       	movw	r30, r14
     d1a:	93 fd       	sbrc	r25, 3
     d1c:	85 91       	lpm	r24, Z+
     d1e:	93 ff       	sbrs	r25, 3
     d20:	81 91       	ld	r24, Z+
     d22:	7f 01       	movw	r14, r30
     d24:	88 23       	and	r24, r24
     d26:	09 f4       	brne	.+2      	; 0xd2a <vfprintf+0x62>
     d28:	ad c1       	rjmp	.+858    	; 0x1084 <__DATA_REGION_LENGTH__+0x84>
     d2a:	85 32       	cpi	r24, 0x25	; 37
     d2c:	39 f4       	brne	.+14     	; 0xd3c <vfprintf+0x74>
     d2e:	93 fd       	sbrc	r25, 3
     d30:	85 91       	lpm	r24, Z+
     d32:	93 ff       	sbrs	r25, 3
     d34:	81 91       	ld	r24, Z+
     d36:	7f 01       	movw	r14, r30
     d38:	85 32       	cpi	r24, 0x25	; 37
     d3a:	21 f4       	brne	.+8      	; 0xd44 <vfprintf+0x7c>
     d3c:	b6 01       	movw	r22, r12
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	d6 d1       	rcall	.+940    	; 0x10ee <fputc>
     d42:	e8 cf       	rjmp	.-48     	; 0xd14 <vfprintf+0x4c>
     d44:	91 2c       	mov	r9, r1
     d46:	21 2c       	mov	r2, r1
     d48:	31 2c       	mov	r3, r1
     d4a:	ff e1       	ldi	r31, 0x1F	; 31
     d4c:	f3 15       	cp	r31, r3
     d4e:	d8 f0       	brcs	.+54     	; 0xd86 <vfprintf+0xbe>
     d50:	8b 32       	cpi	r24, 0x2B	; 43
     d52:	79 f0       	breq	.+30     	; 0xd72 <vfprintf+0xaa>
     d54:	38 f4       	brcc	.+14     	; 0xd64 <vfprintf+0x9c>
     d56:	80 32       	cpi	r24, 0x20	; 32
     d58:	79 f0       	breq	.+30     	; 0xd78 <vfprintf+0xb0>
     d5a:	83 32       	cpi	r24, 0x23	; 35
     d5c:	a1 f4       	brne	.+40     	; 0xd86 <vfprintf+0xbe>
     d5e:	23 2d       	mov	r18, r3
     d60:	20 61       	ori	r18, 0x10	; 16
     d62:	1d c0       	rjmp	.+58     	; 0xd9e <vfprintf+0xd6>
     d64:	8d 32       	cpi	r24, 0x2D	; 45
     d66:	61 f0       	breq	.+24     	; 0xd80 <vfprintf+0xb8>
     d68:	80 33       	cpi	r24, 0x30	; 48
     d6a:	69 f4       	brne	.+26     	; 0xd86 <vfprintf+0xbe>
     d6c:	23 2d       	mov	r18, r3
     d6e:	21 60       	ori	r18, 0x01	; 1
     d70:	16 c0       	rjmp	.+44     	; 0xd9e <vfprintf+0xd6>
     d72:	83 2d       	mov	r24, r3
     d74:	82 60       	ori	r24, 0x02	; 2
     d76:	38 2e       	mov	r3, r24
     d78:	e3 2d       	mov	r30, r3
     d7a:	e4 60       	ori	r30, 0x04	; 4
     d7c:	3e 2e       	mov	r3, r30
     d7e:	2a c0       	rjmp	.+84     	; 0xdd4 <vfprintf+0x10c>
     d80:	f3 2d       	mov	r31, r3
     d82:	f8 60       	ori	r31, 0x08	; 8
     d84:	1d c0       	rjmp	.+58     	; 0xdc0 <vfprintf+0xf8>
     d86:	37 fc       	sbrc	r3, 7
     d88:	2d c0       	rjmp	.+90     	; 0xde4 <vfprintf+0x11c>
     d8a:	20 ed       	ldi	r18, 0xD0	; 208
     d8c:	28 0f       	add	r18, r24
     d8e:	2a 30       	cpi	r18, 0x0A	; 10
     d90:	40 f0       	brcs	.+16     	; 0xda2 <vfprintf+0xda>
     d92:	8e 32       	cpi	r24, 0x2E	; 46
     d94:	b9 f4       	brne	.+46     	; 0xdc4 <vfprintf+0xfc>
     d96:	36 fc       	sbrc	r3, 6
     d98:	75 c1       	rjmp	.+746    	; 0x1084 <__DATA_REGION_LENGTH__+0x84>
     d9a:	23 2d       	mov	r18, r3
     d9c:	20 64       	ori	r18, 0x40	; 64
     d9e:	32 2e       	mov	r3, r18
     da0:	19 c0       	rjmp	.+50     	; 0xdd4 <vfprintf+0x10c>
     da2:	36 fe       	sbrs	r3, 6
     da4:	06 c0       	rjmp	.+12     	; 0xdb2 <vfprintf+0xea>
     da6:	8a e0       	ldi	r24, 0x0A	; 10
     da8:	98 9e       	mul	r9, r24
     daa:	20 0d       	add	r18, r0
     dac:	11 24       	eor	r1, r1
     dae:	92 2e       	mov	r9, r18
     db0:	11 c0       	rjmp	.+34     	; 0xdd4 <vfprintf+0x10c>
     db2:	ea e0       	ldi	r30, 0x0A	; 10
     db4:	2e 9e       	mul	r2, r30
     db6:	20 0d       	add	r18, r0
     db8:	11 24       	eor	r1, r1
     dba:	22 2e       	mov	r2, r18
     dbc:	f3 2d       	mov	r31, r3
     dbe:	f0 62       	ori	r31, 0x20	; 32
     dc0:	3f 2e       	mov	r3, r31
     dc2:	08 c0       	rjmp	.+16     	; 0xdd4 <vfprintf+0x10c>
     dc4:	8c 36       	cpi	r24, 0x6C	; 108
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <vfprintf+0x108>
     dc8:	83 2d       	mov	r24, r3
     dca:	80 68       	ori	r24, 0x80	; 128
     dcc:	38 2e       	mov	r3, r24
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <vfprintf+0x10c>
     dd0:	88 36       	cpi	r24, 0x68	; 104
     dd2:	41 f4       	brne	.+16     	; 0xde4 <vfprintf+0x11c>
     dd4:	f7 01       	movw	r30, r14
     dd6:	93 fd       	sbrc	r25, 3
     dd8:	85 91       	lpm	r24, Z+
     dda:	93 ff       	sbrs	r25, 3
     ddc:	81 91       	ld	r24, Z+
     dde:	7f 01       	movw	r14, r30
     de0:	81 11       	cpse	r24, r1
     de2:	b3 cf       	rjmp	.-154    	; 0xd4a <vfprintf+0x82>
     de4:	98 2f       	mov	r25, r24
     de6:	9f 7d       	andi	r25, 0xDF	; 223
     de8:	95 54       	subi	r25, 0x45	; 69
     dea:	93 30       	cpi	r25, 0x03	; 3
     dec:	28 f4       	brcc	.+10     	; 0xdf8 <vfprintf+0x130>
     dee:	0c 5f       	subi	r16, 0xFC	; 252
     df0:	1f 4f       	sbci	r17, 0xFF	; 255
     df2:	9f e3       	ldi	r25, 0x3F	; 63
     df4:	99 83       	std	Y+1, r25	; 0x01
     df6:	0d c0       	rjmp	.+26     	; 0xe12 <vfprintf+0x14a>
     df8:	83 36       	cpi	r24, 0x63	; 99
     dfa:	31 f0       	breq	.+12     	; 0xe08 <vfprintf+0x140>
     dfc:	83 37       	cpi	r24, 0x73	; 115
     dfe:	71 f0       	breq	.+28     	; 0xe1c <vfprintf+0x154>
     e00:	83 35       	cpi	r24, 0x53	; 83
     e02:	09 f0       	breq	.+2      	; 0xe06 <vfprintf+0x13e>
     e04:	55 c0       	rjmp	.+170    	; 0xeb0 <vfprintf+0x1e8>
     e06:	20 c0       	rjmp	.+64     	; 0xe48 <vfprintf+0x180>
     e08:	f8 01       	movw	r30, r16
     e0a:	80 81       	ld	r24, Z
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	0e 5f       	subi	r16, 0xFE	; 254
     e10:	1f 4f       	sbci	r17, 0xFF	; 255
     e12:	88 24       	eor	r8, r8
     e14:	83 94       	inc	r8
     e16:	91 2c       	mov	r9, r1
     e18:	53 01       	movw	r10, r6
     e1a:	12 c0       	rjmp	.+36     	; 0xe40 <vfprintf+0x178>
     e1c:	28 01       	movw	r4, r16
     e1e:	f2 e0       	ldi	r31, 0x02	; 2
     e20:	4f 0e       	add	r4, r31
     e22:	51 1c       	adc	r5, r1
     e24:	f8 01       	movw	r30, r16
     e26:	a0 80       	ld	r10, Z
     e28:	b1 80       	ldd	r11, Z+1	; 0x01
     e2a:	36 fe       	sbrs	r3, 6
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <vfprintf+0x16c>
     e2e:	69 2d       	mov	r22, r9
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <vfprintf+0x170>
     e34:	6f ef       	ldi	r22, 0xFF	; 255
     e36:	7f ef       	ldi	r23, 0xFF	; 255
     e38:	c5 01       	movw	r24, r10
     e3a:	4e d1       	rcall	.+668    	; 0x10d8 <strnlen>
     e3c:	4c 01       	movw	r8, r24
     e3e:	82 01       	movw	r16, r4
     e40:	f3 2d       	mov	r31, r3
     e42:	ff 77       	andi	r31, 0x7F	; 127
     e44:	3f 2e       	mov	r3, r31
     e46:	15 c0       	rjmp	.+42     	; 0xe72 <vfprintf+0x1aa>
     e48:	28 01       	movw	r4, r16
     e4a:	22 e0       	ldi	r18, 0x02	; 2
     e4c:	42 0e       	add	r4, r18
     e4e:	51 1c       	adc	r5, r1
     e50:	f8 01       	movw	r30, r16
     e52:	a0 80       	ld	r10, Z
     e54:	b1 80       	ldd	r11, Z+1	; 0x01
     e56:	36 fe       	sbrs	r3, 6
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <vfprintf+0x198>
     e5a:	69 2d       	mov	r22, r9
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <vfprintf+0x19c>
     e60:	6f ef       	ldi	r22, 0xFF	; 255
     e62:	7f ef       	ldi	r23, 0xFF	; 255
     e64:	c5 01       	movw	r24, r10
     e66:	2d d1       	rcall	.+602    	; 0x10c2 <strnlen_P>
     e68:	4c 01       	movw	r8, r24
     e6a:	f3 2d       	mov	r31, r3
     e6c:	f0 68       	ori	r31, 0x80	; 128
     e6e:	3f 2e       	mov	r3, r31
     e70:	82 01       	movw	r16, r4
     e72:	33 fc       	sbrc	r3, 3
     e74:	19 c0       	rjmp	.+50     	; 0xea8 <vfprintf+0x1e0>
     e76:	82 2d       	mov	r24, r2
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	88 16       	cp	r8, r24
     e7c:	99 06       	cpc	r9, r25
     e7e:	a0 f4       	brcc	.+40     	; 0xea8 <vfprintf+0x1e0>
     e80:	b6 01       	movw	r22, r12
     e82:	80 e2       	ldi	r24, 0x20	; 32
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	33 d1       	rcall	.+614    	; 0x10ee <fputc>
     e88:	2a 94       	dec	r2
     e8a:	f5 cf       	rjmp	.-22     	; 0xe76 <vfprintf+0x1ae>
     e8c:	f5 01       	movw	r30, r10
     e8e:	37 fc       	sbrc	r3, 7
     e90:	85 91       	lpm	r24, Z+
     e92:	37 fe       	sbrs	r3, 7
     e94:	81 91       	ld	r24, Z+
     e96:	5f 01       	movw	r10, r30
     e98:	b6 01       	movw	r22, r12
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	28 d1       	rcall	.+592    	; 0x10ee <fputc>
     e9e:	21 10       	cpse	r2, r1
     ea0:	2a 94       	dec	r2
     ea2:	21 e0       	ldi	r18, 0x01	; 1
     ea4:	82 1a       	sub	r8, r18
     ea6:	91 08       	sbc	r9, r1
     ea8:	81 14       	cp	r8, r1
     eaa:	91 04       	cpc	r9, r1
     eac:	79 f7       	brne	.-34     	; 0xe8c <vfprintf+0x1c4>
     eae:	e1 c0       	rjmp	.+450    	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
     eb0:	84 36       	cpi	r24, 0x64	; 100
     eb2:	11 f0       	breq	.+4      	; 0xeb8 <vfprintf+0x1f0>
     eb4:	89 36       	cpi	r24, 0x69	; 105
     eb6:	39 f5       	brne	.+78     	; 0xf06 <vfprintf+0x23e>
     eb8:	f8 01       	movw	r30, r16
     eba:	37 fe       	sbrs	r3, 7
     ebc:	07 c0       	rjmp	.+14     	; 0xecc <vfprintf+0x204>
     ebe:	60 81       	ld	r22, Z
     ec0:	71 81       	ldd	r23, Z+1	; 0x01
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	93 81       	ldd	r25, Z+3	; 0x03
     ec6:	0c 5f       	subi	r16, 0xFC	; 252
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
     eca:	08 c0       	rjmp	.+16     	; 0xedc <vfprintf+0x214>
     ecc:	60 81       	ld	r22, Z
     ece:	71 81       	ldd	r23, Z+1	; 0x01
     ed0:	07 2e       	mov	r0, r23
     ed2:	00 0c       	add	r0, r0
     ed4:	88 0b       	sbc	r24, r24
     ed6:	99 0b       	sbc	r25, r25
     ed8:	0e 5f       	subi	r16, 0xFE	; 254
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	f3 2d       	mov	r31, r3
     ede:	ff 76       	andi	r31, 0x6F	; 111
     ee0:	3f 2e       	mov	r3, r31
     ee2:	97 ff       	sbrs	r25, 7
     ee4:	09 c0       	rjmp	.+18     	; 0xef8 <vfprintf+0x230>
     ee6:	90 95       	com	r25
     ee8:	80 95       	com	r24
     eea:	70 95       	com	r23
     eec:	61 95       	neg	r22
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	8f 4f       	sbci	r24, 0xFF	; 255
     ef2:	9f 4f       	sbci	r25, 0xFF	; 255
     ef4:	f0 68       	ori	r31, 0x80	; 128
     ef6:	3f 2e       	mov	r3, r31
     ef8:	2a e0       	ldi	r18, 0x0A	; 10
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	a3 01       	movw	r20, r6
     efe:	33 d1       	rcall	.+614    	; 0x1166 <__ultoa_invert>
     f00:	88 2e       	mov	r8, r24
     f02:	86 18       	sub	r8, r6
     f04:	44 c0       	rjmp	.+136    	; 0xf8e <vfprintf+0x2c6>
     f06:	85 37       	cpi	r24, 0x75	; 117
     f08:	31 f4       	brne	.+12     	; 0xf16 <vfprintf+0x24e>
     f0a:	23 2d       	mov	r18, r3
     f0c:	2f 7e       	andi	r18, 0xEF	; 239
     f0e:	b2 2e       	mov	r11, r18
     f10:	2a e0       	ldi	r18, 0x0A	; 10
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	25 c0       	rjmp	.+74     	; 0xf60 <vfprintf+0x298>
     f16:	93 2d       	mov	r25, r3
     f18:	99 7f       	andi	r25, 0xF9	; 249
     f1a:	b9 2e       	mov	r11, r25
     f1c:	8f 36       	cpi	r24, 0x6F	; 111
     f1e:	c1 f0       	breq	.+48     	; 0xf50 <vfprintf+0x288>
     f20:	18 f4       	brcc	.+6      	; 0xf28 <vfprintf+0x260>
     f22:	88 35       	cpi	r24, 0x58	; 88
     f24:	79 f0       	breq	.+30     	; 0xf44 <vfprintf+0x27c>
     f26:	ae c0       	rjmp	.+348    	; 0x1084 <__DATA_REGION_LENGTH__+0x84>
     f28:	80 37       	cpi	r24, 0x70	; 112
     f2a:	19 f0       	breq	.+6      	; 0xf32 <vfprintf+0x26a>
     f2c:	88 37       	cpi	r24, 0x78	; 120
     f2e:	21 f0       	breq	.+8      	; 0xf38 <vfprintf+0x270>
     f30:	a9 c0       	rjmp	.+338    	; 0x1084 <__DATA_REGION_LENGTH__+0x84>
     f32:	e9 2f       	mov	r30, r25
     f34:	e0 61       	ori	r30, 0x10	; 16
     f36:	be 2e       	mov	r11, r30
     f38:	b4 fe       	sbrs	r11, 4
     f3a:	0d c0       	rjmp	.+26     	; 0xf56 <vfprintf+0x28e>
     f3c:	fb 2d       	mov	r31, r11
     f3e:	f4 60       	ori	r31, 0x04	; 4
     f40:	bf 2e       	mov	r11, r31
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <vfprintf+0x28e>
     f44:	34 fe       	sbrs	r3, 4
     f46:	0a c0       	rjmp	.+20     	; 0xf5c <vfprintf+0x294>
     f48:	29 2f       	mov	r18, r25
     f4a:	26 60       	ori	r18, 0x06	; 6
     f4c:	b2 2e       	mov	r11, r18
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <vfprintf+0x294>
     f50:	28 e0       	ldi	r18, 0x08	; 8
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	05 c0       	rjmp	.+10     	; 0xf60 <vfprintf+0x298>
     f56:	20 e1       	ldi	r18, 0x10	; 16
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <vfprintf+0x298>
     f5c:	20 e1       	ldi	r18, 0x10	; 16
     f5e:	32 e0       	ldi	r19, 0x02	; 2
     f60:	f8 01       	movw	r30, r16
     f62:	b7 fe       	sbrs	r11, 7
     f64:	07 c0       	rjmp	.+14     	; 0xf74 <vfprintf+0x2ac>
     f66:	60 81       	ld	r22, Z
     f68:	71 81       	ldd	r23, Z+1	; 0x01
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	0c 5f       	subi	r16, 0xFC	; 252
     f70:	1f 4f       	sbci	r17, 0xFF	; 255
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <vfprintf+0x2b8>
     f74:	60 81       	ld	r22, Z
     f76:	71 81       	ldd	r23, Z+1	; 0x01
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 5f       	subi	r16, 0xFE	; 254
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	a3 01       	movw	r20, r6
     f82:	f1 d0       	rcall	.+482    	; 0x1166 <__ultoa_invert>
     f84:	88 2e       	mov	r8, r24
     f86:	86 18       	sub	r8, r6
     f88:	fb 2d       	mov	r31, r11
     f8a:	ff 77       	andi	r31, 0x7F	; 127
     f8c:	3f 2e       	mov	r3, r31
     f8e:	36 fe       	sbrs	r3, 6
     f90:	0d c0       	rjmp	.+26     	; 0xfac <vfprintf+0x2e4>
     f92:	23 2d       	mov	r18, r3
     f94:	2e 7f       	andi	r18, 0xFE	; 254
     f96:	a2 2e       	mov	r10, r18
     f98:	89 14       	cp	r8, r9
     f9a:	58 f4       	brcc	.+22     	; 0xfb2 <vfprintf+0x2ea>
     f9c:	34 fe       	sbrs	r3, 4
     f9e:	0b c0       	rjmp	.+22     	; 0xfb6 <vfprintf+0x2ee>
     fa0:	32 fc       	sbrc	r3, 2
     fa2:	09 c0       	rjmp	.+18     	; 0xfb6 <vfprintf+0x2ee>
     fa4:	83 2d       	mov	r24, r3
     fa6:	8e 7e       	andi	r24, 0xEE	; 238
     fa8:	a8 2e       	mov	r10, r24
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <vfprintf+0x2ee>
     fac:	b8 2c       	mov	r11, r8
     fae:	a3 2c       	mov	r10, r3
     fb0:	03 c0       	rjmp	.+6      	; 0xfb8 <vfprintf+0x2f0>
     fb2:	b8 2c       	mov	r11, r8
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <vfprintf+0x2f0>
     fb6:	b9 2c       	mov	r11, r9
     fb8:	a4 fe       	sbrs	r10, 4
     fba:	0f c0       	rjmp	.+30     	; 0xfda <vfprintf+0x312>
     fbc:	fe 01       	movw	r30, r28
     fbe:	e8 0d       	add	r30, r8
     fc0:	f1 1d       	adc	r31, r1
     fc2:	80 81       	ld	r24, Z
     fc4:	80 33       	cpi	r24, 0x30	; 48
     fc6:	21 f4       	brne	.+8      	; 0xfd0 <vfprintf+0x308>
     fc8:	9a 2d       	mov	r25, r10
     fca:	99 7e       	andi	r25, 0xE9	; 233
     fcc:	a9 2e       	mov	r10, r25
     fce:	09 c0       	rjmp	.+18     	; 0xfe2 <vfprintf+0x31a>
     fd0:	a2 fe       	sbrs	r10, 2
     fd2:	06 c0       	rjmp	.+12     	; 0xfe0 <vfprintf+0x318>
     fd4:	b3 94       	inc	r11
     fd6:	b3 94       	inc	r11
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <vfprintf+0x31a>
     fda:	8a 2d       	mov	r24, r10
     fdc:	86 78       	andi	r24, 0x86	; 134
     fde:	09 f0       	breq	.+2      	; 0xfe2 <vfprintf+0x31a>
     fe0:	b3 94       	inc	r11
     fe2:	a3 fc       	sbrc	r10, 3
     fe4:	10 c0       	rjmp	.+32     	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
     fe6:	a0 fe       	sbrs	r10, 0
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <vfprintf+0x32e>
     fea:	b2 14       	cp	r11, r2
     fec:	80 f4       	brcc	.+32     	; 0x100e <__DATA_REGION_LENGTH__+0xe>
     fee:	28 0c       	add	r2, r8
     ff0:	92 2c       	mov	r9, r2
     ff2:	9b 18       	sub	r9, r11
     ff4:	0d c0       	rjmp	.+26     	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
     ff6:	b2 14       	cp	r11, r2
     ff8:	58 f4       	brcc	.+22     	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
     ffa:	b6 01       	movw	r22, r12
     ffc:	80 e2       	ldi	r24, 0x20	; 32
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	76 d0       	rcall	.+236    	; 0x10ee <fputc>
    1002:	b3 94       	inc	r11
    1004:	f8 cf       	rjmp	.-16     	; 0xff6 <vfprintf+0x32e>
    1006:	b2 14       	cp	r11, r2
    1008:	18 f4       	brcc	.+6      	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
    100a:	2b 18       	sub	r2, r11
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <__DATA_REGION_LENGTH__+0x12>
    100e:	98 2c       	mov	r9, r8
    1010:	21 2c       	mov	r2, r1
    1012:	a4 fe       	sbrs	r10, 4
    1014:	0f c0       	rjmp	.+30     	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
    1016:	b6 01       	movw	r22, r12
    1018:	80 e3       	ldi	r24, 0x30	; 48
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	68 d0       	rcall	.+208    	; 0x10ee <fputc>
    101e:	a2 fe       	sbrs	r10, 2
    1020:	16 c0       	rjmp	.+44     	; 0x104e <__DATA_REGION_LENGTH__+0x4e>
    1022:	a1 fc       	sbrc	r10, 1
    1024:	03 c0       	rjmp	.+6      	; 0x102c <__DATA_REGION_LENGTH__+0x2c>
    1026:	88 e7       	ldi	r24, 0x78	; 120
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
    102c:	88 e5       	ldi	r24, 0x58	; 88
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	b6 01       	movw	r22, r12
    1032:	0c c0       	rjmp	.+24     	; 0x104c <__DATA_REGION_LENGTH__+0x4c>
    1034:	8a 2d       	mov	r24, r10
    1036:	86 78       	andi	r24, 0x86	; 134
    1038:	51 f0       	breq	.+20     	; 0x104e <__DATA_REGION_LENGTH__+0x4e>
    103a:	a1 fe       	sbrs	r10, 1
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <__DATA_REGION_LENGTH__+0x42>
    103e:	8b e2       	ldi	r24, 0x2B	; 43
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <__DATA_REGION_LENGTH__+0x44>
    1042:	80 e2       	ldi	r24, 0x20	; 32
    1044:	a7 fc       	sbrc	r10, 7
    1046:	8d e2       	ldi	r24, 0x2D	; 45
    1048:	b6 01       	movw	r22, r12
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	50 d0       	rcall	.+160    	; 0x10ee <fputc>
    104e:	89 14       	cp	r8, r9
    1050:	30 f4       	brcc	.+12     	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
    1052:	b6 01       	movw	r22, r12
    1054:	80 e3       	ldi	r24, 0x30	; 48
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	4a d0       	rcall	.+148    	; 0x10ee <fputc>
    105a:	9a 94       	dec	r9
    105c:	f8 cf       	rjmp	.-16     	; 0x104e <__DATA_REGION_LENGTH__+0x4e>
    105e:	8a 94       	dec	r8
    1060:	f3 01       	movw	r30, r6
    1062:	e8 0d       	add	r30, r8
    1064:	f1 1d       	adc	r31, r1
    1066:	80 81       	ld	r24, Z
    1068:	b6 01       	movw	r22, r12
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	40 d0       	rcall	.+128    	; 0x10ee <fputc>
    106e:	81 10       	cpse	r8, r1
    1070:	f6 cf       	rjmp	.-20     	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
    1072:	22 20       	and	r2, r2
    1074:	09 f4       	brne	.+2      	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
    1076:	4e ce       	rjmp	.-868    	; 0xd14 <vfprintf+0x4c>
    1078:	b6 01       	movw	r22, r12
    107a:	80 e2       	ldi	r24, 0x20	; 32
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	37 d0       	rcall	.+110    	; 0x10ee <fputc>
    1080:	2a 94       	dec	r2
    1082:	f7 cf       	rjmp	.-18     	; 0x1072 <__DATA_REGION_LENGTH__+0x72>
    1084:	f6 01       	movw	r30, r12
    1086:	86 81       	ldd	r24, Z+6	; 0x06
    1088:	97 81       	ldd	r25, Z+7	; 0x07
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <__DATA_REGION_LENGTH__+0x90>
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	9f ef       	ldi	r25, 0xFF	; 255
    1090:	2b 96       	adiw	r28, 0x0b	; 11
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	af 90       	pop	r10
    10b0:	9f 90       	pop	r9
    10b2:	8f 90       	pop	r8
    10b4:	7f 90       	pop	r7
    10b6:	6f 90       	pop	r6
    10b8:	5f 90       	pop	r5
    10ba:	4f 90       	pop	r4
    10bc:	3f 90       	pop	r3
    10be:	2f 90       	pop	r2
    10c0:	08 95       	ret

000010c2 <strnlen_P>:
    10c2:	fc 01       	movw	r30, r24
    10c4:	05 90       	lpm	r0, Z+
    10c6:	61 50       	subi	r22, 0x01	; 1
    10c8:	70 40       	sbci	r23, 0x00	; 0
    10ca:	01 10       	cpse	r0, r1
    10cc:	d8 f7       	brcc	.-10     	; 0x10c4 <strnlen_P+0x2>
    10ce:	80 95       	com	r24
    10d0:	90 95       	com	r25
    10d2:	8e 0f       	add	r24, r30
    10d4:	9f 1f       	adc	r25, r31
    10d6:	08 95       	ret

000010d8 <strnlen>:
    10d8:	fc 01       	movw	r30, r24
    10da:	61 50       	subi	r22, 0x01	; 1
    10dc:	70 40       	sbci	r23, 0x00	; 0
    10de:	01 90       	ld	r0, Z+
    10e0:	01 10       	cpse	r0, r1
    10e2:	d8 f7       	brcc	.-10     	; 0x10da <strnlen+0x2>
    10e4:	80 95       	com	r24
    10e6:	90 95       	com	r25
    10e8:	8e 0f       	add	r24, r30
    10ea:	9f 1f       	adc	r25, r31
    10ec:	08 95       	ret

000010ee <fputc>:
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	fb 01       	movw	r30, r22
    10f8:	23 81       	ldd	r18, Z+3	; 0x03
    10fa:	21 fd       	sbrc	r18, 1
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <__stack+0x5>
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	9f ef       	ldi	r25, 0xFF	; 255
    1102:	2c c0       	rjmp	.+88     	; 0x115c <__stack+0x5d>
    1104:	22 ff       	sbrs	r18, 2
    1106:	16 c0       	rjmp	.+44     	; 0x1134 <__stack+0x35>
    1108:	46 81       	ldd	r20, Z+6	; 0x06
    110a:	57 81       	ldd	r21, Z+7	; 0x07
    110c:	24 81       	ldd	r18, Z+4	; 0x04
    110e:	35 81       	ldd	r19, Z+5	; 0x05
    1110:	42 17       	cp	r20, r18
    1112:	53 07       	cpc	r21, r19
    1114:	44 f4       	brge	.+16     	; 0x1126 <__stack+0x27>
    1116:	a0 81       	ld	r26, Z
    1118:	b1 81       	ldd	r27, Z+1	; 0x01
    111a:	9d 01       	movw	r18, r26
    111c:	2f 5f       	subi	r18, 0xFF	; 255
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	31 83       	std	Z+1, r19	; 0x01
    1122:	20 83       	st	Z, r18
    1124:	8c 93       	st	X, r24
    1126:	26 81       	ldd	r18, Z+6	; 0x06
    1128:	37 81       	ldd	r19, Z+7	; 0x07
    112a:	2f 5f       	subi	r18, 0xFF	; 255
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
    112e:	37 83       	std	Z+7, r19	; 0x07
    1130:	26 83       	std	Z+6, r18	; 0x06
    1132:	14 c0       	rjmp	.+40     	; 0x115c <__stack+0x5d>
    1134:	8b 01       	movw	r16, r22
    1136:	ec 01       	movw	r28, r24
    1138:	fb 01       	movw	r30, r22
    113a:	00 84       	ldd	r0, Z+8	; 0x08
    113c:	f1 85       	ldd	r31, Z+9	; 0x09
    113e:	e0 2d       	mov	r30, r0
    1140:	09 95       	icall
    1142:	89 2b       	or	r24, r25
    1144:	e1 f6       	brne	.-72     	; 0x10fe <fputc+0x10>
    1146:	d8 01       	movw	r26, r16
    1148:	16 96       	adiw	r26, 0x06	; 6
    114a:	8d 91       	ld	r24, X+
    114c:	9c 91       	ld	r25, X
    114e:	17 97       	sbiw	r26, 0x07	; 7
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	17 96       	adiw	r26, 0x07	; 7
    1154:	9c 93       	st	X, r25
    1156:	8e 93       	st	-X, r24
    1158:	16 97       	sbiw	r26, 0x06	; 6
    115a:	ce 01       	movw	r24, r28
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	08 95       	ret

00001166 <__ultoa_invert>:
    1166:	fa 01       	movw	r30, r20
    1168:	aa 27       	eor	r26, r26
    116a:	28 30       	cpi	r18, 0x08	; 8
    116c:	51 f1       	breq	.+84     	; 0x11c2 <__ultoa_invert+0x5c>
    116e:	20 31       	cpi	r18, 0x10	; 16
    1170:	81 f1       	breq	.+96     	; 0x11d2 <__ultoa_invert+0x6c>
    1172:	e8 94       	clt
    1174:	6f 93       	push	r22
    1176:	6e 7f       	andi	r22, 0xFE	; 254
    1178:	6e 5f       	subi	r22, 0xFE	; 254
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	8f 4f       	sbci	r24, 0xFF	; 255
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	af 4f       	sbci	r26, 0xFF	; 255
    1182:	b1 e0       	ldi	r27, 0x01	; 1
    1184:	3e d0       	rcall	.+124    	; 0x1202 <__ultoa_invert+0x9c>
    1186:	b4 e0       	ldi	r27, 0x04	; 4
    1188:	3c d0       	rcall	.+120    	; 0x1202 <__ultoa_invert+0x9c>
    118a:	67 0f       	add	r22, r23
    118c:	78 1f       	adc	r23, r24
    118e:	89 1f       	adc	r24, r25
    1190:	9a 1f       	adc	r25, r26
    1192:	a1 1d       	adc	r26, r1
    1194:	68 0f       	add	r22, r24
    1196:	79 1f       	adc	r23, r25
    1198:	8a 1f       	adc	r24, r26
    119a:	91 1d       	adc	r25, r1
    119c:	a1 1d       	adc	r26, r1
    119e:	6a 0f       	add	r22, r26
    11a0:	71 1d       	adc	r23, r1
    11a2:	81 1d       	adc	r24, r1
    11a4:	91 1d       	adc	r25, r1
    11a6:	a1 1d       	adc	r26, r1
    11a8:	20 d0       	rcall	.+64     	; 0x11ea <__ultoa_invert+0x84>
    11aa:	09 f4       	brne	.+2      	; 0x11ae <__ultoa_invert+0x48>
    11ac:	68 94       	set
    11ae:	3f 91       	pop	r19
    11b0:	2a e0       	ldi	r18, 0x0A	; 10
    11b2:	26 9f       	mul	r18, r22
    11b4:	11 24       	eor	r1, r1
    11b6:	30 19       	sub	r19, r0
    11b8:	30 5d       	subi	r19, 0xD0	; 208
    11ba:	31 93       	st	Z+, r19
    11bc:	de f6       	brtc	.-74     	; 0x1174 <__ultoa_invert+0xe>
    11be:	cf 01       	movw	r24, r30
    11c0:	08 95       	ret
    11c2:	46 2f       	mov	r20, r22
    11c4:	47 70       	andi	r20, 0x07	; 7
    11c6:	40 5d       	subi	r20, 0xD0	; 208
    11c8:	41 93       	st	Z+, r20
    11ca:	b3 e0       	ldi	r27, 0x03	; 3
    11cc:	0f d0       	rcall	.+30     	; 0x11ec <__ultoa_invert+0x86>
    11ce:	c9 f7       	brne	.-14     	; 0x11c2 <__ultoa_invert+0x5c>
    11d0:	f6 cf       	rjmp	.-20     	; 0x11be <__ultoa_invert+0x58>
    11d2:	46 2f       	mov	r20, r22
    11d4:	4f 70       	andi	r20, 0x0F	; 15
    11d6:	40 5d       	subi	r20, 0xD0	; 208
    11d8:	4a 33       	cpi	r20, 0x3A	; 58
    11da:	18 f0       	brcs	.+6      	; 0x11e2 <__ultoa_invert+0x7c>
    11dc:	49 5d       	subi	r20, 0xD9	; 217
    11de:	31 fd       	sbrc	r19, 1
    11e0:	40 52       	subi	r20, 0x20	; 32
    11e2:	41 93       	st	Z+, r20
    11e4:	02 d0       	rcall	.+4      	; 0x11ea <__ultoa_invert+0x84>
    11e6:	a9 f7       	brne	.-22     	; 0x11d2 <__ultoa_invert+0x6c>
    11e8:	ea cf       	rjmp	.-44     	; 0x11be <__ultoa_invert+0x58>
    11ea:	b4 e0       	ldi	r27, 0x04	; 4
    11ec:	a6 95       	lsr	r26
    11ee:	97 95       	ror	r25
    11f0:	87 95       	ror	r24
    11f2:	77 95       	ror	r23
    11f4:	67 95       	ror	r22
    11f6:	ba 95       	dec	r27
    11f8:	c9 f7       	brne	.-14     	; 0x11ec <__ultoa_invert+0x86>
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	61 05       	cpc	r22, r1
    11fe:	71 05       	cpc	r23, r1
    1200:	08 95       	ret
    1202:	9b 01       	movw	r18, r22
    1204:	ac 01       	movw	r20, r24
    1206:	0a 2e       	mov	r0, r26
    1208:	06 94       	lsr	r0
    120a:	57 95       	ror	r21
    120c:	47 95       	ror	r20
    120e:	37 95       	ror	r19
    1210:	27 95       	ror	r18
    1212:	ba 95       	dec	r27
    1214:	c9 f7       	brne	.-14     	; 0x1208 <__ultoa_invert+0xa2>
    1216:	62 0f       	add	r22, r18
    1218:	73 1f       	adc	r23, r19
    121a:	84 1f       	adc	r24, r20
    121c:	95 1f       	adc	r25, r21
    121e:	a0 1d       	adc	r26, r0
    1220:	08 95       	ret

00001222 <_exit>:
    1222:	f8 94       	cli

00001224 <__stop_program>:
    1224:	ff cf       	rjmp	.-2      	; 0x1224 <__stop_program>
