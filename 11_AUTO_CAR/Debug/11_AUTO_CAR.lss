
11_AUTO_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000015c2  00001656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000066f  00800152  00800152  000016a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b90  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e9  00000000  00000000  000034bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fbf  00000000  00000000  000045a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d0  00000000  00000000  00005564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007df  00000000  00000000  00005a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a95  00000000  00000000  00006213  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00006ca8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	77 c0       	rjmp	.+238    	; 0xf0 <__ctors_end>
       2:	00 00       	nop
       4:	93 c0       	rjmp	.+294    	; 0x12c <__bad_interrupt>
       6:	00 00       	nop
       8:	91 c0       	rjmp	.+290    	; 0x12c <__bad_interrupt>
       a:	00 00       	nop
       c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	a4 c4       	rjmp	.+2376   	; 0x95e <__vector_5>
      16:	00 00       	nop
      18:	ef c4       	rjmp	.+2526   	; 0x9f8 <__vector_6>
      1a:	00 00       	nop
      1c:	3a c5       	rjmp	.+2676   	; 0xa92 <__vector_7>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	77 c0       	rjmp	.+238    	; 0x12c <__bad_interrupt>
      3e:	00 00       	nop
      40:	e9 c1       	rjmp	.+978    	; 0x414 <__vector_16>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	b5 c3       	rjmp	.+1898   	; 0x7b4 <__vector_18>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	6b c0       	rjmp	.+214    	; 0x12c <__bad_interrupt>
      56:	00 00       	nop
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	63 c0       	rjmp	.+198    	; 0x12c <__bad_interrupt>
      66:	00 00       	nop
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c4       	rjmp	.+2142   	; 0x8d8 <__vector_30>
      7a:	00 00       	nop
      7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f6 01       	movw	r30, r12
      8e:	03 02       	muls	r16, r19
      90:	03 02       	muls	r16, r19
      92:	03 02       	muls	r16, r19
      94:	f2 01       	movw	r30, r4
      96:	03 02       	muls	r16, r19
      98:	03 02       	muls	r16, r19
      9a:	03 02       	muls	r16, r19
      9c:	03 02       	muls	r16, r19
      9e:	03 02       	muls	r16, r19
      a0:	fa 01       	movw	r30, r20
      a2:	03 02       	muls	r16, r19
      a4:	03 02       	muls	r16, r19
      a6:	03 02       	muls	r16, r19
      a8:	03 02       	muls	r16, r19
      aa:	03 02       	muls	r16, r19
      ac:	fe 01       	movw	r30, r28
      ae:	02 02       	muls	r16, r18
      b0:	03 02       	muls	r16, r19
      b2:	03 02       	muls	r16, r19
      b4:	03 02       	muls	r16, r19
      b6:	03 02       	muls	r16, r19
      b8:	03 02       	muls	r16, r19
      ba:	03 02       	muls	r16, r19
      bc:	03 02       	muls	r16, r19
      be:	03 02       	muls	r16, r19
      c0:	03 02       	muls	r16, r19
      c2:	03 02       	muls	r16, r19
      c4:	03 02       	muls	r16, r19
      c6:	03 02       	muls	r16, r19
      c8:	03 02       	muls	r16, r19
      ca:	03 02       	muls	r16, r19
      cc:	f6 01       	movw	r30, r12
      ce:	03 02       	muls	r16, r19
      d0:	03 02       	muls	r16, r19
      d2:	03 02       	muls	r16, r19
      d4:	f2 01       	movw	r30, r4
      d6:	03 02       	muls	r16, r19
      d8:	03 02       	muls	r16, r19
      da:	03 02       	muls	r16, r19
      dc:	03 02       	muls	r16, r19
      de:	03 02       	muls	r16, r19
      e0:	fa 01       	movw	r30, r20
      e2:	03 02       	muls	r16, r19
      e4:	03 02       	muls	r16, r19
      e6:	03 02       	muls	r16, r19
      e8:	03 02       	muls	r16, r19
      ea:	03 02       	muls	r16, r19
      ec:	fe 01       	movw	r30, r28
      ee:	02 02       	muls	r16, r18

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d0 e1       	ldi	r29, 0x10	; 16
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	11 e0       	ldi	r17, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	e2 ec       	ldi	r30, 0xC2	; 194
     104:	f5 e1       	ldi	r31, 0x15	; 21
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0b bf       	out	0x3b, r16	; 59
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x14>
     10c:	07 90       	elpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	a2 35       	cpi	r26, 0x52	; 82
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0x10>

00000116 <__do_clear_bss>:
     116:	27 e0       	ldi	r18, 0x07	; 7
     118:	a2 e5       	ldi	r26, 0x52	; 82
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	a1 3c       	cpi	r26, 0xC1	; 193
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	df d1       	rcall	.+958    	; 0x4e6 <main>
     128:	0c 94 df 0a 	jmp	0x15be	; 0x15be <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <init_button>:

int button0_state = 0;

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN /*| 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN*/);
     12e:	8a b3       	in	r24, 0x1a	; 26
     130:	8f 7b       	andi	r24, 0xBF	; 191
     132:	8a bb       	out	0x1a, r24	; 26
     134:	08 95       	ret

00000136 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE/*, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE*/}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
     136:	29 b3       	in	r18, 0x19	; 25
     138:	42 2f       	mov	r20, r18
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	02 c0       	rjmp	.+4      	; 0x146 <get_button+0x10>
     142:	22 0f       	add	r18, r18
     144:	33 1f       	adc	r19, r19
     146:	6a 95       	dec	r22
     148:	e2 f7       	brpl	.-8      	; 0x142 <get_button+0xc>
     14a:	24 23       	and	r18, r20
     14c:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
     14e:	21 15       	cp	r18, r1
     150:	31 05       	cpc	r19, r1
     152:	b9 f0       	breq	.+46     	; 0x182 <get_button+0x4c>
     154:	fc 01       	movw	r30, r24
     156:	ee 5a       	subi	r30, 0xAE	; 174
     158:	fe 4f       	sbci	r31, 0xFE	; 254
     15a:	40 81       	ld	r20, Z
     15c:	41 11       	cpse	r20, r1
     15e:	11 c0       	rjmp	.+34     	; 0x182 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     160:	2f ef       	ldi	r18, 0xFF	; 255
     162:	3d ee       	ldi	r19, 0xED	; 237
     164:	42 e0       	ldi	r20, 0x02	; 2
     166:	21 50       	subi	r18, 0x01	; 1
     168:	30 40       	sbci	r19, 0x00	; 0
     16a:	40 40       	sbci	r20, 0x00	; 0
     16c:	e1 f7       	brne	.-8      	; 0x166 <get_button+0x30>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <get_button+0x3a>
     170:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     172:	fc 01       	movw	r30, r24
     174:	ee 5a       	subi	r30, 0xAE	; 174
     176:	fe 4f       	sbci	r31, 0xFE	; 254
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     182:	fc 01       	movw	r30, r24
     184:	ee 5a       	subi	r30, 0xAE	; 174
     186:	fe 4f       	sbci	r31, 0xFE	; 254
     188:	40 81       	ld	r20, Z
     18a:	41 30       	cpi	r20, 0x01	; 1
     18c:	91 f4       	brne	.+36     	; 0x1b2 <get_button+0x7c>
     18e:	23 2b       	or	r18, r19
     190:	99 f4       	brne	.+38     	; 0x1b8 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     192:	fc 01       	movw	r30, r24
     194:	ee 5a       	subi	r30, 0xAE	; 174
     196:	fe 4f       	sbci	r31, 0xFE	; 254
     198:	10 82       	st	Z, r1
     19a:	8f ef       	ldi	r24, 0xFF	; 255
     19c:	9d ee       	ldi	r25, 0xED	; 237
     19e:	22 e0       	ldi	r18, 0x02	; 2
     1a0:	81 50       	subi	r24, 0x01	; 1
     1a2:	90 40       	sbci	r25, 0x00	; 0
     1a4:	20 40       	sbci	r18, 0x00	; 0
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <get_button+0x6a>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <get_button+0x74>
     1aa:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	08 95       	ret
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
}
     1bc:	08 95       	ret

000001be <auto_mode_check>:

void auto_mode_check(void)
{
	if (get_button(BUTTON0, BUTTON0PIN))
     1be:	66 e0       	ldi	r22, 0x06	; 6
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	b7 df       	rcall	.-146    	; 0x136 <get_button>
     1c8:	89 2b       	or	r24, r25
     1ca:	71 f0       	breq	.+28     	; 0x1e8 <auto_mode_check+0x2a>
	{
		button0_state = !button0_state;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <button0_state>
     1d4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <button0_state+0x1>
     1d8:	23 2b       	or	r18, r19
     1da:	11 f0       	breq	.+4      	; 0x1e0 <auto_mode_check+0x22>
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <button0_state+0x1>
     1e4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <button0_state>
	}
	
	if (button0_state)
     1e8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <button0_state>
     1ec:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <button0_state+0x1>
     1f0:	89 2b       	or	r24, r25
     1f2:	39 f0       	breq	.+14     	; 0x202 <auto_mode_check+0x44>
	{
		AUTO_RUN_LED_PORT |= 1 << AUTO_RUN_LED_PIN; // LED ON
     1f4:	e5 e6       	ldi	r30, 0x65	; 101
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	88 60       	ori	r24, 0x08	; 8
		auto_start();
     1fc:	80 83       	st	Z, r24
     1fe:	fa d1       	rcall	.+1012   	; 0x5f4 <auto_start>
     200:	06 c0       	rjmp	.+12     	; 0x20e <auto_mode_check+0x50>
	}
	else
	{
		AUTO_RUN_LED_PORT &= ~(1 << AUTO_RUN_LED_PIN); // LED OFF
     202:	e5 e6       	ldi	r30, 0x65	; 101
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	80 81       	ld	r24, Z
     208:	87 7f       	andi	r24, 0xF7	; 247
		stop();
     20a:	80 83       	st	Z, r24
     20c:	e6 d1       	rcall	.+972    	; 0x5da <stop>
	}
	func_state = AUTO_MODE;
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <func_state+0x1>
     216:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <func_state>
     21a:	08 95       	ret

0000021c <init_fnd>:
				state_mod = 0;
			}
		}
		
		fp_clock[state_mod]();
	}
     21c:	8f ef       	ldi	r24, 0xFF	; 255
     21e:	84 bb       	out	0x14, r24	; 20
     220:	e1 e6       	ldi	r30, 0x61	; 97
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	80 6f       	ori	r24, 0xF0	; 240
     228:	80 83       	st	Z, r24
     22a:	15 ba       	out	0x15, r1	; 21
     22c:	08 95       	ret

0000022e <fnd_display>:
}



void fnd_display(int *run_state)
{
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	2f 97       	sbiw	r28, 0x0f	; 15
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
     242:	ac 01       	movw	r20, r24
						  // 0      1      2      3      4      5      6      7      8      9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f
     244:	9f e0       	ldi	r25, 0x0F	; 15
     246:	e6 e1       	ldi	r30, 0x16	; 22
     248:	f1 e0       	ldi	r31, 0x01	; 1
     24a:	de 01       	movw	r26, r28
     24c:	11 96       	adiw	r26, 0x01	; 1
     24e:	01 90       	ld	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	9a 95       	dec	r25
     254:	e1 f7       	brne	.-8      	; 0x24e <fnd_display+0x20>
		, ~0x82, ~0xc7, ~0xe0, ~0x83
		};

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     256:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <digit_select.1776>
     25a:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <digit_select.1776+0x1>
     25e:	21 30       	cpi	r18, 0x01	; 1
     260:	31 05       	cpc	r19, r1
     262:	31 f1       	breq	.+76     	; 0x2b0 <fnd_display+0x82>
     264:	1c f4       	brge	.+6      	; 0x26c <fnd_display+0x3e>
     266:	23 2b       	or	r18, r19
     268:	51 f0       	breq	.+20     	; 0x27e <fnd_display+0x50>
     26a:	8a c0       	rjmp	.+276    	; 0x380 <fnd_display+0x152>
     26c:	22 30       	cpi	r18, 0x02	; 2
     26e:	31 05       	cpc	r19, r1
     270:	09 f4       	brne	.+2      	; 0x274 <fnd_display+0x46>
     272:	3e c0       	rjmp	.+124    	; 0x2f0 <fnd_display+0xc2>
     274:	23 30       	cpi	r18, 0x03	; 3
     276:	31 05       	cpc	r19, r1
     278:	09 f4       	brne	.+2      	; 0x27c <fnd_display+0x4e>
     27a:	73 c0       	rjmp	.+230    	; 0x362 <fnd_display+0x134>
     27c:	81 c0       	rjmp	.+258    	; 0x380 <fnd_display+0x152>
	{
		case 0 :

			FND_DIGIT_PORT = ~0x80;
     27e:	8f e7       	ldi	r24, 0x7F	; 127
     280:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     284:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <sec_count>
     288:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <sec_count+0x1>
     28c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sec_count+0x2>
     290:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sec_count+0x3>
     294:	2a e0       	ldi	r18, 0x0A	; 10
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	91 d6       	rcall	.+3362   	; 0xfc0 <__udivmodsi4>
     29e:	e1 e0       	ldi	r30, 0x01	; 1
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	ec 0f       	add	r30, r28
     2a4:	fd 1f       	adc	r31, r29
     2a6:	e6 0f       	add	r30, r22
     2a8:	f7 1f       	adc	r31, r23
     2aa:	80 81       	ld	r24, Z
     2ac:	85 bb       	out	0x15, r24	; 21
		break;
     2ae:	68 c0       	rjmp	.+208    	; 0x380 <fnd_display+0x152>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     2b0:	8f eb       	ldi	r24, 0xBF	; 191
     2b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     2b6:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <sec_count>
     2ba:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <sec_count+0x1>
     2be:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sec_count+0x2>
     2c2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sec_count+0x3>
     2c6:	2a e0       	ldi	r18, 0x0A	; 10
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	78 d6       	rcall	.+3312   	; 0xfc0 <__udivmodsi4>
     2d0:	ca 01       	movw	r24, r20
     2d2:	b9 01       	movw	r22, r18
     2d4:	26 e0       	ldi	r18, 0x06	; 6
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	50 e0       	ldi	r21, 0x00	; 0
     2dc:	71 d6       	rcall	.+3298   	; 0xfc0 <__udivmodsi4>
     2de:	e1 e0       	ldi	r30, 0x01	; 1
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	ec 0f       	add	r30, r28
     2e4:	fd 1f       	adc	r31, r29
     2e6:	e6 0f       	add	r30, r22
     2e8:	f7 1f       	adc	r31, r23
     2ea:	80 81       	ld	r24, Z
     2ec:	85 bb       	out	0x15, r24	; 21
		break;
     2ee:	48 c0       	rjmp	.+144    	; 0x380 <fnd_display+0x152>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     2f0:	8f ed       	ldi	r24, 0xDF	; 223
     2f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		if (sec_count % 2 == 1)
     2f6:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <sec_count>
     2fa:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <sec_count+0x1>
     2fe:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sec_count+0x2>
     302:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sec_count+0x3>
     306:	60 ff       	sbrs	r22, 0
     308:	17 c0       	rjmp	.+46     	; 0x338 <fnd_display+0x10a>
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     30a:	2c e3       	ldi	r18, 0x3C	; 60
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	56 d6       	rcall	.+3244   	; 0xfc0 <__udivmodsi4>
     314:	ca 01       	movw	r24, r20
     316:	b9 01       	movw	r22, r18
     318:	2a e0       	ldi	r18, 0x0A	; 10
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	40 e0       	ldi	r20, 0x00	; 0
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	4f d6       	rcall	.+3230   	; 0xfc0 <__udivmodsi4>
     322:	e1 e0       	ldi	r30, 0x01	; 1
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	ec 0f       	add	r30, r28
     328:	fd 1f       	adc	r31, r29
     32a:	e6 0f       	add	r30, r22
     32c:	f7 1f       	adc	r31, r23
     32e:	90 81       	ld	r25, Z
     330:	8b 85       	ldd	r24, Y+11	; 0x0b
     332:	89 2b       	or	r24, r25
     334:	85 bb       	out	0x15, r24	; 21
     336:	24 c0       	rjmp	.+72     	; 0x380 <fnd_display+0x152>
		else
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10]; // 1단위 분
     338:	2c e3       	ldi	r18, 0x3C	; 60
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	3f d6       	rcall	.+3198   	; 0xfc0 <__udivmodsi4>
     342:	ca 01       	movw	r24, r20
     344:	b9 01       	movw	r22, r18
     346:	2a e0       	ldi	r18, 0x0A	; 10
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	38 d6       	rcall	.+3184   	; 0xfc0 <__udivmodsi4>
     350:	e1 e0       	ldi	r30, 0x01	; 1
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	ec 0f       	add	r30, r28
     356:	fd 1f       	adc	r31, r29
     358:	e6 0f       	add	r30, r22
     35a:	f7 1f       	adc	r31, r23
     35c:	80 81       	ld	r24, Z
     35e:	85 bb       	out	0x15, r24	; 21
     360:	0f c0       	rjmp	.+30     	; 0x380 <fnd_display+0x152>
     362:	8f ee       	ldi	r24, 0xEF	; 239
		break;

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     364:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     368:	da 01       	movw	r26, r20
		
		FND_DATA_PORT = fnd_font[*run_state+10]; // 10단위 분
     36a:	ed 91       	ld	r30, X+
     36c:	fc 91       	ld	r31, X
     36e:	3a 96       	adiw	r30, 0x0a	; 10
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	8c 0f       	add	r24, r28
     376:	9d 1f       	adc	r25, r29
     378:	e8 0f       	add	r30, r24
     37a:	f9 1f       	adc	r31, r25
     37c:	80 81       	ld	r24, Z
     37e:	85 bb       	out	0x15, r24	; 21
     380:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <digit_select.1776>
		break;
	}
	digit_select++;
     384:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <digit_select.1776+0x1>
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	83 70       	andi	r24, 0x03	; 3
	digit_select %= 4; //다음 표시할 자리수 선택
     38c:	90 78       	andi	r25, 0x80	; 128
     38e:	99 23       	and	r25, r25
     390:	24 f4       	brge	.+8      	; 0x39a <fnd_display+0x16c>
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	8c 6f       	ori	r24, 0xFC	; 252
     396:	9f 6f       	ori	r25, 0xFF	; 255
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <digit_select.1776+0x1>
     39e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <digit_select.1776>
     3a2:	2f 96       	adiw	r28, 0x0f	; 15
}
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <init_led>:

void init_led(void);

void init_led(void)
{
	AUTO_RUN_LED_PORT_DDR |= 1 << AUTO_RUN_LED_PIN;
     3b4:	e4 e6       	ldi	r30, 0x64	; 100
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	88 60       	ori	r24, 0x08	; 8
     3bc:	80 83       	st	Z, r24
     3be:	08 95       	ret

000003c0 <auto_mode>:
{
	if (button0_state)
	{
		/// 자율주행 코드
	}
	func_state = MANUAL_MODE;
     3c0:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <func_state+0x1>
     3c4:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <func_state>
     3c8:	08 95       	ret

000003ca <manual_mode>:
	//sei();    // 전역적(대문)으로 interrupt 허용
}

void manual_mode(void)
{
	switch (bt_data)
     3ca:	e0 91 ba 07 	lds	r30, 0x07BA	; 0x8007ba <bt_data>
     3ce:	8e 2f       	mov	r24, r30
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	fc 01       	movw	r30, r24
     3d4:	e2 54       	subi	r30, 0x42	; 66
     3d6:	f1 09       	sbc	r31, r1
     3d8:	e2 33       	cpi	r30, 0x32	; 50
     3da:	f1 05       	cpc	r31, r1
     3dc:	a0 f4       	brcc	.+40     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3de:	ea 5b       	subi	r30, 0xBA	; 186
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	10 c6       	rjmp	.+3104   	; 0x1004 <__tablejump2__>
	{
		case 'F':
		case 'f':
			forward(500);
     3e4:	84 ef       	ldi	r24, 0xF4	; 244
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	c0 d0       	rcall	.+384    	; 0x56a <forward>
			break;
     3ea:	0d c0       	rjmp	.+26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			
		case 'B':
		case 'b':
			backward(500);
     3ec:	84 ef       	ldi	r24, 0xF4	; 244
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	ca d0       	rcall	.+404    	; 0x586 <backward>
			break;
			
		case 'L':
		case 'l':
			turn_left(700);
     3f2:	09 c0       	rjmp	.+18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3f4:	8c eb       	ldi	r24, 0xBC	; 188
     3f6:	92 e0       	ldi	r25, 0x02	; 2
			break;
     3f8:	d4 d0       	rcall	.+424    	; 0x5a2 <turn_left>
			
		case 'R':
		case 'r':
			turn_right(700);
     3fa:	05 c0       	rjmp	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fc:	8c eb       	ldi	r24, 0xBC	; 188
     3fe:	92 e0       	ldi	r25, 0x02	; 2
			break;
     400:	de d0       	rcall	.+444    	; 0x5be <turn_right>
			
		case 'S':
		case 's':
			stop();
     402:	01 c0       	rjmp	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	ea d0       	rcall	.+468    	; 0x5da <stop>
			break;
			
		default:
			break;
	}
	func_state = DISTANCE_CHECK;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <func_state+0x1>
     40e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <func_state>
     412:	08 95       	ret

00000414 <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     414:	1f 92       	push	r1
     416:	0f 92       	push	r0
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	0f 92       	push	r0
     41c:	11 24       	eor	r1, r1
     41e:	8f 93       	push	r24
     420:	9f 93       	push	r25
     422:	af 93       	push	r26
     424:	bf 93       	push	r27
	TCNT0 = 6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
     426:	86 e0       	ldi	r24, 0x06	; 6
     428:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
     42a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <msec_count>
     42e:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <msec_count+0x1>
     432:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <msec_count+0x2>
     436:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <msec_count+0x3>
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	a1 1d       	adc	r26, r1
     43e:	b1 1d       	adc	r27, r1
     440:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <msec_count>
     444:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <msec_count+0x1>
     448:	a0 93 6e 01 	sts	0x016E, r26	; 0x80016e <msec_count+0x2>
     44c:	b0 93 6f 01 	sts	0x016F, r27	; 0x80016f <msec_count+0x3>
	fnd_refreshrate++;   // fnd 잔상효과 유지 하기 위한 timer 2ms
     450:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <fnd_refreshrate>
     454:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <fnd_refreshrate+0x1>
     458:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <fnd_refreshrate+0x2>
     45c:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <fnd_refreshrate+0x3>
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	a1 1d       	adc	r26, r1
     464:	b1 1d       	adc	r27, r1
     466:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <fnd_refreshrate>
     46a:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <fnd_refreshrate+0x1>
     46e:	a0 93 6a 01 	sts	0x016A, r26	; 0x80016a <fnd_refreshrate+0x2>
     472:	b0 93 6b 01 	sts	0x016B, r27	; 0x80016b <fnd_refreshrate+0x3>
	ultrasonic_check_timer++;
     476:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ultrasonic_check_timer>
     47a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <ultrasonic_check_timer+0x1>
     47e:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <ultrasonic_check_timer+0x2>
     482:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <ultrasonic_check_timer+0x3>
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	a1 1d       	adc	r26, r1
     48a:	b1 1d       	adc	r27, r1
     48c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <ultrasonic_check_timer>
     490:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <ultrasonic_check_timer+0x1>
     494:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <ultrasonic_check_timer+0x2>
     498:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <ultrasonic_check_timer+0x3>
	read_distance++;
     49c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <read_distance>
     4a0:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <read_distance+0x1>
     4a4:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <read_distance+0x2>
     4a8:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <read_distance+0x3>
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	a1 1d       	adc	r26, r1
     4b0:	b1 1d       	adc	r27, r1
     4b2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <read_distance>
     4b6:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <read_distance+0x1>
     4ba:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <read_distance+0x2>
     4be:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <read_distance+0x3>
}
     4c2:	bf 91       	pop	r27
     4c4:	af 91       	pop	r26
     4c6:	9f 91       	pop	r25
     4c8:	8f 91       	pop	r24
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	1f 90       	pop	r1
     4d2:	18 95       	reti

000004d4 <init_timer0>:
	// 1. 분주비 계산
	// 16000000HZ/64 ==> 250,000HZ
	// 2. T(주기) 1가 잡아 먹는 시간 : 1/f = 1/250,000 ==> 0.000004sec(4us) : 0.004ms
	// 3. 8bit timer OV(OVflow) : 0.004ms x 256 = 0.001024sec --> 1.024ms
	// 그러면 정확히 1ms 를 재고 싶다면 0.004ms x 250개 = 0.001sec ==> 1ms
	TCNT0 = 6;   // TCNT : 0~256 ==> 1ms마다 TIMER0_OVF_vect로 진입한다.
     4d4:	86 e0       	ldi	r24, 0x06	; 6
     4d6:	82 bf       	out	0x32, r24	; 50
	// TCNT0 = 6로 설정을 한이유: 6~256 : 250개를 count(정확히 1MS를맞추기 위해서)
	//
	// 4 분주비를 설정 (250khz)
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     4d8:	83 b7       	in	r24, 0x33	; 51
     4da:	84 60       	ori	r24, 0x04	; 4
     4dc:	83 bf       	out	0x33, r24	; 51
	// 5. TIMER0 OVERFLOW를 허용(enable)
	TIMSK |= 1 << TOIE0;  // TIMSK |= 0x01;
     4de:	87 b7       	in	r24, 0x37	; 55
     4e0:	81 60       	ori	r24, 0x01	; 1
     4e2:	87 bf       	out	0x37, r24	; 55
     4e4:	08 95       	ret

000004e6 <main>:
	read_distance++;
}

int main(void)
{
	init_led();
     4e6:	66 df       	rcall	.-308    	; 0x3b4 <init_led>
	init_fnd();
     4e8:	99 de       	rcall	.-718    	; 0x21c <init_fnd>
	init_button();
     4ea:	21 de       	rcall	.-958    	; 0x12e <init_button>
	init_timer0();
     4ec:	f3 df       	rcall	.-26     	; 0x4d4 <init_timer0>
	init_uart0();
     4ee:	e0 d1       	rcall	.+960    	; 0x8b0 <init_uart0>
	init_uart1();
     4f0:	21 d2       	rcall	.+1090   	; 0x934 <init_uart1>
     4f2:	16 d0       	rcall	.+44     	; 0x520 <init_n289n>
	init_n289n();
     4f4:	26 d0       	rcall	.+76     	; 0x542 <init_timer1_pwm>
     4f6:	1a d3       	rcall	.+1588   	; 0xb2c <init_ultrasonic>
	init_timer1_pwm();
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	91 e0       	ldi	r25, 0x01	; 1
	init_ultrasonic(); // timer 3
     4fc:	90 93 be 07 	sts	0x07BE, r25	; 0x8007be <__iob+0x3>
	

	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     500:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <__iob+0x2>
     504:	78 94       	sei
     506:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <func_state>
     50a:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <func_state+0x1>
	
	sei();     // 전역적으로 interrupt 허용

	while (1)
	{
		pfunc[func_state] ();
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	e2 5f       	subi	r30, 0xF2	; 242
     514:	fe 4f       	sbci	r31, 0xFE	; 254
     516:	01 90       	ld	r0, Z+
     518:	f0 81       	ld	r31, Z
     51a:	e0 2d       	mov	r30, r0
     51c:	09 95       	icall
     51e:	f3 cf       	rjmp	.-26     	; 0x506 <main+0x20>

00000520 <init_n289n>:
	   1         1   : STOP
*/

void init_n289n(void)
{
	MOTOR_PWM_DDR |= 1 << MOTOR_LEFT_PORT_DDR | 1 << MOTOR_RIGHT_PORT_DDR; // DDR설정
     520:	87 b3       	in	r24, 0x17	; 23
     522:	80 66       	ori	r24, 0x60	; 96
     524:	87 bb       	out	0x17, r24	; 23
	MOTOR_DRIVER_DIRECTION_PORT_DDR |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3; // PF1234 출력으로 설정
     526:	e1 e6       	ldi	r30, 0x61	; 97
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	80 81       	ld	r24, Z
     52c:	8f 60       	ori	r24, 0x0F	; 15
     52e:	80 83       	st	Z, r24
	
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     530:	e2 e6       	ldi	r30, 0x62	; 98
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	80 81       	ld	r24, Z
     536:	80 7f       	andi	r24, 0xF0	; 240
     538:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 2; // 자동차를 전진모드로 
     53a:	80 81       	ld	r24, Z
     53c:	85 60       	ori	r24, 0x05	; 5
     53e:	80 83       	st	Z, r24
     540:	08 95       	ret

00000542 <init_timer1_pwm>:
	// 분주비 : 64 16000000HZ/64 ==> 250000HZ(250kHZ)
	// T=1/f 1/250000HZ ==> 0.000004sec (4us)
	// 250000HZ에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//              127                             : 0.5ms
	//              0x3ff(1023) --> 4ms
	TCCR1B |= 1 << CS11 | 1 << CS10;   // 분주비 64  P318 표14-1
     542:	8e b5       	in	r24, 0x2e	; 46
     544:	83 60       	ori	r24, 0x03	; 3
     546:	8e bd       	out	0x2e, r24	; 46
	
	// 모드 14: 고속 PWM timer1사용  (P327 표14-5)
	TCCR1A |= 1 << WGM11;   // TOP --> ICR1에 설정
     548:	8f b5       	in	r24, 0x2f	; 47
     54a:	82 60       	ori	r24, 0x02	; 2
     54c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM13 | 1 << WGM12;
     54e:	8e b5       	in	r24, 0x2e	; 46
     550:	88 61       	ori	r24, 0x18	; 24
     552:	8e bd       	out	0x2e, r24	; 46
	
	// 비반전모드 top: ICR1 비교일치값(PWM) 지정 : OCR1A, OCR1B P350 표15-7
	// 비교일치 발생시 OCR1A, OCR1B의 출력 핀은 LOW로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR1A |= 1 << COM1A1;
     554:	8f b5       	in	r24, 0x2f	; 47
     556:	80 68       	ori	r24, 0x80	; 128
     558:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= 1 << COM1B1;
     55a:	8f b5       	in	r24, 0x2f	; 47
     55c:	80 62       	ori	r24, 0x20	; 32
     55e:	8f bd       	out	0x2f, r24	; 47

	ICR1 = 0x3ff;  // 1023 ==> 4ms TOP : PWM 값
     560:	8f ef       	ldi	r24, 0xFF	; 255
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	97 bd       	out	0x27, r25	; 39
     566:	86 bd       	out	0x26, r24	; 38
     568:	08 95       	ret

0000056a <forward>:
}

///////////////////////////////           수동모드          //////////////////////////////////////
void forward(int speed)
{
     56a:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     56c:	e2 e6       	ldi	r30, 0x62	; 98
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	90 81       	ld	r25, Z
     572:	90 7f       	andi	r25, 0xF0	; 240
     574:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     576:	90 81       	ld	r25, Z
     578:	95 60       	ori	r25, 0x05	; 5
     57a:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     57c:	3b bd       	out	0x2b, r19	; 43
     57e:	2a bd       	out	0x2a, r18	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     580:	39 bd       	out	0x29, r19	; 41
     582:	28 bd       	out	0x28, r18	; 40
     584:	08 95       	ret

00000586 <backward>:
}

void backward(int speed)
{
     586:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     588:	e2 e6       	ldi	r30, 0x62	; 98
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	90 81       	ld	r25, Z
     58e:	90 7f       	andi	r25, 0xF0	; 240
     590:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 3 | 1 << 1;  // 1010 후진 모드
     592:	90 81       	ld	r25, Z
     594:	9a 60       	ori	r25, 0x0A	; 10
     596:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     598:	3b bd       	out	0x2b, r19	; 43
     59a:	2a bd       	out	0x2a, r18	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     59c:	39 bd       	out	0x29, r19	; 41
     59e:	28 bd       	out	0x28, r18	; 40
     5a0:	08 95       	ret

000005a2 <turn_left>:
}

void turn_left(int speed)
{
     5a2:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     5a4:	e2 e6       	ldi	r30, 0x62	; 98
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	90 81       	ld	r25, Z
     5aa:	90 7f       	andi	r25, 0xF0	; 240
     5ac:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     5ae:	90 81       	ld	r25, Z
     5b0:	95 60       	ori	r25, 0x05	; 5
     5b2:	90 83       	st	Z, r25
	
	OCR1A = 0;  // PB5 PWM 출력 port left
     5b4:	1b bc       	out	0x2b, r1	; 43
     5b6:	1a bc       	out	0x2a, r1	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     5b8:	39 bd       	out	0x29, r19	; 41
     5ba:	28 bd       	out	0x28, r18	; 40
     5bc:	08 95       	ret

000005be <turn_right>:
}

void turn_right(int speed)
{
     5be:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     5c0:	e2 e6       	ldi	r30, 0x62	; 98
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	90 81       	ld	r25, Z
     5c6:	90 7f       	andi	r25, 0xF0	; 240
     5c8:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     5ca:	90 81       	ld	r25, Z
     5cc:	95 60       	ori	r25, 0x05	; 5
     5ce:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     5d0:	3b bd       	out	0x2b, r19	; 43
     5d2:	2a bd       	out	0x2a, r18	; 42
	OCR1B = 0;  // PB6 PWM 출력 port right
     5d4:	19 bc       	out	0x29, r1	; 41
     5d6:	18 bc       	out	0x28, r1	; 40
     5d8:	08 95       	ret

000005da <stop>:
}

void stop(void)
{
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     5da:	e2 e6       	ldi	r30, 0x62	; 98
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	80 7f       	andi	r24, 0xF0	; 240
     5e2:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3;  // stop 모드로 설정
     5e4:	80 81       	ld	r24, Z
     5e6:	8f 60       	ori	r24, 0x0F	; 15
     5e8:	80 83       	st	Z, r24
	
	OCR1A = 0;  // PB5 PWM 출력 port left
     5ea:	1b bc       	out	0x2b, r1	; 43
     5ec:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;  // PB6 PWM 출력 port right
     5ee:	19 bc       	out	0x29, r1	; 41
     5f0:	18 bc       	out	0x28, r1	; 40
     5f2:	08 95       	ret

000005f4 <auto_start>:
}
////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////         자동모드            //////////////////////////////////
void auto_start(void)
{
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <auto_start+0x6>
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <auto_start+0x8>
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
	int run_state;
	sec_count = 120;
     600:	88 e7       	ldi	r24, 0x78	; 120
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	a0 e0       	ldi	r26, 0x00	; 0
     606:	b0 e0       	ldi	r27, 0x00	; 0
     608:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <sec_count>
     60c:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <sec_count+0x1>
     610:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <sec_count+0x2>
     614:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <sec_count+0x3>

	while(sec_count > 0)
     618:	b9 c0       	rjmp	.+370    	; 0x78c <auto_start+0x198>
	{
		ultrasonic_trigger();
     61a:	b8 d2       	rcall	.+1392   	; 0xb8c <ultrasonic_trigger>
		if (msec_count >= 1000)
     61c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <msec_count>
     620:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <msec_count+0x1>
     624:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <msec_count+0x2>
     628:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <msec_count+0x3>
     62c:	88 3e       	cpi	r24, 0xE8	; 232
     62e:	93 40       	sbci	r25, 0x03	; 3
     630:	a1 05       	cpc	r26, r1
     632:	b1 05       	cpc	r27, r1
     634:	d8 f0       	brcs	.+54     	; 0x66c <auto_start+0x78>
		{
			msec_count = 0;
     636:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <msec_count>
     63a:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <msec_count+0x1>
     63e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <msec_count+0x2>
     642:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <msec_count+0x3>
			sec_count--;
     646:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <sec_count>
     64a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <sec_count+0x1>
     64e:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <sec_count+0x2>
     652:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <sec_count+0x3>
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	a1 09       	sbc	r26, r1
     65a:	b1 09       	sbc	r27, r1
     65c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <sec_count>
     660:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <sec_count+0x1>
     664:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <sec_count+0x2>
     668:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <sec_count+0x3>
		} // 1초씩 감소

		if (fnd_refreshrate >= 2)
     66c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <fnd_refreshrate>
     670:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <fnd_refreshrate+0x1>
     674:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <fnd_refreshrate+0x2>
     678:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <fnd_refreshrate+0x3>
     67c:	02 97       	sbiw	r24, 0x02	; 2
     67e:	a1 05       	cpc	r26, r1
     680:	b1 05       	cpc	r27, r1
     682:	48 f0       	brcs	.+18     	; 0x696 <auto_start+0xa2>
		{
			fnd_refreshrate = 0;
     684:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <fnd_refreshrate>
     688:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <fnd_refreshrate+0x1>
     68c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <fnd_refreshrate+0x2>
     690:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <fnd_refreshrate+0x3>
			fnd_display();
     694:	cc dd       	rcall	.-1128   	; 0x22e <fnd_display>
		} // fnd 표시

		volatile int gap1= ultrasonic_right_distance - ultrasonic_left_distance;
     696:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_right_distance>
     69a:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     69e:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <ultrasonic_left_distance>
     6a2:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     6a6:	82 1b       	sub	r24, r18
     6a8:	93 0b       	sbc	r25, r19
     6aa:	9c 83       	std	Y+4, r25	; 0x04
     6ac:	8b 83       	std	Y+3, r24	; 0x03
		volatile int gap2= ultrasonic_left_distance - ultrasonic_right_distance;
     6ae:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_left_distance>
     6b2:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     6b6:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <ultrasonic_right_distance>
     6ba:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     6be:	82 1b       	sub	r24, r18
     6c0:	93 0b       	sbc	r25, r19
     6c2:	9a 83       	std	Y+2, r25	; 0x02
     6c4:	89 83       	std	Y+1, r24	; 0x01

		if(gap1<2 && gap2 <2 && ultrasonic_right_distance && ultrasonic_center_distance >= 10)
     6c6:	8b 81       	ldd	r24, Y+3	; 0x03
     6c8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ca:	02 97       	sbiw	r24, 0x02	; 2
     6cc:	9c f4       	brge	.+38     	; 0x6f4 <auto_start+0x100>
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	9a 81       	ldd	r25, Y+2	; 0x02
     6d2:	02 97       	sbiw	r24, 0x02	; 2
     6d4:	7c f4       	brge	.+30     	; 0x6f4 <auto_start+0x100>
     6d6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_right_distance>
     6da:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     6de:	89 2b       	or	r24, r25
     6e0:	49 f0       	breq	.+18     	; 0x6f4 <auto_start+0x100>
     6e2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ultrasonic_center_distance>
     6e6:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ultrasonic_center_distance+0x1>
     6ea:	0a 97       	sbiw	r24, 0x0a	; 10
     6ec:	1c f0       	brlt	.+6      	; 0x6f4 <auto_start+0x100>
		{
			//run_state = FORWARD;
			forward(400);
     6ee:	80 e9       	ldi	r24, 0x90	; 144
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	3b df       	rcall	.-394    	; 0x56a <forward>
		}
		if(ultrasonic_center_distance <= 10)
     6f4:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ultrasonic_center_distance>
     6f8:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ultrasonic_center_distance+0x1>
     6fc:	0b 97       	sbiw	r24, 0x0b	; 11
		{
			//run_state = FORWARD;
			backward(400);
     6fe:	24 f4       	brge	.+8      	; 0x708 <auto_start+0x114>
     700:	80 e9       	ldi	r24, 0x90	; 144
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	40 df       	rcall	.-384    	; 0x586 <backward>
     706:	42 c0       	rjmp	.+132    	; 0x78c <auto_start+0x198>
		}
		else if(gap1 <= 4 && ultrasonic_center_distance >= 7)
     708:	8b 81       	ldd	r24, Y+3	; 0x03
     70a:	9c 81       	ldd	r25, Y+4	; 0x04
     70c:	05 97       	sbiw	r24, 0x05	; 5
     70e:	54 f4       	brge	.+20     	; 0x724 <auto_start+0x130>
     710:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ultrasonic_center_distance>
     714:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ultrasonic_center_distance+0x1>
     718:	07 97       	sbiw	r24, 0x07	; 7
		{

			turn_left(400);
     71a:	24 f0       	brlt	.+8      	; 0x724 <auto_start+0x130>
     71c:	80 e9       	ldi	r24, 0x90	; 144
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	40 df       	rcall	.-384    	; 0x5a2 <turn_left>
     722:	34 c0       	rjmp	.+104    	; 0x78c <auto_start+0x198>
		}
		else if(gap2 <= 4 && ultrasonic_center_distance >= 7)
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	9a 81       	ldd	r25, Y+2	; 0x02
     728:	05 97       	sbiw	r24, 0x05	; 5
     72a:	54 f4       	brge	.+20     	; 0x740 <auto_start+0x14c>
     72c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ultrasonic_center_distance>
     730:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ultrasonic_center_distance+0x1>
     734:	07 97       	sbiw	r24, 0x07	; 7
		{

			turn_right(400);
     736:	24 f0       	brlt	.+8      	; 0x740 <auto_start+0x14c>
     738:	80 e9       	ldi	r24, 0x90	; 144
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	40 df       	rcall	.-384    	; 0x5be <turn_right>
     73e:	26 c0       	rjmp	.+76     	; 0x78c <auto_start+0x198>
		}
		else if (gap2 <= 4 && gap1 <= 4)
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	9a 81       	ldd	r25, Y+2	; 0x02
     744:	05 97       	sbiw	r24, 0x05	; 5
     746:	5c f4       	brge	.+22     	; 0x75e <auto_start+0x16a>
     748:	8b 81       	ldd	r24, Y+3	; 0x03
     74a:	9c 81       	ldd	r25, Y+4	; 0x04
     74c:	05 97       	sbiw	r24, 0x05	; 5
		{

			forward (500);
     74e:	3c f4       	brge	.+14     	; 0x75e <auto_start+0x16a>
     750:	84 ef       	ldi	r24, 0xF4	; 244
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0a df       	rcall	.-492    	; 0x56a <forward>
			backward(300);
     756:	8c e2       	ldi	r24, 0x2C	; 44
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	15 df       	rcall	.-470    	; 0x586 <backward>
     75c:	17 c0       	rjmp	.+46     	; 0x78c <auto_start+0x198>
     75e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_right_distance>
		}
		else if (ultrasonic_right_distance <= 15 )
     762:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     766:	40 97       	sbiw	r24, 0x10	; 16
     768:	24 f4       	brge	.+8      	; 0x772 <auto_start+0x17e>
		{
			turn_left(400);
     76a:	80 e9       	ldi	r24, 0x90	; 144
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	19 df       	rcall	.-462    	; 0x5a2 <turn_left>
     770:	0d c0       	rjmp	.+26     	; 0x78c <auto_start+0x198>
		}
		else if (ultrasonic_left_distance <= 15 )
     772:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_left_distance>
     776:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     77a:	40 97       	sbiw	r24, 0x10	; 16
		{
			turn_right(400);
     77c:	24 f4       	brge	.+8      	; 0x786 <auto_start+0x192>
     77e:	80 e9       	ldi	r24, 0x90	; 144
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	1d df       	rcall	.-454    	; 0x5be <turn_right>
     784:	03 c0       	rjmp	.+6      	; 0x78c <auto_start+0x198>
		}
		else
		{
			forward(400);
     786:	80 e9       	ldi	r24, 0x90	; 144
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	ef de       	rcall	.-546    	; 0x56a <forward>
     78c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <sec_count>
void auto_start(void)
{
	int run_state;
	sec_count = 120;

	while(sec_count > 0)
     790:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <sec_count+0x1>
     794:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <sec_count+0x2>
     798:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <sec_count+0x3>
     79c:	89 2b       	or	r24, r25
     79e:	8a 2b       	or	r24, r26
     7a0:	8b 2b       	or	r24, r27
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <auto_start+0x1b2>
     7a4:	3a cf       	rjmp	.-396    	; 0x61a <auto_start+0x26>
     7a6:	0f 90       	pop	r0
		else
		{
			forward(400);
		}
	}
}
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <__vector_18>:

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     7b4:	1f 92       	push	r1
     7b6:	0f 92       	push	r0
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	0f 92       	push	r0
     7bc:	11 24       	eor	r1, r1
     7be:	0b b6       	in	r0, 0x3b	; 59
     7c0:	0f 92       	push	r0
     7c2:	2f 93       	push	r18
     7c4:	3f 93       	push	r19
     7c6:	4f 93       	push	r20
     7c8:	5f 93       	push	r21
     7ca:	6f 93       	push	r22
     7cc:	7f 93       	push	r23
     7ce:	8f 93       	push	r24
     7d0:	9f 93       	push	r25
     7d2:	af 93       	push	r26
     7d4:	bf 93       	push	r27
     7d6:	ef 93       	push	r30
     7d8:	ff 93       	push	r31
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	1f 92       	push	r1
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     7e4:	8c b1       	in	r24, 0x0c	; 12
     7e6:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	8d 30       	cpi	r24, 0x0D	; 13
     7ec:	19 f0       	breq	.+6      	; 0x7f4 <__vector_18+0x40>
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	8a 30       	cpi	r24, 0x0A	; 10
     7f2:	61 f5       	brne	.+88     	; 0x84c <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     7f4:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <rear>
     7f8:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <rear+0x1>
     7fc:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <i.1878>
     800:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <i.1878+0x1>
     804:	40 e5       	ldi	r20, 0x50	; 80
     806:	42 9f       	mul	r20, r18
     808:	f0 01       	movw	r30, r0
     80a:	43 9f       	mul	r20, r19
     80c:	f0 0d       	add	r31, r0
     80e:	11 24       	eor	r1, r1
     810:	e6 58       	subi	r30, 0x86	; 134
     812:	fe 4f       	sbci	r31, 0xFE	; 254
     814:	e8 0f       	add	r30, r24
     816:	f9 1f       	adc	r31, r25
     818:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     81a:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <i.1878+0x1>
     81e:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <i.1878>
		rear++;
     822:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rear>
     826:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <rear+0x1>
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <rear+0x1>
     830:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
     834:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rear>
     838:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <rear+0x1>
     83c:	6a e0       	ldi	r22, 0x0A	; 10
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	ac d3       	rcall	.+1880   	; 0xf9a <__divmodhi4>
     842:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <rear+0x1>
     846:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <rear>
     84a:	1c c0       	rjmp	.+56     	; 0x884 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
     84c:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <rear>
     850:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <rear+0x1>
     854:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <i.1878>
     858:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <i.1878+0x1>
     85c:	9c 01       	movw	r18, r24
     85e:	2f 5f       	subi	r18, 0xFF	; 255
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	30 93 71 01 	sts	0x0171, r19	; 0x800171 <i.1878+0x1>
     866:	20 93 70 01 	sts	0x0170, r18	; 0x800170 <i.1878>
     86a:	49 81       	ldd	r20, Y+1	; 0x01
     86c:	50 e5       	ldi	r21, 0x50	; 80
     86e:	56 9f       	mul	r21, r22
     870:	90 01       	movw	r18, r0
     872:	57 9f       	mul	r21, r23
     874:	30 0d       	add	r19, r0
     876:	11 24       	eor	r1, r1
     878:	26 58       	subi	r18, 0x86	; 134
     87a:	3e 4f       	sbci	r19, 0xFE	; 254
     87c:	f9 01       	movw	r30, r18
     87e:	e8 0f       	add	r30, r24
     880:	f9 1f       	adc	r31, r25
     882:	40 83       	st	Z, r20
	}
		  
}
     884:	0f 90       	pop	r0
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	bf 91       	pop	r27
     890:	af 91       	pop	r26
     892:	9f 91       	pop	r25
     894:	8f 91       	pop	r24
     896:	7f 91       	pop	r23
     898:	6f 91       	pop	r22
     89a:	5f 91       	pop	r21
     89c:	4f 91       	pop	r20
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	0f 90       	pop	r0
     8a4:	0b be       	out	0x3b, r0	; 59
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
     8b0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
     8b4:	8f ec       	ldi	r24, 0xCF	; 207
     8b6:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
     8b8:	8b b1       	in	r24, 0x0b	; 11
     8ba:	82 60       	ori	r24, 0x02	; 2
     8bc:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     8be:	e5 e9       	ldi	r30, 0x95	; 149
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	86 60       	ori	r24, 0x06	; 6
     8c6:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     8c8:	8a b1       	in	r24, 0x0a	; 10
     8ca:	88 69       	ori	r24, 0x98	; 152
     8cc:	8a b9       	out	0x0a, r24	; 10
     8ce:	08 95       	ret

000008d0 <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
     8d0:	5d 9b       	sbis	0x0b, 5	; 11
     8d2:	fe cf       	rjmp	.-4      	; 0x8d0 <UART0_transmit>
		;   // no operation NOP
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
     8d4:	8c b9       	out	0x0c, r24	; 12
     8d6:	08 95       	ret

000008d8 <__vector_30>:
volatile uint8_t bt_data;

extern void UART0_transmit();

ISR(USART1_RX_vect)
{
     8d8:	1f 92       	push	r1
     8da:	0f 92       	push	r0
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	0f 92       	push	r0
     8e0:	11 24       	eor	r1, r1
     8e2:	0b b6       	in	r0, 0x3b	; 59
     8e4:	0f 92       	push	r0
     8e6:	2f 93       	push	r18
     8e8:	3f 93       	push	r19
     8ea:	4f 93       	push	r20
     8ec:	5f 93       	push	r21
     8ee:	6f 93       	push	r22
     8f0:	7f 93       	push	r23
     8f2:	8f 93       	push	r24
     8f4:	9f 93       	push	r25
     8f6:	af 93       	push	r26
     8f8:	bf 93       	push	r27
     8fa:	ef 93       	push	r30
     8fc:	ff 93       	push	r31
	
	bt_data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
     8fe:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     902:	80 93 ba 07 	sts	0x07BA, r24	; 0x8007ba <bt_data>
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	UART0_transmit(bt_data); // BT로 들어온 char를 확인하기 위해 comport master로 출력
     906:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <bt_data>
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	e1 df       	rcall	.-62     	; 0x8d0 <UART0_transmit>
// 	{
// 		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
// 		rx1_buff[rear1][i++] = data;
// 	}
		  
}
     90e:	ff 91       	pop	r31
     910:	ef 91       	pop	r30
     912:	bf 91       	pop	r27
     914:	af 91       	pop	r26
     916:	9f 91       	pop	r25
     918:	8f 91       	pop	r24
     91a:	7f 91       	pop	r23
     91c:	6f 91       	pop	r22
     91e:	5f 91       	pop	r21
     920:	4f 91       	pop	r20
     922:	3f 91       	pop	r19
     924:	2f 91       	pop	r18
     926:	0f 90       	pop	r0
     928:	0b be       	out	0x3b, r0	; 59
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	0f 90       	pop	r0
     930:	1f 90       	pop	r1
     932:	18 95       	reti

00000934 <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
     934:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
     938:	8f ec       	ldi	r24, 0xCF	; 207
     93a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
     93e:	eb e9       	ldi	r30, 0x9B	; 155
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	82 60       	ori	r24, 0x02	; 2
     946:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     948:	ed e9       	ldi	r30, 0x9D	; 157
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	86 60       	ori	r24, 0x06	; 6
     950:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     952:	ea e9       	ldi	r30, 0x9A	; 154
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	80 81       	ld	r24, Z
     958:	88 69       	ori	r24, 0x98	; 152
     95a:	80 83       	st	Z, r24
     95c:	08 95       	ret

0000095e <__vector_5>:
volatile int ultrasonic_right_distance = 0;

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect) // LEFT
{
     95e:	1f 92       	push	r1
     960:	0f 92       	push	r0
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	0f 92       	push	r0
     966:	11 24       	eor	r1, r1
     968:	0b b6       	in	r0, 0x3b	; 59
     96a:	0f 92       	push	r0
     96c:	2f 93       	push	r18
     96e:	3f 93       	push	r19
     970:	4f 93       	push	r20
     972:	5f 93       	push	r21
     974:	6f 93       	push	r22
     976:	7f 93       	push	r23
     978:	8f 93       	push	r24
     97a:	9f 93       	push	r25
     97c:	af 93       	push	r26
     97e:	bf 93       	push	r27
     980:	ef 93       	push	r30
     982:	ff 93       	push	r31
   // 1. 상승 edge
   if (ECHO_PIN_LEFT & (1 << ECHO_LEFT))
     984:	0c 9b       	sbis	0x01, 4	; 1
     986:	05 c0       	rjmp	.+10     	; 0x992 <__vector_5+0x34>
   {
      TCNT3 = 0;
     988:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     98c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     990:	20 c0       	rjmp	.+64     	; 0x9d2 <__vector_5+0x74>
   }
   // 2. 하강 edge
   else
   {
      // ECHO 핀에 들어온 펄스 길이를 us로 환산
      ultrasonic_left_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     992:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     996:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0c d2       	rcall	.+1048   	; 0xdb8 <__floatunsisf>
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	34 e2       	ldi	r19, 0x24	; 36
     9a4:	44 e7       	ldi	r20, 0x74	; 116
     9a6:	59 e4       	ldi	r21, 0x49	; 73
     9a8:	95 d2       	rcall	.+1322   	; 0xed4 <__mulsf3>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	40 e8       	ldi	r20, 0x80	; 128
     9b0:	54 e4       	ldi	r21, 0x44	; 68
     9b2:	90 d2       	rcall	.+1312   	; 0xed4 <__mulsf3>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	34 e2       	ldi	r19, 0x24	; 36
     9b8:	44 e7       	ldi	r20, 0x74	; 116
     9ba:	5b e4       	ldi	r21, 0x4B	; 75
     9bc:	64 d1       	rcall	.+712    	; 0xc86 <__divsf3>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	48 e6       	ldi	r20, 0x68	; 104
     9c4:	52 e4       	ldi	r21, 0x42	; 66
     9c6:	5f d1       	rcall	.+702    	; 0xc86 <__divsf3>
     9c8:	c6 d1       	rcall	.+908    	; 0xd56 <__fixsfsi>
     9ca:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <ultrasonic_left_distance+0x1>
     9ce:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <ultrasonic_left_distance>
      // 15.625khz의 1주기가 64us이다.
      // 64us * 10 == 640us
      // 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
      // sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
   }
}
     9d2:	ff 91       	pop	r31
     9d4:	ef 91       	pop	r30
     9d6:	bf 91       	pop	r27
     9d8:	af 91       	pop	r26
     9da:	9f 91       	pop	r25
     9dc:	8f 91       	pop	r24
     9de:	7f 91       	pop	r23
     9e0:	6f 91       	pop	r22
     9e2:	5f 91       	pop	r21
     9e4:	4f 91       	pop	r20
     9e6:	3f 91       	pop	r19
     9e8:	2f 91       	pop	r18
     9ea:	0f 90       	pop	r0
     9ec:	0b be       	out	0x3b, r0	; 59
     9ee:	0f 90       	pop	r0
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	0f 90       	pop	r0
     9f4:	1f 90       	pop	r1
     9f6:	18 95       	reti

000009f8 <__vector_6>:

ISR(INT5_vect) // CENTER
{
     9f8:	1f 92       	push	r1
     9fa:	0f 92       	push	r0
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	0f 92       	push	r0
     a00:	11 24       	eor	r1, r1
     a02:	0b b6       	in	r0, 0x3b	; 59
     a04:	0f 92       	push	r0
     a06:	2f 93       	push	r18
     a08:	3f 93       	push	r19
     a0a:	4f 93       	push	r20
     a0c:	5f 93       	push	r21
     a0e:	6f 93       	push	r22
     a10:	7f 93       	push	r23
     a12:	8f 93       	push	r24
     a14:	9f 93       	push	r25
     a16:	af 93       	push	r26
     a18:	bf 93       	push	r27
     a1a:	ef 93       	push	r30
     a1c:	ff 93       	push	r31
   // 1. 상승 edge
   if (ECHO_PIN_CENTER & (1 << ECHO_CENTER))
     a1e:	0d 9b       	sbis	0x01, 5	; 1
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <__vector_6+0x34>
   {
      TCNT3 = 0;
     a22:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a26:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a2a:	20 c0       	rjmp	.+64     	; 0xa6c <__vector_6+0x74>
   }
   // 2. 하강 edge
   else
   {
      // ECHO 핀에 들어온 펄스 길이를 us로 환산
      ultrasonic_center_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     a2c:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a30:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	bf d1       	rcall	.+894    	; 0xdb8 <__floatunsisf>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	34 e2       	ldi	r19, 0x24	; 36
     a3e:	44 e7       	ldi	r20, 0x74	; 116
     a40:	59 e4       	ldi	r21, 0x49	; 73
     a42:	48 d2       	rcall	.+1168   	; 0xed4 <__mulsf3>
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e8       	ldi	r20, 0x80	; 128
     a4a:	54 e4       	ldi	r21, 0x44	; 68
     a4c:	43 d2       	rcall	.+1158   	; 0xed4 <__mulsf3>
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	34 e2       	ldi	r19, 0x24	; 36
     a52:	44 e7       	ldi	r20, 0x74	; 116
     a54:	5b e4       	ldi	r21, 0x4B	; 75
     a56:	17 d1       	rcall	.+558    	; 0xc86 <__divsf3>
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	48 e6       	ldi	r20, 0x68	; 104
     a5e:	52 e4       	ldi	r21, 0x42	; 66
     a60:	12 d1       	rcall	.+548    	; 0xc86 <__divsf3>
     a62:	79 d1       	rcall	.+754    	; 0xd56 <__fixsfsi>
     a64:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <ultrasonic_center_distance+0x1>
     a68:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <ultrasonic_center_distance>
      // 15.625khz의 1주기가 64us이다.
      // 64us * 10 == 640us
      // 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
      // sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
   }
}
     a6c:	ff 91       	pop	r31
     a6e:	ef 91       	pop	r30
     a70:	bf 91       	pop	r27
     a72:	af 91       	pop	r26
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	7f 91       	pop	r23
     a7a:	6f 91       	pop	r22
     a7c:	5f 91       	pop	r21
     a7e:	4f 91       	pop	r20
     a80:	3f 91       	pop	r19
     a82:	2f 91       	pop	r18
     a84:	0f 90       	pop	r0
     a86:	0b be       	out	0x3b, r0	; 59
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	0f 90       	pop	r0
     a8e:	1f 90       	pop	r1
     a90:	18 95       	reti

00000a92 <__vector_7>:

ISR(INT6_vect) // RIGHT
{
     a92:	1f 92       	push	r1
     a94:	0f 92       	push	r0
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	0f 92       	push	r0
     a9a:	11 24       	eor	r1, r1
     a9c:	0b b6       	in	r0, 0x3b	; 59
     a9e:	0f 92       	push	r0
     aa0:	2f 93       	push	r18
     aa2:	3f 93       	push	r19
     aa4:	4f 93       	push	r20
     aa6:	5f 93       	push	r21
     aa8:	6f 93       	push	r22
     aaa:	7f 93       	push	r23
     aac:	8f 93       	push	r24
     aae:	9f 93       	push	r25
     ab0:	af 93       	push	r26
     ab2:	bf 93       	push	r27
     ab4:	ef 93       	push	r30
     ab6:	ff 93       	push	r31
   // 1. 상승 edge
   if (ECHO_PIN_RIGHT & (1 << ECHO_RIGHT))
     ab8:	0e 9b       	sbis	0x01, 6	; 1
     aba:	05 c0       	rjmp	.+10     	; 0xac6 <__vector_7+0x34>
   {
      TCNT3 = 0;
     abc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ac0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     ac4:	20 c0       	rjmp	.+64     	; 0xb06 <__vector_7+0x74>
   }
   // 2. 하강 edge
   else
   {
      // ECHO 핀에 들어온 펄스 길이를 us로 환산
      ultrasonic_right_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     ac6:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     aca:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	72 d1       	rcall	.+740    	; 0xdb8 <__floatunsisf>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	34 e2       	ldi	r19, 0x24	; 36
     ad8:	44 e7       	ldi	r20, 0x74	; 116
     ada:	59 e4       	ldi	r21, 0x49	; 73
     adc:	fb d1       	rcall	.+1014   	; 0xed4 <__mulsf3>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e8       	ldi	r20, 0x80	; 128
     ae4:	54 e4       	ldi	r21, 0x44	; 68
     ae6:	f6 d1       	rcall	.+1004   	; 0xed4 <__mulsf3>
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	34 e2       	ldi	r19, 0x24	; 36
     aec:	44 e7       	ldi	r20, 0x74	; 116
     aee:	5b e4       	ldi	r21, 0x4B	; 75
     af0:	ca d0       	rcall	.+404    	; 0xc86 <__divsf3>
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	48 e6       	ldi	r20, 0x68	; 104
     af8:	52 e4       	ldi	r21, 0x42	; 66
     afa:	c5 d0       	rcall	.+394    	; 0xc86 <__divsf3>
     afc:	2c d1       	rcall	.+600    	; 0xd56 <__fixsfsi>
     afe:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <ultrasonic_right_distance+0x1>
     b02:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <ultrasonic_right_distance>
      // 15.625khz의 1주기가 64us이다.
      // 64us * 10 == 640us
      // 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
      // sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
   }
}
     b06:	ff 91       	pop	r31
     b08:	ef 91       	pop	r30
     b0a:	bf 91       	pop	r27
     b0c:	af 91       	pop	r26
     b0e:	9f 91       	pop	r25
     b10:	8f 91       	pop	r24
     b12:	7f 91       	pop	r23
     b14:	6f 91       	pop	r22
     b16:	5f 91       	pop	r21
     b18:	4f 91       	pop	r20
     b1a:	3f 91       	pop	r19
     b1c:	2f 91       	pop	r18
     b1e:	0f 90       	pop	r0
     b20:	0b be       	out	0x3b, r0	; 59
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <init_ultrasonic>:

void init_ultrasonic()
{
   //////////////// left ////////////////
   TRIG_DDR_LEFT |= 1 << TRIG_LEFT; // output mode로 설정
     b2c:	8a b3       	in	r24, 0x1a	; 26
     b2e:	81 60       	ori	r24, 0x01	; 1
     b30:	8a bb       	out	0x1a, r24	; 26
   ECHO_DDR_LEFT &= ~(1 << ECHO_LEFT); // input mode로 설정
     b32:	82 b1       	in	r24, 0x02	; 2
     b34:	8f 7e       	andi	r24, 0xEF	; 239
     b36:	82 b9       	out	0x02, r24	; 2
   
   // 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
   // INT0~3은 EICRA, INT4~7은 EICRB 레지스터
   EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
     b38:	8a b7       	in	r24, 0x3a	; 58
     b3a:	81 60       	ori	r24, 0x01	; 1
     b3c:	8a bf       	out	0x3a, r24	; 58
   
   // 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
   // 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
   // 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us   
   TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     b3e:	ea e8       	ldi	r30, 0x8A	; 138
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	85 60       	ori	r24, 0x05	; 5
     b46:	80 83       	st	Z, r24
   EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
     b48:	89 b7       	in	r24, 0x39	; 57
     b4a:	80 61       	ori	r24, 0x10	; 16
     b4c:	89 bf       	out	0x39, r24	; 57
   
   
   //////////////// center ////////////////
   TRIG_DDR_CENTER |= 1 << TRIG_CENTER; // output mode로 설정
     b4e:	8a b3       	in	r24, 0x1a	; 26
     b50:	82 60       	ori	r24, 0x02	; 2
     b52:	8a bb       	out	0x1a, r24	; 26
   ECHO_DDR_CENTER &= ~(1 << ECHO_CENTER); // input mode로 설정
     b54:	82 b1       	in	r24, 0x02	; 2
     b56:	8f 7d       	andi	r24, 0xDF	; 223
     b58:	82 b9       	out	0x02, r24	; 2
   
   // 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
   // INT0~3은 EICRA, INT4~7은 EICRB 레지스터
   EICRB |= 0 << ISC51 | 1 << ISC50; // INT5니까 EICRB에서 ISC51, 50
     b5a:	8a b7       	in	r24, 0x3a	; 58
     b5c:	84 60       	ori	r24, 0x04	; 4
     b5e:	8a bf       	out	0x3a, r24	; 58
   
   // 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
   // 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
   // 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
   TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     b60:	80 81       	ld	r24, Z
     b62:	85 60       	ori	r24, 0x05	; 5
     b64:	80 83       	st	Z, r24
   EIMSK |= 1 << INT5; // 외부 인터럽트4번 (ECHO) 사용
     b66:	89 b7       	in	r24, 0x39	; 57
     b68:	80 62       	ori	r24, 0x20	; 32
     b6a:	89 bf       	out	0x39, r24	; 57
   
   
   //////////////// right ////////////////
   TRIG_DDR_RIGHT |= 1 << TRIG_RIGHT; // output mode로 설정
     b6c:	8a b3       	in	r24, 0x1a	; 26
     b6e:	84 60       	ori	r24, 0x04	; 4
     b70:	8a bb       	out	0x1a, r24	; 26
   ECHO_DDR_RIGHT &= ~(1 << ECHO_RIGHT); // input mode로 설정
     b72:	82 b1       	in	r24, 0x02	; 2
     b74:	8f 7b       	andi	r24, 0xBF	; 191
     b76:	82 b9       	out	0x02, r24	; 2
   
   // 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
   // INT0~3은 EICRA, INT4~7은 EICRB 레지스터
   EICRB |= 0 << ISC61 | 1 << ISC60; // INT6니까 EICRB에서 ISC61, 60
     b78:	8a b7       	in	r24, 0x3a	; 58
     b7a:	80 61       	ori	r24, 0x10	; 16
     b7c:	8a bf       	out	0x3a, r24	; 58
   
   // 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
   // 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
   // 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
   TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     b7e:	80 81       	ld	r24, Z
     b80:	85 60       	ori	r24, 0x05	; 5
     b82:	80 83       	st	Z, r24
   EIMSK |= 1 << INT6; // 외부 인터럽트4번 (ECHO) 사용
     b84:	89 b7       	in	r24, 0x39	; 57
     b86:	80 64       	ori	r24, 0x40	; 64
     b88:	89 bf       	out	0x39, r24	; 57
     b8a:	08 95       	ret

00000b8c <ultrasonic_trigger>:
}

void ultrasonic_trigger()
{
      ////////// left //////////
      TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // 해당되는 포트만 LOW로 만듦
     b8c:	8b b3       	in	r24, 0x1b	; 27
     b8e:	8e 7f       	andi	r24, 0xFE	; 254
     b90:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b92:	25 e0       	ldi	r18, 0x05	; 5
     b94:	2a 95       	dec	r18
     b96:	f1 f7       	brne	.-4      	; 0xb94 <ultrasonic_trigger+0x8>
     b98:	00 00       	nop
      _delay_us(1);
      TRIG_PORT_LEFT |= 1 << TRIG_LEFT; // HIGH
     b9a:	8b b3       	in	r24, 0x1b	; 27
     b9c:	81 60       	ori	r24, 0x01	; 1
     b9e:	8b bb       	out	0x1b, r24	; 27
     ba0:	80 e5       	ldi	r24, 0x50	; 80
     ba2:	8a 95       	dec	r24
     ba4:	f1 f7       	brne	.-4      	; 0xba2 <ultrasonic_trigger+0x16>
      _delay_us(15); // 규격에는 10us인데 reduance
      TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // LOW
     ba6:	8b b3       	in	r24, 0x1b	; 27
     ba8:	8e 7f       	andi	r24, 0xFE	; 254
     baa:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bac:	9f ef       	ldi	r25, 0xFF	; 255
     bae:	20 e7       	ldi	r18, 0x70	; 112
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	91 50       	subi	r25, 0x01	; 1
     bb4:	20 40       	sbci	r18, 0x00	; 0
     bb6:	80 40       	sbci	r24, 0x00	; 0
     bb8:	e1 f7       	brne	.-8      	; 0xbb2 <ultrasonic_trigger+0x26>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <ultrasonic_trigger+0x30>
     bbc:	00 00       	nop
      _delay_ms(50); // delay 기다리는 시간을 timer0 변수로 체크할 수 있도록 개선
      // 초음파센서 echo 응답 대기시간이 최대 38ms
      
      ////////// center //////////
      TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // 해당되는 포트만 LOW로 만듦
     bbe:	8b b3       	in	r24, 0x1b	; 27
     bc0:	8d 7f       	andi	r24, 0xFD	; 253
     bc2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bc4:	95 e0       	ldi	r25, 0x05	; 5
     bc6:	9a 95       	dec	r25
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <ultrasonic_trigger+0x3a>
     bca:	00 00       	nop
      _delay_us(1);
      TRIG_PORT_CENTER |= 1 << TRIG_CENTER; // HIGH
     bcc:	8b b3       	in	r24, 0x1b	; 27
     bce:	82 60       	ori	r24, 0x02	; 2
     bd0:	8b bb       	out	0x1b, r24	; 27
     bd2:	20 e5       	ldi	r18, 0x50	; 80
     bd4:	2a 95       	dec	r18
     bd6:	f1 f7       	brne	.-4      	; 0xbd4 <ultrasonic_trigger+0x48>
      _delay_us(15); // 규격에는 10us인데 reduance
      TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // LOW
     bd8:	8b b3       	in	r24, 0x1b	; 27
     bda:	8d 7f       	andi	r24, 0xFD	; 253
     bdc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	90 e7       	ldi	r25, 0x70	; 112
     be2:	22 e0       	ldi	r18, 0x02	; 2
     be4:	81 50       	subi	r24, 0x01	; 1
     be6:	90 40       	sbci	r25, 0x00	; 0
     be8:	20 40       	sbci	r18, 0x00	; 0
     bea:	e1 f7       	brne	.-8      	; 0xbe4 <ultrasonic_trigger+0x58>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <ultrasonic_trigger+0x62>
     bee:	00 00       	nop
      _delay_ms(50); // delay 기다리는 시간을 timer0 변수로 체크할 수 있도록 개선
      
      ////////// right //////////
      TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // 해당되는 포트만 LOW로 만듦
     bf0:	8b b3       	in	r24, 0x1b	; 27
     bf2:	8b 7f       	andi	r24, 0xFB	; 251
     bf4:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bf6:	85 e0       	ldi	r24, 0x05	; 5
     bf8:	8a 95       	dec	r24
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <ultrasonic_trigger+0x6c>
     bfc:	00 00       	nop
      _delay_us(1);
      TRIG_PORT_RIGHT |= 1 << TRIG_RIGHT; // HIGH
     bfe:	8b b3       	in	r24, 0x1b	; 27
     c00:	84 60       	ori	r24, 0x04	; 4
     c02:	8b bb       	out	0x1b, r24	; 27
     c04:	90 e5       	ldi	r25, 0x50	; 80
     c06:	9a 95       	dec	r25
     c08:	f1 f7       	brne	.-4      	; 0xc06 <ultrasonic_trigger+0x7a>
      _delay_us(15); // 규격에는 10us인데 reduance
      TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // LOW
     c0a:	8b b3       	in	r24, 0x1b	; 27
     c0c:	8b 7f       	andi	r24, 0xFB	; 251
     c0e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c10:	2f ef       	ldi	r18, 0xFF	; 255
     c12:	80 e7       	ldi	r24, 0x70	; 112
     c14:	92 e0       	ldi	r25, 0x02	; 2
     c16:	21 50       	subi	r18, 0x01	; 1
     c18:	80 40       	sbci	r24, 0x00	; 0
     c1a:	90 40       	sbci	r25, 0x00	; 0
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <ultrasonic_trigger+0x8a>
     c1e:	00 c0       	rjmp	.+0      	; 0xc20 <ultrasonic_trigger+0x94>
     c20:	00 00       	nop
     c22:	08 95       	ret

00000c24 <distance_check>:
      _delay_ms(50); // delay 기다리는 시간을 timer0 변수로 체크할 수 있도록 개선
}

void distance_check(void)
{
      printf("left   :  %5d\n", ultrasonic_left_distance); // printf 찍으면 delay생김
     c24:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_left_distance>
     c28:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     c2c:	9f 93       	push	r25
     c2e:	8f 93       	push	r24
     c30:	85 e2       	ldi	r24, 0x25	; 37
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	9f 93       	push	r25
     c36:	8f 93       	push	r24
     c38:	02 d2       	rcall	.+1028   	; 0x103e <printf>
      printf("center :  %5d\n", ultrasonic_center_distance);
     c3a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ultrasonic_center_distance>
     c3e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ultrasonic_center_distance+0x1>
     c42:	9f 93       	push	r25
     c44:	8f 93       	push	r24
     c46:	84 e3       	ldi	r24, 0x34	; 52
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	9f 93       	push	r25
     c4c:	8f 93       	push	r24
     c4e:	f7 d1       	rcall	.+1006   	; 0x103e <printf>
      printf("right  :  %5d\n", ultrasonic_right_distance);
     c50:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_right_distance>
     c54:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     c58:	9f 93       	push	r25
     c5a:	8f 93       	push	r24
     c5c:	83 e4       	ldi	r24, 0x43	; 67
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	9f 93       	push	r25
     c62:	8f 93       	push	r24

   ultrasonic_trigger(); // 이것도 수정해야한다.
     c64:	ec d1       	rcall	.+984    	; 0x103e <printf>
     c66:	92 df       	rcall	.-220    	; 0xb8c <ultrasonic_trigger>
   func_state = AUTO_MODE_CHECK;
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <func_state+0x1>
     c70:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <func_state>
     c74:	8d b7       	in	r24, 0x3d	; 61
     c76:	9e b7       	in	r25, 0x3e	; 62
     c78:	0c 96       	adiw	r24, 0x0c	; 12
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	9e bf       	out	0x3e, r25	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	8d bf       	out	0x3d, r24	; 61
     c84:	08 95       	ret

00000c86 <__divsf3>:
     c86:	0c d0       	rcall	.+24     	; 0xca0 <__divsf3x>
     c88:	eb c0       	rjmp	.+470    	; 0xe60 <__fp_round>
     c8a:	e3 d0       	rcall	.+454    	; 0xe52 <__fp_pscB>
     c8c:	40 f0       	brcs	.+16     	; 0xc9e <__divsf3+0x18>
     c8e:	da d0       	rcall	.+436    	; 0xe44 <__fp_pscA>
     c90:	30 f0       	brcs	.+12     	; 0xc9e <__divsf3+0x18>
     c92:	21 f4       	brne	.+8      	; 0xc9c <__divsf3+0x16>
     c94:	5f 3f       	cpi	r21, 0xFF	; 255
     c96:	19 f0       	breq	.+6      	; 0xc9e <__divsf3+0x18>
     c98:	cc c0       	rjmp	.+408    	; 0xe32 <__fp_inf>
     c9a:	51 11       	cpse	r21, r1
     c9c:	15 c1       	rjmp	.+554    	; 0xec8 <__fp_szero>
     c9e:	cf c0       	rjmp	.+414    	; 0xe3e <__fp_nan>

00000ca0 <__divsf3x>:
     ca0:	f0 d0       	rcall	.+480    	; 0xe82 <__fp_split3>
     ca2:	98 f3       	brcs	.-26     	; 0xc8a <__divsf3+0x4>

00000ca4 <__divsf3_pse>:
     ca4:	99 23       	and	r25, r25
     ca6:	c9 f3       	breq	.-14     	; 0xc9a <__divsf3+0x14>
     ca8:	55 23       	and	r21, r21
     caa:	b1 f3       	breq	.-20     	; 0xc98 <__divsf3+0x12>
     cac:	95 1b       	sub	r25, r21
     cae:	55 0b       	sbc	r21, r21
     cb0:	bb 27       	eor	r27, r27
     cb2:	aa 27       	eor	r26, r26
     cb4:	62 17       	cp	r22, r18
     cb6:	73 07       	cpc	r23, r19
     cb8:	84 07       	cpc	r24, r20
     cba:	38 f0       	brcs	.+14     	; 0xcca <__divsf3_pse+0x26>
     cbc:	9f 5f       	subi	r25, 0xFF	; 255
     cbe:	5f 4f       	sbci	r21, 0xFF	; 255
     cc0:	22 0f       	add	r18, r18
     cc2:	33 1f       	adc	r19, r19
     cc4:	44 1f       	adc	r20, r20
     cc6:	aa 1f       	adc	r26, r26
     cc8:	a9 f3       	breq	.-22     	; 0xcb4 <__divsf3_pse+0x10>
     cca:	33 d0       	rcall	.+102    	; 0xd32 <__divsf3_pse+0x8e>
     ccc:	0e 2e       	mov	r0, r30
     cce:	3a f0       	brmi	.+14     	; 0xcde <__divsf3_pse+0x3a>
     cd0:	e0 e8       	ldi	r30, 0x80	; 128
     cd2:	30 d0       	rcall	.+96     	; 0xd34 <__divsf3_pse+0x90>
     cd4:	91 50       	subi	r25, 0x01	; 1
     cd6:	50 40       	sbci	r21, 0x00	; 0
     cd8:	e6 95       	lsr	r30
     cda:	00 1c       	adc	r0, r0
     cdc:	ca f7       	brpl	.-14     	; 0xcd0 <__divsf3_pse+0x2c>
     cde:	29 d0       	rcall	.+82     	; 0xd32 <__divsf3_pse+0x8e>
     ce0:	fe 2f       	mov	r31, r30
     ce2:	27 d0       	rcall	.+78     	; 0xd32 <__divsf3_pse+0x8e>
     ce4:	66 0f       	add	r22, r22
     ce6:	77 1f       	adc	r23, r23
     ce8:	88 1f       	adc	r24, r24
     cea:	bb 1f       	adc	r27, r27
     cec:	26 17       	cp	r18, r22
     cee:	37 07       	cpc	r19, r23
     cf0:	48 07       	cpc	r20, r24
     cf2:	ab 07       	cpc	r26, r27
     cf4:	b0 e8       	ldi	r27, 0x80	; 128
     cf6:	09 f0       	breq	.+2      	; 0xcfa <__divsf3_pse+0x56>
     cf8:	bb 0b       	sbc	r27, r27
     cfa:	80 2d       	mov	r24, r0
     cfc:	bf 01       	movw	r22, r30
     cfe:	ff 27       	eor	r31, r31
     d00:	93 58       	subi	r25, 0x83	; 131
     d02:	5f 4f       	sbci	r21, 0xFF	; 255
     d04:	2a f0       	brmi	.+10     	; 0xd10 <__divsf3_pse+0x6c>
     d06:	9e 3f       	cpi	r25, 0xFE	; 254
     d08:	51 05       	cpc	r21, r1
     d0a:	68 f0       	brcs	.+26     	; 0xd26 <__divsf3_pse+0x82>
     d0c:	92 c0       	rjmp	.+292    	; 0xe32 <__fp_inf>
     d0e:	dc c0       	rjmp	.+440    	; 0xec8 <__fp_szero>
     d10:	5f 3f       	cpi	r21, 0xFF	; 255
     d12:	ec f3       	brlt	.-6      	; 0xd0e <__divsf3_pse+0x6a>
     d14:	98 3e       	cpi	r25, 0xE8	; 232
     d16:	dc f3       	brlt	.-10     	; 0xd0e <__divsf3_pse+0x6a>
     d18:	86 95       	lsr	r24
     d1a:	77 95       	ror	r23
     d1c:	67 95       	ror	r22
     d1e:	b7 95       	ror	r27
     d20:	f7 95       	ror	r31
     d22:	9f 5f       	subi	r25, 0xFF	; 255
     d24:	c9 f7       	brne	.-14     	; 0xd18 <__divsf3_pse+0x74>
     d26:	88 0f       	add	r24, r24
     d28:	91 1d       	adc	r25, r1
     d2a:	96 95       	lsr	r25
     d2c:	87 95       	ror	r24
     d2e:	97 f9       	bld	r25, 7
     d30:	08 95       	ret
     d32:	e1 e0       	ldi	r30, 0x01	; 1
     d34:	66 0f       	add	r22, r22
     d36:	77 1f       	adc	r23, r23
     d38:	88 1f       	adc	r24, r24
     d3a:	bb 1f       	adc	r27, r27
     d3c:	62 17       	cp	r22, r18
     d3e:	73 07       	cpc	r23, r19
     d40:	84 07       	cpc	r24, r20
     d42:	ba 07       	cpc	r27, r26
     d44:	20 f0       	brcs	.+8      	; 0xd4e <__divsf3_pse+0xaa>
     d46:	62 1b       	sub	r22, r18
     d48:	73 0b       	sbc	r23, r19
     d4a:	84 0b       	sbc	r24, r20
     d4c:	ba 0b       	sbc	r27, r26
     d4e:	ee 1f       	adc	r30, r30
     d50:	88 f7       	brcc	.-30     	; 0xd34 <__divsf3_pse+0x90>
     d52:	e0 95       	com	r30
     d54:	08 95       	ret

00000d56 <__fixsfsi>:
     d56:	04 d0       	rcall	.+8      	; 0xd60 <__fixunssfsi>
     d58:	68 94       	set
     d5a:	b1 11       	cpse	r27, r1
     d5c:	b5 c0       	rjmp	.+362    	; 0xec8 <__fp_szero>
     d5e:	08 95       	ret

00000d60 <__fixunssfsi>:
     d60:	98 d0       	rcall	.+304    	; 0xe92 <__fp_splitA>
     d62:	88 f0       	brcs	.+34     	; 0xd86 <__fixunssfsi+0x26>
     d64:	9f 57       	subi	r25, 0x7F	; 127
     d66:	90 f0       	brcs	.+36     	; 0xd8c <__fixunssfsi+0x2c>
     d68:	b9 2f       	mov	r27, r25
     d6a:	99 27       	eor	r25, r25
     d6c:	b7 51       	subi	r27, 0x17	; 23
     d6e:	a0 f0       	brcs	.+40     	; 0xd98 <__fixunssfsi+0x38>
     d70:	d1 f0       	breq	.+52     	; 0xda6 <__fixunssfsi+0x46>
     d72:	66 0f       	add	r22, r22
     d74:	77 1f       	adc	r23, r23
     d76:	88 1f       	adc	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	1a f0       	brmi	.+6      	; 0xd82 <__fixunssfsi+0x22>
     d7c:	ba 95       	dec	r27
     d7e:	c9 f7       	brne	.-14     	; 0xd72 <__fixunssfsi+0x12>
     d80:	12 c0       	rjmp	.+36     	; 0xda6 <__fixunssfsi+0x46>
     d82:	b1 30       	cpi	r27, 0x01	; 1
     d84:	81 f0       	breq	.+32     	; 0xda6 <__fixunssfsi+0x46>
     d86:	9f d0       	rcall	.+318    	; 0xec6 <__fp_zero>
     d88:	b1 e0       	ldi	r27, 0x01	; 1
     d8a:	08 95       	ret
     d8c:	9c c0       	rjmp	.+312    	; 0xec6 <__fp_zero>
     d8e:	67 2f       	mov	r22, r23
     d90:	78 2f       	mov	r23, r24
     d92:	88 27       	eor	r24, r24
     d94:	b8 5f       	subi	r27, 0xF8	; 248
     d96:	39 f0       	breq	.+14     	; 0xda6 <__fixunssfsi+0x46>
     d98:	b9 3f       	cpi	r27, 0xF9	; 249
     d9a:	cc f3       	brlt	.-14     	; 0xd8e <__fixunssfsi+0x2e>
     d9c:	86 95       	lsr	r24
     d9e:	77 95       	ror	r23
     da0:	67 95       	ror	r22
     da2:	b3 95       	inc	r27
     da4:	d9 f7       	brne	.-10     	; 0xd9c <__fixunssfsi+0x3c>
     da6:	3e f4       	brtc	.+14     	; 0xdb6 <__fixunssfsi+0x56>
     da8:	90 95       	com	r25
     daa:	80 95       	com	r24
     dac:	70 95       	com	r23
     dae:	61 95       	neg	r22
     db0:	7f 4f       	sbci	r23, 0xFF	; 255
     db2:	8f 4f       	sbci	r24, 0xFF	; 255
     db4:	9f 4f       	sbci	r25, 0xFF	; 255
     db6:	08 95       	ret

00000db8 <__floatunsisf>:
     db8:	e8 94       	clt
     dba:	09 c0       	rjmp	.+18     	; 0xdce <__floatsisf+0x12>

00000dbc <__floatsisf>:
     dbc:	97 fb       	bst	r25, 7
     dbe:	3e f4       	brtc	.+14     	; 0xdce <__floatsisf+0x12>
     dc0:	90 95       	com	r25
     dc2:	80 95       	com	r24
     dc4:	70 95       	com	r23
     dc6:	61 95       	neg	r22
     dc8:	7f 4f       	sbci	r23, 0xFF	; 255
     dca:	8f 4f       	sbci	r24, 0xFF	; 255
     dcc:	9f 4f       	sbci	r25, 0xFF	; 255
     dce:	99 23       	and	r25, r25
     dd0:	a9 f0       	breq	.+42     	; 0xdfc <__floatsisf+0x40>
     dd2:	f9 2f       	mov	r31, r25
     dd4:	96 e9       	ldi	r25, 0x96	; 150
     dd6:	bb 27       	eor	r27, r27
     dd8:	93 95       	inc	r25
     dda:	f6 95       	lsr	r31
     ddc:	87 95       	ror	r24
     dde:	77 95       	ror	r23
     de0:	67 95       	ror	r22
     de2:	b7 95       	ror	r27
     de4:	f1 11       	cpse	r31, r1
     de6:	f8 cf       	rjmp	.-16     	; 0xdd8 <__floatsisf+0x1c>
     de8:	fa f4       	brpl	.+62     	; 0xe28 <__floatsisf+0x6c>
     dea:	bb 0f       	add	r27, r27
     dec:	11 f4       	brne	.+4      	; 0xdf2 <__floatsisf+0x36>
     dee:	60 ff       	sbrs	r22, 0
     df0:	1b c0       	rjmp	.+54     	; 0xe28 <__floatsisf+0x6c>
     df2:	6f 5f       	subi	r22, 0xFF	; 255
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	8f 4f       	sbci	r24, 0xFF	; 255
     df8:	9f 4f       	sbci	r25, 0xFF	; 255
     dfa:	16 c0       	rjmp	.+44     	; 0xe28 <__floatsisf+0x6c>
     dfc:	88 23       	and	r24, r24
     dfe:	11 f0       	breq	.+4      	; 0xe04 <__floatsisf+0x48>
     e00:	96 e9       	ldi	r25, 0x96	; 150
     e02:	11 c0       	rjmp	.+34     	; 0xe26 <__floatsisf+0x6a>
     e04:	77 23       	and	r23, r23
     e06:	21 f0       	breq	.+8      	; 0xe10 <__floatsisf+0x54>
     e08:	9e e8       	ldi	r25, 0x8E	; 142
     e0a:	87 2f       	mov	r24, r23
     e0c:	76 2f       	mov	r23, r22
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <__floatsisf+0x5e>
     e10:	66 23       	and	r22, r22
     e12:	71 f0       	breq	.+28     	; 0xe30 <__floatsisf+0x74>
     e14:	96 e8       	ldi	r25, 0x86	; 134
     e16:	86 2f       	mov	r24, r22
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	2a f0       	brmi	.+10     	; 0xe28 <__floatsisf+0x6c>
     e1e:	9a 95       	dec	r25
     e20:	66 0f       	add	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	88 1f       	adc	r24, r24
     e26:	da f7       	brpl	.-10     	; 0xe1e <__floatsisf+0x62>
     e28:	88 0f       	add	r24, r24
     e2a:	96 95       	lsr	r25
     e2c:	87 95       	ror	r24
     e2e:	97 f9       	bld	r25, 7
     e30:	08 95       	ret

00000e32 <__fp_inf>:
     e32:	97 f9       	bld	r25, 7
     e34:	9f 67       	ori	r25, 0x7F	; 127
     e36:	80 e8       	ldi	r24, 0x80	; 128
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	08 95       	ret

00000e3e <__fp_nan>:
     e3e:	9f ef       	ldi	r25, 0xFF	; 255
     e40:	80 ec       	ldi	r24, 0xC0	; 192
     e42:	08 95       	ret

00000e44 <__fp_pscA>:
     e44:	00 24       	eor	r0, r0
     e46:	0a 94       	dec	r0
     e48:	16 16       	cp	r1, r22
     e4a:	17 06       	cpc	r1, r23
     e4c:	18 06       	cpc	r1, r24
     e4e:	09 06       	cpc	r0, r25
     e50:	08 95       	ret

00000e52 <__fp_pscB>:
     e52:	00 24       	eor	r0, r0
     e54:	0a 94       	dec	r0
     e56:	12 16       	cp	r1, r18
     e58:	13 06       	cpc	r1, r19
     e5a:	14 06       	cpc	r1, r20
     e5c:	05 06       	cpc	r0, r21
     e5e:	08 95       	ret

00000e60 <__fp_round>:
     e60:	09 2e       	mov	r0, r25
     e62:	03 94       	inc	r0
     e64:	00 0c       	add	r0, r0
     e66:	11 f4       	brne	.+4      	; 0xe6c <__fp_round+0xc>
     e68:	88 23       	and	r24, r24
     e6a:	52 f0       	brmi	.+20     	; 0xe80 <__fp_round+0x20>
     e6c:	bb 0f       	add	r27, r27
     e6e:	40 f4       	brcc	.+16     	; 0xe80 <__fp_round+0x20>
     e70:	bf 2b       	or	r27, r31
     e72:	11 f4       	brne	.+4      	; 0xe78 <__fp_round+0x18>
     e74:	60 ff       	sbrs	r22, 0
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <__fp_round+0x20>
     e78:	6f 5f       	subi	r22, 0xFF	; 255
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	8f 4f       	sbci	r24, 0xFF	; 255
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
     e80:	08 95       	ret

00000e82 <__fp_split3>:
     e82:	57 fd       	sbrc	r21, 7
     e84:	90 58       	subi	r25, 0x80	; 128
     e86:	44 0f       	add	r20, r20
     e88:	55 1f       	adc	r21, r21
     e8a:	59 f0       	breq	.+22     	; 0xea2 <__fp_splitA+0x10>
     e8c:	5f 3f       	cpi	r21, 0xFF	; 255
     e8e:	71 f0       	breq	.+28     	; 0xeac <__fp_splitA+0x1a>
     e90:	47 95       	ror	r20

00000e92 <__fp_splitA>:
     e92:	88 0f       	add	r24, r24
     e94:	97 fb       	bst	r25, 7
     e96:	99 1f       	adc	r25, r25
     e98:	61 f0       	breq	.+24     	; 0xeb2 <__fp_splitA+0x20>
     e9a:	9f 3f       	cpi	r25, 0xFF	; 255
     e9c:	79 f0       	breq	.+30     	; 0xebc <__fp_splitA+0x2a>
     e9e:	87 95       	ror	r24
     ea0:	08 95       	ret
     ea2:	12 16       	cp	r1, r18
     ea4:	13 06       	cpc	r1, r19
     ea6:	14 06       	cpc	r1, r20
     ea8:	55 1f       	adc	r21, r21
     eaa:	f2 cf       	rjmp	.-28     	; 0xe90 <__fp_split3+0xe>
     eac:	46 95       	lsr	r20
     eae:	f1 df       	rcall	.-30     	; 0xe92 <__fp_splitA>
     eb0:	08 c0       	rjmp	.+16     	; 0xec2 <__fp_splitA+0x30>
     eb2:	16 16       	cp	r1, r22
     eb4:	17 06       	cpc	r1, r23
     eb6:	18 06       	cpc	r1, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	f1 cf       	rjmp	.-30     	; 0xe9e <__fp_splitA+0xc>
     ebc:	86 95       	lsr	r24
     ebe:	71 05       	cpc	r23, r1
     ec0:	61 05       	cpc	r22, r1
     ec2:	08 94       	sec
     ec4:	08 95       	ret

00000ec6 <__fp_zero>:
     ec6:	e8 94       	clt

00000ec8 <__fp_szero>:
     ec8:	bb 27       	eor	r27, r27
     eca:	66 27       	eor	r22, r22
     ecc:	77 27       	eor	r23, r23
     ece:	cb 01       	movw	r24, r22
     ed0:	97 f9       	bld	r25, 7
     ed2:	08 95       	ret

00000ed4 <__mulsf3>:
     ed4:	0b d0       	rcall	.+22     	; 0xeec <__mulsf3x>
     ed6:	c4 cf       	rjmp	.-120    	; 0xe60 <__fp_round>
     ed8:	b5 df       	rcall	.-150    	; 0xe44 <__fp_pscA>
     eda:	28 f0       	brcs	.+10     	; 0xee6 <__mulsf3+0x12>
     edc:	ba df       	rcall	.-140    	; 0xe52 <__fp_pscB>
     ede:	18 f0       	brcs	.+6      	; 0xee6 <__mulsf3+0x12>
     ee0:	95 23       	and	r25, r21
     ee2:	09 f0       	breq	.+2      	; 0xee6 <__mulsf3+0x12>
     ee4:	a6 cf       	rjmp	.-180    	; 0xe32 <__fp_inf>
     ee6:	ab cf       	rjmp	.-170    	; 0xe3e <__fp_nan>
     ee8:	11 24       	eor	r1, r1
     eea:	ee cf       	rjmp	.-36     	; 0xec8 <__fp_szero>

00000eec <__mulsf3x>:
     eec:	ca df       	rcall	.-108    	; 0xe82 <__fp_split3>
     eee:	a0 f3       	brcs	.-24     	; 0xed8 <__mulsf3+0x4>

00000ef0 <__mulsf3_pse>:
     ef0:	95 9f       	mul	r25, r21
     ef2:	d1 f3       	breq	.-12     	; 0xee8 <__mulsf3+0x14>
     ef4:	95 0f       	add	r25, r21
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	55 1f       	adc	r21, r21
     efa:	62 9f       	mul	r22, r18
     efc:	f0 01       	movw	r30, r0
     efe:	72 9f       	mul	r23, r18
     f00:	bb 27       	eor	r27, r27
     f02:	f0 0d       	add	r31, r0
     f04:	b1 1d       	adc	r27, r1
     f06:	63 9f       	mul	r22, r19
     f08:	aa 27       	eor	r26, r26
     f0a:	f0 0d       	add	r31, r0
     f0c:	b1 1d       	adc	r27, r1
     f0e:	aa 1f       	adc	r26, r26
     f10:	64 9f       	mul	r22, r20
     f12:	66 27       	eor	r22, r22
     f14:	b0 0d       	add	r27, r0
     f16:	a1 1d       	adc	r26, r1
     f18:	66 1f       	adc	r22, r22
     f1a:	82 9f       	mul	r24, r18
     f1c:	22 27       	eor	r18, r18
     f1e:	b0 0d       	add	r27, r0
     f20:	a1 1d       	adc	r26, r1
     f22:	62 1f       	adc	r22, r18
     f24:	73 9f       	mul	r23, r19
     f26:	b0 0d       	add	r27, r0
     f28:	a1 1d       	adc	r26, r1
     f2a:	62 1f       	adc	r22, r18
     f2c:	83 9f       	mul	r24, r19
     f2e:	a0 0d       	add	r26, r0
     f30:	61 1d       	adc	r22, r1
     f32:	22 1f       	adc	r18, r18
     f34:	74 9f       	mul	r23, r20
     f36:	33 27       	eor	r19, r19
     f38:	a0 0d       	add	r26, r0
     f3a:	61 1d       	adc	r22, r1
     f3c:	23 1f       	adc	r18, r19
     f3e:	84 9f       	mul	r24, r20
     f40:	60 0d       	add	r22, r0
     f42:	21 1d       	adc	r18, r1
     f44:	82 2f       	mov	r24, r18
     f46:	76 2f       	mov	r23, r22
     f48:	6a 2f       	mov	r22, r26
     f4a:	11 24       	eor	r1, r1
     f4c:	9f 57       	subi	r25, 0x7F	; 127
     f4e:	50 40       	sbci	r21, 0x00	; 0
     f50:	8a f0       	brmi	.+34     	; 0xf74 <__mulsf3_pse+0x84>
     f52:	e1 f0       	breq	.+56     	; 0xf8c <__mulsf3_pse+0x9c>
     f54:	88 23       	and	r24, r24
     f56:	4a f0       	brmi	.+18     	; 0xf6a <__mulsf3_pse+0x7a>
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	bb 1f       	adc	r27, r27
     f5e:	66 1f       	adc	r22, r22
     f60:	77 1f       	adc	r23, r23
     f62:	88 1f       	adc	r24, r24
     f64:	91 50       	subi	r25, 0x01	; 1
     f66:	50 40       	sbci	r21, 0x00	; 0
     f68:	a9 f7       	brne	.-22     	; 0xf54 <__mulsf3_pse+0x64>
     f6a:	9e 3f       	cpi	r25, 0xFE	; 254
     f6c:	51 05       	cpc	r21, r1
     f6e:	70 f0       	brcs	.+28     	; 0xf8c <__mulsf3_pse+0x9c>
     f70:	60 cf       	rjmp	.-320    	; 0xe32 <__fp_inf>
     f72:	aa cf       	rjmp	.-172    	; 0xec8 <__fp_szero>
     f74:	5f 3f       	cpi	r21, 0xFF	; 255
     f76:	ec f3       	brlt	.-6      	; 0xf72 <__mulsf3_pse+0x82>
     f78:	98 3e       	cpi	r25, 0xE8	; 232
     f7a:	dc f3       	brlt	.-10     	; 0xf72 <__mulsf3_pse+0x82>
     f7c:	86 95       	lsr	r24
     f7e:	77 95       	ror	r23
     f80:	67 95       	ror	r22
     f82:	b7 95       	ror	r27
     f84:	f7 95       	ror	r31
     f86:	e7 95       	ror	r30
     f88:	9f 5f       	subi	r25, 0xFF	; 255
     f8a:	c1 f7       	brne	.-16     	; 0xf7c <__mulsf3_pse+0x8c>
     f8c:	fe 2b       	or	r31, r30
     f8e:	88 0f       	add	r24, r24
     f90:	91 1d       	adc	r25, r1
     f92:	96 95       	lsr	r25
     f94:	87 95       	ror	r24
     f96:	97 f9       	bld	r25, 7
     f98:	08 95       	ret

00000f9a <__divmodhi4>:
     f9a:	97 fb       	bst	r25, 7
     f9c:	07 2e       	mov	r0, r23
     f9e:	16 f4       	brtc	.+4      	; 0xfa4 <__divmodhi4+0xa>
     fa0:	00 94       	com	r0
     fa2:	06 d0       	rcall	.+12     	; 0xfb0 <__divmodhi4_neg1>
     fa4:	77 fd       	sbrc	r23, 7
     fa6:	08 d0       	rcall	.+16     	; 0xfb8 <__divmodhi4_neg2>
     fa8:	36 d0       	rcall	.+108    	; 0x1016 <__udivmodhi4>
     faa:	07 fc       	sbrc	r0, 7
     fac:	05 d0       	rcall	.+10     	; 0xfb8 <__divmodhi4_neg2>
     fae:	3e f4       	brtc	.+14     	; 0xfbe <__divmodhi4_exit>

00000fb0 <__divmodhi4_neg1>:
     fb0:	90 95       	com	r25
     fb2:	81 95       	neg	r24
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	08 95       	ret

00000fb8 <__divmodhi4_neg2>:
     fb8:	70 95       	com	r23
     fba:	61 95       	neg	r22
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255

00000fbe <__divmodhi4_exit>:
     fbe:	08 95       	ret

00000fc0 <__udivmodsi4>:
     fc0:	a1 e2       	ldi	r26, 0x21	; 33
     fc2:	1a 2e       	mov	r1, r26
     fc4:	aa 1b       	sub	r26, r26
     fc6:	bb 1b       	sub	r27, r27
     fc8:	fd 01       	movw	r30, r26
     fca:	0d c0       	rjmp	.+26     	; 0xfe6 <__udivmodsi4_ep>

00000fcc <__udivmodsi4_loop>:
     fcc:	aa 1f       	adc	r26, r26
     fce:	bb 1f       	adc	r27, r27
     fd0:	ee 1f       	adc	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	a2 17       	cp	r26, r18
     fd6:	b3 07       	cpc	r27, r19
     fd8:	e4 07       	cpc	r30, r20
     fda:	f5 07       	cpc	r31, r21
     fdc:	20 f0       	brcs	.+8      	; 0xfe6 <__udivmodsi4_ep>
     fde:	a2 1b       	sub	r26, r18
     fe0:	b3 0b       	sbc	r27, r19
     fe2:	e4 0b       	sbc	r30, r20
     fe4:	f5 0b       	sbc	r31, r21

00000fe6 <__udivmodsi4_ep>:
     fe6:	66 1f       	adc	r22, r22
     fe8:	77 1f       	adc	r23, r23
     fea:	88 1f       	adc	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	1a 94       	dec	r1
     ff0:	69 f7       	brne	.-38     	; 0xfcc <__udivmodsi4_loop>
     ff2:	60 95       	com	r22
     ff4:	70 95       	com	r23
     ff6:	80 95       	com	r24
     ff8:	90 95       	com	r25
     ffa:	9b 01       	movw	r18, r22
     ffc:	ac 01       	movw	r20, r24
     ffe:	bd 01       	movw	r22, r26
    1000:	cf 01       	movw	r24, r30
    1002:	08 95       	ret

00001004 <__tablejump2__>:
    1004:	ee 0f       	add	r30, r30
    1006:	ff 1f       	adc	r31, r31
    1008:	00 24       	eor	r0, r0
    100a:	00 1c       	adc	r0, r0
    100c:	0b be       	out	0x3b, r0	; 59
    100e:	07 90       	elpm	r0, Z+
    1010:	f6 91       	elpm	r31, Z
    1012:	e0 2d       	mov	r30, r0
    1014:	09 94       	ijmp

00001016 <__udivmodhi4>:
    1016:	aa 1b       	sub	r26, r26
    1018:	bb 1b       	sub	r27, r27
    101a:	51 e1       	ldi	r21, 0x11	; 17
    101c:	07 c0       	rjmp	.+14     	; 0x102c <__udivmodhi4_ep>

0000101e <__udivmodhi4_loop>:
    101e:	aa 1f       	adc	r26, r26
    1020:	bb 1f       	adc	r27, r27
    1022:	a6 17       	cp	r26, r22
    1024:	b7 07       	cpc	r27, r23
    1026:	10 f0       	brcs	.+4      	; 0x102c <__udivmodhi4_ep>
    1028:	a6 1b       	sub	r26, r22
    102a:	b7 0b       	sbc	r27, r23

0000102c <__udivmodhi4_ep>:
    102c:	88 1f       	adc	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	5a 95       	dec	r21
    1032:	a9 f7       	brne	.-22     	; 0x101e <__udivmodhi4_loop>
    1034:	80 95       	com	r24
    1036:	90 95       	com	r25
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	08 95       	ret

0000103e <printf>:
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	ae 01       	movw	r20, r28
    1048:	4b 5f       	subi	r20, 0xFB	; 251
    104a:	5f 4f       	sbci	r21, 0xFF	; 255
    104c:	fa 01       	movw	r30, r20
    104e:	61 91       	ld	r22, Z+
    1050:	71 91       	ld	r23, Z+
    1052:	af 01       	movw	r20, r30
    1054:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <__iob+0x2>
    1058:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <__iob+0x3>
    105c:	03 d0       	rcall	.+6      	; 0x1064 <vfprintf>
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <vfprintf>:
    1064:	2f 92       	push	r2
    1066:	3f 92       	push	r3
    1068:	4f 92       	push	r4
    106a:	5f 92       	push	r5
    106c:	6f 92       	push	r6
    106e:	7f 92       	push	r7
    1070:	8f 92       	push	r8
    1072:	9f 92       	push	r9
    1074:	af 92       	push	r10
    1076:	bf 92       	push	r11
    1078:	cf 92       	push	r12
    107a:	df 92       	push	r13
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	2b 97       	sbiw	r28, 0x0b	; 11
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	6c 01       	movw	r12, r24
    109a:	7b 01       	movw	r14, r22
    109c:	8a 01       	movw	r16, r20
    109e:	fc 01       	movw	r30, r24
    10a0:	17 82       	std	Z+7, r1	; 0x07
    10a2:	16 82       	std	Z+6, r1	; 0x06
    10a4:	83 81       	ldd	r24, Z+3	; 0x03
    10a6:	81 ff       	sbrs	r24, 1
    10a8:	bf c1       	rjmp	.+894    	; 0x1428 <__stack+0x329>
    10aa:	ce 01       	movw	r24, r28
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	3c 01       	movw	r6, r24
    10b0:	f6 01       	movw	r30, r12
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	f7 01       	movw	r30, r14
    10b6:	93 fd       	sbrc	r25, 3
    10b8:	85 91       	lpm	r24, Z+
    10ba:	93 ff       	sbrs	r25, 3
    10bc:	81 91       	ld	r24, Z+
    10be:	7f 01       	movw	r14, r30
    10c0:	88 23       	and	r24, r24
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <vfprintf+0x62>
    10c4:	ad c1       	rjmp	.+858    	; 0x1420 <__stack+0x321>
    10c6:	85 32       	cpi	r24, 0x25	; 37
    10c8:	39 f4       	brne	.+14     	; 0x10d8 <vfprintf+0x74>
    10ca:	93 fd       	sbrc	r25, 3
    10cc:	85 91       	lpm	r24, Z+
    10ce:	93 ff       	sbrs	r25, 3
    10d0:	81 91       	ld	r24, Z+
    10d2:	7f 01       	movw	r14, r30
    10d4:	85 32       	cpi	r24, 0x25	; 37
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <vfprintf+0x7c>
    10d8:	b6 01       	movw	r22, r12
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	d6 d1       	rcall	.+940    	; 0x148a <fputc>
    10de:	e8 cf       	rjmp	.-48     	; 0x10b0 <vfprintf+0x4c>
    10e0:	91 2c       	mov	r9, r1
    10e2:	21 2c       	mov	r2, r1
    10e4:	31 2c       	mov	r3, r1
    10e6:	ff e1       	ldi	r31, 0x1F	; 31
    10e8:	f3 15       	cp	r31, r3
    10ea:	d8 f0       	brcs	.+54     	; 0x1122 <__stack+0x23>
    10ec:	8b 32       	cpi	r24, 0x2B	; 43
    10ee:	79 f0       	breq	.+30     	; 0x110e <__stack+0xf>
    10f0:	38 f4       	brcc	.+14     	; 0x1100 <__stack+0x1>
    10f2:	80 32       	cpi	r24, 0x20	; 32
    10f4:	79 f0       	breq	.+30     	; 0x1114 <__stack+0x15>
    10f6:	83 32       	cpi	r24, 0x23	; 35
    10f8:	a1 f4       	brne	.+40     	; 0x1122 <__stack+0x23>
    10fa:	23 2d       	mov	r18, r3
    10fc:	20 61       	ori	r18, 0x10	; 16
    10fe:	1d c0       	rjmp	.+58     	; 0x113a <__stack+0x3b>
    1100:	8d 32       	cpi	r24, 0x2D	; 45
    1102:	61 f0       	breq	.+24     	; 0x111c <__stack+0x1d>
    1104:	80 33       	cpi	r24, 0x30	; 48
    1106:	69 f4       	brne	.+26     	; 0x1122 <__stack+0x23>
    1108:	23 2d       	mov	r18, r3
    110a:	21 60       	ori	r18, 0x01	; 1
    110c:	16 c0       	rjmp	.+44     	; 0x113a <__stack+0x3b>
    110e:	83 2d       	mov	r24, r3
    1110:	82 60       	ori	r24, 0x02	; 2
    1112:	38 2e       	mov	r3, r24
    1114:	e3 2d       	mov	r30, r3
    1116:	e4 60       	ori	r30, 0x04	; 4
    1118:	3e 2e       	mov	r3, r30
    111a:	2a c0       	rjmp	.+84     	; 0x1170 <__stack+0x71>
    111c:	f3 2d       	mov	r31, r3
    111e:	f8 60       	ori	r31, 0x08	; 8
    1120:	1d c0       	rjmp	.+58     	; 0x115c <__stack+0x5d>
    1122:	37 fc       	sbrc	r3, 7
    1124:	2d c0       	rjmp	.+90     	; 0x1180 <__stack+0x81>
    1126:	20 ed       	ldi	r18, 0xD0	; 208
    1128:	28 0f       	add	r18, r24
    112a:	2a 30       	cpi	r18, 0x0A	; 10
    112c:	40 f0       	brcs	.+16     	; 0x113e <__stack+0x3f>
    112e:	8e 32       	cpi	r24, 0x2E	; 46
    1130:	b9 f4       	brne	.+46     	; 0x1160 <__stack+0x61>
    1132:	36 fc       	sbrc	r3, 6
    1134:	75 c1       	rjmp	.+746    	; 0x1420 <__stack+0x321>
    1136:	23 2d       	mov	r18, r3
    1138:	20 64       	ori	r18, 0x40	; 64
    113a:	32 2e       	mov	r3, r18
    113c:	19 c0       	rjmp	.+50     	; 0x1170 <__stack+0x71>
    113e:	36 fe       	sbrs	r3, 6
    1140:	06 c0       	rjmp	.+12     	; 0x114e <__stack+0x4f>
    1142:	8a e0       	ldi	r24, 0x0A	; 10
    1144:	98 9e       	mul	r9, r24
    1146:	20 0d       	add	r18, r0
    1148:	11 24       	eor	r1, r1
    114a:	92 2e       	mov	r9, r18
    114c:	11 c0       	rjmp	.+34     	; 0x1170 <__stack+0x71>
    114e:	ea e0       	ldi	r30, 0x0A	; 10
    1150:	2e 9e       	mul	r2, r30
    1152:	20 0d       	add	r18, r0
    1154:	11 24       	eor	r1, r1
    1156:	22 2e       	mov	r2, r18
    1158:	f3 2d       	mov	r31, r3
    115a:	f0 62       	ori	r31, 0x20	; 32
    115c:	3f 2e       	mov	r3, r31
    115e:	08 c0       	rjmp	.+16     	; 0x1170 <__stack+0x71>
    1160:	8c 36       	cpi	r24, 0x6C	; 108
    1162:	21 f4       	brne	.+8      	; 0x116c <__stack+0x6d>
    1164:	83 2d       	mov	r24, r3
    1166:	80 68       	ori	r24, 0x80	; 128
    1168:	38 2e       	mov	r3, r24
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <__stack+0x71>
    116c:	88 36       	cpi	r24, 0x68	; 104
    116e:	41 f4       	brne	.+16     	; 0x1180 <__stack+0x81>
    1170:	f7 01       	movw	r30, r14
    1172:	93 fd       	sbrc	r25, 3
    1174:	85 91       	lpm	r24, Z+
    1176:	93 ff       	sbrs	r25, 3
    1178:	81 91       	ld	r24, Z+
    117a:	7f 01       	movw	r14, r30
    117c:	81 11       	cpse	r24, r1
    117e:	b3 cf       	rjmp	.-154    	; 0x10e6 <vfprintf+0x82>
    1180:	98 2f       	mov	r25, r24
    1182:	9f 7d       	andi	r25, 0xDF	; 223
    1184:	95 54       	subi	r25, 0x45	; 69
    1186:	93 30       	cpi	r25, 0x03	; 3
    1188:	28 f4       	brcc	.+10     	; 0x1194 <__stack+0x95>
    118a:	0c 5f       	subi	r16, 0xFC	; 252
    118c:	1f 4f       	sbci	r17, 0xFF	; 255
    118e:	9f e3       	ldi	r25, 0x3F	; 63
    1190:	99 83       	std	Y+1, r25	; 0x01
    1192:	0d c0       	rjmp	.+26     	; 0x11ae <__stack+0xaf>
    1194:	83 36       	cpi	r24, 0x63	; 99
    1196:	31 f0       	breq	.+12     	; 0x11a4 <__stack+0xa5>
    1198:	83 37       	cpi	r24, 0x73	; 115
    119a:	71 f0       	breq	.+28     	; 0x11b8 <__stack+0xb9>
    119c:	83 35       	cpi	r24, 0x53	; 83
    119e:	09 f0       	breq	.+2      	; 0x11a2 <__stack+0xa3>
    11a0:	55 c0       	rjmp	.+170    	; 0x124c <__stack+0x14d>
    11a2:	20 c0       	rjmp	.+64     	; 0x11e4 <__stack+0xe5>
    11a4:	f8 01       	movw	r30, r16
    11a6:	80 81       	ld	r24, Z
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	0e 5f       	subi	r16, 0xFE	; 254
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255
    11ae:	88 24       	eor	r8, r8
    11b0:	83 94       	inc	r8
    11b2:	91 2c       	mov	r9, r1
    11b4:	53 01       	movw	r10, r6
    11b6:	12 c0       	rjmp	.+36     	; 0x11dc <__stack+0xdd>
    11b8:	28 01       	movw	r4, r16
    11ba:	f2 e0       	ldi	r31, 0x02	; 2
    11bc:	4f 0e       	add	r4, r31
    11be:	51 1c       	adc	r5, r1
    11c0:	f8 01       	movw	r30, r16
    11c2:	a0 80       	ld	r10, Z
    11c4:	b1 80       	ldd	r11, Z+1	; 0x01
    11c6:	36 fe       	sbrs	r3, 6
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <__stack+0xd1>
    11ca:	69 2d       	mov	r22, r9
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <__stack+0xd5>
    11d0:	6f ef       	ldi	r22, 0xFF	; 255
    11d2:	7f ef       	ldi	r23, 0xFF	; 255
    11d4:	c5 01       	movw	r24, r10
    11d6:	4e d1       	rcall	.+668    	; 0x1474 <strnlen>
    11d8:	4c 01       	movw	r8, r24
    11da:	82 01       	movw	r16, r4
    11dc:	f3 2d       	mov	r31, r3
    11de:	ff 77       	andi	r31, 0x7F	; 127
    11e0:	3f 2e       	mov	r3, r31
    11e2:	15 c0       	rjmp	.+42     	; 0x120e <__stack+0x10f>
    11e4:	28 01       	movw	r4, r16
    11e6:	22 e0       	ldi	r18, 0x02	; 2
    11e8:	42 0e       	add	r4, r18
    11ea:	51 1c       	adc	r5, r1
    11ec:	f8 01       	movw	r30, r16
    11ee:	a0 80       	ld	r10, Z
    11f0:	b1 80       	ldd	r11, Z+1	; 0x01
    11f2:	36 fe       	sbrs	r3, 6
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <__stack+0xfd>
    11f6:	69 2d       	mov	r22, r9
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <__stack+0x101>
    11fc:	6f ef       	ldi	r22, 0xFF	; 255
    11fe:	7f ef       	ldi	r23, 0xFF	; 255
    1200:	c5 01       	movw	r24, r10
    1202:	2d d1       	rcall	.+602    	; 0x145e <strnlen_P>
    1204:	4c 01       	movw	r8, r24
    1206:	f3 2d       	mov	r31, r3
    1208:	f0 68       	ori	r31, 0x80	; 128
    120a:	3f 2e       	mov	r3, r31
    120c:	82 01       	movw	r16, r4
    120e:	33 fc       	sbrc	r3, 3
    1210:	19 c0       	rjmp	.+50     	; 0x1244 <__stack+0x145>
    1212:	82 2d       	mov	r24, r2
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	88 16       	cp	r8, r24
    1218:	99 06       	cpc	r9, r25
    121a:	a0 f4       	brcc	.+40     	; 0x1244 <__stack+0x145>
    121c:	b6 01       	movw	r22, r12
    121e:	80 e2       	ldi	r24, 0x20	; 32
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	33 d1       	rcall	.+614    	; 0x148a <fputc>
    1224:	2a 94       	dec	r2
    1226:	f5 cf       	rjmp	.-22     	; 0x1212 <__stack+0x113>
    1228:	f5 01       	movw	r30, r10
    122a:	37 fc       	sbrc	r3, 7
    122c:	85 91       	lpm	r24, Z+
    122e:	37 fe       	sbrs	r3, 7
    1230:	81 91       	ld	r24, Z+
    1232:	5f 01       	movw	r10, r30
    1234:	b6 01       	movw	r22, r12
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	28 d1       	rcall	.+592    	; 0x148a <fputc>
    123a:	21 10       	cpse	r2, r1
    123c:	2a 94       	dec	r2
    123e:	21 e0       	ldi	r18, 0x01	; 1
    1240:	82 1a       	sub	r8, r18
    1242:	91 08       	sbc	r9, r1
    1244:	81 14       	cp	r8, r1
    1246:	91 04       	cpc	r9, r1
    1248:	79 f7       	brne	.-34     	; 0x1228 <__stack+0x129>
    124a:	e1 c0       	rjmp	.+450    	; 0x140e <__stack+0x30f>
    124c:	84 36       	cpi	r24, 0x64	; 100
    124e:	11 f0       	breq	.+4      	; 0x1254 <__stack+0x155>
    1250:	89 36       	cpi	r24, 0x69	; 105
    1252:	39 f5       	brne	.+78     	; 0x12a2 <__stack+0x1a3>
    1254:	f8 01       	movw	r30, r16
    1256:	37 fe       	sbrs	r3, 7
    1258:	07 c0       	rjmp	.+14     	; 0x1268 <__stack+0x169>
    125a:	60 81       	ld	r22, Z
    125c:	71 81       	ldd	r23, Z+1	; 0x01
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	0c 5f       	subi	r16, 0xFC	; 252
    1264:	1f 4f       	sbci	r17, 0xFF	; 255
    1266:	08 c0       	rjmp	.+16     	; 0x1278 <__stack+0x179>
    1268:	60 81       	ld	r22, Z
    126a:	71 81       	ldd	r23, Z+1	; 0x01
    126c:	07 2e       	mov	r0, r23
    126e:	00 0c       	add	r0, r0
    1270:	88 0b       	sbc	r24, r24
    1272:	99 0b       	sbc	r25, r25
    1274:	0e 5f       	subi	r16, 0xFE	; 254
    1276:	1f 4f       	sbci	r17, 0xFF	; 255
    1278:	f3 2d       	mov	r31, r3
    127a:	ff 76       	andi	r31, 0x6F	; 111
    127c:	3f 2e       	mov	r3, r31
    127e:	97 ff       	sbrs	r25, 7
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <__stack+0x195>
    1282:	90 95       	com	r25
    1284:	80 95       	com	r24
    1286:	70 95       	com	r23
    1288:	61 95       	neg	r22
    128a:	7f 4f       	sbci	r23, 0xFF	; 255
    128c:	8f 4f       	sbci	r24, 0xFF	; 255
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	f0 68       	ori	r31, 0x80	; 128
    1292:	3f 2e       	mov	r3, r31
    1294:	2a e0       	ldi	r18, 0x0A	; 10
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	a3 01       	movw	r20, r6
    129a:	33 d1       	rcall	.+614    	; 0x1502 <__ultoa_invert>
    129c:	88 2e       	mov	r8, r24
    129e:	86 18       	sub	r8, r6
    12a0:	44 c0       	rjmp	.+136    	; 0x132a <__stack+0x22b>
    12a2:	85 37       	cpi	r24, 0x75	; 117
    12a4:	31 f4       	brne	.+12     	; 0x12b2 <__stack+0x1b3>
    12a6:	23 2d       	mov	r18, r3
    12a8:	2f 7e       	andi	r18, 0xEF	; 239
    12aa:	b2 2e       	mov	r11, r18
    12ac:	2a e0       	ldi	r18, 0x0A	; 10
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	25 c0       	rjmp	.+74     	; 0x12fc <__stack+0x1fd>
    12b2:	93 2d       	mov	r25, r3
    12b4:	99 7f       	andi	r25, 0xF9	; 249
    12b6:	b9 2e       	mov	r11, r25
    12b8:	8f 36       	cpi	r24, 0x6F	; 111
    12ba:	c1 f0       	breq	.+48     	; 0x12ec <__stack+0x1ed>
    12bc:	18 f4       	brcc	.+6      	; 0x12c4 <__stack+0x1c5>
    12be:	88 35       	cpi	r24, 0x58	; 88
    12c0:	79 f0       	breq	.+30     	; 0x12e0 <__stack+0x1e1>
    12c2:	ae c0       	rjmp	.+348    	; 0x1420 <__stack+0x321>
    12c4:	80 37       	cpi	r24, 0x70	; 112
    12c6:	19 f0       	breq	.+6      	; 0x12ce <__stack+0x1cf>
    12c8:	88 37       	cpi	r24, 0x78	; 120
    12ca:	21 f0       	breq	.+8      	; 0x12d4 <__stack+0x1d5>
    12cc:	a9 c0       	rjmp	.+338    	; 0x1420 <__stack+0x321>
    12ce:	e9 2f       	mov	r30, r25
    12d0:	e0 61       	ori	r30, 0x10	; 16
    12d2:	be 2e       	mov	r11, r30
    12d4:	b4 fe       	sbrs	r11, 4
    12d6:	0d c0       	rjmp	.+26     	; 0x12f2 <__stack+0x1f3>
    12d8:	fb 2d       	mov	r31, r11
    12da:	f4 60       	ori	r31, 0x04	; 4
    12dc:	bf 2e       	mov	r11, r31
    12de:	09 c0       	rjmp	.+18     	; 0x12f2 <__stack+0x1f3>
    12e0:	34 fe       	sbrs	r3, 4
    12e2:	0a c0       	rjmp	.+20     	; 0x12f8 <__stack+0x1f9>
    12e4:	29 2f       	mov	r18, r25
    12e6:	26 60       	ori	r18, 0x06	; 6
    12e8:	b2 2e       	mov	r11, r18
    12ea:	06 c0       	rjmp	.+12     	; 0x12f8 <__stack+0x1f9>
    12ec:	28 e0       	ldi	r18, 0x08	; 8
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <__stack+0x1fd>
    12f2:	20 e1       	ldi	r18, 0x10	; 16
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <__stack+0x1fd>
    12f8:	20 e1       	ldi	r18, 0x10	; 16
    12fa:	32 e0       	ldi	r19, 0x02	; 2
    12fc:	f8 01       	movw	r30, r16
    12fe:	b7 fe       	sbrs	r11, 7
    1300:	07 c0       	rjmp	.+14     	; 0x1310 <__stack+0x211>
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	0c 5f       	subi	r16, 0xFC	; 252
    130c:	1f 4f       	sbci	r17, 0xFF	; 255
    130e:	06 c0       	rjmp	.+12     	; 0x131c <__stack+0x21d>
    1310:	60 81       	ld	r22, Z
    1312:	71 81       	ldd	r23, Z+1	; 0x01
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 5f       	subi	r16, 0xFE	; 254
    131a:	1f 4f       	sbci	r17, 0xFF	; 255
    131c:	a3 01       	movw	r20, r6
    131e:	f1 d0       	rcall	.+482    	; 0x1502 <__ultoa_invert>
    1320:	88 2e       	mov	r8, r24
    1322:	86 18       	sub	r8, r6
    1324:	fb 2d       	mov	r31, r11
    1326:	ff 77       	andi	r31, 0x7F	; 127
    1328:	3f 2e       	mov	r3, r31
    132a:	36 fe       	sbrs	r3, 6
    132c:	0d c0       	rjmp	.+26     	; 0x1348 <__stack+0x249>
    132e:	23 2d       	mov	r18, r3
    1330:	2e 7f       	andi	r18, 0xFE	; 254
    1332:	a2 2e       	mov	r10, r18
    1334:	89 14       	cp	r8, r9
    1336:	58 f4       	brcc	.+22     	; 0x134e <__stack+0x24f>
    1338:	34 fe       	sbrs	r3, 4
    133a:	0b c0       	rjmp	.+22     	; 0x1352 <__stack+0x253>
    133c:	32 fc       	sbrc	r3, 2
    133e:	09 c0       	rjmp	.+18     	; 0x1352 <__stack+0x253>
    1340:	83 2d       	mov	r24, r3
    1342:	8e 7e       	andi	r24, 0xEE	; 238
    1344:	a8 2e       	mov	r10, r24
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <__stack+0x253>
    1348:	b8 2c       	mov	r11, r8
    134a:	a3 2c       	mov	r10, r3
    134c:	03 c0       	rjmp	.+6      	; 0x1354 <__stack+0x255>
    134e:	b8 2c       	mov	r11, r8
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <__stack+0x255>
    1352:	b9 2c       	mov	r11, r9
    1354:	a4 fe       	sbrs	r10, 4
    1356:	0f c0       	rjmp	.+30     	; 0x1376 <__stack+0x277>
    1358:	fe 01       	movw	r30, r28
    135a:	e8 0d       	add	r30, r8
    135c:	f1 1d       	adc	r31, r1
    135e:	80 81       	ld	r24, Z
    1360:	80 33       	cpi	r24, 0x30	; 48
    1362:	21 f4       	brne	.+8      	; 0x136c <__stack+0x26d>
    1364:	9a 2d       	mov	r25, r10
    1366:	99 7e       	andi	r25, 0xE9	; 233
    1368:	a9 2e       	mov	r10, r25
    136a:	09 c0       	rjmp	.+18     	; 0x137e <__stack+0x27f>
    136c:	a2 fe       	sbrs	r10, 2
    136e:	06 c0       	rjmp	.+12     	; 0x137c <__stack+0x27d>
    1370:	b3 94       	inc	r11
    1372:	b3 94       	inc	r11
    1374:	04 c0       	rjmp	.+8      	; 0x137e <__stack+0x27f>
    1376:	8a 2d       	mov	r24, r10
    1378:	86 78       	andi	r24, 0x86	; 134
    137a:	09 f0       	breq	.+2      	; 0x137e <__stack+0x27f>
    137c:	b3 94       	inc	r11
    137e:	a3 fc       	sbrc	r10, 3
    1380:	10 c0       	rjmp	.+32     	; 0x13a2 <__stack+0x2a3>
    1382:	a0 fe       	sbrs	r10, 0
    1384:	06 c0       	rjmp	.+12     	; 0x1392 <__stack+0x293>
    1386:	b2 14       	cp	r11, r2
    1388:	80 f4       	brcc	.+32     	; 0x13aa <__stack+0x2ab>
    138a:	28 0c       	add	r2, r8
    138c:	92 2c       	mov	r9, r2
    138e:	9b 18       	sub	r9, r11
    1390:	0d c0       	rjmp	.+26     	; 0x13ac <__stack+0x2ad>
    1392:	b2 14       	cp	r11, r2
    1394:	58 f4       	brcc	.+22     	; 0x13ac <__stack+0x2ad>
    1396:	b6 01       	movw	r22, r12
    1398:	80 e2       	ldi	r24, 0x20	; 32
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	76 d0       	rcall	.+236    	; 0x148a <fputc>
    139e:	b3 94       	inc	r11
    13a0:	f8 cf       	rjmp	.-16     	; 0x1392 <__stack+0x293>
    13a2:	b2 14       	cp	r11, r2
    13a4:	18 f4       	brcc	.+6      	; 0x13ac <__stack+0x2ad>
    13a6:	2b 18       	sub	r2, r11
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <__stack+0x2af>
    13aa:	98 2c       	mov	r9, r8
    13ac:	21 2c       	mov	r2, r1
    13ae:	a4 fe       	sbrs	r10, 4
    13b0:	0f c0       	rjmp	.+30     	; 0x13d0 <__stack+0x2d1>
    13b2:	b6 01       	movw	r22, r12
    13b4:	80 e3       	ldi	r24, 0x30	; 48
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	68 d0       	rcall	.+208    	; 0x148a <fputc>
    13ba:	a2 fe       	sbrs	r10, 2
    13bc:	16 c0       	rjmp	.+44     	; 0x13ea <__stack+0x2eb>
    13be:	a1 fc       	sbrc	r10, 1
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <__stack+0x2c9>
    13c2:	88 e7       	ldi	r24, 0x78	; 120
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <__stack+0x2cd>
    13c8:	88 e5       	ldi	r24, 0x58	; 88
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	b6 01       	movw	r22, r12
    13ce:	0c c0       	rjmp	.+24     	; 0x13e8 <__stack+0x2e9>
    13d0:	8a 2d       	mov	r24, r10
    13d2:	86 78       	andi	r24, 0x86	; 134
    13d4:	51 f0       	breq	.+20     	; 0x13ea <__stack+0x2eb>
    13d6:	a1 fe       	sbrs	r10, 1
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <__stack+0x2df>
    13da:	8b e2       	ldi	r24, 0x2B	; 43
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <__stack+0x2e1>
    13de:	80 e2       	ldi	r24, 0x20	; 32
    13e0:	a7 fc       	sbrc	r10, 7
    13e2:	8d e2       	ldi	r24, 0x2D	; 45
    13e4:	b6 01       	movw	r22, r12
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	50 d0       	rcall	.+160    	; 0x148a <fputc>
    13ea:	89 14       	cp	r8, r9
    13ec:	30 f4       	brcc	.+12     	; 0x13fa <__stack+0x2fb>
    13ee:	b6 01       	movw	r22, r12
    13f0:	80 e3       	ldi	r24, 0x30	; 48
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	4a d0       	rcall	.+148    	; 0x148a <fputc>
    13f6:	9a 94       	dec	r9
    13f8:	f8 cf       	rjmp	.-16     	; 0x13ea <__stack+0x2eb>
    13fa:	8a 94       	dec	r8
    13fc:	f3 01       	movw	r30, r6
    13fe:	e8 0d       	add	r30, r8
    1400:	f1 1d       	adc	r31, r1
    1402:	80 81       	ld	r24, Z
    1404:	b6 01       	movw	r22, r12
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	40 d0       	rcall	.+128    	; 0x148a <fputc>
    140a:	81 10       	cpse	r8, r1
    140c:	f6 cf       	rjmp	.-20     	; 0x13fa <__stack+0x2fb>
    140e:	22 20       	and	r2, r2
    1410:	09 f4       	brne	.+2      	; 0x1414 <__stack+0x315>
    1412:	4e ce       	rjmp	.-868    	; 0x10b0 <vfprintf+0x4c>
    1414:	b6 01       	movw	r22, r12
    1416:	80 e2       	ldi	r24, 0x20	; 32
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	37 d0       	rcall	.+110    	; 0x148a <fputc>
    141c:	2a 94       	dec	r2
    141e:	f7 cf       	rjmp	.-18     	; 0x140e <__stack+0x30f>
    1420:	f6 01       	movw	r30, r12
    1422:	86 81       	ldd	r24, Z+6	; 0x06
    1424:	97 81       	ldd	r25, Z+7	; 0x07
    1426:	02 c0       	rjmp	.+4      	; 0x142c <__stack+0x32d>
    1428:	8f ef       	ldi	r24, 0xFF	; 255
    142a:	9f ef       	ldi	r25, 0xFF	; 255
    142c:	2b 96       	adiw	r28, 0x0b	; 11
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	bf 90       	pop	r11
    144a:	af 90       	pop	r10
    144c:	9f 90       	pop	r9
    144e:	8f 90       	pop	r8
    1450:	7f 90       	pop	r7
    1452:	6f 90       	pop	r6
    1454:	5f 90       	pop	r5
    1456:	4f 90       	pop	r4
    1458:	3f 90       	pop	r3
    145a:	2f 90       	pop	r2
    145c:	08 95       	ret

0000145e <strnlen_P>:
    145e:	fc 01       	movw	r30, r24
    1460:	05 90       	lpm	r0, Z+
    1462:	61 50       	subi	r22, 0x01	; 1
    1464:	70 40       	sbci	r23, 0x00	; 0
    1466:	01 10       	cpse	r0, r1
    1468:	d8 f7       	brcc	.-10     	; 0x1460 <strnlen_P+0x2>
    146a:	80 95       	com	r24
    146c:	90 95       	com	r25
    146e:	8e 0f       	add	r24, r30
    1470:	9f 1f       	adc	r25, r31
    1472:	08 95       	ret

00001474 <strnlen>:
    1474:	fc 01       	movw	r30, r24
    1476:	61 50       	subi	r22, 0x01	; 1
    1478:	70 40       	sbci	r23, 0x00	; 0
    147a:	01 90       	ld	r0, Z+
    147c:	01 10       	cpse	r0, r1
    147e:	d8 f7       	brcc	.-10     	; 0x1476 <strnlen+0x2>
    1480:	80 95       	com	r24
    1482:	90 95       	com	r25
    1484:	8e 0f       	add	r24, r30
    1486:	9f 1f       	adc	r25, r31
    1488:	08 95       	ret

0000148a <fputc>:
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	fb 01       	movw	r30, r22
    1494:	23 81       	ldd	r18, Z+3	; 0x03
    1496:	21 fd       	sbrc	r18, 1
    1498:	03 c0       	rjmp	.+6      	; 0x14a0 <fputc+0x16>
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	9f ef       	ldi	r25, 0xFF	; 255
    149e:	2c c0       	rjmp	.+88     	; 0x14f8 <fputc+0x6e>
    14a0:	22 ff       	sbrs	r18, 2
    14a2:	16 c0       	rjmp	.+44     	; 0x14d0 <fputc+0x46>
    14a4:	46 81       	ldd	r20, Z+6	; 0x06
    14a6:	57 81       	ldd	r21, Z+7	; 0x07
    14a8:	24 81       	ldd	r18, Z+4	; 0x04
    14aa:	35 81       	ldd	r19, Z+5	; 0x05
    14ac:	42 17       	cp	r20, r18
    14ae:	53 07       	cpc	r21, r19
    14b0:	44 f4       	brge	.+16     	; 0x14c2 <fputc+0x38>
    14b2:	a0 81       	ld	r26, Z
    14b4:	b1 81       	ldd	r27, Z+1	; 0x01
    14b6:	9d 01       	movw	r18, r26
    14b8:	2f 5f       	subi	r18, 0xFF	; 255
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255
    14bc:	31 83       	std	Z+1, r19	; 0x01
    14be:	20 83       	st	Z, r18
    14c0:	8c 93       	st	X, r24
    14c2:	26 81       	ldd	r18, Z+6	; 0x06
    14c4:	37 81       	ldd	r19, Z+7	; 0x07
    14c6:	2f 5f       	subi	r18, 0xFF	; 255
    14c8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ca:	37 83       	std	Z+7, r19	; 0x07
    14cc:	26 83       	std	Z+6, r18	; 0x06
    14ce:	14 c0       	rjmp	.+40     	; 0x14f8 <fputc+0x6e>
    14d0:	8b 01       	movw	r16, r22
    14d2:	ec 01       	movw	r28, r24
    14d4:	fb 01       	movw	r30, r22
    14d6:	00 84       	ldd	r0, Z+8	; 0x08
    14d8:	f1 85       	ldd	r31, Z+9	; 0x09
    14da:	e0 2d       	mov	r30, r0
    14dc:	09 95       	icall
    14de:	89 2b       	or	r24, r25
    14e0:	e1 f6       	brne	.-72     	; 0x149a <fputc+0x10>
    14e2:	d8 01       	movw	r26, r16
    14e4:	16 96       	adiw	r26, 0x06	; 6
    14e6:	8d 91       	ld	r24, X+
    14e8:	9c 91       	ld	r25, X
    14ea:	17 97       	sbiw	r26, 0x07	; 7
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	17 96       	adiw	r26, 0x07	; 7
    14f0:	9c 93       	st	X, r25
    14f2:	8e 93       	st	-X, r24
    14f4:	16 97       	sbiw	r26, 0x06	; 6
    14f6:	ce 01       	movw	r24, r28
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	08 95       	ret

00001502 <__ultoa_invert>:
    1502:	fa 01       	movw	r30, r20
    1504:	aa 27       	eor	r26, r26
    1506:	28 30       	cpi	r18, 0x08	; 8
    1508:	51 f1       	breq	.+84     	; 0x155e <__ultoa_invert+0x5c>
    150a:	20 31       	cpi	r18, 0x10	; 16
    150c:	81 f1       	breq	.+96     	; 0x156e <__ultoa_invert+0x6c>
    150e:	e8 94       	clt
    1510:	6f 93       	push	r22
    1512:	6e 7f       	andi	r22, 0xFE	; 254
    1514:	6e 5f       	subi	r22, 0xFE	; 254
    1516:	7f 4f       	sbci	r23, 0xFF	; 255
    1518:	8f 4f       	sbci	r24, 0xFF	; 255
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	af 4f       	sbci	r26, 0xFF	; 255
    151e:	b1 e0       	ldi	r27, 0x01	; 1
    1520:	3e d0       	rcall	.+124    	; 0x159e <__ultoa_invert+0x9c>
    1522:	b4 e0       	ldi	r27, 0x04	; 4
    1524:	3c d0       	rcall	.+120    	; 0x159e <__ultoa_invert+0x9c>
    1526:	67 0f       	add	r22, r23
    1528:	78 1f       	adc	r23, r24
    152a:	89 1f       	adc	r24, r25
    152c:	9a 1f       	adc	r25, r26
    152e:	a1 1d       	adc	r26, r1
    1530:	68 0f       	add	r22, r24
    1532:	79 1f       	adc	r23, r25
    1534:	8a 1f       	adc	r24, r26
    1536:	91 1d       	adc	r25, r1
    1538:	a1 1d       	adc	r26, r1
    153a:	6a 0f       	add	r22, r26
    153c:	71 1d       	adc	r23, r1
    153e:	81 1d       	adc	r24, r1
    1540:	91 1d       	adc	r25, r1
    1542:	a1 1d       	adc	r26, r1
    1544:	20 d0       	rcall	.+64     	; 0x1586 <__ultoa_invert+0x84>
    1546:	09 f4       	brne	.+2      	; 0x154a <__ultoa_invert+0x48>
    1548:	68 94       	set
    154a:	3f 91       	pop	r19
    154c:	2a e0       	ldi	r18, 0x0A	; 10
    154e:	26 9f       	mul	r18, r22
    1550:	11 24       	eor	r1, r1
    1552:	30 19       	sub	r19, r0
    1554:	30 5d       	subi	r19, 0xD0	; 208
    1556:	31 93       	st	Z+, r19
    1558:	de f6       	brtc	.-74     	; 0x1510 <__ultoa_invert+0xe>
    155a:	cf 01       	movw	r24, r30
    155c:	08 95       	ret
    155e:	46 2f       	mov	r20, r22
    1560:	47 70       	andi	r20, 0x07	; 7
    1562:	40 5d       	subi	r20, 0xD0	; 208
    1564:	41 93       	st	Z+, r20
    1566:	b3 e0       	ldi	r27, 0x03	; 3
    1568:	0f d0       	rcall	.+30     	; 0x1588 <__ultoa_invert+0x86>
    156a:	c9 f7       	brne	.-14     	; 0x155e <__ultoa_invert+0x5c>
    156c:	f6 cf       	rjmp	.-20     	; 0x155a <__ultoa_invert+0x58>
    156e:	46 2f       	mov	r20, r22
    1570:	4f 70       	andi	r20, 0x0F	; 15
    1572:	40 5d       	subi	r20, 0xD0	; 208
    1574:	4a 33       	cpi	r20, 0x3A	; 58
    1576:	18 f0       	brcs	.+6      	; 0x157e <__ultoa_invert+0x7c>
    1578:	49 5d       	subi	r20, 0xD9	; 217
    157a:	31 fd       	sbrc	r19, 1
    157c:	40 52       	subi	r20, 0x20	; 32
    157e:	41 93       	st	Z+, r20
    1580:	02 d0       	rcall	.+4      	; 0x1586 <__ultoa_invert+0x84>
    1582:	a9 f7       	brne	.-22     	; 0x156e <__ultoa_invert+0x6c>
    1584:	ea cf       	rjmp	.-44     	; 0x155a <__ultoa_invert+0x58>
    1586:	b4 e0       	ldi	r27, 0x04	; 4
    1588:	a6 95       	lsr	r26
    158a:	97 95       	ror	r25
    158c:	87 95       	ror	r24
    158e:	77 95       	ror	r23
    1590:	67 95       	ror	r22
    1592:	ba 95       	dec	r27
    1594:	c9 f7       	brne	.-14     	; 0x1588 <__ultoa_invert+0x86>
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	61 05       	cpc	r22, r1
    159a:	71 05       	cpc	r23, r1
    159c:	08 95       	ret
    159e:	9b 01       	movw	r18, r22
    15a0:	ac 01       	movw	r20, r24
    15a2:	0a 2e       	mov	r0, r26
    15a4:	06 94       	lsr	r0
    15a6:	57 95       	ror	r21
    15a8:	47 95       	ror	r20
    15aa:	37 95       	ror	r19
    15ac:	27 95       	ror	r18
    15ae:	ba 95       	dec	r27
    15b0:	c9 f7       	brne	.-14     	; 0x15a4 <__ultoa_invert+0xa2>
    15b2:	62 0f       	add	r22, r18
    15b4:	73 1f       	adc	r23, r19
    15b6:	84 1f       	adc	r24, r20
    15b8:	95 1f       	adc	r25, r21
    15ba:	a0 1d       	adc	r26, r0
    15bc:	08 95       	ret

000015be <_exit>:
    15be:	f8 94       	cli

000015c0 <__stop_program>:
    15c0:	ff cf       	rjmp	.-2      	; 0x15c0 <__stop_program>
