
11_AUTO_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00001b92  00001c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000066d  0080015e  0080015e  00001c84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ce0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f62  00000000  00000000  00001f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012c3  00000000  00000000  00003ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014c5  00000000  00000000  000051a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005fc  00000000  00000000  0000666c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087d  00000000  00000000  00006c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f8f  00000000  00000000  000074e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00008474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	77 c0       	rjmp	.+238    	; 0xf0 <__ctors_end>
       2:	00 00       	nop
       4:	93 c0       	rjmp	.+294    	; 0x12c <__bad_interrupt>
       6:	00 00       	nop
       8:	91 c0       	rjmp	.+290    	; 0x12c <__bad_interrupt>
       a:	00 00       	nop
       c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	26 c7       	rjmp	.+3660   	; 0xe62 <__vector_5>
      16:	00 00       	nop
      18:	71 c7       	rjmp	.+3810   	; 0xefc <__vector_6>
      1a:	00 00       	nop
      1c:	bc c7       	rjmp	.+3960   	; 0xf96 <__vector_7>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	77 c0       	rjmp	.+238    	; 0x12c <__bad_interrupt>
      3e:	00 00       	nop
      40:	df c2       	rjmp	.+1470   	; 0x600 <__vector_16>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	37 c6       	rjmp	.+3182   	; 0xcb8 <__vector_18>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	6b c0       	rjmp	.+214    	; 0x12c <__bad_interrupt>
      56:	00 00       	nop
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	63 c0       	rjmp	.+198    	; 0x12c <__bad_interrupt>
      66:	00 00       	nop
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
      76:	00 00       	nop
      78:	b1 c6       	rjmp	.+3426   	; 0xddc <__vector_30>
      7a:	00 00       	nop
      7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ec 02       	muls	r30, r28
      8e:	f9 02       	muls	r31, r25
      90:	f9 02       	muls	r31, r25
      92:	f9 02       	muls	r31, r25
      94:	e8 02       	muls	r30, r24
      96:	f9 02       	muls	r31, r25
      98:	f9 02       	muls	r31, r25
      9a:	f9 02       	muls	r31, r25
      9c:	f9 02       	muls	r31, r25
      9e:	f9 02       	muls	r31, r25
      a0:	f0 02       	muls	r31, r16
      a2:	f9 02       	muls	r31, r25
      a4:	f9 02       	muls	r31, r25
      a6:	f9 02       	muls	r31, r25
      a8:	f9 02       	muls	r31, r25
      aa:	f9 02       	muls	r31, r25
      ac:	f4 02       	muls	r31, r20
      ae:	f8 02       	muls	r31, r24
      b0:	f9 02       	muls	r31, r25
      b2:	f9 02       	muls	r31, r25
      b4:	f9 02       	muls	r31, r25
      b6:	f9 02       	muls	r31, r25
      b8:	f9 02       	muls	r31, r25
      ba:	f9 02       	muls	r31, r25
      bc:	f9 02       	muls	r31, r25
      be:	f9 02       	muls	r31, r25
      c0:	f9 02       	muls	r31, r25
      c2:	f9 02       	muls	r31, r25
      c4:	f9 02       	muls	r31, r25
      c6:	f9 02       	muls	r31, r25
      c8:	f9 02       	muls	r31, r25
      ca:	f9 02       	muls	r31, r25
      cc:	ec 02       	muls	r30, r28
      ce:	f9 02       	muls	r31, r25
      d0:	f9 02       	muls	r31, r25
      d2:	f9 02       	muls	r31, r25
      d4:	e8 02       	muls	r30, r24
      d6:	f9 02       	muls	r31, r25
      d8:	f9 02       	muls	r31, r25
      da:	f9 02       	muls	r31, r25
      dc:	f9 02       	muls	r31, r25
      de:	f9 02       	muls	r31, r25
      e0:	f0 02       	muls	r31, r16
      e2:	f9 02       	muls	r31, r25
      e4:	f9 02       	muls	r31, r25
      e6:	f9 02       	muls	r31, r25
      e8:	f9 02       	muls	r31, r25
      ea:	f9 02       	muls	r31, r25
      ec:	f4 02       	muls	r31, r20
      ee:	f8 02       	muls	r31, r24

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d0 e1       	ldi	r29, 0x10	; 16
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	11 e0       	ldi	r17, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	e2 e9       	ldi	r30, 0x92	; 146
     104:	fb e1       	ldi	r31, 0x1B	; 27
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0b bf       	out	0x3b, r16	; 59
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x14>
     10c:	07 90       	elpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	ae 35       	cpi	r26, 0x5E	; 94
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0x10>

00000116 <__do_clear_bss>:
     116:	27 e0       	ldi	r18, 0x07	; 7
     118:	ae e5       	ldi	r26, 0x5E	; 94
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	ab 3c       	cpi	r26, 0xCB	; 203
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	c2 d2       	rcall	.+1412   	; 0x6ac <main>
     128:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <init_button>:
int button0_state = 0;


void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN /*| 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN*/);
     12e:	8a b3       	in	r24, 0x1a	; 26
     130:	8f 7b       	andi	r24, 0xBF	; 191
     132:	8a bb       	out	0x1a, r24	; 26
     134:	08 95       	ret

00000136 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE/*, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE*/}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
     136:	29 b3       	in	r18, 0x19	; 25
     138:	42 2f       	mov	r20, r18
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	02 c0       	rjmp	.+4      	; 0x146 <get_button+0x10>
     142:	22 0f       	add	r18, r18
     144:	33 1f       	adc	r19, r19
     146:	6a 95       	dec	r22
     148:	e2 f7       	brpl	.-8      	; 0x142 <get_button+0xc>
     14a:	24 23       	and	r18, r20
     14c:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
     14e:	21 15       	cp	r18, r1
     150:	31 05       	cpc	r19, r1
     152:	b9 f0       	breq	.+46     	; 0x182 <get_button+0x4c>
     154:	fc 01       	movw	r30, r24
     156:	e2 5a       	subi	r30, 0xA2	; 162
     158:	fe 4f       	sbci	r31, 0xFE	; 254
     15a:	40 81       	ld	r20, Z
     15c:	41 11       	cpse	r20, r1
     15e:	11 c0       	rjmp	.+34     	; 0x182 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     160:	2f ef       	ldi	r18, 0xFF	; 255
     162:	3d ee       	ldi	r19, 0xED	; 237
     164:	42 e0       	ldi	r20, 0x02	; 2
     166:	21 50       	subi	r18, 0x01	; 1
     168:	30 40       	sbci	r19, 0x00	; 0
     16a:	40 40       	sbci	r20, 0x00	; 0
     16c:	e1 f7       	brne	.-8      	; 0x166 <get_button+0x30>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <get_button+0x3a>
     170:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     172:	fc 01       	movw	r30, r24
     174:	e2 5a       	subi	r30, 0xA2	; 162
     176:	fe 4f       	sbci	r31, 0xFE	; 254
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     182:	fc 01       	movw	r30, r24
     184:	e2 5a       	subi	r30, 0xA2	; 162
     186:	fe 4f       	sbci	r31, 0xFE	; 254
     188:	40 81       	ld	r20, Z
     18a:	41 30       	cpi	r20, 0x01	; 1
     18c:	91 f4       	brne	.+36     	; 0x1b2 <get_button+0x7c>
     18e:	23 2b       	or	r18, r19
     190:	99 f4       	brne	.+38     	; 0x1b8 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     192:	fc 01       	movw	r30, r24
     194:	e2 5a       	subi	r30, 0xA2	; 162
     196:	fe 4f       	sbci	r31, 0xFE	; 254
     198:	10 82       	st	Z, r1
     19a:	8f ef       	ldi	r24, 0xFF	; 255
     19c:	9d ee       	ldi	r25, 0xED	; 237
     19e:	22 e0       	ldi	r18, 0x02	; 2
     1a0:	81 50       	subi	r24, 0x01	; 1
     1a2:	90 40       	sbci	r25, 0x00	; 0
     1a4:	20 40       	sbci	r18, 0x00	; 0
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <get_button+0x6a>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <get_button+0x74>
     1aa:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	08 95       	ret
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
}
     1bc:	08 95       	ret

000001be <auto_mode_check>:

void auto_mode_check(void)
{
	if (get_button(BUTTON0, BUTTON0PIN))
     1be:	66 e0       	ldi	r22, 0x06	; 6
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	b7 df       	rcall	.-146    	; 0x136 <get_button>
     1c8:	89 2b       	or	r24, r25
     1ca:	71 f0       	breq	.+28     	; 0x1e8 <auto_mode_check+0x2a>
	{
		button0_state = !button0_state;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <button0_state>
     1d4:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <button0_state+0x1>
     1d8:	23 2b       	or	r18, r19
     1da:	11 f0       	breq	.+4      	; 0x1e0 <auto_mode_check+0x22>
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <button0_state+0x1>
     1e4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <button0_state>
	}
	
	if (button0_state)
     1e8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <button0_state>
     1ec:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <button0_state+0x1>
     1f0:	89 2b       	or	r24, r25
     1f2:	61 f0       	breq	.+24     	; 0x20c <auto_mode_check+0x4e>
	{
		AUTO_RUN_LED_PORT |= 1 << AUTO_RUN_LED_PIN; // LED ON
     1f4:	e5 e6       	ldi	r30, 0x65	; 101
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	88 60       	ori	r24, 0x08	; 8
     1fc:	80 83       	st	Z, r24
		func_state = AUTO_MODE;
     1fe:	83 e0       	ldi	r24, 0x03	; 3
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <func_state+0x1>
     206:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <func_state>
     20a:	08 95       	ret
	}
	else
	{
		AUTO_RUN_LED_PORT &= ~(1 << AUTO_RUN_LED_PIN); // LED OFF
     20c:	e5 e6       	ldi	r30, 0x65	; 101
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	87 7f       	andi	r24, 0xF7	; 247
		stop();
     214:	80 83       	st	Z, r24
     216:	d3 c2       	rjmp	.+1446   	; 0x7be <stop>
     218:	08 95       	ret

0000021a <init_fnd>:
extern volatile uint32_t fnd_refreshrate; // fnd 잔상효과를 유지하기 위한 변수 2ms
extern volatile uint32_t msec_count;

void init_fnd(void)
{
	FND_DATA_DDR = 0xff;
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	84 bb       	out	0x14, r24	; 20
	//FND_DIGIT_DDR |= 0xf0; //자리 수 선택 핀 4 5 6 7
	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 |
     21e:	e1 e6       	ldi	r30, 0x61	; 97
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	80 6f       	ori	r24, 0xF0	; 240
     226:	80 83       	st	Z, r24
					 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4;


	FND_DATA_PORT = 0x00; // FND를 all off
     228:	15 ba       	out	0x15, r1	; 21
     22a:	08 95       	ret

0000022c <fnd_display>:
}



void fnd_display(int *run_state)
{
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	2f 97       	sbiw	r28, 0x0f	; 15
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	f8 94       	cli
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	ac 01       	movw	r20, r24
						  // 0      1      2      3      4      5      6      7      8      9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f
     242:	9f e0       	ldi	r25, 0x0F	; 15
     244:	ee e1       	ldi	r30, 0x1E	; 30
     246:	f1 e0       	ldi	r31, 0x01	; 1
     248:	de 01       	movw	r26, r28
     24a:	11 96       	adiw	r26, 0x01	; 1
     24c:	01 90       	ld	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	9a 95       	dec	r25
     252:	e1 f7       	brne	.-8      	; 0x24c <fnd_display+0x20>
		, ~0x8e, ~0x83, ~0xc7, ~0xaf
		};

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     254:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <digit_select.1752>
     258:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <digit_select.1752+0x1>
     25c:	21 30       	cpi	r18, 0x01	; 1
     25e:	31 05       	cpc	r19, r1
     260:	39 f1       	breq	.+78     	; 0x2b0 <fnd_display+0x84>
     262:	1c f4       	brge	.+6      	; 0x26a <fnd_display+0x3e>
     264:	23 2b       	or	r18, r19
     266:	51 f0       	breq	.+20     	; 0x27c <fnd_display+0x50>
     268:	91 c0       	rjmp	.+290    	; 0x38c <fnd_display+0x160>
     26a:	22 30       	cpi	r18, 0x02	; 2
     26c:	31 05       	cpc	r19, r1
     26e:	09 f4       	brne	.+2      	; 0x272 <fnd_display+0x46>
     270:	41 c0       	rjmp	.+130    	; 0x2f4 <fnd_display+0xc8>
     272:	23 30       	cpi	r18, 0x03	; 3
     274:	31 05       	cpc	r19, r1
     276:	09 f4       	brne	.+2      	; 0x27a <fnd_display+0x4e>
     278:	7a c0       	rjmp	.+244    	; 0x36e <fnd_display+0x142>
     27a:	88 c0       	rjmp	.+272    	; 0x38c <fnd_display+0x160>
	{
		case 0 :

			FND_DIGIT_PORT = ~0x80;
     27c:	8f e7       	ldi	r24, 0x7F	; 127
     27e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     282:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <sec_count>
     286:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <sec_count+0x1>
     28a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <sec_count+0x2>
     28e:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <sec_count+0x3>
     292:	2a e0       	ldi	r18, 0x0A	; 10
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__udivmodsi4>
     29e:	e1 e0       	ldi	r30, 0x01	; 1
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	ec 0f       	add	r30, r28
     2a4:	fd 1f       	adc	r31, r29
     2a6:	e6 0f       	add	r30, r22
     2a8:	f7 1f       	adc	r31, r23
     2aa:	80 81       	ld	r24, Z
     2ac:	85 bb       	out	0x15, r24	; 21
		break;
     2ae:	6e c0       	rjmp	.+220    	; 0x38c <fnd_display+0x160>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     2b0:	8f eb       	ldi	r24, 0xBF	; 191
     2b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     2b6:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <sec_count>
     2ba:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <sec_count+0x1>
     2be:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <sec_count+0x2>
     2c2:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <sec_count+0x3>
     2c6:	2a e0       	ldi	r18, 0x0A	; 10
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__udivmodsi4>
     2d2:	ca 01       	movw	r24, r20
     2d4:	b9 01       	movw	r22, r18
     2d6:	26 e0       	ldi	r18, 0x06	; 6
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__udivmodsi4>
     2e2:	e1 e0       	ldi	r30, 0x01	; 1
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	ec 0f       	add	r30, r28
     2e8:	fd 1f       	adc	r31, r29
     2ea:	e6 0f       	add	r30, r22
     2ec:	f7 1f       	adc	r31, r23
     2ee:	80 81       	ld	r24, Z
     2f0:	85 bb       	out	0x15, r24	; 21
		break;
     2f2:	4c c0       	rjmp	.+152    	; 0x38c <fnd_display+0x160>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     2f4:	8f ed       	ldi	r24, 0xDF	; 223
     2f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		if (sec_count % 2 == 1)
     2fa:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <sec_count>
     2fe:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <sec_count+0x1>
     302:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <sec_count+0x2>
     306:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <sec_count+0x3>
     30a:	60 ff       	sbrs	r22, 0
     30c:	19 c0       	rjmp	.+50     	; 0x340 <fnd_display+0x114>
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     30e:	2c e3       	ldi	r18, 0x3C	; 60
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__udivmodsi4>
     31a:	ca 01       	movw	r24, r20
     31c:	b9 01       	movw	r22, r18
     31e:	2a e0       	ldi	r18, 0x0A	; 10
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__udivmodsi4>
     32a:	e1 e0       	ldi	r30, 0x01	; 1
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	ec 0f       	add	r30, r28
     330:	fd 1f       	adc	r31, r29
     332:	e6 0f       	add	r30, r22
     334:	f7 1f       	adc	r31, r23
     336:	90 81       	ld	r25, Z
     338:	8b 85       	ldd	r24, Y+11	; 0x0b
     33a:	89 2b       	or	r24, r25
     33c:	85 bb       	out	0x15, r24	; 21
     33e:	26 c0       	rjmp	.+76     	; 0x38c <fnd_display+0x160>
		else
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10]; // 1단위 분
     340:	2c e3       	ldi	r18, 0x3C	; 60
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__udivmodsi4>
     34c:	ca 01       	movw	r24, r20
     34e:	b9 01       	movw	r22, r18
     350:	2a e0       	ldi	r18, 0x0A	; 10
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	40 e0       	ldi	r20, 0x00	; 0
     356:	50 e0       	ldi	r21, 0x00	; 0
     358:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__udivmodsi4>
     35c:	e1 e0       	ldi	r30, 0x01	; 1
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	ec 0f       	add	r30, r28
     362:	fd 1f       	adc	r31, r29
     364:	e6 0f       	add	r30, r22
     366:	f7 1f       	adc	r31, r23
     368:	80 81       	ld	r24, Z
     36a:	85 bb       	out	0x15, r24	; 21
     36c:	0f c0       	rjmp	.+30     	; 0x38c <fnd_display+0x160>
		break;

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     36e:	8f ee       	ldi	r24, 0xEF	; 239
     370:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		
		FND_DATA_PORT = fnd_font[*run_state+11]; // 10단위 분
     374:	da 01       	movw	r26, r20
     376:	ed 91       	ld	r30, X+
     378:	fc 91       	ld	r31, X
     37a:	3b 96       	adiw	r30, 0x0b	; 11
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	8c 0f       	add	r24, r28
     382:	9d 1f       	adc	r25, r29
     384:	e8 0f       	add	r30, r24
     386:	f9 1f       	adc	r31, r25
     388:	80 81       	ld	r24, Z
     38a:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
     38c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <digit_select.1752>
     390:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <digit_select.1752+0x1>
     394:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
     396:	83 70       	andi	r24, 0x03	; 3
     398:	90 78       	andi	r25, 0x80	; 128
     39a:	99 23       	and	r25, r25
     39c:	24 f4       	brge	.+8      	; 0x3a6 <fnd_display+0x17a>
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	8c 6f       	ori	r24, 0xFC	; 252
     3a2:	9f 6f       	ori	r25, 0xFF	; 255
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <digit_select.1752+0x1>
     3aa:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <digit_select.1752>
}
     3ae:	2f 96       	adiw	r28, 0x0f	; 15
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <I2C_init>:
 */ 
#include <avr/io.h>
#include "I2C.h"

void I2C_init(unsigned int baud){
	TWBR = baud;
     3c0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     3c4:	08 95       	ret

000003c6 <I2C_start>:
}

void I2C_start(void)
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     3c6:	84 ea       	ldi	r24, 0xA4	; 164
     3c8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));  // 시작 완료 대기
     3cc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     3d0:	88 23       	and	r24, r24
     3d2:	e4 f7       	brge	.-8      	; 0x3cc <I2C_start+0x6>
}
     3d4:	08 95       	ret

000003d6 <I2C_transmit>:

void I2C_transmit(uint8_t data)
{
	TWDR = data;
     3d6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
     3da:	84 e8       	ldi	r24, 0x84	; 132
     3dc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT)));
     3e0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     3e4:	88 23       	and	r24, r24
     3e6:	e4 f7       	brge	.-8      	; 0x3e0 <I2C_transmit+0xa>
}
     3e8:	08 95       	ret

000003ea <I2C_stop>:
	I2C_stop();
}

void I2C_stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     3ea:	84 e9       	ldi	r24, 0x94	; 148
     3ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     3f0:	08 95       	ret

000003f2 <I2C_write_byte>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
}

void I2C_write_byte(uint8_t address, uint8_t data)
{
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	d8 2f       	mov	r29, r24
     3f8:	c6 2f       	mov	r28, r22
	I2C_start();
     3fa:	e5 df       	rcall	.-54     	; 0x3c6 <I2C_start>
	I2C_transmit(address);
     3fc:	8d 2f       	mov	r24, r29
     3fe:	eb df       	rcall	.-42     	; 0x3d6 <I2C_transmit>
	I2C_transmit(data);
     400:	8c 2f       	mov	r24, r28
     402:	e9 df       	rcall	.-46     	; 0x3d6 <I2C_transmit>
	I2C_stop();
     404:	f2 df       	rcall	.-28     	; 0x3ea <I2C_stop>
     406:	df 91       	pop	r29
}
     408:	cf 91       	pop	r28
     40a:	08 95       	ret

0000040c <I2C_LCD_write_data>:
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	00 d0       	rcall	.+0      	; 0x414 <I2C_LCD_write_data+0x8>
     414:	00 d0       	rcall	.+0      	; 0x416 <I2C_LCD_write_data+0xa>
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	28 2f       	mov	r18, r24
     41c:	20 7f       	andi	r18, 0xF0	; 240
     41e:	30 e1       	ldi	r19, 0x10	; 16
     420:	83 9f       	mul	r24, r19
     422:	c0 01       	movw	r24, r0
     424:	11 24       	eor	r1, r1
     426:	92 2f       	mov	r25, r18
     428:	9d 60       	ori	r25, 0x0D	; 13
     42a:	99 83       	std	Y+1, r25	; 0x01
     42c:	29 60       	ori	r18, 0x09	; 9
     42e:	2a 83       	std	Y+2, r18	; 0x02
     430:	98 2f       	mov	r25, r24
     432:	9d 60       	ori	r25, 0x0D	; 13
     434:	9b 83       	std	Y+3, r25	; 0x03
     436:	89 60       	ori	r24, 0x09	; 9
     438:	8c 83       	std	Y+4, r24	; 0x04
     43a:	10 e0       	ldi	r17, 0x00	; 0
     43c:	0a c0       	rjmp	.+20     	; 0x452 <I2C_LCD_write_data+0x46>
     43e:	e1 e0       	ldi	r30, 0x01	; 1
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	ec 0f       	add	r30, r28
     444:	fd 1f       	adc	r31, r29
     446:	e1 0f       	add	r30, r17
     448:	f1 1d       	adc	r31, r1
     44a:	60 81       	ld	r22, Z
     44c:	8e e4       	ldi	r24, 0x4E	; 78
     44e:	d1 df       	rcall	.-94     	; 0x3f2 <I2C_write_byte>
     450:	1f 5f       	subi	r17, 0xFF	; 255
     452:	14 30       	cpi	r17, 0x04	; 4
     454:	a0 f3       	brcs	.-24     	; 0x43e <I2C_LCD_write_data+0x32>
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	08 95       	ret

00000466 <I2C_LCD_write_command>:
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	00 d0       	rcall	.+0      	; 0x46e <I2C_LCD_write_command+0x8>
     46e:	00 d0       	rcall	.+0      	; 0x470 <I2C_LCD_write_command+0xa>
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     474:	28 2f       	mov	r18, r24
     476:	20 7f       	andi	r18, 0xF0	; 240
     478:	30 e1       	ldi	r19, 0x10	; 16
     47a:	83 9f       	mul	r24, r19
     47c:	c0 01       	movw	r24, r0
     47e:	11 24       	eor	r1, r1
     480:	92 2f       	mov	r25, r18
     482:	9c 60       	ori	r25, 0x0C	; 12
     484:	99 83       	std	Y+1, r25	; 0x01
     486:	28 60       	ori	r18, 0x08	; 8
     488:	2a 83       	std	Y+2, r18	; 0x02
     48a:	98 2f       	mov	r25, r24
     48c:	9c 60       	ori	r25, 0x0C	; 12
     48e:	9b 83       	std	Y+3, r25	; 0x03
     490:	88 60       	ori	r24, 0x08	; 8
     492:	8c 83       	std	Y+4, r24	; 0x04
     494:	10 e0       	ldi	r17, 0x00	; 0
     496:	0a c0       	rjmp	.+20     	; 0x4ac <I2C_LCD_write_command+0x46>
     498:	e1 e0       	ldi	r30, 0x01	; 1
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	ec 0f       	add	r30, r28
     49e:	fd 1f       	adc	r31, r29
     4a0:	e1 0f       	add	r30, r17
     4a2:	f1 1d       	adc	r31, r1
     4a4:	60 81       	ld	r22, Z
     4a6:	8e e4       	ldi	r24, 0x4E	; 78
     4a8:	a4 df       	rcall	.-184    	; 0x3f2 <I2C_write_byte>
     4aa:	1f 5f       	subi	r17, 0xFF	; 255
     4ac:	14 30       	cpi	r17, 0x04	; 4
     4ae:	a0 f3       	brcs	.-24     	; 0x498 <I2C_LCD_write_command+0x32>
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	08 95       	ret

000004c0 <I2C_LCD_init>:
}

// LCD를 초기화
void I2C_LCD_init(void)
{
	I2C_init(10000);
     4c0:	80 e1       	ldi	r24, 0x10	; 16
     4c2:	97 e2       	ldi	r25, 0x27	; 39
     4c4:	7d df       	rcall	.-262    	; 0x3c0 <I2C_init>
     4c6:	2f ef       	ldi	r18, 0xFF	; 255
     4c8:	80 e7       	ldi	r24, 0x70	; 112
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	21 50       	subi	r18, 0x01	; 1
     4ce:	80 40       	sbci	r24, 0x00	; 0
     4d0:	90 40       	sbci	r25, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <I2C_LCD_init+0xc>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <I2C_LCD_init+0x16>
     4d6:	00 00       	nop
	_delay_ms(50);
	//Initialization of HD44780-based LCD (4-bit HW)
	I2C_LCD_write_command(0x33);
     4d8:	83 e3       	ldi	r24, 0x33	; 51
     4da:	c5 df       	rcall	.-118    	; 0x466 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x32);
     4dc:	82 e3       	ldi	r24, 0x32	; 50
     4de:	c3 df       	rcall	.-122    	; 0x466 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x28);   //Function Set 4-bit mode
     4e0:	88 e2       	ldi	r24, 0x28	; 40
     4e2:	c1 df       	rcall	.-126    	; 0x466 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x0c);   //Display On/Off Control
     4e4:	8c e0       	ldi	r24, 0x0C	; 12
     4e6:	bf df       	rcall	.-130    	; 0x466 <I2C_LCD_write_command>
	I2C_LCD_write_command(0x06);   //Entry mode set
     4e8:	86 e0       	ldi	r24, 0x06	; 6
     4ea:	bd df       	rcall	.-134    	; 0x466 <I2C_LCD_write_command>
     4ec:	81 e0       	ldi	r24, 0x01	; 1
	I2C_LCD_write_command(0x01);   //Clear Display
     4ee:	bb df       	rcall	.-138    	; 0x466 <I2C_LCD_write_command>
     4f0:	8f e3       	ldi	r24, 0x3F	; 63
     4f2:	9c e9       	ldi	r25, 0x9C	; 156
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <I2C_LCD_init+0x34>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <I2C_LCD_init+0x3a>
     4fa:	00 00       	nop
     4fc:	08 95       	ret

000004fe <I2C_LCD_write_string>:
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
	//Minimum delay to wait before driving LCD module
	_delay_ms(10);
}
// 현재의 xy좌표에 printf처럼 스트링 값을 출력 
void I2C_LCD_write_string(char *string)
{
     502:	cf 93       	push	r28
     504:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i=0; string[i]; i++) //"hello !!\0" 마지막 널문자에서 조건 거짓이 되어 빠져나온다.
     506:	c0 e0       	ldi	r28, 0x00	; 0
     508:	02 c0       	rjmp	.+4      	; 0x50e <I2C_LCD_write_string+0x10>
	I2C_LCD_write_data(string[i]);
     50a:	80 df       	rcall	.-256    	; 0x40c <I2C_LCD_write_data>
}
// 현재의 xy좌표에 printf처럼 스트링 값을 출력 
void I2C_LCD_write_string(char *string)
{
	uint8_t i;
	for(i=0; string[i]; i++) //"hello !!\0" 마지막 널문자에서 조건 거짓이 되어 빠져나온다.
     50c:	cf 5f       	subi	r28, 0xFF	; 255
     50e:	f8 01       	movw	r30, r16
     510:	ec 0f       	add	r30, r28
     512:	f1 1d       	adc	r31, r1
     514:	80 81       	ld	r24, Z
     516:	81 11       	cpse	r24, r1
     518:	f8 cf       	rjmp	.-16     	; 0x50a <I2C_LCD_write_string+0xc>
	I2C_LCD_write_data(string[i]);
}
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	08 95       	ret

00000522 <I2C_LCD_goto_XY>:

// 커서를 x,y좌표로 이동
void I2C_LCD_goto_XY(uint8_t row, uint8_t col)
{
	col %= 16;
     522:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2;
     524:	81 70       	andi	r24, 0x01	; 1
	
	uint8_t address = (0x40 * row) + col;
     526:	90 e4       	ldi	r25, 0x40	; 64
     528:	89 9f       	mul	r24, r25
     52a:	60 0d       	add	r22, r0
     52c:	11 24       	eor	r1, r1
     52e:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + address;
	
	I2C_LCD_write_command(command);
     530:	80 58       	subi	r24, 0x80	; 128
     532:	99 cf       	rjmp	.-206    	; 0x466 <I2C_LCD_write_command>
     534:	08 95       	ret

00000536 <I2C_LCD_write_string_XY>:
}

// x,y좌표로 이동을 하고 string값을 출력 한다. 
void I2C_LCD_write_string_XY(uint8_t row, uint8_t col, char *string)
{
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	ea 01       	movw	r28, r20
	I2C_LCD_goto_XY(row, col);
     53c:	f2 df       	rcall	.-28     	; 0x522 <I2C_LCD_goto_XY>
	I2C_LCD_write_string(string);
     53e:	ce 01       	movw	r24, r28
     540:	de df       	rcall	.-68     	; 0x4fe <I2C_LCD_write_string>
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <I2C_LCD_Test>:

extern volatile uint32_t lcd_refreshrate;


void I2C_LCD_Test(int *speed)
{
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	64 97       	sbiw	r28, 0x14	; 20
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
	char sbuf[20];

	sprintf(sbuf,"%3d",*speed);
     560:	fc 01       	movw	r30, r24
     562:	21 81       	ldd	r18, Z+1	; 0x01
     564:	2f 93       	push	r18
     566:	80 81       	ld	r24, Z
     568:	8f 93       	push	r24
     56a:	8d e2       	ldi	r24, 0x2D	; 45
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	9f 93       	push	r25
     570:	8f 93       	push	r24
     572:	8e 01       	movw	r16, r28
     574:	0f 5f       	subi	r16, 0xFF	; 255
     576:	1f 4f       	sbci	r17, 0xFF	; 255
     578:	1f 93       	push	r17
     57a:	0f 93       	push	r16
     57c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <sprintf>
	
	I2C_LCD_write_string_XY(1,0,sbuf);
     580:	a8 01       	movw	r20, r16
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	d7 df       	rcall	.-82     	; 0x536 <I2C_LCD_write_string_XY>

}
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	64 96       	adiw	r28, 0x14	; 20
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	08 95       	ret

000005aa <init_led>:

void init_led(void);

void init_led(void)
{
	AUTO_RUN_LED_PORT_DDR |= 1 << AUTO_RUN_LED_PIN;
     5aa:	e4 e6       	ldi	r30, 0x64	; 100
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	88 60       	ori	r24, 0x08	; 8
     5b2:	80 83       	st	Z, r24
     5b4:	08 95       	ret

000005b6 <manual_mode>:
	//sei();    // 전역적(대문)으로 interrupt 허용
}

void manual_mode(void)
{
	switch (bt_data)
     5b6:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <bt_data>
     5ba:	8e 2f       	mov	r24, r30
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	fc 01       	movw	r30, r24
     5c0:	e2 54       	subi	r30, 0x42	; 66
     5c2:	f1 09       	sbc	r31, r1
     5c4:	e2 33       	cpi	r30, 0x32	; 50
     5c6:	f1 05       	cpc	r31, r1
     5c8:	a0 f4       	brcc	.+40     	; 0x5f2 <manual_mode+0x3c>
     5ca:	ea 5b       	subi	r30, 0xBA	; 186
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	d4 c7       	rjmp	.+4008   	; 0x1578 <__tablejump2__>
	{
		case 'F':
		case 'f':
			forward(500);
     5d0:	84 ef       	ldi	r24, 0xF4	; 244
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	89 d0       	rcall	.+274    	; 0x6e8 <forward>
			break;
     5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <manual_mode+0x3c>
			
		case 'B':
		case 'b':
			backward(500);
     5d8:	84 ef       	ldi	r24, 0xF4	; 244
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	98 d0       	rcall	.+304    	; 0x70e <backward>
			break;
     5de:	09 c0       	rjmp	.+18     	; 0x5f2 <manual_mode+0x3c>
			
		case 'L':
		case 'l':
			turn_left(700);
     5e0:	8c eb       	ldi	r24, 0xBC	; 188
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	a7 d0       	rcall	.+334    	; 0x734 <turn_left>
			break;
			
		case 'R':
		case 'r':
			turn_right(700);
     5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <manual_mode+0x3c>
     5e8:	8c eb       	ldi	r24, 0xBC	; 188
     5ea:	92 e0       	ldi	r25, 0x02	; 2
			break;
     5ec:	b3 d0       	rcall	.+358    	; 0x754 <turn_right>
			
		case 'S':
		case 's':
			stop();
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <manual_mode+0x3c>
     5f0:	e6 d0       	rcall	.+460    	; 0x7be <stop>
			break;
			
		default:
			break;
	}
	func_state = DISTANCE_CHECK;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <func_state+0x1>
     5fa:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <func_state>
     5fe:	08 95       	ret

00000600 <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     600:	1f 92       	push	r1
     602:	0f 92       	push	r0
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	0f 92       	push	r0
     608:	11 24       	eor	r1, r1
     60a:	8f 93       	push	r24
     60c:	9f 93       	push	r25
     60e:	af 93       	push	r26
     610:	bf 93       	push	r27
	TCNT0 = 6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
     612:	86 e0       	ldi	r24, 0x06	; 6
     614:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
     616:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <msec_count>
     61a:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <msec_count+0x1>
     61e:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <msec_count+0x2>
     622:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <msec_count+0x3>
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	a1 1d       	adc	r26, r1
     62a:	b1 1d       	adc	r27, r1
     62c:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <msec_count>
     630:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <msec_count+0x1>
     634:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <msec_count+0x2>
     638:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <msec_count+0x3>
	fnd_refreshrate++;   // fnd 잔상효과 유지 하기 위한 timer 2ms
     63c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <fnd_refreshrate>
     640:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <fnd_refreshrate+0x1>
     644:	a0 91 72 01 	lds	r26, 0x0172	; 0x800172 <fnd_refreshrate+0x2>
     648:	b0 91 73 01 	lds	r27, 0x0173	; 0x800173 <fnd_refreshrate+0x3>
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	a1 1d       	adc	r26, r1
     650:	b1 1d       	adc	r27, r1
     652:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <fnd_refreshrate>
     656:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <fnd_refreshrate+0x1>
     65a:	a0 93 72 01 	sts	0x0172, r26	; 0x800172 <fnd_refreshrate+0x2>
     65e:	b0 93 73 01 	sts	0x0173, r27	; 0x800173 <fnd_refreshrate+0x3>
	ultrasonic_check_timer++;
     662:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <ultrasonic_check_timer>
     666:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <ultrasonic_check_timer+0x1>
     66a:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <ultrasonic_check_timer+0x2>
     66e:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <ultrasonic_check_timer+0x3>
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	a1 1d       	adc	r26, r1
     676:	b1 1d       	adc	r27, r1
     678:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <ultrasonic_check_timer>
     67c:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <ultrasonic_check_timer+0x1>
     680:	a0 93 6e 01 	sts	0x016E, r26	; 0x80016e <ultrasonic_check_timer+0x2>
     684:	b0 93 6f 01 	sts	0x016F, r27	; 0x80016f <ultrasonic_check_timer+0x3>
}
     688:	bf 91       	pop	r27
     68a:	af 91       	pop	r26
     68c:	9f 91       	pop	r25
     68e:	8f 91       	pop	r24
     690:	0f 90       	pop	r0
     692:	0f be       	out	0x3f, r0	; 63
     694:	0f 90       	pop	r0
     696:	1f 90       	pop	r1
     698:	18 95       	reti

0000069a <init_timer0>:
	// 1. 분주비 계산
	// 16000000HZ/64 ==> 250,000HZ
	// 2. T(주기) 1가 잡아 먹는 시간 : 1/f = 1/250,000 ==> 0.000004sec(4us) : 0.004ms
	// 3. 8bit timer OV(OVflow) : 0.004ms x 256 = 0.001024sec --> 1.024ms
	// 그러면 정확히 1ms 를 재고 싶다면 0.004ms x 250개 = 0.001sec ==> 1ms
	TCNT0 = 6;   // TCNT : 0~256 ==> 1ms마다 TIMER0_OVF_vect로 진입한다.
     69a:	86 e0       	ldi	r24, 0x06	; 6
     69c:	82 bf       	out	0x32, r24	; 50
	// TCNT0 = 6로 설정을 한이유: 6~256 : 250개를 count(정확히 1MS를맞추기 위해서)
	//
	// 4 분주비를 설정 (250khz)
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     69e:	83 b7       	in	r24, 0x33	; 51
     6a0:	84 60       	ori	r24, 0x04	; 4
     6a2:	83 bf       	out	0x33, r24	; 51
	// 5. TIMER0 OVERFLOW를 허용(enable)
	TIMSK |= 1 << TOIE0;  // TIMSK |= 0x01;
     6a4:	87 b7       	in	r24, 0x37	; 55
     6a6:	81 60       	ori	r24, 0x01	; 1
     6a8:	87 bf       	out	0x37, r24	; 55
     6aa:	08 95       	ret

000006ac <main>:
	ultrasonic_check_timer++;
}

int main(void)
{
	I2C_LCD_init();
     6ac:	09 df       	rcall	.-494    	; 0x4c0 <I2C_LCD_init>
	init_led();
     6ae:	7d df       	rcall	.-262    	; 0x5aa <init_led>
	init_fnd();
     6b0:	b4 dd       	rcall	.-1176   	; 0x21a <init_fnd>
	init_button();
     6b2:	3d dd       	rcall	.-1414   	; 0x12e <init_button>
	init_timer0();
     6b4:	f2 df       	rcall	.-28     	; 0x69a <init_timer0>
	init_uart0();
     6b6:	7e d3       	rcall	.+1788   	; 0xdb4 <init_uart0>
     6b8:	bf d3       	rcall	.+1918   	; 0xe38 <init_uart1>
	init_uart1();
     6ba:	5c d0       	rcall	.+184    	; 0x774 <init_n289n>
     6bc:	6c d0       	rcall	.+216    	; 0x796 <init_timer1_pwm>
	init_n289n();
     6be:	b8 d4       	rcall	.+2416   	; 0x1030 <init_ultrasonic>
     6c0:	80 e0       	ldi	r24, 0x00	; 0
	init_timer1_pwm();
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	90 93 c8 07 	sts	0x07C8, r25	; 0x8007c8 <__iob+0x3>
	init_ultrasonic(); // timer 3
     6c8:	80 93 c7 07 	sts	0x07C7, r24	; 0x8007c7 <__iob+0x2>
	
	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     6cc:	78 94       	sei
     6ce:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <func_state>
     6d2:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <func_state+0x1>
	
	sei();     // 전역적으로 interrupt 허용
     6d6:	ee 0f       	add	r30, r30

	while (1)
	{
		//I2C_LCD_Test(&current_speed);
		pfunc[func_state] ();
     6d8:	ff 1f       	adc	r31, r31
     6da:	e2 5f       	subi	r30, 0xF2	; 242
     6dc:	fe 4f       	sbci	r31, 0xFE	; 254
     6de:	01 90       	ld	r0, Z+
     6e0:	f0 81       	ld	r31, Z
     6e2:	e0 2d       	mov	r30, r0
     6e4:	09 95       	icall
     6e6:	f3 cf       	rjmp	.-26     	; 0x6ce <main+0x22>

000006e8 <forward>:
	ICR1 = 0x3ff;  // 1023 ==> 4ms TOP : PWM 값
}

///////////////////////////////           수동모드          //////////////////////////////////////
void forward(int *speed)
{
     6e8:	dc 01       	movw	r26, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     6ea:	e2 e6       	ldi	r30, 0x62	; 98
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	90 81       	ld	r25, Z
     6f0:	90 7f       	andi	r25, 0xF0	; 240
     6f2:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     6f4:	90 81       	ld	r25, Z
     6f6:	95 60       	ori	r25, 0x05	; 5
     6f8:	90 83       	st	Z, r25
	
	OCR1A = *speed;  // PB5 PWM 출력 port left
     6fa:	8d 91       	ld	r24, X+
     6fc:	9c 91       	ld	r25, X
     6fe:	11 97       	sbiw	r26, 0x01	; 1
     700:	9b bd       	out	0x2b, r25	; 43
     702:	8a bd       	out	0x2a, r24	; 42
	OCR1B = *speed;  // PB6 PWM 출력 port right
     704:	8d 91       	ld	r24, X+
     706:	9c 91       	ld	r25, X
     708:	99 bd       	out	0x29, r25	; 41
     70a:	88 bd       	out	0x28, r24	; 40
     70c:	08 95       	ret

0000070e <backward>:
}

void backward(int *speed)
{
     70e:	dc 01       	movw	r26, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     710:	e2 e6       	ldi	r30, 0x62	; 98
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	90 81       	ld	r25, Z
     716:	90 7f       	andi	r25, 0xF0	; 240
     718:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 3 | 1 << 1;  // 1010 후진 모드
     71a:	90 81       	ld	r25, Z
     71c:	9a 60       	ori	r25, 0x0A	; 10
     71e:	90 83       	st	Z, r25
	
	OCR1A = *speed;  // PB5 PWM 출력 port left
     720:	8d 91       	ld	r24, X+
     722:	9c 91       	ld	r25, X
     724:	11 97       	sbiw	r26, 0x01	; 1
     726:	9b bd       	out	0x2b, r25	; 43
     728:	8a bd       	out	0x2a, r24	; 42
	OCR1B = *speed;  // PB6 PWM 출력 port right
     72a:	8d 91       	ld	r24, X+
     72c:	9c 91       	ld	r25, X
     72e:	99 bd       	out	0x29, r25	; 41
     730:	88 bd       	out	0x28, r24	; 40
     732:	08 95       	ret

00000734 <turn_left>:
}

void turn_left(int *speed)
{
     734:	dc 01       	movw	r26, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     736:	e2 e6       	ldi	r30, 0x62	; 98
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	90 81       	ld	r25, Z
     73c:	90 7f       	andi	r25, 0xF0	; 240
     73e:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     740:	90 81       	ld	r25, Z
     742:	95 60       	ori	r25, 0x05	; 5
     744:	90 83       	st	Z, r25
	
	OCR1A = 0;  // PB5 PWM 출력 port left
     746:	1b bc       	out	0x2b, r1	; 43
     748:	1a bc       	out	0x2a, r1	; 42
	OCR1B = *speed;  // PB6 PWM 출력 port right
     74a:	8d 91       	ld	r24, X+
     74c:	9c 91       	ld	r25, X
     74e:	99 bd       	out	0x29, r25	; 41
     750:	88 bd       	out	0x28, r24	; 40
     752:	08 95       	ret

00000754 <turn_right>:
}

void turn_right(int *speed)
{
     754:	dc 01       	movw	r26, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     756:	e2 e6       	ldi	r30, 0x62	; 98
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	90 81       	ld	r25, Z
     75c:	90 7f       	andi	r25, 0xF0	; 240
     75e:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     760:	90 81       	ld	r25, Z
     762:	95 60       	ori	r25, 0x05	; 5
     764:	90 83       	st	Z, r25
	
	OCR1A = *speed;  // PB5 PWM 출력 port left
     766:	8d 91       	ld	r24, X+
     768:	9c 91       	ld	r25, X
     76a:	9b bd       	out	0x2b, r25	; 43
     76c:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 0;  // PB6 PWM 출력 port right
     76e:	19 bc       	out	0x29, r1	; 41
     770:	18 bc       	out	0x28, r1	; 40
     772:	08 95       	ret

00000774 <init_n289n>:
	   1         1   : STOP
*/

void init_n289n(void)
{
	MOTOR_PWM_DDR |= 1 << MOTOR_LEFT_PORT_DDR | 1 << MOTOR_RIGHT_PORT_DDR; // DDR설정
     774:	87 b3       	in	r24, 0x17	; 23
     776:	80 66       	ori	r24, 0x60	; 96
     778:	87 bb       	out	0x17, r24	; 23
	MOTOR_DRIVER_DIRECTION_PORT_DDR |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3; // PF1234 출력으로 설정
     77a:	e1 e6       	ldi	r30, 0x61	; 97
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	80 81       	ld	r24, Z
     780:	8f 60       	ori	r24, 0x0F	; 15
     782:	80 83       	st	Z, r24
	
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     784:	e2 e6       	ldi	r30, 0x62	; 98
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
     78a:	80 7f       	andi	r24, 0xF0	; 240
     78c:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 2; // 자동차를 전진모드로 
     78e:	80 81       	ld	r24, Z
     790:	85 60       	ori	r24, 0x05	; 5
     792:	80 83       	st	Z, r24
     794:	08 95       	ret

00000796 <init_timer1_pwm>:
	// 분주비 : 64 16000000HZ/64 ==> 250000HZ(250kHZ)
	// T=1/f 1/250000HZ ==> 0.000004sec (4us)
	// 250000HZ에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//              127                             : 0.5ms
	//              0x3ff(1023) --> 4ms
	TCCR1B |= 1 << CS11 | 1 << CS10;   // 분주비 64  P318 표14-1
     796:	8e b5       	in	r24, 0x2e	; 46
     798:	83 60       	ori	r24, 0x03	; 3
     79a:	8e bd       	out	0x2e, r24	; 46
	
	// 모드 14: 고속 PWM timer1사용  (P327 표14-5)
	TCCR1A |= 1 << WGM11;   // TOP --> ICR1에 설정
     79c:	8f b5       	in	r24, 0x2f	; 47
     79e:	82 60       	ori	r24, 0x02	; 2
     7a0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM13 | 1 << WGM12;
     7a2:	8e b5       	in	r24, 0x2e	; 46
     7a4:	88 61       	ori	r24, 0x18	; 24
     7a6:	8e bd       	out	0x2e, r24	; 46
	
	// 비반전모드 top: ICR1 비교일치값(PWM) 지정 : OCR1A, OCR1B P350 표15-7
	// 비교일치 발생시 OCR1A, OCR1B의 출력 핀은 LOW로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR1A |= 1 << COM1A1;
     7a8:	8f b5       	in	r24, 0x2f	; 47
     7aa:	80 68       	ori	r24, 0x80	; 128
     7ac:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= 1 << COM1B1;
     7ae:	8f b5       	in	r24, 0x2f	; 47
     7b0:	80 62       	ori	r24, 0x20	; 32
     7b2:	8f bd       	out	0x2f, r24	; 47

	ICR1 = 0x3ff;  // 1023 ==> 4ms TOP : PWM 값
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	93 e0       	ldi	r25, 0x03	; 3
     7b8:	97 bd       	out	0x27, r25	; 39
     7ba:	86 bd       	out	0x26, r24	; 38
     7bc:	08 95       	ret

000007be <stop>:
	OCR1B = 0;  // PB6 PWM 출력 port right
}

void stop(void)
{
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     7be:	e2 e6       	ldi	r30, 0x62	; 98
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	80 81       	ld	r24, Z
     7c4:	80 7f       	andi	r24, 0xF0	; 240
     7c6:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3;  // stop 모드로 설정
     7c8:	80 81       	ld	r24, Z
     7ca:	8f 60       	ori	r24, 0x0F	; 15
     7cc:	80 83       	st	Z, r24
	
	OCR1A = 0;  // PB5 PWM 출력 port left
     7ce:	1b bc       	out	0x2b, r1	; 43
     7d0:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;  // PB6 PWM 출력 port right
     7d2:	19 bc       	out	0x29, r1	; 41
     7d4:	18 bc       	out	0x28, r1	; 40
     7d6:	08 95       	ret

000007d8 <auto_start>:
}
////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////         자동모드            //////////////////////////////////
void auto_start(void)
{
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	00 d0       	rcall	.+0      	; 0x7de <auto_start+0x6>
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
	int run_state;
	sec_count = 120;
     7e2:	88 e7       	ldi	r24, 0x78	; 120
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a0 e0       	ldi	r26, 0x00	; 0
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <sec_count>
     7ee:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <sec_count+0x1>
     7f2:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <sec_count+0x2>
     7f6:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <sec_count+0x3>
	char sbuf[20];

	while(sec_count > 0)
     7fa:	4c c2       	rjmp	.+1176   	; 0xc94 <auto_start+0x4bc>
	{
		ultrasonic_trigger();
     7fc:	49 d4       	rcall	.+2194   	; 0x1090 <ultrasonic_trigger>
		if (msec_count >= 1000)
     7fe:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <msec_count>
     802:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <msec_count+0x1>
     806:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <msec_count+0x2>
     80a:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <msec_count+0x3>
     80e:	88 3e       	cpi	r24, 0xE8	; 232
     810:	93 40       	sbci	r25, 0x03	; 3
     812:	a1 05       	cpc	r26, r1
     814:	b1 05       	cpc	r27, r1
     816:	d8 f0       	brcs	.+54     	; 0x84e <auto_start+0x76>
		{
			msec_count = 0;
     818:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <msec_count>
     81c:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <msec_count+0x1>
     820:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <msec_count+0x2>
     824:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <msec_count+0x3>
			sec_count--;
     828:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <sec_count>
     82c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <sec_count+0x1>
     830:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <sec_count+0x2>
     834:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <sec_count+0x3>
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	a1 09       	sbc	r26, r1
     83c:	b1 09       	sbc	r27, r1
     83e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <sec_count>
     842:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <sec_count+0x1>
     846:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <sec_count+0x2>
     84a:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <sec_count+0x3>
		} // 1초씩 감소

		if (fnd_refreshrate >= 2)
     84e:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <fnd_refreshrate>
     852:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <fnd_refreshrate+0x1>
     856:	a0 91 72 01 	lds	r26, 0x0172	; 0x800172 <fnd_refreshrate+0x2>
     85a:	b0 91 73 01 	lds	r27, 0x0173	; 0x800173 <fnd_refreshrate+0x3>
     85e:	02 97       	sbiw	r24, 0x02	; 2
     860:	a1 05       	cpc	r26, r1
     862:	b1 05       	cpc	r27, r1
     864:	58 f0       	brcs	.+22     	; 0x87c <auto_start+0xa4>
		{
			fnd_refreshrate = 0;
     866:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <fnd_refreshrate>
     86a:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <fnd_refreshrate+0x1>
     86e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <fnd_refreshrate+0x2>
     872:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <fnd_refreshrate+0x3>
			fnd_display(&run_state);
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	d8 dc       	rcall	.-1616   	; 0x22c <fnd_display>
// 		volatile int gap1= ultrasonic_right_distance - ultrasonic_left_distance;
// 		volatile int gap2= ultrasonic_left_distance - ultrasonic_right_distance;

		//sprintf(sbuf,"%3d", run_state);
		
		 if (ultrasonic_right_distance <= 3 && ultrasonic_center_distance <= 3)
     87c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
     880:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     884:	04 97       	sbiw	r24, 0x04	; 4
     886:	8c f4       	brge	.+34     	; 0x8aa <auto_start+0xd2>
     888:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     88c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     890:	04 97       	sbiw	r24, 0x04	; 4
     892:	5c f4       	brge	.+22     	; 0x8aa <auto_start+0xd2>
		{
			run_state = BACKWARD;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	9a 83       	std	Y+2, r25	; 0x02
     89a:	89 83       	std	Y+1, r24	; 0x01
			//backward(600);
			current_speed = 600;
     89c:	88 e5       	ldi	r24, 0x58	; 88
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     8a4:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     8a8:	e6 c1       	rjmp	.+972    	; 0xc76 <auto_start+0x49e>
			//sbuf[20] = "BACKWARD";
		}
		else if (ultrasonic_left_distance <= 3 && ultrasonic_center_distance <= 3)
     8aa:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
     8ae:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     8b2:	04 97       	sbiw	r24, 0x04	; 4
     8b4:	8c f4       	brge	.+34     	; 0x8d8 <auto_start+0x100>
     8b6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     8ba:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     8be:	04 97       	sbiw	r24, 0x04	; 4
     8c0:	5c f4       	brge	.+22     	; 0x8d8 <auto_start+0x100>
		{
			run_state = BACKWARD;
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	9a 83       	std	Y+2, r25	; 0x02
     8c8:	89 83       	std	Y+1, r24	; 0x01
			//backward(600);
			current_speed = 600;
     8ca:	88 e5       	ldi	r24, 0x58	; 88
     8cc:	92 e0       	ldi	r25, 0x02	; 2
     8ce:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     8d2:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     8d6:	cf c1       	rjmp	.+926    	; 0xc76 <auto_start+0x49e>
			//sbuf[20] = "BACKWARD";
		}
		else if (ultrasonic_left_distance <= 3 && ultrasonic_right_distance <= 3)
     8d8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
     8dc:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     8e0:	04 97       	sbiw	r24, 0x04	; 4
     8e2:	8c f4       	brge	.+34     	; 0x906 <auto_start+0x12e>
     8e4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
     8e8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     8ec:	04 97       	sbiw	r24, 0x04	; 4
     8ee:	5c f4       	brge	.+22     	; 0x906 <auto_start+0x12e>
		{
			run_state = BACKWARD;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	9a 83       	std	Y+2, r25	; 0x02
     8f6:	89 83       	std	Y+1, r24	; 0x01
			//backward(600);
			current_speed = 600;
     8f8:	88 e5       	ldi	r24, 0x58	; 88
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     900:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     904:	b8 c1       	rjmp	.+880    	; 0xc76 <auto_start+0x49e>
			//sbuf[20] = "BACKWARD";
		}
		else if(ultrasonic_center_distance <= 4)
     906:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     90a:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     90e:	05 97       	sbiw	r24, 0x05	; 5
     910:	5c f4       	brge	.+22     	; 0x928 <auto_start+0x150>
		{
			run_state = BACKWARD;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	9a 83       	std	Y+2, r25	; 0x02
     918:	89 83       	std	Y+1, r24	; 0x01
			//backward(600);
			current_speed = 600;
     91a:	88 e5       	ldi	r24, 0x58	; 88
     91c:	92 e0       	ldi	r25, 0x02	; 2
     91e:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     922:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     926:	a7 c1       	rjmp	.+846    	; 0xc76 <auto_start+0x49e>
			//sbuf[20] = "BACKWARD";
		}
		else if (ultrasonic_right_distance <= 4)
     928:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
     92c:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     930:	05 97       	sbiw	r24, 0x05	; 5
     932:	5c f4       	brge	.+22     	; 0x94a <auto_start+0x172>
		{
			run_state = TURN_LEFT;
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	9a 83       	std	Y+2, r25	; 0x02
     93a:	89 83       	std	Y+1, r24	; 0x01
			//turn_left(500);
			current_speed = 500;
     93c:	84 ef       	ldi	r24, 0xF4	; 244
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     944:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     948:	96 c1       	rjmp	.+812    	; 0xc76 <auto_start+0x49e>
			//sbuf[20] = "BACKWARD";
		}
		else if (ultrasonic_left_distance <= 4)
     94a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
     94e:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     952:	05 97       	sbiw	r24, 0x05	; 5
     954:	5c f4       	brge	.+22     	; 0x96c <auto_start+0x194>
		{
			run_state = TURN_RIGHT;
     956:	83 e0       	ldi	r24, 0x03	; 3
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	9a 83       	std	Y+2, r25	; 0x02
     95c:	89 83       	std	Y+1, r24	; 0x01
			//turn_right(500);
			current_speed = 500;
     95e:	84 ef       	ldi	r24, 0xF4	; 244
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     966:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     96a:	85 c1       	rjmp	.+778    	; 0xc76 <auto_start+0x49e>
			//sbuf[20] = "BACKWARD";
		}
		else if (ultrasonic_left_distance <= 3 && ultrasonic_center_distance <= 3 && ultrasonic_right_distance <= 3)
     96c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
     970:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     974:	04 97       	sbiw	r24, 0x04	; 4
     976:	bc f4       	brge	.+46     	; 0x9a6 <auto_start+0x1ce>
     978:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     97c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     980:	04 97       	sbiw	r24, 0x04	; 4
     982:	8c f4       	brge	.+34     	; 0x9a6 <auto_start+0x1ce>
     984:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
     988:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     98c:	04 97       	sbiw	r24, 0x04	; 4
     98e:	5c f4       	brge	.+22     	; 0x9a6 <auto_start+0x1ce>
		{
			run_state = BACKWARD;
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	9a 83       	std	Y+2, r25	; 0x02
     996:	89 83       	std	Y+1, r24	; 0x01
			//backward(600);
			current_speed = 600;
     998:	88 e5       	ldi	r24, 0x58	; 88
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     9a0:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     9a4:	68 c1       	rjmp	.+720    	; 0xc76 <auto_start+0x49e>
			//sbuf[20] = "BACKWARD";
		}
		else if(ultrasonic_right_distance - ultrasonic_left_distance < 4 && ultrasonic_left_distance - ultrasonic_right_distance < 4 && ultrasonic_center_distance >= 10)
     9a6:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
     9aa:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     9ae:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <ultrasonic_left_distance>
     9b2:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     9b6:	82 1b       	sub	r24, r18
     9b8:	93 0b       	sbc	r25, r19
     9ba:	04 97       	sbiw	r24, 0x04	; 4
     9bc:	dc f4       	brge	.+54     	; 0x9f4 <auto_start+0x21c>
     9be:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
     9c2:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     9c6:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <ultrasonic_right_distance>
     9ca:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     9ce:	82 1b       	sub	r24, r18
     9d0:	93 0b       	sbc	r25, r19
     9d2:	04 97       	sbiw	r24, 0x04	; 4
     9d4:	7c f4       	brge	.+30     	; 0x9f4 <auto_start+0x21c>
     9d6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     9da:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     9de:	0a 97       	sbiw	r24, 0x0a	; 10
     9e0:	4c f0       	brlt	.+18     	; 0x9f4 <auto_start+0x21c>
		{
			run_state = FORWARD;
     9e2:	1a 82       	std	Y+2, r1	; 0x02
     9e4:	19 82       	std	Y+1, r1	; 0x01
			//forward(300);
			current_speed = 300;
     9e6:	8c e2       	ldi	r24, 0x2C	; 44
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     9ee:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     9f2:	41 c1       	rjmp	.+642    	; 0xc76 <auto_start+0x49e>
			//sbuf[20] = "FORWARD";
		}
		else if (ultrasonic_center_distance >= 800 || ultrasonic_left_distance >= 800 || ultrasonic_right_distance >= 800)
     9f4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     9f8:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     9fc:	80 32       	cpi	r24, 0x20	; 32
     9fe:	93 40       	sbci	r25, 0x03	; 3
     a00:	74 f4       	brge	.+28     	; 0xa1e <auto_start+0x246>
     a02:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
     a06:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     a0a:	80 32       	cpi	r24, 0x20	; 32
     a0c:	93 40       	sbci	r25, 0x03	; 3
     a0e:	3c f4       	brge	.+14     	; 0xa1e <auto_start+0x246>
     a10:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
     a14:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     a18:	80 32       	cpi	r24, 0x20	; 32
     a1a:	93 40       	sbci	r25, 0x03	; 3
     a1c:	5c f0       	brlt	.+22     	; 0xa34 <auto_start+0x25c>
		{
			run_state = BACKWARD;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	9a 83       	std	Y+2, r25	; 0x02
     a24:	89 83       	std	Y+1, r24	; 0x01
			//backward(400);
			current_speed = 400;
     a26:	80 e9       	ldi	r24, 0x90	; 144
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     a2e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     a32:	21 c1       	rjmp	.+578    	; 0xc76 <auto_start+0x49e>
			//sbuf[20] = "BACKWARD";
		}
 		
		 ///좁은 길
		else if (ultrasonic_right_distance <= 7 && ultrasonic_center_distance <= 15 && ultrasonic_right_distance > 3 && ultrasonic_center_distance > 3)
     a34:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
     a38:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     a3c:	08 97       	sbiw	r24, 0x08	; 8
     a3e:	ec f4       	brge	.+58     	; 0xa7a <auto_start+0x2a2>
     a40:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     a44:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     a48:	40 97       	sbiw	r24, 0x10	; 16
     a4a:	bc f4       	brge	.+46     	; 0xa7a <auto_start+0x2a2>
     a4c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
     a50:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     a54:	04 97       	sbiw	r24, 0x04	; 4
     a56:	8c f0       	brlt	.+34     	; 0xa7a <auto_start+0x2a2>
     a58:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     a5c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     a60:	04 97       	sbiw	r24, 0x04	; 4
     a62:	5c f0       	brlt	.+22     	; 0xa7a <auto_start+0x2a2>
		{
			run_state = TURN_LEFT;
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	9a 83       	std	Y+2, r25	; 0x02
     a6a:	89 83       	std	Y+1, r24	; 0x01
			//turn_left(400);
			current_speed = 400;
     a6c:	80 e9       	ldi	r24, 0x90	; 144
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     a74:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     a78:	fe c0       	rjmp	.+508    	; 0xc76 <auto_start+0x49e>
			//sbuf[20] = "TRUN LEFT";
		}
		else if (ultrasonic_left_distance <= 7 && ultrasonic_center_distance <= 15 && ultrasonic_left_distance > 3 && ultrasonic_center_distance > 3)
     a7a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
     a7e:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     a82:	08 97       	sbiw	r24, 0x08	; 8
     a84:	ec f4       	brge	.+58     	; 0xac0 <auto_start+0x2e8>
     a86:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     a8a:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     a8e:	40 97       	sbiw	r24, 0x10	; 16
     a90:	bc f4       	brge	.+46     	; 0xac0 <auto_start+0x2e8>
     a92:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
     a96:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     a9a:	04 97       	sbiw	r24, 0x04	; 4
     a9c:	8c f0       	brlt	.+34     	; 0xac0 <auto_start+0x2e8>
     a9e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     aa2:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     aa6:	04 97       	sbiw	r24, 0x04	; 4
     aa8:	5c f0       	brlt	.+22     	; 0xac0 <auto_start+0x2e8>
		{
			run_state = TURN_RIGHT;
     aaa:	83 e0       	ldi	r24, 0x03	; 3
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	9a 83       	std	Y+2, r25	; 0x02
     ab0:	89 83       	std	Y+1, r24	; 0x01
			//turn_right(400);
			current_speed = 400;
     ab2:	80 e9       	ldi	r24, 0x90	; 144
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     aba:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     abe:	db c0       	rjmp	.+438    	; 0xc76 <auto_start+0x49e>
		}		
		
		 ///
		 
		 /// 넓은 길
		 else if (ultrasonic_right_distance <= 20 && ultrasonic_center_distance <= 30 && ultrasonic_right_distance > 3 && ultrasonic_center_distance > 3)
     ac0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
     ac4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     ac8:	45 97       	sbiw	r24, 0x15	; 21
     aca:	ec f4       	brge	.+58     	; 0xb06 <auto_start+0x32e>
     acc:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     ad0:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     ad4:	4f 97       	sbiw	r24, 0x1f	; 31
     ad6:	bc f4       	brge	.+46     	; 0xb06 <auto_start+0x32e>
     ad8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
     adc:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     ae0:	04 97       	sbiw	r24, 0x04	; 4
     ae2:	8c f0       	brlt	.+34     	; 0xb06 <auto_start+0x32e>
     ae4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     ae8:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     aec:	04 97       	sbiw	r24, 0x04	; 4
     aee:	5c f0       	brlt	.+22     	; 0xb06 <auto_start+0x32e>
		 {
			 run_state = TURN_LEFT;
     af0:	82 e0       	ldi	r24, 0x02	; 2
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	9a 83       	std	Y+2, r25	; 0x02
     af6:	89 83       	std	Y+1, r24	; 0x01
			 //turn_left(500);
			 current_speed = 500;
     af8:	84 ef       	ldi	r24, 0xF4	; 244
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     b00:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     b04:	b8 c0       	rjmp	.+368    	; 0xc76 <auto_start+0x49e>
			 //sbuf[20] = "TRUN LEFT";
		 }
		 else if (ultrasonic_left_distance <= 20 && ultrasonic_center_distance <= 30 && ultrasonic_left_distance > 3 && ultrasonic_center_distance > 3)
     b06:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
     b0a:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     b0e:	45 97       	sbiw	r24, 0x15	; 21
     b10:	ec f4       	brge	.+58     	; 0xb4c <auto_start+0x374>
     b12:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     b16:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     b1a:	4f 97       	sbiw	r24, 0x1f	; 31
     b1c:	bc f4       	brge	.+46     	; 0xb4c <auto_start+0x374>
     b1e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
     b22:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     b26:	04 97       	sbiw	r24, 0x04	; 4
     b28:	8c f0       	brlt	.+34     	; 0xb4c <auto_start+0x374>
     b2a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     b2e:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     b32:	04 97       	sbiw	r24, 0x04	; 4
     b34:	5c f0       	brlt	.+22     	; 0xb4c <auto_start+0x374>
		 {
			 run_state = TURN_RIGHT;
     b36:	83 e0       	ldi	r24, 0x03	; 3
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	9a 83       	std	Y+2, r25	; 0x02
     b3c:	89 83       	std	Y+1, r24	; 0x01
			 //turn_right(500);
			 current_speed = 500;
     b3e:	84 ef       	ldi	r24, 0xF4	; 244
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     b46:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     b4a:	95 c0       	rjmp	.+298    	; 0xc76 <auto_start+0x49e>
			 //sbuf[20] = "TRUN RIGHT";
		 }
		 ///
		 else if (ultrasonic_right_distance <= 20)
     b4c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
     b50:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     b54:	45 97       	sbiw	r24, 0x15	; 21
     b56:	5c f4       	brge	.+22     	; 0xb6e <auto_start+0x396>
		 {
			 run_state = TURN_LEFT;
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	9a 83       	std	Y+2, r25	; 0x02
     b5e:	89 83       	std	Y+1, r24	; 0x01
			 //turn_left(500);
			 current_speed = 500;
     b60:	84 ef       	ldi	r24, 0xF4	; 244
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     b68:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     b6c:	84 c0       	rjmp	.+264    	; 0xc76 <auto_start+0x49e>
			 //sbuf[20] = "TRUN LEFT";
		 }
		 else if (ultrasonic_left_distance <= 20)
     b6e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
     b72:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     b76:	45 97       	sbiw	r24, 0x15	; 21
     b78:	5c f4       	brge	.+22     	; 0xb90 <auto_start+0x3b8>
		 {
			 run_state = TURN_RIGHT;
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	9a 83       	std	Y+2, r25	; 0x02
     b80:	89 83       	std	Y+1, r24	; 0x01
			 //turn_right(500);
			 current_speed = 500;
     b82:	84 ef       	ldi	r24, 0xF4	; 244
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     b8a:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     b8e:	73 c0       	rjmp	.+230    	; 0xc76 <auto_start+0x49e>
			 //sbuf[20] = "TRUN RIGHT";
		 }
		 
		
		else if ((ultrasonic_left_distance - ultrasonic_right_distance <= 2 && ultrasonic_right_distance - ultrasonic_left_distance <= 2) || ultrasonic_center_distance >= 20 && ultrasonic_center_distance <= 200)
     b90:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
     b94:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     b98:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <ultrasonic_right_distance>
     b9c:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     ba0:	82 1b       	sub	r24, r18
     ba2:	93 0b       	sbc	r25, r19
     ba4:	03 97       	sbiw	r24, 0x03	; 3
     ba6:	64 f4       	brge	.+24     	; 0xbc0 <auto_start+0x3e8>
     ba8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
     bac:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     bb0:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <ultrasonic_left_distance>
     bb4:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     bb8:	82 1b       	sub	r24, r18
     bba:	93 0b       	sbc	r25, r19
     bbc:	03 97       	sbiw	r24, 0x03	; 3
     bbe:	6c f0       	brlt	.+26     	; 0xbda <auto_start+0x402>
     bc0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     bc4:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     bc8:	44 97       	sbiw	r24, 0x14	; 20
     bca:	84 f0       	brlt	.+32     	; 0xbec <auto_start+0x414>
     bcc:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     bd0:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     bd4:	89 3c       	cpi	r24, 0xC9	; 201
     bd6:	91 05       	cpc	r25, r1
     bd8:	4c f4       	brge	.+18     	; 0xbec <auto_start+0x414>
		{
			run_state = FORWARD;
     bda:	1a 82       	std	Y+2, r1	; 0x02
     bdc:	19 82       	std	Y+1, r1	; 0x01
			//forward(350);
			current_speed = 350;
     bde:	8e e5       	ldi	r24, 0x5E	; 94
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     be6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     bea:	45 c0       	rjmp	.+138    	; 0xc76 <auto_start+0x49e>
			//sbuf[20] = "FORWARD";
		}
		else if(ultrasonic_right_distance - ultrasonic_left_distance <= 4 && ultrasonic_center_distance <= 7 && ultrasonic_right_distance > 5)
     bec:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
     bf0:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     bf4:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <ultrasonic_left_distance>
     bf8:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     bfc:	82 1b       	sub	r24, r18
     bfe:	93 0b       	sbc	r25, r19
     c00:	05 97       	sbiw	r24, 0x05	; 5
     c02:	bc f4       	brge	.+46     	; 0xc32 <auto_start+0x45a>
     c04:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     c08:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     c0c:	08 97       	sbiw	r24, 0x08	; 8
     c0e:	8c f4       	brge	.+34     	; 0xc32 <auto_start+0x45a>
     c10:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
     c14:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     c18:	06 97       	sbiw	r24, 0x06	; 6
     c1a:	5c f0       	brlt	.+22     	; 0xc32 <auto_start+0x45a>
		{
			run_state = TURN_LEFT;
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01
			//turn_left(500);
			current_speed = 500;
     c24:	84 ef       	ldi	r24, 0xF4	; 244
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     c2c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
     c30:	22 c0       	rjmp	.+68     	; 0xc76 <auto_start+0x49e>
			//sbuf[20] = "TRUN LEFT";
		}
		else if(ultrasonic_left_distance - ultrasonic_right_distance <= 4 && ultrasonic_center_distance <= 7 && ultrasonic_left_distance > 5)
     c32:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
     c36:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     c3a:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <ultrasonic_right_distance>
     c3e:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
     c42:	82 1b       	sub	r24, r18
     c44:	93 0b       	sbc	r25, r19
     c46:	05 97       	sbiw	r24, 0x05	; 5
     c48:	b4 f4       	brge	.+44     	; 0xc76 <auto_start+0x49e>
     c4a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
     c4e:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
     c52:	08 97       	sbiw	r24, 0x08	; 8
     c54:	84 f4       	brge	.+32     	; 0xc76 <auto_start+0x49e>
     c56:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
     c5a:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
     c5e:	06 97       	sbiw	r24, 0x06	; 6
     c60:	54 f0       	brlt	.+20     	; 0xc76 <auto_start+0x49e>
		{
			run_state = TURN_RIGHT;
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	89 83       	std	Y+1, r24	; 0x01
			//turn_right(500);
			current_speed = 500;
     c6a:	84 ef       	ldi	r24, 0xF4	; 244
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <current_speed+0x1>
     c72:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <current_speed>
			//sbuf[20] = "TRUN RIGHT";
		}
		
		current_location[run_state](&current_speed);
     c76:	e9 81       	ldd	r30, Y+1	; 0x01
     c78:	fa 81       	ldd	r31, Y+2	; 0x02
     c7a:	ee 0f       	add	r30, r30
     c7c:	ff 1f       	adc	r31, r31
     c7e:	ea 5e       	subi	r30, 0xEA	; 234
     c80:	fe 4f       	sbci	r31, 0xFE	; 254
     c82:	01 90       	ld	r0, Z+
     c84:	f0 81       	ld	r31, Z
     c86:	e0 2d       	mov	r30, r0
     c88:	88 e7       	ldi	r24, 0x78	; 120
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	09 95       	icall
		I2C_LCD_Test(&current_speed);
     c8e:	88 e7       	ldi	r24, 0x78	; 120
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	5a dc       	rcall	.-1868   	; 0x548 <I2C_LCD_Test>
{
	int run_state;
	sec_count = 120;
	char sbuf[20];

	while(sec_count > 0)
     c94:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <sec_count>
     c98:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <sec_count+0x1>
     c9c:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <sec_count+0x2>
     ca0:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <sec_count+0x3>
     ca4:	89 2b       	or	r24, r25
     ca6:	8a 2b       	or	r24, r26
     ca8:	8b 2b       	or	r24, r27
     caa:	09 f0       	breq	.+2      	; 0xcae <auto_start+0x4d6>
     cac:	a7 cd       	rjmp	.-1202   	; 0x7fc <auto_start+0x24>
		}
		
		current_location[run_state](&current_speed);
		I2C_LCD_Test(&current_speed);
	}
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	08 95       	ret

00000cb8 <__vector_18>:

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     cb8:	1f 92       	push	r1
     cba:	0f 92       	push	r0
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	0f 92       	push	r0
     cc0:	11 24       	eor	r1, r1
     cc2:	0b b6       	in	r0, 0x3b	; 59
     cc4:	0f 92       	push	r0
     cc6:	2f 93       	push	r18
     cc8:	3f 93       	push	r19
     cca:	4f 93       	push	r20
     ccc:	5f 93       	push	r21
     cce:	6f 93       	push	r22
     cd0:	7f 93       	push	r23
     cd2:	8f 93       	push	r24
     cd4:	9f 93       	push	r25
     cd6:	af 93       	push	r26
     cd8:	bf 93       	push	r27
     cda:	ef 93       	push	r30
     cdc:	ff 93       	push	r31
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	1f 92       	push	r1
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     ce8:	8c b1       	in	r24, 0x0c	; 12
     cea:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	8d 30       	cpi	r24, 0x0D	; 13
     cf0:	19 f0       	breq	.+6      	; 0xcf8 <__vector_18+0x40>
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	8a 30       	cpi	r24, 0x0A	; 10
     cf6:	61 f5       	brne	.+88     	; 0xd50 <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     cf8:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <rear>
     cfc:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <rear+0x1>
     d00:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <i.1878>
     d04:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <i.1878+0x1>
     d08:	40 e5       	ldi	r20, 0x50	; 80
     d0a:	42 9f       	mul	r20, r18
     d0c:	f0 01       	movw	r30, r0
     d0e:	43 9f       	mul	r20, r19
     d10:	f0 0d       	add	r31, r0
     d12:	11 24       	eor	r1, r1
     d14:	ec 57       	subi	r30, 0x7C	; 124
     d16:	fe 4f       	sbci	r31, 0xFE	; 254
     d18:	e8 0f       	add	r30, r24
     d1a:	f9 1f       	adc	r31, r25
     d1c:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     d1e:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <i.1878+0x1>
     d22:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <i.1878>
		rear++;
     d26:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <rear>
     d2a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <rear+0x1>
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <rear+0x1>
     d34:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
     d38:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <rear>
     d3c:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <rear+0x1>
     d40:	6a e0       	ldi	r22, 0x0A	; 10
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	e4 d3       	rcall	.+1992   	; 0x150e <__divmodhi4>
     d46:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <rear+0x1>
     d4a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <rear>
     d4e:	1c c0       	rjmp	.+56     	; 0xd88 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
     d50:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <rear>
     d54:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <rear+0x1>
     d58:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <i.1878>
     d5c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <i.1878+0x1>
     d60:	9c 01       	movw	r18, r24
     d62:	2f 5f       	subi	r18, 0xFF	; 255
     d64:	3f 4f       	sbci	r19, 0xFF	; 255
     d66:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <i.1878+0x1>
     d6a:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <i.1878>
     d6e:	49 81       	ldd	r20, Y+1	; 0x01
     d70:	50 e5       	ldi	r21, 0x50	; 80
     d72:	56 9f       	mul	r21, r22
     d74:	90 01       	movw	r18, r0
     d76:	57 9f       	mul	r21, r23
     d78:	30 0d       	add	r19, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	2c 57       	subi	r18, 0x7C	; 124
     d7e:	3e 4f       	sbci	r19, 0xFE	; 254
     d80:	f9 01       	movw	r30, r18
     d82:	e8 0f       	add	r30, r24
     d84:	f9 1f       	adc	r31, r25
     d86:	40 83       	st	Z, r20
	}
		  
}
     d88:	0f 90       	pop	r0
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	ff 91       	pop	r31
     d90:	ef 91       	pop	r30
     d92:	bf 91       	pop	r27
     d94:	af 91       	pop	r26
     d96:	9f 91       	pop	r25
     d98:	8f 91       	pop	r24
     d9a:	7f 91       	pop	r23
     d9c:	6f 91       	pop	r22
     d9e:	5f 91       	pop	r21
     da0:	4f 91       	pop	r20
     da2:	3f 91       	pop	r19
     da4:	2f 91       	pop	r18
     da6:	0f 90       	pop	r0
     da8:	0b be       	out	0x3b, r0	; 59
     daa:	0f 90       	pop	r0
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	0f 90       	pop	r0
     db0:	1f 90       	pop	r1
     db2:	18 95       	reti

00000db4 <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
     db4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
     db8:	8f ec       	ldi	r24, 0xCF	; 207
     dba:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
     dbc:	8b b1       	in	r24, 0x0b	; 11
     dbe:	82 60       	ori	r24, 0x02	; 2
     dc0:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     dc2:	e5 e9       	ldi	r30, 0x95	; 149
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	86 60       	ori	r24, 0x06	; 6
     dca:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     dcc:	8a b1       	in	r24, 0x0a	; 10
     dce:	88 69       	ori	r24, 0x98	; 152
     dd0:	8a b9       	out	0x0a, r24	; 10
     dd2:	08 95       	ret

00000dd4 <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
     dd4:	5d 9b       	sbis	0x0b, 5	; 11
     dd6:	fe cf       	rjmp	.-4      	; 0xdd4 <UART0_transmit>
		;   // no operation NOP
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
     dd8:	8c b9       	out	0x0c, r24	; 12
     dda:	08 95       	ret

00000ddc <__vector_30>:
volatile uint8_t bt_data;

extern void UART0_transmit();

ISR(USART1_RX_vect)
{
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	0b b6       	in	r0, 0x3b	; 59
     de8:	0f 92       	push	r0
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
	
	bt_data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
     e02:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     e06:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <bt_data>
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	UART0_transmit(bt_data); // BT로 들어온 char를 확인하기 위해 comport master로 출력
     e0a:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <bt_data>
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	e1 df       	rcall	.-62     	; 0xdd4 <UART0_transmit>
// 	{
// 		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
// 		rx1_buff[rear1][i++] = data;
// 	}
		  
}
     e12:	ff 91       	pop	r31
     e14:	ef 91       	pop	r30
     e16:	bf 91       	pop	r27
     e18:	af 91       	pop	r26
     e1a:	9f 91       	pop	r25
     e1c:	8f 91       	pop	r24
     e1e:	7f 91       	pop	r23
     e20:	6f 91       	pop	r22
     e22:	5f 91       	pop	r21
     e24:	4f 91       	pop	r20
     e26:	3f 91       	pop	r19
     e28:	2f 91       	pop	r18
     e2a:	0f 90       	pop	r0
     e2c:	0b be       	out	0x3b, r0	; 59
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
     e38:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
     e3c:	8f ec       	ldi	r24, 0xCF	; 207
     e3e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
     e42:	eb e9       	ldi	r30, 0x9B	; 155
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	82 60       	ori	r24, 0x02	; 2
     e4a:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     e4c:	ed e9       	ldi	r30, 0x9D	; 157
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	86 60       	ori	r24, 0x06	; 6
     e54:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     e56:	ea e9       	ldi	r30, 0x9A	; 154
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 69       	ori	r24, 0x98	; 152
     e5e:	80 83       	st	Z, r24
     e60:	08 95       	ret

00000e62 <__vector_5>:
volatile int ultrasonic_right_distance = 0;

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect) // LEFT
{
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	0b b6       	in	r0, 0x3b	; 59
     e6e:	0f 92       	push	r0
     e70:	2f 93       	push	r18
     e72:	3f 93       	push	r19
     e74:	4f 93       	push	r20
     e76:	5f 93       	push	r21
     e78:	6f 93       	push	r22
     e7a:	7f 93       	push	r23
     e7c:	8f 93       	push	r24
     e7e:	9f 93       	push	r25
     e80:	af 93       	push	r26
     e82:	bf 93       	push	r27
     e84:	ef 93       	push	r30
     e86:	ff 93       	push	r31
   // 1. 상승 edge
   if (ECHO_PIN_LEFT & (1 << ECHO_LEFT))
     e88:	0c 9b       	sbis	0x01, 4	; 1
     e8a:	05 c0       	rjmp	.+10     	; 0xe96 <__vector_5+0x34>
   {
      TCNT3 = 0;
     e8c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e90:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e94:	20 c0       	rjmp	.+64     	; 0xed6 <__vector_5+0x74>
   }
   // 2. 하강 edge
   else
   {
      // ECHO 핀에 들어온 펄스 길이를 us로 환산
      ultrasonic_left_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     e96:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e9a:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	44 d2       	rcall	.+1160   	; 0x132c <__floatunsisf>
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	34 e2       	ldi	r19, 0x24	; 36
     ea8:	44 e7       	ldi	r20, 0x74	; 116
     eaa:	59 e4       	ldi	r21, 0x49	; 73
     eac:	cd d2       	rcall	.+1434   	; 0x1448 <__mulsf3>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e8       	ldi	r20, 0x80	; 128
     eb4:	54 e4       	ldi	r21, 0x44	; 68
     eb6:	c8 d2       	rcall	.+1424   	; 0x1448 <__mulsf3>
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	34 e2       	ldi	r19, 0x24	; 36
     ebc:	44 e7       	ldi	r20, 0x74	; 116
     ebe:	5b e4       	ldi	r21, 0x4B	; 75
     ec0:	9c d1       	rcall	.+824    	; 0x11fa <__divsf3>
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	48 e6       	ldi	r20, 0x68	; 104
     ec8:	52 e4       	ldi	r21, 0x42	; 66
     eca:	97 d1       	rcall	.+814    	; 0x11fa <__divsf3>
     ecc:	fe d1       	rcall	.+1020   	; 0x12ca <__fixsfsi>
     ece:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <ultrasonic_left_distance+0x1>
     ed2:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <ultrasonic_left_distance>
      // 15.625khz의 1주기가 64us이다.
      // 64us * 10 == 640us
      // 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
      // sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
   }
}
     ed6:	ff 91       	pop	r31
     ed8:	ef 91       	pop	r30
     eda:	bf 91       	pop	r27
     edc:	af 91       	pop	r26
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	7f 91       	pop	r23
     ee4:	6f 91       	pop	r22
     ee6:	5f 91       	pop	r21
     ee8:	4f 91       	pop	r20
     eea:	3f 91       	pop	r19
     eec:	2f 91       	pop	r18
     eee:	0f 90       	pop	r0
     ef0:	0b be       	out	0x3b, r0	; 59
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <__vector_6>:

ISR(INT5_vect) // CENTER
{
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	0b b6       	in	r0, 0x3b	; 59
     f08:	0f 92       	push	r0
     f0a:	2f 93       	push	r18
     f0c:	3f 93       	push	r19
     f0e:	4f 93       	push	r20
     f10:	5f 93       	push	r21
     f12:	6f 93       	push	r22
     f14:	7f 93       	push	r23
     f16:	8f 93       	push	r24
     f18:	9f 93       	push	r25
     f1a:	af 93       	push	r26
     f1c:	bf 93       	push	r27
     f1e:	ef 93       	push	r30
     f20:	ff 93       	push	r31
   // 1. 상승 edge
   if (ECHO_PIN_CENTER & (1 << ECHO_CENTER))
     f22:	0d 9b       	sbis	0x01, 5	; 1
     f24:	05 c0       	rjmp	.+10     	; 0xf30 <__vector_6+0x34>
   {
      TCNT3 = 0;
     f26:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     f2a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     f2e:	20 c0       	rjmp	.+64     	; 0xf70 <__vector_6+0x74>
   }
   // 2. 하강 edge
   else
   {
      // ECHO 핀에 들어온 펄스 길이를 us로 환산
      ultrasonic_center_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     f30:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     f34:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	f7 d1       	rcall	.+1006   	; 0x132c <__floatunsisf>
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	34 e2       	ldi	r19, 0x24	; 36
     f42:	44 e7       	ldi	r20, 0x74	; 116
     f44:	59 e4       	ldi	r21, 0x49	; 73
     f46:	80 d2       	rcall	.+1280   	; 0x1448 <__mulsf3>
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	40 e8       	ldi	r20, 0x80	; 128
     f4e:	54 e4       	ldi	r21, 0x44	; 68
     f50:	7b d2       	rcall	.+1270   	; 0x1448 <__mulsf3>
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	34 e2       	ldi	r19, 0x24	; 36
     f56:	44 e7       	ldi	r20, 0x74	; 116
     f58:	5b e4       	ldi	r21, 0x4B	; 75
     f5a:	4f d1       	rcall	.+670    	; 0x11fa <__divsf3>
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	48 e6       	ldi	r20, 0x68	; 104
     f62:	52 e4       	ldi	r21, 0x42	; 66
     f64:	4a d1       	rcall	.+660    	; 0x11fa <__divsf3>
     f66:	b1 d1       	rcall	.+866    	; 0x12ca <__fixsfsi>
     f68:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <ultrasonic_center_distance+0x1>
     f6c:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <ultrasonic_center_distance>
      // 15.625khz의 1주기가 64us이다.
      // 64us * 10 == 640us
      // 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
      // sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
   }
}
     f70:	ff 91       	pop	r31
     f72:	ef 91       	pop	r30
     f74:	bf 91       	pop	r27
     f76:	af 91       	pop	r26
     f78:	9f 91       	pop	r25
     f7a:	8f 91       	pop	r24
     f7c:	7f 91       	pop	r23
     f7e:	6f 91       	pop	r22
     f80:	5f 91       	pop	r21
     f82:	4f 91       	pop	r20
     f84:	3f 91       	pop	r19
     f86:	2f 91       	pop	r18
     f88:	0f 90       	pop	r0
     f8a:	0b be       	out	0x3b, r0	; 59
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	0f 90       	pop	r0
     f92:	1f 90       	pop	r1
     f94:	18 95       	reti

00000f96 <__vector_7>:

ISR(INT6_vect) // RIGHT
{
     f96:	1f 92       	push	r1
     f98:	0f 92       	push	r0
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	0f 92       	push	r0
     f9e:	11 24       	eor	r1, r1
     fa0:	0b b6       	in	r0, 0x3b	; 59
     fa2:	0f 92       	push	r0
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	4f 93       	push	r20
     faa:	5f 93       	push	r21
     fac:	6f 93       	push	r22
     fae:	7f 93       	push	r23
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
   // 1. 상승 edge
   if (ECHO_PIN_RIGHT & (1 << ECHO_RIGHT))
     fbc:	0e 9b       	sbis	0x01, 6	; 1
     fbe:	05 c0       	rjmp	.+10     	; 0xfca <__vector_7+0x34>
   {
      TCNT3 = 0;
     fc0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     fc4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     fc8:	20 c0       	rjmp	.+64     	; 0x100a <__DATA_REGION_LENGTH__+0xa>
   }
   // 2. 하강 edge
   else
   {
      // ECHO 핀에 들어온 펄스 길이를 us로 환산
      ultrasonic_right_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     fca:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     fce:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	aa d1       	rcall	.+852    	; 0x132c <__floatunsisf>
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	34 e2       	ldi	r19, 0x24	; 36
     fdc:	44 e7       	ldi	r20, 0x74	; 116
     fde:	59 e4       	ldi	r21, 0x49	; 73
     fe0:	33 d2       	rcall	.+1126   	; 0x1448 <__mulsf3>
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e8       	ldi	r20, 0x80	; 128
     fe8:	54 e4       	ldi	r21, 0x44	; 68
     fea:	2e d2       	rcall	.+1116   	; 0x1448 <__mulsf3>
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	34 e2       	ldi	r19, 0x24	; 36
     ff0:	44 e7       	ldi	r20, 0x74	; 116
     ff2:	5b e4       	ldi	r21, 0x4B	; 75
     ff4:	02 d1       	rcall	.+516    	; 0x11fa <__divsf3>
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	48 e6       	ldi	r20, 0x68	; 104
     ffc:	52 e4       	ldi	r21, 0x42	; 66
     ffe:	fd d0       	rcall	.+506    	; 0x11fa <__divsf3>
    1000:	64 d1       	rcall	.+712    	; 0x12ca <__fixsfsi>
    1002:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <ultrasonic_right_distance+0x1>
    1006:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <ultrasonic_right_distance>
      // 15.625khz의 1주기가 64us이다.
      // 64us * 10 == 640us
      // 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
      // sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
   }
}
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0b be       	out	0x3b, r0	; 59
    1026:	0f 90       	pop	r0
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	0f 90       	pop	r0
    102c:	1f 90       	pop	r1
    102e:	18 95       	reti

00001030 <init_ultrasonic>:

void init_ultrasonic()
{

		   //////////////// left ////////////////
		   TRIG_DDR_LEFT |= 1 << TRIG_LEFT; // output mode로 설정
    1030:	8a b3       	in	r24, 0x1a	; 26
    1032:	81 60       	ori	r24, 0x01	; 1
    1034:	8a bb       	out	0x1a, r24	; 26
		   ECHO_DDR_LEFT &= ~(1 << ECHO_LEFT); // input mode로 설정
    1036:	82 b1       	in	r24, 0x02	; 2
    1038:	8f 7e       	andi	r24, 0xEF	; 239
    103a:	82 b9       	out	0x02, r24	; 2
   
		   // 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
		   // INT0~3은 EICRA, INT4~7은 EICRB 레지스터
		   EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
    103c:	8a b7       	in	r24, 0x3a	; 58
    103e:	81 60       	ori	r24, 0x01	; 1
    1040:	8a bf       	out	0x3a, r24	; 58
   
		   // 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
		   // 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
		   // 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us   
		   TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
    1042:	ea e8       	ldi	r30, 0x8A	; 138
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	85 60       	ori	r24, 0x05	; 5
    104a:	80 83       	st	Z, r24
		   EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
    104c:	89 b7       	in	r24, 0x39	; 57
    104e:	80 61       	ori	r24, 0x10	; 16
    1050:	89 bf       	out	0x39, r24	; 57

	      //////////////// center ////////////////
	      TRIG_DDR_CENTER |= 1 << TRIG_CENTER; // output mode로 설정
    1052:	8a b3       	in	r24, 0x1a	; 26
    1054:	82 60       	ori	r24, 0x02	; 2
    1056:	8a bb       	out	0x1a, r24	; 26
	      ECHO_DDR_CENTER &= ~(1 << ECHO_CENTER); // input mode로 설정
    1058:	82 b1       	in	r24, 0x02	; 2
    105a:	8f 7d       	andi	r24, 0xDF	; 223
    105c:	82 b9       	out	0x02, r24	; 2
	      
	      // 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	      // INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	      EICRB |= 0 << ISC51 | 1 << ISC50; // INT5니까 EICRB에서 ISC51, 50
    105e:	8a b7       	in	r24, 0x3a	; 58
    1060:	84 60       	ori	r24, 0x04	; 4
    1062:	8a bf       	out	0x3a, r24	; 58
	      
	      // 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	      // 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	      // 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
	      TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
    1064:	80 81       	ld	r24, Z
    1066:	85 60       	ori	r24, 0x05	; 5
    1068:	80 83       	st	Z, r24
	      EIMSK |= 1 << INT5; // 외부 인터럽트4번 (ECHO) 사용
    106a:	89 b7       	in	r24, 0x39	; 57
    106c:	80 62       	ori	r24, 0x20	; 32
    106e:	89 bf       	out	0x39, r24	; 57
		  
			//////////////// right ////////////////
		   TRIG_DDR_RIGHT |= 1 << TRIG_RIGHT; // output mode로 설정
    1070:	8a b3       	in	r24, 0x1a	; 26
    1072:	84 60       	ori	r24, 0x04	; 4
    1074:	8a bb       	out	0x1a, r24	; 26
		   ECHO_DDR_RIGHT &= ~(1 << ECHO_RIGHT); // input mode로 설정
    1076:	82 b1       	in	r24, 0x02	; 2
    1078:	8f 7b       	andi	r24, 0xBF	; 191
    107a:	82 b9       	out	0x02, r24	; 2
   
		   // 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
		   // INT0~3은 EICRA, INT4~7은 EICRB 레지스터
		   EICRB |= 0 << ISC61 | 1 << ISC60; // INT6니까 EICRB에서 ISC61, 60
    107c:	8a b7       	in	r24, 0x3a	; 58
    107e:	80 61       	ori	r24, 0x10	; 16
    1080:	8a bf       	out	0x3a, r24	; 58
   
		   // 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
		   // 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
		   // 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
		   TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
    1082:	80 81       	ld	r24, Z
    1084:	85 60       	ori	r24, 0x05	; 5
    1086:	80 83       	st	Z, r24
		   EIMSK |= 1 << INT6; // 외부 인터럽트4번 (ECHO) 사용
    1088:	89 b7       	in	r24, 0x39	; 57
    108a:	80 64       	ori	r24, 0x40	; 64
    108c:	89 bf       	out	0x39, r24	; 57
    108e:	08 95       	ret

00001090 <ultrasonic_trigger>:
}

void ultrasonic_trigger()
{
	
	if(ultrasonic_check_timer <= 4)
    1090:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <ultrasonic_check_timer>
    1094:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <ultrasonic_check_timer+0x1>
    1098:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <ultrasonic_check_timer+0x2>
    109c:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <ultrasonic_check_timer+0x3>
    10a0:	05 97       	sbiw	r24, 0x05	; 5
    10a2:	a1 05       	cpc	r26, r1
    10a4:	b1 05       	cpc	r27, r1
    10a6:	80 f4       	brcc	.+32     	; 0x10c8 <ultrasonic_trigger+0x38>
	{
		////////// left //////////
		TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // 해당되는 포트만 LOW로 만듦
    10a8:	8b b3       	in	r24, 0x1b	; 27
    10aa:	8e 7f       	andi	r24, 0xFE	; 254
    10ac:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10ae:	85 e0       	ldi	r24, 0x05	; 5
    10b0:	8a 95       	dec	r24
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <ultrasonic_trigger+0x20>
    10b4:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_LEFT |= 1 << TRIG_LEFT; // HIGH
    10b6:	8b b3       	in	r24, 0x1b	; 27
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	8b bb       	out	0x1b, r24	; 27
    10bc:	80 e5       	ldi	r24, 0x50	; 80
    10be:	8a 95       	dec	r24
    10c0:	f1 f7       	brne	.-4      	; 0x10be <ultrasonic_trigger+0x2e>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // LOW
    10c2:	8b b3       	in	r24, 0x1b	; 27
    10c4:	8e 7f       	andi	r24, 0xFE	; 254
    10c6:	8b bb       	out	0x1b, r24	; 27
		// 초음파센서 echo 응답 대기시간이 최대 38ms
	}
	
	if (ultrasonic_check_timer >= 44 && ultrasonic_check_timer <= 48)
    10c8:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <ultrasonic_check_timer>
    10cc:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <ultrasonic_check_timer+0x1>
    10d0:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <ultrasonic_check_timer+0x2>
    10d4:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <ultrasonic_check_timer+0x3>
    10d8:	8c 97       	sbiw	r24, 0x2c	; 44
    10da:	a1 05       	cpc	r26, r1
    10dc:	b1 05       	cpc	r27, r1
    10de:	e0 f0       	brcs	.+56     	; 0x1118 <__stack+0x19>
    10e0:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <ultrasonic_check_timer>
    10e4:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <ultrasonic_check_timer+0x1>
    10e8:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <ultrasonic_check_timer+0x2>
    10ec:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <ultrasonic_check_timer+0x3>
    10f0:	c1 97       	sbiw	r24, 0x31	; 49
    10f2:	a1 05       	cpc	r26, r1
    10f4:	b1 05       	cpc	r27, r1
    10f6:	80 f4       	brcc	.+32     	; 0x1118 <__stack+0x19>
	{
		////////// center //////////
		TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // 해당되는 포트만 LOW로 만듦
    10f8:	8b b3       	in	r24, 0x1b	; 27
    10fa:	8d 7f       	andi	r24, 0xFD	; 253
    10fc:	8b bb       	out	0x1b, r24	; 27
    10fe:	85 e0       	ldi	r24, 0x05	; 5
    1100:	8a 95       	dec	r24
    1102:	f1 f7       	brne	.-4      	; 0x1100 <__stack+0x1>
    1104:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_CENTER |= 1 << TRIG_CENTER; // HIGH
    1106:	8b b3       	in	r24, 0x1b	; 27
    1108:	82 60       	ori	r24, 0x02	; 2
    110a:	8b bb       	out	0x1b, r24	; 27
    110c:	80 e5       	ldi	r24, 0x50	; 80
    110e:	8a 95       	dec	r24
    1110:	f1 f7       	brne	.-4      	; 0x110e <__stack+0xf>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // LOW
    1112:	8b b3       	in	r24, 0x1b	; 27
    1114:	8d 7f       	andi	r24, 0xFD	; 253
    1116:	8b bb       	out	0x1b, r24	; 27
	}
	
	if (ultrasonic_check_timer >= 88 && ultrasonic_check_timer <= 92)
    1118:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <ultrasonic_check_timer>
    111c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <ultrasonic_check_timer+0x1>
    1120:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <ultrasonic_check_timer+0x2>
    1124:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <ultrasonic_check_timer+0x3>
    1128:	88 35       	cpi	r24, 0x58	; 88
    112a:	91 05       	cpc	r25, r1
    112c:	a1 05       	cpc	r26, r1
    112e:	b1 05       	cpc	r27, r1
    1130:	e8 f0       	brcs	.+58     	; 0x116c <__stack+0x6d>
    1132:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <ultrasonic_check_timer>
    1136:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <ultrasonic_check_timer+0x1>
    113a:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <ultrasonic_check_timer+0x2>
    113e:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <ultrasonic_check_timer+0x3>
    1142:	8d 35       	cpi	r24, 0x5D	; 93
    1144:	91 05       	cpc	r25, r1
    1146:	a1 05       	cpc	r26, r1
    1148:	b1 05       	cpc	r27, r1
    114a:	80 f4       	brcc	.+32     	; 0x116c <__stack+0x6d>
	{
		////////// right //////////
		TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // 해당되는 포트만 LOW로 만듦
    114c:	8b b3       	in	r24, 0x1b	; 27
    114e:	8b 7f       	andi	r24, 0xFB	; 251
    1150:	8b bb       	out	0x1b, r24	; 27
    1152:	85 e0       	ldi	r24, 0x05	; 5
    1154:	8a 95       	dec	r24
    1156:	f1 f7       	brne	.-4      	; 0x1154 <__stack+0x55>
    1158:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_RIGHT |= 1 << TRIG_RIGHT; // HIGH
    115a:	8b b3       	in	r24, 0x1b	; 27
    115c:	84 60       	ori	r24, 0x04	; 4
    115e:	8b bb       	out	0x1b, r24	; 27
    1160:	80 e5       	ldi	r24, 0x50	; 80
    1162:	8a 95       	dec	r24
    1164:	f1 f7       	brne	.-4      	; 0x1162 <__stack+0x63>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // LOW
    1166:	8b b3       	in	r24, 0x1b	; 27
    1168:	8b 7f       	andi	r24, 0xFB	; 251
    116a:	8b bb       	out	0x1b, r24	; 27
	}
	
	ultrasonic_check_timer %= 95;
    116c:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <ultrasonic_check_timer>
    1170:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <ultrasonic_check_timer+0x1>
    1174:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <ultrasonic_check_timer+0x2>
    1178:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <ultrasonic_check_timer+0x3>
    117c:	2f e5       	ldi	r18, 0x5F	; 95
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	d7 d1       	rcall	.+942    	; 0x1534 <__udivmodsi4>
    1186:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <ultrasonic_check_timer>
    118a:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <ultrasonic_check_timer+0x1>
    118e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <ultrasonic_check_timer+0x2>
    1192:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <ultrasonic_check_timer+0x3>
    1196:	08 95       	ret

00001198 <distance_check>:
}

void distance_check(void)
{
      printf("left   :  %5d\n", ultrasonic_left_distance); // printf 찍으면 delay생김
    1198:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <ultrasonic_left_distance>
    119c:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ultrasonic_left_distance+0x1>
    11a0:	9f 93       	push	r25
    11a2:	8f 93       	push	r24
    11a4:	81 e3       	ldi	r24, 0x31	; 49
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	9f 93       	push	r25
    11aa:	8f 93       	push	r24
    11ac:	02 d2       	rcall	.+1028   	; 0x15b2 <printf>
      printf("center :  %5d\n", ultrasonic_center_distance);
    11ae:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ultrasonic_center_distance>
    11b2:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <ultrasonic_center_distance+0x1>
    11b6:	9f 93       	push	r25
    11b8:	8f 93       	push	r24
    11ba:	80 e4       	ldi	r24, 0x40	; 64
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	9f 93       	push	r25
    11c0:	8f 93       	push	r24
    11c2:	f7 d1       	rcall	.+1006   	; 0x15b2 <printf>
      printf("right  :  %5d\n", ultrasonic_right_distance);
    11c4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <ultrasonic_right_distance>
    11c8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <ultrasonic_right_distance+0x1>
    11cc:	9f 93       	push	r25
    11ce:	8f 93       	push	r24
    11d0:	8f e4       	ldi	r24, 0x4F	; 79
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	9f 93       	push	r25
    11d6:	8f 93       	push	r24

   ultrasonic_trigger(); // 이것도 수정해야한다.
    11d8:	ec d1       	rcall	.+984    	; 0x15b2 <printf>
    11da:	5a df       	rcall	.-332    	; 0x1090 <ultrasonic_trigger>
   func_state = AUTO_MODE_CHECK;
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <func_state+0x1>
    11e4:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <func_state>
    11e8:	8d b7       	in	r24, 0x3d	; 61
    11ea:	9e b7       	in	r25, 0x3e	; 62
    11ec:	0c 96       	adiw	r24, 0x0c	; 12
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	9e bf       	out	0x3e, r25	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	8d bf       	out	0x3d, r24	; 61
    11f8:	08 95       	ret

000011fa <__divsf3>:
    11fa:	0c d0       	rcall	.+24     	; 0x1214 <__divsf3x>
    11fc:	eb c0       	rjmp	.+470    	; 0x13d4 <__fp_round>
    11fe:	e3 d0       	rcall	.+454    	; 0x13c6 <__fp_pscB>
    1200:	40 f0       	brcs	.+16     	; 0x1212 <__divsf3+0x18>
    1202:	da d0       	rcall	.+436    	; 0x13b8 <__fp_pscA>
    1204:	30 f0       	brcs	.+12     	; 0x1212 <__divsf3+0x18>
    1206:	21 f4       	brne	.+8      	; 0x1210 <__divsf3+0x16>
    1208:	5f 3f       	cpi	r21, 0xFF	; 255
    120a:	19 f0       	breq	.+6      	; 0x1212 <__divsf3+0x18>
    120c:	cc c0       	rjmp	.+408    	; 0x13a6 <__fp_inf>
    120e:	51 11       	cpse	r21, r1
    1210:	15 c1       	rjmp	.+554    	; 0x143c <__fp_szero>
    1212:	cf c0       	rjmp	.+414    	; 0x13b2 <__fp_nan>

00001214 <__divsf3x>:
    1214:	f0 d0       	rcall	.+480    	; 0x13f6 <__fp_split3>
    1216:	98 f3       	brcs	.-26     	; 0x11fe <__divsf3+0x4>

00001218 <__divsf3_pse>:
    1218:	99 23       	and	r25, r25
    121a:	c9 f3       	breq	.-14     	; 0x120e <__divsf3+0x14>
    121c:	55 23       	and	r21, r21
    121e:	b1 f3       	breq	.-20     	; 0x120c <__divsf3+0x12>
    1220:	95 1b       	sub	r25, r21
    1222:	55 0b       	sbc	r21, r21
    1224:	bb 27       	eor	r27, r27
    1226:	aa 27       	eor	r26, r26
    1228:	62 17       	cp	r22, r18
    122a:	73 07       	cpc	r23, r19
    122c:	84 07       	cpc	r24, r20
    122e:	38 f0       	brcs	.+14     	; 0x123e <__divsf3_pse+0x26>
    1230:	9f 5f       	subi	r25, 0xFF	; 255
    1232:	5f 4f       	sbci	r21, 0xFF	; 255
    1234:	22 0f       	add	r18, r18
    1236:	33 1f       	adc	r19, r19
    1238:	44 1f       	adc	r20, r20
    123a:	aa 1f       	adc	r26, r26
    123c:	a9 f3       	breq	.-22     	; 0x1228 <__divsf3_pse+0x10>
    123e:	33 d0       	rcall	.+102    	; 0x12a6 <__divsf3_pse+0x8e>
    1240:	0e 2e       	mov	r0, r30
    1242:	3a f0       	brmi	.+14     	; 0x1252 <__divsf3_pse+0x3a>
    1244:	e0 e8       	ldi	r30, 0x80	; 128
    1246:	30 d0       	rcall	.+96     	; 0x12a8 <__divsf3_pse+0x90>
    1248:	91 50       	subi	r25, 0x01	; 1
    124a:	50 40       	sbci	r21, 0x00	; 0
    124c:	e6 95       	lsr	r30
    124e:	00 1c       	adc	r0, r0
    1250:	ca f7       	brpl	.-14     	; 0x1244 <__divsf3_pse+0x2c>
    1252:	29 d0       	rcall	.+82     	; 0x12a6 <__divsf3_pse+0x8e>
    1254:	fe 2f       	mov	r31, r30
    1256:	27 d0       	rcall	.+78     	; 0x12a6 <__divsf3_pse+0x8e>
    1258:	66 0f       	add	r22, r22
    125a:	77 1f       	adc	r23, r23
    125c:	88 1f       	adc	r24, r24
    125e:	bb 1f       	adc	r27, r27
    1260:	26 17       	cp	r18, r22
    1262:	37 07       	cpc	r19, r23
    1264:	48 07       	cpc	r20, r24
    1266:	ab 07       	cpc	r26, r27
    1268:	b0 e8       	ldi	r27, 0x80	; 128
    126a:	09 f0       	breq	.+2      	; 0x126e <__divsf3_pse+0x56>
    126c:	bb 0b       	sbc	r27, r27
    126e:	80 2d       	mov	r24, r0
    1270:	bf 01       	movw	r22, r30
    1272:	ff 27       	eor	r31, r31
    1274:	93 58       	subi	r25, 0x83	; 131
    1276:	5f 4f       	sbci	r21, 0xFF	; 255
    1278:	2a f0       	brmi	.+10     	; 0x1284 <__divsf3_pse+0x6c>
    127a:	9e 3f       	cpi	r25, 0xFE	; 254
    127c:	51 05       	cpc	r21, r1
    127e:	68 f0       	brcs	.+26     	; 0x129a <__divsf3_pse+0x82>
    1280:	92 c0       	rjmp	.+292    	; 0x13a6 <__fp_inf>
    1282:	dc c0       	rjmp	.+440    	; 0x143c <__fp_szero>
    1284:	5f 3f       	cpi	r21, 0xFF	; 255
    1286:	ec f3       	brlt	.-6      	; 0x1282 <__divsf3_pse+0x6a>
    1288:	98 3e       	cpi	r25, 0xE8	; 232
    128a:	dc f3       	brlt	.-10     	; 0x1282 <__divsf3_pse+0x6a>
    128c:	86 95       	lsr	r24
    128e:	77 95       	ror	r23
    1290:	67 95       	ror	r22
    1292:	b7 95       	ror	r27
    1294:	f7 95       	ror	r31
    1296:	9f 5f       	subi	r25, 0xFF	; 255
    1298:	c9 f7       	brne	.-14     	; 0x128c <__divsf3_pse+0x74>
    129a:	88 0f       	add	r24, r24
    129c:	91 1d       	adc	r25, r1
    129e:	96 95       	lsr	r25
    12a0:	87 95       	ror	r24
    12a2:	97 f9       	bld	r25, 7
    12a4:	08 95       	ret
    12a6:	e1 e0       	ldi	r30, 0x01	; 1
    12a8:	66 0f       	add	r22, r22
    12aa:	77 1f       	adc	r23, r23
    12ac:	88 1f       	adc	r24, r24
    12ae:	bb 1f       	adc	r27, r27
    12b0:	62 17       	cp	r22, r18
    12b2:	73 07       	cpc	r23, r19
    12b4:	84 07       	cpc	r24, r20
    12b6:	ba 07       	cpc	r27, r26
    12b8:	20 f0       	brcs	.+8      	; 0x12c2 <__divsf3_pse+0xaa>
    12ba:	62 1b       	sub	r22, r18
    12bc:	73 0b       	sbc	r23, r19
    12be:	84 0b       	sbc	r24, r20
    12c0:	ba 0b       	sbc	r27, r26
    12c2:	ee 1f       	adc	r30, r30
    12c4:	88 f7       	brcc	.-30     	; 0x12a8 <__divsf3_pse+0x90>
    12c6:	e0 95       	com	r30
    12c8:	08 95       	ret

000012ca <__fixsfsi>:
    12ca:	04 d0       	rcall	.+8      	; 0x12d4 <__fixunssfsi>
    12cc:	68 94       	set
    12ce:	b1 11       	cpse	r27, r1
    12d0:	b5 c0       	rjmp	.+362    	; 0x143c <__fp_szero>
    12d2:	08 95       	ret

000012d4 <__fixunssfsi>:
    12d4:	98 d0       	rcall	.+304    	; 0x1406 <__fp_splitA>
    12d6:	88 f0       	brcs	.+34     	; 0x12fa <__fixunssfsi+0x26>
    12d8:	9f 57       	subi	r25, 0x7F	; 127
    12da:	90 f0       	brcs	.+36     	; 0x1300 <__fixunssfsi+0x2c>
    12dc:	b9 2f       	mov	r27, r25
    12de:	99 27       	eor	r25, r25
    12e0:	b7 51       	subi	r27, 0x17	; 23
    12e2:	a0 f0       	brcs	.+40     	; 0x130c <__fixunssfsi+0x38>
    12e4:	d1 f0       	breq	.+52     	; 0x131a <__fixunssfsi+0x46>
    12e6:	66 0f       	add	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	1a f0       	brmi	.+6      	; 0x12f6 <__fixunssfsi+0x22>
    12f0:	ba 95       	dec	r27
    12f2:	c9 f7       	brne	.-14     	; 0x12e6 <__fixunssfsi+0x12>
    12f4:	12 c0       	rjmp	.+36     	; 0x131a <__fixunssfsi+0x46>
    12f6:	b1 30       	cpi	r27, 0x01	; 1
    12f8:	81 f0       	breq	.+32     	; 0x131a <__fixunssfsi+0x46>
    12fa:	9f d0       	rcall	.+318    	; 0x143a <__fp_zero>
    12fc:	b1 e0       	ldi	r27, 0x01	; 1
    12fe:	08 95       	ret
    1300:	9c c0       	rjmp	.+312    	; 0x143a <__fp_zero>
    1302:	67 2f       	mov	r22, r23
    1304:	78 2f       	mov	r23, r24
    1306:	88 27       	eor	r24, r24
    1308:	b8 5f       	subi	r27, 0xF8	; 248
    130a:	39 f0       	breq	.+14     	; 0x131a <__fixunssfsi+0x46>
    130c:	b9 3f       	cpi	r27, 0xF9	; 249
    130e:	cc f3       	brlt	.-14     	; 0x1302 <__fixunssfsi+0x2e>
    1310:	86 95       	lsr	r24
    1312:	77 95       	ror	r23
    1314:	67 95       	ror	r22
    1316:	b3 95       	inc	r27
    1318:	d9 f7       	brne	.-10     	; 0x1310 <__fixunssfsi+0x3c>
    131a:	3e f4       	brtc	.+14     	; 0x132a <__fixunssfsi+0x56>
    131c:	90 95       	com	r25
    131e:	80 95       	com	r24
    1320:	70 95       	com	r23
    1322:	61 95       	neg	r22
    1324:	7f 4f       	sbci	r23, 0xFF	; 255
    1326:	8f 4f       	sbci	r24, 0xFF	; 255
    1328:	9f 4f       	sbci	r25, 0xFF	; 255
    132a:	08 95       	ret

0000132c <__floatunsisf>:
    132c:	e8 94       	clt
    132e:	09 c0       	rjmp	.+18     	; 0x1342 <__floatsisf+0x12>

00001330 <__floatsisf>:
    1330:	97 fb       	bst	r25, 7
    1332:	3e f4       	brtc	.+14     	; 0x1342 <__floatsisf+0x12>
    1334:	90 95       	com	r25
    1336:	80 95       	com	r24
    1338:	70 95       	com	r23
    133a:	61 95       	neg	r22
    133c:	7f 4f       	sbci	r23, 0xFF	; 255
    133e:	8f 4f       	sbci	r24, 0xFF	; 255
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	99 23       	and	r25, r25
    1344:	a9 f0       	breq	.+42     	; 0x1370 <__floatsisf+0x40>
    1346:	f9 2f       	mov	r31, r25
    1348:	96 e9       	ldi	r25, 0x96	; 150
    134a:	bb 27       	eor	r27, r27
    134c:	93 95       	inc	r25
    134e:	f6 95       	lsr	r31
    1350:	87 95       	ror	r24
    1352:	77 95       	ror	r23
    1354:	67 95       	ror	r22
    1356:	b7 95       	ror	r27
    1358:	f1 11       	cpse	r31, r1
    135a:	f8 cf       	rjmp	.-16     	; 0x134c <__floatsisf+0x1c>
    135c:	fa f4       	brpl	.+62     	; 0x139c <__floatsisf+0x6c>
    135e:	bb 0f       	add	r27, r27
    1360:	11 f4       	brne	.+4      	; 0x1366 <__floatsisf+0x36>
    1362:	60 ff       	sbrs	r22, 0
    1364:	1b c0       	rjmp	.+54     	; 0x139c <__floatsisf+0x6c>
    1366:	6f 5f       	subi	r22, 0xFF	; 255
    1368:	7f 4f       	sbci	r23, 0xFF	; 255
    136a:	8f 4f       	sbci	r24, 0xFF	; 255
    136c:	9f 4f       	sbci	r25, 0xFF	; 255
    136e:	16 c0       	rjmp	.+44     	; 0x139c <__floatsisf+0x6c>
    1370:	88 23       	and	r24, r24
    1372:	11 f0       	breq	.+4      	; 0x1378 <__floatsisf+0x48>
    1374:	96 e9       	ldi	r25, 0x96	; 150
    1376:	11 c0       	rjmp	.+34     	; 0x139a <__floatsisf+0x6a>
    1378:	77 23       	and	r23, r23
    137a:	21 f0       	breq	.+8      	; 0x1384 <__floatsisf+0x54>
    137c:	9e e8       	ldi	r25, 0x8E	; 142
    137e:	87 2f       	mov	r24, r23
    1380:	76 2f       	mov	r23, r22
    1382:	05 c0       	rjmp	.+10     	; 0x138e <__floatsisf+0x5e>
    1384:	66 23       	and	r22, r22
    1386:	71 f0       	breq	.+28     	; 0x13a4 <__floatsisf+0x74>
    1388:	96 e8       	ldi	r25, 0x86	; 134
    138a:	86 2f       	mov	r24, r22
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	2a f0       	brmi	.+10     	; 0x139c <__floatsisf+0x6c>
    1392:	9a 95       	dec	r25
    1394:	66 0f       	add	r22, r22
    1396:	77 1f       	adc	r23, r23
    1398:	88 1f       	adc	r24, r24
    139a:	da f7       	brpl	.-10     	; 0x1392 <__floatsisf+0x62>
    139c:	88 0f       	add	r24, r24
    139e:	96 95       	lsr	r25
    13a0:	87 95       	ror	r24
    13a2:	97 f9       	bld	r25, 7
    13a4:	08 95       	ret

000013a6 <__fp_inf>:
    13a6:	97 f9       	bld	r25, 7
    13a8:	9f 67       	ori	r25, 0x7F	; 127
    13aa:	80 e8       	ldi	r24, 0x80	; 128
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	08 95       	ret

000013b2 <__fp_nan>:
    13b2:	9f ef       	ldi	r25, 0xFF	; 255
    13b4:	80 ec       	ldi	r24, 0xC0	; 192
    13b6:	08 95       	ret

000013b8 <__fp_pscA>:
    13b8:	00 24       	eor	r0, r0
    13ba:	0a 94       	dec	r0
    13bc:	16 16       	cp	r1, r22
    13be:	17 06       	cpc	r1, r23
    13c0:	18 06       	cpc	r1, r24
    13c2:	09 06       	cpc	r0, r25
    13c4:	08 95       	ret

000013c6 <__fp_pscB>:
    13c6:	00 24       	eor	r0, r0
    13c8:	0a 94       	dec	r0
    13ca:	12 16       	cp	r1, r18
    13cc:	13 06       	cpc	r1, r19
    13ce:	14 06       	cpc	r1, r20
    13d0:	05 06       	cpc	r0, r21
    13d2:	08 95       	ret

000013d4 <__fp_round>:
    13d4:	09 2e       	mov	r0, r25
    13d6:	03 94       	inc	r0
    13d8:	00 0c       	add	r0, r0
    13da:	11 f4       	brne	.+4      	; 0x13e0 <__fp_round+0xc>
    13dc:	88 23       	and	r24, r24
    13de:	52 f0       	brmi	.+20     	; 0x13f4 <__fp_round+0x20>
    13e0:	bb 0f       	add	r27, r27
    13e2:	40 f4       	brcc	.+16     	; 0x13f4 <__fp_round+0x20>
    13e4:	bf 2b       	or	r27, r31
    13e6:	11 f4       	brne	.+4      	; 0x13ec <__fp_round+0x18>
    13e8:	60 ff       	sbrs	r22, 0
    13ea:	04 c0       	rjmp	.+8      	; 0x13f4 <__fp_round+0x20>
    13ec:	6f 5f       	subi	r22, 0xFF	; 255
    13ee:	7f 4f       	sbci	r23, 0xFF	; 255
    13f0:	8f 4f       	sbci	r24, 0xFF	; 255
    13f2:	9f 4f       	sbci	r25, 0xFF	; 255
    13f4:	08 95       	ret

000013f6 <__fp_split3>:
    13f6:	57 fd       	sbrc	r21, 7
    13f8:	90 58       	subi	r25, 0x80	; 128
    13fa:	44 0f       	add	r20, r20
    13fc:	55 1f       	adc	r21, r21
    13fe:	59 f0       	breq	.+22     	; 0x1416 <__fp_splitA+0x10>
    1400:	5f 3f       	cpi	r21, 0xFF	; 255
    1402:	71 f0       	breq	.+28     	; 0x1420 <__fp_splitA+0x1a>
    1404:	47 95       	ror	r20

00001406 <__fp_splitA>:
    1406:	88 0f       	add	r24, r24
    1408:	97 fb       	bst	r25, 7
    140a:	99 1f       	adc	r25, r25
    140c:	61 f0       	breq	.+24     	; 0x1426 <__fp_splitA+0x20>
    140e:	9f 3f       	cpi	r25, 0xFF	; 255
    1410:	79 f0       	breq	.+30     	; 0x1430 <__fp_splitA+0x2a>
    1412:	87 95       	ror	r24
    1414:	08 95       	ret
    1416:	12 16       	cp	r1, r18
    1418:	13 06       	cpc	r1, r19
    141a:	14 06       	cpc	r1, r20
    141c:	55 1f       	adc	r21, r21
    141e:	f2 cf       	rjmp	.-28     	; 0x1404 <__fp_split3+0xe>
    1420:	46 95       	lsr	r20
    1422:	f1 df       	rcall	.-30     	; 0x1406 <__fp_splitA>
    1424:	08 c0       	rjmp	.+16     	; 0x1436 <__fp_splitA+0x30>
    1426:	16 16       	cp	r1, r22
    1428:	17 06       	cpc	r1, r23
    142a:	18 06       	cpc	r1, r24
    142c:	99 1f       	adc	r25, r25
    142e:	f1 cf       	rjmp	.-30     	; 0x1412 <__fp_splitA+0xc>
    1430:	86 95       	lsr	r24
    1432:	71 05       	cpc	r23, r1
    1434:	61 05       	cpc	r22, r1
    1436:	08 94       	sec
    1438:	08 95       	ret

0000143a <__fp_zero>:
    143a:	e8 94       	clt

0000143c <__fp_szero>:
    143c:	bb 27       	eor	r27, r27
    143e:	66 27       	eor	r22, r22
    1440:	77 27       	eor	r23, r23
    1442:	cb 01       	movw	r24, r22
    1444:	97 f9       	bld	r25, 7
    1446:	08 95       	ret

00001448 <__mulsf3>:
    1448:	0b d0       	rcall	.+22     	; 0x1460 <__mulsf3x>
    144a:	c4 cf       	rjmp	.-120    	; 0x13d4 <__fp_round>
    144c:	b5 df       	rcall	.-150    	; 0x13b8 <__fp_pscA>
    144e:	28 f0       	brcs	.+10     	; 0x145a <__mulsf3+0x12>
    1450:	ba df       	rcall	.-140    	; 0x13c6 <__fp_pscB>
    1452:	18 f0       	brcs	.+6      	; 0x145a <__mulsf3+0x12>
    1454:	95 23       	and	r25, r21
    1456:	09 f0       	breq	.+2      	; 0x145a <__mulsf3+0x12>
    1458:	a6 cf       	rjmp	.-180    	; 0x13a6 <__fp_inf>
    145a:	ab cf       	rjmp	.-170    	; 0x13b2 <__fp_nan>
    145c:	11 24       	eor	r1, r1
    145e:	ee cf       	rjmp	.-36     	; 0x143c <__fp_szero>

00001460 <__mulsf3x>:
    1460:	ca df       	rcall	.-108    	; 0x13f6 <__fp_split3>
    1462:	a0 f3       	brcs	.-24     	; 0x144c <__mulsf3+0x4>

00001464 <__mulsf3_pse>:
    1464:	95 9f       	mul	r25, r21
    1466:	d1 f3       	breq	.-12     	; 0x145c <__mulsf3+0x14>
    1468:	95 0f       	add	r25, r21
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	55 1f       	adc	r21, r21
    146e:	62 9f       	mul	r22, r18
    1470:	f0 01       	movw	r30, r0
    1472:	72 9f       	mul	r23, r18
    1474:	bb 27       	eor	r27, r27
    1476:	f0 0d       	add	r31, r0
    1478:	b1 1d       	adc	r27, r1
    147a:	63 9f       	mul	r22, r19
    147c:	aa 27       	eor	r26, r26
    147e:	f0 0d       	add	r31, r0
    1480:	b1 1d       	adc	r27, r1
    1482:	aa 1f       	adc	r26, r26
    1484:	64 9f       	mul	r22, r20
    1486:	66 27       	eor	r22, r22
    1488:	b0 0d       	add	r27, r0
    148a:	a1 1d       	adc	r26, r1
    148c:	66 1f       	adc	r22, r22
    148e:	82 9f       	mul	r24, r18
    1490:	22 27       	eor	r18, r18
    1492:	b0 0d       	add	r27, r0
    1494:	a1 1d       	adc	r26, r1
    1496:	62 1f       	adc	r22, r18
    1498:	73 9f       	mul	r23, r19
    149a:	b0 0d       	add	r27, r0
    149c:	a1 1d       	adc	r26, r1
    149e:	62 1f       	adc	r22, r18
    14a0:	83 9f       	mul	r24, r19
    14a2:	a0 0d       	add	r26, r0
    14a4:	61 1d       	adc	r22, r1
    14a6:	22 1f       	adc	r18, r18
    14a8:	74 9f       	mul	r23, r20
    14aa:	33 27       	eor	r19, r19
    14ac:	a0 0d       	add	r26, r0
    14ae:	61 1d       	adc	r22, r1
    14b0:	23 1f       	adc	r18, r19
    14b2:	84 9f       	mul	r24, r20
    14b4:	60 0d       	add	r22, r0
    14b6:	21 1d       	adc	r18, r1
    14b8:	82 2f       	mov	r24, r18
    14ba:	76 2f       	mov	r23, r22
    14bc:	6a 2f       	mov	r22, r26
    14be:	11 24       	eor	r1, r1
    14c0:	9f 57       	subi	r25, 0x7F	; 127
    14c2:	50 40       	sbci	r21, 0x00	; 0
    14c4:	8a f0       	brmi	.+34     	; 0x14e8 <__mulsf3_pse+0x84>
    14c6:	e1 f0       	breq	.+56     	; 0x1500 <__mulsf3_pse+0x9c>
    14c8:	88 23       	and	r24, r24
    14ca:	4a f0       	brmi	.+18     	; 0x14de <__mulsf3_pse+0x7a>
    14cc:	ee 0f       	add	r30, r30
    14ce:	ff 1f       	adc	r31, r31
    14d0:	bb 1f       	adc	r27, r27
    14d2:	66 1f       	adc	r22, r22
    14d4:	77 1f       	adc	r23, r23
    14d6:	88 1f       	adc	r24, r24
    14d8:	91 50       	subi	r25, 0x01	; 1
    14da:	50 40       	sbci	r21, 0x00	; 0
    14dc:	a9 f7       	brne	.-22     	; 0x14c8 <__mulsf3_pse+0x64>
    14de:	9e 3f       	cpi	r25, 0xFE	; 254
    14e0:	51 05       	cpc	r21, r1
    14e2:	70 f0       	brcs	.+28     	; 0x1500 <__mulsf3_pse+0x9c>
    14e4:	60 cf       	rjmp	.-320    	; 0x13a6 <__fp_inf>
    14e6:	aa cf       	rjmp	.-172    	; 0x143c <__fp_szero>
    14e8:	5f 3f       	cpi	r21, 0xFF	; 255
    14ea:	ec f3       	brlt	.-6      	; 0x14e6 <__mulsf3_pse+0x82>
    14ec:	98 3e       	cpi	r25, 0xE8	; 232
    14ee:	dc f3       	brlt	.-10     	; 0x14e6 <__mulsf3_pse+0x82>
    14f0:	86 95       	lsr	r24
    14f2:	77 95       	ror	r23
    14f4:	67 95       	ror	r22
    14f6:	b7 95       	ror	r27
    14f8:	f7 95       	ror	r31
    14fa:	e7 95       	ror	r30
    14fc:	9f 5f       	subi	r25, 0xFF	; 255
    14fe:	c1 f7       	brne	.-16     	; 0x14f0 <__mulsf3_pse+0x8c>
    1500:	fe 2b       	or	r31, r30
    1502:	88 0f       	add	r24, r24
    1504:	91 1d       	adc	r25, r1
    1506:	96 95       	lsr	r25
    1508:	87 95       	ror	r24
    150a:	97 f9       	bld	r25, 7
    150c:	08 95       	ret

0000150e <__divmodhi4>:
    150e:	97 fb       	bst	r25, 7
    1510:	07 2e       	mov	r0, r23
    1512:	16 f4       	brtc	.+4      	; 0x1518 <__divmodhi4+0xa>
    1514:	00 94       	com	r0
    1516:	06 d0       	rcall	.+12     	; 0x1524 <__divmodhi4_neg1>
    1518:	77 fd       	sbrc	r23, 7
    151a:	08 d0       	rcall	.+16     	; 0x152c <__divmodhi4_neg2>
    151c:	36 d0       	rcall	.+108    	; 0x158a <__udivmodhi4>
    151e:	07 fc       	sbrc	r0, 7
    1520:	05 d0       	rcall	.+10     	; 0x152c <__divmodhi4_neg2>
    1522:	3e f4       	brtc	.+14     	; 0x1532 <__divmodhi4_exit>

00001524 <__divmodhi4_neg1>:
    1524:	90 95       	com	r25
    1526:	81 95       	neg	r24
    1528:	9f 4f       	sbci	r25, 0xFF	; 255
    152a:	08 95       	ret

0000152c <__divmodhi4_neg2>:
    152c:	70 95       	com	r23
    152e:	61 95       	neg	r22
    1530:	7f 4f       	sbci	r23, 0xFF	; 255

00001532 <__divmodhi4_exit>:
    1532:	08 95       	ret

00001534 <__udivmodsi4>:
    1534:	a1 e2       	ldi	r26, 0x21	; 33
    1536:	1a 2e       	mov	r1, r26
    1538:	aa 1b       	sub	r26, r26
    153a:	bb 1b       	sub	r27, r27
    153c:	fd 01       	movw	r30, r26
    153e:	0d c0       	rjmp	.+26     	; 0x155a <__udivmodsi4_ep>

00001540 <__udivmodsi4_loop>:
    1540:	aa 1f       	adc	r26, r26
    1542:	bb 1f       	adc	r27, r27
    1544:	ee 1f       	adc	r30, r30
    1546:	ff 1f       	adc	r31, r31
    1548:	a2 17       	cp	r26, r18
    154a:	b3 07       	cpc	r27, r19
    154c:	e4 07       	cpc	r30, r20
    154e:	f5 07       	cpc	r31, r21
    1550:	20 f0       	brcs	.+8      	; 0x155a <__udivmodsi4_ep>
    1552:	a2 1b       	sub	r26, r18
    1554:	b3 0b       	sbc	r27, r19
    1556:	e4 0b       	sbc	r30, r20
    1558:	f5 0b       	sbc	r31, r21

0000155a <__udivmodsi4_ep>:
    155a:	66 1f       	adc	r22, r22
    155c:	77 1f       	adc	r23, r23
    155e:	88 1f       	adc	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	1a 94       	dec	r1
    1564:	69 f7       	brne	.-38     	; 0x1540 <__udivmodsi4_loop>
    1566:	60 95       	com	r22
    1568:	70 95       	com	r23
    156a:	80 95       	com	r24
    156c:	90 95       	com	r25
    156e:	9b 01       	movw	r18, r22
    1570:	ac 01       	movw	r20, r24
    1572:	bd 01       	movw	r22, r26
    1574:	cf 01       	movw	r24, r30
    1576:	08 95       	ret

00001578 <__tablejump2__>:
    1578:	ee 0f       	add	r30, r30
    157a:	ff 1f       	adc	r31, r31
    157c:	00 24       	eor	r0, r0
    157e:	00 1c       	adc	r0, r0
    1580:	0b be       	out	0x3b, r0	; 59
    1582:	07 90       	elpm	r0, Z+
    1584:	f6 91       	elpm	r31, Z
    1586:	e0 2d       	mov	r30, r0
    1588:	09 94       	ijmp

0000158a <__udivmodhi4>:
    158a:	aa 1b       	sub	r26, r26
    158c:	bb 1b       	sub	r27, r27
    158e:	51 e1       	ldi	r21, 0x11	; 17
    1590:	07 c0       	rjmp	.+14     	; 0x15a0 <__udivmodhi4_ep>

00001592 <__udivmodhi4_loop>:
    1592:	aa 1f       	adc	r26, r26
    1594:	bb 1f       	adc	r27, r27
    1596:	a6 17       	cp	r26, r22
    1598:	b7 07       	cpc	r27, r23
    159a:	10 f0       	brcs	.+4      	; 0x15a0 <__udivmodhi4_ep>
    159c:	a6 1b       	sub	r26, r22
    159e:	b7 0b       	sbc	r27, r23

000015a0 <__udivmodhi4_ep>:
    15a0:	88 1f       	adc	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	5a 95       	dec	r21
    15a6:	a9 f7       	brne	.-22     	; 0x1592 <__udivmodhi4_loop>
    15a8:	80 95       	com	r24
    15aa:	90 95       	com	r25
    15ac:	bc 01       	movw	r22, r24
    15ae:	cd 01       	movw	r24, r26
    15b0:	08 95       	ret

000015b2 <printf>:
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	ae 01       	movw	r20, r28
    15bc:	4b 5f       	subi	r20, 0xFB	; 251
    15be:	5f 4f       	sbci	r21, 0xFF	; 255
    15c0:	fa 01       	movw	r30, r20
    15c2:	61 91       	ld	r22, Z+
    15c4:	71 91       	ld	r23, Z+
    15c6:	af 01       	movw	r20, r30
    15c8:	80 91 c7 07 	lds	r24, 0x07C7	; 0x8007c7 <__iob+0x2>
    15cc:	90 91 c8 07 	lds	r25, 0x07C8	; 0x8007c8 <__iob+0x3>
    15d0:	31 d0       	rcall	.+98     	; 0x1634 <vfprintf>
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	08 95       	ret

000015d8 <sprintf>:
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	2e 97       	sbiw	r28, 0x0e	; 14
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	0d 89       	ldd	r16, Y+21	; 0x15
    15f2:	1e 89       	ldd	r17, Y+22	; 0x16
    15f4:	86 e0       	ldi	r24, 0x06	; 6
    15f6:	8c 83       	std	Y+4, r24	; 0x04
    15f8:	1a 83       	std	Y+2, r17	; 0x02
    15fa:	09 83       	std	Y+1, r16	; 0x01
    15fc:	8f ef       	ldi	r24, 0xFF	; 255
    15fe:	9f e7       	ldi	r25, 0x7F	; 127
    1600:	9e 83       	std	Y+6, r25	; 0x06
    1602:	8d 83       	std	Y+5, r24	; 0x05
    1604:	ae 01       	movw	r20, r28
    1606:	47 5e       	subi	r20, 0xE7	; 231
    1608:	5f 4f       	sbci	r21, 0xFF	; 255
    160a:	6f 89       	ldd	r22, Y+23	; 0x17
    160c:	78 8d       	ldd	r23, Y+24	; 0x18
    160e:	ce 01       	movw	r24, r28
    1610:	01 96       	adiw	r24, 0x01	; 1
    1612:	10 d0       	rcall	.+32     	; 0x1634 <vfprintf>
    1614:	ef 81       	ldd	r30, Y+7	; 0x07
    1616:	f8 85       	ldd	r31, Y+8	; 0x08
    1618:	e0 0f       	add	r30, r16
    161a:	f1 1f       	adc	r31, r17
    161c:	10 82       	st	Z, r1
    161e:	2e 96       	adiw	r28, 0x0e	; 14
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	08 95       	ret

00001634 <vfprintf>:
    1634:	2f 92       	push	r2
    1636:	3f 92       	push	r3
    1638:	4f 92       	push	r4
    163a:	5f 92       	push	r5
    163c:	6f 92       	push	r6
    163e:	7f 92       	push	r7
    1640:	8f 92       	push	r8
    1642:	9f 92       	push	r9
    1644:	af 92       	push	r10
    1646:	bf 92       	push	r11
    1648:	cf 92       	push	r12
    164a:	df 92       	push	r13
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	2b 97       	sbiw	r28, 0x0b	; 11
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	6c 01       	movw	r12, r24
    166a:	7b 01       	movw	r14, r22
    166c:	8a 01       	movw	r16, r20
    166e:	fc 01       	movw	r30, r24
    1670:	17 82       	std	Z+7, r1	; 0x07
    1672:	16 82       	std	Z+6, r1	; 0x06
    1674:	83 81       	ldd	r24, Z+3	; 0x03
    1676:	81 ff       	sbrs	r24, 1
    1678:	bf c1       	rjmp	.+894    	; 0x19f8 <vfprintf+0x3c4>
    167a:	ce 01       	movw	r24, r28
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	3c 01       	movw	r6, r24
    1680:	f6 01       	movw	r30, r12
    1682:	93 81       	ldd	r25, Z+3	; 0x03
    1684:	f7 01       	movw	r30, r14
    1686:	93 fd       	sbrc	r25, 3
    1688:	85 91       	lpm	r24, Z+
    168a:	93 ff       	sbrs	r25, 3
    168c:	81 91       	ld	r24, Z+
    168e:	7f 01       	movw	r14, r30
    1690:	88 23       	and	r24, r24
    1692:	09 f4       	brne	.+2      	; 0x1696 <vfprintf+0x62>
    1694:	ad c1       	rjmp	.+858    	; 0x19f0 <vfprintf+0x3bc>
    1696:	85 32       	cpi	r24, 0x25	; 37
    1698:	39 f4       	brne	.+14     	; 0x16a8 <vfprintf+0x74>
    169a:	93 fd       	sbrc	r25, 3
    169c:	85 91       	lpm	r24, Z+
    169e:	93 ff       	sbrs	r25, 3
    16a0:	81 91       	ld	r24, Z+
    16a2:	7f 01       	movw	r14, r30
    16a4:	85 32       	cpi	r24, 0x25	; 37
    16a6:	21 f4       	brne	.+8      	; 0x16b0 <vfprintf+0x7c>
    16a8:	b6 01       	movw	r22, r12
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	d6 d1       	rcall	.+940    	; 0x1a5a <fputc>
    16ae:	e8 cf       	rjmp	.-48     	; 0x1680 <vfprintf+0x4c>
    16b0:	91 2c       	mov	r9, r1
    16b2:	21 2c       	mov	r2, r1
    16b4:	31 2c       	mov	r3, r1
    16b6:	ff e1       	ldi	r31, 0x1F	; 31
    16b8:	f3 15       	cp	r31, r3
    16ba:	d8 f0       	brcs	.+54     	; 0x16f2 <vfprintf+0xbe>
    16bc:	8b 32       	cpi	r24, 0x2B	; 43
    16be:	79 f0       	breq	.+30     	; 0x16de <vfprintf+0xaa>
    16c0:	38 f4       	brcc	.+14     	; 0x16d0 <vfprintf+0x9c>
    16c2:	80 32       	cpi	r24, 0x20	; 32
    16c4:	79 f0       	breq	.+30     	; 0x16e4 <vfprintf+0xb0>
    16c6:	83 32       	cpi	r24, 0x23	; 35
    16c8:	a1 f4       	brne	.+40     	; 0x16f2 <vfprintf+0xbe>
    16ca:	23 2d       	mov	r18, r3
    16cc:	20 61       	ori	r18, 0x10	; 16
    16ce:	1d c0       	rjmp	.+58     	; 0x170a <vfprintf+0xd6>
    16d0:	8d 32       	cpi	r24, 0x2D	; 45
    16d2:	61 f0       	breq	.+24     	; 0x16ec <vfprintf+0xb8>
    16d4:	80 33       	cpi	r24, 0x30	; 48
    16d6:	69 f4       	brne	.+26     	; 0x16f2 <vfprintf+0xbe>
    16d8:	23 2d       	mov	r18, r3
    16da:	21 60       	ori	r18, 0x01	; 1
    16dc:	16 c0       	rjmp	.+44     	; 0x170a <vfprintf+0xd6>
    16de:	83 2d       	mov	r24, r3
    16e0:	82 60       	ori	r24, 0x02	; 2
    16e2:	38 2e       	mov	r3, r24
    16e4:	e3 2d       	mov	r30, r3
    16e6:	e4 60       	ori	r30, 0x04	; 4
    16e8:	3e 2e       	mov	r3, r30
    16ea:	2a c0       	rjmp	.+84     	; 0x1740 <vfprintf+0x10c>
    16ec:	f3 2d       	mov	r31, r3
    16ee:	f8 60       	ori	r31, 0x08	; 8
    16f0:	1d c0       	rjmp	.+58     	; 0x172c <vfprintf+0xf8>
    16f2:	37 fc       	sbrc	r3, 7
    16f4:	2d c0       	rjmp	.+90     	; 0x1750 <vfprintf+0x11c>
    16f6:	20 ed       	ldi	r18, 0xD0	; 208
    16f8:	28 0f       	add	r18, r24
    16fa:	2a 30       	cpi	r18, 0x0A	; 10
    16fc:	40 f0       	brcs	.+16     	; 0x170e <vfprintf+0xda>
    16fe:	8e 32       	cpi	r24, 0x2E	; 46
    1700:	b9 f4       	brne	.+46     	; 0x1730 <vfprintf+0xfc>
    1702:	36 fc       	sbrc	r3, 6
    1704:	75 c1       	rjmp	.+746    	; 0x19f0 <vfprintf+0x3bc>
    1706:	23 2d       	mov	r18, r3
    1708:	20 64       	ori	r18, 0x40	; 64
    170a:	32 2e       	mov	r3, r18
    170c:	19 c0       	rjmp	.+50     	; 0x1740 <vfprintf+0x10c>
    170e:	36 fe       	sbrs	r3, 6
    1710:	06 c0       	rjmp	.+12     	; 0x171e <vfprintf+0xea>
    1712:	8a e0       	ldi	r24, 0x0A	; 10
    1714:	98 9e       	mul	r9, r24
    1716:	20 0d       	add	r18, r0
    1718:	11 24       	eor	r1, r1
    171a:	92 2e       	mov	r9, r18
    171c:	11 c0       	rjmp	.+34     	; 0x1740 <vfprintf+0x10c>
    171e:	ea e0       	ldi	r30, 0x0A	; 10
    1720:	2e 9e       	mul	r2, r30
    1722:	20 0d       	add	r18, r0
    1724:	11 24       	eor	r1, r1
    1726:	22 2e       	mov	r2, r18
    1728:	f3 2d       	mov	r31, r3
    172a:	f0 62       	ori	r31, 0x20	; 32
    172c:	3f 2e       	mov	r3, r31
    172e:	08 c0       	rjmp	.+16     	; 0x1740 <vfprintf+0x10c>
    1730:	8c 36       	cpi	r24, 0x6C	; 108
    1732:	21 f4       	brne	.+8      	; 0x173c <vfprintf+0x108>
    1734:	83 2d       	mov	r24, r3
    1736:	80 68       	ori	r24, 0x80	; 128
    1738:	38 2e       	mov	r3, r24
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <vfprintf+0x10c>
    173c:	88 36       	cpi	r24, 0x68	; 104
    173e:	41 f4       	brne	.+16     	; 0x1750 <vfprintf+0x11c>
    1740:	f7 01       	movw	r30, r14
    1742:	93 fd       	sbrc	r25, 3
    1744:	85 91       	lpm	r24, Z+
    1746:	93 ff       	sbrs	r25, 3
    1748:	81 91       	ld	r24, Z+
    174a:	7f 01       	movw	r14, r30
    174c:	81 11       	cpse	r24, r1
    174e:	b3 cf       	rjmp	.-154    	; 0x16b6 <vfprintf+0x82>
    1750:	98 2f       	mov	r25, r24
    1752:	9f 7d       	andi	r25, 0xDF	; 223
    1754:	95 54       	subi	r25, 0x45	; 69
    1756:	93 30       	cpi	r25, 0x03	; 3
    1758:	28 f4       	brcc	.+10     	; 0x1764 <vfprintf+0x130>
    175a:	0c 5f       	subi	r16, 0xFC	; 252
    175c:	1f 4f       	sbci	r17, 0xFF	; 255
    175e:	9f e3       	ldi	r25, 0x3F	; 63
    1760:	99 83       	std	Y+1, r25	; 0x01
    1762:	0d c0       	rjmp	.+26     	; 0x177e <vfprintf+0x14a>
    1764:	83 36       	cpi	r24, 0x63	; 99
    1766:	31 f0       	breq	.+12     	; 0x1774 <vfprintf+0x140>
    1768:	83 37       	cpi	r24, 0x73	; 115
    176a:	71 f0       	breq	.+28     	; 0x1788 <vfprintf+0x154>
    176c:	83 35       	cpi	r24, 0x53	; 83
    176e:	09 f0       	breq	.+2      	; 0x1772 <vfprintf+0x13e>
    1770:	55 c0       	rjmp	.+170    	; 0x181c <vfprintf+0x1e8>
    1772:	20 c0       	rjmp	.+64     	; 0x17b4 <vfprintf+0x180>
    1774:	f8 01       	movw	r30, r16
    1776:	80 81       	ld	r24, Z
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	0e 5f       	subi	r16, 0xFE	; 254
    177c:	1f 4f       	sbci	r17, 0xFF	; 255
    177e:	88 24       	eor	r8, r8
    1780:	83 94       	inc	r8
    1782:	91 2c       	mov	r9, r1
    1784:	53 01       	movw	r10, r6
    1786:	12 c0       	rjmp	.+36     	; 0x17ac <vfprintf+0x178>
    1788:	28 01       	movw	r4, r16
    178a:	f2 e0       	ldi	r31, 0x02	; 2
    178c:	4f 0e       	add	r4, r31
    178e:	51 1c       	adc	r5, r1
    1790:	f8 01       	movw	r30, r16
    1792:	a0 80       	ld	r10, Z
    1794:	b1 80       	ldd	r11, Z+1	; 0x01
    1796:	36 fe       	sbrs	r3, 6
    1798:	03 c0       	rjmp	.+6      	; 0x17a0 <vfprintf+0x16c>
    179a:	69 2d       	mov	r22, r9
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <vfprintf+0x170>
    17a0:	6f ef       	ldi	r22, 0xFF	; 255
    17a2:	7f ef       	ldi	r23, 0xFF	; 255
    17a4:	c5 01       	movw	r24, r10
    17a6:	4e d1       	rcall	.+668    	; 0x1a44 <strnlen>
    17a8:	4c 01       	movw	r8, r24
    17aa:	82 01       	movw	r16, r4
    17ac:	f3 2d       	mov	r31, r3
    17ae:	ff 77       	andi	r31, 0x7F	; 127
    17b0:	3f 2e       	mov	r3, r31
    17b2:	15 c0       	rjmp	.+42     	; 0x17de <vfprintf+0x1aa>
    17b4:	28 01       	movw	r4, r16
    17b6:	22 e0       	ldi	r18, 0x02	; 2
    17b8:	42 0e       	add	r4, r18
    17ba:	51 1c       	adc	r5, r1
    17bc:	f8 01       	movw	r30, r16
    17be:	a0 80       	ld	r10, Z
    17c0:	b1 80       	ldd	r11, Z+1	; 0x01
    17c2:	36 fe       	sbrs	r3, 6
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <vfprintf+0x198>
    17c6:	69 2d       	mov	r22, r9
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <vfprintf+0x19c>
    17cc:	6f ef       	ldi	r22, 0xFF	; 255
    17ce:	7f ef       	ldi	r23, 0xFF	; 255
    17d0:	c5 01       	movw	r24, r10
    17d2:	2d d1       	rcall	.+602    	; 0x1a2e <strnlen_P>
    17d4:	4c 01       	movw	r8, r24
    17d6:	f3 2d       	mov	r31, r3
    17d8:	f0 68       	ori	r31, 0x80	; 128
    17da:	3f 2e       	mov	r3, r31
    17dc:	82 01       	movw	r16, r4
    17de:	33 fc       	sbrc	r3, 3
    17e0:	19 c0       	rjmp	.+50     	; 0x1814 <vfprintf+0x1e0>
    17e2:	82 2d       	mov	r24, r2
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	88 16       	cp	r8, r24
    17e8:	99 06       	cpc	r9, r25
    17ea:	a0 f4       	brcc	.+40     	; 0x1814 <vfprintf+0x1e0>
    17ec:	b6 01       	movw	r22, r12
    17ee:	80 e2       	ldi	r24, 0x20	; 32
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	33 d1       	rcall	.+614    	; 0x1a5a <fputc>
    17f4:	2a 94       	dec	r2
    17f6:	f5 cf       	rjmp	.-22     	; 0x17e2 <vfprintf+0x1ae>
    17f8:	f5 01       	movw	r30, r10
    17fa:	37 fc       	sbrc	r3, 7
    17fc:	85 91       	lpm	r24, Z+
    17fe:	37 fe       	sbrs	r3, 7
    1800:	81 91       	ld	r24, Z+
    1802:	5f 01       	movw	r10, r30
    1804:	b6 01       	movw	r22, r12
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	28 d1       	rcall	.+592    	; 0x1a5a <fputc>
    180a:	21 10       	cpse	r2, r1
    180c:	2a 94       	dec	r2
    180e:	21 e0       	ldi	r18, 0x01	; 1
    1810:	82 1a       	sub	r8, r18
    1812:	91 08       	sbc	r9, r1
    1814:	81 14       	cp	r8, r1
    1816:	91 04       	cpc	r9, r1
    1818:	79 f7       	brne	.-34     	; 0x17f8 <vfprintf+0x1c4>
    181a:	e1 c0       	rjmp	.+450    	; 0x19de <vfprintf+0x3aa>
    181c:	84 36       	cpi	r24, 0x64	; 100
    181e:	11 f0       	breq	.+4      	; 0x1824 <vfprintf+0x1f0>
    1820:	89 36       	cpi	r24, 0x69	; 105
    1822:	39 f5       	brne	.+78     	; 0x1872 <vfprintf+0x23e>
    1824:	f8 01       	movw	r30, r16
    1826:	37 fe       	sbrs	r3, 7
    1828:	07 c0       	rjmp	.+14     	; 0x1838 <vfprintf+0x204>
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	0c 5f       	subi	r16, 0xFC	; 252
    1834:	1f 4f       	sbci	r17, 0xFF	; 255
    1836:	08 c0       	rjmp	.+16     	; 0x1848 <vfprintf+0x214>
    1838:	60 81       	ld	r22, Z
    183a:	71 81       	ldd	r23, Z+1	; 0x01
    183c:	07 2e       	mov	r0, r23
    183e:	00 0c       	add	r0, r0
    1840:	88 0b       	sbc	r24, r24
    1842:	99 0b       	sbc	r25, r25
    1844:	0e 5f       	subi	r16, 0xFE	; 254
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	f3 2d       	mov	r31, r3
    184a:	ff 76       	andi	r31, 0x6F	; 111
    184c:	3f 2e       	mov	r3, r31
    184e:	97 ff       	sbrs	r25, 7
    1850:	09 c0       	rjmp	.+18     	; 0x1864 <vfprintf+0x230>
    1852:	90 95       	com	r25
    1854:	80 95       	com	r24
    1856:	70 95       	com	r23
    1858:	61 95       	neg	r22
    185a:	7f 4f       	sbci	r23, 0xFF	; 255
    185c:	8f 4f       	sbci	r24, 0xFF	; 255
    185e:	9f 4f       	sbci	r25, 0xFF	; 255
    1860:	f0 68       	ori	r31, 0x80	; 128
    1862:	3f 2e       	mov	r3, r31
    1864:	2a e0       	ldi	r18, 0x0A	; 10
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	a3 01       	movw	r20, r6
    186a:	33 d1       	rcall	.+614    	; 0x1ad2 <__ultoa_invert>
    186c:	88 2e       	mov	r8, r24
    186e:	86 18       	sub	r8, r6
    1870:	44 c0       	rjmp	.+136    	; 0x18fa <vfprintf+0x2c6>
    1872:	85 37       	cpi	r24, 0x75	; 117
    1874:	31 f4       	brne	.+12     	; 0x1882 <vfprintf+0x24e>
    1876:	23 2d       	mov	r18, r3
    1878:	2f 7e       	andi	r18, 0xEF	; 239
    187a:	b2 2e       	mov	r11, r18
    187c:	2a e0       	ldi	r18, 0x0A	; 10
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	25 c0       	rjmp	.+74     	; 0x18cc <vfprintf+0x298>
    1882:	93 2d       	mov	r25, r3
    1884:	99 7f       	andi	r25, 0xF9	; 249
    1886:	b9 2e       	mov	r11, r25
    1888:	8f 36       	cpi	r24, 0x6F	; 111
    188a:	c1 f0       	breq	.+48     	; 0x18bc <vfprintf+0x288>
    188c:	18 f4       	brcc	.+6      	; 0x1894 <vfprintf+0x260>
    188e:	88 35       	cpi	r24, 0x58	; 88
    1890:	79 f0       	breq	.+30     	; 0x18b0 <vfprintf+0x27c>
    1892:	ae c0       	rjmp	.+348    	; 0x19f0 <vfprintf+0x3bc>
    1894:	80 37       	cpi	r24, 0x70	; 112
    1896:	19 f0       	breq	.+6      	; 0x189e <vfprintf+0x26a>
    1898:	88 37       	cpi	r24, 0x78	; 120
    189a:	21 f0       	breq	.+8      	; 0x18a4 <vfprintf+0x270>
    189c:	a9 c0       	rjmp	.+338    	; 0x19f0 <vfprintf+0x3bc>
    189e:	e9 2f       	mov	r30, r25
    18a0:	e0 61       	ori	r30, 0x10	; 16
    18a2:	be 2e       	mov	r11, r30
    18a4:	b4 fe       	sbrs	r11, 4
    18a6:	0d c0       	rjmp	.+26     	; 0x18c2 <vfprintf+0x28e>
    18a8:	fb 2d       	mov	r31, r11
    18aa:	f4 60       	ori	r31, 0x04	; 4
    18ac:	bf 2e       	mov	r11, r31
    18ae:	09 c0       	rjmp	.+18     	; 0x18c2 <vfprintf+0x28e>
    18b0:	34 fe       	sbrs	r3, 4
    18b2:	0a c0       	rjmp	.+20     	; 0x18c8 <vfprintf+0x294>
    18b4:	29 2f       	mov	r18, r25
    18b6:	26 60       	ori	r18, 0x06	; 6
    18b8:	b2 2e       	mov	r11, r18
    18ba:	06 c0       	rjmp	.+12     	; 0x18c8 <vfprintf+0x294>
    18bc:	28 e0       	ldi	r18, 0x08	; 8
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	05 c0       	rjmp	.+10     	; 0x18cc <vfprintf+0x298>
    18c2:	20 e1       	ldi	r18, 0x10	; 16
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <vfprintf+0x298>
    18c8:	20 e1       	ldi	r18, 0x10	; 16
    18ca:	32 e0       	ldi	r19, 0x02	; 2
    18cc:	f8 01       	movw	r30, r16
    18ce:	b7 fe       	sbrs	r11, 7
    18d0:	07 c0       	rjmp	.+14     	; 0x18e0 <vfprintf+0x2ac>
    18d2:	60 81       	ld	r22, Z
    18d4:	71 81       	ldd	r23, Z+1	; 0x01
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	0c 5f       	subi	r16, 0xFC	; 252
    18dc:	1f 4f       	sbci	r17, 0xFF	; 255
    18de:	06 c0       	rjmp	.+12     	; 0x18ec <vfprintf+0x2b8>
    18e0:	60 81       	ld	r22, Z
    18e2:	71 81       	ldd	r23, Z+1	; 0x01
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 5f       	subi	r16, 0xFE	; 254
    18ea:	1f 4f       	sbci	r17, 0xFF	; 255
    18ec:	a3 01       	movw	r20, r6
    18ee:	f1 d0       	rcall	.+482    	; 0x1ad2 <__ultoa_invert>
    18f0:	88 2e       	mov	r8, r24
    18f2:	86 18       	sub	r8, r6
    18f4:	fb 2d       	mov	r31, r11
    18f6:	ff 77       	andi	r31, 0x7F	; 127
    18f8:	3f 2e       	mov	r3, r31
    18fa:	36 fe       	sbrs	r3, 6
    18fc:	0d c0       	rjmp	.+26     	; 0x1918 <vfprintf+0x2e4>
    18fe:	23 2d       	mov	r18, r3
    1900:	2e 7f       	andi	r18, 0xFE	; 254
    1902:	a2 2e       	mov	r10, r18
    1904:	89 14       	cp	r8, r9
    1906:	58 f4       	brcc	.+22     	; 0x191e <vfprintf+0x2ea>
    1908:	34 fe       	sbrs	r3, 4
    190a:	0b c0       	rjmp	.+22     	; 0x1922 <vfprintf+0x2ee>
    190c:	32 fc       	sbrc	r3, 2
    190e:	09 c0       	rjmp	.+18     	; 0x1922 <vfprintf+0x2ee>
    1910:	83 2d       	mov	r24, r3
    1912:	8e 7e       	andi	r24, 0xEE	; 238
    1914:	a8 2e       	mov	r10, r24
    1916:	05 c0       	rjmp	.+10     	; 0x1922 <vfprintf+0x2ee>
    1918:	b8 2c       	mov	r11, r8
    191a:	a3 2c       	mov	r10, r3
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <vfprintf+0x2f0>
    191e:	b8 2c       	mov	r11, r8
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <vfprintf+0x2f0>
    1922:	b9 2c       	mov	r11, r9
    1924:	a4 fe       	sbrs	r10, 4
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <vfprintf+0x312>
    1928:	fe 01       	movw	r30, r28
    192a:	e8 0d       	add	r30, r8
    192c:	f1 1d       	adc	r31, r1
    192e:	80 81       	ld	r24, Z
    1930:	80 33       	cpi	r24, 0x30	; 48
    1932:	21 f4       	brne	.+8      	; 0x193c <vfprintf+0x308>
    1934:	9a 2d       	mov	r25, r10
    1936:	99 7e       	andi	r25, 0xE9	; 233
    1938:	a9 2e       	mov	r10, r25
    193a:	09 c0       	rjmp	.+18     	; 0x194e <vfprintf+0x31a>
    193c:	a2 fe       	sbrs	r10, 2
    193e:	06 c0       	rjmp	.+12     	; 0x194c <vfprintf+0x318>
    1940:	b3 94       	inc	r11
    1942:	b3 94       	inc	r11
    1944:	04 c0       	rjmp	.+8      	; 0x194e <vfprintf+0x31a>
    1946:	8a 2d       	mov	r24, r10
    1948:	86 78       	andi	r24, 0x86	; 134
    194a:	09 f0       	breq	.+2      	; 0x194e <vfprintf+0x31a>
    194c:	b3 94       	inc	r11
    194e:	a3 fc       	sbrc	r10, 3
    1950:	10 c0       	rjmp	.+32     	; 0x1972 <vfprintf+0x33e>
    1952:	a0 fe       	sbrs	r10, 0
    1954:	06 c0       	rjmp	.+12     	; 0x1962 <vfprintf+0x32e>
    1956:	b2 14       	cp	r11, r2
    1958:	80 f4       	brcc	.+32     	; 0x197a <vfprintf+0x346>
    195a:	28 0c       	add	r2, r8
    195c:	92 2c       	mov	r9, r2
    195e:	9b 18       	sub	r9, r11
    1960:	0d c0       	rjmp	.+26     	; 0x197c <vfprintf+0x348>
    1962:	b2 14       	cp	r11, r2
    1964:	58 f4       	brcc	.+22     	; 0x197c <vfprintf+0x348>
    1966:	b6 01       	movw	r22, r12
    1968:	80 e2       	ldi	r24, 0x20	; 32
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	76 d0       	rcall	.+236    	; 0x1a5a <fputc>
    196e:	b3 94       	inc	r11
    1970:	f8 cf       	rjmp	.-16     	; 0x1962 <vfprintf+0x32e>
    1972:	b2 14       	cp	r11, r2
    1974:	18 f4       	brcc	.+6      	; 0x197c <vfprintf+0x348>
    1976:	2b 18       	sub	r2, r11
    1978:	02 c0       	rjmp	.+4      	; 0x197e <vfprintf+0x34a>
    197a:	98 2c       	mov	r9, r8
    197c:	21 2c       	mov	r2, r1
    197e:	a4 fe       	sbrs	r10, 4
    1980:	0f c0       	rjmp	.+30     	; 0x19a0 <vfprintf+0x36c>
    1982:	b6 01       	movw	r22, r12
    1984:	80 e3       	ldi	r24, 0x30	; 48
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	68 d0       	rcall	.+208    	; 0x1a5a <fputc>
    198a:	a2 fe       	sbrs	r10, 2
    198c:	16 c0       	rjmp	.+44     	; 0x19ba <vfprintf+0x386>
    198e:	a1 fc       	sbrc	r10, 1
    1990:	03 c0       	rjmp	.+6      	; 0x1998 <vfprintf+0x364>
    1992:	88 e7       	ldi	r24, 0x78	; 120
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 c0       	rjmp	.+4      	; 0x199c <vfprintf+0x368>
    1998:	88 e5       	ldi	r24, 0x58	; 88
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	b6 01       	movw	r22, r12
    199e:	0c c0       	rjmp	.+24     	; 0x19b8 <vfprintf+0x384>
    19a0:	8a 2d       	mov	r24, r10
    19a2:	86 78       	andi	r24, 0x86	; 134
    19a4:	51 f0       	breq	.+20     	; 0x19ba <vfprintf+0x386>
    19a6:	a1 fe       	sbrs	r10, 1
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <vfprintf+0x37a>
    19aa:	8b e2       	ldi	r24, 0x2B	; 43
    19ac:	01 c0       	rjmp	.+2      	; 0x19b0 <vfprintf+0x37c>
    19ae:	80 e2       	ldi	r24, 0x20	; 32
    19b0:	a7 fc       	sbrc	r10, 7
    19b2:	8d e2       	ldi	r24, 0x2D	; 45
    19b4:	b6 01       	movw	r22, r12
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	50 d0       	rcall	.+160    	; 0x1a5a <fputc>
    19ba:	89 14       	cp	r8, r9
    19bc:	30 f4       	brcc	.+12     	; 0x19ca <vfprintf+0x396>
    19be:	b6 01       	movw	r22, r12
    19c0:	80 e3       	ldi	r24, 0x30	; 48
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	4a d0       	rcall	.+148    	; 0x1a5a <fputc>
    19c6:	9a 94       	dec	r9
    19c8:	f8 cf       	rjmp	.-16     	; 0x19ba <vfprintf+0x386>
    19ca:	8a 94       	dec	r8
    19cc:	f3 01       	movw	r30, r6
    19ce:	e8 0d       	add	r30, r8
    19d0:	f1 1d       	adc	r31, r1
    19d2:	80 81       	ld	r24, Z
    19d4:	b6 01       	movw	r22, r12
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	40 d0       	rcall	.+128    	; 0x1a5a <fputc>
    19da:	81 10       	cpse	r8, r1
    19dc:	f6 cf       	rjmp	.-20     	; 0x19ca <vfprintf+0x396>
    19de:	22 20       	and	r2, r2
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <vfprintf+0x3b0>
    19e2:	4e ce       	rjmp	.-868    	; 0x1680 <vfprintf+0x4c>
    19e4:	b6 01       	movw	r22, r12
    19e6:	80 e2       	ldi	r24, 0x20	; 32
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	37 d0       	rcall	.+110    	; 0x1a5a <fputc>
    19ec:	2a 94       	dec	r2
    19ee:	f7 cf       	rjmp	.-18     	; 0x19de <vfprintf+0x3aa>
    19f0:	f6 01       	movw	r30, r12
    19f2:	86 81       	ldd	r24, Z+6	; 0x06
    19f4:	97 81       	ldd	r25, Z+7	; 0x07
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <vfprintf+0x3c8>
    19f8:	8f ef       	ldi	r24, 0xFF	; 255
    19fa:	9f ef       	ldi	r25, 0xFF	; 255
    19fc:	2b 96       	adiw	r28, 0x0b	; 11
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	ff 90       	pop	r15
    1a12:	ef 90       	pop	r14
    1a14:	df 90       	pop	r13
    1a16:	cf 90       	pop	r12
    1a18:	bf 90       	pop	r11
    1a1a:	af 90       	pop	r10
    1a1c:	9f 90       	pop	r9
    1a1e:	8f 90       	pop	r8
    1a20:	7f 90       	pop	r7
    1a22:	6f 90       	pop	r6
    1a24:	5f 90       	pop	r5
    1a26:	4f 90       	pop	r4
    1a28:	3f 90       	pop	r3
    1a2a:	2f 90       	pop	r2
    1a2c:	08 95       	ret

00001a2e <strnlen_P>:
    1a2e:	fc 01       	movw	r30, r24
    1a30:	05 90       	lpm	r0, Z+
    1a32:	61 50       	subi	r22, 0x01	; 1
    1a34:	70 40       	sbci	r23, 0x00	; 0
    1a36:	01 10       	cpse	r0, r1
    1a38:	d8 f7       	brcc	.-10     	; 0x1a30 <strnlen_P+0x2>
    1a3a:	80 95       	com	r24
    1a3c:	90 95       	com	r25
    1a3e:	8e 0f       	add	r24, r30
    1a40:	9f 1f       	adc	r25, r31
    1a42:	08 95       	ret

00001a44 <strnlen>:
    1a44:	fc 01       	movw	r30, r24
    1a46:	61 50       	subi	r22, 0x01	; 1
    1a48:	70 40       	sbci	r23, 0x00	; 0
    1a4a:	01 90       	ld	r0, Z+
    1a4c:	01 10       	cpse	r0, r1
    1a4e:	d8 f7       	brcc	.-10     	; 0x1a46 <strnlen+0x2>
    1a50:	80 95       	com	r24
    1a52:	90 95       	com	r25
    1a54:	8e 0f       	add	r24, r30
    1a56:	9f 1f       	adc	r25, r31
    1a58:	08 95       	ret

00001a5a <fputc>:
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	fb 01       	movw	r30, r22
    1a64:	23 81       	ldd	r18, Z+3	; 0x03
    1a66:	21 fd       	sbrc	r18, 1
    1a68:	03 c0       	rjmp	.+6      	; 0x1a70 <fputc+0x16>
    1a6a:	8f ef       	ldi	r24, 0xFF	; 255
    1a6c:	9f ef       	ldi	r25, 0xFF	; 255
    1a6e:	2c c0       	rjmp	.+88     	; 0x1ac8 <fputc+0x6e>
    1a70:	22 ff       	sbrs	r18, 2
    1a72:	16 c0       	rjmp	.+44     	; 0x1aa0 <fputc+0x46>
    1a74:	46 81       	ldd	r20, Z+6	; 0x06
    1a76:	57 81       	ldd	r21, Z+7	; 0x07
    1a78:	24 81       	ldd	r18, Z+4	; 0x04
    1a7a:	35 81       	ldd	r19, Z+5	; 0x05
    1a7c:	42 17       	cp	r20, r18
    1a7e:	53 07       	cpc	r21, r19
    1a80:	44 f4       	brge	.+16     	; 0x1a92 <fputc+0x38>
    1a82:	a0 81       	ld	r26, Z
    1a84:	b1 81       	ldd	r27, Z+1	; 0x01
    1a86:	9d 01       	movw	r18, r26
    1a88:	2f 5f       	subi	r18, 0xFF	; 255
    1a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8c:	31 83       	std	Z+1, r19	; 0x01
    1a8e:	20 83       	st	Z, r18
    1a90:	8c 93       	st	X, r24
    1a92:	26 81       	ldd	r18, Z+6	; 0x06
    1a94:	37 81       	ldd	r19, Z+7	; 0x07
    1a96:	2f 5f       	subi	r18, 0xFF	; 255
    1a98:	3f 4f       	sbci	r19, 0xFF	; 255
    1a9a:	37 83       	std	Z+7, r19	; 0x07
    1a9c:	26 83       	std	Z+6, r18	; 0x06
    1a9e:	14 c0       	rjmp	.+40     	; 0x1ac8 <fputc+0x6e>
    1aa0:	8b 01       	movw	r16, r22
    1aa2:	ec 01       	movw	r28, r24
    1aa4:	fb 01       	movw	r30, r22
    1aa6:	00 84       	ldd	r0, Z+8	; 0x08
    1aa8:	f1 85       	ldd	r31, Z+9	; 0x09
    1aaa:	e0 2d       	mov	r30, r0
    1aac:	09 95       	icall
    1aae:	89 2b       	or	r24, r25
    1ab0:	e1 f6       	brne	.-72     	; 0x1a6a <fputc+0x10>
    1ab2:	d8 01       	movw	r26, r16
    1ab4:	16 96       	adiw	r26, 0x06	; 6
    1ab6:	8d 91       	ld	r24, X+
    1ab8:	9c 91       	ld	r25, X
    1aba:	17 97       	sbiw	r26, 0x07	; 7
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	17 96       	adiw	r26, 0x07	; 7
    1ac0:	9c 93       	st	X, r25
    1ac2:	8e 93       	st	-X, r24
    1ac4:	16 97       	sbiw	r26, 0x06	; 6
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	08 95       	ret

00001ad2 <__ultoa_invert>:
    1ad2:	fa 01       	movw	r30, r20
    1ad4:	aa 27       	eor	r26, r26
    1ad6:	28 30       	cpi	r18, 0x08	; 8
    1ad8:	51 f1       	breq	.+84     	; 0x1b2e <__ultoa_invert+0x5c>
    1ada:	20 31       	cpi	r18, 0x10	; 16
    1adc:	81 f1       	breq	.+96     	; 0x1b3e <__ultoa_invert+0x6c>
    1ade:	e8 94       	clt
    1ae0:	6f 93       	push	r22
    1ae2:	6e 7f       	andi	r22, 0xFE	; 254
    1ae4:	6e 5f       	subi	r22, 0xFE	; 254
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	af 4f       	sbci	r26, 0xFF	; 255
    1aee:	b1 e0       	ldi	r27, 0x01	; 1
    1af0:	3e d0       	rcall	.+124    	; 0x1b6e <__ultoa_invert+0x9c>
    1af2:	b4 e0       	ldi	r27, 0x04	; 4
    1af4:	3c d0       	rcall	.+120    	; 0x1b6e <__ultoa_invert+0x9c>
    1af6:	67 0f       	add	r22, r23
    1af8:	78 1f       	adc	r23, r24
    1afa:	89 1f       	adc	r24, r25
    1afc:	9a 1f       	adc	r25, r26
    1afe:	a1 1d       	adc	r26, r1
    1b00:	68 0f       	add	r22, r24
    1b02:	79 1f       	adc	r23, r25
    1b04:	8a 1f       	adc	r24, r26
    1b06:	91 1d       	adc	r25, r1
    1b08:	a1 1d       	adc	r26, r1
    1b0a:	6a 0f       	add	r22, r26
    1b0c:	71 1d       	adc	r23, r1
    1b0e:	81 1d       	adc	r24, r1
    1b10:	91 1d       	adc	r25, r1
    1b12:	a1 1d       	adc	r26, r1
    1b14:	20 d0       	rcall	.+64     	; 0x1b56 <__ultoa_invert+0x84>
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <__ultoa_invert+0x48>
    1b18:	68 94       	set
    1b1a:	3f 91       	pop	r19
    1b1c:	2a e0       	ldi	r18, 0x0A	; 10
    1b1e:	26 9f       	mul	r18, r22
    1b20:	11 24       	eor	r1, r1
    1b22:	30 19       	sub	r19, r0
    1b24:	30 5d       	subi	r19, 0xD0	; 208
    1b26:	31 93       	st	Z+, r19
    1b28:	de f6       	brtc	.-74     	; 0x1ae0 <__ultoa_invert+0xe>
    1b2a:	cf 01       	movw	r24, r30
    1b2c:	08 95       	ret
    1b2e:	46 2f       	mov	r20, r22
    1b30:	47 70       	andi	r20, 0x07	; 7
    1b32:	40 5d       	subi	r20, 0xD0	; 208
    1b34:	41 93       	st	Z+, r20
    1b36:	b3 e0       	ldi	r27, 0x03	; 3
    1b38:	0f d0       	rcall	.+30     	; 0x1b58 <__ultoa_invert+0x86>
    1b3a:	c9 f7       	brne	.-14     	; 0x1b2e <__ultoa_invert+0x5c>
    1b3c:	f6 cf       	rjmp	.-20     	; 0x1b2a <__ultoa_invert+0x58>
    1b3e:	46 2f       	mov	r20, r22
    1b40:	4f 70       	andi	r20, 0x0F	; 15
    1b42:	40 5d       	subi	r20, 0xD0	; 208
    1b44:	4a 33       	cpi	r20, 0x3A	; 58
    1b46:	18 f0       	brcs	.+6      	; 0x1b4e <__ultoa_invert+0x7c>
    1b48:	49 5d       	subi	r20, 0xD9	; 217
    1b4a:	31 fd       	sbrc	r19, 1
    1b4c:	40 52       	subi	r20, 0x20	; 32
    1b4e:	41 93       	st	Z+, r20
    1b50:	02 d0       	rcall	.+4      	; 0x1b56 <__ultoa_invert+0x84>
    1b52:	a9 f7       	brne	.-22     	; 0x1b3e <__ultoa_invert+0x6c>
    1b54:	ea cf       	rjmp	.-44     	; 0x1b2a <__ultoa_invert+0x58>
    1b56:	b4 e0       	ldi	r27, 0x04	; 4
    1b58:	a6 95       	lsr	r26
    1b5a:	97 95       	ror	r25
    1b5c:	87 95       	ror	r24
    1b5e:	77 95       	ror	r23
    1b60:	67 95       	ror	r22
    1b62:	ba 95       	dec	r27
    1b64:	c9 f7       	brne	.-14     	; 0x1b58 <__ultoa_invert+0x86>
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	61 05       	cpc	r22, r1
    1b6a:	71 05       	cpc	r23, r1
    1b6c:	08 95       	ret
    1b6e:	9b 01       	movw	r18, r22
    1b70:	ac 01       	movw	r20, r24
    1b72:	0a 2e       	mov	r0, r26
    1b74:	06 94       	lsr	r0
    1b76:	57 95       	ror	r21
    1b78:	47 95       	ror	r20
    1b7a:	37 95       	ror	r19
    1b7c:	27 95       	ror	r18
    1b7e:	ba 95       	dec	r27
    1b80:	c9 f7       	brne	.-14     	; 0x1b74 <__ultoa_invert+0xa2>
    1b82:	62 0f       	add	r22, r18
    1b84:	73 1f       	adc	r23, r19
    1b86:	84 1f       	adc	r24, r20
    1b88:	95 1f       	adc	r25, r21
    1b8a:	a0 1d       	adc	r26, r0
    1b8c:	08 95       	ret

00001b8e <_exit>:
    1b8e:	f8 94       	cli

00001b90 <__stop_program>:
    1b90:	ff cf       	rjmp	.-2      	; 0x1b90 <__stop_program>
