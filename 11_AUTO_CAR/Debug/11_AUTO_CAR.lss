
11_AUTO_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00001742  000017d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001742  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000066f  00800152  00800152  00001828  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b74  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001131  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001037  00000000  00000000  00004759  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004fc  00000000  00000000  00005790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000805  00000000  00000000  00005c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a80  00000000  00000000  00006491  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00006f11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	77 c0       	rjmp	.+238    	; 0xf0 <__ctors_end>
       2:	00 00       	nop
       4:	93 c0       	rjmp	.+294    	; 0x12c <__bad_interrupt>
       6:	00 00       	nop
       8:	91 c0       	rjmp	.+290    	; 0x12c <__bad_interrupt>
       a:	00 00       	nop
       c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	6b c5       	rjmp	.+2774   	; 0xaec <__vector_5>
      16:	00 00       	nop
      18:	b6 c5       	rjmp	.+2924   	; 0xb86 <__vector_6>
      1a:	00 00       	nop
      1c:	01 c6       	rjmp	.+3074   	; 0xc20 <__vector_7>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	77 c0       	rjmp	.+238    	; 0x12c <__bad_interrupt>
      3e:	00 00       	nop
      40:	e9 c1       	rjmp	.+978    	; 0x414 <__vector_16>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	7c c4       	rjmp	.+2296   	; 0x942 <__vector_18>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	6b c0       	rjmp	.+214    	; 0x12c <__bad_interrupt>
      56:	00 00       	nop
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	63 c0       	rjmp	.+198    	; 0x12c <__bad_interrupt>
      66:	00 00       	nop
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
      76:	00 00       	nop
      78:	f6 c4       	rjmp	.+2540   	; 0xa66 <__vector_30>
      7a:	00 00       	nop
      7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f6 01       	movw	r30, r12
      8e:	03 02       	muls	r16, r19
      90:	03 02       	muls	r16, r19
      92:	03 02       	muls	r16, r19
      94:	f2 01       	movw	r30, r4
      96:	03 02       	muls	r16, r19
      98:	03 02       	muls	r16, r19
      9a:	03 02       	muls	r16, r19
      9c:	03 02       	muls	r16, r19
      9e:	03 02       	muls	r16, r19
      a0:	fa 01       	movw	r30, r20
      a2:	03 02       	muls	r16, r19
      a4:	03 02       	muls	r16, r19
      a6:	03 02       	muls	r16, r19
      a8:	03 02       	muls	r16, r19
      aa:	03 02       	muls	r16, r19
      ac:	fe 01       	movw	r30, r28
      ae:	02 02       	muls	r16, r18
      b0:	03 02       	muls	r16, r19
      b2:	03 02       	muls	r16, r19
      b4:	03 02       	muls	r16, r19
      b6:	03 02       	muls	r16, r19
      b8:	03 02       	muls	r16, r19
      ba:	03 02       	muls	r16, r19
      bc:	03 02       	muls	r16, r19
      be:	03 02       	muls	r16, r19
      c0:	03 02       	muls	r16, r19
      c2:	03 02       	muls	r16, r19
      c4:	03 02       	muls	r16, r19
      c6:	03 02       	muls	r16, r19
      c8:	03 02       	muls	r16, r19
      ca:	03 02       	muls	r16, r19
      cc:	f6 01       	movw	r30, r12
      ce:	03 02       	muls	r16, r19
      d0:	03 02       	muls	r16, r19
      d2:	03 02       	muls	r16, r19
      d4:	f2 01       	movw	r30, r4
      d6:	03 02       	muls	r16, r19
      d8:	03 02       	muls	r16, r19
      da:	03 02       	muls	r16, r19
      dc:	03 02       	muls	r16, r19
      de:	03 02       	muls	r16, r19
      e0:	fa 01       	movw	r30, r20
      e2:	03 02       	muls	r16, r19
      e4:	03 02       	muls	r16, r19
      e6:	03 02       	muls	r16, r19
      e8:	03 02       	muls	r16, r19
      ea:	03 02       	muls	r16, r19
      ec:	fe 01       	movw	r30, r28
      ee:	02 02       	muls	r16, r18

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d0 e1       	ldi	r29, 0x10	; 16
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	11 e0       	ldi	r17, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	e2 e4       	ldi	r30, 0x42	; 66
     104:	f7 e1       	ldi	r31, 0x17	; 23
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0b bf       	out	0x3b, r16	; 59
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x14>
     10c:	07 90       	elpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	a2 35       	cpi	r26, 0x52	; 82
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0x10>

00000116 <__do_clear_bss>:
     116:	27 e0       	ldi	r18, 0x07	; 7
     118:	a2 e5       	ldi	r26, 0x52	; 82
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	a1 3c       	cpi	r26, 0xC1	; 193
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	df d1       	rcall	.+958    	; 0x4e6 <main>
     128:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <init_button>:

int button0_state = 0;

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN /*| 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN*/);
     12e:	8a b3       	in	r24, 0x1a	; 26
     130:	8f 7b       	andi	r24, 0xBF	; 191
     132:	8a bb       	out	0x1a, r24	; 26
     134:	08 95       	ret

00000136 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE/*, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE*/}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
     136:	29 b3       	in	r18, 0x19	; 25
     138:	42 2f       	mov	r20, r18
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	02 c0       	rjmp	.+4      	; 0x146 <get_button+0x10>
     142:	22 0f       	add	r18, r18
     144:	33 1f       	adc	r19, r19
     146:	6a 95       	dec	r22
     148:	e2 f7       	brpl	.-8      	; 0x142 <get_button+0xc>
     14a:	24 23       	and	r18, r20
     14c:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
     14e:	21 15       	cp	r18, r1
     150:	31 05       	cpc	r19, r1
     152:	b9 f0       	breq	.+46     	; 0x182 <get_button+0x4c>
     154:	fc 01       	movw	r30, r24
     156:	ee 5a       	subi	r30, 0xAE	; 174
     158:	fe 4f       	sbci	r31, 0xFE	; 254
     15a:	40 81       	ld	r20, Z
     15c:	41 11       	cpse	r20, r1
     15e:	11 c0       	rjmp	.+34     	; 0x182 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     160:	2f ef       	ldi	r18, 0xFF	; 255
     162:	3d ee       	ldi	r19, 0xED	; 237
     164:	42 e0       	ldi	r20, 0x02	; 2
     166:	21 50       	subi	r18, 0x01	; 1
     168:	30 40       	sbci	r19, 0x00	; 0
     16a:	40 40       	sbci	r20, 0x00	; 0
     16c:	e1 f7       	brne	.-8      	; 0x166 <get_button+0x30>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <get_button+0x3a>
     170:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     172:	fc 01       	movw	r30, r24
     174:	ee 5a       	subi	r30, 0xAE	; 174
     176:	fe 4f       	sbci	r31, 0xFE	; 254
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     182:	fc 01       	movw	r30, r24
     184:	ee 5a       	subi	r30, 0xAE	; 174
     186:	fe 4f       	sbci	r31, 0xFE	; 254
     188:	40 81       	ld	r20, Z
     18a:	41 30       	cpi	r20, 0x01	; 1
     18c:	91 f4       	brne	.+36     	; 0x1b2 <get_button+0x7c>
     18e:	23 2b       	or	r18, r19
     190:	99 f4       	brne	.+38     	; 0x1b8 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     192:	fc 01       	movw	r30, r24
     194:	ee 5a       	subi	r30, 0xAE	; 174
     196:	fe 4f       	sbci	r31, 0xFE	; 254
     198:	10 82       	st	Z, r1
     19a:	8f ef       	ldi	r24, 0xFF	; 255
     19c:	9d ee       	ldi	r25, 0xED	; 237
     19e:	22 e0       	ldi	r18, 0x02	; 2
     1a0:	81 50       	subi	r24, 0x01	; 1
     1a2:	90 40       	sbci	r25, 0x00	; 0
     1a4:	20 40       	sbci	r18, 0x00	; 0
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <get_button+0x6a>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <get_button+0x74>
     1aa:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	08 95       	ret
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
}
     1bc:	08 95       	ret

000001be <auto_mode_check>:

void auto_mode_check(void)
{
	if (get_button(BUTTON0, BUTTON0PIN))
     1be:	66 e0       	ldi	r22, 0x06	; 6
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	b7 df       	rcall	.-146    	; 0x136 <get_button>
     1c8:	89 2b       	or	r24, r25
     1ca:	71 f0       	breq	.+28     	; 0x1e8 <auto_mode_check+0x2a>
	{
		button0_state = !button0_state;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <button0_state>
     1d4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <button0_state+0x1>
     1d8:	23 2b       	or	r18, r19
     1da:	11 f0       	breq	.+4      	; 0x1e0 <auto_mode_check+0x22>
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <button0_state+0x1>
     1e4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <button0_state>
	}
	
	if (button0_state)
     1e8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <button0_state>
     1ec:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <button0_state+0x1>
     1f0:	89 2b       	or	r24, r25
     1f2:	39 f0       	breq	.+14     	; 0x202 <auto_mode_check+0x44>
	{
		AUTO_RUN_LED_PORT |= 1 << AUTO_RUN_LED_PIN; // LED ON
     1f4:	e5 e6       	ldi	r30, 0x65	; 101
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	88 60       	ori	r24, 0x08	; 8
		auto_start();
     1fc:	80 83       	st	Z, r24
     1fe:	b5 d2       	rcall	.+1386   	; 0x76a <auto_start>
     200:	06 c0       	rjmp	.+12     	; 0x20e <auto_mode_check+0x50>
	}
	else
	{
		AUTO_RUN_LED_PORT &= ~(1 << AUTO_RUN_LED_PIN); // LED OFF
     202:	e5 e6       	ldi	r30, 0x65	; 101
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	80 81       	ld	r24, Z
     208:	87 7f       	andi	r24, 0xF7	; 247
		stop();
     20a:	80 83       	st	Z, r24
     20c:	e6 d1       	rcall	.+972    	; 0x5da <stop>
	}
	func_state = AUTO_MODE;
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <func_state+0x1>
     216:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <func_state>
     21a:	08 95       	ret

0000021c <init_fnd>:
				state_mod = 0;
			}
		}
		
		fp_clock[state_mod]();
	}
     21c:	8f ef       	ldi	r24, 0xFF	; 255
     21e:	84 bb       	out	0x14, r24	; 20
     220:	e1 e6       	ldi	r30, 0x61	; 97
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	80 6f       	ori	r24, 0xF0	; 240
     228:	80 83       	st	Z, r24
     22a:	15 ba       	out	0x15, r1	; 21
     22c:	08 95       	ret

0000022e <fnd_display>:
}



void fnd_display(int *run_state)
{
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	2f 97       	sbiw	r28, 0x0f	; 15
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
     242:	ac 01       	movw	r20, r24
						  // 0      1      2      3      4      5      6      7      8      9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f
     244:	9f e0       	ldi	r25, 0x0F	; 15
     246:	e6 e1       	ldi	r30, 0x16	; 22
     248:	f1 e0       	ldi	r31, 0x01	; 1
     24a:	de 01       	movw	r26, r28
     24c:	11 96       	adiw	r26, 0x01	; 1
     24e:	01 90       	ld	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	9a 95       	dec	r25
     254:	e1 f7       	brne	.-8      	; 0x24e <fnd_display+0x20>
		, ~0x82, ~0xc7, ~0xe0, ~0x83
		};

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     256:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <digit_select.1776>
     25a:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <digit_select.1776+0x1>
     25e:	21 30       	cpi	r18, 0x01	; 1
     260:	31 05       	cpc	r19, r1
     262:	31 f1       	breq	.+76     	; 0x2b0 <fnd_display+0x82>
     264:	1c f4       	brge	.+6      	; 0x26c <fnd_display+0x3e>
     266:	23 2b       	or	r18, r19
     268:	51 f0       	breq	.+20     	; 0x27e <fnd_display+0x50>
     26a:	8a c0       	rjmp	.+276    	; 0x380 <fnd_display+0x152>
     26c:	22 30       	cpi	r18, 0x02	; 2
     26e:	31 05       	cpc	r19, r1
     270:	09 f4       	brne	.+2      	; 0x274 <fnd_display+0x46>
     272:	3e c0       	rjmp	.+124    	; 0x2f0 <fnd_display+0xc2>
     274:	23 30       	cpi	r18, 0x03	; 3
     276:	31 05       	cpc	r19, r1
     278:	09 f4       	brne	.+2      	; 0x27c <fnd_display+0x4e>
     27a:	73 c0       	rjmp	.+230    	; 0x362 <fnd_display+0x134>
     27c:	81 c0       	rjmp	.+258    	; 0x380 <fnd_display+0x152>
	{
		case 0 :

			FND_DIGIT_PORT = ~0x80;
     27e:	8f e7       	ldi	r24, 0x7F	; 127
     280:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     284:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <sec_count>
     288:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <sec_count+0x1>
     28c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sec_count+0x2>
     290:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sec_count+0x3>
     294:	2a e0       	ldi	r18, 0x0A	; 10
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	51 d7       	rcall	.+3746   	; 0x1140 <__udivmodsi4>
     29e:	e1 e0       	ldi	r30, 0x01	; 1
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	ec 0f       	add	r30, r28
     2a4:	fd 1f       	adc	r31, r29
     2a6:	e6 0f       	add	r30, r22
     2a8:	f7 1f       	adc	r31, r23
     2aa:	80 81       	ld	r24, Z
     2ac:	85 bb       	out	0x15, r24	; 21
		break;
     2ae:	68 c0       	rjmp	.+208    	; 0x380 <fnd_display+0x152>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     2b0:	8f eb       	ldi	r24, 0xBF	; 191
     2b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     2b6:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <sec_count>
     2ba:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <sec_count+0x1>
     2be:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sec_count+0x2>
     2c2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sec_count+0x3>
     2c6:	2a e0       	ldi	r18, 0x0A	; 10
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	38 d7       	rcall	.+3696   	; 0x1140 <__udivmodsi4>
     2d0:	ca 01       	movw	r24, r20
     2d2:	b9 01       	movw	r22, r18
     2d4:	26 e0       	ldi	r18, 0x06	; 6
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	50 e0       	ldi	r21, 0x00	; 0
     2dc:	31 d7       	rcall	.+3682   	; 0x1140 <__udivmodsi4>
     2de:	e1 e0       	ldi	r30, 0x01	; 1
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	ec 0f       	add	r30, r28
     2e4:	fd 1f       	adc	r31, r29
     2e6:	e6 0f       	add	r30, r22
     2e8:	f7 1f       	adc	r31, r23
     2ea:	80 81       	ld	r24, Z
     2ec:	85 bb       	out	0x15, r24	; 21
		break;
     2ee:	48 c0       	rjmp	.+144    	; 0x380 <fnd_display+0x152>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     2f0:	8f ed       	ldi	r24, 0xDF	; 223
     2f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		if (sec_count % 2 == 1)
     2f6:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <sec_count>
     2fa:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <sec_count+0x1>
     2fe:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sec_count+0x2>
     302:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sec_count+0x3>
     306:	60 ff       	sbrs	r22, 0
     308:	17 c0       	rjmp	.+46     	; 0x338 <fnd_display+0x10a>
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     30a:	2c e3       	ldi	r18, 0x3C	; 60
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	16 d7       	rcall	.+3628   	; 0x1140 <__udivmodsi4>
     314:	ca 01       	movw	r24, r20
     316:	b9 01       	movw	r22, r18
     318:	2a e0       	ldi	r18, 0x0A	; 10
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	40 e0       	ldi	r20, 0x00	; 0
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	0f d7       	rcall	.+3614   	; 0x1140 <__udivmodsi4>
     322:	e1 e0       	ldi	r30, 0x01	; 1
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	ec 0f       	add	r30, r28
     328:	fd 1f       	adc	r31, r29
     32a:	e6 0f       	add	r30, r22
     32c:	f7 1f       	adc	r31, r23
     32e:	90 81       	ld	r25, Z
     330:	8b 85       	ldd	r24, Y+11	; 0x0b
     332:	89 2b       	or	r24, r25
     334:	85 bb       	out	0x15, r24	; 21
     336:	24 c0       	rjmp	.+72     	; 0x380 <fnd_display+0x152>
		else
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10]; // 1단위 분
     338:	2c e3       	ldi	r18, 0x3C	; 60
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	ff d6       	rcall	.+3582   	; 0x1140 <__udivmodsi4>
     342:	ca 01       	movw	r24, r20
     344:	b9 01       	movw	r22, r18
     346:	2a e0       	ldi	r18, 0x0A	; 10
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	f8 d6       	rcall	.+3568   	; 0x1140 <__udivmodsi4>
     350:	e1 e0       	ldi	r30, 0x01	; 1
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	ec 0f       	add	r30, r28
     356:	fd 1f       	adc	r31, r29
     358:	e6 0f       	add	r30, r22
     35a:	f7 1f       	adc	r31, r23
     35c:	80 81       	ld	r24, Z
     35e:	85 bb       	out	0x15, r24	; 21
     360:	0f c0       	rjmp	.+30     	; 0x380 <fnd_display+0x152>
     362:	8f ee       	ldi	r24, 0xEF	; 239
		break;

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     364:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     368:	da 01       	movw	r26, r20
		
		FND_DATA_PORT = fnd_font[*run_state+10]; // 10단위 분
     36a:	ed 91       	ld	r30, X+
     36c:	fc 91       	ld	r31, X
     36e:	3a 96       	adiw	r30, 0x0a	; 10
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	8c 0f       	add	r24, r28
     376:	9d 1f       	adc	r25, r29
     378:	e8 0f       	add	r30, r24
     37a:	f9 1f       	adc	r31, r25
     37c:	80 81       	ld	r24, Z
     37e:	85 bb       	out	0x15, r24	; 21
     380:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <digit_select.1776>
		break;
	}
	digit_select++;
     384:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <digit_select.1776+0x1>
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	83 70       	andi	r24, 0x03	; 3
	digit_select %= 4; //다음 표시할 자리수 선택
     38c:	90 78       	andi	r25, 0x80	; 128
     38e:	99 23       	and	r25, r25
     390:	24 f4       	brge	.+8      	; 0x39a <fnd_display+0x16c>
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	8c 6f       	ori	r24, 0xFC	; 252
     396:	9f 6f       	ori	r25, 0xFF	; 255
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <digit_select.1776+0x1>
     39e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <digit_select.1776>
     3a2:	2f 96       	adiw	r28, 0x0f	; 15
}
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <init_led>:

void init_led(void);

void init_led(void)
{
	AUTO_RUN_LED_PORT_DDR |= 1 << AUTO_RUN_LED_PIN;
     3b4:	e4 e6       	ldi	r30, 0x64	; 100
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	88 60       	ori	r24, 0x08	; 8
     3bc:	80 83       	st	Z, r24
     3be:	08 95       	ret

000003c0 <auto_mode>:
{
	if (button0_state)
	{
		/// 자율주행 코드
	}
	func_state = MANUAL_MODE;
     3c0:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <func_state+0x1>
     3c4:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <func_state>
     3c8:	08 95       	ret

000003ca <manual_mode>:
	//sei();    // 전역적(대문)으로 interrupt 허용
}

void manual_mode(void)
{
	switch (bt_data)
     3ca:	e0 91 ba 07 	lds	r30, 0x07BA	; 0x8007ba <bt_data>
     3ce:	8e 2f       	mov	r24, r30
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	fc 01       	movw	r30, r24
     3d4:	e2 54       	subi	r30, 0x42	; 66
     3d6:	f1 09       	sbc	r31, r1
     3d8:	e2 33       	cpi	r30, 0x32	; 50
     3da:	f1 05       	cpc	r31, r1
     3dc:	a0 f4       	brcc	.+40     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3de:	ea 5b       	subi	r30, 0xBA	; 186
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	d0 c6       	rjmp	.+3488   	; 0x1184 <__tablejump2__>
	{
		case 'F':
		case 'f':
			forward(500);
     3e4:	84 ef       	ldi	r24, 0xF4	; 244
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	c0 d0       	rcall	.+384    	; 0x56a <forward>
			break;
     3ea:	0d c0       	rjmp	.+26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			
		case 'B':
		case 'b':
			backward(500);
     3ec:	84 ef       	ldi	r24, 0xF4	; 244
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	ca d0       	rcall	.+404    	; 0x586 <backward>
			break;
			
		case 'L':
		case 'l':
			turn_left(700);
     3f2:	09 c0       	rjmp	.+18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3f4:	8c eb       	ldi	r24, 0xBC	; 188
     3f6:	92 e0       	ldi	r25, 0x02	; 2
			break;
     3f8:	d4 d0       	rcall	.+424    	; 0x5a2 <turn_left>
			
		case 'R':
		case 'r':
			turn_right(700);
     3fa:	05 c0       	rjmp	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fc:	8c eb       	ldi	r24, 0xBC	; 188
     3fe:	92 e0       	ldi	r25, 0x02	; 2
			break;
     400:	de d0       	rcall	.+444    	; 0x5be <turn_right>
			
		case 'S':
		case 's':
			stop();
     402:	01 c0       	rjmp	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	ea d0       	rcall	.+468    	; 0x5da <stop>
			break;
			
		default:
			break;
	}
	func_state = DISTANCE_CHECK;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <func_state+0x1>
     40e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <func_state>
     412:	08 95       	ret

00000414 <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     414:	1f 92       	push	r1
     416:	0f 92       	push	r0
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	0f 92       	push	r0
     41c:	11 24       	eor	r1, r1
     41e:	8f 93       	push	r24
     420:	9f 93       	push	r25
     422:	af 93       	push	r26
     424:	bf 93       	push	r27
	TCNT0 = 6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
     426:	86 e0       	ldi	r24, 0x06	; 6
     428:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
     42a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <msec_count>
     42e:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <msec_count+0x1>
     432:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <msec_count+0x2>
     436:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <msec_count+0x3>
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	a1 1d       	adc	r26, r1
     43e:	b1 1d       	adc	r27, r1
     440:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <msec_count>
     444:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <msec_count+0x1>
     448:	a0 93 6e 01 	sts	0x016E, r26	; 0x80016e <msec_count+0x2>
     44c:	b0 93 6f 01 	sts	0x016F, r27	; 0x80016f <msec_count+0x3>
	fnd_refreshrate++;   // fnd 잔상효과 유지 하기 위한 timer 2ms
     450:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <fnd_refreshrate>
     454:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <fnd_refreshrate+0x1>
     458:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <fnd_refreshrate+0x2>
     45c:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <fnd_refreshrate+0x3>
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	a1 1d       	adc	r26, r1
     464:	b1 1d       	adc	r27, r1
     466:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <fnd_refreshrate>
     46a:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <fnd_refreshrate+0x1>
     46e:	a0 93 6a 01 	sts	0x016A, r26	; 0x80016a <fnd_refreshrate+0x2>
     472:	b0 93 6b 01 	sts	0x016B, r27	; 0x80016b <fnd_refreshrate+0x3>
	ultrasonic_check_timer++;
     476:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ultrasonic_check_timer>
     47a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <ultrasonic_check_timer+0x1>
     47e:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <ultrasonic_check_timer+0x2>
     482:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <ultrasonic_check_timer+0x3>
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	a1 1d       	adc	r26, r1
     48a:	b1 1d       	adc	r27, r1
     48c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <ultrasonic_check_timer>
     490:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <ultrasonic_check_timer+0x1>
     494:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <ultrasonic_check_timer+0x2>
     498:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <ultrasonic_check_timer+0x3>
	read_distance++;
     49c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <read_distance>
     4a0:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <read_distance+0x1>
     4a4:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <read_distance+0x2>
     4a8:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <read_distance+0x3>
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	a1 1d       	adc	r26, r1
     4b0:	b1 1d       	adc	r27, r1
     4b2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <read_distance>
     4b6:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <read_distance+0x1>
     4ba:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <read_distance+0x2>
     4be:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <read_distance+0x3>
}
     4c2:	bf 91       	pop	r27
     4c4:	af 91       	pop	r26
     4c6:	9f 91       	pop	r25
     4c8:	8f 91       	pop	r24
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	1f 90       	pop	r1
     4d2:	18 95       	reti

000004d4 <init_timer0>:
	// 1. 분주비 계산
	// 16000000HZ/64 ==> 250,000HZ
	// 2. T(주기) 1가 잡아 먹는 시간 : 1/f = 1/250,000 ==> 0.000004sec(4us) : 0.004ms
	// 3. 8bit timer OV(OVflow) : 0.004ms x 256 = 0.001024sec --> 1.024ms
	// 그러면 정확히 1ms 를 재고 싶다면 0.004ms x 250개 = 0.001sec ==> 1ms
	TCNT0 = 6;   // TCNT : 0~256 ==> 1ms마다 TIMER0_OVF_vect로 진입한다.
     4d4:	86 e0       	ldi	r24, 0x06	; 6
     4d6:	82 bf       	out	0x32, r24	; 50
	// TCNT0 = 6로 설정을 한이유: 6~256 : 250개를 count(정확히 1MS를맞추기 위해서)
	//
	// 4 분주비를 설정 (250khz)
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     4d8:	83 b7       	in	r24, 0x33	; 51
     4da:	84 60       	ori	r24, 0x04	; 4
     4dc:	83 bf       	out	0x33, r24	; 51
	// 5. TIMER0 OVERFLOW를 허용(enable)
	TIMSK |= 1 << TOIE0;  // TIMSK |= 0x01;
     4de:	87 b7       	in	r24, 0x37	; 55
     4e0:	81 60       	ori	r24, 0x01	; 1
     4e2:	87 bf       	out	0x37, r24	; 55
     4e4:	08 95       	ret

000004e6 <main>:
	read_distance++;
}

int main(void)
{
	init_led();
     4e6:	66 df       	rcall	.-308    	; 0x3b4 <init_led>
	init_fnd();
     4e8:	99 de       	rcall	.-718    	; 0x21c <init_fnd>
	init_button();
     4ea:	21 de       	rcall	.-958    	; 0x12e <init_button>
	init_timer0();
     4ec:	f3 df       	rcall	.-26     	; 0x4d4 <init_timer0>
	init_uart0();
     4ee:	a7 d2       	rcall	.+1358   	; 0xa3e <init_uart0>
	init_uart1();
     4f0:	e8 d2       	rcall	.+1488   	; 0xac2 <init_uart1>
     4f2:	16 d0       	rcall	.+44     	; 0x520 <init_n289n>
	init_n289n();
     4f4:	26 d0       	rcall	.+76     	; 0x542 <init_timer1_pwm>
     4f6:	e1 d3       	rcall	.+1986   	; 0xcba <init_ultrasonic>
	init_timer1_pwm();
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	91 e0       	ldi	r25, 0x01	; 1
	init_ultrasonic(); // timer 3
     4fc:	90 93 be 07 	sts	0x07BE, r25	; 0x8007be <__iob+0x3>
	

	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     500:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <__iob+0x2>
     504:	78 94       	sei
     506:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <func_state>
     50a:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <func_state+0x1>
	
	sei();     // 전역적으로 interrupt 허용

	while (1)
	{
		pfunc[func_state] ();
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	e2 5f       	subi	r30, 0xF2	; 242
     514:	fe 4f       	sbci	r31, 0xFE	; 254
     516:	01 90       	ld	r0, Z+
     518:	f0 81       	ld	r31, Z
     51a:	e0 2d       	mov	r30, r0
     51c:	09 95       	icall
     51e:	f3 cf       	rjmp	.-26     	; 0x506 <main+0x20>

00000520 <init_n289n>:
	   1         1   : STOP
*/

void init_n289n(void)
{
	MOTOR_PWM_DDR |= 1 << MOTOR_LEFT_PORT_DDR | 1 << MOTOR_RIGHT_PORT_DDR; // DDR설정
     520:	87 b3       	in	r24, 0x17	; 23
     522:	80 66       	ori	r24, 0x60	; 96
     524:	87 bb       	out	0x17, r24	; 23
	MOTOR_DRIVER_DIRECTION_PORT_DDR |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3; // PF1234 출력으로 설정
     526:	e1 e6       	ldi	r30, 0x61	; 97
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	80 81       	ld	r24, Z
     52c:	8f 60       	ori	r24, 0x0F	; 15
     52e:	80 83       	st	Z, r24
	
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     530:	e2 e6       	ldi	r30, 0x62	; 98
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	80 81       	ld	r24, Z
     536:	80 7f       	andi	r24, 0xF0	; 240
     538:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 2; // 자동차를 전진모드로 
     53a:	80 81       	ld	r24, Z
     53c:	85 60       	ori	r24, 0x05	; 5
     53e:	80 83       	st	Z, r24
     540:	08 95       	ret

00000542 <init_timer1_pwm>:
	// 분주비 : 64 16000000HZ/64 ==> 250000HZ(250kHZ)
	// T=1/f 1/250000HZ ==> 0.000004sec (4us)
	// 250000HZ에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//              127                             : 0.5ms
	//              0x3ff(1023) --> 4ms
	TCCR1B |= 1 << CS11 | 1 << CS10;   // 분주비 64  P318 표14-1
     542:	8e b5       	in	r24, 0x2e	; 46
     544:	83 60       	ori	r24, 0x03	; 3
     546:	8e bd       	out	0x2e, r24	; 46
	
	// 모드 14: 고속 PWM timer1사용  (P327 표14-5)
	TCCR1A |= 1 << WGM11;   // TOP --> ICR1에 설정
     548:	8f b5       	in	r24, 0x2f	; 47
     54a:	82 60       	ori	r24, 0x02	; 2
     54c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM13 | 1 << WGM12;
     54e:	8e b5       	in	r24, 0x2e	; 46
     550:	88 61       	ori	r24, 0x18	; 24
     552:	8e bd       	out	0x2e, r24	; 46
	
	// 비반전모드 top: ICR1 비교일치값(PWM) 지정 : OCR1A, OCR1B P350 표15-7
	// 비교일치 발생시 OCR1A, OCR1B의 출력 핀은 LOW로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR1A |= 1 << COM1A1;
     554:	8f b5       	in	r24, 0x2f	; 47
     556:	80 68       	ori	r24, 0x80	; 128
     558:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= 1 << COM1B1;
     55a:	8f b5       	in	r24, 0x2f	; 47
     55c:	80 62       	ori	r24, 0x20	; 32
     55e:	8f bd       	out	0x2f, r24	; 47

	ICR1 = 0x3ff;  // 1023 ==> 4ms TOP : PWM 값
     560:	8f ef       	ldi	r24, 0xFF	; 255
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	97 bd       	out	0x27, r25	; 39
     566:	86 bd       	out	0x26, r24	; 38
     568:	08 95       	ret

0000056a <forward>:
}

///////////////////////////////           수동모드          //////////////////////////////////////
void forward(int speed)
{
     56a:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     56c:	e2 e6       	ldi	r30, 0x62	; 98
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	90 81       	ld	r25, Z
     572:	90 7f       	andi	r25, 0xF0	; 240
     574:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     576:	90 81       	ld	r25, Z
     578:	95 60       	ori	r25, 0x05	; 5
     57a:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     57c:	3b bd       	out	0x2b, r19	; 43
     57e:	2a bd       	out	0x2a, r18	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     580:	39 bd       	out	0x29, r19	; 41
     582:	28 bd       	out	0x28, r18	; 40
     584:	08 95       	ret

00000586 <backward>:
}

void backward(int speed)
{
     586:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     588:	e2 e6       	ldi	r30, 0x62	; 98
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	90 81       	ld	r25, Z
     58e:	90 7f       	andi	r25, 0xF0	; 240
     590:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 3 | 1 << 1;  // 1010 후진 모드
     592:	90 81       	ld	r25, Z
     594:	9a 60       	ori	r25, 0x0A	; 10
     596:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     598:	3b bd       	out	0x2b, r19	; 43
     59a:	2a bd       	out	0x2a, r18	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     59c:	39 bd       	out	0x29, r19	; 41
     59e:	28 bd       	out	0x28, r18	; 40
     5a0:	08 95       	ret

000005a2 <turn_left>:
}

void turn_left(int speed)
{
     5a2:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     5a4:	e2 e6       	ldi	r30, 0x62	; 98
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	90 81       	ld	r25, Z
     5aa:	90 7f       	andi	r25, 0xF0	; 240
     5ac:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     5ae:	90 81       	ld	r25, Z
     5b0:	95 60       	ori	r25, 0x05	; 5
     5b2:	90 83       	st	Z, r25
	
	OCR1A = 0;  // PB5 PWM 출력 port left
     5b4:	1b bc       	out	0x2b, r1	; 43
     5b6:	1a bc       	out	0x2a, r1	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     5b8:	39 bd       	out	0x29, r19	; 41
     5ba:	28 bd       	out	0x28, r18	; 40
     5bc:	08 95       	ret

000005be <turn_right>:
}

void turn_right(int speed)
{
     5be:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     5c0:	e2 e6       	ldi	r30, 0x62	; 98
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	90 81       	ld	r25, Z
     5c6:	90 7f       	andi	r25, 0xF0	; 240
     5c8:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     5ca:	90 81       	ld	r25, Z
     5cc:	95 60       	ori	r25, 0x05	; 5
     5ce:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     5d0:	3b bd       	out	0x2b, r19	; 43
     5d2:	2a bd       	out	0x2a, r18	; 42
	OCR1B = 0;  // PB6 PWM 출력 port right
     5d4:	19 bc       	out	0x29, r1	; 41
     5d6:	18 bc       	out	0x28, r1	; 40
     5d8:	08 95       	ret

000005da <stop>:
}

void stop(void)
{
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     5da:	e2 e6       	ldi	r30, 0x62	; 98
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	80 7f       	andi	r24, 0xF0	; 240
     5e2:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3;  // stop 모드로 설정
     5e4:	80 81       	ld	r24, Z
     5e6:	8f 60       	ori	r24, 0x0F	; 15
     5e8:	80 83       	st	Z, r24
	
	OCR1A = 0;  // PB5 PWM 출력 port left
     5ea:	1b bc       	out	0x2b, r1	; 43
     5ec:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;  // PB6 PWM 출력 port right
     5ee:	19 bc       	out	0x29, r1	; 41
     5f0:	18 bc       	out	0x28, r1	; 40
     5f2:	08 95       	ret

000005f4 <set_car_location>:
	}
#endif
}

void set_car_location(int *run_state)
{
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <set_car_location+0xa>
     5fe:	00 d0       	rcall	.+0      	; 0x600 <set_car_location+0xc>
     600:	00 d0       	rcall	.+0      	; 0x602 <set_car_location+0xe>
     602:	cd b7       	in	r28, 0x3d	; 61
     604:	de b7       	in	r29, 0x3e	; 62
     606:	9e 83       	std	Y+6, r25	; 0x06
     608:	8d 83       	std	Y+5, r24	; 0x05
	int set_comp = 1;
     60a:	01 e0       	ldi	r16, 0x01	; 1
     60c:	10 e0       	ldi	r17, 0x00	; 0
	while (set_comp)
     60e:	9e c0       	rjmp	.+316    	; 0x74c <set_car_location+0x158>
	{
		if (msec_count >= 1000)
     610:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <msec_count>
     614:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <msec_count+0x1>
     618:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <msec_count+0x2>
     61c:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <msec_count+0x3>
     620:	88 3e       	cpi	r24, 0xE8	; 232
     622:	93 40       	sbci	r25, 0x03	; 3
     624:	a1 05       	cpc	r26, r1
     626:	b1 05       	cpc	r27, r1
     628:	d8 f0       	brcs	.+54     	; 0x660 <set_car_location+0x6c>
		{
			msec_count = 0;
     62a:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <msec_count>
     62e:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <msec_count+0x1>
     632:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <msec_count+0x2>
     636:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <msec_count+0x3>
			sec_count--;
     63a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <sec_count>
     63e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <sec_count+0x1>
     642:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <sec_count+0x2>
     646:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <sec_count+0x3>
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	a1 09       	sbc	r26, r1
     64e:	b1 09       	sbc	r27, r1
     650:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <sec_count>
     654:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <sec_count+0x1>
     658:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <sec_count+0x2>
     65c:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <sec_count+0x3>
		} // 1초씩 감소
		
		ultrasonic_trigger();
     660:	5c d3       	rcall	.+1720   	; 0xd1a <ultrasonic_trigger>
		volatile int l_gap = ultrasonic_right_distance - ultrasonic_left_distance; // 왼쪽에 가까울 때
     662:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_right_distance>
     666:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     66a:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <ultrasonic_left_distance>
     66e:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     672:	82 1b       	sub	r24, r18
     674:	93 0b       	sbc	r25, r19
     676:	9c 83       	std	Y+4, r25	; 0x04
     678:	8b 83       	std	Y+3, r24	; 0x03
		volatile int r_gap = ultrasonic_left_distance - ultrasonic_right_distance; // 오른쪽에 가까울 때
     67a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_left_distance>
     67e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     682:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <ultrasonic_right_distance>
     686:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     68a:	82 1b       	sub	r24, r18
     68c:	93 0b       	sbc	r25, r19
     68e:	9a 83       	std	Y+2, r25	; 0x02
     690:	89 83       	std	Y+1, r24	; 0x01
		
		if (r_gap >= 4)
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	04 97       	sbiw	r24, 0x04	; 4
     698:	44 f0       	brlt	.+16     	; 0x6aa <set_car_location+0xb6>
		{
			run_state = TURN_LEFT;
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	9e 83       	std	Y+6, r25	; 0x06
     6a0:	8d 83       	std	Y+5, r24	; 0x05
			turn_left(400);
     6a2:	80 e9       	ldi	r24, 0x90	; 144
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	7d df       	rcall	.-262    	; 0x5a2 <turn_left>
     6a8:	3a c0       	rjmp	.+116    	; 0x71e <set_car_location+0x12a>
		}
		
		else if(l_gap >= 4)
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	9c 81       	ldd	r25, Y+4	; 0x04
     6ae:	04 97       	sbiw	r24, 0x04	; 4
     6b0:	44 f0       	brlt	.+16     	; 0x6c2 <set_car_location+0xce>
		{
			run_state = TURN_RIGHT;
     6b2:	83 e0       	ldi	r24, 0x03	; 3
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	9e 83       	std	Y+6, r25	; 0x06
     6b8:	8d 83       	std	Y+5, r24	; 0x05
			turn_right(400);
     6ba:	80 e9       	ldi	r24, 0x90	; 144
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	7f df       	rcall	.-258    	; 0x5be <turn_right>
     6c0:	2e c0       	rjmp	.+92     	; 0x71e <set_car_location+0x12a>
		}
		
		else if (l_gap < 3 && r_gap < 3)
     6c2:	8b 81       	ldd	r24, Y+3	; 0x03
     6c4:	9c 81       	ldd	r25, Y+4	; 0x04
     6c6:	03 97       	sbiw	r24, 0x03	; 3
     6c8:	24 f4       	brge	.+8      	; 0x6d2 <set_car_location+0xde>
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	03 97       	sbiw	r24, 0x03	; 3
     6d0:	24 f1       	brlt	.+72     	; 0x71a <set_car_location+0x126>
		{
			set_comp = 0;
		}
		
		else if (ultrasonic_left_distance < 7)
     6d2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_left_distance>
     6d6:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     6da:	07 97       	sbiw	r24, 0x07	; 7
     6dc:	44 f4       	brge	.+16     	; 0x6ee <set_car_location+0xfa>
		{
			run_state = TURN_RIGHT;
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	9e 83       	std	Y+6, r25	; 0x06
			backward(400);
     6e4:	8d 83       	std	Y+5, r24	; 0x05
     6e6:	80 e9       	ldi	r24, 0x90	; 144
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	4d df       	rcall	.-358    	; 0x586 <backward>
     6ec:	18 c0       	rjmp	.+48     	; 0x71e <set_car_location+0x12a>
		}
		
		else if (ultrasonic_right_distance < 7)
     6ee:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_right_distance>
     6f2:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     6f6:	07 97       	sbiw	r24, 0x07	; 7
     6f8:	44 f4       	brge	.+16     	; 0x70a <set_car_location+0x116>
		{
			run_state = TURN_LEFT;
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	9e 83       	std	Y+6, r25	; 0x06
			backward(400);
     700:	8d 83       	std	Y+5, r24	; 0x05
     702:	80 e9       	ldi	r24, 0x90	; 144
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	3f df       	rcall	.-386    	; 0x586 <backward>
     708:	0a c0       	rjmp	.+20     	; 0x71e <set_car_location+0x12a>
		}
		
		else
		{
			run_state = BACKWARD;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	9e 83       	std	Y+6, r25	; 0x06
			backward(400);
     710:	8d 83       	std	Y+5, r24	; 0x05
     712:	80 e9       	ldi	r24, 0x90	; 144
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	37 df       	rcall	.-402    	; 0x586 <backward>
     718:	02 c0       	rjmp	.+4      	; 0x71e <set_car_location+0x12a>
			turn_right(400);
		}
		
		else if (l_gap < 3 && r_gap < 3)
		{
			set_comp = 0;
     71a:	00 e0       	ldi	r16, 0x00	; 0
     71c:	10 e0       	ldi	r17, 0x00	; 0
		{
			run_state = BACKWARD;
			backward(400);
		}
		
		if (fnd_refreshrate >= 2)
     71e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <fnd_refreshrate>
     722:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <fnd_refreshrate+0x1>
     726:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <fnd_refreshrate+0x2>
     72a:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <fnd_refreshrate+0x3>
     72e:	02 97       	sbiw	r24, 0x02	; 2
     730:	a1 05       	cpc	r26, r1
     732:	b1 05       	cpc	r27, r1
     734:	58 f0       	brcs	.+22     	; 0x74c <set_car_location+0x158>
		{
			fnd_refreshrate = 0;
     736:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <fnd_refreshrate>
     73a:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <fnd_refreshrate+0x1>
     73e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <fnd_refreshrate+0x2>
     742:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <fnd_refreshrate+0x3>
			fnd_display(&run_state);
     746:	ce 01       	movw	r24, r28
     748:	05 96       	adiw	r24, 0x05	; 5
     74a:	71 dd       	rcall	.-1310   	; 0x22e <fnd_display>
}

void set_car_location(int *run_state)
{
	int set_comp = 1;
	while (set_comp)
     74c:	01 15       	cp	r16, r1
     74e:	11 05       	cpc	r17, r1
     750:	09 f0       	breq	.+2      	; 0x754 <set_car_location+0x160>
     752:	5e cf       	rjmp	.-324    	; 0x610 <set_car_location+0x1c>
		{
			fnd_refreshrate = 0;
			fnd_display(&run_state);
		}
	}
     754:	26 96       	adiw	r28, 0x06	; 6
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	08 95       	ret

0000076a <auto_start>:
}
////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////         자동모드            //////////////////////////////////
void auto_start(void)
{
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	00 d0       	rcall	.+0      	; 0x770 <auto_start+0x6>
     770:	00 d0       	rcall	.+0      	; 0x772 <auto_start+0x8>
     772:	00 d0       	rcall	.+0      	; 0x774 <auto_start+0xa>
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
	sec_count = 4;
     778:	84 e0       	ldi	r24, 0x04	; 4
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	a0 e0       	ldi	r26, 0x00	; 0
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <sec_count>
     784:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <sec_count+0x1>
     788:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <sec_count+0x2>
     78c:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <sec_count+0x3>
	while (sec_count > 0)
     790:	35 c0       	rjmp	.+106    	; 0x7fc <auto_start+0x92>
	{
		if (msec_count >= 1000)
     792:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <msec_count>
     796:	50 91 6d 01 	lds	r21, 0x016D	; 0x80016d <msec_count+0x1>
     79a:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <msec_count+0x2>
     79e:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <msec_count+0x3>
     7a2:	48 3e       	cpi	r20, 0xE8	; 232
     7a4:	53 40       	sbci	r21, 0x03	; 3
     7a6:	61 05       	cpc	r22, r1
     7a8:	71 05       	cpc	r23, r1
     7aa:	98 f0       	brcs	.+38     	; 0x7d2 <auto_start+0x68>
		{
			msec_count = 0;
     7ac:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <msec_count>
     7b0:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <msec_count+0x1>
     7b4:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <msec_count+0x2>
     7b8:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <msec_count+0x3>
			sec_count--;
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	a1 09       	sbc	r26, r1
     7c0:	b1 09       	sbc	r27, r1
     7c2:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <sec_count>
     7c6:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <sec_count+0x1>
     7ca:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <sec_count+0x2>
     7ce:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <sec_count+0x3>
		} // 1초씩 감소
		if (fnd_refreshrate >= 2)
     7d2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <fnd_refreshrate>
     7d6:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <fnd_refreshrate+0x1>
     7da:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <fnd_refreshrate+0x2>
     7de:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <fnd_refreshrate+0x3>
     7e2:	02 97       	sbiw	r24, 0x02	; 2
     7e4:	a1 05       	cpc	r26, r1
     7e6:	b1 05       	cpc	r27, r1
     7e8:	48 f0       	brcs	.+18     	; 0x7fc <auto_start+0x92>
		{
			fnd_refreshrate = 0;
     7ea:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <fnd_refreshrate>
     7ee:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <fnd_refreshrate+0x1>
     7f2:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <fnd_refreshrate+0x2>
     7f6:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <fnd_refreshrate+0x3>
			fnd_display();
     7fa:	19 dd       	rcall	.-1486   	; 0x22e <fnd_display>

///////////////////////////////////////         자동모드            //////////////////////////////////
void auto_start(void)
{
	sec_count = 4;
	while (sec_count > 0)
     7fc:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <sec_count>
     800:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <sec_count+0x1>
     804:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <sec_count+0x2>
     808:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <sec_count+0x3>
     80c:	00 97       	sbiw	r24, 0x00	; 0
     80e:	a1 05       	cpc	r26, r1
     810:	b1 05       	cpc	r27, r1
     812:	09 f0       	breq	.+2      	; 0x816 <auto_start+0xac>
     814:	be cf       	rjmp	.-132    	; 0x792 <auto_start+0x28>
			fnd_display();
		}
	}

	int run_state;	
	sec_count = 120;
     816:	88 e7       	ldi	r24, 0x78	; 120
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e0       	ldi	r26, 0x00	; 0
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <sec_count>
     822:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <sec_count+0x1>
     826:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <sec_count+0x2>
     82a:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <sec_count+0x3>
	while(sec_count > 0)
	{
		ultrasonic_trigger();
     82e:	73 c0       	rjmp	.+230    	; 0x916 <auto_start+0x1ac>
     830:	74 d2       	rcall	.+1256   	; 0xd1a <ultrasonic_trigger>
		volatile int gap1 = ultrasonic_right_distance - ultrasonic_left_distance;
     832:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_right_distance>
     836:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     83a:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <ultrasonic_left_distance>
     83e:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     842:	82 1b       	sub	r24, r18
     844:	93 0b       	sbc	r25, r19
     846:	9e 83       	std	Y+6, r25	; 0x06
     848:	8d 83       	std	Y+5, r24	; 0x05
		volatile int gap2 = ultrasonic_left_distance - ultrasonic_right_distance;
     84a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_left_distance>
     84e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     852:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <ultrasonic_right_distance>
     856:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     85a:	82 1b       	sub	r24, r18
     85c:	93 0b       	sbc	r25, r19
     85e:	9c 83       	std	Y+4, r25	; 0x04
     860:	8b 83       	std	Y+3, r24	; 0x03


////////////new//////////////////////////
		if (msec_count >= 1000)
     862:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <msec_count>
     866:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <msec_count+0x1>
     86a:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <msec_count+0x2>
     86e:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <msec_count+0x3>
     872:	88 3e       	cpi	r24, 0xE8	; 232
     874:	93 40       	sbci	r25, 0x03	; 3
     876:	a1 05       	cpc	r26, r1
     878:	b1 05       	cpc	r27, r1
     87a:	d8 f0       	brcs	.+54     	; 0x8b2 <auto_start+0x148>
		{
			msec_count = 0;
     87c:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <msec_count>
     880:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <msec_count+0x1>
     884:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <msec_count+0x2>
     888:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <msec_count+0x3>
			sec_count--;
     88c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <sec_count>
     890:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <sec_count+0x1>
     894:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <sec_count+0x2>
     898:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <sec_count+0x3>
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	a1 09       	sbc	r26, r1
     8a0:	b1 09       	sbc	r27, r1
     8a2:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <sec_count>
     8a6:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <sec_count+0x1>
     8aa:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <sec_count+0x2>
     8ae:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <sec_count+0x3>
		} // 1초씩 감소
		
		if (ultrasonic_center_distance >= 10)
     8b2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ultrasonic_center_distance>
     8b6:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ultrasonic_center_distance+0x1>
     8ba:	0a 97       	sbiw	r24, 0x0a	; 10
     8bc:	94 f0       	brlt	.+36     	; 0x8e2 <auto_start+0x178>
		{
			if (ultrasonic_left_distance >= 7 && ultrasonic_right_distance >= 7)
     8be:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_left_distance>
     8c2:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     8c6:	07 97       	sbiw	r24, 0x07	; 7
     8c8:	7c f0       	brlt	.+30     	; 0x8e8 <auto_start+0x17e>
     8ca:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_right_distance>
     8ce:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     8d2:	07 97       	sbiw	r24, 0x07	; 7
     8d4:	4c f0       	brlt	.+18     	; 0x8e8 <auto_start+0x17e>
			{
				run_state = FORWARD;
     8d6:	1a 82       	std	Y+2, r1	; 0x02
     8d8:	19 82       	std	Y+1, r1	; 0x01
				forward(400);
     8da:	80 e9       	ldi	r24, 0x90	; 144
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	45 de       	rcall	.-886    	; 0x56a <forward>
     8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <auto_start+0x17e>
			}
		}
		else
		{
			set_car_location(&run_state);
     8e2:	ce 01       	movw	r24, r28
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	86 de       	rcall	.-756    	; 0x5f4 <set_car_location>
     8e8:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <fnd_refreshrate>
		}
		
		if (fnd_refreshrate >= 2)
     8ec:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <fnd_refreshrate+0x1>
     8f0:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <fnd_refreshrate+0x2>
     8f4:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <fnd_refreshrate+0x3>
     8f8:	02 97       	sbiw	r24, 0x02	; 2
     8fa:	a1 05       	cpc	r26, r1
     8fc:	b1 05       	cpc	r27, r1
     8fe:	58 f0       	brcs	.+22     	; 0x916 <auto_start+0x1ac>
     900:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <fnd_refreshrate>
		{
			fnd_refreshrate = 0;
     904:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <fnd_refreshrate+0x1>
     908:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <fnd_refreshrate+0x2>
     90c:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <fnd_refreshrate+0x3>
			fnd_display(&run_state);
     910:	ce 01       	movw	r24, r28
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	8c dc       	rcall	.-1768   	; 0x22e <fnd_display>
     916:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <sec_count>
		}
	}

	int run_state;	
	sec_count = 120;
	while(sec_count > 0)
     91a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <sec_count+0x1>
     91e:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <sec_count+0x2>
     922:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <sec_count+0x3>
     926:	89 2b       	or	r24, r25
     928:	8a 2b       	or	r24, r26
     92a:	8b 2b       	or	r24, r27
     92c:	09 f0       	breq	.+2      	; 0x930 <auto_start+0x1c6>
     92e:	80 cf       	rjmp	.-256    	; 0x830 <auto_start+0xc6>
     930:	26 96       	adiw	r28, 0x06	; 6
		{
			forward(400);
		}
	}
#endif
}
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <__vector_18>:

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     942:	1f 92       	push	r1
     944:	0f 92       	push	r0
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	0f 92       	push	r0
     94a:	11 24       	eor	r1, r1
     94c:	0b b6       	in	r0, 0x3b	; 59
     94e:	0f 92       	push	r0
     950:	2f 93       	push	r18
     952:	3f 93       	push	r19
     954:	4f 93       	push	r20
     956:	5f 93       	push	r21
     958:	6f 93       	push	r22
     95a:	7f 93       	push	r23
     95c:	8f 93       	push	r24
     95e:	9f 93       	push	r25
     960:	af 93       	push	r26
     962:	bf 93       	push	r27
     964:	ef 93       	push	r30
     966:	ff 93       	push	r31
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	1f 92       	push	r1
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     972:	8c b1       	in	r24, 0x0c	; 12
     974:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	8d 30       	cpi	r24, 0x0D	; 13
     97a:	19 f0       	breq	.+6      	; 0x982 <__vector_18+0x40>
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	8a 30       	cpi	r24, 0x0A	; 10
     980:	61 f5       	brne	.+88     	; 0x9da <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     982:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <rear>
     986:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <rear+0x1>
     98a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <i.1878>
     98e:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <i.1878+0x1>
     992:	40 e5       	ldi	r20, 0x50	; 80
     994:	42 9f       	mul	r20, r18
     996:	f0 01       	movw	r30, r0
     998:	43 9f       	mul	r20, r19
     99a:	f0 0d       	add	r31, r0
     99c:	11 24       	eor	r1, r1
     99e:	e6 58       	subi	r30, 0x86	; 134
     9a0:	fe 4f       	sbci	r31, 0xFE	; 254
     9a2:	e8 0f       	add	r30, r24
     9a4:	f9 1f       	adc	r31, r25
     9a6:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     9a8:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <i.1878+0x1>
     9ac:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <i.1878>
		rear++;
     9b0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rear>
     9b4:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <rear+0x1>
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <rear+0x1>
     9be:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
     9c2:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rear>
     9c6:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <rear+0x1>
     9ca:	6a e0       	ldi	r22, 0x0A	; 10
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	a5 d3       	rcall	.+1866   	; 0x111a <__divmodhi4>
     9d0:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <rear+0x1>
     9d4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <rear>
     9d8:	1c c0       	rjmp	.+56     	; 0xa12 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
     9da:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <rear>
     9de:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <rear+0x1>
     9e2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <i.1878>
     9e6:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <i.1878+0x1>
     9ea:	9c 01       	movw	r18, r24
     9ec:	2f 5f       	subi	r18, 0xFF	; 255
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
     9f0:	30 93 71 01 	sts	0x0171, r19	; 0x800171 <i.1878+0x1>
     9f4:	20 93 70 01 	sts	0x0170, r18	; 0x800170 <i.1878>
     9f8:	49 81       	ldd	r20, Y+1	; 0x01
     9fa:	50 e5       	ldi	r21, 0x50	; 80
     9fc:	56 9f       	mul	r21, r22
     9fe:	90 01       	movw	r18, r0
     a00:	57 9f       	mul	r21, r23
     a02:	30 0d       	add	r19, r0
     a04:	11 24       	eor	r1, r1
     a06:	26 58       	subi	r18, 0x86	; 134
     a08:	3e 4f       	sbci	r19, 0xFE	; 254
     a0a:	f9 01       	movw	r30, r18
     a0c:	e8 0f       	add	r30, r24
     a0e:	f9 1f       	adc	r31, r25
     a10:	40 83       	st	Z, r20
	}
		  
}
     a12:	0f 90       	pop	r0
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	bf 91       	pop	r27
     a1e:	af 91       	pop	r26
     a20:	9f 91       	pop	r25
     a22:	8f 91       	pop	r24
     a24:	7f 91       	pop	r23
     a26:	6f 91       	pop	r22
     a28:	5f 91       	pop	r21
     a2a:	4f 91       	pop	r20
     a2c:	3f 91       	pop	r19
     a2e:	2f 91       	pop	r18
     a30:	0f 90       	pop	r0
     a32:	0b be       	out	0x3b, r0	; 59
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
     a3e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
     a42:	8f ec       	ldi	r24, 0xCF	; 207
     a44:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
     a46:	8b b1       	in	r24, 0x0b	; 11
     a48:	82 60       	ori	r24, 0x02	; 2
     a4a:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     a4c:	e5 e9       	ldi	r30, 0x95	; 149
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	86 60       	ori	r24, 0x06	; 6
     a54:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     a56:	8a b1       	in	r24, 0x0a	; 10
     a58:	88 69       	ori	r24, 0x98	; 152
     a5a:	8a b9       	out	0x0a, r24	; 10
     a5c:	08 95       	ret

00000a5e <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
     a5e:	5d 9b       	sbis	0x0b, 5	; 11
     a60:	fe cf       	rjmp	.-4      	; 0xa5e <UART0_transmit>
		;   // no operation NOP
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
     a62:	8c b9       	out	0x0c, r24	; 12
     a64:	08 95       	ret

00000a66 <__vector_30>:
volatile uint8_t bt_data;

extern void UART0_transmit();

ISR(USART1_RX_vect)
{
     a66:	1f 92       	push	r1
     a68:	0f 92       	push	r0
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	0f 92       	push	r0
     a6e:	11 24       	eor	r1, r1
     a70:	0b b6       	in	r0, 0x3b	; 59
     a72:	0f 92       	push	r0
     a74:	2f 93       	push	r18
     a76:	3f 93       	push	r19
     a78:	4f 93       	push	r20
     a7a:	5f 93       	push	r21
     a7c:	6f 93       	push	r22
     a7e:	7f 93       	push	r23
     a80:	8f 93       	push	r24
     a82:	9f 93       	push	r25
     a84:	af 93       	push	r26
     a86:	bf 93       	push	r27
     a88:	ef 93       	push	r30
     a8a:	ff 93       	push	r31
	
	bt_data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
     a8c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     a90:	80 93 ba 07 	sts	0x07BA, r24	; 0x8007ba <bt_data>
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	UART0_transmit(bt_data); // BT로 들어온 char를 확인하기 위해 comport master로 출력
     a94:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <bt_data>
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	e1 df       	rcall	.-62     	; 0xa5e <UART0_transmit>
// 	{
// 		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
// 		rx1_buff[rear1][i++] = data;
// 	}
		  
}
     a9c:	ff 91       	pop	r31
     a9e:	ef 91       	pop	r30
     aa0:	bf 91       	pop	r27
     aa2:	af 91       	pop	r26
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	7f 91       	pop	r23
     aaa:	6f 91       	pop	r22
     aac:	5f 91       	pop	r21
     aae:	4f 91       	pop	r20
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0b be       	out	0x3b, r0	; 59
     ab8:	0f 90       	pop	r0
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	0f 90       	pop	r0
     abe:	1f 90       	pop	r1
     ac0:	18 95       	reti

00000ac2 <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
     ac2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
     ac6:	8f ec       	ldi	r24, 0xCF	; 207
     ac8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
     acc:	eb e9       	ldi	r30, 0x9B	; 155
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	82 60       	ori	r24, 0x02	; 2
     ad4:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     ad6:	ed e9       	ldi	r30, 0x9D	; 157
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	86 60       	ori	r24, 0x06	; 6
     ade:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     ae0:	ea e9       	ldi	r30, 0x9A	; 154
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	80 81       	ld	r24, Z
     ae6:	88 69       	ori	r24, 0x98	; 152
     ae8:	80 83       	st	Z, r24
     aea:	08 95       	ret

00000aec <__vector_5>:
volatile int ultrasonic_right_distance = 0;

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect) // LEFT
{
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	0b b6       	in	r0, 0x3b	; 59
     af8:	0f 92       	push	r0
     afa:	2f 93       	push	r18
     afc:	3f 93       	push	r19
     afe:	4f 93       	push	r20
     b00:	5f 93       	push	r21
     b02:	6f 93       	push	r22
     b04:	7f 93       	push	r23
     b06:	8f 93       	push	r24
     b08:	9f 93       	push	r25
     b0a:	af 93       	push	r26
     b0c:	bf 93       	push	r27
     b0e:	ef 93       	push	r30
     b10:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN_LEFT & (1 << ECHO_LEFT))
     b12:	0c 9b       	sbis	0x01, 4	; 1
     b14:	05 c0       	rjmp	.+10     	; 0xb20 <__vector_5+0x34>
	{
		TCNT3 = 0;
     b16:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b1a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     b1e:	20 c0       	rjmp	.+64     	; 0xb60 <__vector_5+0x74>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_left_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     b20:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     b24:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	05 d2       	rcall	.+1034   	; 0xf38 <__floatunsisf>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	34 e2       	ldi	r19, 0x24	; 36
     b32:	44 e7       	ldi	r20, 0x74	; 116
     b34:	59 e4       	ldi	r21, 0x49	; 73
     b36:	8e d2       	rcall	.+1308   	; 0x1054 <__mulsf3>
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	40 e8       	ldi	r20, 0x80	; 128
     b3e:	54 e4       	ldi	r21, 0x44	; 68
     b40:	89 d2       	rcall	.+1298   	; 0x1054 <__mulsf3>
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	34 e2       	ldi	r19, 0x24	; 36
     b46:	44 e7       	ldi	r20, 0x74	; 116
     b48:	5b e4       	ldi	r21, 0x4B	; 75
     b4a:	5d d1       	rcall	.+698    	; 0xe06 <__divsf3>
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	48 e6       	ldi	r20, 0x68	; 104
     b52:	52 e4       	ldi	r21, 0x42	; 66
     b54:	58 d1       	rcall	.+688    	; 0xe06 <__divsf3>
     b56:	bf d1       	rcall	.+894    	; 0xed6 <__fixsfsi>
     b58:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <ultrasonic_left_distance+0x1>
     b5c:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <ultrasonic_left_distance>
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
		// sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
	}
}
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	bf 91       	pop	r27
     b66:	af 91       	pop	r26
     b68:	9f 91       	pop	r25
     b6a:	8f 91       	pop	r24
     b6c:	7f 91       	pop	r23
     b6e:	6f 91       	pop	r22
     b70:	5f 91       	pop	r21
     b72:	4f 91       	pop	r20
     b74:	3f 91       	pop	r19
     b76:	2f 91       	pop	r18
     b78:	0f 90       	pop	r0
     b7a:	0b be       	out	0x3b, r0	; 59
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	0f 90       	pop	r0
     b82:	1f 90       	pop	r1
     b84:	18 95       	reti

00000b86 <__vector_6>:

ISR(INT5_vect) // CENTER
{
     b86:	1f 92       	push	r1
     b88:	0f 92       	push	r0
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	0f 92       	push	r0
     b8e:	11 24       	eor	r1, r1
     b90:	0b b6       	in	r0, 0x3b	; 59
     b92:	0f 92       	push	r0
     b94:	2f 93       	push	r18
     b96:	3f 93       	push	r19
     b98:	4f 93       	push	r20
     b9a:	5f 93       	push	r21
     b9c:	6f 93       	push	r22
     b9e:	7f 93       	push	r23
     ba0:	8f 93       	push	r24
     ba2:	9f 93       	push	r25
     ba4:	af 93       	push	r26
     ba6:	bf 93       	push	r27
     ba8:	ef 93       	push	r30
     baa:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN_CENTER & (1 << ECHO_CENTER))
     bac:	0d 9b       	sbis	0x01, 5	; 1
     bae:	05 c0       	rjmp	.+10     	; 0xbba <__vector_6+0x34>
	{
		TCNT3 = 0;
     bb0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     bb4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     bb8:	20 c0       	rjmp	.+64     	; 0xbfa <__vector_6+0x74>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_center_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     bba:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     bbe:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	b8 d1       	rcall	.+880    	; 0xf38 <__floatunsisf>
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	34 e2       	ldi	r19, 0x24	; 36
     bcc:	44 e7       	ldi	r20, 0x74	; 116
     bce:	59 e4       	ldi	r21, 0x49	; 73
     bd0:	41 d2       	rcall	.+1154   	; 0x1054 <__mulsf3>
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e8       	ldi	r20, 0x80	; 128
     bd8:	54 e4       	ldi	r21, 0x44	; 68
     bda:	3c d2       	rcall	.+1144   	; 0x1054 <__mulsf3>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	34 e2       	ldi	r19, 0x24	; 36
     be0:	44 e7       	ldi	r20, 0x74	; 116
     be2:	5b e4       	ldi	r21, 0x4B	; 75
     be4:	10 d1       	rcall	.+544    	; 0xe06 <__divsf3>
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	48 e6       	ldi	r20, 0x68	; 104
     bec:	52 e4       	ldi	r21, 0x42	; 66
     bee:	0b d1       	rcall	.+534    	; 0xe06 <__divsf3>
     bf0:	72 d1       	rcall	.+740    	; 0xed6 <__fixsfsi>
     bf2:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <ultrasonic_center_distance+0x1>
     bf6:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <ultrasonic_center_distance>
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
		// sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
	}
}
     bfa:	ff 91       	pop	r31
     bfc:	ef 91       	pop	r30
     bfe:	bf 91       	pop	r27
     c00:	af 91       	pop	r26
     c02:	9f 91       	pop	r25
     c04:	8f 91       	pop	r24
     c06:	7f 91       	pop	r23
     c08:	6f 91       	pop	r22
     c0a:	5f 91       	pop	r21
     c0c:	4f 91       	pop	r20
     c0e:	3f 91       	pop	r19
     c10:	2f 91       	pop	r18
     c12:	0f 90       	pop	r0
     c14:	0b be       	out	0x3b, r0	; 59
     c16:	0f 90       	pop	r0
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	0f 90       	pop	r0
     c1c:	1f 90       	pop	r1
     c1e:	18 95       	reti

00000c20 <__vector_7>:

ISR(INT6_vect) // RIGHT
{
     c20:	1f 92       	push	r1
     c22:	0f 92       	push	r0
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	0f 92       	push	r0
     c28:	11 24       	eor	r1, r1
     c2a:	0b b6       	in	r0, 0x3b	; 59
     c2c:	0f 92       	push	r0
     c2e:	2f 93       	push	r18
     c30:	3f 93       	push	r19
     c32:	4f 93       	push	r20
     c34:	5f 93       	push	r21
     c36:	6f 93       	push	r22
     c38:	7f 93       	push	r23
     c3a:	8f 93       	push	r24
     c3c:	9f 93       	push	r25
     c3e:	af 93       	push	r26
     c40:	bf 93       	push	r27
     c42:	ef 93       	push	r30
     c44:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN_RIGHT & (1 << ECHO_RIGHT))
     c46:	0e 9b       	sbis	0x01, 6	; 1
     c48:	05 c0       	rjmp	.+10     	; 0xc54 <__vector_7+0x34>
	{
		TCNT3 = 0;
     c4a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c4e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     c52:	20 c0       	rjmp	.+64     	; 0xc94 <__vector_7+0x74>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_right_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     c54:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     c58:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	6b d1       	rcall	.+726    	; 0xf38 <__floatunsisf>
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	34 e2       	ldi	r19, 0x24	; 36
     c66:	44 e7       	ldi	r20, 0x74	; 116
     c68:	59 e4       	ldi	r21, 0x49	; 73
     c6a:	f4 d1       	rcall	.+1000   	; 0x1054 <__mulsf3>
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	40 e8       	ldi	r20, 0x80	; 128
     c72:	54 e4       	ldi	r21, 0x44	; 68
     c74:	ef d1       	rcall	.+990    	; 0x1054 <__mulsf3>
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	34 e2       	ldi	r19, 0x24	; 36
     c7a:	44 e7       	ldi	r20, 0x74	; 116
     c7c:	5b e4       	ldi	r21, 0x4B	; 75
     c7e:	c3 d0       	rcall	.+390    	; 0xe06 <__divsf3>
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	48 e6       	ldi	r20, 0x68	; 104
     c86:	52 e4       	ldi	r21, 0x42	; 66
     c88:	be d0       	rcall	.+380    	; 0xe06 <__divsf3>
     c8a:	25 d1       	rcall	.+586    	; 0xed6 <__fixsfsi>
     c8c:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <ultrasonic_right_distance+0x1>
     c90:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <ultrasonic_right_distance>
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
		// sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
	}
}
     c94:	ff 91       	pop	r31
     c96:	ef 91       	pop	r30
     c98:	bf 91       	pop	r27
     c9a:	af 91       	pop	r26
     c9c:	9f 91       	pop	r25
     c9e:	8f 91       	pop	r24
     ca0:	7f 91       	pop	r23
     ca2:	6f 91       	pop	r22
     ca4:	5f 91       	pop	r21
     ca6:	4f 91       	pop	r20
     ca8:	3f 91       	pop	r19
     caa:	2f 91       	pop	r18
     cac:	0f 90       	pop	r0
     cae:	0b be       	out	0x3b, r0	; 59
     cb0:	0f 90       	pop	r0
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	0f 90       	pop	r0
     cb6:	1f 90       	pop	r1
     cb8:	18 95       	reti

00000cba <init_ultrasonic>:

void init_ultrasonic()
{
	//////////////// left ////////////////
	TRIG_DDR_LEFT |= 1 << TRIG_LEFT; // output mode로 설정
     cba:	8a b3       	in	r24, 0x1a	; 26
     cbc:	81 60       	ori	r24, 0x01	; 1
     cbe:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_LEFT &= ~(1 << ECHO_LEFT); // input mode로 설정
     cc0:	82 b1       	in	r24, 0x02	; 2
     cc2:	8f 7e       	andi	r24, 0xEF	; 239
     cc4:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
     cc6:	8a b7       	in	r24, 0x3a	; 58
     cc8:	81 60       	ori	r24, 0x01	; 1
     cca:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us	
	TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     ccc:	ea e8       	ldi	r30, 0x8A	; 138
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	85 60       	ori	r24, 0x05	; 5
     cd4:	80 83       	st	Z, r24
	EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
     cd6:	89 b7       	in	r24, 0x39	; 57
     cd8:	80 61       	ori	r24, 0x10	; 16
     cda:	89 bf       	out	0x39, r24	; 57
	
	
	//////////////// center ////////////////
	TRIG_DDR_CENTER |= 1 << TRIG_CENTER; // output mode로 설정
     cdc:	8a b3       	in	r24, 0x1a	; 26
     cde:	82 60       	ori	r24, 0x02	; 2
     ce0:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_CENTER &= ~(1 << ECHO_CENTER); // input mode로 설정
     ce2:	82 b1       	in	r24, 0x02	; 2
     ce4:	8f 7d       	andi	r24, 0xDF	; 223
     ce6:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC51 | 1 << ISC50; // INT5니까 EICRB에서 ISC51, 50
     ce8:	8a b7       	in	r24, 0x3a	; 58
     cea:	84 60       	ori	r24, 0x04	; 4
     cec:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
	TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     cee:	80 81       	ld	r24, Z
     cf0:	85 60       	ori	r24, 0x05	; 5
     cf2:	80 83       	st	Z, r24
	EIMSK |= 1 << INT5; // 외부 인터럽트4번 (ECHO) 사용
     cf4:	89 b7       	in	r24, 0x39	; 57
     cf6:	80 62       	ori	r24, 0x20	; 32
     cf8:	89 bf       	out	0x39, r24	; 57
	
	
	//////////////// right ////////////////
	TRIG_DDR_RIGHT |= 1 << TRIG_RIGHT; // output mode로 설정
     cfa:	8a b3       	in	r24, 0x1a	; 26
     cfc:	84 60       	ori	r24, 0x04	; 4
     cfe:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_RIGHT &= ~(1 << ECHO_RIGHT); // input mode로 설정
     d00:	82 b1       	in	r24, 0x02	; 2
     d02:	8f 7b       	andi	r24, 0xBF	; 191
     d04:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC61 | 1 << ISC60; // INT6니까 EICRB에서 ISC61, 60
     d06:	8a b7       	in	r24, 0x3a	; 58
     d08:	80 61       	ori	r24, 0x10	; 16
     d0a:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
	TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     d0c:	80 81       	ld	r24, Z
     d0e:	85 60       	ori	r24, 0x05	; 5
     d10:	80 83       	st	Z, r24
	EIMSK |= 1 << INT6; // 외부 인터럽트4번 (ECHO) 사용
     d12:	89 b7       	in	r24, 0x39	; 57
     d14:	80 64       	ori	r24, 0x40	; 64
     d16:	89 bf       	out	0x39, r24	; 57
     d18:	08 95       	ret

00000d1a <ultrasonic_trigger>:
}

void ultrasonic_trigger()
{
	if (ultrasonic_check_timer >= 38)
     d1a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ultrasonic_check_timer>
     d1e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <ultrasonic_check_timer+0x1>
     d22:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <ultrasonic_check_timer+0x2>
     d26:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <ultrasonic_check_timer+0x3>
     d2a:	86 97       	sbiw	r24, 0x26	; 38
     d2c:	a1 05       	cpc	r26, r1
     d2e:	b1 05       	cpc	r27, r1
     d30:	c0 f1       	brcs	.+112    	; 0xda2 <ultrasonic_trigger+0x88>
	{
		ultrasonic_check_timer = 0;
     d32:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <ultrasonic_check_timer>
     d36:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <ultrasonic_check_timer+0x1>
     d3a:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <ultrasonic_check_timer+0x2>
     d3e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <ultrasonic_check_timer+0x3>
			////////// left //////////
		TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // 해당되는 포트만 LOW로 만듦
     d42:	8b b3       	in	r24, 0x1b	; 27
     d44:	8e 7f       	andi	r24, 0xFE	; 254
     d46:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d48:	85 e0       	ldi	r24, 0x05	; 5
     d4a:	8a 95       	dec	r24
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <ultrasonic_trigger+0x30>
     d4e:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_LEFT |= 1 << TRIG_LEFT; // HIGH
     d50:	8b b3       	in	r24, 0x1b	; 27
     d52:	81 60       	ori	r24, 0x01	; 1
     d54:	8b bb       	out	0x1b, r24	; 27
     d56:	80 e5       	ldi	r24, 0x50	; 80
     d58:	8a 95       	dec	r24
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <ultrasonic_trigger+0x3e>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // LOW
     d5c:	8b b3       	in	r24, 0x1b	; 27
     d5e:	8e 7f       	andi	r24, 0xFE	; 254
     d60:	8b bb       	out	0x1b, r24	; 27
		// 초음파센서 echo 응답 대기시간이 최대 38ms

	

			////////// center //////////
		TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // 해당되는 포트만 LOW로 만듦
     d62:	8b b3       	in	r24, 0x1b	; 27
     d64:	8d 7f       	andi	r24, 0xFD	; 253
     d66:	8b bb       	out	0x1b, r24	; 27
     d68:	85 e0       	ldi	r24, 0x05	; 5
     d6a:	8a 95       	dec	r24
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <ultrasonic_trigger+0x50>
     d6e:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_CENTER |= 1 << TRIG_CENTER; // HIGH
     d70:	8b b3       	in	r24, 0x1b	; 27
     d72:	82 60       	ori	r24, 0x02	; 2
     d74:	8b bb       	out	0x1b, r24	; 27
     d76:	80 e5       	ldi	r24, 0x50	; 80
     d78:	8a 95       	dec	r24
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <ultrasonic_trigger+0x5e>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // LOW
     d7c:	8b b3       	in	r24, 0x1b	; 27
     d7e:	8d 7f       	andi	r24, 0xFD	; 253
     d80:	8b bb       	out	0x1b, r24	; 27


			////////// right //////////
		TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // 해당되는 포트만 LOW로 만듦
     d82:	8b b3       	in	r24, 0x1b	; 27
     d84:	8b 7f       	andi	r24, 0xFB	; 251
     d86:	8b bb       	out	0x1b, r24	; 27
     d88:	85 e0       	ldi	r24, 0x05	; 5
     d8a:	8a 95       	dec	r24
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <ultrasonic_trigger+0x70>
     d8e:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_RIGHT |= 1 << TRIG_RIGHT; // HIGH
     d90:	8b b3       	in	r24, 0x1b	; 27
     d92:	84 60       	ori	r24, 0x04	; 4
     d94:	8b bb       	out	0x1b, r24	; 27
     d96:	80 e5       	ldi	r24, 0x50	; 80
     d98:	8a 95       	dec	r24
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <ultrasonic_trigger+0x7e>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // LOW
     d9c:	8b b3       	in	r24, 0x1b	; 27
     d9e:	8b 7f       	andi	r24, 0xFB	; 251
     da0:	8b bb       	out	0x1b, r24	; 27
     da2:	08 95       	ret

00000da4 <distance_check>:
	}
}

void distance_check(void)
{
		printf("left   :  %5d\n", ultrasonic_left_distance); // printf 찍으면 delay생김
     da4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_left_distance>
     da8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     dac:	9f 93       	push	r25
     dae:	8f 93       	push	r24
     db0:	85 e2       	ldi	r24, 0x25	; 37
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	9f 93       	push	r25
     db6:	8f 93       	push	r24
     db8:	02 d2       	rcall	.+1028   	; 0x11be <printf>
		printf("center :  %5d\n", ultrasonic_center_distance);
     dba:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ultrasonic_center_distance>
     dbe:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ultrasonic_center_distance+0x1>
     dc2:	9f 93       	push	r25
     dc4:	8f 93       	push	r24
     dc6:	84 e3       	ldi	r24, 0x34	; 52
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	9f 93       	push	r25
     dcc:	8f 93       	push	r24
     dce:	f7 d1       	rcall	.+1006   	; 0x11be <printf>
		printf("right  :  %5d\n", ultrasonic_right_distance);
     dd0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_right_distance>
     dd4:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     dd8:	9f 93       	push	r25
     dda:	8f 93       	push	r24
     ddc:	83 e4       	ldi	r24, 0x43	; 67
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	9f 93       	push	r25
     de2:	8f 93       	push	r24

	ultrasonic_trigger(); // 이것도 수정해야한다.
     de4:	ec d1       	rcall	.+984    	; 0x11be <printf>
     de6:	99 df       	rcall	.-206    	; 0xd1a <ultrasonic_trigger>
	func_state = AUTO_MODE_CHECK;
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <func_state+0x1>
     df0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <func_state>
     df4:	8d b7       	in	r24, 0x3d	; 61
     df6:	9e b7       	in	r25, 0x3e	; 62
     df8:	0c 96       	adiw	r24, 0x0c	; 12
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	9e bf       	out	0x3e, r25	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	8d bf       	out	0x3d, r24	; 61
     e04:	08 95       	ret

00000e06 <__divsf3>:
     e06:	0c d0       	rcall	.+24     	; 0xe20 <__divsf3x>
     e08:	eb c0       	rjmp	.+470    	; 0xfe0 <__fp_round>
     e0a:	e3 d0       	rcall	.+454    	; 0xfd2 <__fp_pscB>
     e0c:	40 f0       	brcs	.+16     	; 0xe1e <__divsf3+0x18>
     e0e:	da d0       	rcall	.+436    	; 0xfc4 <__fp_pscA>
     e10:	30 f0       	brcs	.+12     	; 0xe1e <__divsf3+0x18>
     e12:	21 f4       	brne	.+8      	; 0xe1c <__divsf3+0x16>
     e14:	5f 3f       	cpi	r21, 0xFF	; 255
     e16:	19 f0       	breq	.+6      	; 0xe1e <__divsf3+0x18>
     e18:	cc c0       	rjmp	.+408    	; 0xfb2 <__fp_inf>
     e1a:	51 11       	cpse	r21, r1
     e1c:	15 c1       	rjmp	.+554    	; 0x1048 <__fp_szero>
     e1e:	cf c0       	rjmp	.+414    	; 0xfbe <__fp_nan>

00000e20 <__divsf3x>:
     e20:	f0 d0       	rcall	.+480    	; 0x1002 <__fp_split3>
     e22:	98 f3       	brcs	.-26     	; 0xe0a <__divsf3+0x4>

00000e24 <__divsf3_pse>:
     e24:	99 23       	and	r25, r25
     e26:	c9 f3       	breq	.-14     	; 0xe1a <__divsf3+0x14>
     e28:	55 23       	and	r21, r21
     e2a:	b1 f3       	breq	.-20     	; 0xe18 <__divsf3+0x12>
     e2c:	95 1b       	sub	r25, r21
     e2e:	55 0b       	sbc	r21, r21
     e30:	bb 27       	eor	r27, r27
     e32:	aa 27       	eor	r26, r26
     e34:	62 17       	cp	r22, r18
     e36:	73 07       	cpc	r23, r19
     e38:	84 07       	cpc	r24, r20
     e3a:	38 f0       	brcs	.+14     	; 0xe4a <__divsf3_pse+0x26>
     e3c:	9f 5f       	subi	r25, 0xFF	; 255
     e3e:	5f 4f       	sbci	r21, 0xFF	; 255
     e40:	22 0f       	add	r18, r18
     e42:	33 1f       	adc	r19, r19
     e44:	44 1f       	adc	r20, r20
     e46:	aa 1f       	adc	r26, r26
     e48:	a9 f3       	breq	.-22     	; 0xe34 <__divsf3_pse+0x10>
     e4a:	33 d0       	rcall	.+102    	; 0xeb2 <__divsf3_pse+0x8e>
     e4c:	0e 2e       	mov	r0, r30
     e4e:	3a f0       	brmi	.+14     	; 0xe5e <__divsf3_pse+0x3a>
     e50:	e0 e8       	ldi	r30, 0x80	; 128
     e52:	30 d0       	rcall	.+96     	; 0xeb4 <__divsf3_pse+0x90>
     e54:	91 50       	subi	r25, 0x01	; 1
     e56:	50 40       	sbci	r21, 0x00	; 0
     e58:	e6 95       	lsr	r30
     e5a:	00 1c       	adc	r0, r0
     e5c:	ca f7       	brpl	.-14     	; 0xe50 <__divsf3_pse+0x2c>
     e5e:	29 d0       	rcall	.+82     	; 0xeb2 <__divsf3_pse+0x8e>
     e60:	fe 2f       	mov	r31, r30
     e62:	27 d0       	rcall	.+78     	; 0xeb2 <__divsf3_pse+0x8e>
     e64:	66 0f       	add	r22, r22
     e66:	77 1f       	adc	r23, r23
     e68:	88 1f       	adc	r24, r24
     e6a:	bb 1f       	adc	r27, r27
     e6c:	26 17       	cp	r18, r22
     e6e:	37 07       	cpc	r19, r23
     e70:	48 07       	cpc	r20, r24
     e72:	ab 07       	cpc	r26, r27
     e74:	b0 e8       	ldi	r27, 0x80	; 128
     e76:	09 f0       	breq	.+2      	; 0xe7a <__divsf3_pse+0x56>
     e78:	bb 0b       	sbc	r27, r27
     e7a:	80 2d       	mov	r24, r0
     e7c:	bf 01       	movw	r22, r30
     e7e:	ff 27       	eor	r31, r31
     e80:	93 58       	subi	r25, 0x83	; 131
     e82:	5f 4f       	sbci	r21, 0xFF	; 255
     e84:	2a f0       	brmi	.+10     	; 0xe90 <__divsf3_pse+0x6c>
     e86:	9e 3f       	cpi	r25, 0xFE	; 254
     e88:	51 05       	cpc	r21, r1
     e8a:	68 f0       	brcs	.+26     	; 0xea6 <__divsf3_pse+0x82>
     e8c:	92 c0       	rjmp	.+292    	; 0xfb2 <__fp_inf>
     e8e:	dc c0       	rjmp	.+440    	; 0x1048 <__fp_szero>
     e90:	5f 3f       	cpi	r21, 0xFF	; 255
     e92:	ec f3       	brlt	.-6      	; 0xe8e <__divsf3_pse+0x6a>
     e94:	98 3e       	cpi	r25, 0xE8	; 232
     e96:	dc f3       	brlt	.-10     	; 0xe8e <__divsf3_pse+0x6a>
     e98:	86 95       	lsr	r24
     e9a:	77 95       	ror	r23
     e9c:	67 95       	ror	r22
     e9e:	b7 95       	ror	r27
     ea0:	f7 95       	ror	r31
     ea2:	9f 5f       	subi	r25, 0xFF	; 255
     ea4:	c9 f7       	brne	.-14     	; 0xe98 <__divsf3_pse+0x74>
     ea6:	88 0f       	add	r24, r24
     ea8:	91 1d       	adc	r25, r1
     eaa:	96 95       	lsr	r25
     eac:	87 95       	ror	r24
     eae:	97 f9       	bld	r25, 7
     eb0:	08 95       	ret
     eb2:	e1 e0       	ldi	r30, 0x01	; 1
     eb4:	66 0f       	add	r22, r22
     eb6:	77 1f       	adc	r23, r23
     eb8:	88 1f       	adc	r24, r24
     eba:	bb 1f       	adc	r27, r27
     ebc:	62 17       	cp	r22, r18
     ebe:	73 07       	cpc	r23, r19
     ec0:	84 07       	cpc	r24, r20
     ec2:	ba 07       	cpc	r27, r26
     ec4:	20 f0       	brcs	.+8      	; 0xece <__divsf3_pse+0xaa>
     ec6:	62 1b       	sub	r22, r18
     ec8:	73 0b       	sbc	r23, r19
     eca:	84 0b       	sbc	r24, r20
     ecc:	ba 0b       	sbc	r27, r26
     ece:	ee 1f       	adc	r30, r30
     ed0:	88 f7       	brcc	.-30     	; 0xeb4 <__divsf3_pse+0x90>
     ed2:	e0 95       	com	r30
     ed4:	08 95       	ret

00000ed6 <__fixsfsi>:
     ed6:	04 d0       	rcall	.+8      	; 0xee0 <__fixunssfsi>
     ed8:	68 94       	set
     eda:	b1 11       	cpse	r27, r1
     edc:	b5 c0       	rjmp	.+362    	; 0x1048 <__fp_szero>
     ede:	08 95       	ret

00000ee0 <__fixunssfsi>:
     ee0:	98 d0       	rcall	.+304    	; 0x1012 <__fp_splitA>
     ee2:	88 f0       	brcs	.+34     	; 0xf06 <__fixunssfsi+0x26>
     ee4:	9f 57       	subi	r25, 0x7F	; 127
     ee6:	90 f0       	brcs	.+36     	; 0xf0c <__fixunssfsi+0x2c>
     ee8:	b9 2f       	mov	r27, r25
     eea:	99 27       	eor	r25, r25
     eec:	b7 51       	subi	r27, 0x17	; 23
     eee:	a0 f0       	brcs	.+40     	; 0xf18 <__fixunssfsi+0x38>
     ef0:	d1 f0       	breq	.+52     	; 0xf26 <__fixunssfsi+0x46>
     ef2:	66 0f       	add	r22, r22
     ef4:	77 1f       	adc	r23, r23
     ef6:	88 1f       	adc	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	1a f0       	brmi	.+6      	; 0xf02 <__fixunssfsi+0x22>
     efc:	ba 95       	dec	r27
     efe:	c9 f7       	brne	.-14     	; 0xef2 <__fixunssfsi+0x12>
     f00:	12 c0       	rjmp	.+36     	; 0xf26 <__fixunssfsi+0x46>
     f02:	b1 30       	cpi	r27, 0x01	; 1
     f04:	81 f0       	breq	.+32     	; 0xf26 <__fixunssfsi+0x46>
     f06:	9f d0       	rcall	.+318    	; 0x1046 <__fp_zero>
     f08:	b1 e0       	ldi	r27, 0x01	; 1
     f0a:	08 95       	ret
     f0c:	9c c0       	rjmp	.+312    	; 0x1046 <__fp_zero>
     f0e:	67 2f       	mov	r22, r23
     f10:	78 2f       	mov	r23, r24
     f12:	88 27       	eor	r24, r24
     f14:	b8 5f       	subi	r27, 0xF8	; 248
     f16:	39 f0       	breq	.+14     	; 0xf26 <__fixunssfsi+0x46>
     f18:	b9 3f       	cpi	r27, 0xF9	; 249
     f1a:	cc f3       	brlt	.-14     	; 0xf0e <__fixunssfsi+0x2e>
     f1c:	86 95       	lsr	r24
     f1e:	77 95       	ror	r23
     f20:	67 95       	ror	r22
     f22:	b3 95       	inc	r27
     f24:	d9 f7       	brne	.-10     	; 0xf1c <__fixunssfsi+0x3c>
     f26:	3e f4       	brtc	.+14     	; 0xf36 <__fixunssfsi+0x56>
     f28:	90 95       	com	r25
     f2a:	80 95       	com	r24
     f2c:	70 95       	com	r23
     f2e:	61 95       	neg	r22
     f30:	7f 4f       	sbci	r23, 0xFF	; 255
     f32:	8f 4f       	sbci	r24, 0xFF	; 255
     f34:	9f 4f       	sbci	r25, 0xFF	; 255
     f36:	08 95       	ret

00000f38 <__floatunsisf>:
     f38:	e8 94       	clt
     f3a:	09 c0       	rjmp	.+18     	; 0xf4e <__floatsisf+0x12>

00000f3c <__floatsisf>:
     f3c:	97 fb       	bst	r25, 7
     f3e:	3e f4       	brtc	.+14     	; 0xf4e <__floatsisf+0x12>
     f40:	90 95       	com	r25
     f42:	80 95       	com	r24
     f44:	70 95       	com	r23
     f46:	61 95       	neg	r22
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	8f 4f       	sbci	r24, 0xFF	; 255
     f4c:	9f 4f       	sbci	r25, 0xFF	; 255
     f4e:	99 23       	and	r25, r25
     f50:	a9 f0       	breq	.+42     	; 0xf7c <__floatsisf+0x40>
     f52:	f9 2f       	mov	r31, r25
     f54:	96 e9       	ldi	r25, 0x96	; 150
     f56:	bb 27       	eor	r27, r27
     f58:	93 95       	inc	r25
     f5a:	f6 95       	lsr	r31
     f5c:	87 95       	ror	r24
     f5e:	77 95       	ror	r23
     f60:	67 95       	ror	r22
     f62:	b7 95       	ror	r27
     f64:	f1 11       	cpse	r31, r1
     f66:	f8 cf       	rjmp	.-16     	; 0xf58 <__floatsisf+0x1c>
     f68:	fa f4       	brpl	.+62     	; 0xfa8 <__floatsisf+0x6c>
     f6a:	bb 0f       	add	r27, r27
     f6c:	11 f4       	brne	.+4      	; 0xf72 <__floatsisf+0x36>
     f6e:	60 ff       	sbrs	r22, 0
     f70:	1b c0       	rjmp	.+54     	; 0xfa8 <__floatsisf+0x6c>
     f72:	6f 5f       	subi	r22, 0xFF	; 255
     f74:	7f 4f       	sbci	r23, 0xFF	; 255
     f76:	8f 4f       	sbci	r24, 0xFF	; 255
     f78:	9f 4f       	sbci	r25, 0xFF	; 255
     f7a:	16 c0       	rjmp	.+44     	; 0xfa8 <__floatsisf+0x6c>
     f7c:	88 23       	and	r24, r24
     f7e:	11 f0       	breq	.+4      	; 0xf84 <__floatsisf+0x48>
     f80:	96 e9       	ldi	r25, 0x96	; 150
     f82:	11 c0       	rjmp	.+34     	; 0xfa6 <__floatsisf+0x6a>
     f84:	77 23       	and	r23, r23
     f86:	21 f0       	breq	.+8      	; 0xf90 <__floatsisf+0x54>
     f88:	9e e8       	ldi	r25, 0x8E	; 142
     f8a:	87 2f       	mov	r24, r23
     f8c:	76 2f       	mov	r23, r22
     f8e:	05 c0       	rjmp	.+10     	; 0xf9a <__floatsisf+0x5e>
     f90:	66 23       	and	r22, r22
     f92:	71 f0       	breq	.+28     	; 0xfb0 <__floatsisf+0x74>
     f94:	96 e8       	ldi	r25, 0x86	; 134
     f96:	86 2f       	mov	r24, r22
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	2a f0       	brmi	.+10     	; 0xfa8 <__floatsisf+0x6c>
     f9e:	9a 95       	dec	r25
     fa0:	66 0f       	add	r22, r22
     fa2:	77 1f       	adc	r23, r23
     fa4:	88 1f       	adc	r24, r24
     fa6:	da f7       	brpl	.-10     	; 0xf9e <__floatsisf+0x62>
     fa8:	88 0f       	add	r24, r24
     faa:	96 95       	lsr	r25
     fac:	87 95       	ror	r24
     fae:	97 f9       	bld	r25, 7
     fb0:	08 95       	ret

00000fb2 <__fp_inf>:
     fb2:	97 f9       	bld	r25, 7
     fb4:	9f 67       	ori	r25, 0x7F	; 127
     fb6:	80 e8       	ldi	r24, 0x80	; 128
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	08 95       	ret

00000fbe <__fp_nan>:
     fbe:	9f ef       	ldi	r25, 0xFF	; 255
     fc0:	80 ec       	ldi	r24, 0xC0	; 192
     fc2:	08 95       	ret

00000fc4 <__fp_pscA>:
     fc4:	00 24       	eor	r0, r0
     fc6:	0a 94       	dec	r0
     fc8:	16 16       	cp	r1, r22
     fca:	17 06       	cpc	r1, r23
     fcc:	18 06       	cpc	r1, r24
     fce:	09 06       	cpc	r0, r25
     fd0:	08 95       	ret

00000fd2 <__fp_pscB>:
     fd2:	00 24       	eor	r0, r0
     fd4:	0a 94       	dec	r0
     fd6:	12 16       	cp	r1, r18
     fd8:	13 06       	cpc	r1, r19
     fda:	14 06       	cpc	r1, r20
     fdc:	05 06       	cpc	r0, r21
     fde:	08 95       	ret

00000fe0 <__fp_round>:
     fe0:	09 2e       	mov	r0, r25
     fe2:	03 94       	inc	r0
     fe4:	00 0c       	add	r0, r0
     fe6:	11 f4       	brne	.+4      	; 0xfec <__fp_round+0xc>
     fe8:	88 23       	and	r24, r24
     fea:	52 f0       	brmi	.+20     	; 0x1000 <__DATA_REGION_LENGTH__>
     fec:	bb 0f       	add	r27, r27
     fee:	40 f4       	brcc	.+16     	; 0x1000 <__DATA_REGION_LENGTH__>
     ff0:	bf 2b       	or	r27, r31
     ff2:	11 f4       	brne	.+4      	; 0xff8 <__fp_round+0x18>
     ff4:	60 ff       	sbrs	r22, 0
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <__DATA_REGION_LENGTH__>
     ff8:	6f 5f       	subi	r22, 0xFF	; 255
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	8f 4f       	sbci	r24, 0xFF	; 255
     ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    1000:	08 95       	ret

00001002 <__fp_split3>:
    1002:	57 fd       	sbrc	r21, 7
    1004:	90 58       	subi	r25, 0x80	; 128
    1006:	44 0f       	add	r20, r20
    1008:	55 1f       	adc	r21, r21
    100a:	59 f0       	breq	.+22     	; 0x1022 <__fp_splitA+0x10>
    100c:	5f 3f       	cpi	r21, 0xFF	; 255
    100e:	71 f0       	breq	.+28     	; 0x102c <__fp_splitA+0x1a>
    1010:	47 95       	ror	r20

00001012 <__fp_splitA>:
    1012:	88 0f       	add	r24, r24
    1014:	97 fb       	bst	r25, 7
    1016:	99 1f       	adc	r25, r25
    1018:	61 f0       	breq	.+24     	; 0x1032 <__fp_splitA+0x20>
    101a:	9f 3f       	cpi	r25, 0xFF	; 255
    101c:	79 f0       	breq	.+30     	; 0x103c <__fp_splitA+0x2a>
    101e:	87 95       	ror	r24
    1020:	08 95       	ret
    1022:	12 16       	cp	r1, r18
    1024:	13 06       	cpc	r1, r19
    1026:	14 06       	cpc	r1, r20
    1028:	55 1f       	adc	r21, r21
    102a:	f2 cf       	rjmp	.-28     	; 0x1010 <__fp_split3+0xe>
    102c:	46 95       	lsr	r20
    102e:	f1 df       	rcall	.-30     	; 0x1012 <__fp_splitA>
    1030:	08 c0       	rjmp	.+16     	; 0x1042 <__fp_splitA+0x30>
    1032:	16 16       	cp	r1, r22
    1034:	17 06       	cpc	r1, r23
    1036:	18 06       	cpc	r1, r24
    1038:	99 1f       	adc	r25, r25
    103a:	f1 cf       	rjmp	.-30     	; 0x101e <__fp_splitA+0xc>
    103c:	86 95       	lsr	r24
    103e:	71 05       	cpc	r23, r1
    1040:	61 05       	cpc	r22, r1
    1042:	08 94       	sec
    1044:	08 95       	ret

00001046 <__fp_zero>:
    1046:	e8 94       	clt

00001048 <__fp_szero>:
    1048:	bb 27       	eor	r27, r27
    104a:	66 27       	eor	r22, r22
    104c:	77 27       	eor	r23, r23
    104e:	cb 01       	movw	r24, r22
    1050:	97 f9       	bld	r25, 7
    1052:	08 95       	ret

00001054 <__mulsf3>:
    1054:	0b d0       	rcall	.+22     	; 0x106c <__mulsf3x>
    1056:	c4 cf       	rjmp	.-120    	; 0xfe0 <__fp_round>
    1058:	b5 df       	rcall	.-150    	; 0xfc4 <__fp_pscA>
    105a:	28 f0       	brcs	.+10     	; 0x1066 <__mulsf3+0x12>
    105c:	ba df       	rcall	.-140    	; 0xfd2 <__fp_pscB>
    105e:	18 f0       	brcs	.+6      	; 0x1066 <__mulsf3+0x12>
    1060:	95 23       	and	r25, r21
    1062:	09 f0       	breq	.+2      	; 0x1066 <__mulsf3+0x12>
    1064:	a6 cf       	rjmp	.-180    	; 0xfb2 <__fp_inf>
    1066:	ab cf       	rjmp	.-170    	; 0xfbe <__fp_nan>
    1068:	11 24       	eor	r1, r1
    106a:	ee cf       	rjmp	.-36     	; 0x1048 <__fp_szero>

0000106c <__mulsf3x>:
    106c:	ca df       	rcall	.-108    	; 0x1002 <__fp_split3>
    106e:	a0 f3       	brcs	.-24     	; 0x1058 <__mulsf3+0x4>

00001070 <__mulsf3_pse>:
    1070:	95 9f       	mul	r25, r21
    1072:	d1 f3       	breq	.-12     	; 0x1068 <__mulsf3+0x14>
    1074:	95 0f       	add	r25, r21
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	55 1f       	adc	r21, r21
    107a:	62 9f       	mul	r22, r18
    107c:	f0 01       	movw	r30, r0
    107e:	72 9f       	mul	r23, r18
    1080:	bb 27       	eor	r27, r27
    1082:	f0 0d       	add	r31, r0
    1084:	b1 1d       	adc	r27, r1
    1086:	63 9f       	mul	r22, r19
    1088:	aa 27       	eor	r26, r26
    108a:	f0 0d       	add	r31, r0
    108c:	b1 1d       	adc	r27, r1
    108e:	aa 1f       	adc	r26, r26
    1090:	64 9f       	mul	r22, r20
    1092:	66 27       	eor	r22, r22
    1094:	b0 0d       	add	r27, r0
    1096:	a1 1d       	adc	r26, r1
    1098:	66 1f       	adc	r22, r22
    109a:	82 9f       	mul	r24, r18
    109c:	22 27       	eor	r18, r18
    109e:	b0 0d       	add	r27, r0
    10a0:	a1 1d       	adc	r26, r1
    10a2:	62 1f       	adc	r22, r18
    10a4:	73 9f       	mul	r23, r19
    10a6:	b0 0d       	add	r27, r0
    10a8:	a1 1d       	adc	r26, r1
    10aa:	62 1f       	adc	r22, r18
    10ac:	83 9f       	mul	r24, r19
    10ae:	a0 0d       	add	r26, r0
    10b0:	61 1d       	adc	r22, r1
    10b2:	22 1f       	adc	r18, r18
    10b4:	74 9f       	mul	r23, r20
    10b6:	33 27       	eor	r19, r19
    10b8:	a0 0d       	add	r26, r0
    10ba:	61 1d       	adc	r22, r1
    10bc:	23 1f       	adc	r18, r19
    10be:	84 9f       	mul	r24, r20
    10c0:	60 0d       	add	r22, r0
    10c2:	21 1d       	adc	r18, r1
    10c4:	82 2f       	mov	r24, r18
    10c6:	76 2f       	mov	r23, r22
    10c8:	6a 2f       	mov	r22, r26
    10ca:	11 24       	eor	r1, r1
    10cc:	9f 57       	subi	r25, 0x7F	; 127
    10ce:	50 40       	sbci	r21, 0x00	; 0
    10d0:	8a f0       	brmi	.+34     	; 0x10f4 <__mulsf3_pse+0x84>
    10d2:	e1 f0       	breq	.+56     	; 0x110c <__stack+0xd>
    10d4:	88 23       	and	r24, r24
    10d6:	4a f0       	brmi	.+18     	; 0x10ea <__mulsf3_pse+0x7a>
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	bb 1f       	adc	r27, r27
    10de:	66 1f       	adc	r22, r22
    10e0:	77 1f       	adc	r23, r23
    10e2:	88 1f       	adc	r24, r24
    10e4:	91 50       	subi	r25, 0x01	; 1
    10e6:	50 40       	sbci	r21, 0x00	; 0
    10e8:	a9 f7       	brne	.-22     	; 0x10d4 <__mulsf3_pse+0x64>
    10ea:	9e 3f       	cpi	r25, 0xFE	; 254
    10ec:	51 05       	cpc	r21, r1
    10ee:	70 f0       	brcs	.+28     	; 0x110c <__stack+0xd>
    10f0:	60 cf       	rjmp	.-320    	; 0xfb2 <__fp_inf>
    10f2:	aa cf       	rjmp	.-172    	; 0x1048 <__fp_szero>
    10f4:	5f 3f       	cpi	r21, 0xFF	; 255
    10f6:	ec f3       	brlt	.-6      	; 0x10f2 <__mulsf3_pse+0x82>
    10f8:	98 3e       	cpi	r25, 0xE8	; 232
    10fa:	dc f3       	brlt	.-10     	; 0x10f2 <__mulsf3_pse+0x82>
    10fc:	86 95       	lsr	r24
    10fe:	77 95       	ror	r23
    1100:	67 95       	ror	r22
    1102:	b7 95       	ror	r27
    1104:	f7 95       	ror	r31
    1106:	e7 95       	ror	r30
    1108:	9f 5f       	subi	r25, 0xFF	; 255
    110a:	c1 f7       	brne	.-16     	; 0x10fc <__mulsf3_pse+0x8c>
    110c:	fe 2b       	or	r31, r30
    110e:	88 0f       	add	r24, r24
    1110:	91 1d       	adc	r25, r1
    1112:	96 95       	lsr	r25
    1114:	87 95       	ror	r24
    1116:	97 f9       	bld	r25, 7
    1118:	08 95       	ret

0000111a <__divmodhi4>:
    111a:	97 fb       	bst	r25, 7
    111c:	07 2e       	mov	r0, r23
    111e:	16 f4       	brtc	.+4      	; 0x1124 <__divmodhi4+0xa>
    1120:	00 94       	com	r0
    1122:	06 d0       	rcall	.+12     	; 0x1130 <__divmodhi4_neg1>
    1124:	77 fd       	sbrc	r23, 7
    1126:	08 d0       	rcall	.+16     	; 0x1138 <__divmodhi4_neg2>
    1128:	36 d0       	rcall	.+108    	; 0x1196 <__udivmodhi4>
    112a:	07 fc       	sbrc	r0, 7
    112c:	05 d0       	rcall	.+10     	; 0x1138 <__divmodhi4_neg2>
    112e:	3e f4       	brtc	.+14     	; 0x113e <__divmodhi4_exit>

00001130 <__divmodhi4_neg1>:
    1130:	90 95       	com	r25
    1132:	81 95       	neg	r24
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	08 95       	ret

00001138 <__divmodhi4_neg2>:
    1138:	70 95       	com	r23
    113a:	61 95       	neg	r22
    113c:	7f 4f       	sbci	r23, 0xFF	; 255

0000113e <__divmodhi4_exit>:
    113e:	08 95       	ret

00001140 <__udivmodsi4>:
    1140:	a1 e2       	ldi	r26, 0x21	; 33
    1142:	1a 2e       	mov	r1, r26
    1144:	aa 1b       	sub	r26, r26
    1146:	bb 1b       	sub	r27, r27
    1148:	fd 01       	movw	r30, r26
    114a:	0d c0       	rjmp	.+26     	; 0x1166 <__udivmodsi4_ep>

0000114c <__udivmodsi4_loop>:
    114c:	aa 1f       	adc	r26, r26
    114e:	bb 1f       	adc	r27, r27
    1150:	ee 1f       	adc	r30, r30
    1152:	ff 1f       	adc	r31, r31
    1154:	a2 17       	cp	r26, r18
    1156:	b3 07       	cpc	r27, r19
    1158:	e4 07       	cpc	r30, r20
    115a:	f5 07       	cpc	r31, r21
    115c:	20 f0       	brcs	.+8      	; 0x1166 <__udivmodsi4_ep>
    115e:	a2 1b       	sub	r26, r18
    1160:	b3 0b       	sbc	r27, r19
    1162:	e4 0b       	sbc	r30, r20
    1164:	f5 0b       	sbc	r31, r21

00001166 <__udivmodsi4_ep>:
    1166:	66 1f       	adc	r22, r22
    1168:	77 1f       	adc	r23, r23
    116a:	88 1f       	adc	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	1a 94       	dec	r1
    1170:	69 f7       	brne	.-38     	; 0x114c <__udivmodsi4_loop>
    1172:	60 95       	com	r22
    1174:	70 95       	com	r23
    1176:	80 95       	com	r24
    1178:	90 95       	com	r25
    117a:	9b 01       	movw	r18, r22
    117c:	ac 01       	movw	r20, r24
    117e:	bd 01       	movw	r22, r26
    1180:	cf 01       	movw	r24, r30
    1182:	08 95       	ret

00001184 <__tablejump2__>:
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	00 24       	eor	r0, r0
    118a:	00 1c       	adc	r0, r0
    118c:	0b be       	out	0x3b, r0	; 59
    118e:	07 90       	elpm	r0, Z+
    1190:	f6 91       	elpm	r31, Z
    1192:	e0 2d       	mov	r30, r0
    1194:	09 94       	ijmp

00001196 <__udivmodhi4>:
    1196:	aa 1b       	sub	r26, r26
    1198:	bb 1b       	sub	r27, r27
    119a:	51 e1       	ldi	r21, 0x11	; 17
    119c:	07 c0       	rjmp	.+14     	; 0x11ac <__udivmodhi4_ep>

0000119e <__udivmodhi4_loop>:
    119e:	aa 1f       	adc	r26, r26
    11a0:	bb 1f       	adc	r27, r27
    11a2:	a6 17       	cp	r26, r22
    11a4:	b7 07       	cpc	r27, r23
    11a6:	10 f0       	brcs	.+4      	; 0x11ac <__udivmodhi4_ep>
    11a8:	a6 1b       	sub	r26, r22
    11aa:	b7 0b       	sbc	r27, r23

000011ac <__udivmodhi4_ep>:
    11ac:	88 1f       	adc	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	5a 95       	dec	r21
    11b2:	a9 f7       	brne	.-22     	; 0x119e <__udivmodhi4_loop>
    11b4:	80 95       	com	r24
    11b6:	90 95       	com	r25
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	08 95       	ret

000011be <printf>:
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	ae 01       	movw	r20, r28
    11c8:	4b 5f       	subi	r20, 0xFB	; 251
    11ca:	5f 4f       	sbci	r21, 0xFF	; 255
    11cc:	fa 01       	movw	r30, r20
    11ce:	61 91       	ld	r22, Z+
    11d0:	71 91       	ld	r23, Z+
    11d2:	af 01       	movw	r20, r30
    11d4:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <__iob+0x2>
    11d8:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <__iob+0x3>
    11dc:	03 d0       	rcall	.+6      	; 0x11e4 <vfprintf>
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	08 95       	ret

000011e4 <vfprintf>:
    11e4:	2f 92       	push	r2
    11e6:	3f 92       	push	r3
    11e8:	4f 92       	push	r4
    11ea:	5f 92       	push	r5
    11ec:	6f 92       	push	r6
    11ee:	7f 92       	push	r7
    11f0:	8f 92       	push	r8
    11f2:	9f 92       	push	r9
    11f4:	af 92       	push	r10
    11f6:	bf 92       	push	r11
    11f8:	cf 92       	push	r12
    11fa:	df 92       	push	r13
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	2b 97       	sbiw	r28, 0x0b	; 11
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	6c 01       	movw	r12, r24
    121a:	7b 01       	movw	r14, r22
    121c:	8a 01       	movw	r16, r20
    121e:	fc 01       	movw	r30, r24
    1220:	17 82       	std	Z+7, r1	; 0x07
    1222:	16 82       	std	Z+6, r1	; 0x06
    1224:	83 81       	ldd	r24, Z+3	; 0x03
    1226:	81 ff       	sbrs	r24, 1
    1228:	bf c1       	rjmp	.+894    	; 0x15a8 <vfprintf+0x3c4>
    122a:	ce 01       	movw	r24, r28
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	3c 01       	movw	r6, r24
    1230:	f6 01       	movw	r30, r12
    1232:	93 81       	ldd	r25, Z+3	; 0x03
    1234:	f7 01       	movw	r30, r14
    1236:	93 fd       	sbrc	r25, 3
    1238:	85 91       	lpm	r24, Z+
    123a:	93 ff       	sbrs	r25, 3
    123c:	81 91       	ld	r24, Z+
    123e:	7f 01       	movw	r14, r30
    1240:	88 23       	and	r24, r24
    1242:	09 f4       	brne	.+2      	; 0x1246 <vfprintf+0x62>
    1244:	ad c1       	rjmp	.+858    	; 0x15a0 <vfprintf+0x3bc>
    1246:	85 32       	cpi	r24, 0x25	; 37
    1248:	39 f4       	brne	.+14     	; 0x1258 <vfprintf+0x74>
    124a:	93 fd       	sbrc	r25, 3
    124c:	85 91       	lpm	r24, Z+
    124e:	93 ff       	sbrs	r25, 3
    1250:	81 91       	ld	r24, Z+
    1252:	7f 01       	movw	r14, r30
    1254:	85 32       	cpi	r24, 0x25	; 37
    1256:	21 f4       	brne	.+8      	; 0x1260 <vfprintf+0x7c>
    1258:	b6 01       	movw	r22, r12
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	d6 d1       	rcall	.+940    	; 0x160a <fputc>
    125e:	e8 cf       	rjmp	.-48     	; 0x1230 <vfprintf+0x4c>
    1260:	91 2c       	mov	r9, r1
    1262:	21 2c       	mov	r2, r1
    1264:	31 2c       	mov	r3, r1
    1266:	ff e1       	ldi	r31, 0x1F	; 31
    1268:	f3 15       	cp	r31, r3
    126a:	d8 f0       	brcs	.+54     	; 0x12a2 <vfprintf+0xbe>
    126c:	8b 32       	cpi	r24, 0x2B	; 43
    126e:	79 f0       	breq	.+30     	; 0x128e <vfprintf+0xaa>
    1270:	38 f4       	brcc	.+14     	; 0x1280 <vfprintf+0x9c>
    1272:	80 32       	cpi	r24, 0x20	; 32
    1274:	79 f0       	breq	.+30     	; 0x1294 <vfprintf+0xb0>
    1276:	83 32       	cpi	r24, 0x23	; 35
    1278:	a1 f4       	brne	.+40     	; 0x12a2 <vfprintf+0xbe>
    127a:	23 2d       	mov	r18, r3
    127c:	20 61       	ori	r18, 0x10	; 16
    127e:	1d c0       	rjmp	.+58     	; 0x12ba <vfprintf+0xd6>
    1280:	8d 32       	cpi	r24, 0x2D	; 45
    1282:	61 f0       	breq	.+24     	; 0x129c <vfprintf+0xb8>
    1284:	80 33       	cpi	r24, 0x30	; 48
    1286:	69 f4       	brne	.+26     	; 0x12a2 <vfprintf+0xbe>
    1288:	23 2d       	mov	r18, r3
    128a:	21 60       	ori	r18, 0x01	; 1
    128c:	16 c0       	rjmp	.+44     	; 0x12ba <vfprintf+0xd6>
    128e:	83 2d       	mov	r24, r3
    1290:	82 60       	ori	r24, 0x02	; 2
    1292:	38 2e       	mov	r3, r24
    1294:	e3 2d       	mov	r30, r3
    1296:	e4 60       	ori	r30, 0x04	; 4
    1298:	3e 2e       	mov	r3, r30
    129a:	2a c0       	rjmp	.+84     	; 0x12f0 <vfprintf+0x10c>
    129c:	f3 2d       	mov	r31, r3
    129e:	f8 60       	ori	r31, 0x08	; 8
    12a0:	1d c0       	rjmp	.+58     	; 0x12dc <vfprintf+0xf8>
    12a2:	37 fc       	sbrc	r3, 7
    12a4:	2d c0       	rjmp	.+90     	; 0x1300 <vfprintf+0x11c>
    12a6:	20 ed       	ldi	r18, 0xD0	; 208
    12a8:	28 0f       	add	r18, r24
    12aa:	2a 30       	cpi	r18, 0x0A	; 10
    12ac:	40 f0       	brcs	.+16     	; 0x12be <vfprintf+0xda>
    12ae:	8e 32       	cpi	r24, 0x2E	; 46
    12b0:	b9 f4       	brne	.+46     	; 0x12e0 <vfprintf+0xfc>
    12b2:	36 fc       	sbrc	r3, 6
    12b4:	75 c1       	rjmp	.+746    	; 0x15a0 <vfprintf+0x3bc>
    12b6:	23 2d       	mov	r18, r3
    12b8:	20 64       	ori	r18, 0x40	; 64
    12ba:	32 2e       	mov	r3, r18
    12bc:	19 c0       	rjmp	.+50     	; 0x12f0 <vfprintf+0x10c>
    12be:	36 fe       	sbrs	r3, 6
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <vfprintf+0xea>
    12c2:	8a e0       	ldi	r24, 0x0A	; 10
    12c4:	98 9e       	mul	r9, r24
    12c6:	20 0d       	add	r18, r0
    12c8:	11 24       	eor	r1, r1
    12ca:	92 2e       	mov	r9, r18
    12cc:	11 c0       	rjmp	.+34     	; 0x12f0 <vfprintf+0x10c>
    12ce:	ea e0       	ldi	r30, 0x0A	; 10
    12d0:	2e 9e       	mul	r2, r30
    12d2:	20 0d       	add	r18, r0
    12d4:	11 24       	eor	r1, r1
    12d6:	22 2e       	mov	r2, r18
    12d8:	f3 2d       	mov	r31, r3
    12da:	f0 62       	ori	r31, 0x20	; 32
    12dc:	3f 2e       	mov	r3, r31
    12de:	08 c0       	rjmp	.+16     	; 0x12f0 <vfprintf+0x10c>
    12e0:	8c 36       	cpi	r24, 0x6C	; 108
    12e2:	21 f4       	brne	.+8      	; 0x12ec <vfprintf+0x108>
    12e4:	83 2d       	mov	r24, r3
    12e6:	80 68       	ori	r24, 0x80	; 128
    12e8:	38 2e       	mov	r3, r24
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <vfprintf+0x10c>
    12ec:	88 36       	cpi	r24, 0x68	; 104
    12ee:	41 f4       	brne	.+16     	; 0x1300 <vfprintf+0x11c>
    12f0:	f7 01       	movw	r30, r14
    12f2:	93 fd       	sbrc	r25, 3
    12f4:	85 91       	lpm	r24, Z+
    12f6:	93 ff       	sbrs	r25, 3
    12f8:	81 91       	ld	r24, Z+
    12fa:	7f 01       	movw	r14, r30
    12fc:	81 11       	cpse	r24, r1
    12fe:	b3 cf       	rjmp	.-154    	; 0x1266 <vfprintf+0x82>
    1300:	98 2f       	mov	r25, r24
    1302:	9f 7d       	andi	r25, 0xDF	; 223
    1304:	95 54       	subi	r25, 0x45	; 69
    1306:	93 30       	cpi	r25, 0x03	; 3
    1308:	28 f4       	brcc	.+10     	; 0x1314 <vfprintf+0x130>
    130a:	0c 5f       	subi	r16, 0xFC	; 252
    130c:	1f 4f       	sbci	r17, 0xFF	; 255
    130e:	9f e3       	ldi	r25, 0x3F	; 63
    1310:	99 83       	std	Y+1, r25	; 0x01
    1312:	0d c0       	rjmp	.+26     	; 0x132e <vfprintf+0x14a>
    1314:	83 36       	cpi	r24, 0x63	; 99
    1316:	31 f0       	breq	.+12     	; 0x1324 <vfprintf+0x140>
    1318:	83 37       	cpi	r24, 0x73	; 115
    131a:	71 f0       	breq	.+28     	; 0x1338 <vfprintf+0x154>
    131c:	83 35       	cpi	r24, 0x53	; 83
    131e:	09 f0       	breq	.+2      	; 0x1322 <vfprintf+0x13e>
    1320:	55 c0       	rjmp	.+170    	; 0x13cc <vfprintf+0x1e8>
    1322:	20 c0       	rjmp	.+64     	; 0x1364 <vfprintf+0x180>
    1324:	f8 01       	movw	r30, r16
    1326:	80 81       	ld	r24, Z
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	0e 5f       	subi	r16, 0xFE	; 254
    132c:	1f 4f       	sbci	r17, 0xFF	; 255
    132e:	88 24       	eor	r8, r8
    1330:	83 94       	inc	r8
    1332:	91 2c       	mov	r9, r1
    1334:	53 01       	movw	r10, r6
    1336:	12 c0       	rjmp	.+36     	; 0x135c <vfprintf+0x178>
    1338:	28 01       	movw	r4, r16
    133a:	f2 e0       	ldi	r31, 0x02	; 2
    133c:	4f 0e       	add	r4, r31
    133e:	51 1c       	adc	r5, r1
    1340:	f8 01       	movw	r30, r16
    1342:	a0 80       	ld	r10, Z
    1344:	b1 80       	ldd	r11, Z+1	; 0x01
    1346:	36 fe       	sbrs	r3, 6
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <vfprintf+0x16c>
    134a:	69 2d       	mov	r22, r9
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <vfprintf+0x170>
    1350:	6f ef       	ldi	r22, 0xFF	; 255
    1352:	7f ef       	ldi	r23, 0xFF	; 255
    1354:	c5 01       	movw	r24, r10
    1356:	4e d1       	rcall	.+668    	; 0x15f4 <strnlen>
    1358:	4c 01       	movw	r8, r24
    135a:	82 01       	movw	r16, r4
    135c:	f3 2d       	mov	r31, r3
    135e:	ff 77       	andi	r31, 0x7F	; 127
    1360:	3f 2e       	mov	r3, r31
    1362:	15 c0       	rjmp	.+42     	; 0x138e <vfprintf+0x1aa>
    1364:	28 01       	movw	r4, r16
    1366:	22 e0       	ldi	r18, 0x02	; 2
    1368:	42 0e       	add	r4, r18
    136a:	51 1c       	adc	r5, r1
    136c:	f8 01       	movw	r30, r16
    136e:	a0 80       	ld	r10, Z
    1370:	b1 80       	ldd	r11, Z+1	; 0x01
    1372:	36 fe       	sbrs	r3, 6
    1374:	03 c0       	rjmp	.+6      	; 0x137c <vfprintf+0x198>
    1376:	69 2d       	mov	r22, r9
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <vfprintf+0x19c>
    137c:	6f ef       	ldi	r22, 0xFF	; 255
    137e:	7f ef       	ldi	r23, 0xFF	; 255
    1380:	c5 01       	movw	r24, r10
    1382:	2d d1       	rcall	.+602    	; 0x15de <strnlen_P>
    1384:	4c 01       	movw	r8, r24
    1386:	f3 2d       	mov	r31, r3
    1388:	f0 68       	ori	r31, 0x80	; 128
    138a:	3f 2e       	mov	r3, r31
    138c:	82 01       	movw	r16, r4
    138e:	33 fc       	sbrc	r3, 3
    1390:	19 c0       	rjmp	.+50     	; 0x13c4 <vfprintf+0x1e0>
    1392:	82 2d       	mov	r24, r2
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	88 16       	cp	r8, r24
    1398:	99 06       	cpc	r9, r25
    139a:	a0 f4       	brcc	.+40     	; 0x13c4 <vfprintf+0x1e0>
    139c:	b6 01       	movw	r22, r12
    139e:	80 e2       	ldi	r24, 0x20	; 32
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	33 d1       	rcall	.+614    	; 0x160a <fputc>
    13a4:	2a 94       	dec	r2
    13a6:	f5 cf       	rjmp	.-22     	; 0x1392 <vfprintf+0x1ae>
    13a8:	f5 01       	movw	r30, r10
    13aa:	37 fc       	sbrc	r3, 7
    13ac:	85 91       	lpm	r24, Z+
    13ae:	37 fe       	sbrs	r3, 7
    13b0:	81 91       	ld	r24, Z+
    13b2:	5f 01       	movw	r10, r30
    13b4:	b6 01       	movw	r22, r12
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	28 d1       	rcall	.+592    	; 0x160a <fputc>
    13ba:	21 10       	cpse	r2, r1
    13bc:	2a 94       	dec	r2
    13be:	21 e0       	ldi	r18, 0x01	; 1
    13c0:	82 1a       	sub	r8, r18
    13c2:	91 08       	sbc	r9, r1
    13c4:	81 14       	cp	r8, r1
    13c6:	91 04       	cpc	r9, r1
    13c8:	79 f7       	brne	.-34     	; 0x13a8 <vfprintf+0x1c4>
    13ca:	e1 c0       	rjmp	.+450    	; 0x158e <vfprintf+0x3aa>
    13cc:	84 36       	cpi	r24, 0x64	; 100
    13ce:	11 f0       	breq	.+4      	; 0x13d4 <vfprintf+0x1f0>
    13d0:	89 36       	cpi	r24, 0x69	; 105
    13d2:	39 f5       	brne	.+78     	; 0x1422 <vfprintf+0x23e>
    13d4:	f8 01       	movw	r30, r16
    13d6:	37 fe       	sbrs	r3, 7
    13d8:	07 c0       	rjmp	.+14     	; 0x13e8 <vfprintf+0x204>
    13da:	60 81       	ld	r22, Z
    13dc:	71 81       	ldd	r23, Z+1	; 0x01
    13de:	82 81       	ldd	r24, Z+2	; 0x02
    13e0:	93 81       	ldd	r25, Z+3	; 0x03
    13e2:	0c 5f       	subi	r16, 0xFC	; 252
    13e4:	1f 4f       	sbci	r17, 0xFF	; 255
    13e6:	08 c0       	rjmp	.+16     	; 0x13f8 <vfprintf+0x214>
    13e8:	60 81       	ld	r22, Z
    13ea:	71 81       	ldd	r23, Z+1	; 0x01
    13ec:	07 2e       	mov	r0, r23
    13ee:	00 0c       	add	r0, r0
    13f0:	88 0b       	sbc	r24, r24
    13f2:	99 0b       	sbc	r25, r25
    13f4:	0e 5f       	subi	r16, 0xFE	; 254
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
    13f8:	f3 2d       	mov	r31, r3
    13fa:	ff 76       	andi	r31, 0x6F	; 111
    13fc:	3f 2e       	mov	r3, r31
    13fe:	97 ff       	sbrs	r25, 7
    1400:	09 c0       	rjmp	.+18     	; 0x1414 <vfprintf+0x230>
    1402:	90 95       	com	r25
    1404:	80 95       	com	r24
    1406:	70 95       	com	r23
    1408:	61 95       	neg	r22
    140a:	7f 4f       	sbci	r23, 0xFF	; 255
    140c:	8f 4f       	sbci	r24, 0xFF	; 255
    140e:	9f 4f       	sbci	r25, 0xFF	; 255
    1410:	f0 68       	ori	r31, 0x80	; 128
    1412:	3f 2e       	mov	r3, r31
    1414:	2a e0       	ldi	r18, 0x0A	; 10
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	a3 01       	movw	r20, r6
    141a:	33 d1       	rcall	.+614    	; 0x1682 <__ultoa_invert>
    141c:	88 2e       	mov	r8, r24
    141e:	86 18       	sub	r8, r6
    1420:	44 c0       	rjmp	.+136    	; 0x14aa <vfprintf+0x2c6>
    1422:	85 37       	cpi	r24, 0x75	; 117
    1424:	31 f4       	brne	.+12     	; 0x1432 <vfprintf+0x24e>
    1426:	23 2d       	mov	r18, r3
    1428:	2f 7e       	andi	r18, 0xEF	; 239
    142a:	b2 2e       	mov	r11, r18
    142c:	2a e0       	ldi	r18, 0x0A	; 10
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	25 c0       	rjmp	.+74     	; 0x147c <vfprintf+0x298>
    1432:	93 2d       	mov	r25, r3
    1434:	99 7f       	andi	r25, 0xF9	; 249
    1436:	b9 2e       	mov	r11, r25
    1438:	8f 36       	cpi	r24, 0x6F	; 111
    143a:	c1 f0       	breq	.+48     	; 0x146c <vfprintf+0x288>
    143c:	18 f4       	brcc	.+6      	; 0x1444 <vfprintf+0x260>
    143e:	88 35       	cpi	r24, 0x58	; 88
    1440:	79 f0       	breq	.+30     	; 0x1460 <vfprintf+0x27c>
    1442:	ae c0       	rjmp	.+348    	; 0x15a0 <vfprintf+0x3bc>
    1444:	80 37       	cpi	r24, 0x70	; 112
    1446:	19 f0       	breq	.+6      	; 0x144e <vfprintf+0x26a>
    1448:	88 37       	cpi	r24, 0x78	; 120
    144a:	21 f0       	breq	.+8      	; 0x1454 <vfprintf+0x270>
    144c:	a9 c0       	rjmp	.+338    	; 0x15a0 <vfprintf+0x3bc>
    144e:	e9 2f       	mov	r30, r25
    1450:	e0 61       	ori	r30, 0x10	; 16
    1452:	be 2e       	mov	r11, r30
    1454:	b4 fe       	sbrs	r11, 4
    1456:	0d c0       	rjmp	.+26     	; 0x1472 <vfprintf+0x28e>
    1458:	fb 2d       	mov	r31, r11
    145a:	f4 60       	ori	r31, 0x04	; 4
    145c:	bf 2e       	mov	r11, r31
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <vfprintf+0x28e>
    1460:	34 fe       	sbrs	r3, 4
    1462:	0a c0       	rjmp	.+20     	; 0x1478 <vfprintf+0x294>
    1464:	29 2f       	mov	r18, r25
    1466:	26 60       	ori	r18, 0x06	; 6
    1468:	b2 2e       	mov	r11, r18
    146a:	06 c0       	rjmp	.+12     	; 0x1478 <vfprintf+0x294>
    146c:	28 e0       	ldi	r18, 0x08	; 8
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	05 c0       	rjmp	.+10     	; 0x147c <vfprintf+0x298>
    1472:	20 e1       	ldi	r18, 0x10	; 16
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	02 c0       	rjmp	.+4      	; 0x147c <vfprintf+0x298>
    1478:	20 e1       	ldi	r18, 0x10	; 16
    147a:	32 e0       	ldi	r19, 0x02	; 2
    147c:	f8 01       	movw	r30, r16
    147e:	b7 fe       	sbrs	r11, 7
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <vfprintf+0x2ac>
    1482:	60 81       	ld	r22, Z
    1484:	71 81       	ldd	r23, Z+1	; 0x01
    1486:	82 81       	ldd	r24, Z+2	; 0x02
    1488:	93 81       	ldd	r25, Z+3	; 0x03
    148a:	0c 5f       	subi	r16, 0xFC	; 252
    148c:	1f 4f       	sbci	r17, 0xFF	; 255
    148e:	06 c0       	rjmp	.+12     	; 0x149c <vfprintf+0x2b8>
    1490:	60 81       	ld	r22, Z
    1492:	71 81       	ldd	r23, Z+1	; 0x01
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 5f       	subi	r16, 0xFE	; 254
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	a3 01       	movw	r20, r6
    149e:	f1 d0       	rcall	.+482    	; 0x1682 <__ultoa_invert>
    14a0:	88 2e       	mov	r8, r24
    14a2:	86 18       	sub	r8, r6
    14a4:	fb 2d       	mov	r31, r11
    14a6:	ff 77       	andi	r31, 0x7F	; 127
    14a8:	3f 2e       	mov	r3, r31
    14aa:	36 fe       	sbrs	r3, 6
    14ac:	0d c0       	rjmp	.+26     	; 0x14c8 <vfprintf+0x2e4>
    14ae:	23 2d       	mov	r18, r3
    14b0:	2e 7f       	andi	r18, 0xFE	; 254
    14b2:	a2 2e       	mov	r10, r18
    14b4:	89 14       	cp	r8, r9
    14b6:	58 f4       	brcc	.+22     	; 0x14ce <vfprintf+0x2ea>
    14b8:	34 fe       	sbrs	r3, 4
    14ba:	0b c0       	rjmp	.+22     	; 0x14d2 <vfprintf+0x2ee>
    14bc:	32 fc       	sbrc	r3, 2
    14be:	09 c0       	rjmp	.+18     	; 0x14d2 <vfprintf+0x2ee>
    14c0:	83 2d       	mov	r24, r3
    14c2:	8e 7e       	andi	r24, 0xEE	; 238
    14c4:	a8 2e       	mov	r10, r24
    14c6:	05 c0       	rjmp	.+10     	; 0x14d2 <vfprintf+0x2ee>
    14c8:	b8 2c       	mov	r11, r8
    14ca:	a3 2c       	mov	r10, r3
    14cc:	03 c0       	rjmp	.+6      	; 0x14d4 <vfprintf+0x2f0>
    14ce:	b8 2c       	mov	r11, r8
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <vfprintf+0x2f0>
    14d2:	b9 2c       	mov	r11, r9
    14d4:	a4 fe       	sbrs	r10, 4
    14d6:	0f c0       	rjmp	.+30     	; 0x14f6 <vfprintf+0x312>
    14d8:	fe 01       	movw	r30, r28
    14da:	e8 0d       	add	r30, r8
    14dc:	f1 1d       	adc	r31, r1
    14de:	80 81       	ld	r24, Z
    14e0:	80 33       	cpi	r24, 0x30	; 48
    14e2:	21 f4       	brne	.+8      	; 0x14ec <vfprintf+0x308>
    14e4:	9a 2d       	mov	r25, r10
    14e6:	99 7e       	andi	r25, 0xE9	; 233
    14e8:	a9 2e       	mov	r10, r25
    14ea:	09 c0       	rjmp	.+18     	; 0x14fe <vfprintf+0x31a>
    14ec:	a2 fe       	sbrs	r10, 2
    14ee:	06 c0       	rjmp	.+12     	; 0x14fc <vfprintf+0x318>
    14f0:	b3 94       	inc	r11
    14f2:	b3 94       	inc	r11
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <vfprintf+0x31a>
    14f6:	8a 2d       	mov	r24, r10
    14f8:	86 78       	andi	r24, 0x86	; 134
    14fa:	09 f0       	breq	.+2      	; 0x14fe <vfprintf+0x31a>
    14fc:	b3 94       	inc	r11
    14fe:	a3 fc       	sbrc	r10, 3
    1500:	10 c0       	rjmp	.+32     	; 0x1522 <vfprintf+0x33e>
    1502:	a0 fe       	sbrs	r10, 0
    1504:	06 c0       	rjmp	.+12     	; 0x1512 <vfprintf+0x32e>
    1506:	b2 14       	cp	r11, r2
    1508:	80 f4       	brcc	.+32     	; 0x152a <vfprintf+0x346>
    150a:	28 0c       	add	r2, r8
    150c:	92 2c       	mov	r9, r2
    150e:	9b 18       	sub	r9, r11
    1510:	0d c0       	rjmp	.+26     	; 0x152c <vfprintf+0x348>
    1512:	b2 14       	cp	r11, r2
    1514:	58 f4       	brcc	.+22     	; 0x152c <vfprintf+0x348>
    1516:	b6 01       	movw	r22, r12
    1518:	80 e2       	ldi	r24, 0x20	; 32
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	76 d0       	rcall	.+236    	; 0x160a <fputc>
    151e:	b3 94       	inc	r11
    1520:	f8 cf       	rjmp	.-16     	; 0x1512 <vfprintf+0x32e>
    1522:	b2 14       	cp	r11, r2
    1524:	18 f4       	brcc	.+6      	; 0x152c <vfprintf+0x348>
    1526:	2b 18       	sub	r2, r11
    1528:	02 c0       	rjmp	.+4      	; 0x152e <vfprintf+0x34a>
    152a:	98 2c       	mov	r9, r8
    152c:	21 2c       	mov	r2, r1
    152e:	a4 fe       	sbrs	r10, 4
    1530:	0f c0       	rjmp	.+30     	; 0x1550 <vfprintf+0x36c>
    1532:	b6 01       	movw	r22, r12
    1534:	80 e3       	ldi	r24, 0x30	; 48
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	68 d0       	rcall	.+208    	; 0x160a <fputc>
    153a:	a2 fe       	sbrs	r10, 2
    153c:	16 c0       	rjmp	.+44     	; 0x156a <vfprintf+0x386>
    153e:	a1 fc       	sbrc	r10, 1
    1540:	03 c0       	rjmp	.+6      	; 0x1548 <vfprintf+0x364>
    1542:	88 e7       	ldi	r24, 0x78	; 120
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 c0       	rjmp	.+4      	; 0x154c <vfprintf+0x368>
    1548:	88 e5       	ldi	r24, 0x58	; 88
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	b6 01       	movw	r22, r12
    154e:	0c c0       	rjmp	.+24     	; 0x1568 <vfprintf+0x384>
    1550:	8a 2d       	mov	r24, r10
    1552:	86 78       	andi	r24, 0x86	; 134
    1554:	51 f0       	breq	.+20     	; 0x156a <vfprintf+0x386>
    1556:	a1 fe       	sbrs	r10, 1
    1558:	02 c0       	rjmp	.+4      	; 0x155e <vfprintf+0x37a>
    155a:	8b e2       	ldi	r24, 0x2B	; 43
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <vfprintf+0x37c>
    155e:	80 e2       	ldi	r24, 0x20	; 32
    1560:	a7 fc       	sbrc	r10, 7
    1562:	8d e2       	ldi	r24, 0x2D	; 45
    1564:	b6 01       	movw	r22, r12
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	50 d0       	rcall	.+160    	; 0x160a <fputc>
    156a:	89 14       	cp	r8, r9
    156c:	30 f4       	brcc	.+12     	; 0x157a <vfprintf+0x396>
    156e:	b6 01       	movw	r22, r12
    1570:	80 e3       	ldi	r24, 0x30	; 48
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	4a d0       	rcall	.+148    	; 0x160a <fputc>
    1576:	9a 94       	dec	r9
    1578:	f8 cf       	rjmp	.-16     	; 0x156a <vfprintf+0x386>
    157a:	8a 94       	dec	r8
    157c:	f3 01       	movw	r30, r6
    157e:	e8 0d       	add	r30, r8
    1580:	f1 1d       	adc	r31, r1
    1582:	80 81       	ld	r24, Z
    1584:	b6 01       	movw	r22, r12
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	40 d0       	rcall	.+128    	; 0x160a <fputc>
    158a:	81 10       	cpse	r8, r1
    158c:	f6 cf       	rjmp	.-20     	; 0x157a <vfprintf+0x396>
    158e:	22 20       	and	r2, r2
    1590:	09 f4       	brne	.+2      	; 0x1594 <vfprintf+0x3b0>
    1592:	4e ce       	rjmp	.-868    	; 0x1230 <vfprintf+0x4c>
    1594:	b6 01       	movw	r22, r12
    1596:	80 e2       	ldi	r24, 0x20	; 32
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	37 d0       	rcall	.+110    	; 0x160a <fputc>
    159c:	2a 94       	dec	r2
    159e:	f7 cf       	rjmp	.-18     	; 0x158e <vfprintf+0x3aa>
    15a0:	f6 01       	movw	r30, r12
    15a2:	86 81       	ldd	r24, Z+6	; 0x06
    15a4:	97 81       	ldd	r25, Z+7	; 0x07
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <vfprintf+0x3c8>
    15a8:	8f ef       	ldi	r24, 0xFF	; 255
    15aa:	9f ef       	ldi	r25, 0xFF	; 255
    15ac:	2b 96       	adiw	r28, 0x0b	; 11
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	bf 90       	pop	r11
    15ca:	af 90       	pop	r10
    15cc:	9f 90       	pop	r9
    15ce:	8f 90       	pop	r8
    15d0:	7f 90       	pop	r7
    15d2:	6f 90       	pop	r6
    15d4:	5f 90       	pop	r5
    15d6:	4f 90       	pop	r4
    15d8:	3f 90       	pop	r3
    15da:	2f 90       	pop	r2
    15dc:	08 95       	ret

000015de <strnlen_P>:
    15de:	fc 01       	movw	r30, r24
    15e0:	05 90       	lpm	r0, Z+
    15e2:	61 50       	subi	r22, 0x01	; 1
    15e4:	70 40       	sbci	r23, 0x00	; 0
    15e6:	01 10       	cpse	r0, r1
    15e8:	d8 f7       	brcc	.-10     	; 0x15e0 <strnlen_P+0x2>
    15ea:	80 95       	com	r24
    15ec:	90 95       	com	r25
    15ee:	8e 0f       	add	r24, r30
    15f0:	9f 1f       	adc	r25, r31
    15f2:	08 95       	ret

000015f4 <strnlen>:
    15f4:	fc 01       	movw	r30, r24
    15f6:	61 50       	subi	r22, 0x01	; 1
    15f8:	70 40       	sbci	r23, 0x00	; 0
    15fa:	01 90       	ld	r0, Z+
    15fc:	01 10       	cpse	r0, r1
    15fe:	d8 f7       	brcc	.-10     	; 0x15f6 <strnlen+0x2>
    1600:	80 95       	com	r24
    1602:	90 95       	com	r25
    1604:	8e 0f       	add	r24, r30
    1606:	9f 1f       	adc	r25, r31
    1608:	08 95       	ret

0000160a <fputc>:
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	fb 01       	movw	r30, r22
    1614:	23 81       	ldd	r18, Z+3	; 0x03
    1616:	21 fd       	sbrc	r18, 1
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <fputc+0x16>
    161a:	8f ef       	ldi	r24, 0xFF	; 255
    161c:	9f ef       	ldi	r25, 0xFF	; 255
    161e:	2c c0       	rjmp	.+88     	; 0x1678 <fputc+0x6e>
    1620:	22 ff       	sbrs	r18, 2
    1622:	16 c0       	rjmp	.+44     	; 0x1650 <fputc+0x46>
    1624:	46 81       	ldd	r20, Z+6	; 0x06
    1626:	57 81       	ldd	r21, Z+7	; 0x07
    1628:	24 81       	ldd	r18, Z+4	; 0x04
    162a:	35 81       	ldd	r19, Z+5	; 0x05
    162c:	42 17       	cp	r20, r18
    162e:	53 07       	cpc	r21, r19
    1630:	44 f4       	brge	.+16     	; 0x1642 <fputc+0x38>
    1632:	a0 81       	ld	r26, Z
    1634:	b1 81       	ldd	r27, Z+1	; 0x01
    1636:	9d 01       	movw	r18, r26
    1638:	2f 5f       	subi	r18, 0xFF	; 255
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
    163c:	31 83       	std	Z+1, r19	; 0x01
    163e:	20 83       	st	Z, r18
    1640:	8c 93       	st	X, r24
    1642:	26 81       	ldd	r18, Z+6	; 0x06
    1644:	37 81       	ldd	r19, Z+7	; 0x07
    1646:	2f 5f       	subi	r18, 0xFF	; 255
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
    164a:	37 83       	std	Z+7, r19	; 0x07
    164c:	26 83       	std	Z+6, r18	; 0x06
    164e:	14 c0       	rjmp	.+40     	; 0x1678 <fputc+0x6e>
    1650:	8b 01       	movw	r16, r22
    1652:	ec 01       	movw	r28, r24
    1654:	fb 01       	movw	r30, r22
    1656:	00 84       	ldd	r0, Z+8	; 0x08
    1658:	f1 85       	ldd	r31, Z+9	; 0x09
    165a:	e0 2d       	mov	r30, r0
    165c:	09 95       	icall
    165e:	89 2b       	or	r24, r25
    1660:	e1 f6       	brne	.-72     	; 0x161a <fputc+0x10>
    1662:	d8 01       	movw	r26, r16
    1664:	16 96       	adiw	r26, 0x06	; 6
    1666:	8d 91       	ld	r24, X+
    1668:	9c 91       	ld	r25, X
    166a:	17 97       	sbiw	r26, 0x07	; 7
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	17 96       	adiw	r26, 0x07	; 7
    1670:	9c 93       	st	X, r25
    1672:	8e 93       	st	-X, r24
    1674:	16 97       	sbiw	r26, 0x06	; 6
    1676:	ce 01       	movw	r24, r28
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	08 95       	ret

00001682 <__ultoa_invert>:
    1682:	fa 01       	movw	r30, r20
    1684:	aa 27       	eor	r26, r26
    1686:	28 30       	cpi	r18, 0x08	; 8
    1688:	51 f1       	breq	.+84     	; 0x16de <__ultoa_invert+0x5c>
    168a:	20 31       	cpi	r18, 0x10	; 16
    168c:	81 f1       	breq	.+96     	; 0x16ee <__ultoa_invert+0x6c>
    168e:	e8 94       	clt
    1690:	6f 93       	push	r22
    1692:	6e 7f       	andi	r22, 0xFE	; 254
    1694:	6e 5f       	subi	r22, 0xFE	; 254
    1696:	7f 4f       	sbci	r23, 0xFF	; 255
    1698:	8f 4f       	sbci	r24, 0xFF	; 255
    169a:	9f 4f       	sbci	r25, 0xFF	; 255
    169c:	af 4f       	sbci	r26, 0xFF	; 255
    169e:	b1 e0       	ldi	r27, 0x01	; 1
    16a0:	3e d0       	rcall	.+124    	; 0x171e <__ultoa_invert+0x9c>
    16a2:	b4 e0       	ldi	r27, 0x04	; 4
    16a4:	3c d0       	rcall	.+120    	; 0x171e <__ultoa_invert+0x9c>
    16a6:	67 0f       	add	r22, r23
    16a8:	78 1f       	adc	r23, r24
    16aa:	89 1f       	adc	r24, r25
    16ac:	9a 1f       	adc	r25, r26
    16ae:	a1 1d       	adc	r26, r1
    16b0:	68 0f       	add	r22, r24
    16b2:	79 1f       	adc	r23, r25
    16b4:	8a 1f       	adc	r24, r26
    16b6:	91 1d       	adc	r25, r1
    16b8:	a1 1d       	adc	r26, r1
    16ba:	6a 0f       	add	r22, r26
    16bc:	71 1d       	adc	r23, r1
    16be:	81 1d       	adc	r24, r1
    16c0:	91 1d       	adc	r25, r1
    16c2:	a1 1d       	adc	r26, r1
    16c4:	20 d0       	rcall	.+64     	; 0x1706 <__ultoa_invert+0x84>
    16c6:	09 f4       	brne	.+2      	; 0x16ca <__ultoa_invert+0x48>
    16c8:	68 94       	set
    16ca:	3f 91       	pop	r19
    16cc:	2a e0       	ldi	r18, 0x0A	; 10
    16ce:	26 9f       	mul	r18, r22
    16d0:	11 24       	eor	r1, r1
    16d2:	30 19       	sub	r19, r0
    16d4:	30 5d       	subi	r19, 0xD0	; 208
    16d6:	31 93       	st	Z+, r19
    16d8:	de f6       	brtc	.-74     	; 0x1690 <__ultoa_invert+0xe>
    16da:	cf 01       	movw	r24, r30
    16dc:	08 95       	ret
    16de:	46 2f       	mov	r20, r22
    16e0:	47 70       	andi	r20, 0x07	; 7
    16e2:	40 5d       	subi	r20, 0xD0	; 208
    16e4:	41 93       	st	Z+, r20
    16e6:	b3 e0       	ldi	r27, 0x03	; 3
    16e8:	0f d0       	rcall	.+30     	; 0x1708 <__ultoa_invert+0x86>
    16ea:	c9 f7       	brne	.-14     	; 0x16de <__ultoa_invert+0x5c>
    16ec:	f6 cf       	rjmp	.-20     	; 0x16da <__ultoa_invert+0x58>
    16ee:	46 2f       	mov	r20, r22
    16f0:	4f 70       	andi	r20, 0x0F	; 15
    16f2:	40 5d       	subi	r20, 0xD0	; 208
    16f4:	4a 33       	cpi	r20, 0x3A	; 58
    16f6:	18 f0       	brcs	.+6      	; 0x16fe <__ultoa_invert+0x7c>
    16f8:	49 5d       	subi	r20, 0xD9	; 217
    16fa:	31 fd       	sbrc	r19, 1
    16fc:	40 52       	subi	r20, 0x20	; 32
    16fe:	41 93       	st	Z+, r20
    1700:	02 d0       	rcall	.+4      	; 0x1706 <__ultoa_invert+0x84>
    1702:	a9 f7       	brne	.-22     	; 0x16ee <__ultoa_invert+0x6c>
    1704:	ea cf       	rjmp	.-44     	; 0x16da <__ultoa_invert+0x58>
    1706:	b4 e0       	ldi	r27, 0x04	; 4
    1708:	a6 95       	lsr	r26
    170a:	97 95       	ror	r25
    170c:	87 95       	ror	r24
    170e:	77 95       	ror	r23
    1710:	67 95       	ror	r22
    1712:	ba 95       	dec	r27
    1714:	c9 f7       	brne	.-14     	; 0x1708 <__ultoa_invert+0x86>
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	61 05       	cpc	r22, r1
    171a:	71 05       	cpc	r23, r1
    171c:	08 95       	ret
    171e:	9b 01       	movw	r18, r22
    1720:	ac 01       	movw	r20, r24
    1722:	0a 2e       	mov	r0, r26
    1724:	06 94       	lsr	r0
    1726:	57 95       	ror	r21
    1728:	47 95       	ror	r20
    172a:	37 95       	ror	r19
    172c:	27 95       	ror	r18
    172e:	ba 95       	dec	r27
    1730:	c9 f7       	brne	.-14     	; 0x1724 <__ultoa_invert+0xa2>
    1732:	62 0f       	add	r22, r18
    1734:	73 1f       	adc	r23, r19
    1736:	84 1f       	adc	r24, r20
    1738:	95 1f       	adc	r25, r21
    173a:	a0 1d       	adc	r26, r0
    173c:	08 95       	ret

0000173e <_exit>:
    173e:	f8 94       	cli

00001740 <__stop_program>:
    1740:	ff cf       	rjmp	.-2      	; 0x1740 <__stop_program>
