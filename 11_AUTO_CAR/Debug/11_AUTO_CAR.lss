
11_AUTO_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00001522  000015b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001522  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000671  0080014e  0080014e  00001604  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019fe  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000109e  00000000  00000000  00003286  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f3b  00000000  00000000  00004324  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c0  00000000  00000000  00005260  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d8  00000000  00000000  00005720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000094d  00000000  00000000  00005ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00006845  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	77 c0       	rjmp	.+238    	; 0xf0 <__ctors_end>
       2:	00 00       	nop
       4:	93 c0       	rjmp	.+294    	; 0x12c <__bad_interrupt>
       6:	00 00       	nop
       8:	91 c0       	rjmp	.+290    	; 0x12c <__bad_interrupt>
       a:	00 00       	nop
       c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	42 c4       	rjmp	.+2180   	; 0x89a <__vector_5>
      16:	00 00       	nop
      18:	8d c4       	rjmp	.+2330   	; 0x934 <__vector_6>
      1a:	00 00       	nop
      1c:	d8 c4       	rjmp	.+2480   	; 0x9ce <__vector_7>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	77 c0       	rjmp	.+238    	; 0x12c <__bad_interrupt>
      3e:	00 00       	nop
      40:	f7 c1       	rjmp	.+1006   	; 0x430 <__vector_16>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	53 c3       	rjmp	.+1702   	; 0x6f0 <__vector_18>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	6b c0       	rjmp	.+214    	; 0x12c <__bad_interrupt>
      56:	00 00       	nop
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	63 c0       	rjmp	.+198    	; 0x12c <__bad_interrupt>
      66:	00 00       	nop
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
      76:	00 00       	nop
      78:	cd c3       	rjmp	.+1946   	; 0x814 <__vector_30>
      7a:	00 00       	nop
      7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	04 02       	muls	r16, r20
      8e:	11 02       	muls	r17, r17
      90:	11 02       	muls	r17, r17
      92:	11 02       	muls	r17, r17
      94:	00 02       	muls	r16, r16
      96:	11 02       	muls	r17, r17
      98:	11 02       	muls	r17, r17
      9a:	11 02       	muls	r17, r17
      9c:	11 02       	muls	r17, r17
      9e:	11 02       	muls	r17, r17
      a0:	08 02       	muls	r16, r24
      a2:	11 02       	muls	r17, r17
      a4:	11 02       	muls	r17, r17
      a6:	11 02       	muls	r17, r17
      a8:	11 02       	muls	r17, r17
      aa:	11 02       	muls	r17, r17
      ac:	0c 02       	muls	r16, r28
      ae:	10 02       	muls	r17, r16
      b0:	11 02       	muls	r17, r17
      b2:	11 02       	muls	r17, r17
      b4:	11 02       	muls	r17, r17
      b6:	11 02       	muls	r17, r17
      b8:	11 02       	muls	r17, r17
      ba:	11 02       	muls	r17, r17
      bc:	11 02       	muls	r17, r17
      be:	11 02       	muls	r17, r17
      c0:	11 02       	muls	r17, r17
      c2:	11 02       	muls	r17, r17
      c4:	11 02       	muls	r17, r17
      c6:	11 02       	muls	r17, r17
      c8:	11 02       	muls	r17, r17
      ca:	11 02       	muls	r17, r17
      cc:	04 02       	muls	r16, r20
      ce:	11 02       	muls	r17, r17
      d0:	11 02       	muls	r17, r17
      d2:	11 02       	muls	r17, r17
      d4:	00 02       	muls	r16, r16
      d6:	11 02       	muls	r17, r17
      d8:	11 02       	muls	r17, r17
      da:	11 02       	muls	r17, r17
      dc:	11 02       	muls	r17, r17
      de:	11 02       	muls	r17, r17
      e0:	08 02       	muls	r16, r24
      e2:	11 02       	muls	r17, r17
      e4:	11 02       	muls	r17, r17
      e6:	11 02       	muls	r17, r17
      e8:	11 02       	muls	r17, r17
      ea:	11 02       	muls	r17, r17
      ec:	0c 02       	muls	r16, r28
      ee:	10 02       	muls	r17, r16

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d0 e1       	ldi	r29, 0x10	; 16
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	11 e0       	ldi	r17, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	e2 e2       	ldi	r30, 0x22	; 34
     104:	f5 e1       	ldi	r31, 0x15	; 21
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0b bf       	out	0x3b, r16	; 59
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x14>
     10c:	07 90       	elpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	ae 34       	cpi	r26, 0x4E	; 78
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0x10>

00000116 <__do_clear_bss>:
     116:	27 e0       	ldi	r18, 0x07	; 7
     118:	ae e4       	ldi	r26, 0x4E	; 78
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	af 3b       	cpi	r26, 0xBF	; 191
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	ed d1       	rcall	.+986    	; 0x502 <main>
     128:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <init_button>:

int button0_state = 0;

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN /*| 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN*/);
     12e:	8a b3       	in	r24, 0x1a	; 26
     130:	8f 7b       	andi	r24, 0xBF	; 191
     132:	8a bb       	out	0x1a, r24	; 26
     134:	08 95       	ret

00000136 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE/*, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE*/}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
     136:	29 b3       	in	r18, 0x19	; 25
     138:	42 2f       	mov	r20, r18
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	02 c0       	rjmp	.+4      	; 0x146 <get_button+0x10>
     142:	22 0f       	add	r18, r18
     144:	33 1f       	adc	r19, r19
     146:	6a 95       	dec	r22
     148:	e2 f7       	brpl	.-8      	; 0x142 <get_button+0xc>
     14a:	24 23       	and	r18, r20
     14c:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
     14e:	21 15       	cp	r18, r1
     150:	31 05       	cpc	r19, r1
     152:	b9 f0       	breq	.+46     	; 0x182 <get_button+0x4c>
     154:	fc 01       	movw	r30, r24
     156:	e2 5b       	subi	r30, 0xB2	; 178
     158:	fe 4f       	sbci	r31, 0xFE	; 254
     15a:	40 81       	ld	r20, Z
     15c:	41 11       	cpse	r20, r1
     15e:	11 c0       	rjmp	.+34     	; 0x182 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     160:	2f ef       	ldi	r18, 0xFF	; 255
     162:	3d ee       	ldi	r19, 0xED	; 237
     164:	42 e0       	ldi	r20, 0x02	; 2
     166:	21 50       	subi	r18, 0x01	; 1
     168:	30 40       	sbci	r19, 0x00	; 0
     16a:	40 40       	sbci	r20, 0x00	; 0
     16c:	e1 f7       	brne	.-8      	; 0x166 <get_button+0x30>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <get_button+0x3a>
     170:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     172:	fc 01       	movw	r30, r24
     174:	e2 5b       	subi	r30, 0xB2	; 178
     176:	fe 4f       	sbci	r31, 0xFE	; 254
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     182:	fc 01       	movw	r30, r24
     184:	e2 5b       	subi	r30, 0xB2	; 178
     186:	fe 4f       	sbci	r31, 0xFE	; 254
     188:	40 81       	ld	r20, Z
     18a:	41 30       	cpi	r20, 0x01	; 1
     18c:	91 f4       	brne	.+36     	; 0x1b2 <get_button+0x7c>
     18e:	23 2b       	or	r18, r19
     190:	99 f4       	brne	.+38     	; 0x1b8 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     192:	fc 01       	movw	r30, r24
     194:	e2 5b       	subi	r30, 0xB2	; 178
     196:	fe 4f       	sbci	r31, 0xFE	; 254
     198:	10 82       	st	Z, r1
     19a:	8f ef       	ldi	r24, 0xFF	; 255
     19c:	9d ee       	ldi	r25, 0xED	; 237
     19e:	22 e0       	ldi	r18, 0x02	; 2
     1a0:	81 50       	subi	r24, 0x01	; 1
     1a2:	90 40       	sbci	r25, 0x00	; 0
     1a4:	20 40       	sbci	r18, 0x00	; 0
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <get_button+0x6a>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <get_button+0x74>
     1aa:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	08 95       	ret
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
}
     1bc:	08 95       	ret

000001be <auto_mode_check>:

void auto_mode_check(void)
{
	if (get_button(BUTTON0, BUTTON0PIN))
     1be:	66 e0       	ldi	r22, 0x06	; 6
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	b7 df       	rcall	.-146    	; 0x136 <get_button>
     1c8:	89 2b       	or	r24, r25
     1ca:	71 f0       	breq	.+28     	; 0x1e8 <auto_mode_check+0x2a>
	{
		button0_state = !button0_state;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <button0_state>
     1d4:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <button0_state+0x1>
     1d8:	23 2b       	or	r18, r19
     1da:	11 f0       	breq	.+4      	; 0x1e0 <auto_mode_check+0x22>
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <button0_state+0x1>
     1e4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <button0_state>
	}
	
	if (button0_state)
     1e8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <button0_state>
     1ec:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <button0_state+0x1>
     1f0:	89 2b       	or	r24, r25
     1f2:	39 f0       	breq	.+14     	; 0x202 <auto_mode_check+0x44>
	{
		AUTO_RUN_LED_PORT |= 1 << AUTO_RUN_LED_PIN; // LED ON
     1f4:	e5 e6       	ldi	r30, 0x65	; 101
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	88 60       	ori	r24, 0x08	; 8
		auto_start();
     1fc:	80 83       	st	Z, r24
     1fe:	08 d2       	rcall	.+1040   	; 0x610 <auto_start>
     200:	06 c0       	rjmp	.+12     	; 0x20e <auto_mode_check+0x50>
	}
	else
	{
		AUTO_RUN_LED_PORT &= ~(1 << AUTO_RUN_LED_PIN); // LED OFF
     202:	e5 e6       	ldi	r30, 0x65	; 101
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	80 81       	ld	r24, Z
     208:	87 7f       	andi	r24, 0xF7	; 247
		stop();
     20a:	80 83       	st	Z, r24
     20c:	f4 d1       	rcall	.+1000   	; 0x5f6 <stop>
	}
	func_state = AUTO_MODE;
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <func_state+0x1>
     216:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <func_state>
     21a:	08 95       	ret

0000021c <init_fnd>:
				state_mod = 0;
			}
		}
		
		fp_clock[state_mod]();
	}
     21c:	8f ef       	ldi	r24, 0xFF	; 255
     21e:	84 bb       	out	0x14, r24	; 20
     220:	e1 e6       	ldi	r30, 0x61	; 97
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	80 6f       	ori	r24, 0xF0	; 240
     228:	80 83       	st	Z, r24
     22a:	15 ba       	out	0x15, r1	; 21
     22c:	08 95       	ret

0000022e <fnd_display>:
}



void fnd_display(void)
{
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	2b 97       	sbiw	r28, 0x0b	; 11
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
#if 0 // common anode
						 // 0     1     2     3     4     5     6     7     8     9     .
	uint8_t fnd_font[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xd8, 0x80, 0x90, 0x7f};
#else // common cathod
						  // 0      1      2      3      4      5      6      7      8      9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
     242:	8b e0       	ldi	r24, 0x0B	; 11
     244:	e6 e1       	ldi	r30, 0x16	; 22
     246:	f1 e0       	ldi	r31, 0x01	; 1
     248:	de 01       	movw	r26, r28
     24a:	11 96       	adiw	r26, 0x01	; 1
     24c:	01 90       	ld	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	8a 95       	dec	r24
     252:	e1 f7       	brne	.-8      	; 0x24c <fnd_display+0x1e>
#endif

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     254:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <digit_select.1777>
     258:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <digit_select.1777+0x1>
     25c:	81 30       	cpi	r24, 0x01	; 1
     25e:	91 05       	cpc	r25, r1
     260:	29 f1       	breq	.+74     	; 0x2ac <fnd_display+0x7e>
     262:	1c f4       	brge	.+6      	; 0x26a <fnd_display+0x3c>
     264:	89 2b       	or	r24, r25
     266:	49 f0       	breq	.+18     	; 0x27a <fnd_display+0x4c>
     268:	99 c0       	rjmp	.+306    	; 0x39c <fnd_display+0x16e>
     26a:	82 30       	cpi	r24, 0x02	; 2
     26c:	91 05       	cpc	r25, r1
     26e:	09 f4       	brne	.+2      	; 0x272 <fnd_display+0x44>
     270:	3d c0       	rjmp	.+122    	; 0x2ec <fnd_display+0xbe>
     272:	03 97       	sbiw	r24, 0x03	; 3
     274:	09 f4       	brne	.+2      	; 0x278 <fnd_display+0x4a>
     276:	73 c0       	rjmp	.+230    	; 0x35e <fnd_display+0x130>
     278:	91 c0       	rjmp	.+290    	; 0x39c <fnd_display+0x16e>
	{
		case 0 :
#if 0 // common anode
			FND_DIGIT_PORT = 0x80;
#else // common cathod
			FND_DIGIT_PORT = ~0x80;
     27a:	8f e7       	ldi	r24, 0x7F	; 127
     27c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
#endif
			FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     280:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <sec_count>
     284:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <sec_count+0x1>
     288:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sec_count+0x2>
     28c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <sec_count+0x3>
     290:	2a e0       	ldi	r18, 0x0A	; 10
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	43 d6       	rcall	.+3206   	; 0xf20 <__udivmodsi4>
     29a:	e1 e0       	ldi	r30, 0x01	; 1
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	ec 0f       	add	r30, r28
     2a0:	fd 1f       	adc	r31, r29
     2a2:	e6 0f       	add	r30, r22
     2a4:	f7 1f       	adc	r31, r23
     2a6:	80 81       	ld	r24, Z
     2a8:	85 bb       	out	0x15, r24	; 21
		break;
     2aa:	78 c0       	rjmp	.+240    	; 0x39c <fnd_display+0x16e>

		case 1 :
#if 0 // common anode
		FND_DIGIT_PORT = 0x40;
#else // common cathod
		FND_DIGIT_PORT = ~0x40;
     2ac:	8f eb       	ldi	r24, 0xBF	; 191
     2ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
#endif
		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     2b2:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <sec_count>
     2b6:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <sec_count+0x1>
     2ba:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sec_count+0x2>
     2be:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <sec_count+0x3>
     2c2:	2a e0       	ldi	r18, 0x0A	; 10
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	2a d6       	rcall	.+3156   	; 0xf20 <__udivmodsi4>
     2cc:	ca 01       	movw	r24, r20
     2ce:	b9 01       	movw	r22, r18
     2d0:	26 e0       	ldi	r18, 0x06	; 6
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	23 d6       	rcall	.+3142   	; 0xf20 <__udivmodsi4>
     2da:	e1 e0       	ldi	r30, 0x01	; 1
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	ec 0f       	add	r30, r28
     2e0:	fd 1f       	adc	r31, r29
     2e2:	e6 0f       	add	r30, r22
     2e4:	f7 1f       	adc	r31, r23
     2e6:	80 81       	ld	r24, Z
     2e8:	85 bb       	out	0x15, r24	; 21
		break;
     2ea:	58 c0       	rjmp	.+176    	; 0x39c <fnd_display+0x16e>
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] & fnd_font[10]; // 1단위 분
		else
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10]; // 1단위 분
		break;
#else // common cathod
		FND_DIGIT_PORT = ~0x20;
     2ec:	8f ed       	ldi	r24, 0xDF	; 223
     2ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		if (sec_count % 2 == 1)
     2f2:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <sec_count>
     2f6:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <sec_count+0x1>
     2fa:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sec_count+0x2>
     2fe:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <sec_count+0x3>
     302:	60 ff       	sbrs	r22, 0
     304:	17 c0       	rjmp	.+46     	; 0x334 <fnd_display+0x106>
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     306:	2c e3       	ldi	r18, 0x3C	; 60
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	08 d6       	rcall	.+3088   	; 0xf20 <__udivmodsi4>
     310:	ca 01       	movw	r24, r20
     312:	b9 01       	movw	r22, r18
     314:	2a e0       	ldi	r18, 0x0A	; 10
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e0       	ldi	r20, 0x00	; 0
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	01 d6       	rcall	.+3074   	; 0xf20 <__udivmodsi4>
     31e:	e1 e0       	ldi	r30, 0x01	; 1
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	ec 0f       	add	r30, r28
     324:	fd 1f       	adc	r31, r29
     326:	e6 0f       	add	r30, r22
     328:	f7 1f       	adc	r31, r23
     32a:	90 81       	ld	r25, Z
     32c:	8b 85       	ldd	r24, Y+11	; 0x0b
     32e:	89 2b       	or	r24, r25
     330:	85 bb       	out	0x15, r24	; 21
     332:	34 c0       	rjmp	.+104    	; 0x39c <fnd_display+0x16e>
		else
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10]; // 1단위 분
     334:	2c e3       	ldi	r18, 0x3C	; 60
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	40 e0       	ldi	r20, 0x00	; 0
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	f1 d5       	rcall	.+3042   	; 0xf20 <__udivmodsi4>
     33e:	ca 01       	movw	r24, r20
     340:	b9 01       	movw	r22, r18
     342:	2a e0       	ldi	r18, 0x0A	; 10
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 e0       	ldi	r20, 0x00	; 0
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	ea d5       	rcall	.+3028   	; 0xf20 <__udivmodsi4>
     34c:	e1 e0       	ldi	r30, 0x01	; 1
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	ec 0f       	add	r30, r28
     352:	fd 1f       	adc	r31, r29
     354:	e6 0f       	add	r30, r22
     356:	f7 1f       	adc	r31, r23
     358:	80 81       	ld	r24, Z
     35a:	85 bb       	out	0x15, r24	; 21
     35c:	1f c0       	rjmp	.+62     	; 0x39c <fnd_display+0x16e>
     35e:	8f ee       	ldi	r24, 0xEF	; 239

		case 3 :
#if 0 // common anode
		FND_DIGIT_PORT = 0x10;
#else // common cathod
		FND_DIGIT_PORT = ~0x10;
     360:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     364:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <sec_count>
#endif
		FND_DATA_PORT = fnd_font[sec_count / 600 % 6]; // 10단위 분
     368:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <sec_count+0x1>
     36c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <sec_count+0x2>
     370:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <sec_count+0x3>
     374:	28 e5       	ldi	r18, 0x58	; 88
     376:	32 e0       	ldi	r19, 0x02	; 2
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	d1 d5       	rcall	.+2978   	; 0xf20 <__udivmodsi4>
     37e:	ca 01       	movw	r24, r20
     380:	b9 01       	movw	r22, r18
     382:	26 e0       	ldi	r18, 0x06	; 6
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	ca d5       	rcall	.+2964   	; 0xf20 <__udivmodsi4>
     38c:	e1 e0       	ldi	r30, 0x01	; 1
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	ec 0f       	add	r30, r28
     392:	fd 1f       	adc	r31, r29
     394:	e6 0f       	add	r30, r22
     396:	f7 1f       	adc	r31, r23
     398:	80 81       	ld	r24, Z
     39a:	85 bb       	out	0x15, r24	; 21
     39c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <digit_select.1777>
		break;
	}
	digit_select++;
     3a0:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <digit_select.1777+0x1>
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	83 70       	andi	r24, 0x03	; 3
	digit_select %= 4; //다음 표시할 자리수 선택
     3a8:	90 78       	andi	r25, 0x80	; 128
     3aa:	99 23       	and	r25, r25
     3ac:	24 f4       	brge	.+8      	; 0x3b6 <fnd_display+0x188>
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	8c 6f       	ori	r24, 0xFC	; 252
     3b2:	9f 6f       	ori	r25, 0xFF	; 255
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <digit_select.1777+0x1>
     3ba:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <digit_select.1777>
     3be:	2b 96       	adiw	r28, 0x0b	; 11
}
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <init_led>:

void init_led(void);

void init_led(void)
{
	AUTO_RUN_LED_PORT_DDR |= 1 << AUTO_RUN_LED_PIN;
     3d0:	e4 e6       	ldi	r30, 0x64	; 100
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	88 60       	ori	r24, 0x08	; 8
     3d8:	80 83       	st	Z, r24
     3da:	08 95       	ret

000003dc <auto_mode>:
{
	if (button0_state)
	{
		/// 자율주행 코드
	}
	func_state = MANUAL_MODE;
     3dc:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <func_state+0x1>
     3e0:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <func_state>
     3e4:	08 95       	ret

000003e6 <manual_mode>:
	//sei();    // 전역적(대문)으로 interrupt 허용
}

void manual_mode(void)
{
	switch (bt_data)
     3e6:	e0 91 b8 07 	lds	r30, 0x07B8	; 0x8007b8 <bt_data>
     3ea:	8e 2f       	mov	r24, r30
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	fc 01       	movw	r30, r24
     3f0:	e2 54       	subi	r30, 0x42	; 66
     3f2:	f1 09       	sbc	r31, r1
     3f4:	e2 33       	cpi	r30, 0x32	; 50
     3f6:	f1 05       	cpc	r31, r1
     3f8:	a0 f4       	brcc	.+40     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3fa:	ea 5b       	subi	r30, 0xBA	; 186
     3fc:	ff 4f       	sbci	r31, 0xFF	; 255
     3fe:	b2 c5       	rjmp	.+2916   	; 0xf64 <__tablejump2__>
	{
		case 'F':
		case 'f':
			forward(500);
     400:	84 ef       	ldi	r24, 0xF4	; 244
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	c0 d0       	rcall	.+384    	; 0x586 <forward>
			break;
     406:	0d c0       	rjmp	.+26     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			
		case 'B':
		case 'b':
			backward(500);
     408:	84 ef       	ldi	r24, 0xF4	; 244
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	ca d0       	rcall	.+404    	; 0x5a2 <backward>
			break;
			
		case 'L':
		case 'l':
			turn_left(700);
     40e:	09 c0       	rjmp	.+18     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     410:	8c eb       	ldi	r24, 0xBC	; 188
     412:	92 e0       	ldi	r25, 0x02	; 2
			break;
     414:	d4 d0       	rcall	.+424    	; 0x5be <turn_left>
			
		case 'R':
		case 'r':
			turn_right(700);
     416:	05 c0       	rjmp	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     418:	8c eb       	ldi	r24, 0xBC	; 188
     41a:	92 e0       	ldi	r25, 0x02	; 2
			break;
     41c:	de d0       	rcall	.+444    	; 0x5da <turn_right>
			
		case 'S':
		case 's':
			stop();
     41e:	01 c0       	rjmp	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	ea d0       	rcall	.+468    	; 0x5f6 <stop>
			break;
			
		default:
			break;
	}
	func_state = DISTANCE_CHECK;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <func_state+0x1>
     42a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <func_state>
     42e:	08 95       	ret

00000430 <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	8f 93       	push	r24
     43c:	9f 93       	push	r25
     43e:	af 93       	push	r26
     440:	bf 93       	push	r27
	TCNT0 = 6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
     442:	86 e0       	ldi	r24, 0x06	; 6
     444:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
     446:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <msec_count>
     44a:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <msec_count+0x1>
     44e:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <msec_count+0x2>
     452:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <msec_count+0x3>
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	a1 1d       	adc	r26, r1
     45a:	b1 1d       	adc	r27, r1
     45c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <msec_count>
     460:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <msec_count+0x1>
     464:	a0 93 6a 01 	sts	0x016A, r26	; 0x80016a <msec_count+0x2>
     468:	b0 93 6b 01 	sts	0x016B, r27	; 0x80016b <msec_count+0x3>
	fnd_refreshrate++;   // fnd 잔상효과 유지 하기 위한 timer 2ms
     46c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <fnd_refreshrate>
     470:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <fnd_refreshrate+0x1>
     474:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <fnd_refreshrate+0x2>
     478:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <fnd_refreshrate+0x3>
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	a1 1d       	adc	r26, r1
     480:	b1 1d       	adc	r27, r1
     482:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <fnd_refreshrate>
     486:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <fnd_refreshrate+0x1>
     48a:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <fnd_refreshrate+0x2>
     48e:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <fnd_refreshrate+0x3>
	ultrasonic_check_timer++;
     492:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <ultrasonic_check_timer>
     496:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <ultrasonic_check_timer+0x1>
     49a:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <ultrasonic_check_timer+0x2>
     49e:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <ultrasonic_check_timer+0x3>
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	a1 1d       	adc	r26, r1
     4a6:	b1 1d       	adc	r27, r1
     4a8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <ultrasonic_check_timer>
     4ac:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <ultrasonic_check_timer+0x1>
     4b0:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <ultrasonic_check_timer+0x2>
     4b4:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <ultrasonic_check_timer+0x3>
	read_distance++;
     4b8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <read_distance>
     4bc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <read_distance+0x1>
     4c0:	a0 91 5e 01 	lds	r26, 0x015E	; 0x80015e <read_distance+0x2>
     4c4:	b0 91 5f 01 	lds	r27, 0x015F	; 0x80015f <read_distance+0x3>
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	a1 1d       	adc	r26, r1
     4cc:	b1 1d       	adc	r27, r1
     4ce:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <read_distance>
     4d2:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <read_distance+0x1>
     4d6:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <read_distance+0x2>
     4da:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <read_distance+0x3>
}
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	0f 90       	pop	r0
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	0f 90       	pop	r0
     4ec:	1f 90       	pop	r1
     4ee:	18 95       	reti

000004f0 <init_timer0>:
	// 1. 분주비 계산
	// 16000000HZ/64 ==> 250,000HZ
	// 2. T(주기) 1가 잡아 먹는 시간 : 1/f = 1/250,000 ==> 0.000004sec(4us) : 0.004ms
	// 3. 8bit timer OV(OVflow) : 0.004ms x 256 = 0.001024sec --> 1.024ms
	// 그러면 정확히 1ms 를 재고 싶다면 0.004ms x 250개 = 0.001sec ==> 1ms
	TCNT0 = 6;   // TCNT : 0~256 ==> 1ms마다 TIMER0_OVF_vect로 진입한다.
     4f0:	86 e0       	ldi	r24, 0x06	; 6
     4f2:	82 bf       	out	0x32, r24	; 50
	// TCNT0 = 6로 설정을 한이유: 6~256 : 250개를 count(정확히 1MS를맞추기 위해서)
	//
	// 4 분주비를 설정 (250khz)
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     4f4:	83 b7       	in	r24, 0x33	; 51
     4f6:	84 60       	ori	r24, 0x04	; 4
     4f8:	83 bf       	out	0x33, r24	; 51
	// 5. TIMER0 OVERFLOW를 허용(enable)
	TIMSK |= 1 << TOIE0;  // TIMSK |= 0x01;
     4fa:	87 b7       	in	r24, 0x37	; 55
     4fc:	81 60       	ori	r24, 0x01	; 1
     4fe:	87 bf       	out	0x37, r24	; 55
     500:	08 95       	ret

00000502 <main>:
	read_distance++;
}

int main(void)
{
	init_led();
     502:	66 df       	rcall	.-308    	; 0x3d0 <init_led>
	init_fnd();
     504:	8b de       	rcall	.-746    	; 0x21c <init_fnd>
	init_button();
     506:	13 de       	rcall	.-986    	; 0x12e <init_button>
	init_timer0();
     508:	f3 df       	rcall	.-26     	; 0x4f0 <init_timer0>
	init_uart0();
     50a:	70 d1       	rcall	.+736    	; 0x7ec <init_uart0>
	init_uart1();
     50c:	b1 d1       	rcall	.+866    	; 0x870 <init_uart1>
     50e:	16 d0       	rcall	.+44     	; 0x53c <init_n289n>
	init_n289n();
     510:	26 d0       	rcall	.+76     	; 0x55e <init_timer1_pwm>
     512:	aa d2       	rcall	.+1364   	; 0xa68 <init_ultrasonic>
	init_timer1_pwm();
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	91 e0       	ldi	r25, 0x01	; 1
	init_ultrasonic(); // timer 3
     518:	90 93 bc 07 	sts	0x07BC, r25	; 0x8007bc <__iob+0x3>
	

	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     51c:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <__iob+0x2>
     520:	78 94       	sei
     522:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <func_state>
     526:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <func_state+0x1>
	
	sei();     // 전역적으로 interrupt 허용

	while (1)
	{
		pfunc[func_state] ();
     52a:	ee 0f       	add	r30, r30
     52c:	ff 1f       	adc	r31, r31
     52e:	e2 5f       	subi	r30, 0xF2	; 242
     530:	fe 4f       	sbci	r31, 0xFE	; 254
     532:	01 90       	ld	r0, Z+
     534:	f0 81       	ld	r31, Z
     536:	e0 2d       	mov	r30, r0
     538:	09 95       	icall
     53a:	f3 cf       	rjmp	.-26     	; 0x522 <main+0x20>

0000053c <init_n289n>:
	   1         1   : STOP
*/

void init_n289n(void)
{
	MOTOR_PWM_DDR |= 1 << MOTOR_LEFT_PORT_DDR | 1 << MOTOR_RIGHT_PORT_DDR; // DDR설정
     53c:	87 b3       	in	r24, 0x17	; 23
     53e:	80 66       	ori	r24, 0x60	; 96
     540:	87 bb       	out	0x17, r24	; 23
	MOTOR_DRIVER_DIRECTION_PORT_DDR |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3; // PF1234 출력으로 설정
     542:	e1 e6       	ldi	r30, 0x61	; 97
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	80 81       	ld	r24, Z
     548:	8f 60       	ori	r24, 0x0F	; 15
     54a:	80 83       	st	Z, r24
	
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     54c:	e2 e6       	ldi	r30, 0x62	; 98
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	80 81       	ld	r24, Z
     552:	80 7f       	andi	r24, 0xF0	; 240
     554:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 2; // 자동차를 전진모드로 
     556:	80 81       	ld	r24, Z
     558:	85 60       	ori	r24, 0x05	; 5
     55a:	80 83       	st	Z, r24
     55c:	08 95       	ret

0000055e <init_timer1_pwm>:
	// 분주비 : 64 16000000HZ/64 ==> 250000HZ(250kHZ)
	// T=1/f 1/250000HZ ==> 0.000004sec (4us)
	// 250000HZ에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//              127                             : 0.5ms
	//              0x3ff(1023) --> 4ms
	TCCR1B |= 1 << CS11 | 1 << CS10;   // 분주비 64  P318 표14-1
     55e:	8e b5       	in	r24, 0x2e	; 46
     560:	83 60       	ori	r24, 0x03	; 3
     562:	8e bd       	out	0x2e, r24	; 46
	
	// 모드 14: 고속 PWM timer1사용  (P327 표14-5)
	TCCR1A |= 1 << WGM11;   // TOP --> ICR1에 설정
     564:	8f b5       	in	r24, 0x2f	; 47
     566:	82 60       	ori	r24, 0x02	; 2
     568:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM13 | 1 << WGM12;
     56a:	8e b5       	in	r24, 0x2e	; 46
     56c:	88 61       	ori	r24, 0x18	; 24
     56e:	8e bd       	out	0x2e, r24	; 46
	
	// 비반전모드 top: ICR1 비교일치값(PWM) 지정 : OCR1A, OCR1B P350 표15-7
	// 비교일치 발생시 OCR1A, OCR1B의 출력 핀은 LOW로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR1A |= 1 << COM1A1;
     570:	8f b5       	in	r24, 0x2f	; 47
     572:	80 68       	ori	r24, 0x80	; 128
     574:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= 1 << COM1B1;
     576:	8f b5       	in	r24, 0x2f	; 47
     578:	80 62       	ori	r24, 0x20	; 32
     57a:	8f bd       	out	0x2f, r24	; 47

	ICR1 = 0x3ff;  // 1023 ==> 4ms TOP : PWM 값
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	93 e0       	ldi	r25, 0x03	; 3
     580:	97 bd       	out	0x27, r25	; 39
     582:	86 bd       	out	0x26, r24	; 38
     584:	08 95       	ret

00000586 <forward>:
}

///////////////////////////////           수동모드          //////////////////////////////////////
void forward(int speed)
{
     586:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     588:	e2 e6       	ldi	r30, 0x62	; 98
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	90 81       	ld	r25, Z
     58e:	90 7f       	andi	r25, 0xF0	; 240
     590:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     592:	90 81       	ld	r25, Z
     594:	95 60       	ori	r25, 0x05	; 5
     596:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     598:	3b bd       	out	0x2b, r19	; 43
     59a:	2a bd       	out	0x2a, r18	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     59c:	39 bd       	out	0x29, r19	; 41
     59e:	28 bd       	out	0x28, r18	; 40
     5a0:	08 95       	ret

000005a2 <backward>:
}

void backward(int speed)
{
     5a2:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     5a4:	e2 e6       	ldi	r30, 0x62	; 98
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	90 81       	ld	r25, Z
     5aa:	90 7f       	andi	r25, 0xF0	; 240
     5ac:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 3 | 1 << 1;  // 1010 후진 모드
     5ae:	90 81       	ld	r25, Z
     5b0:	9a 60       	ori	r25, 0x0A	; 10
     5b2:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     5b4:	3b bd       	out	0x2b, r19	; 43
     5b6:	2a bd       	out	0x2a, r18	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     5b8:	39 bd       	out	0x29, r19	; 41
     5ba:	28 bd       	out	0x28, r18	; 40
     5bc:	08 95       	ret

000005be <turn_left>:
}

void turn_left(int speed)
{
     5be:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     5c0:	e2 e6       	ldi	r30, 0x62	; 98
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	90 81       	ld	r25, Z
     5c6:	90 7f       	andi	r25, 0xF0	; 240
     5c8:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     5ca:	90 81       	ld	r25, Z
     5cc:	95 60       	ori	r25, 0x05	; 5
     5ce:	90 83       	st	Z, r25
	
	OCR1A = 0;  // PB5 PWM 출력 port left
     5d0:	1b bc       	out	0x2b, r1	; 43
     5d2:	1a bc       	out	0x2a, r1	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     5d4:	39 bd       	out	0x29, r19	; 41
     5d6:	28 bd       	out	0x28, r18	; 40
     5d8:	08 95       	ret

000005da <turn_right>:
}

void turn_right(int speed)
{
     5da:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     5dc:	e2 e6       	ldi	r30, 0x62	; 98
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	90 81       	ld	r25, Z
     5e2:	90 7f       	andi	r25, 0xF0	; 240
     5e4:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     5e6:	90 81       	ld	r25, Z
     5e8:	95 60       	ori	r25, 0x05	; 5
     5ea:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     5ec:	3b bd       	out	0x2b, r19	; 43
     5ee:	2a bd       	out	0x2a, r18	; 42
	OCR1B = 0;  // PB6 PWM 출력 port right
     5f0:	19 bc       	out	0x29, r1	; 41
     5f2:	18 bc       	out	0x28, r1	; 40
     5f4:	08 95       	ret

000005f6 <stop>:
}

void stop(void)
{
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     5f6:	e2 e6       	ldi	r30, 0x62	; 98
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	80 81       	ld	r24, Z
     5fc:	80 7f       	andi	r24, 0xF0	; 240
     5fe:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3;  // stop 모드로 설정
     600:	80 81       	ld	r24, Z
     602:	8f 60       	ori	r24, 0x0F	; 15
     604:	80 83       	st	Z, r24
	
	OCR1A = 0;  // PB5 PWM 출력 port left
     606:	1b bc       	out	0x2b, r1	; 43
     608:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;  // PB6 PWM 출력 port right
     60a:	19 bc       	out	0x29, r1	; 41
     60c:	18 bc       	out	0x28, r1	; 40
     60e:	08 95       	ret

00000610 <auto_start>:
////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////         자동모드            //////////////////////////////////
void auto_start(void)
{
	sec_count = 120;
     610:	88 e7       	ldi	r24, 0x78	; 120
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	a0 e0       	ldi	r26, 0x00	; 0
     616:	b0 e0       	ldi	r27, 0x00	; 0
     618:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <sec_count>
     61c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <sec_count+0x1>
     620:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <sec_count+0x2>
     624:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <sec_count+0x3>
	
	while(sec_count > 0)
     628:	55 c0       	rjmp	.+170    	; 0x6d4 <auto_start+0xc4>
	{
		ultrasonic_trigger();
     62a:	4e d2       	rcall	.+1180   	; 0xac8 <ultrasonic_trigger>
		if (msec_count >= 1000)
     62c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <msec_count>
     630:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <msec_count+0x1>
     634:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <msec_count+0x2>
     638:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <msec_count+0x3>
     63c:	88 3e       	cpi	r24, 0xE8	; 232
     63e:	93 40       	sbci	r25, 0x03	; 3
     640:	a1 05       	cpc	r26, r1
     642:	b1 05       	cpc	r27, r1
     644:	d8 f0       	brcs	.+54     	; 0x67c <auto_start+0x6c>
		{
			msec_count = 0;
     646:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <msec_count>
     64a:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <msec_count+0x1>
     64e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <msec_count+0x2>
     652:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <msec_count+0x3>
			sec_count--;
     656:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sec_count>
     65a:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <sec_count+0x1>
     65e:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <sec_count+0x2>
     662:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <sec_count+0x3>
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	a1 09       	sbc	r26, r1
     66a:	b1 09       	sbc	r27, r1
     66c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <sec_count>
     670:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <sec_count+0x1>
     674:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <sec_count+0x2>
     678:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <sec_count+0x3>
		} // 1초씩 감소
		
		if (fnd_refreshrate >= 2)
     67c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <fnd_refreshrate>
     680:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <fnd_refreshrate+0x1>
     684:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <fnd_refreshrate+0x2>
     688:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <fnd_refreshrate+0x3>
     68c:	02 97       	sbiw	r24, 0x02	; 2
     68e:	a1 05       	cpc	r26, r1
     690:	b1 05       	cpc	r27, r1
     692:	48 f0       	brcs	.+18     	; 0x6a6 <auto_start+0x96>
		{
			fnd_refreshrate = 0;
     694:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <fnd_refreshrate>
     698:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <fnd_refreshrate+0x1>
     69c:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <fnd_refreshrate+0x2>
     6a0:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <fnd_refreshrate+0x3>
			fnd_display();
     6a4:	c4 dd       	rcall	.-1144   	; 0x22e <fnd_display>
		} // fnd 표시
		

		if (ultrasonic_right_distance <= 20)
     6a6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <ultrasonic_right_distance>
     6aa:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <ultrasonic_right_distance+0x1>
     6ae:	45 97       	sbiw	r24, 0x15	; 21
     6b0:	24 f4       	brge	.+8      	; 0x6ba <auto_start+0xaa>
		{
			turn_left(400);
     6b2:	80 e9       	ldi	r24, 0x90	; 144
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	83 df       	rcall	.-250    	; 0x5be <turn_left>
     6b8:	0d c0       	rjmp	.+26     	; 0x6d4 <auto_start+0xc4>
		}
		else if (ultrasonic_left_distance <= 20)
     6ba:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ultrasonic_left_distance>
     6be:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ultrasonic_left_distance+0x1>
     6c2:	45 97       	sbiw	r24, 0x15	; 21
		{
			turn_right(400);
     6c4:	24 f4       	brge	.+8      	; 0x6ce <auto_start+0xbe>
     6c6:	80 e9       	ldi	r24, 0x90	; 144
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	87 df       	rcall	.-242    	; 0x5da <turn_right>
		}
		else
		{
			forward(300);
     6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <auto_start+0xc4>
     6ce:	8c e2       	ldi	r24, 0x2C	; 44
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	59 df       	rcall	.-334    	; 0x586 <forward>
///////////////////////////////////////         자동모드            //////////////////////////////////
void auto_start(void)
{
	sec_count = 120;
	
	while(sec_count > 0)
     6d4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <sec_count>
     6d8:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <sec_count+0x1>
     6dc:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <sec_count+0x2>
     6e0:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <sec_count+0x3>
     6e4:	89 2b       	or	r24, r25
     6e6:	8a 2b       	or	r24, r26
     6e8:	8b 2b       	or	r24, r27
     6ea:	09 f0       	breq	.+2      	; 0x6ee <auto_start+0xde>
     6ec:	9e cf       	rjmp	.-196    	; 0x62a <auto_start+0x1a>
// 			backward(300);
// 		}
		
		
	}
     6ee:	08 95       	ret

000006f0 <__vector_18>:

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     6f0:	1f 92       	push	r1
     6f2:	0f 92       	push	r0
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	0f 92       	push	r0
     6f8:	11 24       	eor	r1, r1
     6fa:	0b b6       	in	r0, 0x3b	; 59
     6fc:	0f 92       	push	r0
     6fe:	2f 93       	push	r18
     700:	3f 93       	push	r19
     702:	4f 93       	push	r20
     704:	5f 93       	push	r21
     706:	6f 93       	push	r22
     708:	7f 93       	push	r23
     70a:	8f 93       	push	r24
     70c:	9f 93       	push	r25
     70e:	af 93       	push	r26
     710:	bf 93       	push	r27
     712:	ef 93       	push	r30
     714:	ff 93       	push	r31
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	1f 92       	push	r1
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     720:	8c b1       	in	r24, 0x0c	; 12
     722:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	8d 30       	cpi	r24, 0x0D	; 13
     728:	19 f0       	breq	.+6      	; 0x730 <__vector_18+0x40>
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	8a 30       	cpi	r24, 0x0A	; 10
     72e:	61 f5       	brne	.+88     	; 0x788 <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     730:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <rear>
     734:	30 91 6f 01 	lds	r19, 0x016F	; 0x80016f <rear+0x1>
     738:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <i.1878>
     73c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <i.1878+0x1>
     740:	40 e5       	ldi	r20, 0x50	; 80
     742:	42 9f       	mul	r20, r18
     744:	f0 01       	movw	r30, r0
     746:	43 9f       	mul	r20, r19
     748:	f0 0d       	add	r31, r0
     74a:	11 24       	eor	r1, r1
     74c:	e8 58       	subi	r30, 0x88	; 136
     74e:	fe 4f       	sbci	r31, 0xFE	; 254
     750:	e8 0f       	add	r30, r24
     752:	f9 1f       	adc	r31, r25
     754:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     756:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <i.1878+0x1>
     75a:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <i.1878>
		rear++;
     75e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <rear>
     762:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <rear+0x1>
     766:	01 96       	adiw	r24, 0x01	; 1
     768:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <rear+0x1>
     76c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
     770:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <rear>
     774:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <rear+0x1>
     778:	6a e0       	ldi	r22, 0x0A	; 10
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	be d3       	rcall	.+1916   	; 0xefa <__divmodhi4>
     77e:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <rear+0x1>
     782:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <rear>
     786:	1c c0       	rjmp	.+56     	; 0x7c0 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
     788:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <rear>
     78c:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <rear+0x1>
     790:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <i.1878>
     794:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <i.1878+0x1>
     798:	9c 01       	movw	r18, r24
     79a:	2f 5f       	subi	r18, 0xFF	; 255
     79c:	3f 4f       	sbci	r19, 0xFF	; 255
     79e:	30 93 6d 01 	sts	0x016D, r19	; 0x80016d <i.1878+0x1>
     7a2:	20 93 6c 01 	sts	0x016C, r18	; 0x80016c <i.1878>
     7a6:	49 81       	ldd	r20, Y+1	; 0x01
     7a8:	50 e5       	ldi	r21, 0x50	; 80
     7aa:	56 9f       	mul	r21, r22
     7ac:	90 01       	movw	r18, r0
     7ae:	57 9f       	mul	r21, r23
     7b0:	30 0d       	add	r19, r0
     7b2:	11 24       	eor	r1, r1
     7b4:	28 58       	subi	r18, 0x88	; 136
     7b6:	3e 4f       	sbci	r19, 0xFE	; 254
     7b8:	f9 01       	movw	r30, r18
     7ba:	e8 0f       	add	r30, r24
     7bc:	f9 1f       	adc	r31, r25
     7be:	40 83       	st	Z, r20
	}
		  
}
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	ff 91       	pop	r31
     7c8:	ef 91       	pop	r30
     7ca:	bf 91       	pop	r27
     7cc:	af 91       	pop	r26
     7ce:	9f 91       	pop	r25
     7d0:	8f 91       	pop	r24
     7d2:	7f 91       	pop	r23
     7d4:	6f 91       	pop	r22
     7d6:	5f 91       	pop	r21
     7d8:	4f 91       	pop	r20
     7da:	3f 91       	pop	r19
     7dc:	2f 91       	pop	r18
     7de:	0f 90       	pop	r0
     7e0:	0b be       	out	0x3b, r0	; 59
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	0f 90       	pop	r0
     7e8:	1f 90       	pop	r1
     7ea:	18 95       	reti

000007ec <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
     7ec:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
     7f0:	8f ec       	ldi	r24, 0xCF	; 207
     7f2:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
     7f4:	8b b1       	in	r24, 0x0b	; 11
     7f6:	82 60       	ori	r24, 0x02	; 2
     7f8:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     7fa:	e5 e9       	ldi	r30, 0x95	; 149
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	86 60       	ori	r24, 0x06	; 6
     802:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     804:	8a b1       	in	r24, 0x0a	; 10
     806:	88 69       	ori	r24, 0x98	; 152
     808:	8a b9       	out	0x0a, r24	; 10
     80a:	08 95       	ret

0000080c <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
     80c:	5d 9b       	sbis	0x0b, 5	; 11
     80e:	fe cf       	rjmp	.-4      	; 0x80c <UART0_transmit>
		;   // no operation NOP
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
     810:	8c b9       	out	0x0c, r24	; 12
     812:	08 95       	ret

00000814 <__vector_30>:
volatile uint8_t bt_data;

extern void UART0_transmit();

ISR(USART1_RX_vect)
{
     814:	1f 92       	push	r1
     816:	0f 92       	push	r0
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	0f 92       	push	r0
     81c:	11 24       	eor	r1, r1
     81e:	0b b6       	in	r0, 0x3b	; 59
     820:	0f 92       	push	r0
     822:	2f 93       	push	r18
     824:	3f 93       	push	r19
     826:	4f 93       	push	r20
     828:	5f 93       	push	r21
     82a:	6f 93       	push	r22
     82c:	7f 93       	push	r23
     82e:	8f 93       	push	r24
     830:	9f 93       	push	r25
     832:	af 93       	push	r26
     834:	bf 93       	push	r27
     836:	ef 93       	push	r30
     838:	ff 93       	push	r31
	
	bt_data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
     83a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     83e:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <bt_data>
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	UART0_transmit(bt_data); // BT로 들어온 char를 확인하기 위해 comport master로 출력
     842:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <bt_data>
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	e1 df       	rcall	.-62     	; 0x80c <UART0_transmit>
// 	{
// 		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
// 		rx1_buff[rear1][i++] = data;
// 	}
		  
}
     84a:	ff 91       	pop	r31
     84c:	ef 91       	pop	r30
     84e:	bf 91       	pop	r27
     850:	af 91       	pop	r26
     852:	9f 91       	pop	r25
     854:	8f 91       	pop	r24
     856:	7f 91       	pop	r23
     858:	6f 91       	pop	r22
     85a:	5f 91       	pop	r21
     85c:	4f 91       	pop	r20
     85e:	3f 91       	pop	r19
     860:	2f 91       	pop	r18
     862:	0f 90       	pop	r0
     864:	0b be       	out	0x3b, r0	; 59
     866:	0f 90       	pop	r0
     868:	0f be       	out	0x3f, r0	; 63
     86a:	0f 90       	pop	r0
     86c:	1f 90       	pop	r1
     86e:	18 95       	reti

00000870 <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
     870:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
     874:	8f ec       	ldi	r24, 0xCF	; 207
     876:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
     87a:	eb e9       	ldi	r30, 0x9B	; 155
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 81       	ld	r24, Z
     880:	82 60       	ori	r24, 0x02	; 2
     882:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     884:	ed e9       	ldi	r30, 0x9D	; 157
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	80 81       	ld	r24, Z
     88a:	86 60       	ori	r24, 0x06	; 6
     88c:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     88e:	ea e9       	ldi	r30, 0x9A	; 154
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	88 69       	ori	r24, 0x98	; 152
     896:	80 83       	st	Z, r24
     898:	08 95       	ret

0000089a <__vector_5>:
int get_distance = 0;

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect) // LEFT
{
     89a:	1f 92       	push	r1
     89c:	0f 92       	push	r0
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	0f 92       	push	r0
     8a2:	11 24       	eor	r1, r1
     8a4:	0b b6       	in	r0, 0x3b	; 59
     8a6:	0f 92       	push	r0
     8a8:	2f 93       	push	r18
     8aa:	3f 93       	push	r19
     8ac:	4f 93       	push	r20
     8ae:	5f 93       	push	r21
     8b0:	6f 93       	push	r22
     8b2:	7f 93       	push	r23
     8b4:	8f 93       	push	r24
     8b6:	9f 93       	push	r25
     8b8:	af 93       	push	r26
     8ba:	bf 93       	push	r27
     8bc:	ef 93       	push	r30
     8be:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN_LEFT & (1 << ECHO_LEFT))
     8c0:	0c 9b       	sbis	0x01, 4	; 1
     8c2:	05 c0       	rjmp	.+10     	; 0x8ce <__vector_5+0x34>
	{
		TCNT3 = 0;
     8c4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     8c8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     8cc:	20 c0       	rjmp	.+64     	; 0x90e <__vector_5+0x74>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_left_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     8ce:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     8d2:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	1e d2       	rcall	.+1084   	; 0xd18 <__floatunsisf>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	34 e2       	ldi	r19, 0x24	; 36
     8e0:	44 e7       	ldi	r20, 0x74	; 116
     8e2:	59 e4       	ldi	r21, 0x49	; 73
     8e4:	a7 d2       	rcall	.+1358   	; 0xe34 <__mulsf3>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	40 e8       	ldi	r20, 0x80	; 128
     8ec:	54 e4       	ldi	r21, 0x44	; 68
     8ee:	a2 d2       	rcall	.+1348   	; 0xe34 <__mulsf3>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	34 e2       	ldi	r19, 0x24	; 36
     8f4:	44 e7       	ldi	r20, 0x74	; 116
     8f6:	5b e4       	ldi	r21, 0x4B	; 75
     8f8:	76 d1       	rcall	.+748    	; 0xbe6 <__divsf3>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	48 e6       	ldi	r20, 0x68	; 104
     900:	52 e4       	ldi	r21, 0x42	; 66
     902:	71 d1       	rcall	.+738    	; 0xbe6 <__divsf3>
     904:	d8 d1       	rcall	.+944    	; 0xcb6 <__fixsfsi>
     906:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <ultrasonic_left_distance+0x1>
     90a:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <ultrasonic_left_distance>
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
		// sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
	}
}
     90e:	ff 91       	pop	r31
     910:	ef 91       	pop	r30
     912:	bf 91       	pop	r27
     914:	af 91       	pop	r26
     916:	9f 91       	pop	r25
     918:	8f 91       	pop	r24
     91a:	7f 91       	pop	r23
     91c:	6f 91       	pop	r22
     91e:	5f 91       	pop	r21
     920:	4f 91       	pop	r20
     922:	3f 91       	pop	r19
     924:	2f 91       	pop	r18
     926:	0f 90       	pop	r0
     928:	0b be       	out	0x3b, r0	; 59
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	0f 90       	pop	r0
     930:	1f 90       	pop	r1
     932:	18 95       	reti

00000934 <__vector_6>:

ISR(INT5_vect) // CENTER
{
     934:	1f 92       	push	r1
     936:	0f 92       	push	r0
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	0f 92       	push	r0
     93c:	11 24       	eor	r1, r1
     93e:	0b b6       	in	r0, 0x3b	; 59
     940:	0f 92       	push	r0
     942:	2f 93       	push	r18
     944:	3f 93       	push	r19
     946:	4f 93       	push	r20
     948:	5f 93       	push	r21
     94a:	6f 93       	push	r22
     94c:	7f 93       	push	r23
     94e:	8f 93       	push	r24
     950:	9f 93       	push	r25
     952:	af 93       	push	r26
     954:	bf 93       	push	r27
     956:	ef 93       	push	r30
     958:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN_CENTER & (1 << ECHO_CENTER))
     95a:	0d 9b       	sbis	0x01, 5	; 1
     95c:	05 c0       	rjmp	.+10     	; 0x968 <__vector_6+0x34>
	{
		TCNT3 = 0;
     95e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     962:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     966:	20 c0       	rjmp	.+64     	; 0x9a8 <__vector_6+0x74>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_center_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     968:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     96c:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	d1 d1       	rcall	.+930    	; 0xd18 <__floatunsisf>
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	34 e2       	ldi	r19, 0x24	; 36
     97a:	44 e7       	ldi	r20, 0x74	; 116
     97c:	59 e4       	ldi	r21, 0x49	; 73
     97e:	5a d2       	rcall	.+1204   	; 0xe34 <__mulsf3>
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e8       	ldi	r20, 0x80	; 128
     986:	54 e4       	ldi	r21, 0x44	; 68
     988:	55 d2       	rcall	.+1194   	; 0xe34 <__mulsf3>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	34 e2       	ldi	r19, 0x24	; 36
     98e:	44 e7       	ldi	r20, 0x74	; 116
     990:	5b e4       	ldi	r21, 0x4B	; 75
     992:	29 d1       	rcall	.+594    	; 0xbe6 <__divsf3>
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	48 e6       	ldi	r20, 0x68	; 104
     99a:	52 e4       	ldi	r21, 0x42	; 66
     99c:	24 d1       	rcall	.+584    	; 0xbe6 <__divsf3>
     99e:	8b d1       	rcall	.+790    	; 0xcb6 <__fixsfsi>
     9a0:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <ultrasonic_center_distance+0x1>
     9a4:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <ultrasonic_center_distance>
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
		// sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
	}
}
     9a8:	ff 91       	pop	r31
     9aa:	ef 91       	pop	r30
     9ac:	bf 91       	pop	r27
     9ae:	af 91       	pop	r26
     9b0:	9f 91       	pop	r25
     9b2:	8f 91       	pop	r24
     9b4:	7f 91       	pop	r23
     9b6:	6f 91       	pop	r22
     9b8:	5f 91       	pop	r21
     9ba:	4f 91       	pop	r20
     9bc:	3f 91       	pop	r19
     9be:	2f 91       	pop	r18
     9c0:	0f 90       	pop	r0
     9c2:	0b be       	out	0x3b, r0	; 59
     9c4:	0f 90       	pop	r0
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	0f 90       	pop	r0
     9ca:	1f 90       	pop	r1
     9cc:	18 95       	reti

000009ce <__vector_7>:

ISR(INT6_vect) // RIGHT
{
     9ce:	1f 92       	push	r1
     9d0:	0f 92       	push	r0
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	0f 92       	push	r0
     9d6:	11 24       	eor	r1, r1
     9d8:	0b b6       	in	r0, 0x3b	; 59
     9da:	0f 92       	push	r0
     9dc:	2f 93       	push	r18
     9de:	3f 93       	push	r19
     9e0:	4f 93       	push	r20
     9e2:	5f 93       	push	r21
     9e4:	6f 93       	push	r22
     9e6:	7f 93       	push	r23
     9e8:	8f 93       	push	r24
     9ea:	9f 93       	push	r25
     9ec:	af 93       	push	r26
     9ee:	bf 93       	push	r27
     9f0:	ef 93       	push	r30
     9f2:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN_RIGHT & (1 << ECHO_RIGHT))
     9f4:	0e 9b       	sbis	0x01, 6	; 1
     9f6:	05 c0       	rjmp	.+10     	; 0xa02 <__vector_7+0x34>
	{
		TCNT3 = 0;
     9f8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     9fc:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a00:	20 c0       	rjmp	.+64     	; 0xa42 <__vector_7+0x74>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_right_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     a02:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a06:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	84 d1       	rcall	.+776    	; 0xd18 <__floatunsisf>
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	34 e2       	ldi	r19, 0x24	; 36
     a14:	44 e7       	ldi	r20, 0x74	; 116
     a16:	59 e4       	ldi	r21, 0x49	; 73
     a18:	0d d2       	rcall	.+1050   	; 0xe34 <__mulsf3>
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	40 e8       	ldi	r20, 0x80	; 128
     a20:	54 e4       	ldi	r21, 0x44	; 68
     a22:	08 d2       	rcall	.+1040   	; 0xe34 <__mulsf3>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	34 e2       	ldi	r19, 0x24	; 36
     a28:	44 e7       	ldi	r20, 0x74	; 116
     a2a:	5b e4       	ldi	r21, 0x4B	; 75
     a2c:	dc d0       	rcall	.+440    	; 0xbe6 <__divsf3>
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	48 e6       	ldi	r20, 0x68	; 104
     a34:	52 e4       	ldi	r21, 0x42	; 66
     a36:	d7 d0       	rcall	.+430    	; 0xbe6 <__divsf3>
     a38:	3e d1       	rcall	.+636    	; 0xcb6 <__fixsfsi>
     a3a:	70 93 73 01 	sts	0x0173, r23	; 0x800173 <ultrasonic_right_distance+0x1>
     a3e:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <ultrasonic_right_distance>
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
		// sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
	}
}
     a42:	ff 91       	pop	r31
     a44:	ef 91       	pop	r30
     a46:	bf 91       	pop	r27
     a48:	af 91       	pop	r26
     a4a:	9f 91       	pop	r25
     a4c:	8f 91       	pop	r24
     a4e:	7f 91       	pop	r23
     a50:	6f 91       	pop	r22
     a52:	5f 91       	pop	r21
     a54:	4f 91       	pop	r20
     a56:	3f 91       	pop	r19
     a58:	2f 91       	pop	r18
     a5a:	0f 90       	pop	r0
     a5c:	0b be       	out	0x3b, r0	; 59
     a5e:	0f 90       	pop	r0
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	0f 90       	pop	r0
     a64:	1f 90       	pop	r1
     a66:	18 95       	reti

00000a68 <init_ultrasonic>:

void init_ultrasonic()
{
	//////////////// left ////////////////
	TRIG_DDR_LEFT |= 1 << TRIG_LEFT; // output mode로 설정
     a68:	8a b3       	in	r24, 0x1a	; 26
     a6a:	81 60       	ori	r24, 0x01	; 1
     a6c:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_LEFT &= ~(1 << ECHO_LEFT); // input mode로 설정
     a6e:	82 b1       	in	r24, 0x02	; 2
     a70:	8f 7e       	andi	r24, 0xEF	; 239
     a72:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
     a74:	8a b7       	in	r24, 0x3a	; 58
     a76:	81 60       	ori	r24, 0x01	; 1
     a78:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us	
	TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     a7a:	ea e8       	ldi	r30, 0x8A	; 138
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	85 60       	ori	r24, 0x05	; 5
     a82:	80 83       	st	Z, r24
	EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
     a84:	89 b7       	in	r24, 0x39	; 57
     a86:	80 61       	ori	r24, 0x10	; 16
     a88:	89 bf       	out	0x39, r24	; 57
	
	
	//////////////// center ////////////////
	TRIG_DDR_CENTER |= 1 << TRIG_CENTER; // output mode로 설정
     a8a:	8a b3       	in	r24, 0x1a	; 26
     a8c:	82 60       	ori	r24, 0x02	; 2
     a8e:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_CENTER &= ~(1 << ECHO_CENTER); // input mode로 설정
     a90:	82 b1       	in	r24, 0x02	; 2
     a92:	8f 7d       	andi	r24, 0xDF	; 223
     a94:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC51 | 1 << ISC50; // INT5니까 EICRB에서 ISC51, 50
     a96:	8a b7       	in	r24, 0x3a	; 58
     a98:	84 60       	ori	r24, 0x04	; 4
     a9a:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
	TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     a9c:	80 81       	ld	r24, Z
     a9e:	85 60       	ori	r24, 0x05	; 5
     aa0:	80 83       	st	Z, r24
	EIMSK |= 1 << INT5; // 외부 인터럽트4번 (ECHO) 사용
     aa2:	89 b7       	in	r24, 0x39	; 57
     aa4:	80 62       	ori	r24, 0x20	; 32
     aa6:	89 bf       	out	0x39, r24	; 57
	
	
	//////////////// right ////////////////
	TRIG_DDR_RIGHT |= 1 << TRIG_RIGHT; // output mode로 설정
     aa8:	8a b3       	in	r24, 0x1a	; 26
     aaa:	84 60       	ori	r24, 0x04	; 4
     aac:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_RIGHT &= ~(1 << ECHO_RIGHT); // input mode로 설정
     aae:	82 b1       	in	r24, 0x02	; 2
     ab0:	8f 7b       	andi	r24, 0xBF	; 191
     ab2:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC61 | 1 << ISC60; // INT6니까 EICRB에서 ISC61, 60
     ab4:	8a b7       	in	r24, 0x3a	; 58
     ab6:	80 61       	ori	r24, 0x10	; 16
     ab8:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
	TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     aba:	80 81       	ld	r24, Z
     abc:	85 60       	ori	r24, 0x05	; 5
     abe:	80 83       	st	Z, r24
	EIMSK |= 1 << INT6; // 외부 인터럽트4번 (ECHO) 사용
     ac0:	89 b7       	in	r24, 0x39	; 57
     ac2:	80 64       	ori	r24, 0x40	; 64
     ac4:	89 bf       	out	0x39, r24	; 57
     ac6:	08 95       	ret

00000ac8 <ultrasonic_trigger>:
}

void ultrasonic_trigger()
{
	if (ultrasonic_check_timer >= 50)
     ac8:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <ultrasonic_check_timer>
     acc:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <ultrasonic_check_timer+0x1>
     ad0:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <ultrasonic_check_timer+0x2>
     ad4:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <ultrasonic_check_timer+0x3>
     ad8:	c2 97       	sbiw	r24, 0x32	; 50
     ada:	a1 05       	cpc	r26, r1
     adc:	b1 05       	cpc	r27, r1
     ade:	a0 f0       	brcs	.+40     	; 0xb08 <ultrasonic_trigger+0x40>
	{
		ultrasonic_check_timer = 0;
     ae0:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <ultrasonic_check_timer>
     ae4:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <ultrasonic_check_timer+0x1>
     ae8:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <ultrasonic_check_timer+0x2>
     aec:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <ultrasonic_check_timer+0x3>
		get_distance++;
     af0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <get_distance>
     af4:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <get_distance+0x1>
     af8:	01 96       	adiw	r24, 0x01	; 1
		get_distance %= 3;
     afa:	63 e0       	ldi	r22, 0x03	; 3
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	fd d1       	rcall	.+1018   	; 0xefa <__divmodhi4>
     b00:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <get_distance+0x1>
     b04:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <get_distance>
	}
	if (get_distance == 0)
     b08:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <get_distance>
     b0c:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <get_distance+0x1>
     b10:	00 97       	sbiw	r24, 0x00	; 0
     b12:	89 f4       	brne	.+34     	; 0xb36 <ultrasonic_trigger+0x6e>
	{
		////////// left //////////
	TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // 해당되는 포트만 LOW로 만듦
     b14:	8b b3       	in	r24, 0x1b	; 27
     b16:	8e 7f       	andi	r24, 0xFE	; 254
     b18:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b1a:	85 e0       	ldi	r24, 0x05	; 5
     b1c:	8a 95       	dec	r24
     b1e:	f1 f7       	brne	.-4      	; 0xb1c <ultrasonic_trigger+0x54>
     b20:	00 00       	nop
	_delay_us(1);
	TRIG_PORT_LEFT |= 1 << TRIG_LEFT; // HIGH
     b22:	8b b3       	in	r24, 0x1b	; 27
     b24:	81 60       	ori	r24, 0x01	; 1
     b26:	8b bb       	out	0x1b, r24	; 27
     b28:	80 e5       	ldi	r24, 0x50	; 80
     b2a:	8a 95       	dec	r24
     b2c:	f1 f7       	brne	.-4      	; 0xb2a <ultrasonic_trigger+0x62>
	_delay_us(15); // 규격에는 10us인데 reduance
	TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // LOW
     b2e:	8b b3       	in	r24, 0x1b	; 27
     b30:	8e 7f       	andi	r24, 0xFE	; 254
     b32:	8b bb       	out	0x1b, r24	; 27
     b34:	08 95       	ret
	// 초음파센서 echo 응답 대기시간이 최대 38ms
	}
	
	else if (get_distance == 1)
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	91 05       	cpc	r25, r1
     b3a:	89 f4       	brne	.+34     	; 0xb5e <ultrasonic_trigger+0x96>
	{
		////////// center //////////
	TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // 해당되는 포트만 LOW로 만듦
     b3c:	8b b3       	in	r24, 0x1b	; 27
     b3e:	8d 7f       	andi	r24, 0xFD	; 253
     b40:	8b bb       	out	0x1b, r24	; 27
     b42:	85 e0       	ldi	r24, 0x05	; 5
     b44:	8a 95       	dec	r24
     b46:	f1 f7       	brne	.-4      	; 0xb44 <ultrasonic_trigger+0x7c>
     b48:	00 00       	nop
	_delay_us(1);
	TRIG_PORT_CENTER |= 1 << TRIG_CENTER; // HIGH
     b4a:	8b b3       	in	r24, 0x1b	; 27
     b4c:	82 60       	ori	r24, 0x02	; 2
     b4e:	8b bb       	out	0x1b, r24	; 27
     b50:	80 e5       	ldi	r24, 0x50	; 80
     b52:	8a 95       	dec	r24
     b54:	f1 f7       	brne	.-4      	; 0xb52 <ultrasonic_trigger+0x8a>
	_delay_us(15); // 규격에는 10us인데 reduance
	TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // LOW
     b56:	8b b3       	in	r24, 0x1b	; 27
     b58:	8d 7f       	andi	r24, 0xFD	; 253
     b5a:	8b bb       	out	0x1b, r24	; 27
     b5c:	08 95       	ret
	}
		
	else if (get_distance == 2)
     b5e:	02 97       	sbiw	r24, 0x02	; 2
     b60:	81 f4       	brne	.+32     	; 0xb82 <ultrasonic_trigger+0xba>
	{
		////////// right //////////
	TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // 해당되는 포트만 LOW로 만듦
     b62:	8b b3       	in	r24, 0x1b	; 27
     b64:	8b 7f       	andi	r24, 0xFB	; 251
     b66:	8b bb       	out	0x1b, r24	; 27
     b68:	85 e0       	ldi	r24, 0x05	; 5
     b6a:	8a 95       	dec	r24
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <ultrasonic_trigger+0xa2>
     b6e:	00 00       	nop
	_delay_us(1);
	TRIG_PORT_RIGHT |= 1 << TRIG_RIGHT; // HIGH
     b70:	8b b3       	in	r24, 0x1b	; 27
     b72:	84 60       	ori	r24, 0x04	; 4
     b74:	8b bb       	out	0x1b, r24	; 27
     b76:	80 e5       	ldi	r24, 0x50	; 80
     b78:	8a 95       	dec	r24
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <ultrasonic_trigger+0xb0>
	_delay_us(15); // 규격에는 10us인데 reduance
	TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // LOW
     b7c:	8b b3       	in	r24, 0x1b	; 27
     b7e:	8b 7f       	andi	r24, 0xFB	; 251
     b80:	8b bb       	out	0x1b, r24	; 27
     b82:	08 95       	ret

00000b84 <distance_check>:
	}
}

void distance_check(void)
{
		printf("left   :  %5d\n", ultrasonic_left_distance); // printf 찍으면 delay생김
     b84:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ultrasonic_left_distance>
     b88:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ultrasonic_left_distance+0x1>
     b8c:	9f 93       	push	r25
     b8e:	8f 93       	push	r24
     b90:	81 e2       	ldi	r24, 0x21	; 33
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	9f 93       	push	r25
     b96:	8f 93       	push	r24
     b98:	02 d2       	rcall	.+1028   	; 0xf9e <printf>
		printf("center :  %5d\n", ultrasonic_center_distance);
     b9a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_center_distance>
     b9e:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_center_distance+0x1>
     ba2:	9f 93       	push	r25
     ba4:	8f 93       	push	r24
     ba6:	80 e3       	ldi	r24, 0x30	; 48
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	9f 93       	push	r25
     bac:	8f 93       	push	r24
     bae:	f7 d1       	rcall	.+1006   	; 0xf9e <printf>
		printf("right  :  %5d\n", ultrasonic_right_distance);
     bb0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <ultrasonic_right_distance>
     bb4:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <ultrasonic_right_distance+0x1>
     bb8:	9f 93       	push	r25
     bba:	8f 93       	push	r24
     bbc:	8f e3       	ldi	r24, 0x3F	; 63
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	9f 93       	push	r25
     bc2:	8f 93       	push	r24

	ultrasonic_trigger(); // 이것도 수정해야한다.
     bc4:	ec d1       	rcall	.+984    	; 0xf9e <printf>
     bc6:	80 df       	rcall	.-256    	; 0xac8 <ultrasonic_trigger>
	func_state = AUTO_MODE_CHECK;
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <func_state+0x1>
     bd0:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <func_state>
     bd4:	8d b7       	in	r24, 0x3d	; 61
     bd6:	9e b7       	in	r25, 0x3e	; 62
     bd8:	0c 96       	adiw	r24, 0x0c	; 12
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	9e bf       	out	0x3e, r25	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	8d bf       	out	0x3d, r24	; 61
     be4:	08 95       	ret

00000be6 <__divsf3>:
     be6:	0c d0       	rcall	.+24     	; 0xc00 <__divsf3x>
     be8:	eb c0       	rjmp	.+470    	; 0xdc0 <__fp_round>
     bea:	e3 d0       	rcall	.+454    	; 0xdb2 <__fp_pscB>
     bec:	40 f0       	brcs	.+16     	; 0xbfe <__divsf3+0x18>
     bee:	da d0       	rcall	.+436    	; 0xda4 <__fp_pscA>
     bf0:	30 f0       	brcs	.+12     	; 0xbfe <__divsf3+0x18>
     bf2:	21 f4       	brne	.+8      	; 0xbfc <__divsf3+0x16>
     bf4:	5f 3f       	cpi	r21, 0xFF	; 255
     bf6:	19 f0       	breq	.+6      	; 0xbfe <__divsf3+0x18>
     bf8:	cc c0       	rjmp	.+408    	; 0xd92 <__fp_inf>
     bfa:	51 11       	cpse	r21, r1
     bfc:	15 c1       	rjmp	.+554    	; 0xe28 <__fp_szero>
     bfe:	cf c0       	rjmp	.+414    	; 0xd9e <__fp_nan>

00000c00 <__divsf3x>:
     c00:	f0 d0       	rcall	.+480    	; 0xde2 <__fp_split3>
     c02:	98 f3       	brcs	.-26     	; 0xbea <__divsf3+0x4>

00000c04 <__divsf3_pse>:
     c04:	99 23       	and	r25, r25
     c06:	c9 f3       	breq	.-14     	; 0xbfa <__divsf3+0x14>
     c08:	55 23       	and	r21, r21
     c0a:	b1 f3       	breq	.-20     	; 0xbf8 <__divsf3+0x12>
     c0c:	95 1b       	sub	r25, r21
     c0e:	55 0b       	sbc	r21, r21
     c10:	bb 27       	eor	r27, r27
     c12:	aa 27       	eor	r26, r26
     c14:	62 17       	cp	r22, r18
     c16:	73 07       	cpc	r23, r19
     c18:	84 07       	cpc	r24, r20
     c1a:	38 f0       	brcs	.+14     	; 0xc2a <__divsf3_pse+0x26>
     c1c:	9f 5f       	subi	r25, 0xFF	; 255
     c1e:	5f 4f       	sbci	r21, 0xFF	; 255
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	aa 1f       	adc	r26, r26
     c28:	a9 f3       	breq	.-22     	; 0xc14 <__divsf3_pse+0x10>
     c2a:	33 d0       	rcall	.+102    	; 0xc92 <__divsf3_pse+0x8e>
     c2c:	0e 2e       	mov	r0, r30
     c2e:	3a f0       	brmi	.+14     	; 0xc3e <__divsf3_pse+0x3a>
     c30:	e0 e8       	ldi	r30, 0x80	; 128
     c32:	30 d0       	rcall	.+96     	; 0xc94 <__divsf3_pse+0x90>
     c34:	91 50       	subi	r25, 0x01	; 1
     c36:	50 40       	sbci	r21, 0x00	; 0
     c38:	e6 95       	lsr	r30
     c3a:	00 1c       	adc	r0, r0
     c3c:	ca f7       	brpl	.-14     	; 0xc30 <__divsf3_pse+0x2c>
     c3e:	29 d0       	rcall	.+82     	; 0xc92 <__divsf3_pse+0x8e>
     c40:	fe 2f       	mov	r31, r30
     c42:	27 d0       	rcall	.+78     	; 0xc92 <__divsf3_pse+0x8e>
     c44:	66 0f       	add	r22, r22
     c46:	77 1f       	adc	r23, r23
     c48:	88 1f       	adc	r24, r24
     c4a:	bb 1f       	adc	r27, r27
     c4c:	26 17       	cp	r18, r22
     c4e:	37 07       	cpc	r19, r23
     c50:	48 07       	cpc	r20, r24
     c52:	ab 07       	cpc	r26, r27
     c54:	b0 e8       	ldi	r27, 0x80	; 128
     c56:	09 f0       	breq	.+2      	; 0xc5a <__divsf3_pse+0x56>
     c58:	bb 0b       	sbc	r27, r27
     c5a:	80 2d       	mov	r24, r0
     c5c:	bf 01       	movw	r22, r30
     c5e:	ff 27       	eor	r31, r31
     c60:	93 58       	subi	r25, 0x83	; 131
     c62:	5f 4f       	sbci	r21, 0xFF	; 255
     c64:	2a f0       	brmi	.+10     	; 0xc70 <__divsf3_pse+0x6c>
     c66:	9e 3f       	cpi	r25, 0xFE	; 254
     c68:	51 05       	cpc	r21, r1
     c6a:	68 f0       	brcs	.+26     	; 0xc86 <__divsf3_pse+0x82>
     c6c:	92 c0       	rjmp	.+292    	; 0xd92 <__fp_inf>
     c6e:	dc c0       	rjmp	.+440    	; 0xe28 <__fp_szero>
     c70:	5f 3f       	cpi	r21, 0xFF	; 255
     c72:	ec f3       	brlt	.-6      	; 0xc6e <__divsf3_pse+0x6a>
     c74:	98 3e       	cpi	r25, 0xE8	; 232
     c76:	dc f3       	brlt	.-10     	; 0xc6e <__divsf3_pse+0x6a>
     c78:	86 95       	lsr	r24
     c7a:	77 95       	ror	r23
     c7c:	67 95       	ror	r22
     c7e:	b7 95       	ror	r27
     c80:	f7 95       	ror	r31
     c82:	9f 5f       	subi	r25, 0xFF	; 255
     c84:	c9 f7       	brne	.-14     	; 0xc78 <__divsf3_pse+0x74>
     c86:	88 0f       	add	r24, r24
     c88:	91 1d       	adc	r25, r1
     c8a:	96 95       	lsr	r25
     c8c:	87 95       	ror	r24
     c8e:	97 f9       	bld	r25, 7
     c90:	08 95       	ret
     c92:	e1 e0       	ldi	r30, 0x01	; 1
     c94:	66 0f       	add	r22, r22
     c96:	77 1f       	adc	r23, r23
     c98:	88 1f       	adc	r24, r24
     c9a:	bb 1f       	adc	r27, r27
     c9c:	62 17       	cp	r22, r18
     c9e:	73 07       	cpc	r23, r19
     ca0:	84 07       	cpc	r24, r20
     ca2:	ba 07       	cpc	r27, r26
     ca4:	20 f0       	brcs	.+8      	; 0xcae <__divsf3_pse+0xaa>
     ca6:	62 1b       	sub	r22, r18
     ca8:	73 0b       	sbc	r23, r19
     caa:	84 0b       	sbc	r24, r20
     cac:	ba 0b       	sbc	r27, r26
     cae:	ee 1f       	adc	r30, r30
     cb0:	88 f7       	brcc	.-30     	; 0xc94 <__divsf3_pse+0x90>
     cb2:	e0 95       	com	r30
     cb4:	08 95       	ret

00000cb6 <__fixsfsi>:
     cb6:	04 d0       	rcall	.+8      	; 0xcc0 <__fixunssfsi>
     cb8:	68 94       	set
     cba:	b1 11       	cpse	r27, r1
     cbc:	b5 c0       	rjmp	.+362    	; 0xe28 <__fp_szero>
     cbe:	08 95       	ret

00000cc0 <__fixunssfsi>:
     cc0:	98 d0       	rcall	.+304    	; 0xdf2 <__fp_splitA>
     cc2:	88 f0       	brcs	.+34     	; 0xce6 <__fixunssfsi+0x26>
     cc4:	9f 57       	subi	r25, 0x7F	; 127
     cc6:	90 f0       	brcs	.+36     	; 0xcec <__fixunssfsi+0x2c>
     cc8:	b9 2f       	mov	r27, r25
     cca:	99 27       	eor	r25, r25
     ccc:	b7 51       	subi	r27, 0x17	; 23
     cce:	a0 f0       	brcs	.+40     	; 0xcf8 <__fixunssfsi+0x38>
     cd0:	d1 f0       	breq	.+52     	; 0xd06 <__fixunssfsi+0x46>
     cd2:	66 0f       	add	r22, r22
     cd4:	77 1f       	adc	r23, r23
     cd6:	88 1f       	adc	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	1a f0       	brmi	.+6      	; 0xce2 <__fixunssfsi+0x22>
     cdc:	ba 95       	dec	r27
     cde:	c9 f7       	brne	.-14     	; 0xcd2 <__fixunssfsi+0x12>
     ce0:	12 c0       	rjmp	.+36     	; 0xd06 <__fixunssfsi+0x46>
     ce2:	b1 30       	cpi	r27, 0x01	; 1
     ce4:	81 f0       	breq	.+32     	; 0xd06 <__fixunssfsi+0x46>
     ce6:	9f d0       	rcall	.+318    	; 0xe26 <__fp_zero>
     ce8:	b1 e0       	ldi	r27, 0x01	; 1
     cea:	08 95       	ret
     cec:	9c c0       	rjmp	.+312    	; 0xe26 <__fp_zero>
     cee:	67 2f       	mov	r22, r23
     cf0:	78 2f       	mov	r23, r24
     cf2:	88 27       	eor	r24, r24
     cf4:	b8 5f       	subi	r27, 0xF8	; 248
     cf6:	39 f0       	breq	.+14     	; 0xd06 <__fixunssfsi+0x46>
     cf8:	b9 3f       	cpi	r27, 0xF9	; 249
     cfa:	cc f3       	brlt	.-14     	; 0xcee <__fixunssfsi+0x2e>
     cfc:	86 95       	lsr	r24
     cfe:	77 95       	ror	r23
     d00:	67 95       	ror	r22
     d02:	b3 95       	inc	r27
     d04:	d9 f7       	brne	.-10     	; 0xcfc <__fixunssfsi+0x3c>
     d06:	3e f4       	brtc	.+14     	; 0xd16 <__fixunssfsi+0x56>
     d08:	90 95       	com	r25
     d0a:	80 95       	com	r24
     d0c:	70 95       	com	r23
     d0e:	61 95       	neg	r22
     d10:	7f 4f       	sbci	r23, 0xFF	; 255
     d12:	8f 4f       	sbci	r24, 0xFF	; 255
     d14:	9f 4f       	sbci	r25, 0xFF	; 255
     d16:	08 95       	ret

00000d18 <__floatunsisf>:
     d18:	e8 94       	clt
     d1a:	09 c0       	rjmp	.+18     	; 0xd2e <__floatsisf+0x12>

00000d1c <__floatsisf>:
     d1c:	97 fb       	bst	r25, 7
     d1e:	3e f4       	brtc	.+14     	; 0xd2e <__floatsisf+0x12>
     d20:	90 95       	com	r25
     d22:	80 95       	com	r24
     d24:	70 95       	com	r23
     d26:	61 95       	neg	r22
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	8f 4f       	sbci	r24, 0xFF	; 255
     d2c:	9f 4f       	sbci	r25, 0xFF	; 255
     d2e:	99 23       	and	r25, r25
     d30:	a9 f0       	breq	.+42     	; 0xd5c <__floatsisf+0x40>
     d32:	f9 2f       	mov	r31, r25
     d34:	96 e9       	ldi	r25, 0x96	; 150
     d36:	bb 27       	eor	r27, r27
     d38:	93 95       	inc	r25
     d3a:	f6 95       	lsr	r31
     d3c:	87 95       	ror	r24
     d3e:	77 95       	ror	r23
     d40:	67 95       	ror	r22
     d42:	b7 95       	ror	r27
     d44:	f1 11       	cpse	r31, r1
     d46:	f8 cf       	rjmp	.-16     	; 0xd38 <__floatsisf+0x1c>
     d48:	fa f4       	brpl	.+62     	; 0xd88 <__floatsisf+0x6c>
     d4a:	bb 0f       	add	r27, r27
     d4c:	11 f4       	brne	.+4      	; 0xd52 <__floatsisf+0x36>
     d4e:	60 ff       	sbrs	r22, 0
     d50:	1b c0       	rjmp	.+54     	; 0xd88 <__floatsisf+0x6c>
     d52:	6f 5f       	subi	r22, 0xFF	; 255
     d54:	7f 4f       	sbci	r23, 0xFF	; 255
     d56:	8f 4f       	sbci	r24, 0xFF	; 255
     d58:	9f 4f       	sbci	r25, 0xFF	; 255
     d5a:	16 c0       	rjmp	.+44     	; 0xd88 <__floatsisf+0x6c>
     d5c:	88 23       	and	r24, r24
     d5e:	11 f0       	breq	.+4      	; 0xd64 <__floatsisf+0x48>
     d60:	96 e9       	ldi	r25, 0x96	; 150
     d62:	11 c0       	rjmp	.+34     	; 0xd86 <__floatsisf+0x6a>
     d64:	77 23       	and	r23, r23
     d66:	21 f0       	breq	.+8      	; 0xd70 <__floatsisf+0x54>
     d68:	9e e8       	ldi	r25, 0x8E	; 142
     d6a:	87 2f       	mov	r24, r23
     d6c:	76 2f       	mov	r23, r22
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__floatsisf+0x5e>
     d70:	66 23       	and	r22, r22
     d72:	71 f0       	breq	.+28     	; 0xd90 <__floatsisf+0x74>
     d74:	96 e8       	ldi	r25, 0x86	; 134
     d76:	86 2f       	mov	r24, r22
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	2a f0       	brmi	.+10     	; 0xd88 <__floatsisf+0x6c>
     d7e:	9a 95       	dec	r25
     d80:	66 0f       	add	r22, r22
     d82:	77 1f       	adc	r23, r23
     d84:	88 1f       	adc	r24, r24
     d86:	da f7       	brpl	.-10     	; 0xd7e <__floatsisf+0x62>
     d88:	88 0f       	add	r24, r24
     d8a:	96 95       	lsr	r25
     d8c:	87 95       	ror	r24
     d8e:	97 f9       	bld	r25, 7
     d90:	08 95       	ret

00000d92 <__fp_inf>:
     d92:	97 f9       	bld	r25, 7
     d94:	9f 67       	ori	r25, 0x7F	; 127
     d96:	80 e8       	ldi	r24, 0x80	; 128
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	08 95       	ret

00000d9e <__fp_nan>:
     d9e:	9f ef       	ldi	r25, 0xFF	; 255
     da0:	80 ec       	ldi	r24, 0xC0	; 192
     da2:	08 95       	ret

00000da4 <__fp_pscA>:
     da4:	00 24       	eor	r0, r0
     da6:	0a 94       	dec	r0
     da8:	16 16       	cp	r1, r22
     daa:	17 06       	cpc	r1, r23
     dac:	18 06       	cpc	r1, r24
     dae:	09 06       	cpc	r0, r25
     db0:	08 95       	ret

00000db2 <__fp_pscB>:
     db2:	00 24       	eor	r0, r0
     db4:	0a 94       	dec	r0
     db6:	12 16       	cp	r1, r18
     db8:	13 06       	cpc	r1, r19
     dba:	14 06       	cpc	r1, r20
     dbc:	05 06       	cpc	r0, r21
     dbe:	08 95       	ret

00000dc0 <__fp_round>:
     dc0:	09 2e       	mov	r0, r25
     dc2:	03 94       	inc	r0
     dc4:	00 0c       	add	r0, r0
     dc6:	11 f4       	brne	.+4      	; 0xdcc <__fp_round+0xc>
     dc8:	88 23       	and	r24, r24
     dca:	52 f0       	brmi	.+20     	; 0xde0 <__fp_round+0x20>
     dcc:	bb 0f       	add	r27, r27
     dce:	40 f4       	brcc	.+16     	; 0xde0 <__fp_round+0x20>
     dd0:	bf 2b       	or	r27, r31
     dd2:	11 f4       	brne	.+4      	; 0xdd8 <__fp_round+0x18>
     dd4:	60 ff       	sbrs	r22, 0
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <__fp_round+0x20>
     dd8:	6f 5f       	subi	r22, 0xFF	; 255
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	8f 4f       	sbci	r24, 0xFF	; 255
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	08 95       	ret

00000de2 <__fp_split3>:
     de2:	57 fd       	sbrc	r21, 7
     de4:	90 58       	subi	r25, 0x80	; 128
     de6:	44 0f       	add	r20, r20
     de8:	55 1f       	adc	r21, r21
     dea:	59 f0       	breq	.+22     	; 0xe02 <__fp_splitA+0x10>
     dec:	5f 3f       	cpi	r21, 0xFF	; 255
     dee:	71 f0       	breq	.+28     	; 0xe0c <__fp_splitA+0x1a>
     df0:	47 95       	ror	r20

00000df2 <__fp_splitA>:
     df2:	88 0f       	add	r24, r24
     df4:	97 fb       	bst	r25, 7
     df6:	99 1f       	adc	r25, r25
     df8:	61 f0       	breq	.+24     	; 0xe12 <__fp_splitA+0x20>
     dfa:	9f 3f       	cpi	r25, 0xFF	; 255
     dfc:	79 f0       	breq	.+30     	; 0xe1c <__fp_splitA+0x2a>
     dfe:	87 95       	ror	r24
     e00:	08 95       	ret
     e02:	12 16       	cp	r1, r18
     e04:	13 06       	cpc	r1, r19
     e06:	14 06       	cpc	r1, r20
     e08:	55 1f       	adc	r21, r21
     e0a:	f2 cf       	rjmp	.-28     	; 0xdf0 <__fp_split3+0xe>
     e0c:	46 95       	lsr	r20
     e0e:	f1 df       	rcall	.-30     	; 0xdf2 <__fp_splitA>
     e10:	08 c0       	rjmp	.+16     	; 0xe22 <__fp_splitA+0x30>
     e12:	16 16       	cp	r1, r22
     e14:	17 06       	cpc	r1, r23
     e16:	18 06       	cpc	r1, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	f1 cf       	rjmp	.-30     	; 0xdfe <__fp_splitA+0xc>
     e1c:	86 95       	lsr	r24
     e1e:	71 05       	cpc	r23, r1
     e20:	61 05       	cpc	r22, r1
     e22:	08 94       	sec
     e24:	08 95       	ret

00000e26 <__fp_zero>:
     e26:	e8 94       	clt

00000e28 <__fp_szero>:
     e28:	bb 27       	eor	r27, r27
     e2a:	66 27       	eor	r22, r22
     e2c:	77 27       	eor	r23, r23
     e2e:	cb 01       	movw	r24, r22
     e30:	97 f9       	bld	r25, 7
     e32:	08 95       	ret

00000e34 <__mulsf3>:
     e34:	0b d0       	rcall	.+22     	; 0xe4c <__mulsf3x>
     e36:	c4 cf       	rjmp	.-120    	; 0xdc0 <__fp_round>
     e38:	b5 df       	rcall	.-150    	; 0xda4 <__fp_pscA>
     e3a:	28 f0       	brcs	.+10     	; 0xe46 <__mulsf3+0x12>
     e3c:	ba df       	rcall	.-140    	; 0xdb2 <__fp_pscB>
     e3e:	18 f0       	brcs	.+6      	; 0xe46 <__mulsf3+0x12>
     e40:	95 23       	and	r25, r21
     e42:	09 f0       	breq	.+2      	; 0xe46 <__mulsf3+0x12>
     e44:	a6 cf       	rjmp	.-180    	; 0xd92 <__fp_inf>
     e46:	ab cf       	rjmp	.-170    	; 0xd9e <__fp_nan>
     e48:	11 24       	eor	r1, r1
     e4a:	ee cf       	rjmp	.-36     	; 0xe28 <__fp_szero>

00000e4c <__mulsf3x>:
     e4c:	ca df       	rcall	.-108    	; 0xde2 <__fp_split3>
     e4e:	a0 f3       	brcs	.-24     	; 0xe38 <__mulsf3+0x4>

00000e50 <__mulsf3_pse>:
     e50:	95 9f       	mul	r25, r21
     e52:	d1 f3       	breq	.-12     	; 0xe48 <__mulsf3+0x14>
     e54:	95 0f       	add	r25, r21
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	55 1f       	adc	r21, r21
     e5a:	62 9f       	mul	r22, r18
     e5c:	f0 01       	movw	r30, r0
     e5e:	72 9f       	mul	r23, r18
     e60:	bb 27       	eor	r27, r27
     e62:	f0 0d       	add	r31, r0
     e64:	b1 1d       	adc	r27, r1
     e66:	63 9f       	mul	r22, r19
     e68:	aa 27       	eor	r26, r26
     e6a:	f0 0d       	add	r31, r0
     e6c:	b1 1d       	adc	r27, r1
     e6e:	aa 1f       	adc	r26, r26
     e70:	64 9f       	mul	r22, r20
     e72:	66 27       	eor	r22, r22
     e74:	b0 0d       	add	r27, r0
     e76:	a1 1d       	adc	r26, r1
     e78:	66 1f       	adc	r22, r22
     e7a:	82 9f       	mul	r24, r18
     e7c:	22 27       	eor	r18, r18
     e7e:	b0 0d       	add	r27, r0
     e80:	a1 1d       	adc	r26, r1
     e82:	62 1f       	adc	r22, r18
     e84:	73 9f       	mul	r23, r19
     e86:	b0 0d       	add	r27, r0
     e88:	a1 1d       	adc	r26, r1
     e8a:	62 1f       	adc	r22, r18
     e8c:	83 9f       	mul	r24, r19
     e8e:	a0 0d       	add	r26, r0
     e90:	61 1d       	adc	r22, r1
     e92:	22 1f       	adc	r18, r18
     e94:	74 9f       	mul	r23, r20
     e96:	33 27       	eor	r19, r19
     e98:	a0 0d       	add	r26, r0
     e9a:	61 1d       	adc	r22, r1
     e9c:	23 1f       	adc	r18, r19
     e9e:	84 9f       	mul	r24, r20
     ea0:	60 0d       	add	r22, r0
     ea2:	21 1d       	adc	r18, r1
     ea4:	82 2f       	mov	r24, r18
     ea6:	76 2f       	mov	r23, r22
     ea8:	6a 2f       	mov	r22, r26
     eaa:	11 24       	eor	r1, r1
     eac:	9f 57       	subi	r25, 0x7F	; 127
     eae:	50 40       	sbci	r21, 0x00	; 0
     eb0:	8a f0       	brmi	.+34     	; 0xed4 <__mulsf3_pse+0x84>
     eb2:	e1 f0       	breq	.+56     	; 0xeec <__mulsf3_pse+0x9c>
     eb4:	88 23       	and	r24, r24
     eb6:	4a f0       	brmi	.+18     	; 0xeca <__mulsf3_pse+0x7a>
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	bb 1f       	adc	r27, r27
     ebe:	66 1f       	adc	r22, r22
     ec0:	77 1f       	adc	r23, r23
     ec2:	88 1f       	adc	r24, r24
     ec4:	91 50       	subi	r25, 0x01	; 1
     ec6:	50 40       	sbci	r21, 0x00	; 0
     ec8:	a9 f7       	brne	.-22     	; 0xeb4 <__mulsf3_pse+0x64>
     eca:	9e 3f       	cpi	r25, 0xFE	; 254
     ecc:	51 05       	cpc	r21, r1
     ece:	70 f0       	brcs	.+28     	; 0xeec <__mulsf3_pse+0x9c>
     ed0:	60 cf       	rjmp	.-320    	; 0xd92 <__fp_inf>
     ed2:	aa cf       	rjmp	.-172    	; 0xe28 <__fp_szero>
     ed4:	5f 3f       	cpi	r21, 0xFF	; 255
     ed6:	ec f3       	brlt	.-6      	; 0xed2 <__mulsf3_pse+0x82>
     ed8:	98 3e       	cpi	r25, 0xE8	; 232
     eda:	dc f3       	brlt	.-10     	; 0xed2 <__mulsf3_pse+0x82>
     edc:	86 95       	lsr	r24
     ede:	77 95       	ror	r23
     ee0:	67 95       	ror	r22
     ee2:	b7 95       	ror	r27
     ee4:	f7 95       	ror	r31
     ee6:	e7 95       	ror	r30
     ee8:	9f 5f       	subi	r25, 0xFF	; 255
     eea:	c1 f7       	brne	.-16     	; 0xedc <__mulsf3_pse+0x8c>
     eec:	fe 2b       	or	r31, r30
     eee:	88 0f       	add	r24, r24
     ef0:	91 1d       	adc	r25, r1
     ef2:	96 95       	lsr	r25
     ef4:	87 95       	ror	r24
     ef6:	97 f9       	bld	r25, 7
     ef8:	08 95       	ret

00000efa <__divmodhi4>:
     efa:	97 fb       	bst	r25, 7
     efc:	07 2e       	mov	r0, r23
     efe:	16 f4       	brtc	.+4      	; 0xf04 <__divmodhi4+0xa>
     f00:	00 94       	com	r0
     f02:	06 d0       	rcall	.+12     	; 0xf10 <__divmodhi4_neg1>
     f04:	77 fd       	sbrc	r23, 7
     f06:	08 d0       	rcall	.+16     	; 0xf18 <__divmodhi4_neg2>
     f08:	36 d0       	rcall	.+108    	; 0xf76 <__udivmodhi4>
     f0a:	07 fc       	sbrc	r0, 7
     f0c:	05 d0       	rcall	.+10     	; 0xf18 <__divmodhi4_neg2>
     f0e:	3e f4       	brtc	.+14     	; 0xf1e <__divmodhi4_exit>

00000f10 <__divmodhi4_neg1>:
     f10:	90 95       	com	r25
     f12:	81 95       	neg	r24
     f14:	9f 4f       	sbci	r25, 0xFF	; 255
     f16:	08 95       	ret

00000f18 <__divmodhi4_neg2>:
     f18:	70 95       	com	r23
     f1a:	61 95       	neg	r22
     f1c:	7f 4f       	sbci	r23, 0xFF	; 255

00000f1e <__divmodhi4_exit>:
     f1e:	08 95       	ret

00000f20 <__udivmodsi4>:
     f20:	a1 e2       	ldi	r26, 0x21	; 33
     f22:	1a 2e       	mov	r1, r26
     f24:	aa 1b       	sub	r26, r26
     f26:	bb 1b       	sub	r27, r27
     f28:	fd 01       	movw	r30, r26
     f2a:	0d c0       	rjmp	.+26     	; 0xf46 <__udivmodsi4_ep>

00000f2c <__udivmodsi4_loop>:
     f2c:	aa 1f       	adc	r26, r26
     f2e:	bb 1f       	adc	r27, r27
     f30:	ee 1f       	adc	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	a2 17       	cp	r26, r18
     f36:	b3 07       	cpc	r27, r19
     f38:	e4 07       	cpc	r30, r20
     f3a:	f5 07       	cpc	r31, r21
     f3c:	20 f0       	brcs	.+8      	; 0xf46 <__udivmodsi4_ep>
     f3e:	a2 1b       	sub	r26, r18
     f40:	b3 0b       	sbc	r27, r19
     f42:	e4 0b       	sbc	r30, r20
     f44:	f5 0b       	sbc	r31, r21

00000f46 <__udivmodsi4_ep>:
     f46:	66 1f       	adc	r22, r22
     f48:	77 1f       	adc	r23, r23
     f4a:	88 1f       	adc	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	1a 94       	dec	r1
     f50:	69 f7       	brne	.-38     	; 0xf2c <__udivmodsi4_loop>
     f52:	60 95       	com	r22
     f54:	70 95       	com	r23
     f56:	80 95       	com	r24
     f58:	90 95       	com	r25
     f5a:	9b 01       	movw	r18, r22
     f5c:	ac 01       	movw	r20, r24
     f5e:	bd 01       	movw	r22, r26
     f60:	cf 01       	movw	r24, r30
     f62:	08 95       	ret

00000f64 <__tablejump2__>:
     f64:	ee 0f       	add	r30, r30
     f66:	ff 1f       	adc	r31, r31
     f68:	00 24       	eor	r0, r0
     f6a:	00 1c       	adc	r0, r0
     f6c:	0b be       	out	0x3b, r0	; 59
     f6e:	07 90       	elpm	r0, Z+
     f70:	f6 91       	elpm	r31, Z
     f72:	e0 2d       	mov	r30, r0
     f74:	09 94       	ijmp

00000f76 <__udivmodhi4>:
     f76:	aa 1b       	sub	r26, r26
     f78:	bb 1b       	sub	r27, r27
     f7a:	51 e1       	ldi	r21, 0x11	; 17
     f7c:	07 c0       	rjmp	.+14     	; 0xf8c <__udivmodhi4_ep>

00000f7e <__udivmodhi4_loop>:
     f7e:	aa 1f       	adc	r26, r26
     f80:	bb 1f       	adc	r27, r27
     f82:	a6 17       	cp	r26, r22
     f84:	b7 07       	cpc	r27, r23
     f86:	10 f0       	brcs	.+4      	; 0xf8c <__udivmodhi4_ep>
     f88:	a6 1b       	sub	r26, r22
     f8a:	b7 0b       	sbc	r27, r23

00000f8c <__udivmodhi4_ep>:
     f8c:	88 1f       	adc	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	5a 95       	dec	r21
     f92:	a9 f7       	brne	.-22     	; 0xf7e <__udivmodhi4_loop>
     f94:	80 95       	com	r24
     f96:	90 95       	com	r25
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	08 95       	ret

00000f9e <printf>:
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	ae 01       	movw	r20, r28
     fa8:	4b 5f       	subi	r20, 0xFB	; 251
     faa:	5f 4f       	sbci	r21, 0xFF	; 255
     fac:	fa 01       	movw	r30, r20
     fae:	61 91       	ld	r22, Z+
     fb0:	71 91       	ld	r23, Z+
     fb2:	af 01       	movw	r20, r30
     fb4:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <__iob+0x2>
     fb8:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <__iob+0x3>
     fbc:	03 d0       	rcall	.+6      	; 0xfc4 <vfprintf>
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <vfprintf>:
     fc4:	2f 92       	push	r2
     fc6:	3f 92       	push	r3
     fc8:	4f 92       	push	r4
     fca:	5f 92       	push	r5
     fcc:	6f 92       	push	r6
     fce:	7f 92       	push	r7
     fd0:	8f 92       	push	r8
     fd2:	9f 92       	push	r9
     fd4:	af 92       	push	r10
     fd6:	bf 92       	push	r11
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	2b 97       	sbiw	r28, 0x0b	; 11
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	6c 01       	movw	r12, r24
     ffa:	7b 01       	movw	r14, r22
     ffc:	8a 01       	movw	r16, r20
     ffe:	fc 01       	movw	r30, r24
    1000:	17 82       	std	Z+7, r1	; 0x07
    1002:	16 82       	std	Z+6, r1	; 0x06
    1004:	83 81       	ldd	r24, Z+3	; 0x03
    1006:	81 ff       	sbrs	r24, 1
    1008:	bf c1       	rjmp	.+894    	; 0x1388 <__stack+0x289>
    100a:	ce 01       	movw	r24, r28
    100c:	01 96       	adiw	r24, 0x01	; 1
    100e:	3c 01       	movw	r6, r24
    1010:	f6 01       	movw	r30, r12
    1012:	93 81       	ldd	r25, Z+3	; 0x03
    1014:	f7 01       	movw	r30, r14
    1016:	93 fd       	sbrc	r25, 3
    1018:	85 91       	lpm	r24, Z+
    101a:	93 ff       	sbrs	r25, 3
    101c:	81 91       	ld	r24, Z+
    101e:	7f 01       	movw	r14, r30
    1020:	88 23       	and	r24, r24
    1022:	09 f4       	brne	.+2      	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    1024:	ad c1       	rjmp	.+858    	; 0x1380 <__stack+0x281>
    1026:	85 32       	cpi	r24, 0x25	; 37
    1028:	39 f4       	brne	.+14     	; 0x1038 <__DATA_REGION_LENGTH__+0x38>
    102a:	93 fd       	sbrc	r25, 3
    102c:	85 91       	lpm	r24, Z+
    102e:	93 ff       	sbrs	r25, 3
    1030:	81 91       	ld	r24, Z+
    1032:	7f 01       	movw	r14, r30
    1034:	85 32       	cpi	r24, 0x25	; 37
    1036:	21 f4       	brne	.+8      	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
    1038:	b6 01       	movw	r22, r12
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	d6 d1       	rcall	.+940    	; 0x13ea <fputc>
    103e:	e8 cf       	rjmp	.-48     	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
    1040:	91 2c       	mov	r9, r1
    1042:	21 2c       	mov	r2, r1
    1044:	31 2c       	mov	r3, r1
    1046:	ff e1       	ldi	r31, 0x1F	; 31
    1048:	f3 15       	cp	r31, r3
    104a:	d8 f0       	brcs	.+54     	; 0x1082 <__DATA_REGION_LENGTH__+0x82>
    104c:	8b 32       	cpi	r24, 0x2B	; 43
    104e:	79 f0       	breq	.+30     	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
    1050:	38 f4       	brcc	.+14     	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    1052:	80 32       	cpi	r24, 0x20	; 32
    1054:	79 f0       	breq	.+30     	; 0x1074 <__DATA_REGION_LENGTH__+0x74>
    1056:	83 32       	cpi	r24, 0x23	; 35
    1058:	a1 f4       	brne	.+40     	; 0x1082 <__DATA_REGION_LENGTH__+0x82>
    105a:	23 2d       	mov	r18, r3
    105c:	20 61       	ori	r18, 0x10	; 16
    105e:	1d c0       	rjmp	.+58     	; 0x109a <__DATA_REGION_LENGTH__+0x9a>
    1060:	8d 32       	cpi	r24, 0x2D	; 45
    1062:	61 f0       	breq	.+24     	; 0x107c <__DATA_REGION_LENGTH__+0x7c>
    1064:	80 33       	cpi	r24, 0x30	; 48
    1066:	69 f4       	brne	.+26     	; 0x1082 <__DATA_REGION_LENGTH__+0x82>
    1068:	23 2d       	mov	r18, r3
    106a:	21 60       	ori	r18, 0x01	; 1
    106c:	16 c0       	rjmp	.+44     	; 0x109a <__DATA_REGION_LENGTH__+0x9a>
    106e:	83 2d       	mov	r24, r3
    1070:	82 60       	ori	r24, 0x02	; 2
    1072:	38 2e       	mov	r3, r24
    1074:	e3 2d       	mov	r30, r3
    1076:	e4 60       	ori	r30, 0x04	; 4
    1078:	3e 2e       	mov	r3, r30
    107a:	2a c0       	rjmp	.+84     	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
    107c:	f3 2d       	mov	r31, r3
    107e:	f8 60       	ori	r31, 0x08	; 8
    1080:	1d c0       	rjmp	.+58     	; 0x10bc <__DATA_REGION_LENGTH__+0xbc>
    1082:	37 fc       	sbrc	r3, 7
    1084:	2d c0       	rjmp	.+90     	; 0x10e0 <__DATA_REGION_LENGTH__+0xe0>
    1086:	20 ed       	ldi	r18, 0xD0	; 208
    1088:	28 0f       	add	r18, r24
    108a:	2a 30       	cpi	r18, 0x0A	; 10
    108c:	40 f0       	brcs	.+16     	; 0x109e <__DATA_REGION_LENGTH__+0x9e>
    108e:	8e 32       	cpi	r24, 0x2E	; 46
    1090:	b9 f4       	brne	.+46     	; 0x10c0 <__DATA_REGION_LENGTH__+0xc0>
    1092:	36 fc       	sbrc	r3, 6
    1094:	75 c1       	rjmp	.+746    	; 0x1380 <__stack+0x281>
    1096:	23 2d       	mov	r18, r3
    1098:	20 64       	ori	r18, 0x40	; 64
    109a:	32 2e       	mov	r3, r18
    109c:	19 c0       	rjmp	.+50     	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
    109e:	36 fe       	sbrs	r3, 6
    10a0:	06 c0       	rjmp	.+12     	; 0x10ae <__DATA_REGION_LENGTH__+0xae>
    10a2:	8a e0       	ldi	r24, 0x0A	; 10
    10a4:	98 9e       	mul	r9, r24
    10a6:	20 0d       	add	r18, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	92 2e       	mov	r9, r18
    10ac:	11 c0       	rjmp	.+34     	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
    10ae:	ea e0       	ldi	r30, 0x0A	; 10
    10b0:	2e 9e       	mul	r2, r30
    10b2:	20 0d       	add	r18, r0
    10b4:	11 24       	eor	r1, r1
    10b6:	22 2e       	mov	r2, r18
    10b8:	f3 2d       	mov	r31, r3
    10ba:	f0 62       	ori	r31, 0x20	; 32
    10bc:	3f 2e       	mov	r3, r31
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
    10c0:	8c 36       	cpi	r24, 0x6C	; 108
    10c2:	21 f4       	brne	.+8      	; 0x10cc <__DATA_REGION_LENGTH__+0xcc>
    10c4:	83 2d       	mov	r24, r3
    10c6:	80 68       	ori	r24, 0x80	; 128
    10c8:	38 2e       	mov	r3, r24
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <__DATA_REGION_LENGTH__+0xd0>
    10cc:	88 36       	cpi	r24, 0x68	; 104
    10ce:	41 f4       	brne	.+16     	; 0x10e0 <__DATA_REGION_LENGTH__+0xe0>
    10d0:	f7 01       	movw	r30, r14
    10d2:	93 fd       	sbrc	r25, 3
    10d4:	85 91       	lpm	r24, Z+
    10d6:	93 ff       	sbrs	r25, 3
    10d8:	81 91       	ld	r24, Z+
    10da:	7f 01       	movw	r14, r30
    10dc:	81 11       	cpse	r24, r1
    10de:	b3 cf       	rjmp	.-154    	; 0x1046 <__DATA_REGION_LENGTH__+0x46>
    10e0:	98 2f       	mov	r25, r24
    10e2:	9f 7d       	andi	r25, 0xDF	; 223
    10e4:	95 54       	subi	r25, 0x45	; 69
    10e6:	93 30       	cpi	r25, 0x03	; 3
    10e8:	28 f4       	brcc	.+10     	; 0x10f4 <__DATA_REGION_LENGTH__+0xf4>
    10ea:	0c 5f       	subi	r16, 0xFC	; 252
    10ec:	1f 4f       	sbci	r17, 0xFF	; 255
    10ee:	9f e3       	ldi	r25, 0x3F	; 63
    10f0:	99 83       	std	Y+1, r25	; 0x01
    10f2:	0d c0       	rjmp	.+26     	; 0x110e <__stack+0xf>
    10f4:	83 36       	cpi	r24, 0x63	; 99
    10f6:	31 f0       	breq	.+12     	; 0x1104 <__stack+0x5>
    10f8:	83 37       	cpi	r24, 0x73	; 115
    10fa:	71 f0       	breq	.+28     	; 0x1118 <__stack+0x19>
    10fc:	83 35       	cpi	r24, 0x53	; 83
    10fe:	09 f0       	breq	.+2      	; 0x1102 <__stack+0x3>
    1100:	55 c0       	rjmp	.+170    	; 0x11ac <__stack+0xad>
    1102:	20 c0       	rjmp	.+64     	; 0x1144 <__stack+0x45>
    1104:	f8 01       	movw	r30, r16
    1106:	80 81       	ld	r24, Z
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	0e 5f       	subi	r16, 0xFE	; 254
    110c:	1f 4f       	sbci	r17, 0xFF	; 255
    110e:	88 24       	eor	r8, r8
    1110:	83 94       	inc	r8
    1112:	91 2c       	mov	r9, r1
    1114:	53 01       	movw	r10, r6
    1116:	12 c0       	rjmp	.+36     	; 0x113c <__stack+0x3d>
    1118:	28 01       	movw	r4, r16
    111a:	f2 e0       	ldi	r31, 0x02	; 2
    111c:	4f 0e       	add	r4, r31
    111e:	51 1c       	adc	r5, r1
    1120:	f8 01       	movw	r30, r16
    1122:	a0 80       	ld	r10, Z
    1124:	b1 80       	ldd	r11, Z+1	; 0x01
    1126:	36 fe       	sbrs	r3, 6
    1128:	03 c0       	rjmp	.+6      	; 0x1130 <__stack+0x31>
    112a:	69 2d       	mov	r22, r9
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <__stack+0x35>
    1130:	6f ef       	ldi	r22, 0xFF	; 255
    1132:	7f ef       	ldi	r23, 0xFF	; 255
    1134:	c5 01       	movw	r24, r10
    1136:	4e d1       	rcall	.+668    	; 0x13d4 <strnlen>
    1138:	4c 01       	movw	r8, r24
    113a:	82 01       	movw	r16, r4
    113c:	f3 2d       	mov	r31, r3
    113e:	ff 77       	andi	r31, 0x7F	; 127
    1140:	3f 2e       	mov	r3, r31
    1142:	15 c0       	rjmp	.+42     	; 0x116e <__stack+0x6f>
    1144:	28 01       	movw	r4, r16
    1146:	22 e0       	ldi	r18, 0x02	; 2
    1148:	42 0e       	add	r4, r18
    114a:	51 1c       	adc	r5, r1
    114c:	f8 01       	movw	r30, r16
    114e:	a0 80       	ld	r10, Z
    1150:	b1 80       	ldd	r11, Z+1	; 0x01
    1152:	36 fe       	sbrs	r3, 6
    1154:	03 c0       	rjmp	.+6      	; 0x115c <__stack+0x5d>
    1156:	69 2d       	mov	r22, r9
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <__stack+0x61>
    115c:	6f ef       	ldi	r22, 0xFF	; 255
    115e:	7f ef       	ldi	r23, 0xFF	; 255
    1160:	c5 01       	movw	r24, r10
    1162:	2d d1       	rcall	.+602    	; 0x13be <strnlen_P>
    1164:	4c 01       	movw	r8, r24
    1166:	f3 2d       	mov	r31, r3
    1168:	f0 68       	ori	r31, 0x80	; 128
    116a:	3f 2e       	mov	r3, r31
    116c:	82 01       	movw	r16, r4
    116e:	33 fc       	sbrc	r3, 3
    1170:	19 c0       	rjmp	.+50     	; 0x11a4 <__stack+0xa5>
    1172:	82 2d       	mov	r24, r2
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	88 16       	cp	r8, r24
    1178:	99 06       	cpc	r9, r25
    117a:	a0 f4       	brcc	.+40     	; 0x11a4 <__stack+0xa5>
    117c:	b6 01       	movw	r22, r12
    117e:	80 e2       	ldi	r24, 0x20	; 32
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	33 d1       	rcall	.+614    	; 0x13ea <fputc>
    1184:	2a 94       	dec	r2
    1186:	f5 cf       	rjmp	.-22     	; 0x1172 <__stack+0x73>
    1188:	f5 01       	movw	r30, r10
    118a:	37 fc       	sbrc	r3, 7
    118c:	85 91       	lpm	r24, Z+
    118e:	37 fe       	sbrs	r3, 7
    1190:	81 91       	ld	r24, Z+
    1192:	5f 01       	movw	r10, r30
    1194:	b6 01       	movw	r22, r12
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	28 d1       	rcall	.+592    	; 0x13ea <fputc>
    119a:	21 10       	cpse	r2, r1
    119c:	2a 94       	dec	r2
    119e:	21 e0       	ldi	r18, 0x01	; 1
    11a0:	82 1a       	sub	r8, r18
    11a2:	91 08       	sbc	r9, r1
    11a4:	81 14       	cp	r8, r1
    11a6:	91 04       	cpc	r9, r1
    11a8:	79 f7       	brne	.-34     	; 0x1188 <__stack+0x89>
    11aa:	e1 c0       	rjmp	.+450    	; 0x136e <__stack+0x26f>
    11ac:	84 36       	cpi	r24, 0x64	; 100
    11ae:	11 f0       	breq	.+4      	; 0x11b4 <__stack+0xb5>
    11b0:	89 36       	cpi	r24, 0x69	; 105
    11b2:	39 f5       	brne	.+78     	; 0x1202 <__stack+0x103>
    11b4:	f8 01       	movw	r30, r16
    11b6:	37 fe       	sbrs	r3, 7
    11b8:	07 c0       	rjmp	.+14     	; 0x11c8 <__stack+0xc9>
    11ba:	60 81       	ld	r22, Z
    11bc:	71 81       	ldd	r23, Z+1	; 0x01
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	93 81       	ldd	r25, Z+3	; 0x03
    11c2:	0c 5f       	subi	r16, 0xFC	; 252
    11c4:	1f 4f       	sbci	r17, 0xFF	; 255
    11c6:	08 c0       	rjmp	.+16     	; 0x11d8 <__stack+0xd9>
    11c8:	60 81       	ld	r22, Z
    11ca:	71 81       	ldd	r23, Z+1	; 0x01
    11cc:	07 2e       	mov	r0, r23
    11ce:	00 0c       	add	r0, r0
    11d0:	88 0b       	sbc	r24, r24
    11d2:	99 0b       	sbc	r25, r25
    11d4:	0e 5f       	subi	r16, 0xFE	; 254
    11d6:	1f 4f       	sbci	r17, 0xFF	; 255
    11d8:	f3 2d       	mov	r31, r3
    11da:	ff 76       	andi	r31, 0x6F	; 111
    11dc:	3f 2e       	mov	r3, r31
    11de:	97 ff       	sbrs	r25, 7
    11e0:	09 c0       	rjmp	.+18     	; 0x11f4 <__stack+0xf5>
    11e2:	90 95       	com	r25
    11e4:	80 95       	com	r24
    11e6:	70 95       	com	r23
    11e8:	61 95       	neg	r22
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255
    11ec:	8f 4f       	sbci	r24, 0xFF	; 255
    11ee:	9f 4f       	sbci	r25, 0xFF	; 255
    11f0:	f0 68       	ori	r31, 0x80	; 128
    11f2:	3f 2e       	mov	r3, r31
    11f4:	2a e0       	ldi	r18, 0x0A	; 10
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	a3 01       	movw	r20, r6
    11fa:	33 d1       	rcall	.+614    	; 0x1462 <__ultoa_invert>
    11fc:	88 2e       	mov	r8, r24
    11fe:	86 18       	sub	r8, r6
    1200:	44 c0       	rjmp	.+136    	; 0x128a <__stack+0x18b>
    1202:	85 37       	cpi	r24, 0x75	; 117
    1204:	31 f4       	brne	.+12     	; 0x1212 <__stack+0x113>
    1206:	23 2d       	mov	r18, r3
    1208:	2f 7e       	andi	r18, 0xEF	; 239
    120a:	b2 2e       	mov	r11, r18
    120c:	2a e0       	ldi	r18, 0x0A	; 10
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	25 c0       	rjmp	.+74     	; 0x125c <__stack+0x15d>
    1212:	93 2d       	mov	r25, r3
    1214:	99 7f       	andi	r25, 0xF9	; 249
    1216:	b9 2e       	mov	r11, r25
    1218:	8f 36       	cpi	r24, 0x6F	; 111
    121a:	c1 f0       	breq	.+48     	; 0x124c <__stack+0x14d>
    121c:	18 f4       	brcc	.+6      	; 0x1224 <__stack+0x125>
    121e:	88 35       	cpi	r24, 0x58	; 88
    1220:	79 f0       	breq	.+30     	; 0x1240 <__stack+0x141>
    1222:	ae c0       	rjmp	.+348    	; 0x1380 <__stack+0x281>
    1224:	80 37       	cpi	r24, 0x70	; 112
    1226:	19 f0       	breq	.+6      	; 0x122e <__stack+0x12f>
    1228:	88 37       	cpi	r24, 0x78	; 120
    122a:	21 f0       	breq	.+8      	; 0x1234 <__stack+0x135>
    122c:	a9 c0       	rjmp	.+338    	; 0x1380 <__stack+0x281>
    122e:	e9 2f       	mov	r30, r25
    1230:	e0 61       	ori	r30, 0x10	; 16
    1232:	be 2e       	mov	r11, r30
    1234:	b4 fe       	sbrs	r11, 4
    1236:	0d c0       	rjmp	.+26     	; 0x1252 <__stack+0x153>
    1238:	fb 2d       	mov	r31, r11
    123a:	f4 60       	ori	r31, 0x04	; 4
    123c:	bf 2e       	mov	r11, r31
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <__stack+0x153>
    1240:	34 fe       	sbrs	r3, 4
    1242:	0a c0       	rjmp	.+20     	; 0x1258 <__stack+0x159>
    1244:	29 2f       	mov	r18, r25
    1246:	26 60       	ori	r18, 0x06	; 6
    1248:	b2 2e       	mov	r11, r18
    124a:	06 c0       	rjmp	.+12     	; 0x1258 <__stack+0x159>
    124c:	28 e0       	ldi	r18, 0x08	; 8
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	05 c0       	rjmp	.+10     	; 0x125c <__stack+0x15d>
    1252:	20 e1       	ldi	r18, 0x10	; 16
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	02 c0       	rjmp	.+4      	; 0x125c <__stack+0x15d>
    1258:	20 e1       	ldi	r18, 0x10	; 16
    125a:	32 e0       	ldi	r19, 0x02	; 2
    125c:	f8 01       	movw	r30, r16
    125e:	b7 fe       	sbrs	r11, 7
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <__stack+0x171>
    1262:	60 81       	ld	r22, Z
    1264:	71 81       	ldd	r23, Z+1	; 0x01
    1266:	82 81       	ldd	r24, Z+2	; 0x02
    1268:	93 81       	ldd	r25, Z+3	; 0x03
    126a:	0c 5f       	subi	r16, 0xFC	; 252
    126c:	1f 4f       	sbci	r17, 0xFF	; 255
    126e:	06 c0       	rjmp	.+12     	; 0x127c <__stack+0x17d>
    1270:	60 81       	ld	r22, Z
    1272:	71 81       	ldd	r23, Z+1	; 0x01
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 5f       	subi	r16, 0xFE	; 254
    127a:	1f 4f       	sbci	r17, 0xFF	; 255
    127c:	a3 01       	movw	r20, r6
    127e:	f1 d0       	rcall	.+482    	; 0x1462 <__ultoa_invert>
    1280:	88 2e       	mov	r8, r24
    1282:	86 18       	sub	r8, r6
    1284:	fb 2d       	mov	r31, r11
    1286:	ff 77       	andi	r31, 0x7F	; 127
    1288:	3f 2e       	mov	r3, r31
    128a:	36 fe       	sbrs	r3, 6
    128c:	0d c0       	rjmp	.+26     	; 0x12a8 <__stack+0x1a9>
    128e:	23 2d       	mov	r18, r3
    1290:	2e 7f       	andi	r18, 0xFE	; 254
    1292:	a2 2e       	mov	r10, r18
    1294:	89 14       	cp	r8, r9
    1296:	58 f4       	brcc	.+22     	; 0x12ae <__stack+0x1af>
    1298:	34 fe       	sbrs	r3, 4
    129a:	0b c0       	rjmp	.+22     	; 0x12b2 <__stack+0x1b3>
    129c:	32 fc       	sbrc	r3, 2
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <__stack+0x1b3>
    12a0:	83 2d       	mov	r24, r3
    12a2:	8e 7e       	andi	r24, 0xEE	; 238
    12a4:	a8 2e       	mov	r10, r24
    12a6:	05 c0       	rjmp	.+10     	; 0x12b2 <__stack+0x1b3>
    12a8:	b8 2c       	mov	r11, r8
    12aa:	a3 2c       	mov	r10, r3
    12ac:	03 c0       	rjmp	.+6      	; 0x12b4 <__stack+0x1b5>
    12ae:	b8 2c       	mov	r11, r8
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <__stack+0x1b5>
    12b2:	b9 2c       	mov	r11, r9
    12b4:	a4 fe       	sbrs	r10, 4
    12b6:	0f c0       	rjmp	.+30     	; 0x12d6 <__stack+0x1d7>
    12b8:	fe 01       	movw	r30, r28
    12ba:	e8 0d       	add	r30, r8
    12bc:	f1 1d       	adc	r31, r1
    12be:	80 81       	ld	r24, Z
    12c0:	80 33       	cpi	r24, 0x30	; 48
    12c2:	21 f4       	brne	.+8      	; 0x12cc <__stack+0x1cd>
    12c4:	9a 2d       	mov	r25, r10
    12c6:	99 7e       	andi	r25, 0xE9	; 233
    12c8:	a9 2e       	mov	r10, r25
    12ca:	09 c0       	rjmp	.+18     	; 0x12de <__stack+0x1df>
    12cc:	a2 fe       	sbrs	r10, 2
    12ce:	06 c0       	rjmp	.+12     	; 0x12dc <__stack+0x1dd>
    12d0:	b3 94       	inc	r11
    12d2:	b3 94       	inc	r11
    12d4:	04 c0       	rjmp	.+8      	; 0x12de <__stack+0x1df>
    12d6:	8a 2d       	mov	r24, r10
    12d8:	86 78       	andi	r24, 0x86	; 134
    12da:	09 f0       	breq	.+2      	; 0x12de <__stack+0x1df>
    12dc:	b3 94       	inc	r11
    12de:	a3 fc       	sbrc	r10, 3
    12e0:	10 c0       	rjmp	.+32     	; 0x1302 <__stack+0x203>
    12e2:	a0 fe       	sbrs	r10, 0
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <__stack+0x1f3>
    12e6:	b2 14       	cp	r11, r2
    12e8:	80 f4       	brcc	.+32     	; 0x130a <__stack+0x20b>
    12ea:	28 0c       	add	r2, r8
    12ec:	92 2c       	mov	r9, r2
    12ee:	9b 18       	sub	r9, r11
    12f0:	0d c0       	rjmp	.+26     	; 0x130c <__stack+0x20d>
    12f2:	b2 14       	cp	r11, r2
    12f4:	58 f4       	brcc	.+22     	; 0x130c <__stack+0x20d>
    12f6:	b6 01       	movw	r22, r12
    12f8:	80 e2       	ldi	r24, 0x20	; 32
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	76 d0       	rcall	.+236    	; 0x13ea <fputc>
    12fe:	b3 94       	inc	r11
    1300:	f8 cf       	rjmp	.-16     	; 0x12f2 <__stack+0x1f3>
    1302:	b2 14       	cp	r11, r2
    1304:	18 f4       	brcc	.+6      	; 0x130c <__stack+0x20d>
    1306:	2b 18       	sub	r2, r11
    1308:	02 c0       	rjmp	.+4      	; 0x130e <__stack+0x20f>
    130a:	98 2c       	mov	r9, r8
    130c:	21 2c       	mov	r2, r1
    130e:	a4 fe       	sbrs	r10, 4
    1310:	0f c0       	rjmp	.+30     	; 0x1330 <__stack+0x231>
    1312:	b6 01       	movw	r22, r12
    1314:	80 e3       	ldi	r24, 0x30	; 48
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	68 d0       	rcall	.+208    	; 0x13ea <fputc>
    131a:	a2 fe       	sbrs	r10, 2
    131c:	16 c0       	rjmp	.+44     	; 0x134a <__stack+0x24b>
    131e:	a1 fc       	sbrc	r10, 1
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <__stack+0x229>
    1322:	88 e7       	ldi	r24, 0x78	; 120
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 c0       	rjmp	.+4      	; 0x132c <__stack+0x22d>
    1328:	88 e5       	ldi	r24, 0x58	; 88
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	b6 01       	movw	r22, r12
    132e:	0c c0       	rjmp	.+24     	; 0x1348 <__stack+0x249>
    1330:	8a 2d       	mov	r24, r10
    1332:	86 78       	andi	r24, 0x86	; 134
    1334:	51 f0       	breq	.+20     	; 0x134a <__stack+0x24b>
    1336:	a1 fe       	sbrs	r10, 1
    1338:	02 c0       	rjmp	.+4      	; 0x133e <__stack+0x23f>
    133a:	8b e2       	ldi	r24, 0x2B	; 43
    133c:	01 c0       	rjmp	.+2      	; 0x1340 <__stack+0x241>
    133e:	80 e2       	ldi	r24, 0x20	; 32
    1340:	a7 fc       	sbrc	r10, 7
    1342:	8d e2       	ldi	r24, 0x2D	; 45
    1344:	b6 01       	movw	r22, r12
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	50 d0       	rcall	.+160    	; 0x13ea <fputc>
    134a:	89 14       	cp	r8, r9
    134c:	30 f4       	brcc	.+12     	; 0x135a <__stack+0x25b>
    134e:	b6 01       	movw	r22, r12
    1350:	80 e3       	ldi	r24, 0x30	; 48
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	4a d0       	rcall	.+148    	; 0x13ea <fputc>
    1356:	9a 94       	dec	r9
    1358:	f8 cf       	rjmp	.-16     	; 0x134a <__stack+0x24b>
    135a:	8a 94       	dec	r8
    135c:	f3 01       	movw	r30, r6
    135e:	e8 0d       	add	r30, r8
    1360:	f1 1d       	adc	r31, r1
    1362:	80 81       	ld	r24, Z
    1364:	b6 01       	movw	r22, r12
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	40 d0       	rcall	.+128    	; 0x13ea <fputc>
    136a:	81 10       	cpse	r8, r1
    136c:	f6 cf       	rjmp	.-20     	; 0x135a <__stack+0x25b>
    136e:	22 20       	and	r2, r2
    1370:	09 f4       	brne	.+2      	; 0x1374 <__stack+0x275>
    1372:	4e ce       	rjmp	.-868    	; 0x1010 <__DATA_REGION_LENGTH__+0x10>
    1374:	b6 01       	movw	r22, r12
    1376:	80 e2       	ldi	r24, 0x20	; 32
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	37 d0       	rcall	.+110    	; 0x13ea <fputc>
    137c:	2a 94       	dec	r2
    137e:	f7 cf       	rjmp	.-18     	; 0x136e <__stack+0x26f>
    1380:	f6 01       	movw	r30, r12
    1382:	86 81       	ldd	r24, Z+6	; 0x06
    1384:	97 81       	ldd	r25, Z+7	; 0x07
    1386:	02 c0       	rjmp	.+4      	; 0x138c <__stack+0x28d>
    1388:	8f ef       	ldi	r24, 0xFF	; 255
    138a:	9f ef       	ldi	r25, 0xFF	; 255
    138c:	2b 96       	adiw	r28, 0x0b	; 11
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
    13a4:	df 90       	pop	r13
    13a6:	cf 90       	pop	r12
    13a8:	bf 90       	pop	r11
    13aa:	af 90       	pop	r10
    13ac:	9f 90       	pop	r9
    13ae:	8f 90       	pop	r8
    13b0:	7f 90       	pop	r7
    13b2:	6f 90       	pop	r6
    13b4:	5f 90       	pop	r5
    13b6:	4f 90       	pop	r4
    13b8:	3f 90       	pop	r3
    13ba:	2f 90       	pop	r2
    13bc:	08 95       	ret

000013be <strnlen_P>:
    13be:	fc 01       	movw	r30, r24
    13c0:	05 90       	lpm	r0, Z+
    13c2:	61 50       	subi	r22, 0x01	; 1
    13c4:	70 40       	sbci	r23, 0x00	; 0
    13c6:	01 10       	cpse	r0, r1
    13c8:	d8 f7       	brcc	.-10     	; 0x13c0 <strnlen_P+0x2>
    13ca:	80 95       	com	r24
    13cc:	90 95       	com	r25
    13ce:	8e 0f       	add	r24, r30
    13d0:	9f 1f       	adc	r25, r31
    13d2:	08 95       	ret

000013d4 <strnlen>:
    13d4:	fc 01       	movw	r30, r24
    13d6:	61 50       	subi	r22, 0x01	; 1
    13d8:	70 40       	sbci	r23, 0x00	; 0
    13da:	01 90       	ld	r0, Z+
    13dc:	01 10       	cpse	r0, r1
    13de:	d8 f7       	brcc	.-10     	; 0x13d6 <strnlen+0x2>
    13e0:	80 95       	com	r24
    13e2:	90 95       	com	r25
    13e4:	8e 0f       	add	r24, r30
    13e6:	9f 1f       	adc	r25, r31
    13e8:	08 95       	ret

000013ea <fputc>:
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	fb 01       	movw	r30, r22
    13f4:	23 81       	ldd	r18, Z+3	; 0x03
    13f6:	21 fd       	sbrc	r18, 1
    13f8:	03 c0       	rjmp	.+6      	; 0x1400 <fputc+0x16>
    13fa:	8f ef       	ldi	r24, 0xFF	; 255
    13fc:	9f ef       	ldi	r25, 0xFF	; 255
    13fe:	2c c0       	rjmp	.+88     	; 0x1458 <fputc+0x6e>
    1400:	22 ff       	sbrs	r18, 2
    1402:	16 c0       	rjmp	.+44     	; 0x1430 <fputc+0x46>
    1404:	46 81       	ldd	r20, Z+6	; 0x06
    1406:	57 81       	ldd	r21, Z+7	; 0x07
    1408:	24 81       	ldd	r18, Z+4	; 0x04
    140a:	35 81       	ldd	r19, Z+5	; 0x05
    140c:	42 17       	cp	r20, r18
    140e:	53 07       	cpc	r21, r19
    1410:	44 f4       	brge	.+16     	; 0x1422 <fputc+0x38>
    1412:	a0 81       	ld	r26, Z
    1414:	b1 81       	ldd	r27, Z+1	; 0x01
    1416:	9d 01       	movw	r18, r26
    1418:	2f 5f       	subi	r18, 0xFF	; 255
    141a:	3f 4f       	sbci	r19, 0xFF	; 255
    141c:	31 83       	std	Z+1, r19	; 0x01
    141e:	20 83       	st	Z, r18
    1420:	8c 93       	st	X, r24
    1422:	26 81       	ldd	r18, Z+6	; 0x06
    1424:	37 81       	ldd	r19, Z+7	; 0x07
    1426:	2f 5f       	subi	r18, 0xFF	; 255
    1428:	3f 4f       	sbci	r19, 0xFF	; 255
    142a:	37 83       	std	Z+7, r19	; 0x07
    142c:	26 83       	std	Z+6, r18	; 0x06
    142e:	14 c0       	rjmp	.+40     	; 0x1458 <fputc+0x6e>
    1430:	8b 01       	movw	r16, r22
    1432:	ec 01       	movw	r28, r24
    1434:	fb 01       	movw	r30, r22
    1436:	00 84       	ldd	r0, Z+8	; 0x08
    1438:	f1 85       	ldd	r31, Z+9	; 0x09
    143a:	e0 2d       	mov	r30, r0
    143c:	09 95       	icall
    143e:	89 2b       	or	r24, r25
    1440:	e1 f6       	brne	.-72     	; 0x13fa <fputc+0x10>
    1442:	d8 01       	movw	r26, r16
    1444:	16 96       	adiw	r26, 0x06	; 6
    1446:	8d 91       	ld	r24, X+
    1448:	9c 91       	ld	r25, X
    144a:	17 97       	sbiw	r26, 0x07	; 7
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	17 96       	adiw	r26, 0x07	; 7
    1450:	9c 93       	st	X, r25
    1452:	8e 93       	st	-X, r24
    1454:	16 97       	sbiw	r26, 0x06	; 6
    1456:	ce 01       	movw	r24, r28
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	08 95       	ret

00001462 <__ultoa_invert>:
    1462:	fa 01       	movw	r30, r20
    1464:	aa 27       	eor	r26, r26
    1466:	28 30       	cpi	r18, 0x08	; 8
    1468:	51 f1       	breq	.+84     	; 0x14be <__ultoa_invert+0x5c>
    146a:	20 31       	cpi	r18, 0x10	; 16
    146c:	81 f1       	breq	.+96     	; 0x14ce <__ultoa_invert+0x6c>
    146e:	e8 94       	clt
    1470:	6f 93       	push	r22
    1472:	6e 7f       	andi	r22, 0xFE	; 254
    1474:	6e 5f       	subi	r22, 0xFE	; 254
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	8f 4f       	sbci	r24, 0xFF	; 255
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	af 4f       	sbci	r26, 0xFF	; 255
    147e:	b1 e0       	ldi	r27, 0x01	; 1
    1480:	3e d0       	rcall	.+124    	; 0x14fe <__ultoa_invert+0x9c>
    1482:	b4 e0       	ldi	r27, 0x04	; 4
    1484:	3c d0       	rcall	.+120    	; 0x14fe <__ultoa_invert+0x9c>
    1486:	67 0f       	add	r22, r23
    1488:	78 1f       	adc	r23, r24
    148a:	89 1f       	adc	r24, r25
    148c:	9a 1f       	adc	r25, r26
    148e:	a1 1d       	adc	r26, r1
    1490:	68 0f       	add	r22, r24
    1492:	79 1f       	adc	r23, r25
    1494:	8a 1f       	adc	r24, r26
    1496:	91 1d       	adc	r25, r1
    1498:	a1 1d       	adc	r26, r1
    149a:	6a 0f       	add	r22, r26
    149c:	71 1d       	adc	r23, r1
    149e:	81 1d       	adc	r24, r1
    14a0:	91 1d       	adc	r25, r1
    14a2:	a1 1d       	adc	r26, r1
    14a4:	20 d0       	rcall	.+64     	; 0x14e6 <__ultoa_invert+0x84>
    14a6:	09 f4       	brne	.+2      	; 0x14aa <__ultoa_invert+0x48>
    14a8:	68 94       	set
    14aa:	3f 91       	pop	r19
    14ac:	2a e0       	ldi	r18, 0x0A	; 10
    14ae:	26 9f       	mul	r18, r22
    14b0:	11 24       	eor	r1, r1
    14b2:	30 19       	sub	r19, r0
    14b4:	30 5d       	subi	r19, 0xD0	; 208
    14b6:	31 93       	st	Z+, r19
    14b8:	de f6       	brtc	.-74     	; 0x1470 <__ultoa_invert+0xe>
    14ba:	cf 01       	movw	r24, r30
    14bc:	08 95       	ret
    14be:	46 2f       	mov	r20, r22
    14c0:	47 70       	andi	r20, 0x07	; 7
    14c2:	40 5d       	subi	r20, 0xD0	; 208
    14c4:	41 93       	st	Z+, r20
    14c6:	b3 e0       	ldi	r27, 0x03	; 3
    14c8:	0f d0       	rcall	.+30     	; 0x14e8 <__ultoa_invert+0x86>
    14ca:	c9 f7       	brne	.-14     	; 0x14be <__ultoa_invert+0x5c>
    14cc:	f6 cf       	rjmp	.-20     	; 0x14ba <__ultoa_invert+0x58>
    14ce:	46 2f       	mov	r20, r22
    14d0:	4f 70       	andi	r20, 0x0F	; 15
    14d2:	40 5d       	subi	r20, 0xD0	; 208
    14d4:	4a 33       	cpi	r20, 0x3A	; 58
    14d6:	18 f0       	brcs	.+6      	; 0x14de <__ultoa_invert+0x7c>
    14d8:	49 5d       	subi	r20, 0xD9	; 217
    14da:	31 fd       	sbrc	r19, 1
    14dc:	40 52       	subi	r20, 0x20	; 32
    14de:	41 93       	st	Z+, r20
    14e0:	02 d0       	rcall	.+4      	; 0x14e6 <__ultoa_invert+0x84>
    14e2:	a9 f7       	brne	.-22     	; 0x14ce <__ultoa_invert+0x6c>
    14e4:	ea cf       	rjmp	.-44     	; 0x14ba <__ultoa_invert+0x58>
    14e6:	b4 e0       	ldi	r27, 0x04	; 4
    14e8:	a6 95       	lsr	r26
    14ea:	97 95       	ror	r25
    14ec:	87 95       	ror	r24
    14ee:	77 95       	ror	r23
    14f0:	67 95       	ror	r22
    14f2:	ba 95       	dec	r27
    14f4:	c9 f7       	brne	.-14     	; 0x14e8 <__ultoa_invert+0x86>
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	61 05       	cpc	r22, r1
    14fa:	71 05       	cpc	r23, r1
    14fc:	08 95       	ret
    14fe:	9b 01       	movw	r18, r22
    1500:	ac 01       	movw	r20, r24
    1502:	0a 2e       	mov	r0, r26
    1504:	06 94       	lsr	r0
    1506:	57 95       	ror	r21
    1508:	47 95       	ror	r20
    150a:	37 95       	ror	r19
    150c:	27 95       	ror	r18
    150e:	ba 95       	dec	r27
    1510:	c9 f7       	brne	.-14     	; 0x1504 <__ultoa_invert+0xa2>
    1512:	62 0f       	add	r22, r18
    1514:	73 1f       	adc	r23, r19
    1516:	84 1f       	adc	r24, r20
    1518:	95 1f       	adc	r25, r21
    151a:	a0 1d       	adc	r26, r0
    151c:	08 95       	ret

0000151e <_exit>:
    151e:	f8 94       	cli

00001520 <__stop_program>:
    1520:	ff cf       	rjmp	.-2      	; 0x1520 <__stop_program>
