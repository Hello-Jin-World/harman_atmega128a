
11_AUTO_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  0000105e  000010f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000105e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000660  0080013c  0080013c  0000112e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000112e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000132f  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d73  00000000  00000000  00002643  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac9  00000000  00000000  000033b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00003e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065a  00000000  00000000  0000421c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000875  00000000  00000000  00004876  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000050eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	15 c2       	rjmp	.+1066   	; 0x440 <__vector_5>
      16:	00 00       	nop
      18:	60 c2       	rjmp	.+1216   	; 0x4da <__vector_6>
      1a:	00 00       	nop
      1c:	ab c2       	rjmp	.+1366   	; 0x574 <__vector_7>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4d c0       	rjmp	.+154    	; 0xdc <__vector_16>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	d5 c0       	rjmp	.+426    	; 0x1f4 <__vector_18>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	4f c1       	rjmp	.+670    	; 0x318 <__vector_30>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e5       	ldi	r30, 0x5E	; 94
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 33       	cpi	r26, 0x3C	; 60
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	ac e3       	ldi	r26, 0x3C	; 60
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 39       	cpi	r26, 0x9C	; 156
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	62 d0       	rcall	.+196    	; 0x188 <main>
      c4:	ca c7       	rjmp	.+3988   	; 0x105a <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init_button>:
// 00001111
// DDRD &= 0x0f; // 4, 5, 6, 7을 input. PORTD.4 가독성이 떨어진다.

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN /*| 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN*/);
      c8:	84 b3       	in	r24, 0x14	; 20
      ca:	8f 77       	andi	r24, 0x7F	; 127
      cc:	84 bb       	out	0x14, r24	; 20
      ce:	08 95       	ret

000000d0 <init_led>:

void init_led(void);

void init_led(void)
{
	AUTO_RUN_LED_PORT_DDR |= 1 << AUTO_RUN_LED_PIN;
      d0:	e4 e6       	ldi	r30, 0x64	; 100
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	80 81       	ld	r24, Z
      d6:	88 60       	ori	r24, 0x08	; 8
      d8:	80 83       	st	Z, r24
      da:	08 95       	ret

000000dc <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
      dc:	1f 92       	push	r1
      de:	0f 92       	push	r0
      e0:	0f b6       	in	r0, 0x3f	; 63
      e2:	0f 92       	push	r0
      e4:	11 24       	eor	r1, r1
      e6:	8f 93       	push	r24
      e8:	9f 93       	push	r25
      ea:	af 93       	push	r26
      ec:	bf 93       	push	r27
	TCNT0=6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
      ee:	86 e0       	ldi	r24, 0x06	; 6
      f0:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
      f2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <msec_count>
      f6:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <msec_count+0x1>
      fa:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <msec_count+0x2>
      fe:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <msec_count+0x3>
     102:	01 96       	adiw	r24, 0x01	; 1
     104:	a1 1d       	adc	r26, r1
     106:	b1 1d       	adc	r27, r1
     108:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <msec_count>
     10c:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <msec_count+0x1>
     110:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <msec_count+0x2>
     114:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <msec_count+0x3>
	fnd_dis++;   // fnd 잔상효과 유지 하기 위한 timer 2ms
     118:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <fnd_dis>
     11c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <fnd_dis+0x1>
     120:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <fnd_dis+0x2>
     124:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <fnd_dis+0x3>
     128:	01 96       	adiw	r24, 0x01	; 1
     12a:	a1 1d       	adc	r26, r1
     12c:	b1 1d       	adc	r27, r1
     12e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <fnd_dis>
     132:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <fnd_dis+0x1>
     136:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <fnd_dis+0x2>
     13a:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <fnd_dis+0x3>
	ultrasonic_check_timer++;
     13e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     142:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
     146:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <__data_end+0x2>
     14a:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <__data_end+0x3>
     14e:	01 96       	adiw	r24, 0x01	; 1
     150:	a1 1d       	adc	r26, r1
     152:	b1 1d       	adc	r27, r1
     154:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
     158:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
     15c:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <__data_end+0x2>
     160:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <__data_end+0x3>
}
     164:	bf 91       	pop	r27
     166:	af 91       	pop	r26
     168:	9f 91       	pop	r25
     16a:	8f 91       	pop	r24
     16c:	0f 90       	pop	r0
     16e:	0f be       	out	0x3f, r0	; 63
     170:	0f 90       	pop	r0
     172:	1f 90       	pop	r1
     174:	18 95       	reti

00000176 <init_timer0>:
	// 1. 분주비 계산
	// 16000000HZ/64 ==> 250,000HZ
	// 2. T(주기) 1가 잡아 먹는 시간 : 1/f = 1/250,000 ==> 0.000004sec(4us) : 0.004ms
	// 3. 8bit timer OV(OVflow) : 0.004ms x 256 = 0.001024sec --> 1.024ms
	// 그러면 정확히 1ms 를 재고 싶다면 0.004ms x 250개 = 0.001sec ==> 1ms
	TCNT0 = 6;   // TCNT : 0~256 ==> 1ms마다 TIMER0_OVF_vect로 진입한다.
     176:	86 e0       	ldi	r24, 0x06	; 6
     178:	82 bf       	out	0x32, r24	; 50
	// TCNT0 = 6로 설정을 한이유: 6~256 : 250개를 count(정확히 1MS를맞추기 위해서)
	//
	// 4 분주비를 설정 (250khz)
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     17a:	83 b7       	in	r24, 0x33	; 51
     17c:	84 60       	ori	r24, 0x04	; 4
     17e:	83 bf       	out	0x33, r24	; 51
	// 5. TIMER0 OVERFLOW를 허용(enable)
	TIMSK |= 1 << TOIE0;  // TIMSK |= 0x01;
     180:	87 b7       	in	r24, 0x37	; 55
     182:	81 60       	ori	r24, 0x01	; 1
     184:	87 bf       	out	0x37, r24	; 55
     186:	08 95       	ret

00000188 <main>:
	ultrasonic_check_timer++;
}

int main(void)
{
	init_led();
     188:	a3 df       	rcall	.-186    	; 0xd0 <init_led>
	init_button();
     18a:	9e df       	rcall	.-196    	; 0xc8 <init_button>
	init_timer0();
     18c:	f4 df       	rcall	.-24     	; 0x176 <init_timer0>
	init_uart0();
     18e:	b0 d0       	rcall	.+352    	; 0x2f0 <init_uart0>
	init_uart1();
     190:	42 d1       	rcall	.+644    	; 0x416 <init_uart1>
     192:	0b d0       	rcall	.+22     	; 0x1aa <init_n289n>
	init_n289n();
     194:	1b d0       	rcall	.+54     	; 0x1cc <init_timer1_pwm>
     196:	3b d2       	rcall	.+1142   	; 0x60e <init_ultrasonic>
	init_timer1_pwm();
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	91 e0       	ldi	r25, 0x01	; 1
	init_ultrasonic(); // timer 3
     19c:	90 93 99 07 	sts	0x0799, r25	; 0x800799 <__iob+0x3>
	

	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     1a0:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <__iob+0x2>
     1a4:	78 94       	sei
     1a6:	a8 d2       	rcall	.+1360   	; 0x6f8 <ultrasonic_distance_check>
     1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <main+0x1e>

000001aa <init_n289n>:
	   1         1   : STOP
*/

void init_n289n(void)
{
	MOTER_PWM_DDR |= 1 << MOTER_LEFT_PORT_DDR | 1 << MOTER_RIGHT_PORT_DDR; // DDR설정
     1aa:	87 b3       	in	r24, 0x17	; 23
     1ac:	80 66       	ori	r24, 0x60	; 96
     1ae:	87 bb       	out	0x17, r24	; 23
	MOTER_DRIVER_DIRECTION_PORT_DDR |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3; // PF1234 출력으로 설정
     1b0:	e1 e6       	ldi	r30, 0x61	; 97
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	80 81       	ld	r24, Z
     1b6:	8f 60       	ori	r24, 0x0F	; 15
     1b8:	80 83       	st	Z, r24
	
	MOTER_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     1ba:	e2 e6       	ldi	r30, 0x62	; 98
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	80 7f       	andi	r24, 0xF0	; 240
     1c2:	80 83       	st	Z, r24
	MOTER_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 2; // 자동차를 전진모드로 
     1c4:	80 81       	ld	r24, Z
     1c6:	85 60       	ori	r24, 0x05	; 5
     1c8:	80 83       	st	Z, r24
     1ca:	08 95       	ret

000001cc <init_timer1_pwm>:
}

void init_timer1_pwm(void)
{
	// 모드 14 : 고속 pwm 
	TCCR1A |= 1 << WGM11; // TOP --> ICR1에 설정
     1cc:	8f b5       	in	r24, 0x2f	; 47
     1ce:	82 60       	ori	r24, 0x02	; 2
     1d0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM12 | 1 << WGM13;
     1d2:	8e b5       	in	r24, 0x2e	; 46
     1d4:	88 61       	ori	r24, 0x18	; 24
     1d6:	8e bd       	out	0x2e, r24	; 46
	// 비반전모드 top : ICR1  비교일치값(pwm)지정 : OCR1A, OCR1B
	// TCCR1A레지스터의 COM1A1을 1로 set
	// 비교일치 발생시 OCR1A, OCR1B의 출력 핀은 LOW로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR1A |= 1 << COM1A1;
     1d8:	8f b5       	in	r24, 0x2f	; 47
     1da:	80 68       	ori	r24, 0x80	; 128
     1dc:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << COM1B1;
     1de:	8e b5       	in	r24, 0x2e	; 46
     1e0:	80 62       	ori	r24, 0x20	; 32
     1e2:	8e bd       	out	0x2e, r24	; 46
	// 분주비 : 64   16,000,000hz -> 250,000hz        
	// 주기 : 1 / 250,000 -> 4us
	
	TCCR1B |= 1 << CS10 | 1 << CS11; // 분주비 64로 세팅
     1e4:	8e b5       	in	r24, 0x2e	; 46
     1e6:	83 60       	ori	r24, 0x03	; 3
     1e8:	8e bd       	out	0x2e, r24	; 46
	
	ICR1 = 0x3ff; // 약 4ms  TOP : PWM값
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	93 e0       	ldi	r25, 0x03	; 3
     1ee:	97 bd       	out	0x27, r25	; 39
     1f0:	86 bd       	out	0x26, r24	; 38
     1f2:	08 95       	ret

000001f4 <__vector_18>:

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     1f4:	1f 92       	push	r1
     1f6:	0f 92       	push	r0
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	0f 92       	push	r0
     1fc:	11 24       	eor	r1, r1
     1fe:	0b b6       	in	r0, 0x3b	; 59
     200:	0f 92       	push	r0
     202:	2f 93       	push	r18
     204:	3f 93       	push	r19
     206:	4f 93       	push	r20
     208:	5f 93       	push	r21
     20a:	6f 93       	push	r22
     20c:	7f 93       	push	r23
     20e:	8f 93       	push	r24
     210:	9f 93       	push	r25
     212:	af 93       	push	r26
     214:	bf 93       	push	r27
     216:	ef 93       	push	r30
     218:	ff 93       	push	r31
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	1f 92       	push	r1
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     224:	8c b1       	in	r24, 0x0c	; 12
     226:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	8d 30       	cpi	r24, 0x0D	; 13
     22c:	19 f0       	breq	.+6      	; 0x234 <__vector_18+0x40>
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	8a 30       	cpi	r24, 0x0A	; 10
     232:	61 f5       	brne	.+88     	; 0x28c <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     234:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <rear>
     238:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <rear+0x1>
     23c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <i.1878>
     240:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <i.1878+0x1>
     244:	40 e5       	ldi	r20, 0x50	; 80
     246:	42 9f       	mul	r20, r18
     248:	f0 01       	movw	r30, r0
     24a:	43 9f       	mul	r20, r19
     24c:	f0 0d       	add	r31, r0
     24e:	11 24       	eor	r1, r1
     250:	ea 5a       	subi	r30, 0xAA	; 170
     252:	fe 4f       	sbci	r31, 0xFE	; 254
     254:	e8 0f       	add	r30, r24
     256:	f9 1f       	adc	r31, r25
     258:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     25a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <i.1878+0x1>
     25e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <i.1878>
		rear++;
     262:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <rear>
     266:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <rear+0x1>
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <rear+0x1>
     270:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
     274:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <rear>
     278:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <rear+0x1>
     27c:	6a e0       	ldi	r22, 0x0A	; 10
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	05 d4       	rcall	.+2058   	; 0xa8c <__divmodhi4>
     282:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <rear+0x1>
     286:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <rear>
     28a:	1c c0       	rjmp	.+56     	; 0x2c4 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
     28c:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <rear>
     290:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <rear+0x1>
     294:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <i.1878>
     298:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <i.1878+0x1>
     29c:	9c 01       	movw	r18, r24
     29e:	2f 5f       	subi	r18, 0xFF	; 255
     2a0:	3f 4f       	sbci	r19, 0xFF	; 255
     2a2:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <i.1878+0x1>
     2a6:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <i.1878>
     2aa:	49 81       	ldd	r20, Y+1	; 0x01
     2ac:	50 e5       	ldi	r21, 0x50	; 80
     2ae:	56 9f       	mul	r21, r22
     2b0:	90 01       	movw	r18, r0
     2b2:	57 9f       	mul	r21, r23
     2b4:	30 0d       	add	r19, r0
     2b6:	11 24       	eor	r1, r1
     2b8:	2a 5a       	subi	r18, 0xAA	; 170
     2ba:	3e 4f       	sbci	r19, 0xFE	; 254
     2bc:	f9 01       	movw	r30, r18
     2be:	e8 0f       	add	r30, r24
     2c0:	f9 1f       	adc	r31, r25
     2c2:	40 83       	st	Z, r20
	}
		  
}
     2c4:	0f 90       	pop	r0
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	ff 91       	pop	r31
     2cc:	ef 91       	pop	r30
     2ce:	bf 91       	pop	r27
     2d0:	af 91       	pop	r26
     2d2:	9f 91       	pop	r25
     2d4:	8f 91       	pop	r24
     2d6:	7f 91       	pop	r23
     2d8:	6f 91       	pop	r22
     2da:	5f 91       	pop	r21
     2dc:	4f 91       	pop	r20
     2de:	3f 91       	pop	r19
     2e0:	2f 91       	pop	r18
     2e2:	0f 90       	pop	r0
     2e4:	0b be       	out	0x3b, r0	; 59
     2e6:	0f 90       	pop	r0
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	0f 90       	pop	r0
     2ec:	1f 90       	pop	r1
     2ee:	18 95       	reti

000002f0 <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
     2f0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
     2f4:	8f ec       	ldi	r24, 0xCF	; 207
     2f6:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
     2f8:	8b b1       	in	r24, 0x0b	; 11
     2fa:	82 60       	ori	r24, 0x02	; 2
     2fc:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     2fe:	e5 e9       	ldi	r30, 0x95	; 149
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	86 60       	ori	r24, 0x06	; 6
     306:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     308:	8a b1       	in	r24, 0x0a	; 10
     30a:	88 69       	ori	r24, 0x98	; 152
     30c:	8a b9       	out	0x0a, r24	; 10
     30e:	08 95       	ret

00000310 <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
     310:	5d 9b       	sbis	0x0b, 5	; 11
     312:	fe cf       	rjmp	.-4      	; 0x310 <UART0_transmit>
		;   // no operation NOP
	
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
     314:	8c b9       	out	0x0c, r24	; 12
     316:	08 95       	ret

00000318 <__vector_30>:

// BT로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART1_RX_vect)
{
     318:	1f 92       	push	r1
     31a:	0f 92       	push	r0
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	0f 92       	push	r0
     320:	11 24       	eor	r1, r1
     322:	0b b6       	in	r0, 0x3b	; 59
     324:	0f 92       	push	r0
     326:	2f 93       	push	r18
     328:	3f 93       	push	r19
     32a:	4f 93       	push	r20
     32c:	5f 93       	push	r21
     32e:	6f 93       	push	r22
     330:	7f 93       	push	r23
     332:	8f 93       	push	r24
     334:	9f 93       	push	r25
     336:	af 93       	push	r26
     338:	bf 93       	push	r27
     33a:	ef 93       	push	r30
     33c:	ff 93       	push	r31
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	1f 92       	push	r1
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
     348:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     34c:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	8d 30       	cpi	r24, 0x0D	; 13
     352:	19 f0       	breq	.+6      	; 0x35a <__vector_30+0x42>
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	8a 30       	cpi	r24, 0x0A	; 10
     358:	61 f5       	brne	.+88     	; 0x3b2 <__vector_30+0x9a>
	{
		rx1_buff[rear1][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     35a:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <rear1>
     35e:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <rear1+0x1>
     362:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <i.1880>
     366:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <i.1880+0x1>
     36a:	40 e5       	ldi	r20, 0x50	; 80
     36c:	42 9f       	mul	r20, r18
     36e:	f0 01       	movw	r30, r0
     370:	43 9f       	mul	r20, r19
     372:	f0 0d       	add	r31, r0
     374:	11 24       	eor	r1, r1
     376:	ea 58       	subi	r30, 0x8A	; 138
     378:	fb 4f       	sbci	r31, 0xFB	; 251
     37a:	e8 0f       	add	r30, r24
     37c:	f9 1f       	adc	r31, r25
     37e:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     380:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <i.1880+0x1>
     384:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <i.1880>
		rear1++;
     388:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <rear1>
     38c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <rear1+0x1>
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <rear1+0x1>
     396:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <rear1>
		rear1 %= COMMAND_NUMBER;   // 0 ~ 9 if (rear1 >= 9) rear1 =0;
     39a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <rear1>
     39e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <rear1+0x1>
     3a2:	6a e0       	ldi	r22, 0x0A	; 10
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	72 d3       	rcall	.+1764   	; 0xa8c <__divmodhi4>
     3a8:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <rear1+0x1>
     3ac:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <rear1>
     3b0:	1c c0       	rjmp	.+56     	; 0x3ea <__vector_30+0xd2>
		// !!!! 이곳에 queue full (rx1_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx1_buff[rear1][i++] = data;
     3b2:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <rear1>
     3b6:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <rear1+0x1>
     3ba:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <i.1880>
     3be:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <i.1880+0x1>
     3c2:	9c 01       	movw	r18, r24
     3c4:	2f 5f       	subi	r18, 0xFF	; 255
     3c6:	3f 4f       	sbci	r19, 0xFF	; 255
     3c8:	30 93 4d 01 	sts	0x014D, r19	; 0x80014d <i.1880+0x1>
     3cc:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <i.1880>
     3d0:	49 81       	ldd	r20, Y+1	; 0x01
     3d2:	50 e5       	ldi	r21, 0x50	; 80
     3d4:	56 9f       	mul	r21, r22
     3d6:	90 01       	movw	r18, r0
     3d8:	57 9f       	mul	r21, r23
     3da:	30 0d       	add	r19, r0
     3dc:	11 24       	eor	r1, r1
     3de:	2a 58       	subi	r18, 0x8A	; 138
     3e0:	3b 4f       	sbci	r19, 0xFB	; 251
     3e2:	f9 01       	movw	r30, r18
     3e4:	e8 0f       	add	r30, r24
     3e6:	f9 1f       	adc	r31, r25
     3e8:	40 83       	st	Z, r20
	}
		  
}
     3ea:	0f 90       	pop	r0
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	ff 91       	pop	r31
     3f2:	ef 91       	pop	r30
     3f4:	bf 91       	pop	r27
     3f6:	af 91       	pop	r26
     3f8:	9f 91       	pop	r25
     3fa:	8f 91       	pop	r24
     3fc:	7f 91       	pop	r23
     3fe:	6f 91       	pop	r22
     400:	5f 91       	pop	r21
     402:	4f 91       	pop	r20
     404:	3f 91       	pop	r19
     406:	2f 91       	pop	r18
     408:	0f 90       	pop	r0
     40a:	0b be       	out	0x3b, r0	; 59
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
     416:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
     41a:	8f ec       	ldi	r24, 0xCF	; 207
     41c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
     420:	eb e9       	ldi	r30, 0x9B	; 155
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
     426:	82 60       	ori	r24, 0x02	; 2
     428:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     42a:	ed e9       	ldi	r30, 0x9D	; 157
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	86 60       	ori	r24, 0x06	; 6
     432:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     434:	ea e9       	ldi	r30, 0x9A	; 154
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	88 69       	ori	r24, 0x98	; 152
     43c:	80 83       	st	Z, r24
     43e:	08 95       	ret

00000440 <__vector_5>:
char scm[50];

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect) // LEFT
{
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	0b b6       	in	r0, 0x3b	; 59
     44c:	0f 92       	push	r0
     44e:	2f 93       	push	r18
     450:	3f 93       	push	r19
     452:	4f 93       	push	r20
     454:	5f 93       	push	r21
     456:	6f 93       	push	r22
     458:	7f 93       	push	r23
     45a:	8f 93       	push	r24
     45c:	9f 93       	push	r25
     45e:	af 93       	push	r26
     460:	bf 93       	push	r27
     462:	ef 93       	push	r30
     464:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN_LEFT & (1 << ECHO_LEFT))
     466:	0c 9b       	sbis	0x01, 4	; 1
     468:	05 c0       	rjmp	.+10     	; 0x474 <__vector_5+0x34>
	{
		TCNT3 = 0;
     46a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     46e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     472:	20 c0       	rjmp	.+64     	; 0x4b4 <__vector_5+0x74>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_left_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     474:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     478:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	14 d2       	rcall	.+1064   	; 0x8aa <__floatunsisf>
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	34 e2       	ldi	r19, 0x24	; 36
     486:	44 e7       	ldi	r20, 0x74	; 116
     488:	59 e4       	ldi	r21, 0x49	; 73
     48a:	9d d2       	rcall	.+1338   	; 0x9c6 <__mulsf3>
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	40 e8       	ldi	r20, 0x80	; 128
     492:	54 e4       	ldi	r21, 0x44	; 68
     494:	98 d2       	rcall	.+1328   	; 0x9c6 <__mulsf3>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	34 e2       	ldi	r19, 0x24	; 36
     49a:	44 e7       	ldi	r20, 0x74	; 116
     49c:	5b e4       	ldi	r21, 0x4B	; 75
     49e:	6c d1       	rcall	.+728    	; 0x778 <__divsf3>
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	48 e6       	ldi	r20, 0x68	; 104
     4a6:	52 e4       	ldi	r21, 0x42	; 66
     4a8:	67 d1       	rcall	.+718    	; 0x778 <__divsf3>
     4aa:	ce d1       	rcall	.+924    	; 0x848 <__fixsfsi>
     4ac:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <ultrasonic_left_distance+0x1>
     4b0:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <ultrasonic_left_distance>
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
		// sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
	}
}
     4b4:	ff 91       	pop	r31
     4b6:	ef 91       	pop	r30
     4b8:	bf 91       	pop	r27
     4ba:	af 91       	pop	r26
     4bc:	9f 91       	pop	r25
     4be:	8f 91       	pop	r24
     4c0:	7f 91       	pop	r23
     4c2:	6f 91       	pop	r22
     4c4:	5f 91       	pop	r21
     4c6:	4f 91       	pop	r20
     4c8:	3f 91       	pop	r19
     4ca:	2f 91       	pop	r18
     4cc:	0f 90       	pop	r0
     4ce:	0b be       	out	0x3b, r0	; 59
     4d0:	0f 90       	pop	r0
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	0f 90       	pop	r0
     4d6:	1f 90       	pop	r1
     4d8:	18 95       	reti

000004da <__vector_6>:

ISR(INT5_vect) // CENTER
{
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	0b b6       	in	r0, 0x3b	; 59
     4e6:	0f 92       	push	r0
     4e8:	2f 93       	push	r18
     4ea:	3f 93       	push	r19
     4ec:	4f 93       	push	r20
     4ee:	5f 93       	push	r21
     4f0:	6f 93       	push	r22
     4f2:	7f 93       	push	r23
     4f4:	8f 93       	push	r24
     4f6:	9f 93       	push	r25
     4f8:	af 93       	push	r26
     4fa:	bf 93       	push	r27
     4fc:	ef 93       	push	r30
     4fe:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN_CENTER & (1 << ECHO_CENTER))
     500:	0d 9b       	sbis	0x01, 5	; 1
     502:	05 c0       	rjmp	.+10     	; 0x50e <__vector_6+0x34>
	{
		TCNT3 = 0;
     504:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     508:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     50c:	20 c0       	rjmp	.+64     	; 0x54e <__vector_6+0x74>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_center_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     50e:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     512:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	c7 d1       	rcall	.+910    	; 0x8aa <__floatunsisf>
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	34 e2       	ldi	r19, 0x24	; 36
     520:	44 e7       	ldi	r20, 0x74	; 116
     522:	59 e4       	ldi	r21, 0x49	; 73
     524:	50 d2       	rcall	.+1184   	; 0x9c6 <__mulsf3>
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	40 e8       	ldi	r20, 0x80	; 128
     52c:	54 e4       	ldi	r21, 0x44	; 68
     52e:	4b d2       	rcall	.+1174   	; 0x9c6 <__mulsf3>
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	34 e2       	ldi	r19, 0x24	; 36
     534:	44 e7       	ldi	r20, 0x74	; 116
     536:	5b e4       	ldi	r21, 0x4B	; 75
     538:	1f d1       	rcall	.+574    	; 0x778 <__divsf3>
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	48 e6       	ldi	r20, 0x68	; 104
     540:	52 e4       	ldi	r21, 0x42	; 66
     542:	1a d1       	rcall	.+564    	; 0x778 <__divsf3>
     544:	81 d1       	rcall	.+770    	; 0x848 <__fixsfsi>
     546:	70 93 53 01 	sts	0x0153, r23	; 0x800153 <ultrasonic_center_distance+0x1>
     54a:	60 93 52 01 	sts	0x0152, r22	; 0x800152 <ultrasonic_center_distance>
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
		// sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
	}
}
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	bf 91       	pop	r27
     554:	af 91       	pop	r26
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	7f 91       	pop	r23
     55c:	6f 91       	pop	r22
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	0b be       	out	0x3b, r0	; 59
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <__vector_7>:

ISR(INT6_vect) // RIGHT
{
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	0b b6       	in	r0, 0x3b	; 59
     580:	0f 92       	push	r0
     582:	2f 93       	push	r18
     584:	3f 93       	push	r19
     586:	4f 93       	push	r20
     588:	5f 93       	push	r21
     58a:	6f 93       	push	r22
     58c:	7f 93       	push	r23
     58e:	8f 93       	push	r24
     590:	9f 93       	push	r25
     592:	af 93       	push	r26
     594:	bf 93       	push	r27
     596:	ef 93       	push	r30
     598:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN_RIGHT & (1 << ECHO_RIGHT))
     59a:	0e 9b       	sbis	0x01, 6	; 1
     59c:	05 c0       	rjmp	.+10     	; 0x5a8 <__vector_7+0x34>
	{
		TCNT3 = 0;
     59e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5a2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     5a6:	20 c0       	rjmp	.+64     	; 0x5e8 <__vector_7+0x74>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_right_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     5a8:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     5ac:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	7a d1       	rcall	.+756    	; 0x8aa <__floatunsisf>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	34 e2       	ldi	r19, 0x24	; 36
     5ba:	44 e7       	ldi	r20, 0x74	; 116
     5bc:	59 e4       	ldi	r21, 0x49	; 73
     5be:	03 d2       	rcall	.+1030   	; 0x9c6 <__mulsf3>
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	40 e8       	ldi	r20, 0x80	; 128
     5c6:	54 e4       	ldi	r21, 0x44	; 68
     5c8:	fe d1       	rcall	.+1020   	; 0x9c6 <__mulsf3>
     5ca:	20 e0       	ldi	r18, 0x00	; 0
     5cc:	34 e2       	ldi	r19, 0x24	; 36
     5ce:	44 e7       	ldi	r20, 0x74	; 116
     5d0:	5b e4       	ldi	r21, 0x4B	; 75
     5d2:	d2 d0       	rcall	.+420    	; 0x778 <__divsf3>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	48 e6       	ldi	r20, 0x68	; 104
     5da:	52 e4       	ldi	r21, 0x42	; 66
     5dc:	cd d0       	rcall	.+410    	; 0x778 <__divsf3>
     5de:	34 d1       	rcall	.+616    	; 0x848 <__fixsfsi>
     5e0:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <ultrasonic_right_distance+0x1>
     5e4:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <ultrasonic_right_distance>
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
		// sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
	}
}
     5e8:	ff 91       	pop	r31
     5ea:	ef 91       	pop	r30
     5ec:	bf 91       	pop	r27
     5ee:	af 91       	pop	r26
     5f0:	9f 91       	pop	r25
     5f2:	8f 91       	pop	r24
     5f4:	7f 91       	pop	r23
     5f6:	6f 91       	pop	r22
     5f8:	5f 91       	pop	r21
     5fa:	4f 91       	pop	r20
     5fc:	3f 91       	pop	r19
     5fe:	2f 91       	pop	r18
     600:	0f 90       	pop	r0
     602:	0b be       	out	0x3b, r0	; 59
     604:	0f 90       	pop	r0
     606:	0f be       	out	0x3f, r0	; 63
     608:	0f 90       	pop	r0
     60a:	1f 90       	pop	r1
     60c:	18 95       	reti

0000060e <init_ultrasonic>:

void init_ultrasonic()
{
	//////////////// left ////////////////
	TRIG_DDR_LEFT |= 1 << TRIG_LEFT; // output mode로 설정
     60e:	8a b3       	in	r24, 0x1a	; 26
     610:	81 60       	ori	r24, 0x01	; 1
     612:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_LEFT &= ~(1 << ECHO_LEFT); // input mode로 설정
     614:	82 b1       	in	r24, 0x02	; 2
     616:	8f 7e       	andi	r24, 0xEF	; 239
     618:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
     61a:	8a b7       	in	r24, 0x3a	; 58
     61c:	81 60       	ori	r24, 0x01	; 1
     61e:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us	
	TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     620:	ea e8       	ldi	r30, 0x8A	; 138
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	80 81       	ld	r24, Z
     626:	85 60       	ori	r24, 0x05	; 5
     628:	80 83       	st	Z, r24
	EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
     62a:	89 b7       	in	r24, 0x39	; 57
     62c:	80 61       	ori	r24, 0x10	; 16
     62e:	89 bf       	out	0x39, r24	; 57
	
	
	//////////////// center ////////////////
	TRIG_DDR_CENTER |= 1 << TRIG_CENTER; // output mode로 설정
     630:	8a b3       	in	r24, 0x1a	; 26
     632:	82 60       	ori	r24, 0x02	; 2
     634:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_CENTER &= ~(1 << ECHO_CENTER); // input mode로 설정
     636:	82 b1       	in	r24, 0x02	; 2
     638:	8f 7d       	andi	r24, 0xDF	; 223
     63a:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC51 | 1 << ISC50; // INT5니까 EICRB에서 ISC51, 50
     63c:	8a b7       	in	r24, 0x3a	; 58
     63e:	84 60       	ori	r24, 0x04	; 4
     640:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
	TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     642:	80 81       	ld	r24, Z
     644:	85 60       	ori	r24, 0x05	; 5
     646:	80 83       	st	Z, r24
	EIMSK |= 1 << INT5; // 외부 인터럽트4번 (ECHO) 사용
     648:	89 b7       	in	r24, 0x39	; 57
     64a:	80 62       	ori	r24, 0x20	; 32
     64c:	89 bf       	out	0x39, r24	; 57
	
	
	//////////////// right ////////////////
	TRIG_DDR_RIGHT |= 1 << TRIG_RIGHT; // output mode로 설정
     64e:	8a b3       	in	r24, 0x1a	; 26
     650:	84 60       	ori	r24, 0x04	; 4
     652:	8a bb       	out	0x1a, r24	; 26
	ECHO_DDR_RIGHT &= ~(1 << ECHO_RIGHT); // input mode로 설정
     654:	82 b1       	in	r24, 0x02	; 2
     656:	8f 7b       	andi	r24, 0xBF	; 191
     658:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC61 | 1 << ISC60; // INT6니까 EICRB에서 ISC61, 60
     65a:	8a b7       	in	r24, 0x3a	; 58
     65c:	80 61       	ori	r24, 0x10	; 16
     65e:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
	TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     660:	80 81       	ld	r24, Z
     662:	85 60       	ori	r24, 0x05	; 5
     664:	80 83       	st	Z, r24
	EIMSK |= 1 << INT6; // 외부 인터럽트4번 (ECHO) 사용
     666:	89 b7       	in	r24, 0x39	; 57
     668:	80 64       	ori	r24, 0x40	; 64
     66a:	89 bf       	out	0x39, r24	; 57
     66c:	08 95       	ret

0000066e <ultrasonic_trigger>:
}

void ultrasonic_trigger()
{
	if (msec_count >= 50)
     66e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <msec_count>
     672:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <msec_count+0x1>
     676:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <msec_count+0x2>
     67a:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <msec_count+0x3>
     67e:	c2 97       	sbiw	r24, 0x32	; 50
     680:	a1 05       	cpc	r26, r1
     682:	b1 05       	cpc	r27, r1
     684:	c0 f1       	brcs	.+112    	; 0x6f6 <ultrasonic_trigger+0x88>
	{
		msec_count = 0;
     686:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <msec_count>
     68a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <msec_count+0x1>
     68e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <msec_count+0x2>
     692:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <msec_count+0x3>
		////////// left //////////
		TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // 해당되는 포트만 LOW로 만듦
     696:	8b b3       	in	r24, 0x1b	; 27
     698:	8e 7f       	andi	r24, 0xFE	; 254
     69a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     69c:	85 e0       	ldi	r24, 0x05	; 5
     69e:	8a 95       	dec	r24
     6a0:	f1 f7       	brne	.-4      	; 0x69e <ultrasonic_trigger+0x30>
     6a2:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_LEFT |= 1 << TRIG_LEFT; // HIGH
     6a4:	8b b3       	in	r24, 0x1b	; 27
     6a6:	81 60       	ori	r24, 0x01	; 1
     6a8:	8b bb       	out	0x1b, r24	; 27
     6aa:	80 e5       	ldi	r24, 0x50	; 80
     6ac:	8a 95       	dec	r24
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <ultrasonic_trigger+0x3e>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // LOW
     6b0:	8b b3       	in	r24, 0x1b	; 27
     6b2:	8e 7f       	andi	r24, 0xFE	; 254
     6b4:	8b bb       	out	0x1b, r24	; 27
		//_delay_ms(50); // delay 기다리는 시간을 timer0 변수로 체크할 수 있도록 개선
		// 초음파센서 echo 응답 대기시간이 최대 38ms
		
		////////// center //////////
		TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // 해당되는 포트만 LOW로 만듦
     6b6:	8b b3       	in	r24, 0x1b	; 27
     6b8:	8d 7f       	andi	r24, 0xFD	; 253
     6ba:	8b bb       	out	0x1b, r24	; 27
     6bc:	85 e0       	ldi	r24, 0x05	; 5
     6be:	8a 95       	dec	r24
     6c0:	f1 f7       	brne	.-4      	; 0x6be <ultrasonic_trigger+0x50>
     6c2:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_CENTER |= 1 << TRIG_CENTER; // HIGH
     6c4:	8b b3       	in	r24, 0x1b	; 27
     6c6:	82 60       	ori	r24, 0x02	; 2
     6c8:	8b bb       	out	0x1b, r24	; 27
     6ca:	80 e5       	ldi	r24, 0x50	; 80
     6cc:	8a 95       	dec	r24
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <ultrasonic_trigger+0x5e>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // LOW
     6d0:	8b b3       	in	r24, 0x1b	; 27
     6d2:	8d 7f       	andi	r24, 0xFD	; 253
     6d4:	8b bb       	out	0x1b, r24	; 27
		
		////////// right //////////
		TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // 해당되는 포트만 LOW로 만듦
     6d6:	8b b3       	in	r24, 0x1b	; 27
     6d8:	8b 7f       	andi	r24, 0xFB	; 251
     6da:	8b bb       	out	0x1b, r24	; 27
     6dc:	85 e0       	ldi	r24, 0x05	; 5
     6de:	8a 95       	dec	r24
     6e0:	f1 f7       	brne	.-4      	; 0x6de <ultrasonic_trigger+0x70>
     6e2:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_RIGHT |= 1 << TRIG_RIGHT; // HIGH
     6e4:	8b b3       	in	r24, 0x1b	; 27
     6e6:	84 60       	ori	r24, 0x04	; 4
     6e8:	8b bb       	out	0x1b, r24	; 27
     6ea:	80 e5       	ldi	r24, 0x50	; 80
     6ec:	8a 95       	dec	r24
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <ultrasonic_trigger+0x7e>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // LOW
     6f0:	8b b3       	in	r24, 0x1b	; 27
     6f2:	8b 7f       	andi	r24, 0xFB	; 251
     6f4:	8b bb       	out	0x1b, r24	; 27
     6f6:	08 95       	ret

000006f8 <ultrasonic_distance_check>:
	}
}

void ultrasonic_distance_check()
{
	if (ultrasonic_check_timer >= 500)
     6f8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     6fc:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
     700:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <__data_end+0x2>
     704:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <__data_end+0x3>
     708:	84 3f       	cpi	r24, 0xF4	; 244
     70a:	91 40       	sbci	r25, 0x01	; 1
     70c:	a1 05       	cpc	r26, r1
     70e:	b1 05       	cpc	r27, r1
     710:	88 f1       	brcs	.+98     	; 0x774 <ultrasonic_distance_check+0x7c>
	{
		ultrasonic_check_timer = 0;
     712:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
     716:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__data_end+0x1>
     71a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end+0x2>
     71e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <__data_end+0x3>
		printf("left   :  %5d\n", ultrasonic_left_distance); // printf 찍으면 delay생김
     722:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <ultrasonic_left_distance>
     726:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <ultrasonic_left_distance+0x1>
     72a:	9f 93       	push	r25
     72c:	8f 93       	push	r24
     72e:	8e e0       	ldi	r24, 0x0E	; 14
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	9f 93       	push	r25
     734:	8f 93       	push	r24
     736:	d1 d1       	rcall	.+930    	; 0xada <printf>
		printf("center :  %5d\n", ultrasonic_center_distance);
     738:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <ultrasonic_center_distance>
     73c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <ultrasonic_center_distance+0x1>
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	8d e1       	ldi	r24, 0x1D	; 29
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	9f 93       	push	r25
     74a:	8f 93       	push	r24
     74c:	c6 d1       	rcall	.+908    	; 0xada <printf>
		printf("right  :  %5d\n", ultrasonic_right_distance);
     74e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <ultrasonic_right_distance>
     752:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <ultrasonic_right_distance+0x1>
     756:	9f 93       	push	r25
     758:	8f 93       	push	r24
     75a:	8c e2       	ldi	r24, 0x2C	; 44
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	9f 93       	push	r25
     760:	8f 93       	push	r24
     762:	bb d1       	rcall	.+886    	; 0xada <printf>
     764:	8d b7       	in	r24, 0x3d	; 61
     766:	9e b7       	in	r25, 0x3e	; 62
     768:	0c 96       	adiw	r24, 0x0c	; 12
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	9e bf       	out	0x3e, r25	; 62
     770:	0f be       	out	0x3f, r0	; 63
	}
	ultrasonic_trigger(); // 이것도 수정해야한다.
     772:	8d bf       	out	0x3d, r24	; 61
     774:	7c cf       	rjmp	.-264    	; 0x66e <ultrasonic_trigger>
     776:	08 95       	ret

00000778 <__divsf3>:
     778:	0c d0       	rcall	.+24     	; 0x792 <__divsf3x>
     77a:	eb c0       	rjmp	.+470    	; 0x952 <__fp_round>
     77c:	e3 d0       	rcall	.+454    	; 0x944 <__fp_pscB>
     77e:	40 f0       	brcs	.+16     	; 0x790 <__divsf3+0x18>
     780:	da d0       	rcall	.+436    	; 0x936 <__fp_pscA>
     782:	30 f0       	brcs	.+12     	; 0x790 <__divsf3+0x18>
     784:	21 f4       	brne	.+8      	; 0x78e <__divsf3+0x16>
     786:	5f 3f       	cpi	r21, 0xFF	; 255
     788:	19 f0       	breq	.+6      	; 0x790 <__divsf3+0x18>
     78a:	cc c0       	rjmp	.+408    	; 0x924 <__fp_inf>
     78c:	51 11       	cpse	r21, r1
     78e:	15 c1       	rjmp	.+554    	; 0x9ba <__fp_szero>
     790:	cf c0       	rjmp	.+414    	; 0x930 <__fp_nan>

00000792 <__divsf3x>:
     792:	f0 d0       	rcall	.+480    	; 0x974 <__fp_split3>
     794:	98 f3       	brcs	.-26     	; 0x77c <__divsf3+0x4>

00000796 <__divsf3_pse>:
     796:	99 23       	and	r25, r25
     798:	c9 f3       	breq	.-14     	; 0x78c <__divsf3+0x14>
     79a:	55 23       	and	r21, r21
     79c:	b1 f3       	breq	.-20     	; 0x78a <__divsf3+0x12>
     79e:	95 1b       	sub	r25, r21
     7a0:	55 0b       	sbc	r21, r21
     7a2:	bb 27       	eor	r27, r27
     7a4:	aa 27       	eor	r26, r26
     7a6:	62 17       	cp	r22, r18
     7a8:	73 07       	cpc	r23, r19
     7aa:	84 07       	cpc	r24, r20
     7ac:	38 f0       	brcs	.+14     	; 0x7bc <__divsf3_pse+0x26>
     7ae:	9f 5f       	subi	r25, 0xFF	; 255
     7b0:	5f 4f       	sbci	r21, 0xFF	; 255
     7b2:	22 0f       	add	r18, r18
     7b4:	33 1f       	adc	r19, r19
     7b6:	44 1f       	adc	r20, r20
     7b8:	aa 1f       	adc	r26, r26
     7ba:	a9 f3       	breq	.-22     	; 0x7a6 <__divsf3_pse+0x10>
     7bc:	33 d0       	rcall	.+102    	; 0x824 <__divsf3_pse+0x8e>
     7be:	0e 2e       	mov	r0, r30
     7c0:	3a f0       	brmi	.+14     	; 0x7d0 <__divsf3_pse+0x3a>
     7c2:	e0 e8       	ldi	r30, 0x80	; 128
     7c4:	30 d0       	rcall	.+96     	; 0x826 <__divsf3_pse+0x90>
     7c6:	91 50       	subi	r25, 0x01	; 1
     7c8:	50 40       	sbci	r21, 0x00	; 0
     7ca:	e6 95       	lsr	r30
     7cc:	00 1c       	adc	r0, r0
     7ce:	ca f7       	brpl	.-14     	; 0x7c2 <__divsf3_pse+0x2c>
     7d0:	29 d0       	rcall	.+82     	; 0x824 <__divsf3_pse+0x8e>
     7d2:	fe 2f       	mov	r31, r30
     7d4:	27 d0       	rcall	.+78     	; 0x824 <__divsf3_pse+0x8e>
     7d6:	66 0f       	add	r22, r22
     7d8:	77 1f       	adc	r23, r23
     7da:	88 1f       	adc	r24, r24
     7dc:	bb 1f       	adc	r27, r27
     7de:	26 17       	cp	r18, r22
     7e0:	37 07       	cpc	r19, r23
     7e2:	48 07       	cpc	r20, r24
     7e4:	ab 07       	cpc	r26, r27
     7e6:	b0 e8       	ldi	r27, 0x80	; 128
     7e8:	09 f0       	breq	.+2      	; 0x7ec <__divsf3_pse+0x56>
     7ea:	bb 0b       	sbc	r27, r27
     7ec:	80 2d       	mov	r24, r0
     7ee:	bf 01       	movw	r22, r30
     7f0:	ff 27       	eor	r31, r31
     7f2:	93 58       	subi	r25, 0x83	; 131
     7f4:	5f 4f       	sbci	r21, 0xFF	; 255
     7f6:	2a f0       	brmi	.+10     	; 0x802 <__divsf3_pse+0x6c>
     7f8:	9e 3f       	cpi	r25, 0xFE	; 254
     7fa:	51 05       	cpc	r21, r1
     7fc:	68 f0       	brcs	.+26     	; 0x818 <__divsf3_pse+0x82>
     7fe:	92 c0       	rjmp	.+292    	; 0x924 <__fp_inf>
     800:	dc c0       	rjmp	.+440    	; 0x9ba <__fp_szero>
     802:	5f 3f       	cpi	r21, 0xFF	; 255
     804:	ec f3       	brlt	.-6      	; 0x800 <__divsf3_pse+0x6a>
     806:	98 3e       	cpi	r25, 0xE8	; 232
     808:	dc f3       	brlt	.-10     	; 0x800 <__divsf3_pse+0x6a>
     80a:	86 95       	lsr	r24
     80c:	77 95       	ror	r23
     80e:	67 95       	ror	r22
     810:	b7 95       	ror	r27
     812:	f7 95       	ror	r31
     814:	9f 5f       	subi	r25, 0xFF	; 255
     816:	c9 f7       	brne	.-14     	; 0x80a <__divsf3_pse+0x74>
     818:	88 0f       	add	r24, r24
     81a:	91 1d       	adc	r25, r1
     81c:	96 95       	lsr	r25
     81e:	87 95       	ror	r24
     820:	97 f9       	bld	r25, 7
     822:	08 95       	ret
     824:	e1 e0       	ldi	r30, 0x01	; 1
     826:	66 0f       	add	r22, r22
     828:	77 1f       	adc	r23, r23
     82a:	88 1f       	adc	r24, r24
     82c:	bb 1f       	adc	r27, r27
     82e:	62 17       	cp	r22, r18
     830:	73 07       	cpc	r23, r19
     832:	84 07       	cpc	r24, r20
     834:	ba 07       	cpc	r27, r26
     836:	20 f0       	brcs	.+8      	; 0x840 <__divsf3_pse+0xaa>
     838:	62 1b       	sub	r22, r18
     83a:	73 0b       	sbc	r23, r19
     83c:	84 0b       	sbc	r24, r20
     83e:	ba 0b       	sbc	r27, r26
     840:	ee 1f       	adc	r30, r30
     842:	88 f7       	brcc	.-30     	; 0x826 <__divsf3_pse+0x90>
     844:	e0 95       	com	r30
     846:	08 95       	ret

00000848 <__fixsfsi>:
     848:	04 d0       	rcall	.+8      	; 0x852 <__fixunssfsi>
     84a:	68 94       	set
     84c:	b1 11       	cpse	r27, r1
     84e:	b5 c0       	rjmp	.+362    	; 0x9ba <__fp_szero>
     850:	08 95       	ret

00000852 <__fixunssfsi>:
     852:	98 d0       	rcall	.+304    	; 0x984 <__fp_splitA>
     854:	88 f0       	brcs	.+34     	; 0x878 <__fixunssfsi+0x26>
     856:	9f 57       	subi	r25, 0x7F	; 127
     858:	90 f0       	brcs	.+36     	; 0x87e <__fixunssfsi+0x2c>
     85a:	b9 2f       	mov	r27, r25
     85c:	99 27       	eor	r25, r25
     85e:	b7 51       	subi	r27, 0x17	; 23
     860:	a0 f0       	brcs	.+40     	; 0x88a <__fixunssfsi+0x38>
     862:	d1 f0       	breq	.+52     	; 0x898 <__fixunssfsi+0x46>
     864:	66 0f       	add	r22, r22
     866:	77 1f       	adc	r23, r23
     868:	88 1f       	adc	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	1a f0       	brmi	.+6      	; 0x874 <__fixunssfsi+0x22>
     86e:	ba 95       	dec	r27
     870:	c9 f7       	brne	.-14     	; 0x864 <__fixunssfsi+0x12>
     872:	12 c0       	rjmp	.+36     	; 0x898 <__fixunssfsi+0x46>
     874:	b1 30       	cpi	r27, 0x01	; 1
     876:	81 f0       	breq	.+32     	; 0x898 <__fixunssfsi+0x46>
     878:	9f d0       	rcall	.+318    	; 0x9b8 <__fp_zero>
     87a:	b1 e0       	ldi	r27, 0x01	; 1
     87c:	08 95       	ret
     87e:	9c c0       	rjmp	.+312    	; 0x9b8 <__fp_zero>
     880:	67 2f       	mov	r22, r23
     882:	78 2f       	mov	r23, r24
     884:	88 27       	eor	r24, r24
     886:	b8 5f       	subi	r27, 0xF8	; 248
     888:	39 f0       	breq	.+14     	; 0x898 <__fixunssfsi+0x46>
     88a:	b9 3f       	cpi	r27, 0xF9	; 249
     88c:	cc f3       	brlt	.-14     	; 0x880 <__fixunssfsi+0x2e>
     88e:	86 95       	lsr	r24
     890:	77 95       	ror	r23
     892:	67 95       	ror	r22
     894:	b3 95       	inc	r27
     896:	d9 f7       	brne	.-10     	; 0x88e <__fixunssfsi+0x3c>
     898:	3e f4       	brtc	.+14     	; 0x8a8 <__fixunssfsi+0x56>
     89a:	90 95       	com	r25
     89c:	80 95       	com	r24
     89e:	70 95       	com	r23
     8a0:	61 95       	neg	r22
     8a2:	7f 4f       	sbci	r23, 0xFF	; 255
     8a4:	8f 4f       	sbci	r24, 0xFF	; 255
     8a6:	9f 4f       	sbci	r25, 0xFF	; 255
     8a8:	08 95       	ret

000008aa <__floatunsisf>:
     8aa:	e8 94       	clt
     8ac:	09 c0       	rjmp	.+18     	; 0x8c0 <__floatsisf+0x12>

000008ae <__floatsisf>:
     8ae:	97 fb       	bst	r25, 7
     8b0:	3e f4       	brtc	.+14     	; 0x8c0 <__floatsisf+0x12>
     8b2:	90 95       	com	r25
     8b4:	80 95       	com	r24
     8b6:	70 95       	com	r23
     8b8:	61 95       	neg	r22
     8ba:	7f 4f       	sbci	r23, 0xFF	; 255
     8bc:	8f 4f       	sbci	r24, 0xFF	; 255
     8be:	9f 4f       	sbci	r25, 0xFF	; 255
     8c0:	99 23       	and	r25, r25
     8c2:	a9 f0       	breq	.+42     	; 0x8ee <__floatsisf+0x40>
     8c4:	f9 2f       	mov	r31, r25
     8c6:	96 e9       	ldi	r25, 0x96	; 150
     8c8:	bb 27       	eor	r27, r27
     8ca:	93 95       	inc	r25
     8cc:	f6 95       	lsr	r31
     8ce:	87 95       	ror	r24
     8d0:	77 95       	ror	r23
     8d2:	67 95       	ror	r22
     8d4:	b7 95       	ror	r27
     8d6:	f1 11       	cpse	r31, r1
     8d8:	f8 cf       	rjmp	.-16     	; 0x8ca <__floatsisf+0x1c>
     8da:	fa f4       	brpl	.+62     	; 0x91a <__floatsisf+0x6c>
     8dc:	bb 0f       	add	r27, r27
     8de:	11 f4       	brne	.+4      	; 0x8e4 <__floatsisf+0x36>
     8e0:	60 ff       	sbrs	r22, 0
     8e2:	1b c0       	rjmp	.+54     	; 0x91a <__floatsisf+0x6c>
     8e4:	6f 5f       	subi	r22, 0xFF	; 255
     8e6:	7f 4f       	sbci	r23, 0xFF	; 255
     8e8:	8f 4f       	sbci	r24, 0xFF	; 255
     8ea:	9f 4f       	sbci	r25, 0xFF	; 255
     8ec:	16 c0       	rjmp	.+44     	; 0x91a <__floatsisf+0x6c>
     8ee:	88 23       	and	r24, r24
     8f0:	11 f0       	breq	.+4      	; 0x8f6 <__floatsisf+0x48>
     8f2:	96 e9       	ldi	r25, 0x96	; 150
     8f4:	11 c0       	rjmp	.+34     	; 0x918 <__floatsisf+0x6a>
     8f6:	77 23       	and	r23, r23
     8f8:	21 f0       	breq	.+8      	; 0x902 <__floatsisf+0x54>
     8fa:	9e e8       	ldi	r25, 0x8E	; 142
     8fc:	87 2f       	mov	r24, r23
     8fe:	76 2f       	mov	r23, r22
     900:	05 c0       	rjmp	.+10     	; 0x90c <__floatsisf+0x5e>
     902:	66 23       	and	r22, r22
     904:	71 f0       	breq	.+28     	; 0x922 <__floatsisf+0x74>
     906:	96 e8       	ldi	r25, 0x86	; 134
     908:	86 2f       	mov	r24, r22
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	2a f0       	brmi	.+10     	; 0x91a <__floatsisf+0x6c>
     910:	9a 95       	dec	r25
     912:	66 0f       	add	r22, r22
     914:	77 1f       	adc	r23, r23
     916:	88 1f       	adc	r24, r24
     918:	da f7       	brpl	.-10     	; 0x910 <__floatsisf+0x62>
     91a:	88 0f       	add	r24, r24
     91c:	96 95       	lsr	r25
     91e:	87 95       	ror	r24
     920:	97 f9       	bld	r25, 7
     922:	08 95       	ret

00000924 <__fp_inf>:
     924:	97 f9       	bld	r25, 7
     926:	9f 67       	ori	r25, 0x7F	; 127
     928:	80 e8       	ldi	r24, 0x80	; 128
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	08 95       	ret

00000930 <__fp_nan>:
     930:	9f ef       	ldi	r25, 0xFF	; 255
     932:	80 ec       	ldi	r24, 0xC0	; 192
     934:	08 95       	ret

00000936 <__fp_pscA>:
     936:	00 24       	eor	r0, r0
     938:	0a 94       	dec	r0
     93a:	16 16       	cp	r1, r22
     93c:	17 06       	cpc	r1, r23
     93e:	18 06       	cpc	r1, r24
     940:	09 06       	cpc	r0, r25
     942:	08 95       	ret

00000944 <__fp_pscB>:
     944:	00 24       	eor	r0, r0
     946:	0a 94       	dec	r0
     948:	12 16       	cp	r1, r18
     94a:	13 06       	cpc	r1, r19
     94c:	14 06       	cpc	r1, r20
     94e:	05 06       	cpc	r0, r21
     950:	08 95       	ret

00000952 <__fp_round>:
     952:	09 2e       	mov	r0, r25
     954:	03 94       	inc	r0
     956:	00 0c       	add	r0, r0
     958:	11 f4       	brne	.+4      	; 0x95e <__fp_round+0xc>
     95a:	88 23       	and	r24, r24
     95c:	52 f0       	brmi	.+20     	; 0x972 <__fp_round+0x20>
     95e:	bb 0f       	add	r27, r27
     960:	40 f4       	brcc	.+16     	; 0x972 <__fp_round+0x20>
     962:	bf 2b       	or	r27, r31
     964:	11 f4       	brne	.+4      	; 0x96a <__fp_round+0x18>
     966:	60 ff       	sbrs	r22, 0
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fp_round+0x20>
     96a:	6f 5f       	subi	r22, 0xFF	; 255
     96c:	7f 4f       	sbci	r23, 0xFF	; 255
     96e:	8f 4f       	sbci	r24, 0xFF	; 255
     970:	9f 4f       	sbci	r25, 0xFF	; 255
     972:	08 95       	ret

00000974 <__fp_split3>:
     974:	57 fd       	sbrc	r21, 7
     976:	90 58       	subi	r25, 0x80	; 128
     978:	44 0f       	add	r20, r20
     97a:	55 1f       	adc	r21, r21
     97c:	59 f0       	breq	.+22     	; 0x994 <__fp_splitA+0x10>
     97e:	5f 3f       	cpi	r21, 0xFF	; 255
     980:	71 f0       	breq	.+28     	; 0x99e <__fp_splitA+0x1a>
     982:	47 95       	ror	r20

00000984 <__fp_splitA>:
     984:	88 0f       	add	r24, r24
     986:	97 fb       	bst	r25, 7
     988:	99 1f       	adc	r25, r25
     98a:	61 f0       	breq	.+24     	; 0x9a4 <__fp_splitA+0x20>
     98c:	9f 3f       	cpi	r25, 0xFF	; 255
     98e:	79 f0       	breq	.+30     	; 0x9ae <__fp_splitA+0x2a>
     990:	87 95       	ror	r24
     992:	08 95       	ret
     994:	12 16       	cp	r1, r18
     996:	13 06       	cpc	r1, r19
     998:	14 06       	cpc	r1, r20
     99a:	55 1f       	adc	r21, r21
     99c:	f2 cf       	rjmp	.-28     	; 0x982 <__fp_split3+0xe>
     99e:	46 95       	lsr	r20
     9a0:	f1 df       	rcall	.-30     	; 0x984 <__fp_splitA>
     9a2:	08 c0       	rjmp	.+16     	; 0x9b4 <__fp_splitA+0x30>
     9a4:	16 16       	cp	r1, r22
     9a6:	17 06       	cpc	r1, r23
     9a8:	18 06       	cpc	r1, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	f1 cf       	rjmp	.-30     	; 0x990 <__fp_splitA+0xc>
     9ae:	86 95       	lsr	r24
     9b0:	71 05       	cpc	r23, r1
     9b2:	61 05       	cpc	r22, r1
     9b4:	08 94       	sec
     9b6:	08 95       	ret

000009b8 <__fp_zero>:
     9b8:	e8 94       	clt

000009ba <__fp_szero>:
     9ba:	bb 27       	eor	r27, r27
     9bc:	66 27       	eor	r22, r22
     9be:	77 27       	eor	r23, r23
     9c0:	cb 01       	movw	r24, r22
     9c2:	97 f9       	bld	r25, 7
     9c4:	08 95       	ret

000009c6 <__mulsf3>:
     9c6:	0b d0       	rcall	.+22     	; 0x9de <__mulsf3x>
     9c8:	c4 cf       	rjmp	.-120    	; 0x952 <__fp_round>
     9ca:	b5 df       	rcall	.-150    	; 0x936 <__fp_pscA>
     9cc:	28 f0       	brcs	.+10     	; 0x9d8 <__mulsf3+0x12>
     9ce:	ba df       	rcall	.-140    	; 0x944 <__fp_pscB>
     9d0:	18 f0       	brcs	.+6      	; 0x9d8 <__mulsf3+0x12>
     9d2:	95 23       	and	r25, r21
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <__mulsf3+0x12>
     9d6:	a6 cf       	rjmp	.-180    	; 0x924 <__fp_inf>
     9d8:	ab cf       	rjmp	.-170    	; 0x930 <__fp_nan>
     9da:	11 24       	eor	r1, r1
     9dc:	ee cf       	rjmp	.-36     	; 0x9ba <__fp_szero>

000009de <__mulsf3x>:
     9de:	ca df       	rcall	.-108    	; 0x974 <__fp_split3>
     9e0:	a0 f3       	brcs	.-24     	; 0x9ca <__mulsf3+0x4>

000009e2 <__mulsf3_pse>:
     9e2:	95 9f       	mul	r25, r21
     9e4:	d1 f3       	breq	.-12     	; 0x9da <__mulsf3+0x14>
     9e6:	95 0f       	add	r25, r21
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	55 1f       	adc	r21, r21
     9ec:	62 9f       	mul	r22, r18
     9ee:	f0 01       	movw	r30, r0
     9f0:	72 9f       	mul	r23, r18
     9f2:	bb 27       	eor	r27, r27
     9f4:	f0 0d       	add	r31, r0
     9f6:	b1 1d       	adc	r27, r1
     9f8:	63 9f       	mul	r22, r19
     9fa:	aa 27       	eor	r26, r26
     9fc:	f0 0d       	add	r31, r0
     9fe:	b1 1d       	adc	r27, r1
     a00:	aa 1f       	adc	r26, r26
     a02:	64 9f       	mul	r22, r20
     a04:	66 27       	eor	r22, r22
     a06:	b0 0d       	add	r27, r0
     a08:	a1 1d       	adc	r26, r1
     a0a:	66 1f       	adc	r22, r22
     a0c:	82 9f       	mul	r24, r18
     a0e:	22 27       	eor	r18, r18
     a10:	b0 0d       	add	r27, r0
     a12:	a1 1d       	adc	r26, r1
     a14:	62 1f       	adc	r22, r18
     a16:	73 9f       	mul	r23, r19
     a18:	b0 0d       	add	r27, r0
     a1a:	a1 1d       	adc	r26, r1
     a1c:	62 1f       	adc	r22, r18
     a1e:	83 9f       	mul	r24, r19
     a20:	a0 0d       	add	r26, r0
     a22:	61 1d       	adc	r22, r1
     a24:	22 1f       	adc	r18, r18
     a26:	74 9f       	mul	r23, r20
     a28:	33 27       	eor	r19, r19
     a2a:	a0 0d       	add	r26, r0
     a2c:	61 1d       	adc	r22, r1
     a2e:	23 1f       	adc	r18, r19
     a30:	84 9f       	mul	r24, r20
     a32:	60 0d       	add	r22, r0
     a34:	21 1d       	adc	r18, r1
     a36:	82 2f       	mov	r24, r18
     a38:	76 2f       	mov	r23, r22
     a3a:	6a 2f       	mov	r22, r26
     a3c:	11 24       	eor	r1, r1
     a3e:	9f 57       	subi	r25, 0x7F	; 127
     a40:	50 40       	sbci	r21, 0x00	; 0
     a42:	8a f0       	brmi	.+34     	; 0xa66 <__mulsf3_pse+0x84>
     a44:	e1 f0       	breq	.+56     	; 0xa7e <__mulsf3_pse+0x9c>
     a46:	88 23       	and	r24, r24
     a48:	4a f0       	brmi	.+18     	; 0xa5c <__mulsf3_pse+0x7a>
     a4a:	ee 0f       	add	r30, r30
     a4c:	ff 1f       	adc	r31, r31
     a4e:	bb 1f       	adc	r27, r27
     a50:	66 1f       	adc	r22, r22
     a52:	77 1f       	adc	r23, r23
     a54:	88 1f       	adc	r24, r24
     a56:	91 50       	subi	r25, 0x01	; 1
     a58:	50 40       	sbci	r21, 0x00	; 0
     a5a:	a9 f7       	brne	.-22     	; 0xa46 <__mulsf3_pse+0x64>
     a5c:	9e 3f       	cpi	r25, 0xFE	; 254
     a5e:	51 05       	cpc	r21, r1
     a60:	70 f0       	brcs	.+28     	; 0xa7e <__mulsf3_pse+0x9c>
     a62:	60 cf       	rjmp	.-320    	; 0x924 <__fp_inf>
     a64:	aa cf       	rjmp	.-172    	; 0x9ba <__fp_szero>
     a66:	5f 3f       	cpi	r21, 0xFF	; 255
     a68:	ec f3       	brlt	.-6      	; 0xa64 <__mulsf3_pse+0x82>
     a6a:	98 3e       	cpi	r25, 0xE8	; 232
     a6c:	dc f3       	brlt	.-10     	; 0xa64 <__mulsf3_pse+0x82>
     a6e:	86 95       	lsr	r24
     a70:	77 95       	ror	r23
     a72:	67 95       	ror	r22
     a74:	b7 95       	ror	r27
     a76:	f7 95       	ror	r31
     a78:	e7 95       	ror	r30
     a7a:	9f 5f       	subi	r25, 0xFF	; 255
     a7c:	c1 f7       	brne	.-16     	; 0xa6e <__mulsf3_pse+0x8c>
     a7e:	fe 2b       	or	r31, r30
     a80:	88 0f       	add	r24, r24
     a82:	91 1d       	adc	r25, r1
     a84:	96 95       	lsr	r25
     a86:	87 95       	ror	r24
     a88:	97 f9       	bld	r25, 7
     a8a:	08 95       	ret

00000a8c <__divmodhi4>:
     a8c:	97 fb       	bst	r25, 7
     a8e:	07 2e       	mov	r0, r23
     a90:	16 f4       	brtc	.+4      	; 0xa96 <__divmodhi4+0xa>
     a92:	00 94       	com	r0
     a94:	06 d0       	rcall	.+12     	; 0xaa2 <__divmodhi4_neg1>
     a96:	77 fd       	sbrc	r23, 7
     a98:	08 d0       	rcall	.+16     	; 0xaaa <__divmodhi4_neg2>
     a9a:	0b d0       	rcall	.+22     	; 0xab2 <__udivmodhi4>
     a9c:	07 fc       	sbrc	r0, 7
     a9e:	05 d0       	rcall	.+10     	; 0xaaa <__divmodhi4_neg2>
     aa0:	3e f4       	brtc	.+14     	; 0xab0 <__divmodhi4_exit>

00000aa2 <__divmodhi4_neg1>:
     aa2:	90 95       	com	r25
     aa4:	81 95       	neg	r24
     aa6:	9f 4f       	sbci	r25, 0xFF	; 255
     aa8:	08 95       	ret

00000aaa <__divmodhi4_neg2>:
     aaa:	70 95       	com	r23
     aac:	61 95       	neg	r22
     aae:	7f 4f       	sbci	r23, 0xFF	; 255

00000ab0 <__divmodhi4_exit>:
     ab0:	08 95       	ret

00000ab2 <__udivmodhi4>:
     ab2:	aa 1b       	sub	r26, r26
     ab4:	bb 1b       	sub	r27, r27
     ab6:	51 e1       	ldi	r21, 0x11	; 17
     ab8:	07 c0       	rjmp	.+14     	; 0xac8 <__udivmodhi4_ep>

00000aba <__udivmodhi4_loop>:
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	a6 17       	cp	r26, r22
     ac0:	b7 07       	cpc	r27, r23
     ac2:	10 f0       	brcs	.+4      	; 0xac8 <__udivmodhi4_ep>
     ac4:	a6 1b       	sub	r26, r22
     ac6:	b7 0b       	sbc	r27, r23

00000ac8 <__udivmodhi4_ep>:
     ac8:	88 1f       	adc	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	5a 95       	dec	r21
     ace:	a9 f7       	brne	.-22     	; 0xaba <__udivmodhi4_loop>
     ad0:	80 95       	com	r24
     ad2:	90 95       	com	r25
     ad4:	bc 01       	movw	r22, r24
     ad6:	cd 01       	movw	r24, r26
     ad8:	08 95       	ret

00000ada <printf>:
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	ae 01       	movw	r20, r28
     ae4:	4b 5f       	subi	r20, 0xFB	; 251
     ae6:	5f 4f       	sbci	r21, 0xFF	; 255
     ae8:	fa 01       	movw	r30, r20
     aea:	61 91       	ld	r22, Z+
     aec:	71 91       	ld	r23, Z+
     aee:	af 01       	movw	r20, r30
     af0:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <__iob+0x2>
     af4:	90 91 99 07 	lds	r25, 0x0799	; 0x800799 <__iob+0x3>
     af8:	03 d0       	rcall	.+6      	; 0xb00 <vfprintf>
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <vfprintf>:
     b00:	2f 92       	push	r2
     b02:	3f 92       	push	r3
     b04:	4f 92       	push	r4
     b06:	5f 92       	push	r5
     b08:	6f 92       	push	r6
     b0a:	7f 92       	push	r7
     b0c:	8f 92       	push	r8
     b0e:	9f 92       	push	r9
     b10:	af 92       	push	r10
     b12:	bf 92       	push	r11
     b14:	cf 92       	push	r12
     b16:	df 92       	push	r13
     b18:	ef 92       	push	r14
     b1a:	ff 92       	push	r15
     b1c:	0f 93       	push	r16
     b1e:	1f 93       	push	r17
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	2b 97       	sbiw	r28, 0x0b	; 11
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	de bf       	out	0x3e, r29	; 62
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	6c 01       	movw	r12, r24
     b36:	7b 01       	movw	r14, r22
     b38:	8a 01       	movw	r16, r20
     b3a:	fc 01       	movw	r30, r24
     b3c:	17 82       	std	Z+7, r1	; 0x07
     b3e:	16 82       	std	Z+6, r1	; 0x06
     b40:	83 81       	ldd	r24, Z+3	; 0x03
     b42:	81 ff       	sbrs	r24, 1
     b44:	bf c1       	rjmp	.+894    	; 0xec4 <vfprintf+0x3c4>
     b46:	ce 01       	movw	r24, r28
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	3c 01       	movw	r6, r24
     b4c:	f6 01       	movw	r30, r12
     b4e:	93 81       	ldd	r25, Z+3	; 0x03
     b50:	f7 01       	movw	r30, r14
     b52:	93 fd       	sbrc	r25, 3
     b54:	85 91       	lpm	r24, Z+
     b56:	93 ff       	sbrs	r25, 3
     b58:	81 91       	ld	r24, Z+
     b5a:	7f 01       	movw	r14, r30
     b5c:	88 23       	and	r24, r24
     b5e:	09 f4       	brne	.+2      	; 0xb62 <vfprintf+0x62>
     b60:	ad c1       	rjmp	.+858    	; 0xebc <vfprintf+0x3bc>
     b62:	85 32       	cpi	r24, 0x25	; 37
     b64:	39 f4       	brne	.+14     	; 0xb74 <vfprintf+0x74>
     b66:	93 fd       	sbrc	r25, 3
     b68:	85 91       	lpm	r24, Z+
     b6a:	93 ff       	sbrs	r25, 3
     b6c:	81 91       	ld	r24, Z+
     b6e:	7f 01       	movw	r14, r30
     b70:	85 32       	cpi	r24, 0x25	; 37
     b72:	21 f4       	brne	.+8      	; 0xb7c <vfprintf+0x7c>
     b74:	b6 01       	movw	r22, r12
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	d6 d1       	rcall	.+940    	; 0xf26 <fputc>
     b7a:	e8 cf       	rjmp	.-48     	; 0xb4c <vfprintf+0x4c>
     b7c:	91 2c       	mov	r9, r1
     b7e:	21 2c       	mov	r2, r1
     b80:	31 2c       	mov	r3, r1
     b82:	ff e1       	ldi	r31, 0x1F	; 31
     b84:	f3 15       	cp	r31, r3
     b86:	d8 f0       	brcs	.+54     	; 0xbbe <vfprintf+0xbe>
     b88:	8b 32       	cpi	r24, 0x2B	; 43
     b8a:	79 f0       	breq	.+30     	; 0xbaa <vfprintf+0xaa>
     b8c:	38 f4       	brcc	.+14     	; 0xb9c <vfprintf+0x9c>
     b8e:	80 32       	cpi	r24, 0x20	; 32
     b90:	79 f0       	breq	.+30     	; 0xbb0 <vfprintf+0xb0>
     b92:	83 32       	cpi	r24, 0x23	; 35
     b94:	a1 f4       	brne	.+40     	; 0xbbe <vfprintf+0xbe>
     b96:	23 2d       	mov	r18, r3
     b98:	20 61       	ori	r18, 0x10	; 16
     b9a:	1d c0       	rjmp	.+58     	; 0xbd6 <vfprintf+0xd6>
     b9c:	8d 32       	cpi	r24, 0x2D	; 45
     b9e:	61 f0       	breq	.+24     	; 0xbb8 <vfprintf+0xb8>
     ba0:	80 33       	cpi	r24, 0x30	; 48
     ba2:	69 f4       	brne	.+26     	; 0xbbe <vfprintf+0xbe>
     ba4:	23 2d       	mov	r18, r3
     ba6:	21 60       	ori	r18, 0x01	; 1
     ba8:	16 c0       	rjmp	.+44     	; 0xbd6 <vfprintf+0xd6>
     baa:	83 2d       	mov	r24, r3
     bac:	82 60       	ori	r24, 0x02	; 2
     bae:	38 2e       	mov	r3, r24
     bb0:	e3 2d       	mov	r30, r3
     bb2:	e4 60       	ori	r30, 0x04	; 4
     bb4:	3e 2e       	mov	r3, r30
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <vfprintf+0x10c>
     bb8:	f3 2d       	mov	r31, r3
     bba:	f8 60       	ori	r31, 0x08	; 8
     bbc:	1d c0       	rjmp	.+58     	; 0xbf8 <vfprintf+0xf8>
     bbe:	37 fc       	sbrc	r3, 7
     bc0:	2d c0       	rjmp	.+90     	; 0xc1c <vfprintf+0x11c>
     bc2:	20 ed       	ldi	r18, 0xD0	; 208
     bc4:	28 0f       	add	r18, r24
     bc6:	2a 30       	cpi	r18, 0x0A	; 10
     bc8:	40 f0       	brcs	.+16     	; 0xbda <vfprintf+0xda>
     bca:	8e 32       	cpi	r24, 0x2E	; 46
     bcc:	b9 f4       	brne	.+46     	; 0xbfc <vfprintf+0xfc>
     bce:	36 fc       	sbrc	r3, 6
     bd0:	75 c1       	rjmp	.+746    	; 0xebc <vfprintf+0x3bc>
     bd2:	23 2d       	mov	r18, r3
     bd4:	20 64       	ori	r18, 0x40	; 64
     bd6:	32 2e       	mov	r3, r18
     bd8:	19 c0       	rjmp	.+50     	; 0xc0c <vfprintf+0x10c>
     bda:	36 fe       	sbrs	r3, 6
     bdc:	06 c0       	rjmp	.+12     	; 0xbea <vfprintf+0xea>
     bde:	8a e0       	ldi	r24, 0x0A	; 10
     be0:	98 9e       	mul	r9, r24
     be2:	20 0d       	add	r18, r0
     be4:	11 24       	eor	r1, r1
     be6:	92 2e       	mov	r9, r18
     be8:	11 c0       	rjmp	.+34     	; 0xc0c <vfprintf+0x10c>
     bea:	ea e0       	ldi	r30, 0x0A	; 10
     bec:	2e 9e       	mul	r2, r30
     bee:	20 0d       	add	r18, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	22 2e       	mov	r2, r18
     bf4:	f3 2d       	mov	r31, r3
     bf6:	f0 62       	ori	r31, 0x20	; 32
     bf8:	3f 2e       	mov	r3, r31
     bfa:	08 c0       	rjmp	.+16     	; 0xc0c <vfprintf+0x10c>
     bfc:	8c 36       	cpi	r24, 0x6C	; 108
     bfe:	21 f4       	brne	.+8      	; 0xc08 <vfprintf+0x108>
     c00:	83 2d       	mov	r24, r3
     c02:	80 68       	ori	r24, 0x80	; 128
     c04:	38 2e       	mov	r3, r24
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <vfprintf+0x10c>
     c08:	88 36       	cpi	r24, 0x68	; 104
     c0a:	41 f4       	brne	.+16     	; 0xc1c <vfprintf+0x11c>
     c0c:	f7 01       	movw	r30, r14
     c0e:	93 fd       	sbrc	r25, 3
     c10:	85 91       	lpm	r24, Z+
     c12:	93 ff       	sbrs	r25, 3
     c14:	81 91       	ld	r24, Z+
     c16:	7f 01       	movw	r14, r30
     c18:	81 11       	cpse	r24, r1
     c1a:	b3 cf       	rjmp	.-154    	; 0xb82 <vfprintf+0x82>
     c1c:	98 2f       	mov	r25, r24
     c1e:	9f 7d       	andi	r25, 0xDF	; 223
     c20:	95 54       	subi	r25, 0x45	; 69
     c22:	93 30       	cpi	r25, 0x03	; 3
     c24:	28 f4       	brcc	.+10     	; 0xc30 <vfprintf+0x130>
     c26:	0c 5f       	subi	r16, 0xFC	; 252
     c28:	1f 4f       	sbci	r17, 0xFF	; 255
     c2a:	9f e3       	ldi	r25, 0x3F	; 63
     c2c:	99 83       	std	Y+1, r25	; 0x01
     c2e:	0d c0       	rjmp	.+26     	; 0xc4a <vfprintf+0x14a>
     c30:	83 36       	cpi	r24, 0x63	; 99
     c32:	31 f0       	breq	.+12     	; 0xc40 <vfprintf+0x140>
     c34:	83 37       	cpi	r24, 0x73	; 115
     c36:	71 f0       	breq	.+28     	; 0xc54 <vfprintf+0x154>
     c38:	83 35       	cpi	r24, 0x53	; 83
     c3a:	09 f0       	breq	.+2      	; 0xc3e <vfprintf+0x13e>
     c3c:	55 c0       	rjmp	.+170    	; 0xce8 <vfprintf+0x1e8>
     c3e:	20 c0       	rjmp	.+64     	; 0xc80 <vfprintf+0x180>
     c40:	f8 01       	movw	r30, r16
     c42:	80 81       	ld	r24, Z
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	0e 5f       	subi	r16, 0xFE	; 254
     c48:	1f 4f       	sbci	r17, 0xFF	; 255
     c4a:	88 24       	eor	r8, r8
     c4c:	83 94       	inc	r8
     c4e:	91 2c       	mov	r9, r1
     c50:	53 01       	movw	r10, r6
     c52:	12 c0       	rjmp	.+36     	; 0xc78 <vfprintf+0x178>
     c54:	28 01       	movw	r4, r16
     c56:	f2 e0       	ldi	r31, 0x02	; 2
     c58:	4f 0e       	add	r4, r31
     c5a:	51 1c       	adc	r5, r1
     c5c:	f8 01       	movw	r30, r16
     c5e:	a0 80       	ld	r10, Z
     c60:	b1 80       	ldd	r11, Z+1	; 0x01
     c62:	36 fe       	sbrs	r3, 6
     c64:	03 c0       	rjmp	.+6      	; 0xc6c <vfprintf+0x16c>
     c66:	69 2d       	mov	r22, r9
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <vfprintf+0x170>
     c6c:	6f ef       	ldi	r22, 0xFF	; 255
     c6e:	7f ef       	ldi	r23, 0xFF	; 255
     c70:	c5 01       	movw	r24, r10
     c72:	4e d1       	rcall	.+668    	; 0xf10 <strnlen>
     c74:	4c 01       	movw	r8, r24
     c76:	82 01       	movw	r16, r4
     c78:	f3 2d       	mov	r31, r3
     c7a:	ff 77       	andi	r31, 0x7F	; 127
     c7c:	3f 2e       	mov	r3, r31
     c7e:	15 c0       	rjmp	.+42     	; 0xcaa <vfprintf+0x1aa>
     c80:	28 01       	movw	r4, r16
     c82:	22 e0       	ldi	r18, 0x02	; 2
     c84:	42 0e       	add	r4, r18
     c86:	51 1c       	adc	r5, r1
     c88:	f8 01       	movw	r30, r16
     c8a:	a0 80       	ld	r10, Z
     c8c:	b1 80       	ldd	r11, Z+1	; 0x01
     c8e:	36 fe       	sbrs	r3, 6
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <vfprintf+0x198>
     c92:	69 2d       	mov	r22, r9
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <vfprintf+0x19c>
     c98:	6f ef       	ldi	r22, 0xFF	; 255
     c9a:	7f ef       	ldi	r23, 0xFF	; 255
     c9c:	c5 01       	movw	r24, r10
     c9e:	2d d1       	rcall	.+602    	; 0xefa <strnlen_P>
     ca0:	4c 01       	movw	r8, r24
     ca2:	f3 2d       	mov	r31, r3
     ca4:	f0 68       	ori	r31, 0x80	; 128
     ca6:	3f 2e       	mov	r3, r31
     ca8:	82 01       	movw	r16, r4
     caa:	33 fc       	sbrc	r3, 3
     cac:	19 c0       	rjmp	.+50     	; 0xce0 <vfprintf+0x1e0>
     cae:	82 2d       	mov	r24, r2
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	88 16       	cp	r8, r24
     cb4:	99 06       	cpc	r9, r25
     cb6:	a0 f4       	brcc	.+40     	; 0xce0 <vfprintf+0x1e0>
     cb8:	b6 01       	movw	r22, r12
     cba:	80 e2       	ldi	r24, 0x20	; 32
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	33 d1       	rcall	.+614    	; 0xf26 <fputc>
     cc0:	2a 94       	dec	r2
     cc2:	f5 cf       	rjmp	.-22     	; 0xcae <vfprintf+0x1ae>
     cc4:	f5 01       	movw	r30, r10
     cc6:	37 fc       	sbrc	r3, 7
     cc8:	85 91       	lpm	r24, Z+
     cca:	37 fe       	sbrs	r3, 7
     ccc:	81 91       	ld	r24, Z+
     cce:	5f 01       	movw	r10, r30
     cd0:	b6 01       	movw	r22, r12
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	28 d1       	rcall	.+592    	; 0xf26 <fputc>
     cd6:	21 10       	cpse	r2, r1
     cd8:	2a 94       	dec	r2
     cda:	21 e0       	ldi	r18, 0x01	; 1
     cdc:	82 1a       	sub	r8, r18
     cde:	91 08       	sbc	r9, r1
     ce0:	81 14       	cp	r8, r1
     ce2:	91 04       	cpc	r9, r1
     ce4:	79 f7       	brne	.-34     	; 0xcc4 <vfprintf+0x1c4>
     ce6:	e1 c0       	rjmp	.+450    	; 0xeaa <vfprintf+0x3aa>
     ce8:	84 36       	cpi	r24, 0x64	; 100
     cea:	11 f0       	breq	.+4      	; 0xcf0 <vfprintf+0x1f0>
     cec:	89 36       	cpi	r24, 0x69	; 105
     cee:	39 f5       	brne	.+78     	; 0xd3e <vfprintf+0x23e>
     cf0:	f8 01       	movw	r30, r16
     cf2:	37 fe       	sbrs	r3, 7
     cf4:	07 c0       	rjmp	.+14     	; 0xd04 <vfprintf+0x204>
     cf6:	60 81       	ld	r22, Z
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	93 81       	ldd	r25, Z+3	; 0x03
     cfe:	0c 5f       	subi	r16, 0xFC	; 252
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	08 c0       	rjmp	.+16     	; 0xd14 <vfprintf+0x214>
     d04:	60 81       	ld	r22, Z
     d06:	71 81       	ldd	r23, Z+1	; 0x01
     d08:	07 2e       	mov	r0, r23
     d0a:	00 0c       	add	r0, r0
     d0c:	88 0b       	sbc	r24, r24
     d0e:	99 0b       	sbc	r25, r25
     d10:	0e 5f       	subi	r16, 0xFE	; 254
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	f3 2d       	mov	r31, r3
     d16:	ff 76       	andi	r31, 0x6F	; 111
     d18:	3f 2e       	mov	r3, r31
     d1a:	97 ff       	sbrs	r25, 7
     d1c:	09 c0       	rjmp	.+18     	; 0xd30 <vfprintf+0x230>
     d1e:	90 95       	com	r25
     d20:	80 95       	com	r24
     d22:	70 95       	com	r23
     d24:	61 95       	neg	r22
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	8f 4f       	sbci	r24, 0xFF	; 255
     d2a:	9f 4f       	sbci	r25, 0xFF	; 255
     d2c:	f0 68       	ori	r31, 0x80	; 128
     d2e:	3f 2e       	mov	r3, r31
     d30:	2a e0       	ldi	r18, 0x0A	; 10
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	a3 01       	movw	r20, r6
     d36:	33 d1       	rcall	.+614    	; 0xf9e <__ultoa_invert>
     d38:	88 2e       	mov	r8, r24
     d3a:	86 18       	sub	r8, r6
     d3c:	44 c0       	rjmp	.+136    	; 0xdc6 <vfprintf+0x2c6>
     d3e:	85 37       	cpi	r24, 0x75	; 117
     d40:	31 f4       	brne	.+12     	; 0xd4e <vfprintf+0x24e>
     d42:	23 2d       	mov	r18, r3
     d44:	2f 7e       	andi	r18, 0xEF	; 239
     d46:	b2 2e       	mov	r11, r18
     d48:	2a e0       	ldi	r18, 0x0A	; 10
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	25 c0       	rjmp	.+74     	; 0xd98 <vfprintf+0x298>
     d4e:	93 2d       	mov	r25, r3
     d50:	99 7f       	andi	r25, 0xF9	; 249
     d52:	b9 2e       	mov	r11, r25
     d54:	8f 36       	cpi	r24, 0x6F	; 111
     d56:	c1 f0       	breq	.+48     	; 0xd88 <vfprintf+0x288>
     d58:	18 f4       	brcc	.+6      	; 0xd60 <vfprintf+0x260>
     d5a:	88 35       	cpi	r24, 0x58	; 88
     d5c:	79 f0       	breq	.+30     	; 0xd7c <vfprintf+0x27c>
     d5e:	ae c0       	rjmp	.+348    	; 0xebc <vfprintf+0x3bc>
     d60:	80 37       	cpi	r24, 0x70	; 112
     d62:	19 f0       	breq	.+6      	; 0xd6a <vfprintf+0x26a>
     d64:	88 37       	cpi	r24, 0x78	; 120
     d66:	21 f0       	breq	.+8      	; 0xd70 <vfprintf+0x270>
     d68:	a9 c0       	rjmp	.+338    	; 0xebc <vfprintf+0x3bc>
     d6a:	e9 2f       	mov	r30, r25
     d6c:	e0 61       	ori	r30, 0x10	; 16
     d6e:	be 2e       	mov	r11, r30
     d70:	b4 fe       	sbrs	r11, 4
     d72:	0d c0       	rjmp	.+26     	; 0xd8e <vfprintf+0x28e>
     d74:	fb 2d       	mov	r31, r11
     d76:	f4 60       	ori	r31, 0x04	; 4
     d78:	bf 2e       	mov	r11, r31
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <vfprintf+0x28e>
     d7c:	34 fe       	sbrs	r3, 4
     d7e:	0a c0       	rjmp	.+20     	; 0xd94 <vfprintf+0x294>
     d80:	29 2f       	mov	r18, r25
     d82:	26 60       	ori	r18, 0x06	; 6
     d84:	b2 2e       	mov	r11, r18
     d86:	06 c0       	rjmp	.+12     	; 0xd94 <vfprintf+0x294>
     d88:	28 e0       	ldi	r18, 0x08	; 8
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <vfprintf+0x298>
     d8e:	20 e1       	ldi	r18, 0x10	; 16
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <vfprintf+0x298>
     d94:	20 e1       	ldi	r18, 0x10	; 16
     d96:	32 e0       	ldi	r19, 0x02	; 2
     d98:	f8 01       	movw	r30, r16
     d9a:	b7 fe       	sbrs	r11, 7
     d9c:	07 c0       	rjmp	.+14     	; 0xdac <vfprintf+0x2ac>
     d9e:	60 81       	ld	r22, Z
     da0:	71 81       	ldd	r23, Z+1	; 0x01
     da2:	82 81       	ldd	r24, Z+2	; 0x02
     da4:	93 81       	ldd	r25, Z+3	; 0x03
     da6:	0c 5f       	subi	r16, 0xFC	; 252
     da8:	1f 4f       	sbci	r17, 0xFF	; 255
     daa:	06 c0       	rjmp	.+12     	; 0xdb8 <vfprintf+0x2b8>
     dac:	60 81       	ld	r22, Z
     dae:	71 81       	ldd	r23, Z+1	; 0x01
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 5f       	subi	r16, 0xFE	; 254
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	a3 01       	movw	r20, r6
     dba:	f1 d0       	rcall	.+482    	; 0xf9e <__ultoa_invert>
     dbc:	88 2e       	mov	r8, r24
     dbe:	86 18       	sub	r8, r6
     dc0:	fb 2d       	mov	r31, r11
     dc2:	ff 77       	andi	r31, 0x7F	; 127
     dc4:	3f 2e       	mov	r3, r31
     dc6:	36 fe       	sbrs	r3, 6
     dc8:	0d c0       	rjmp	.+26     	; 0xde4 <vfprintf+0x2e4>
     dca:	23 2d       	mov	r18, r3
     dcc:	2e 7f       	andi	r18, 0xFE	; 254
     dce:	a2 2e       	mov	r10, r18
     dd0:	89 14       	cp	r8, r9
     dd2:	58 f4       	brcc	.+22     	; 0xdea <vfprintf+0x2ea>
     dd4:	34 fe       	sbrs	r3, 4
     dd6:	0b c0       	rjmp	.+22     	; 0xdee <vfprintf+0x2ee>
     dd8:	32 fc       	sbrc	r3, 2
     dda:	09 c0       	rjmp	.+18     	; 0xdee <vfprintf+0x2ee>
     ddc:	83 2d       	mov	r24, r3
     dde:	8e 7e       	andi	r24, 0xEE	; 238
     de0:	a8 2e       	mov	r10, r24
     de2:	05 c0       	rjmp	.+10     	; 0xdee <vfprintf+0x2ee>
     de4:	b8 2c       	mov	r11, r8
     de6:	a3 2c       	mov	r10, r3
     de8:	03 c0       	rjmp	.+6      	; 0xdf0 <vfprintf+0x2f0>
     dea:	b8 2c       	mov	r11, r8
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <vfprintf+0x2f0>
     dee:	b9 2c       	mov	r11, r9
     df0:	a4 fe       	sbrs	r10, 4
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <vfprintf+0x312>
     df4:	fe 01       	movw	r30, r28
     df6:	e8 0d       	add	r30, r8
     df8:	f1 1d       	adc	r31, r1
     dfa:	80 81       	ld	r24, Z
     dfc:	80 33       	cpi	r24, 0x30	; 48
     dfe:	21 f4       	brne	.+8      	; 0xe08 <vfprintf+0x308>
     e00:	9a 2d       	mov	r25, r10
     e02:	99 7e       	andi	r25, 0xE9	; 233
     e04:	a9 2e       	mov	r10, r25
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <vfprintf+0x31a>
     e08:	a2 fe       	sbrs	r10, 2
     e0a:	06 c0       	rjmp	.+12     	; 0xe18 <vfprintf+0x318>
     e0c:	b3 94       	inc	r11
     e0e:	b3 94       	inc	r11
     e10:	04 c0       	rjmp	.+8      	; 0xe1a <vfprintf+0x31a>
     e12:	8a 2d       	mov	r24, r10
     e14:	86 78       	andi	r24, 0x86	; 134
     e16:	09 f0       	breq	.+2      	; 0xe1a <vfprintf+0x31a>
     e18:	b3 94       	inc	r11
     e1a:	a3 fc       	sbrc	r10, 3
     e1c:	10 c0       	rjmp	.+32     	; 0xe3e <vfprintf+0x33e>
     e1e:	a0 fe       	sbrs	r10, 0
     e20:	06 c0       	rjmp	.+12     	; 0xe2e <vfprintf+0x32e>
     e22:	b2 14       	cp	r11, r2
     e24:	80 f4       	brcc	.+32     	; 0xe46 <vfprintf+0x346>
     e26:	28 0c       	add	r2, r8
     e28:	92 2c       	mov	r9, r2
     e2a:	9b 18       	sub	r9, r11
     e2c:	0d c0       	rjmp	.+26     	; 0xe48 <vfprintf+0x348>
     e2e:	b2 14       	cp	r11, r2
     e30:	58 f4       	brcc	.+22     	; 0xe48 <vfprintf+0x348>
     e32:	b6 01       	movw	r22, r12
     e34:	80 e2       	ldi	r24, 0x20	; 32
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	76 d0       	rcall	.+236    	; 0xf26 <fputc>
     e3a:	b3 94       	inc	r11
     e3c:	f8 cf       	rjmp	.-16     	; 0xe2e <vfprintf+0x32e>
     e3e:	b2 14       	cp	r11, r2
     e40:	18 f4       	brcc	.+6      	; 0xe48 <vfprintf+0x348>
     e42:	2b 18       	sub	r2, r11
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <vfprintf+0x34a>
     e46:	98 2c       	mov	r9, r8
     e48:	21 2c       	mov	r2, r1
     e4a:	a4 fe       	sbrs	r10, 4
     e4c:	0f c0       	rjmp	.+30     	; 0xe6c <vfprintf+0x36c>
     e4e:	b6 01       	movw	r22, r12
     e50:	80 e3       	ldi	r24, 0x30	; 48
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	68 d0       	rcall	.+208    	; 0xf26 <fputc>
     e56:	a2 fe       	sbrs	r10, 2
     e58:	16 c0       	rjmp	.+44     	; 0xe86 <vfprintf+0x386>
     e5a:	a1 fc       	sbrc	r10, 1
     e5c:	03 c0       	rjmp	.+6      	; 0xe64 <vfprintf+0x364>
     e5e:	88 e7       	ldi	r24, 0x78	; 120
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <vfprintf+0x368>
     e64:	88 e5       	ldi	r24, 0x58	; 88
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	b6 01       	movw	r22, r12
     e6a:	0c c0       	rjmp	.+24     	; 0xe84 <vfprintf+0x384>
     e6c:	8a 2d       	mov	r24, r10
     e6e:	86 78       	andi	r24, 0x86	; 134
     e70:	51 f0       	breq	.+20     	; 0xe86 <vfprintf+0x386>
     e72:	a1 fe       	sbrs	r10, 1
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <vfprintf+0x37a>
     e76:	8b e2       	ldi	r24, 0x2B	; 43
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <vfprintf+0x37c>
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	a7 fc       	sbrc	r10, 7
     e7e:	8d e2       	ldi	r24, 0x2D	; 45
     e80:	b6 01       	movw	r22, r12
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	50 d0       	rcall	.+160    	; 0xf26 <fputc>
     e86:	89 14       	cp	r8, r9
     e88:	30 f4       	brcc	.+12     	; 0xe96 <vfprintf+0x396>
     e8a:	b6 01       	movw	r22, r12
     e8c:	80 e3       	ldi	r24, 0x30	; 48
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	4a d0       	rcall	.+148    	; 0xf26 <fputc>
     e92:	9a 94       	dec	r9
     e94:	f8 cf       	rjmp	.-16     	; 0xe86 <vfprintf+0x386>
     e96:	8a 94       	dec	r8
     e98:	f3 01       	movw	r30, r6
     e9a:	e8 0d       	add	r30, r8
     e9c:	f1 1d       	adc	r31, r1
     e9e:	80 81       	ld	r24, Z
     ea0:	b6 01       	movw	r22, r12
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	40 d0       	rcall	.+128    	; 0xf26 <fputc>
     ea6:	81 10       	cpse	r8, r1
     ea8:	f6 cf       	rjmp	.-20     	; 0xe96 <vfprintf+0x396>
     eaa:	22 20       	and	r2, r2
     eac:	09 f4       	brne	.+2      	; 0xeb0 <vfprintf+0x3b0>
     eae:	4e ce       	rjmp	.-868    	; 0xb4c <vfprintf+0x4c>
     eb0:	b6 01       	movw	r22, r12
     eb2:	80 e2       	ldi	r24, 0x20	; 32
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	37 d0       	rcall	.+110    	; 0xf26 <fputc>
     eb8:	2a 94       	dec	r2
     eba:	f7 cf       	rjmp	.-18     	; 0xeaa <vfprintf+0x3aa>
     ebc:	f6 01       	movw	r30, r12
     ebe:	86 81       	ldd	r24, Z+6	; 0x06
     ec0:	97 81       	ldd	r25, Z+7	; 0x07
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <vfprintf+0x3c8>
     ec4:	8f ef       	ldi	r24, 0xFF	; 255
     ec6:	9f ef       	ldi	r25, 0xFF	; 255
     ec8:	2b 96       	adiw	r28, 0x0b	; 11
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	df 90       	pop	r13
     ee2:	cf 90       	pop	r12
     ee4:	bf 90       	pop	r11
     ee6:	af 90       	pop	r10
     ee8:	9f 90       	pop	r9
     eea:	8f 90       	pop	r8
     eec:	7f 90       	pop	r7
     eee:	6f 90       	pop	r6
     ef0:	5f 90       	pop	r5
     ef2:	4f 90       	pop	r4
     ef4:	3f 90       	pop	r3
     ef6:	2f 90       	pop	r2
     ef8:	08 95       	ret

00000efa <strnlen_P>:
     efa:	fc 01       	movw	r30, r24
     efc:	05 90       	lpm	r0, Z+
     efe:	61 50       	subi	r22, 0x01	; 1
     f00:	70 40       	sbci	r23, 0x00	; 0
     f02:	01 10       	cpse	r0, r1
     f04:	d8 f7       	brcc	.-10     	; 0xefc <strnlen_P+0x2>
     f06:	80 95       	com	r24
     f08:	90 95       	com	r25
     f0a:	8e 0f       	add	r24, r30
     f0c:	9f 1f       	adc	r25, r31
     f0e:	08 95       	ret

00000f10 <strnlen>:
     f10:	fc 01       	movw	r30, r24
     f12:	61 50       	subi	r22, 0x01	; 1
     f14:	70 40       	sbci	r23, 0x00	; 0
     f16:	01 90       	ld	r0, Z+
     f18:	01 10       	cpse	r0, r1
     f1a:	d8 f7       	brcc	.-10     	; 0xf12 <strnlen+0x2>
     f1c:	80 95       	com	r24
     f1e:	90 95       	com	r25
     f20:	8e 0f       	add	r24, r30
     f22:	9f 1f       	adc	r25, r31
     f24:	08 95       	ret

00000f26 <fputc>:
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	fb 01       	movw	r30, r22
     f30:	23 81       	ldd	r18, Z+3	; 0x03
     f32:	21 fd       	sbrc	r18, 1
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <fputc+0x16>
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	9f ef       	ldi	r25, 0xFF	; 255
     f3a:	2c c0       	rjmp	.+88     	; 0xf94 <fputc+0x6e>
     f3c:	22 ff       	sbrs	r18, 2
     f3e:	16 c0       	rjmp	.+44     	; 0xf6c <fputc+0x46>
     f40:	46 81       	ldd	r20, Z+6	; 0x06
     f42:	57 81       	ldd	r21, Z+7	; 0x07
     f44:	24 81       	ldd	r18, Z+4	; 0x04
     f46:	35 81       	ldd	r19, Z+5	; 0x05
     f48:	42 17       	cp	r20, r18
     f4a:	53 07       	cpc	r21, r19
     f4c:	44 f4       	brge	.+16     	; 0xf5e <fputc+0x38>
     f4e:	a0 81       	ld	r26, Z
     f50:	b1 81       	ldd	r27, Z+1	; 0x01
     f52:	9d 01       	movw	r18, r26
     f54:	2f 5f       	subi	r18, 0xFF	; 255
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	31 83       	std	Z+1, r19	; 0x01
     f5a:	20 83       	st	Z, r18
     f5c:	8c 93       	st	X, r24
     f5e:	26 81       	ldd	r18, Z+6	; 0x06
     f60:	37 81       	ldd	r19, Z+7	; 0x07
     f62:	2f 5f       	subi	r18, 0xFF	; 255
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	37 83       	std	Z+7, r19	; 0x07
     f68:	26 83       	std	Z+6, r18	; 0x06
     f6a:	14 c0       	rjmp	.+40     	; 0xf94 <fputc+0x6e>
     f6c:	8b 01       	movw	r16, r22
     f6e:	ec 01       	movw	r28, r24
     f70:	fb 01       	movw	r30, r22
     f72:	00 84       	ldd	r0, Z+8	; 0x08
     f74:	f1 85       	ldd	r31, Z+9	; 0x09
     f76:	e0 2d       	mov	r30, r0
     f78:	09 95       	icall
     f7a:	89 2b       	or	r24, r25
     f7c:	e1 f6       	brne	.-72     	; 0xf36 <fputc+0x10>
     f7e:	d8 01       	movw	r26, r16
     f80:	16 96       	adiw	r26, 0x06	; 6
     f82:	8d 91       	ld	r24, X+
     f84:	9c 91       	ld	r25, X
     f86:	17 97       	sbiw	r26, 0x07	; 7
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	17 96       	adiw	r26, 0x07	; 7
     f8c:	9c 93       	st	X, r25
     f8e:	8e 93       	st	-X, r24
     f90:	16 97       	sbiw	r26, 0x06	; 6
     f92:	ce 01       	movw	r24, r28
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	08 95       	ret

00000f9e <__ultoa_invert>:
     f9e:	fa 01       	movw	r30, r20
     fa0:	aa 27       	eor	r26, r26
     fa2:	28 30       	cpi	r18, 0x08	; 8
     fa4:	51 f1       	breq	.+84     	; 0xffa <__ultoa_invert+0x5c>
     fa6:	20 31       	cpi	r18, 0x10	; 16
     fa8:	81 f1       	breq	.+96     	; 0x100a <__DATA_REGION_LENGTH__+0xa>
     faa:	e8 94       	clt
     fac:	6f 93       	push	r22
     fae:	6e 7f       	andi	r22, 0xFE	; 254
     fb0:	6e 5f       	subi	r22, 0xFE	; 254
     fb2:	7f 4f       	sbci	r23, 0xFF	; 255
     fb4:	8f 4f       	sbci	r24, 0xFF	; 255
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	af 4f       	sbci	r26, 0xFF	; 255
     fba:	b1 e0       	ldi	r27, 0x01	; 1
     fbc:	3e d0       	rcall	.+124    	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
     fbe:	b4 e0       	ldi	r27, 0x04	; 4
     fc0:	3c d0       	rcall	.+120    	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
     fc2:	67 0f       	add	r22, r23
     fc4:	78 1f       	adc	r23, r24
     fc6:	89 1f       	adc	r24, r25
     fc8:	9a 1f       	adc	r25, r26
     fca:	a1 1d       	adc	r26, r1
     fcc:	68 0f       	add	r22, r24
     fce:	79 1f       	adc	r23, r25
     fd0:	8a 1f       	adc	r24, r26
     fd2:	91 1d       	adc	r25, r1
     fd4:	a1 1d       	adc	r26, r1
     fd6:	6a 0f       	add	r22, r26
     fd8:	71 1d       	adc	r23, r1
     fda:	81 1d       	adc	r24, r1
     fdc:	91 1d       	adc	r25, r1
     fde:	a1 1d       	adc	r26, r1
     fe0:	20 d0       	rcall	.+64     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <__ultoa_invert+0x48>
     fe4:	68 94       	set
     fe6:	3f 91       	pop	r19
     fe8:	2a e0       	ldi	r18, 0x0A	; 10
     fea:	26 9f       	mul	r18, r22
     fec:	11 24       	eor	r1, r1
     fee:	30 19       	sub	r19, r0
     ff0:	30 5d       	subi	r19, 0xD0	; 208
     ff2:	31 93       	st	Z+, r19
     ff4:	de f6       	brtc	.-74     	; 0xfac <__ultoa_invert+0xe>
     ff6:	cf 01       	movw	r24, r30
     ff8:	08 95       	ret
     ffa:	46 2f       	mov	r20, r22
     ffc:	47 70       	andi	r20, 0x07	; 7
     ffe:	40 5d       	subi	r20, 0xD0	; 208
    1000:	41 93       	st	Z+, r20
    1002:	b3 e0       	ldi	r27, 0x03	; 3
    1004:	0f d0       	rcall	.+30     	; 0x1024 <__DATA_REGION_LENGTH__+0x24>
    1006:	c9 f7       	brne	.-14     	; 0xffa <__ultoa_invert+0x5c>
    1008:	f6 cf       	rjmp	.-20     	; 0xff6 <__ultoa_invert+0x58>
    100a:	46 2f       	mov	r20, r22
    100c:	4f 70       	andi	r20, 0x0F	; 15
    100e:	40 5d       	subi	r20, 0xD0	; 208
    1010:	4a 33       	cpi	r20, 0x3A	; 58
    1012:	18 f0       	brcs	.+6      	; 0x101a <__DATA_REGION_LENGTH__+0x1a>
    1014:	49 5d       	subi	r20, 0xD9	; 217
    1016:	31 fd       	sbrc	r19, 1
    1018:	40 52       	subi	r20, 0x20	; 32
    101a:	41 93       	st	Z+, r20
    101c:	02 d0       	rcall	.+4      	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    101e:	a9 f7       	brne	.-22     	; 0x100a <__DATA_REGION_LENGTH__+0xa>
    1020:	ea cf       	rjmp	.-44     	; 0xff6 <__ultoa_invert+0x58>
    1022:	b4 e0       	ldi	r27, 0x04	; 4
    1024:	a6 95       	lsr	r26
    1026:	97 95       	ror	r25
    1028:	87 95       	ror	r24
    102a:	77 95       	ror	r23
    102c:	67 95       	ror	r22
    102e:	ba 95       	dec	r27
    1030:	c9 f7       	brne	.-14     	; 0x1024 <__DATA_REGION_LENGTH__+0x24>
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	61 05       	cpc	r22, r1
    1036:	71 05       	cpc	r23, r1
    1038:	08 95       	ret
    103a:	9b 01       	movw	r18, r22
    103c:	ac 01       	movw	r20, r24
    103e:	0a 2e       	mov	r0, r26
    1040:	06 94       	lsr	r0
    1042:	57 95       	ror	r21
    1044:	47 95       	ror	r20
    1046:	37 95       	ror	r19
    1048:	27 95       	ror	r18
    104a:	ba 95       	dec	r27
    104c:	c9 f7       	brne	.-14     	; 0x1040 <__DATA_REGION_LENGTH__+0x40>
    104e:	62 0f       	add	r22, r18
    1050:	73 1f       	adc	r23, r19
    1052:	84 1f       	adc	r24, r20
    1054:	95 1f       	adc	r25, r21
    1056:	a0 1d       	adc	r26, r0
    1058:	08 95       	ret

0000105a <_exit>:
    105a:	f8 94       	cli

0000105c <__stop_program>:
    105c:	ff cf       	rjmp	.-2      	; 0x105c <__stop_program>
