
11_AUTO_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000016b6  0000174a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000066f  00800152  00800152  0000179c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001838  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001aeb  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010be  00000000  00000000  0000350b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000102d  00000000  00000000  000045c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d0  00000000  00000000  000055f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007df  00000000  00000000  00005ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009bd  00000000  00000000  000062a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00006c64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	77 c0       	rjmp	.+238    	; 0xf0 <__ctors_end>
       2:	00 00       	nop
       4:	93 c0       	rjmp	.+294    	; 0x12c <__bad_interrupt>
       6:	00 00       	nop
       8:	91 c0       	rjmp	.+290    	; 0x12c <__bad_interrupt>
       a:	00 00       	nop
       c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	e3 c4       	rjmp	.+2502   	; 0x9dc <__vector_5>
      16:	00 00       	nop
      18:	2e c5       	rjmp	.+2652   	; 0xa76 <__vector_6>
      1a:	00 00       	nop
      1c:	79 c5       	rjmp	.+2802   	; 0xb10 <__vector_7>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	77 c0       	rjmp	.+238    	; 0x12c <__bad_interrupt>
      3e:	00 00       	nop
      40:	e9 c1       	rjmp	.+978    	; 0x414 <__vector_16>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	f4 c3       	rjmp	.+2024   	; 0x832 <__vector_18>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	6b c0       	rjmp	.+214    	; 0x12c <__bad_interrupt>
      56:	00 00       	nop
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	63 c0       	rjmp	.+198    	; 0x12c <__bad_interrupt>
      66:	00 00       	nop
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
      76:	00 00       	nop
      78:	6e c4       	rjmp	.+2268   	; 0x956 <__vector_30>
      7a:	00 00       	nop
      7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f6 01       	movw	r30, r12
      8e:	03 02       	muls	r16, r19
      90:	03 02       	muls	r16, r19
      92:	03 02       	muls	r16, r19
      94:	f2 01       	movw	r30, r4
      96:	03 02       	muls	r16, r19
      98:	03 02       	muls	r16, r19
      9a:	03 02       	muls	r16, r19
      9c:	03 02       	muls	r16, r19
      9e:	03 02       	muls	r16, r19
      a0:	fa 01       	movw	r30, r20
      a2:	03 02       	muls	r16, r19
      a4:	03 02       	muls	r16, r19
      a6:	03 02       	muls	r16, r19
      a8:	03 02       	muls	r16, r19
      aa:	03 02       	muls	r16, r19
      ac:	fe 01       	movw	r30, r28
      ae:	02 02       	muls	r16, r18
      b0:	03 02       	muls	r16, r19
      b2:	03 02       	muls	r16, r19
      b4:	03 02       	muls	r16, r19
      b6:	03 02       	muls	r16, r19
      b8:	03 02       	muls	r16, r19
      ba:	03 02       	muls	r16, r19
      bc:	03 02       	muls	r16, r19
      be:	03 02       	muls	r16, r19
      c0:	03 02       	muls	r16, r19
      c2:	03 02       	muls	r16, r19
      c4:	03 02       	muls	r16, r19
      c6:	03 02       	muls	r16, r19
      c8:	03 02       	muls	r16, r19
      ca:	03 02       	muls	r16, r19
      cc:	f6 01       	movw	r30, r12
      ce:	03 02       	muls	r16, r19
      d0:	03 02       	muls	r16, r19
      d2:	03 02       	muls	r16, r19
      d4:	f2 01       	movw	r30, r4
      d6:	03 02       	muls	r16, r19
      d8:	03 02       	muls	r16, r19
      da:	03 02       	muls	r16, r19
      dc:	03 02       	muls	r16, r19
      de:	03 02       	muls	r16, r19
      e0:	fa 01       	movw	r30, r20
      e2:	03 02       	muls	r16, r19
      e4:	03 02       	muls	r16, r19
      e6:	03 02       	muls	r16, r19
      e8:	03 02       	muls	r16, r19
      ea:	03 02       	muls	r16, r19
      ec:	fe 01       	movw	r30, r28
      ee:	02 02       	muls	r16, r18

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d0 e1       	ldi	r29, 0x10	; 16
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61

000000fc <__do_copy_data>:
      fc:	11 e0       	ldi	r17, 0x01	; 1
      fe:	a0 e0       	ldi	r26, 0x00	; 0
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	e6 eb       	ldi	r30, 0xB6	; 182
     104:	f6 e1       	ldi	r31, 0x16	; 22
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	0b bf       	out	0x3b, r16	; 59
     10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x14>
     10c:	07 90       	elpm	r0, Z+
     10e:	0d 92       	st	X+, r0
     110:	a2 35       	cpi	r26, 0x52	; 82
     112:	b1 07       	cpc	r27, r17
     114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0x10>

00000116 <__do_clear_bss>:
     116:	27 e0       	ldi	r18, 0x07	; 7
     118:	a2 e5       	ldi	r26, 0x52	; 82
     11a:	b1 e0       	ldi	r27, 0x01	; 1
     11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
     11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
     120:	a1 3c       	cpi	r26, 0xC1	; 193
     122:	b2 07       	cpc	r27, r18
     124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
     126:	df d1       	rcall	.+958    	; 0x4e6 <main>
     128:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <init_button>:

int button0_state = 0;

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN /*| 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN*/);
     12e:	8a b3       	in	r24, 0x1a	; 26
     130:	8f 7b       	andi	r24, 0xBF	; 191
     132:	8a bb       	out	0x1a, r24	; 26
     134:	08 95       	ret

00000136 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE/*, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE*/}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
     136:	29 b3       	in	r18, 0x19	; 25
     138:	42 2f       	mov	r20, r18
     13a:	50 e0       	ldi	r21, 0x00	; 0
     13c:	21 e0       	ldi	r18, 0x01	; 1
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	02 c0       	rjmp	.+4      	; 0x146 <get_button+0x10>
     142:	22 0f       	add	r18, r18
     144:	33 1f       	adc	r19, r19
     146:	6a 95       	dec	r22
     148:	e2 f7       	brpl	.-8      	; 0x142 <get_button+0xc>
     14a:	24 23       	and	r18, r20
     14c:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
     14e:	21 15       	cp	r18, r1
     150:	31 05       	cpc	r19, r1
     152:	b9 f0       	breq	.+46     	; 0x182 <get_button+0x4c>
     154:	fc 01       	movw	r30, r24
     156:	ee 5a       	subi	r30, 0xAE	; 174
     158:	fe 4f       	sbci	r31, 0xFE	; 254
     15a:	40 81       	ld	r20, Z
     15c:	41 11       	cpse	r20, r1
     15e:	11 c0       	rjmp	.+34     	; 0x182 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     160:	2f ef       	ldi	r18, 0xFF	; 255
     162:	3d ee       	ldi	r19, 0xED	; 237
     164:	42 e0       	ldi	r20, 0x02	; 2
     166:	21 50       	subi	r18, 0x01	; 1
     168:	30 40       	sbci	r19, 0x00	; 0
     16a:	40 40       	sbci	r20, 0x00	; 0
     16c:	e1 f7       	brne	.-8      	; 0x166 <get_button+0x30>
     16e:	00 c0       	rjmp	.+0      	; 0x170 <get_button+0x3a>
     170:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     172:	fc 01       	movw	r30, r24
     174:	ee 5a       	subi	r30, 0xAE	; 174
     176:	fe 4f       	sbci	r31, 0xFE	; 254
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     182:	fc 01       	movw	r30, r24
     184:	ee 5a       	subi	r30, 0xAE	; 174
     186:	fe 4f       	sbci	r31, 0xFE	; 254
     188:	40 81       	ld	r20, Z
     18a:	41 30       	cpi	r20, 0x01	; 1
     18c:	91 f4       	brne	.+36     	; 0x1b2 <get_button+0x7c>
     18e:	23 2b       	or	r18, r19
     190:	99 f4       	brne	.+38     	; 0x1b8 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     192:	fc 01       	movw	r30, r24
     194:	ee 5a       	subi	r30, 0xAE	; 174
     196:	fe 4f       	sbci	r31, 0xFE	; 254
     198:	10 82       	st	Z, r1
     19a:	8f ef       	ldi	r24, 0xFF	; 255
     19c:	9d ee       	ldi	r25, 0xED	; 237
     19e:	22 e0       	ldi	r18, 0x02	; 2
     1a0:	81 50       	subi	r24, 0x01	; 1
     1a2:	90 40       	sbci	r25, 0x00	; 0
     1a4:	20 40       	sbci	r18, 0x00	; 0
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <get_button+0x6a>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <get_button+0x74>
     1aa:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	08 95       	ret
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
}
     1bc:	08 95       	ret

000001be <auto_mode_check>:

void auto_mode_check(void)
{
	if (get_button(BUTTON0, BUTTON0PIN))
     1be:	66 e0       	ldi	r22, 0x06	; 6
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	b7 df       	rcall	.-146    	; 0x136 <get_button>
     1c8:	89 2b       	or	r24, r25
     1ca:	71 f0       	breq	.+28     	; 0x1e8 <auto_mode_check+0x2a>
	{
		button0_state = !button0_state;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <button0_state>
     1d4:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <button0_state+0x1>
     1d8:	23 2b       	or	r18, r19
     1da:	11 f0       	breq	.+4      	; 0x1e0 <auto_mode_check+0x22>
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <button0_state+0x1>
     1e4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <button0_state>
	}
	
	if (button0_state)
     1e8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <button0_state>
     1ec:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <button0_state+0x1>
     1f0:	89 2b       	or	r24, r25
     1f2:	39 f0       	breq	.+14     	; 0x202 <auto_mode_check+0x44>
	{
		AUTO_RUN_LED_PORT |= 1 << AUTO_RUN_LED_PIN; // LED ON
     1f4:	e5 e6       	ldi	r30, 0x65	; 101
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	88 60       	ori	r24, 0x08	; 8
		auto_start();
     1fc:	80 83       	st	Z, r24
     1fe:	fa d1       	rcall	.+1012   	; 0x5f4 <auto_start>
     200:	06 c0       	rjmp	.+12     	; 0x20e <auto_mode_check+0x50>
	}
	else
	{
		AUTO_RUN_LED_PORT &= ~(1 << AUTO_RUN_LED_PIN); // LED OFF
     202:	e5 e6       	ldi	r30, 0x65	; 101
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	80 81       	ld	r24, Z
     208:	87 7f       	andi	r24, 0xF7	; 247
		stop();
     20a:	80 83       	st	Z, r24
     20c:	e6 d1       	rcall	.+972    	; 0x5da <stop>
	}
	func_state = AUTO_MODE;
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <func_state+0x1>
     216:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <func_state>
     21a:	08 95       	ret

0000021c <init_fnd>:
				state_mod = 0;
			}
		}
		
		fp_clock[state_mod]();
	}
     21c:	8f ef       	ldi	r24, 0xFF	; 255
     21e:	84 bb       	out	0x14, r24	; 20
     220:	e1 e6       	ldi	r30, 0x61	; 97
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	80 6f       	ori	r24, 0xF0	; 240
     228:	80 83       	st	Z, r24
     22a:	15 ba       	out	0x15, r1	; 21
     22c:	08 95       	ret

0000022e <fnd_display>:
}



void fnd_display(int *run_state)
{
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	2f 97       	sbiw	r28, 0x0f	; 15
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	f8 94       	cli
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	0f be       	out	0x3f, r0	; 63
     240:	cd bf       	out	0x3d, r28	; 61
     242:	ac 01       	movw	r20, r24
						  // 0      1      2      3      4      5      6      7      8      9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f
     244:	9f e0       	ldi	r25, 0x0F	; 15
     246:	e6 e1       	ldi	r30, 0x16	; 22
     248:	f1 e0       	ldi	r31, 0x01	; 1
     24a:	de 01       	movw	r26, r28
     24c:	11 96       	adiw	r26, 0x01	; 1
     24e:	01 90       	ld	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	9a 95       	dec	r25
     254:	e1 f7       	brne	.-8      	; 0x24e <fnd_display+0x20>
		, ~0x82, ~0xc7, ~0xe0, ~0x83
		};

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     256:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <digit_select.1776>
     25a:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <digit_select.1776+0x1>
     25e:	21 30       	cpi	r18, 0x01	; 1
     260:	31 05       	cpc	r19, r1
     262:	31 f1       	breq	.+76     	; 0x2b0 <fnd_display+0x82>
     264:	1c f4       	brge	.+6      	; 0x26c <fnd_display+0x3e>
     266:	23 2b       	or	r18, r19
     268:	51 f0       	breq	.+20     	; 0x27e <fnd_display+0x50>
     26a:	8a c0       	rjmp	.+276    	; 0x380 <fnd_display+0x152>
     26c:	22 30       	cpi	r18, 0x02	; 2
     26e:	31 05       	cpc	r19, r1
     270:	09 f4       	brne	.+2      	; 0x274 <fnd_display+0x46>
     272:	3e c0       	rjmp	.+124    	; 0x2f0 <fnd_display+0xc2>
     274:	23 30       	cpi	r18, 0x03	; 3
     276:	31 05       	cpc	r19, r1
     278:	09 f4       	brne	.+2      	; 0x27c <fnd_display+0x4e>
     27a:	73 c0       	rjmp	.+230    	; 0x362 <fnd_display+0x134>
     27c:	81 c0       	rjmp	.+258    	; 0x380 <fnd_display+0x152>
	{
		case 0 :

			FND_DIGIT_PORT = ~0x80;
     27e:	8f e7       	ldi	r24, 0x7F	; 127
     280:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     284:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <sec_count>
     288:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <sec_count+0x1>
     28c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sec_count+0x2>
     290:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sec_count+0x3>
     294:	2a e0       	ldi	r18, 0x0A	; 10
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	0b d7       	rcall	.+3606   	; 0x10b4 <__udivmodsi4>
     29e:	e1 e0       	ldi	r30, 0x01	; 1
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	ec 0f       	add	r30, r28
     2a4:	fd 1f       	adc	r31, r29
     2a6:	e6 0f       	add	r30, r22
     2a8:	f7 1f       	adc	r31, r23
     2aa:	80 81       	ld	r24, Z
     2ac:	85 bb       	out	0x15, r24	; 21
		break;
     2ae:	68 c0       	rjmp	.+208    	; 0x380 <fnd_display+0x152>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     2b0:	8f eb       	ldi	r24, 0xBF	; 191
     2b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     2b6:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <sec_count>
     2ba:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <sec_count+0x1>
     2be:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sec_count+0x2>
     2c2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sec_count+0x3>
     2c6:	2a e0       	ldi	r18, 0x0A	; 10
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	f2 d6       	rcall	.+3556   	; 0x10b4 <__udivmodsi4>
     2d0:	ca 01       	movw	r24, r20
     2d2:	b9 01       	movw	r22, r18
     2d4:	26 e0       	ldi	r18, 0x06	; 6
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	50 e0       	ldi	r21, 0x00	; 0
     2dc:	eb d6       	rcall	.+3542   	; 0x10b4 <__udivmodsi4>
     2de:	e1 e0       	ldi	r30, 0x01	; 1
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	ec 0f       	add	r30, r28
     2e4:	fd 1f       	adc	r31, r29
     2e6:	e6 0f       	add	r30, r22
     2e8:	f7 1f       	adc	r31, r23
     2ea:	80 81       	ld	r24, Z
     2ec:	85 bb       	out	0x15, r24	; 21
		break;
     2ee:	48 c0       	rjmp	.+144    	; 0x380 <fnd_display+0x152>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     2f0:	8f ed       	ldi	r24, 0xDF	; 223
     2f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		if (sec_count % 2 == 1)
     2f6:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <sec_count>
     2fa:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <sec_count+0x1>
     2fe:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sec_count+0x2>
     302:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sec_count+0x3>
     306:	60 ff       	sbrs	r22, 0
     308:	17 c0       	rjmp	.+46     	; 0x338 <fnd_display+0x10a>
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     30a:	2c e3       	ldi	r18, 0x3C	; 60
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	d0 d6       	rcall	.+3488   	; 0x10b4 <__udivmodsi4>
     314:	ca 01       	movw	r24, r20
     316:	b9 01       	movw	r22, r18
     318:	2a e0       	ldi	r18, 0x0A	; 10
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	40 e0       	ldi	r20, 0x00	; 0
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	c9 d6       	rcall	.+3474   	; 0x10b4 <__udivmodsi4>
     322:	e1 e0       	ldi	r30, 0x01	; 1
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	ec 0f       	add	r30, r28
     328:	fd 1f       	adc	r31, r29
     32a:	e6 0f       	add	r30, r22
     32c:	f7 1f       	adc	r31, r23
     32e:	90 81       	ld	r25, Z
     330:	8b 85       	ldd	r24, Y+11	; 0x0b
     332:	89 2b       	or	r24, r25
     334:	85 bb       	out	0x15, r24	; 21
     336:	24 c0       	rjmp	.+72     	; 0x380 <fnd_display+0x152>
		else
			FND_DATA_PORT = fnd_font[sec_count / 60 % 10]; // 1단위 분
     338:	2c e3       	ldi	r18, 0x3C	; 60
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	b9 d6       	rcall	.+3442   	; 0x10b4 <__udivmodsi4>
     342:	ca 01       	movw	r24, r20
     344:	b9 01       	movw	r22, r18
     346:	2a e0       	ldi	r18, 0x0A	; 10
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	b2 d6       	rcall	.+3428   	; 0x10b4 <__udivmodsi4>
     350:	e1 e0       	ldi	r30, 0x01	; 1
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	ec 0f       	add	r30, r28
     356:	fd 1f       	adc	r31, r29
     358:	e6 0f       	add	r30, r22
     35a:	f7 1f       	adc	r31, r23
     35c:	80 81       	ld	r24, Z
     35e:	85 bb       	out	0x15, r24	; 21
     360:	0f c0       	rjmp	.+30     	; 0x380 <fnd_display+0x152>
     362:	8f ee       	ldi	r24, 0xEF	; 239
		break;

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     364:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     368:	da 01       	movw	r26, r20
		
		FND_DATA_PORT = fnd_font[*run_state+11]; // 10단위 분
     36a:	ed 91       	ld	r30, X+
     36c:	fc 91       	ld	r31, X
     36e:	3b 96       	adiw	r30, 0x0b	; 11
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	8c 0f       	add	r24, r28
     376:	9d 1f       	adc	r25, r29
     378:	e8 0f       	add	r30, r24
     37a:	f9 1f       	adc	r31, r25
     37c:	80 81       	ld	r24, Z
     37e:	85 bb       	out	0x15, r24	; 21
     380:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <digit_select.1776>
		break;
	}
	digit_select++;
     384:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <digit_select.1776+0x1>
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	83 70       	andi	r24, 0x03	; 3
	digit_select %= 4; //다음 표시할 자리수 선택
     38c:	90 78       	andi	r25, 0x80	; 128
     38e:	99 23       	and	r25, r25
     390:	24 f4       	brge	.+8      	; 0x39a <fnd_display+0x16c>
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	8c 6f       	ori	r24, 0xFC	; 252
     396:	9f 6f       	ori	r25, 0xFF	; 255
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <digit_select.1776+0x1>
     39e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <digit_select.1776>
     3a2:	2f 96       	adiw	r28, 0x0f	; 15
}
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <init_led>:

void init_led(void);

void init_led(void)
{
	AUTO_RUN_LED_PORT_DDR |= 1 << AUTO_RUN_LED_PIN;
     3b4:	e4 e6       	ldi	r30, 0x64	; 100
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	88 60       	ori	r24, 0x08	; 8
     3bc:	80 83       	st	Z, r24
     3be:	08 95       	ret

000003c0 <auto_mode>:
{
	if (button0_state)
	{
		/// 자율주행 코드
	}
	func_state = MANUAL_MODE;
     3c0:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <func_state+0x1>
     3c4:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <func_state>
     3c8:	08 95       	ret

000003ca <manual_mode>:
	//sei();    // 전역적(대문)으로 interrupt 허용
}

void manual_mode(void)
{
	switch (bt_data)
     3ca:	e0 91 ba 07 	lds	r30, 0x07BA	; 0x8007ba <bt_data>
     3ce:	8e 2f       	mov	r24, r30
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	fc 01       	movw	r30, r24
     3d4:	e2 54       	subi	r30, 0x42	; 66
     3d6:	f1 09       	sbc	r31, r1
     3d8:	e2 33       	cpi	r30, 0x32	; 50
     3da:	f1 05       	cpc	r31, r1
     3dc:	a0 f4       	brcc	.+40     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3de:	ea 5b       	subi	r30, 0xBA	; 186
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	8a c6       	rjmp	.+3348   	; 0x10f8 <__tablejump2__>
	{
		case 'F':
		case 'f':
			forward(500);
     3e4:	84 ef       	ldi	r24, 0xF4	; 244
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	c0 d0       	rcall	.+384    	; 0x56a <forward>
			break;
     3ea:	0d c0       	rjmp	.+26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			
		case 'B':
		case 'b':
			backward(500);
     3ec:	84 ef       	ldi	r24, 0xF4	; 244
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	ca d0       	rcall	.+404    	; 0x586 <backward>
			break;
			
		case 'L':
		case 'l':
			turn_left(700);
     3f2:	09 c0       	rjmp	.+18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3f4:	8c eb       	ldi	r24, 0xBC	; 188
     3f6:	92 e0       	ldi	r25, 0x02	; 2
			break;
     3f8:	d4 d0       	rcall	.+424    	; 0x5a2 <turn_left>
			
		case 'R':
		case 'r':
			turn_right(700);
     3fa:	05 c0       	rjmp	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fc:	8c eb       	ldi	r24, 0xBC	; 188
     3fe:	92 e0       	ldi	r25, 0x02	; 2
			break;
     400:	de d0       	rcall	.+444    	; 0x5be <turn_right>
			
		case 'S':
		case 's':
			stop();
     402:	01 c0       	rjmp	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	ea d0       	rcall	.+468    	; 0x5da <stop>
			break;
			
		default:
			break;
	}
	func_state = DISTANCE_CHECK;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <func_state+0x1>
     40e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <func_state>
     412:	08 95       	ret

00000414 <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     414:	1f 92       	push	r1
     416:	0f 92       	push	r0
     418:	0f b6       	in	r0, 0x3f	; 63
     41a:	0f 92       	push	r0
     41c:	11 24       	eor	r1, r1
     41e:	8f 93       	push	r24
     420:	9f 93       	push	r25
     422:	af 93       	push	r26
     424:	bf 93       	push	r27
	TCNT0 = 6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
     426:	86 e0       	ldi	r24, 0x06	; 6
     428:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
     42a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <msec_count>
     42e:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <msec_count+0x1>
     432:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <msec_count+0x2>
     436:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <msec_count+0x3>
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	a1 1d       	adc	r26, r1
     43e:	b1 1d       	adc	r27, r1
     440:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <msec_count>
     444:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <msec_count+0x1>
     448:	a0 93 6e 01 	sts	0x016E, r26	; 0x80016e <msec_count+0x2>
     44c:	b0 93 6f 01 	sts	0x016F, r27	; 0x80016f <msec_count+0x3>
	fnd_refreshrate++;   // fnd 잔상효과 유지 하기 위한 timer 2ms
     450:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <fnd_refreshrate>
     454:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <fnd_refreshrate+0x1>
     458:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <fnd_refreshrate+0x2>
     45c:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <fnd_refreshrate+0x3>
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	a1 1d       	adc	r26, r1
     464:	b1 1d       	adc	r27, r1
     466:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <fnd_refreshrate>
     46a:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <fnd_refreshrate+0x1>
     46e:	a0 93 6a 01 	sts	0x016A, r26	; 0x80016a <fnd_refreshrate+0x2>
     472:	b0 93 6b 01 	sts	0x016B, r27	; 0x80016b <fnd_refreshrate+0x3>
	ultrasonic_check_timer++;
     476:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ultrasonic_check_timer>
     47a:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <ultrasonic_check_timer+0x1>
     47e:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <ultrasonic_check_timer+0x2>
     482:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <ultrasonic_check_timer+0x3>
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	a1 1d       	adc	r26, r1
     48a:	b1 1d       	adc	r27, r1
     48c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <ultrasonic_check_timer>
     490:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <ultrasonic_check_timer+0x1>
     494:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <ultrasonic_check_timer+0x2>
     498:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <ultrasonic_check_timer+0x3>
	read_distance++;
     49c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <read_distance>
     4a0:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <read_distance+0x1>
     4a4:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <read_distance+0x2>
     4a8:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <read_distance+0x3>
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	a1 1d       	adc	r26, r1
     4b0:	b1 1d       	adc	r27, r1
     4b2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <read_distance>
     4b6:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <read_distance+0x1>
     4ba:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <read_distance+0x2>
     4be:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <read_distance+0x3>
}
     4c2:	bf 91       	pop	r27
     4c4:	af 91       	pop	r26
     4c6:	9f 91       	pop	r25
     4c8:	8f 91       	pop	r24
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	1f 90       	pop	r1
     4d2:	18 95       	reti

000004d4 <init_timer0>:
	// 1. 분주비 계산
	// 16000000HZ/64 ==> 250,000HZ
	// 2. T(주기) 1가 잡아 먹는 시간 : 1/f = 1/250,000 ==> 0.000004sec(4us) : 0.004ms
	// 3. 8bit timer OV(OVflow) : 0.004ms x 256 = 0.001024sec --> 1.024ms
	// 그러면 정확히 1ms 를 재고 싶다면 0.004ms x 250개 = 0.001sec ==> 1ms
	TCNT0 = 6;   // TCNT : 0~256 ==> 1ms마다 TIMER0_OVF_vect로 진입한다.
     4d4:	86 e0       	ldi	r24, 0x06	; 6
     4d6:	82 bf       	out	0x32, r24	; 50
	// TCNT0 = 6로 설정을 한이유: 6~256 : 250개를 count(정확히 1MS를맞추기 위해서)
	//
	// 4 분주비를 설정 (250khz)
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     4d8:	83 b7       	in	r24, 0x33	; 51
     4da:	84 60       	ori	r24, 0x04	; 4
     4dc:	83 bf       	out	0x33, r24	; 51
	// 5. TIMER0 OVERFLOW를 허용(enable)
	TIMSK |= 1 << TOIE0;  // TIMSK |= 0x01;
     4de:	87 b7       	in	r24, 0x37	; 55
     4e0:	81 60       	ori	r24, 0x01	; 1
     4e2:	87 bf       	out	0x37, r24	; 55
     4e4:	08 95       	ret

000004e6 <main>:
	read_distance++;
}

int main(void)
{
	init_led();
     4e6:	66 df       	rcall	.-308    	; 0x3b4 <init_led>
	init_fnd();
     4e8:	99 de       	rcall	.-718    	; 0x21c <init_fnd>
	init_button();
     4ea:	21 de       	rcall	.-958    	; 0x12e <init_button>
	init_timer0();
     4ec:	f3 df       	rcall	.-26     	; 0x4d4 <init_timer0>
	init_uart0();
     4ee:	1f d2       	rcall	.+1086   	; 0x92e <init_uart0>
	init_uart1();
     4f0:	60 d2       	rcall	.+1216   	; 0x9b2 <init_uart1>
     4f2:	16 d0       	rcall	.+44     	; 0x520 <init_n289n>
	init_n289n();
     4f4:	26 d0       	rcall	.+76     	; 0x542 <init_timer1_pwm>
     4f6:	59 d3       	rcall	.+1714   	; 0xbaa <init_ultrasonic>
	init_timer1_pwm();
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	91 e0       	ldi	r25, 0x01	; 1
	init_ultrasonic(); // timer 3
     4fc:	90 93 be 07 	sts	0x07BE, r25	; 0x8007be <__iob+0x3>
	

	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     500:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <__iob+0x2>
     504:	78 94       	sei
     506:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <func_state>
     50a:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <func_state+0x1>
	
	sei();     // 전역적으로 interrupt 허용

	while (1)
	{
		pfunc[func_state] ();
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	e2 5f       	subi	r30, 0xF2	; 242
     514:	fe 4f       	sbci	r31, 0xFE	; 254
     516:	01 90       	ld	r0, Z+
     518:	f0 81       	ld	r31, Z
     51a:	e0 2d       	mov	r30, r0
     51c:	09 95       	icall
     51e:	f3 cf       	rjmp	.-26     	; 0x506 <main+0x20>

00000520 <init_n289n>:
	   1         1   : STOP
*/

void init_n289n(void)
{
	MOTOR_PWM_DDR |= 1 << MOTOR_LEFT_PORT_DDR | 1 << MOTOR_RIGHT_PORT_DDR; // DDR설정
     520:	87 b3       	in	r24, 0x17	; 23
     522:	80 66       	ori	r24, 0x60	; 96
     524:	87 bb       	out	0x17, r24	; 23
	MOTOR_DRIVER_DIRECTION_PORT_DDR |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3; // PF1234 출력으로 설정
     526:	e1 e6       	ldi	r30, 0x61	; 97
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	80 81       	ld	r24, Z
     52c:	8f 60       	ori	r24, 0x0F	; 15
     52e:	80 83       	st	Z, r24
	
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     530:	e2 e6       	ldi	r30, 0x62	; 98
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	80 81       	ld	r24, Z
     536:	80 7f       	andi	r24, 0xF0	; 240
     538:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 2; // 자동차를 전진모드로 
     53a:	80 81       	ld	r24, Z
     53c:	85 60       	ori	r24, 0x05	; 5
     53e:	80 83       	st	Z, r24
     540:	08 95       	ret

00000542 <init_timer1_pwm>:
	// 분주비 : 64 16000000HZ/64 ==> 250000HZ(250kHZ)
	// T=1/f 1/250000HZ ==> 0.000004sec (4us)
	// 250000HZ에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//              127                             : 0.5ms
	//              0x3ff(1023) --> 4ms
	TCCR1B |= 1 << CS11 | 1 << CS10;   // 분주비 64  P318 표14-1
     542:	8e b5       	in	r24, 0x2e	; 46
     544:	83 60       	ori	r24, 0x03	; 3
     546:	8e bd       	out	0x2e, r24	; 46
	
	// 모드 14: 고속 PWM timer1사용  (P327 표14-5)
	TCCR1A |= 1 << WGM11;   // TOP --> ICR1에 설정
     548:	8f b5       	in	r24, 0x2f	; 47
     54a:	82 60       	ori	r24, 0x02	; 2
     54c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1 << WGM13 | 1 << WGM12;
     54e:	8e b5       	in	r24, 0x2e	; 46
     550:	88 61       	ori	r24, 0x18	; 24
     552:	8e bd       	out	0x2e, r24	; 46
	
	// 비반전모드 top: ICR1 비교일치값(PWM) 지정 : OCR1A, OCR1B P350 표15-7
	// 비교일치 발생시 OCR1A, OCR1B의 출력 핀은 LOW로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR1A |= 1 << COM1A1;
     554:	8f b5       	in	r24, 0x2f	; 47
     556:	80 68       	ori	r24, 0x80	; 128
     558:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= 1 << COM1B1;
     55a:	8f b5       	in	r24, 0x2f	; 47
     55c:	80 62       	ori	r24, 0x20	; 32
     55e:	8f bd       	out	0x2f, r24	; 47

	ICR1 = 0x3ff;  // 1023 ==> 4ms TOP : PWM 값
     560:	8f ef       	ldi	r24, 0xFF	; 255
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	97 bd       	out	0x27, r25	; 39
     566:	86 bd       	out	0x26, r24	; 38
     568:	08 95       	ret

0000056a <forward>:
}

///////////////////////////////           수동모드          //////////////////////////////////////
void forward(int speed)
{
     56a:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     56c:	e2 e6       	ldi	r30, 0x62	; 98
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	90 81       	ld	r25, Z
     572:	90 7f       	andi	r25, 0xF0	; 240
     574:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     576:	90 81       	ld	r25, Z
     578:	95 60       	ori	r25, 0x05	; 5
     57a:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     57c:	3b bd       	out	0x2b, r19	; 43
     57e:	2a bd       	out	0x2a, r18	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     580:	39 bd       	out	0x29, r19	; 41
     582:	28 bd       	out	0x28, r18	; 40
     584:	08 95       	ret

00000586 <backward>:
}

void backward(int speed)
{
     586:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     588:	e2 e6       	ldi	r30, 0x62	; 98
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	90 81       	ld	r25, Z
     58e:	90 7f       	andi	r25, 0xF0	; 240
     590:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 3 | 1 << 1;  // 1010 후진 모드
     592:	90 81       	ld	r25, Z
     594:	9a 60       	ori	r25, 0x0A	; 10
     596:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     598:	3b bd       	out	0x2b, r19	; 43
     59a:	2a bd       	out	0x2a, r18	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     59c:	39 bd       	out	0x29, r19	; 41
     59e:	28 bd       	out	0x28, r18	; 40
     5a0:	08 95       	ret

000005a2 <turn_left>:
}

void turn_left(int speed)
{
     5a2:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     5a4:	e2 e6       	ldi	r30, 0x62	; 98
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	90 81       	ld	r25, Z
     5aa:	90 7f       	andi	r25, 0xF0	; 240
     5ac:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     5ae:	90 81       	ld	r25, Z
     5b0:	95 60       	ori	r25, 0x05	; 5
     5b2:	90 83       	st	Z, r25
	
	OCR1A = 0;  // PB5 PWM 출력 port left
     5b4:	1b bc       	out	0x2b, r1	; 43
     5b6:	1a bc       	out	0x2a, r1	; 42
	OCR1B = speed;  // PB6 PWM 출력 port right
     5b8:	39 bd       	out	0x29, r19	; 41
     5ba:	28 bd       	out	0x28, r18	; 40
     5bc:	08 95       	ret

000005be <turn_right>:
}

void turn_right(int speed)
{
     5be:	9c 01       	movw	r18, r24
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     5c0:	e2 e6       	ldi	r30, 0x62	; 98
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	90 81       	ld	r25, Z
     5c6:	90 7f       	andi	r25, 0xF0	; 240
     5c8:	90 83       	st	Z, r25
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 2 | 1 << 0;  // 전진 모드로 설정
     5ca:	90 81       	ld	r25, Z
     5cc:	95 60       	ori	r25, 0x05	; 5
     5ce:	90 83       	st	Z, r25
	
	OCR1A = speed;  // PB5 PWM 출력 port left
     5d0:	3b bd       	out	0x2b, r19	; 43
     5d2:	2a bd       	out	0x2a, r18	; 42
	OCR1B = 0;  // PB6 PWM 출력 port right
     5d4:	19 bc       	out	0x29, r1	; 41
     5d6:	18 bc       	out	0x28, r1	; 40
     5d8:	08 95       	ret

000005da <stop>:
}

void stop(void)
{
	MOTOR_DRIVER_DIRECTION_PORT &= ~(1 << 0 | 1 << 1 | 1 << 2 | 1 << 3);
     5da:	e2 e6       	ldi	r30, 0x62	; 98
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	80 7f       	andi	r24, 0xF0	; 240
     5e2:	80 83       	st	Z, r24
	MOTOR_DRIVER_DIRECTION_PORT |= 1 << 0 | 1 << 1 | 1 << 2 | 1 << 3;  // stop 모드로 설정
     5e4:	80 81       	ld	r24, Z
     5e6:	8f 60       	ori	r24, 0x0F	; 15
     5e8:	80 83       	st	Z, r24
	
	OCR1A = 0;  // PB5 PWM 출력 port left
     5ea:	1b bc       	out	0x2b, r1	; 43
     5ec:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;  // PB6 PWM 출력 port right
     5ee:	19 bc       	out	0x29, r1	; 41
     5f0:	18 bc       	out	0x28, r1	; 40
     5f2:	08 95       	ret

000005f4 <auto_start>:
}
////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////         자동모드            //////////////////////////////////
void auto_start(void)
{
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <auto_start+0x6>
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <auto_start+0x8>
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <auto_start+0xa>
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
	int run_state;
	sec_count = 120;
     602:	88 e7       	ldi	r24, 0x78	; 120
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	a0 e0       	ldi	r26, 0x00	; 0
     608:	b0 e0       	ldi	r27, 0x00	; 0
     60a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <sec_count>
     60e:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <sec_count+0x1>
     612:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <sec_count+0x2>
     616:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <sec_count+0x3>

	while(sec_count > 0)
     61a:	f5 c0       	rjmp	.+490    	; 0x806 <auto_start+0x212>
	{
		ultrasonic_trigger();
     61c:	f6 d2       	rcall	.+1516   	; 0xc0a <ultrasonic_trigger>
		if (msec_count >= 1000)
     61e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <msec_count>
     622:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <msec_count+0x1>
     626:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <msec_count+0x2>
     62a:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <msec_count+0x3>
     62e:	88 3e       	cpi	r24, 0xE8	; 232
     630:	93 40       	sbci	r25, 0x03	; 3
     632:	a1 05       	cpc	r26, r1
     634:	b1 05       	cpc	r27, r1
     636:	d8 f0       	brcs	.+54     	; 0x66e <auto_start+0x7a>
		{
			msec_count = 0;
     638:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <msec_count>
     63c:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <msec_count+0x1>
     640:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <msec_count+0x2>
     644:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <msec_count+0x3>
			sec_count--;
     648:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <sec_count>
     64c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <sec_count+0x1>
     650:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <sec_count+0x2>
     654:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <sec_count+0x3>
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	a1 09       	sbc	r26, r1
     65c:	b1 09       	sbc	r27, r1
     65e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <sec_count>
     662:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <sec_count+0x1>
     666:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <sec_count+0x2>
     66a:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <sec_count+0x3>
		} // 1초씩 감소

		if (fnd_refreshrate >= 2)
     66e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <fnd_refreshrate>
     672:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <fnd_refreshrate+0x1>
     676:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <fnd_refreshrate+0x2>
     67a:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <fnd_refreshrate+0x3>
     67e:	02 97       	sbiw	r24, 0x02	; 2
     680:	a1 05       	cpc	r26, r1
     682:	b1 05       	cpc	r27, r1
     684:	58 f0       	brcs	.+22     	; 0x69c <auto_start+0xa8>
		{
			fnd_refreshrate = 0;
     686:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <fnd_refreshrate>
     68a:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <fnd_refreshrate+0x1>
     68e:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <fnd_refreshrate+0x2>
     692:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <fnd_refreshrate+0x3>
			fnd_display(&run_state);
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	c9 dd       	rcall	.-1134   	; 0x22e <fnd_display>
		} // fnd 표시

		volatile int gap1= ultrasonic_right_distance - ultrasonic_left_distance;
     69c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_right_distance>
     6a0:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     6a4:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <ultrasonic_left_distance>
     6a8:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     6ac:	82 1b       	sub	r24, r18
     6ae:	93 0b       	sbc	r25, r19
     6b0:	9e 83       	std	Y+6, r25	; 0x06
     6b2:	8d 83       	std	Y+5, r24	; 0x05
		volatile int gap2= ultrasonic_left_distance - ultrasonic_right_distance;
     6b4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_left_distance>
     6b8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     6bc:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <ultrasonic_right_distance>
     6c0:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     6c4:	82 1b       	sub	r24, r18
     6c6:	93 0b       	sbc	r25, r19
     6c8:	9c 83       	std	Y+4, r25	; 0x04
     6ca:	8b 83       	std	Y+3, r24	; 0x03

		if(gap1<2 && gap2 <2 && ultrasonic_center_distance >= 10)
     6cc:	8d 81       	ldd	r24, Y+5	; 0x05
     6ce:	9e 81       	ldd	r25, Y+6	; 0x06
     6d0:	02 97       	sbiw	r24, 0x02	; 2
     6d2:	84 f4       	brge	.+32     	; 0x6f4 <auto_start+0x100>
     6d4:	8b 81       	ldd	r24, Y+3	; 0x03
     6d6:	9c 81       	ldd	r25, Y+4	; 0x04
     6d8:	02 97       	sbiw	r24, 0x02	; 2
     6da:	64 f4       	brge	.+24     	; 0x6f4 <auto_start+0x100>
     6dc:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ultrasonic_center_distance>
     6e0:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ultrasonic_center_distance+0x1>
     6e4:	0a 97       	sbiw	r24, 0x0a	; 10
     6e6:	34 f0       	brlt	.+12     	; 0x6f4 <auto_start+0x100>
		{
			run_state = FORWARD;
     6e8:	1a 82       	std	Y+2, r1	; 0x02
     6ea:	19 82       	std	Y+1, r1	; 0x01
			forward(350);
     6ec:	8e e5       	ldi	r24, 0x5E	; 94
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	3c df       	rcall	.-392    	; 0x56a <forward>
     6f2:	89 c0       	rjmp	.+274    	; 0x806 <auto_start+0x212>
		}
		
		else if (gap2 <= 4 && gap1 <= 4)
     6f4:	8b 81       	ldd	r24, Y+3	; 0x03
     6f6:	9c 81       	ldd	r25, Y+4	; 0x04
     6f8:	05 97       	sbiw	r24, 0x05	; 5
     6fa:	54 f4       	brge	.+20     	; 0x710 <auto_start+0x11c>
     6fc:	8d 81       	ldd	r24, Y+5	; 0x05
     6fe:	9e 81       	ldd	r25, Y+6	; 0x06
     700:	05 97       	sbiw	r24, 0x05	; 5
     702:	34 f4       	brge	.+12     	; 0x710 <auto_start+0x11c>
		{
			run_state = FORWARD;
     704:	1a 82       	std	Y+2, r1	; 0x02
			forward(350);
     706:	19 82       	std	Y+1, r1	; 0x01
     708:	8e e5       	ldi	r24, 0x5E	; 94
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	2e df       	rcall	.-420    	; 0x56a <forward>
     70e:	7b c0       	rjmp	.+246    	; 0x806 <auto_start+0x212>
		}
		else if (ultrasonic_right_distance <= 3)
     710:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_right_distance>
     714:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     718:	04 97       	sbiw	r24, 0x04	; 4
     71a:	44 f4       	brge	.+16     	; 0x72c <auto_start+0x138>
		{
			run_state = BACKWARD;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	9a 83       	std	Y+2, r25	; 0x02
			backward(400);
     722:	89 83       	std	Y+1, r24	; 0x01
     724:	80 e9       	ldi	r24, 0x90	; 144
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	2e df       	rcall	.-420    	; 0x586 <backward>
     72a:	6d c0       	rjmp	.+218    	; 0x806 <auto_start+0x212>
		}
		else if (ultrasonic_left_distance <= 3)
     72c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_left_distance>
     730:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     734:	04 97       	sbiw	r24, 0x04	; 4
     736:	44 f4       	brge	.+16     	; 0x748 <auto_start+0x154>
		{
			run_state = BACKWARD;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	9a 83       	std	Y+2, r25	; 0x02
			backward(400);
     73e:	89 83       	std	Y+1, r24	; 0x01
     740:	80 e9       	ldi	r24, 0x90	; 144
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	20 df       	rcall	.-448    	; 0x586 <backward>
     746:	5f c0       	rjmp	.+190    	; 0x806 <auto_start+0x212>
		}
		else if(ultrasonic_center_distance <= 3)
     748:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ultrasonic_center_distance>
     74c:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ultrasonic_center_distance+0x1>
     750:	04 97       	sbiw	r24, 0x04	; 4
     752:	44 f4       	brge	.+16     	; 0x764 <auto_start+0x170>
		{
			run_state = BACKWARD;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	9a 83       	std	Y+2, r25	; 0x02
			backward(400);
     75a:	89 83       	std	Y+1, r24	; 0x01
     75c:	80 e9       	ldi	r24, 0x90	; 144
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	12 df       	rcall	.-476    	; 0x586 <backward>
     762:	51 c0       	rjmp	.+162    	; 0x806 <auto_start+0x212>
		}
		
		else if(gap1 <= 4 && ultrasonic_center_distance <= 7 && ultrasonic_right_distance > 3)
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	9e 81       	ldd	r25, Y+6	; 0x06
     768:	05 97       	sbiw	r24, 0x05	; 5
     76a:	a4 f4       	brge	.+40     	; 0x794 <auto_start+0x1a0>
     76c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ultrasonic_center_distance>
     770:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ultrasonic_center_distance+0x1>
     774:	08 97       	sbiw	r24, 0x08	; 8
     776:	74 f4       	brge	.+28     	; 0x794 <auto_start+0x1a0>
     778:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_right_distance>
     77c:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     780:	04 97       	sbiw	r24, 0x04	; 4
		{
			run_state = TURN_LEFT;
     782:	44 f0       	brlt	.+16     	; 0x794 <auto_start+0x1a0>
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	9a 83       	std	Y+2, r25	; 0x02
			turn_left(400);
     78a:	89 83       	std	Y+1, r24	; 0x01
     78c:	80 e9       	ldi	r24, 0x90	; 144
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	08 df       	rcall	.-496    	; 0x5a2 <turn_left>
     792:	39 c0       	rjmp	.+114    	; 0x806 <auto_start+0x212>
		}
		else if(gap2 <= 4 && ultrasonic_center_distance <= 7 && ultrasonic_left_distance > 3)
     794:	8b 81       	ldd	r24, Y+3	; 0x03
     796:	9c 81       	ldd	r25, Y+4	; 0x04
     798:	05 97       	sbiw	r24, 0x05	; 5
     79a:	a4 f4       	brge	.+40     	; 0x7c4 <auto_start+0x1d0>
     79c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ultrasonic_center_distance>
     7a0:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ultrasonic_center_distance+0x1>
     7a4:	08 97       	sbiw	r24, 0x08	; 8
     7a6:	74 f4       	brge	.+28     	; 0x7c4 <auto_start+0x1d0>
     7a8:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_left_distance>
     7ac:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     7b0:	04 97       	sbiw	r24, 0x04	; 4
		{
			run_state = TURN_RIGHT;
     7b2:	44 f0       	brlt	.+16     	; 0x7c4 <auto_start+0x1d0>
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	9a 83       	std	Y+2, r25	; 0x02
			turn_right(400);
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	80 e9       	ldi	r24, 0x90	; 144
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	fe de       	rcall	.-516    	; 0x5be <turn_right>
     7c2:	21 c0       	rjmp	.+66     	; 0x806 <auto_start+0x212>
		}
		else if (ultrasonic_right_distance <= 15 )
     7c4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_right_distance>
     7c8:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     7cc:	40 97       	sbiw	r24, 0x10	; 16
		{
			run_state = TURN_LEFT;
     7ce:	44 f4       	brge	.+16     	; 0x7e0 <auto_start+0x1ec>
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	9a 83       	std	Y+2, r25	; 0x02
			turn_left(400);
     7d6:	89 83       	std	Y+1, r24	; 0x01
     7d8:	80 e9       	ldi	r24, 0x90	; 144
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	e2 de       	rcall	.-572    	; 0x5a2 <turn_left>
     7de:	13 c0       	rjmp	.+38     	; 0x806 <auto_start+0x212>
		}
		else if (ultrasonic_left_distance <= 15 )
     7e0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_left_distance>
     7e4:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     7e8:	40 97       	sbiw	r24, 0x10	; 16
		{
			run_state = TURN_RIGHT;
     7ea:	44 f4       	brge	.+16     	; 0x7fc <auto_start+0x208>
     7ec:	83 e0       	ldi	r24, 0x03	; 3
     7ee:	90 e0       	ldi	r25, 0x00	; 0
			turn_right(400);
     7f0:	9a 83       	std	Y+2, r25	; 0x02
     7f2:	89 83       	std	Y+1, r24	; 0x01
     7f4:	80 e9       	ldi	r24, 0x90	; 144
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	e2 de       	rcall	.-572    	; 0x5be <turn_right>

		}
		else
		{
			run_state = FORWARD;
     7fa:	05 c0       	rjmp	.+10     	; 0x806 <auto_start+0x212>
     7fc:	1a 82       	std	Y+2, r1	; 0x02
			forward(350);
     7fe:	19 82       	std	Y+1, r1	; 0x01
     800:	8e e5       	ldi	r24, 0x5E	; 94
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	b2 de       	rcall	.-668    	; 0x56a <forward>
void auto_start(void)
{
	int run_state;
	sec_count = 120;

	while(sec_count > 0)
     806:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <sec_count>
     80a:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <sec_count+0x1>
     80e:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <sec_count+0x2>
     812:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <sec_count+0x3>
     816:	89 2b       	or	r24, r25
     818:	8a 2b       	or	r24, r26
     81a:	8b 2b       	or	r24, r27
     81c:	09 f0       	breq	.+2      	; 0x820 <auto_start+0x22c>
     81e:	fe ce       	rjmp	.-516    	; 0x61c <auto_start+0x28>
		{
			run_state = FORWARD;
			forward(350);
		}
	}
}
     820:	26 96       	adiw	r28, 0x06	; 6
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	de bf       	out	0x3e, r29	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <__vector_18>:

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     832:	1f 92       	push	r1
     834:	0f 92       	push	r0
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	0f 92       	push	r0
     83a:	11 24       	eor	r1, r1
     83c:	0b b6       	in	r0, 0x3b	; 59
     83e:	0f 92       	push	r0
     840:	2f 93       	push	r18
     842:	3f 93       	push	r19
     844:	4f 93       	push	r20
     846:	5f 93       	push	r21
     848:	6f 93       	push	r22
     84a:	7f 93       	push	r23
     84c:	8f 93       	push	r24
     84e:	9f 93       	push	r25
     850:	af 93       	push	r26
     852:	bf 93       	push	r27
     854:	ef 93       	push	r30
     856:	ff 93       	push	r31
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	1f 92       	push	r1
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     862:	8c b1       	in	r24, 0x0c	; 12
     864:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     866:	89 81       	ldd	r24, Y+1	; 0x01
     868:	8d 30       	cpi	r24, 0x0D	; 13
     86a:	19 f0       	breq	.+6      	; 0x872 <__vector_18+0x40>
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	8a 30       	cpi	r24, 0x0A	; 10
     870:	61 f5       	brne	.+88     	; 0x8ca <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     872:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <rear>
     876:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <rear+0x1>
     87a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <i.1878>
     87e:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <i.1878+0x1>
     882:	40 e5       	ldi	r20, 0x50	; 80
     884:	42 9f       	mul	r20, r18
     886:	f0 01       	movw	r30, r0
     888:	43 9f       	mul	r20, r19
     88a:	f0 0d       	add	r31, r0
     88c:	11 24       	eor	r1, r1
     88e:	e6 58       	subi	r30, 0x86	; 134
     890:	fe 4f       	sbci	r31, 0xFE	; 254
     892:	e8 0f       	add	r30, r24
     894:	f9 1f       	adc	r31, r25
     896:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     898:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <i.1878+0x1>
     89c:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <i.1878>
		rear++;
     8a0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rear>
     8a4:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <rear+0x1>
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <rear+0x1>
     8ae:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
     8b2:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rear>
     8b6:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <rear+0x1>
     8ba:	6a e0       	ldi	r22, 0x0A	; 10
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	e7 d3       	rcall	.+1998   	; 0x108e <__divmodhi4>
     8c0:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <rear+0x1>
     8c4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <rear>
     8c8:	1c c0       	rjmp	.+56     	; 0x902 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
     8ca:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <rear>
     8ce:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <rear+0x1>
     8d2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <i.1878>
     8d6:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <i.1878+0x1>
     8da:	9c 01       	movw	r18, r24
     8dc:	2f 5f       	subi	r18, 0xFF	; 255
     8de:	3f 4f       	sbci	r19, 0xFF	; 255
     8e0:	30 93 71 01 	sts	0x0171, r19	; 0x800171 <i.1878+0x1>
     8e4:	20 93 70 01 	sts	0x0170, r18	; 0x800170 <i.1878>
     8e8:	49 81       	ldd	r20, Y+1	; 0x01
     8ea:	50 e5       	ldi	r21, 0x50	; 80
     8ec:	56 9f       	mul	r21, r22
     8ee:	90 01       	movw	r18, r0
     8f0:	57 9f       	mul	r21, r23
     8f2:	30 0d       	add	r19, r0
     8f4:	11 24       	eor	r1, r1
     8f6:	26 58       	subi	r18, 0x86	; 134
     8f8:	3e 4f       	sbci	r19, 0xFE	; 254
     8fa:	f9 01       	movw	r30, r18
     8fc:	e8 0f       	add	r30, r24
     8fe:	f9 1f       	adc	r31, r25
     900:	40 83       	st	Z, r20
	}
		  
}
     902:	0f 90       	pop	r0
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	ff 91       	pop	r31
     90a:	ef 91       	pop	r30
     90c:	bf 91       	pop	r27
     90e:	af 91       	pop	r26
     910:	9f 91       	pop	r25
     912:	8f 91       	pop	r24
     914:	7f 91       	pop	r23
     916:	6f 91       	pop	r22
     918:	5f 91       	pop	r21
     91a:	4f 91       	pop	r20
     91c:	3f 91       	pop	r19
     91e:	2f 91       	pop	r18
     920:	0f 90       	pop	r0
     922:	0b be       	out	0x3b, r0	; 59
     924:	0f 90       	pop	r0
     926:	0f be       	out	0x3f, r0	; 63
     928:	0f 90       	pop	r0
     92a:	1f 90       	pop	r1
     92c:	18 95       	reti

0000092e <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
     92e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
     932:	8f ec       	ldi	r24, 0xCF	; 207
     934:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
     936:	8b b1       	in	r24, 0x0b	; 11
     938:	82 60       	ori	r24, 0x02	; 2
     93a:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     93c:	e5 e9       	ldi	r30, 0x95	; 149
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	86 60       	ori	r24, 0x06	; 6
     944:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     946:	8a b1       	in	r24, 0x0a	; 10
     948:	88 69       	ori	r24, 0x98	; 152
     94a:	8a b9       	out	0x0a, r24	; 10
     94c:	08 95       	ret

0000094e <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
     94e:	5d 9b       	sbis	0x0b, 5	; 11
     950:	fe cf       	rjmp	.-4      	; 0x94e <UART0_transmit>
		;   // no operation NOP
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
     952:	8c b9       	out	0x0c, r24	; 12
     954:	08 95       	ret

00000956 <__vector_30>:
volatile uint8_t bt_data;

extern void UART0_transmit();

ISR(USART1_RX_vect)
{
     956:	1f 92       	push	r1
     958:	0f 92       	push	r0
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	0f 92       	push	r0
     95e:	11 24       	eor	r1, r1
     960:	0b b6       	in	r0, 0x3b	; 59
     962:	0f 92       	push	r0
     964:	2f 93       	push	r18
     966:	3f 93       	push	r19
     968:	4f 93       	push	r20
     96a:	5f 93       	push	r21
     96c:	6f 93       	push	r22
     96e:	7f 93       	push	r23
     970:	8f 93       	push	r24
     972:	9f 93       	push	r25
     974:	af 93       	push	r26
     976:	bf 93       	push	r27
     978:	ef 93       	push	r30
     97a:	ff 93       	push	r31
	
	bt_data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
     97c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     980:	80 93 ba 07 	sts	0x07BA, r24	; 0x8007ba <bt_data>
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	UART0_transmit(bt_data); // BT로 들어온 char를 확인하기 위해 comport master로 출력
     984:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <bt_data>
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	e1 df       	rcall	.-62     	; 0x94e <UART0_transmit>
// 	{
// 		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
// 		rx1_buff[rear1][i++] = data;
// 	}
		  
}
     98c:	ff 91       	pop	r31
     98e:	ef 91       	pop	r30
     990:	bf 91       	pop	r27
     992:	af 91       	pop	r26
     994:	9f 91       	pop	r25
     996:	8f 91       	pop	r24
     998:	7f 91       	pop	r23
     99a:	6f 91       	pop	r22
     99c:	5f 91       	pop	r21
     99e:	4f 91       	pop	r20
     9a0:	3f 91       	pop	r19
     9a2:	2f 91       	pop	r18
     9a4:	0f 90       	pop	r0
     9a6:	0b be       	out	0x3b, r0	; 59
     9a8:	0f 90       	pop	r0
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	0f 90       	pop	r0
     9ae:	1f 90       	pop	r1
     9b0:	18 95       	reti

000009b2 <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
     9b2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
     9b6:	8f ec       	ldi	r24, 0xCF	; 207
     9b8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
     9bc:	eb e9       	ldi	r30, 0x9B	; 155
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	82 60       	ori	r24, 0x02	; 2
     9c4:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     9c6:	ed e9       	ldi	r30, 0x9D	; 157
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	86 60       	ori	r24, 0x06	; 6
     9ce:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     9d0:	ea e9       	ldi	r30, 0x9A	; 154
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
     9d6:	88 69       	ori	r24, 0x98	; 152
     9d8:	80 83       	st	Z, r24
     9da:	08 95       	ret

000009dc <__vector_5>:
volatile int ultrasonic_right_distance = 0;

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect) // LEFT
{
     9dc:	1f 92       	push	r1
     9de:	0f 92       	push	r0
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	0f 92       	push	r0
     9e4:	11 24       	eor	r1, r1
     9e6:	0b b6       	in	r0, 0x3b	; 59
     9e8:	0f 92       	push	r0
     9ea:	2f 93       	push	r18
     9ec:	3f 93       	push	r19
     9ee:	4f 93       	push	r20
     9f0:	5f 93       	push	r21
     9f2:	6f 93       	push	r22
     9f4:	7f 93       	push	r23
     9f6:	8f 93       	push	r24
     9f8:	9f 93       	push	r25
     9fa:	af 93       	push	r26
     9fc:	bf 93       	push	r27
     9fe:	ef 93       	push	r30
     a00:	ff 93       	push	r31
   // 1. 상승 edge
   if (ECHO_PIN_LEFT & (1 << ECHO_LEFT))
     a02:	0c 9b       	sbis	0x01, 4	; 1
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <__vector_5+0x34>
   {
      TCNT3 = 0;
     a06:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a0a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a0e:	20 c0       	rjmp	.+64     	; 0xa50 <__vector_5+0x74>
   }
   // 2. 하강 edge
   else
   {
      // ECHO 핀에 들어온 펄스 길이를 us로 환산
      ultrasonic_left_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     a10:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a14:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	47 d2       	rcall	.+1166   	; 0xeac <__floatunsisf>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	34 e2       	ldi	r19, 0x24	; 36
     a22:	44 e7       	ldi	r20, 0x74	; 116
     a24:	59 e4       	ldi	r21, 0x49	; 73
     a26:	d0 d2       	rcall	.+1440   	; 0xfc8 <__mulsf3>
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	40 e8       	ldi	r20, 0x80	; 128
     a2e:	54 e4       	ldi	r21, 0x44	; 68
     a30:	cb d2       	rcall	.+1430   	; 0xfc8 <__mulsf3>
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	34 e2       	ldi	r19, 0x24	; 36
     a36:	44 e7       	ldi	r20, 0x74	; 116
     a38:	5b e4       	ldi	r21, 0x4B	; 75
     a3a:	9f d1       	rcall	.+830    	; 0xd7a <__divsf3>
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	48 e6       	ldi	r20, 0x68	; 104
     a42:	52 e4       	ldi	r21, 0x42	; 66
     a44:	9a d1       	rcall	.+820    	; 0xd7a <__divsf3>
     a46:	01 d2       	rcall	.+1026   	; 0xe4a <__fixsfsi>
     a48:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <ultrasonic_left_distance+0x1>
     a4c:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <ultrasonic_left_distance>
      // 15.625khz의 1주기가 64us이다.
      // 64us * 10 == 640us
      // 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
      // sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
   }
}
     a50:	ff 91       	pop	r31
     a52:	ef 91       	pop	r30
     a54:	bf 91       	pop	r27
     a56:	af 91       	pop	r26
     a58:	9f 91       	pop	r25
     a5a:	8f 91       	pop	r24
     a5c:	7f 91       	pop	r23
     a5e:	6f 91       	pop	r22
     a60:	5f 91       	pop	r21
     a62:	4f 91       	pop	r20
     a64:	3f 91       	pop	r19
     a66:	2f 91       	pop	r18
     a68:	0f 90       	pop	r0
     a6a:	0b be       	out	0x3b, r0	; 59
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	0f 90       	pop	r0
     a72:	1f 90       	pop	r1
     a74:	18 95       	reti

00000a76 <__vector_6>:

ISR(INT5_vect) // CENTER
{
     a76:	1f 92       	push	r1
     a78:	0f 92       	push	r0
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	0f 92       	push	r0
     a7e:	11 24       	eor	r1, r1
     a80:	0b b6       	in	r0, 0x3b	; 59
     a82:	0f 92       	push	r0
     a84:	2f 93       	push	r18
     a86:	3f 93       	push	r19
     a88:	4f 93       	push	r20
     a8a:	5f 93       	push	r21
     a8c:	6f 93       	push	r22
     a8e:	7f 93       	push	r23
     a90:	8f 93       	push	r24
     a92:	9f 93       	push	r25
     a94:	af 93       	push	r26
     a96:	bf 93       	push	r27
     a98:	ef 93       	push	r30
     a9a:	ff 93       	push	r31
   // 1. 상승 edge
   if (ECHO_PIN_CENTER & (1 << ECHO_CENTER))
     a9c:	0d 9b       	sbis	0x01, 5	; 1
     a9e:	05 c0       	rjmp	.+10     	; 0xaaa <__vector_6+0x34>
   {
      TCNT3 = 0;
     aa0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     aa4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     aa8:	20 c0       	rjmp	.+64     	; 0xaea <__vector_6+0x74>
   }
   // 2. 하강 edge
   else
   {
      // ECHO 핀에 들어온 펄스 길이를 us로 환산
      ultrasonic_center_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     aaa:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     aae:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	fa d1       	rcall	.+1012   	; 0xeac <__floatunsisf>
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	34 e2       	ldi	r19, 0x24	; 36
     abc:	44 e7       	ldi	r20, 0x74	; 116
     abe:	59 e4       	ldi	r21, 0x49	; 73
     ac0:	83 d2       	rcall	.+1286   	; 0xfc8 <__mulsf3>
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e8       	ldi	r20, 0x80	; 128
     ac8:	54 e4       	ldi	r21, 0x44	; 68
     aca:	7e d2       	rcall	.+1276   	; 0xfc8 <__mulsf3>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	34 e2       	ldi	r19, 0x24	; 36
     ad0:	44 e7       	ldi	r20, 0x74	; 116
     ad2:	5b e4       	ldi	r21, 0x4B	; 75
     ad4:	52 d1       	rcall	.+676    	; 0xd7a <__divsf3>
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	48 e6       	ldi	r20, 0x68	; 104
     adc:	52 e4       	ldi	r21, 0x42	; 66
     ade:	4d d1       	rcall	.+666    	; 0xd7a <__divsf3>
     ae0:	b4 d1       	rcall	.+872    	; 0xe4a <__fixsfsi>
     ae2:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <ultrasonic_center_distance+0x1>
     ae6:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <ultrasonic_center_distance>
      // 15.625khz의 1주기가 64us이다.
      // 64us * 10 == 640us
      // 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
      // sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
   }
}
     aea:	ff 91       	pop	r31
     aec:	ef 91       	pop	r30
     aee:	bf 91       	pop	r27
     af0:	af 91       	pop	r26
     af2:	9f 91       	pop	r25
     af4:	8f 91       	pop	r24
     af6:	7f 91       	pop	r23
     af8:	6f 91       	pop	r22
     afa:	5f 91       	pop	r21
     afc:	4f 91       	pop	r20
     afe:	3f 91       	pop	r19
     b00:	2f 91       	pop	r18
     b02:	0f 90       	pop	r0
     b04:	0b be       	out	0x3b, r0	; 59
     b06:	0f 90       	pop	r0
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	0f 90       	pop	r0
     b0c:	1f 90       	pop	r1
     b0e:	18 95       	reti

00000b10 <__vector_7>:

ISR(INT6_vect) // RIGHT
{
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
     b1a:	0b b6       	in	r0, 0x3b	; 59
     b1c:	0f 92       	push	r0
     b1e:	2f 93       	push	r18
     b20:	3f 93       	push	r19
     b22:	4f 93       	push	r20
     b24:	5f 93       	push	r21
     b26:	6f 93       	push	r22
     b28:	7f 93       	push	r23
     b2a:	8f 93       	push	r24
     b2c:	9f 93       	push	r25
     b2e:	af 93       	push	r26
     b30:	bf 93       	push	r27
     b32:	ef 93       	push	r30
     b34:	ff 93       	push	r31
   // 1. 상승 edge
   if (ECHO_PIN_RIGHT & (1 << ECHO_RIGHT))
     b36:	0e 9b       	sbis	0x01, 6	; 1
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <__vector_7+0x34>
   {
      TCNT3 = 0;
     b3a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b3e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     b42:	20 c0       	rjmp	.+64     	; 0xb84 <__vector_7+0x74>
   }
   // 2. 하강 edge
   else
   {
      // ECHO 핀에 들어온 펄스 길이를 us로 환산
      ultrasonic_right_distance = (1000000.0 * TCNT3 * 1024 / F_CPU) / 58;
     b44:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     b48:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	ad d1       	rcall	.+858    	; 0xeac <__floatunsisf>
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	34 e2       	ldi	r19, 0x24	; 36
     b56:	44 e7       	ldi	r20, 0x74	; 116
     b58:	59 e4       	ldi	r21, 0x49	; 73
     b5a:	36 d2       	rcall	.+1132   	; 0xfc8 <__mulsf3>
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	40 e8       	ldi	r20, 0x80	; 128
     b62:	54 e4       	ldi	r21, 0x44	; 68
     b64:	31 d2       	rcall	.+1122   	; 0xfc8 <__mulsf3>
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	34 e2       	ldi	r19, 0x24	; 36
     b6a:	44 e7       	ldi	r20, 0x74	; 116
     b6c:	5b e4       	ldi	r21, 0x4B	; 75
     b6e:	05 d1       	rcall	.+522    	; 0xd7a <__divsf3>
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	48 e6       	ldi	r20, 0x68	; 104
     b76:	52 e4       	ldi	r21, 0x42	; 66
     b78:	00 d1       	rcall	.+512    	; 0xd7a <__divsf3>
     b7a:	67 d1       	rcall	.+718    	; 0xe4a <__fixsfsi>
     b7c:	70 93 75 01 	sts	0x0175, r23	; 0x800175 <ultrasonic_right_distance+0x1>
     b80:	60 93 74 01 	sts	0x0174, r22	; 0x800174 <ultrasonic_right_distance>
      // 15.625khz의 1주기가 64us이다.
      // 64us * 10 == 640us
      // 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm
      // sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
   }
}
     b84:	ff 91       	pop	r31
     b86:	ef 91       	pop	r30
     b88:	bf 91       	pop	r27
     b8a:	af 91       	pop	r26
     b8c:	9f 91       	pop	r25
     b8e:	8f 91       	pop	r24
     b90:	7f 91       	pop	r23
     b92:	6f 91       	pop	r22
     b94:	5f 91       	pop	r21
     b96:	4f 91       	pop	r20
     b98:	3f 91       	pop	r19
     b9a:	2f 91       	pop	r18
     b9c:	0f 90       	pop	r0
     b9e:	0b be       	out	0x3b, r0	; 59
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	1f 90       	pop	r1
     ba8:	18 95       	reti

00000baa <init_ultrasonic>:

void init_ultrasonic()
{

		   //////////////// left ////////////////
		   TRIG_DDR_LEFT |= 1 << TRIG_LEFT; // output mode로 설정
     baa:	8a b3       	in	r24, 0x1a	; 26
     bac:	81 60       	ori	r24, 0x01	; 1
     bae:	8a bb       	out	0x1a, r24	; 26
		   ECHO_DDR_LEFT &= ~(1 << ECHO_LEFT); // input mode로 설정
     bb0:	82 b1       	in	r24, 0x02	; 2
     bb2:	8f 7e       	andi	r24, 0xEF	; 239
     bb4:	82 b9       	out	0x02, r24	; 2
   
		   // 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
		   // INT0~3은 EICRA, INT4~7은 EICRB 레지스터
		   EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
     bb6:	8a b7       	in	r24, 0x3a	; 58
     bb8:	81 60       	ori	r24, 0x01	; 1
     bba:	8a bf       	out	0x3a, r24	; 58
   
		   // 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
		   // 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
		   // 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us   
		   TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     bbc:	ea e8       	ldi	r30, 0x8A	; 138
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	85 60       	ori	r24, 0x05	; 5
     bc4:	80 83       	st	Z, r24
		   EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
     bc6:	89 b7       	in	r24, 0x39	; 57
     bc8:	80 61       	ori	r24, 0x10	; 16
     bca:	89 bf       	out	0x39, r24	; 57

	      //////////////// center ////////////////
	      TRIG_DDR_CENTER |= 1 << TRIG_CENTER; // output mode로 설정
     bcc:	8a b3       	in	r24, 0x1a	; 26
     bce:	82 60       	ori	r24, 0x02	; 2
     bd0:	8a bb       	out	0x1a, r24	; 26
	      ECHO_DDR_CENTER &= ~(1 << ECHO_CENTER); // input mode로 설정
     bd2:	82 b1       	in	r24, 0x02	; 2
     bd4:	8f 7d       	andi	r24, 0xDF	; 223
     bd6:	82 b9       	out	0x02, r24	; 2
	      
	      // 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	      // INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	      EICRB |= 0 << ISC51 | 1 << ISC50; // INT5니까 EICRB에서 ISC51, 50
     bd8:	8a b7       	in	r24, 0x3a	; 58
     bda:	84 60       	ori	r24, 0x04	; 4
     bdc:	8a bf       	out	0x3a, r24	; 58
	      
	      // 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	      // 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	      // 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
	      TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     bde:	80 81       	ld	r24, Z
     be0:	85 60       	ori	r24, 0x05	; 5
     be2:	80 83       	st	Z, r24
	      EIMSK |= 1 << INT5; // 외부 인터럽트4번 (ECHO) 사용
     be4:	89 b7       	in	r24, 0x39	; 57
     be6:	80 62       	ori	r24, 0x20	; 32
     be8:	89 bf       	out	0x39, r24	; 57
		  
			//////////////// right ////////////////
		   TRIG_DDR_RIGHT |= 1 << TRIG_RIGHT; // output mode로 설정
     bea:	8a b3       	in	r24, 0x1a	; 26
     bec:	84 60       	ori	r24, 0x04	; 4
     bee:	8a bb       	out	0x1a, r24	; 26
		   ECHO_DDR_RIGHT &= ~(1 << ECHO_RIGHT); // input mode로 설정
     bf0:	82 b1       	in	r24, 0x02	; 2
     bf2:	8f 7b       	andi	r24, 0xBF	; 191
     bf4:	82 b9       	out	0x02, r24	; 2
   
		   // 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
		   // INT0~3은 EICRA, INT4~7은 EICRB 레지스터
		   EICRB |= 0 << ISC61 | 1 << ISC60; // INT6니까 EICRB에서 ISC61, 60
     bf6:	8a b7       	in	r24, 0x3a	; 58
     bf8:	80 61       	ori	r24, 0x10	; 16
     bfa:	8a bf       	out	0x3a, r24	; 58
   
		   // 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
		   // 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
		   // 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us
		   TCCR3B |=  1 << CS32 | 1 << CS30; // 1024로 분주
     bfc:	80 81       	ld	r24, Z
     bfe:	85 60       	ori	r24, 0x05	; 5
     c00:	80 83       	st	Z, r24
		   EIMSK |= 1 << INT6; // 외부 인터럽트4번 (ECHO) 사용
     c02:	89 b7       	in	r24, 0x39	; 57
     c04:	80 64       	ori	r24, 0x40	; 64
     c06:	89 bf       	out	0x39, r24	; 57
     c08:	08 95       	ret

00000c0a <ultrasonic_trigger>:
   
}

void ultrasonic_trigger()
{
	if(ultrasonic_check_timer <= 100)
     c0a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ultrasonic_check_timer>
     c0e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <ultrasonic_check_timer+0x1>
     c12:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <ultrasonic_check_timer+0x2>
     c16:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <ultrasonic_check_timer+0x3>
     c1a:	85 36       	cpi	r24, 0x65	; 101
     c1c:	91 05       	cpc	r25, r1
     c1e:	a1 05       	cpc	r26, r1
     c20:	b1 05       	cpc	r27, r1
     c22:	80 f4       	brcc	.+32     	; 0xc44 <ultrasonic_trigger+0x3a>
	{
		////////// left //////////
		TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // 해당되는 포트만 LOW로 만듦
     c24:	8b b3       	in	r24, 0x1b	; 27
     c26:	8e 7f       	andi	r24, 0xFE	; 254
     c28:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c2a:	25 e0       	ldi	r18, 0x05	; 5
     c2c:	2a 95       	dec	r18
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <ultrasonic_trigger+0x22>
     c30:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_LEFT |= 1 << TRIG_LEFT; // HIGH
     c32:	8b b3       	in	r24, 0x1b	; 27
     c34:	81 60       	ori	r24, 0x01	; 1
     c36:	8b bb       	out	0x1b, r24	; 27
     c38:	80 e5       	ldi	r24, 0x50	; 80
     c3a:	8a 95       	dec	r24
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <ultrasonic_trigger+0x30>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_LEFT &= ~(1 << TRIG_LEFT); // LOW
     c3e:	8b b3       	in	r24, 0x1b	; 27
     c40:	8e 7f       	andi	r24, 0xFE	; 254
     c42:	8b bb       	out	0x1b, r24	; 27
		// 초음파센서 echo 응답 대기시간이 최대 38ms
	}
	
	if (ultrasonic_check_timer > 100 && ultrasonic_check_timer <= 200)
     c44:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ultrasonic_check_timer>
     c48:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <ultrasonic_check_timer+0x1>
     c4c:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <ultrasonic_check_timer+0x2>
     c50:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <ultrasonic_check_timer+0x3>
     c54:	85 36       	cpi	r24, 0x65	; 101
     c56:	91 05       	cpc	r25, r1
     c58:	a1 05       	cpc	r26, r1
     c5a:	b1 05       	cpc	r27, r1
     c5c:	e8 f0       	brcs	.+58     	; 0xc98 <ultrasonic_trigger+0x8e>
     c5e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ultrasonic_check_timer>
     c62:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <ultrasonic_check_timer+0x1>
     c66:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <ultrasonic_check_timer+0x2>
     c6a:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <ultrasonic_check_timer+0x3>
     c6e:	89 3c       	cpi	r24, 0xC9	; 201
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	80 f4       	brcc	.+32     	; 0xc98 <ultrasonic_trigger+0x8e>
	{
		////////// center //////////
		TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // 해당되는 포트만 LOW로 만듦
     c78:	8b b3       	in	r24, 0x1b	; 27
     c7a:	8d 7f       	andi	r24, 0xFD	; 253
     c7c:	8b bb       	out	0x1b, r24	; 27
     c7e:	25 e0       	ldi	r18, 0x05	; 5
     c80:	2a 95       	dec	r18
     c82:	f1 f7       	brne	.-4      	; 0xc80 <ultrasonic_trigger+0x76>
     c84:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_CENTER |= 1 << TRIG_CENTER; // HIGH
     c86:	8b b3       	in	r24, 0x1b	; 27
     c88:	82 60       	ori	r24, 0x02	; 2
     c8a:	8b bb       	out	0x1b, r24	; 27
     c8c:	80 e5       	ldi	r24, 0x50	; 80
     c8e:	8a 95       	dec	r24
     c90:	f1 f7       	brne	.-4      	; 0xc8e <ultrasonic_trigger+0x84>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_CENTER &= ~(1 << TRIG_CENTER); // LOW
     c92:	8b b3       	in	r24, 0x1b	; 27
     c94:	8d 7f       	andi	r24, 0xFD	; 253
     c96:	8b bb       	out	0x1b, r24	; 27
	}
	
	if (ultrasonic_check_timer > 200 && ultrasonic_check_timer <= 300)
     c98:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ultrasonic_check_timer>
     c9c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <ultrasonic_check_timer+0x1>
     ca0:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <ultrasonic_check_timer+0x2>
     ca4:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <ultrasonic_check_timer+0x3>
     ca8:	89 3c       	cpi	r24, 0xC9	; 201
     caa:	91 05       	cpc	r25, r1
     cac:	a1 05       	cpc	r26, r1
     cae:	b1 05       	cpc	r27, r1
     cb0:	e8 f0       	brcs	.+58     	; 0xcec <ultrasonic_trigger+0xe2>
     cb2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ultrasonic_check_timer>
     cb6:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <ultrasonic_check_timer+0x1>
     cba:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <ultrasonic_check_timer+0x2>
     cbe:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <ultrasonic_check_timer+0x3>
     cc2:	8d 32       	cpi	r24, 0x2D	; 45
     cc4:	91 40       	sbci	r25, 0x01	; 1
     cc6:	a1 05       	cpc	r26, r1
     cc8:	b1 05       	cpc	r27, r1
     cca:	80 f4       	brcc	.+32     	; 0xcec <ultrasonic_trigger+0xe2>
	{
		////////// right //////////
		TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // 해당되는 포트만 LOW로 만듦
     ccc:	8b b3       	in	r24, 0x1b	; 27
     cce:	8b 7f       	andi	r24, 0xFB	; 251
     cd0:	8b bb       	out	0x1b, r24	; 27
     cd2:	85 e0       	ldi	r24, 0x05	; 5
     cd4:	8a 95       	dec	r24
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <ultrasonic_trigger+0xca>
     cd8:	00 00       	nop
		_delay_us(1);
		TRIG_PORT_RIGHT |= 1 << TRIG_RIGHT; // HIGH
     cda:	8b b3       	in	r24, 0x1b	; 27
     cdc:	84 60       	ori	r24, 0x04	; 4
     cde:	8b bb       	out	0x1b, r24	; 27
     ce0:	20 e5       	ldi	r18, 0x50	; 80
     ce2:	2a 95       	dec	r18
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <ultrasonic_trigger+0xd8>
		_delay_us(15); // 규격에는 10us인데 reduance
		TRIG_PORT_RIGHT &= ~(1 << TRIG_RIGHT); // LOW
     ce6:	8b b3       	in	r24, 0x1b	; 27
     ce8:	8b 7f       	andi	r24, 0xFB	; 251
     cea:	8b bb       	out	0x1b, r24	; 27
	}
	
	ultrasonic_check_timer %= 310;
     cec:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <ultrasonic_check_timer>
     cf0:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <ultrasonic_check_timer+0x1>
     cf4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <ultrasonic_check_timer+0x2>
     cf8:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <ultrasonic_check_timer+0x3>
     cfc:	26 e3       	ldi	r18, 0x36	; 54
     cfe:	31 e0       	ldi	r19, 0x01	; 1
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	d7 d1       	rcall	.+942    	; 0x10b4 <__udivmodsi4>
     d06:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <ultrasonic_check_timer>
     d0a:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <ultrasonic_check_timer+0x1>
     d0e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <ultrasonic_check_timer+0x2>
     d12:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <ultrasonic_check_timer+0x3>
     d16:	08 95       	ret

00000d18 <distance_check>:
}

void distance_check(void)
{
      printf("left   :  %5d\n", ultrasonic_left_distance); // printf 찍으면 delay생김
     d18:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <ultrasonic_left_distance>
     d1c:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ultrasonic_left_distance+0x1>
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	85 e2       	ldi	r24, 0x25	; 37
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	9f 93       	push	r25
     d2a:	8f 93       	push	r24
     d2c:	02 d2       	rcall	.+1028   	; 0x1132 <printf>
      printf("center :  %5d\n", ultrasonic_center_distance);
     d2e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <ultrasonic_center_distance>
     d32:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <ultrasonic_center_distance+0x1>
     d36:	9f 93       	push	r25
     d38:	8f 93       	push	r24
     d3a:	84 e3       	ldi	r24, 0x34	; 52
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	9f 93       	push	r25
     d40:	8f 93       	push	r24
     d42:	f7 d1       	rcall	.+1006   	; 0x1132 <printf>
      printf("right  :  %5d\n", ultrasonic_right_distance);
     d44:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ultrasonic_right_distance>
     d48:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ultrasonic_right_distance+0x1>
     d4c:	9f 93       	push	r25
     d4e:	8f 93       	push	r24
     d50:	83 e4       	ldi	r24, 0x43	; 67
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	9f 93       	push	r25
     d56:	8f 93       	push	r24

   ultrasonic_trigger(); // 이것도 수정해야한다.
     d58:	ec d1       	rcall	.+984    	; 0x1132 <printf>
     d5a:	57 df       	rcall	.-338    	; 0xc0a <ultrasonic_trigger>
   func_state = AUTO_MODE_CHECK;
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <func_state+0x1>
     d64:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <func_state>
     d68:	8d b7       	in	r24, 0x3d	; 61
     d6a:	9e b7       	in	r25, 0x3e	; 62
     d6c:	0c 96       	adiw	r24, 0x0c	; 12
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	9e bf       	out	0x3e, r25	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	8d bf       	out	0x3d, r24	; 61
     d78:	08 95       	ret

00000d7a <__divsf3>:
     d7a:	0c d0       	rcall	.+24     	; 0xd94 <__divsf3x>
     d7c:	eb c0       	rjmp	.+470    	; 0xf54 <__fp_round>
     d7e:	e3 d0       	rcall	.+454    	; 0xf46 <__fp_pscB>
     d80:	40 f0       	brcs	.+16     	; 0xd92 <__divsf3+0x18>
     d82:	da d0       	rcall	.+436    	; 0xf38 <__fp_pscA>
     d84:	30 f0       	brcs	.+12     	; 0xd92 <__divsf3+0x18>
     d86:	21 f4       	brne	.+8      	; 0xd90 <__divsf3+0x16>
     d88:	5f 3f       	cpi	r21, 0xFF	; 255
     d8a:	19 f0       	breq	.+6      	; 0xd92 <__divsf3+0x18>
     d8c:	cc c0       	rjmp	.+408    	; 0xf26 <__fp_inf>
     d8e:	51 11       	cpse	r21, r1
     d90:	15 c1       	rjmp	.+554    	; 0xfbc <__fp_szero>
     d92:	cf c0       	rjmp	.+414    	; 0xf32 <__fp_nan>

00000d94 <__divsf3x>:
     d94:	f0 d0       	rcall	.+480    	; 0xf76 <__fp_split3>
     d96:	98 f3       	brcs	.-26     	; 0xd7e <__divsf3+0x4>

00000d98 <__divsf3_pse>:
     d98:	99 23       	and	r25, r25
     d9a:	c9 f3       	breq	.-14     	; 0xd8e <__divsf3+0x14>
     d9c:	55 23       	and	r21, r21
     d9e:	b1 f3       	breq	.-20     	; 0xd8c <__divsf3+0x12>
     da0:	95 1b       	sub	r25, r21
     da2:	55 0b       	sbc	r21, r21
     da4:	bb 27       	eor	r27, r27
     da6:	aa 27       	eor	r26, r26
     da8:	62 17       	cp	r22, r18
     daa:	73 07       	cpc	r23, r19
     dac:	84 07       	cpc	r24, r20
     dae:	38 f0       	brcs	.+14     	; 0xdbe <__divsf3_pse+0x26>
     db0:	9f 5f       	subi	r25, 0xFF	; 255
     db2:	5f 4f       	sbci	r21, 0xFF	; 255
     db4:	22 0f       	add	r18, r18
     db6:	33 1f       	adc	r19, r19
     db8:	44 1f       	adc	r20, r20
     dba:	aa 1f       	adc	r26, r26
     dbc:	a9 f3       	breq	.-22     	; 0xda8 <__divsf3_pse+0x10>
     dbe:	33 d0       	rcall	.+102    	; 0xe26 <__divsf3_pse+0x8e>
     dc0:	0e 2e       	mov	r0, r30
     dc2:	3a f0       	brmi	.+14     	; 0xdd2 <__divsf3_pse+0x3a>
     dc4:	e0 e8       	ldi	r30, 0x80	; 128
     dc6:	30 d0       	rcall	.+96     	; 0xe28 <__divsf3_pse+0x90>
     dc8:	91 50       	subi	r25, 0x01	; 1
     dca:	50 40       	sbci	r21, 0x00	; 0
     dcc:	e6 95       	lsr	r30
     dce:	00 1c       	adc	r0, r0
     dd0:	ca f7       	brpl	.-14     	; 0xdc4 <__divsf3_pse+0x2c>
     dd2:	29 d0       	rcall	.+82     	; 0xe26 <__divsf3_pse+0x8e>
     dd4:	fe 2f       	mov	r31, r30
     dd6:	27 d0       	rcall	.+78     	; 0xe26 <__divsf3_pse+0x8e>
     dd8:	66 0f       	add	r22, r22
     dda:	77 1f       	adc	r23, r23
     ddc:	88 1f       	adc	r24, r24
     dde:	bb 1f       	adc	r27, r27
     de0:	26 17       	cp	r18, r22
     de2:	37 07       	cpc	r19, r23
     de4:	48 07       	cpc	r20, r24
     de6:	ab 07       	cpc	r26, r27
     de8:	b0 e8       	ldi	r27, 0x80	; 128
     dea:	09 f0       	breq	.+2      	; 0xdee <__divsf3_pse+0x56>
     dec:	bb 0b       	sbc	r27, r27
     dee:	80 2d       	mov	r24, r0
     df0:	bf 01       	movw	r22, r30
     df2:	ff 27       	eor	r31, r31
     df4:	93 58       	subi	r25, 0x83	; 131
     df6:	5f 4f       	sbci	r21, 0xFF	; 255
     df8:	2a f0       	brmi	.+10     	; 0xe04 <__divsf3_pse+0x6c>
     dfa:	9e 3f       	cpi	r25, 0xFE	; 254
     dfc:	51 05       	cpc	r21, r1
     dfe:	68 f0       	brcs	.+26     	; 0xe1a <__divsf3_pse+0x82>
     e00:	92 c0       	rjmp	.+292    	; 0xf26 <__fp_inf>
     e02:	dc c0       	rjmp	.+440    	; 0xfbc <__fp_szero>
     e04:	5f 3f       	cpi	r21, 0xFF	; 255
     e06:	ec f3       	brlt	.-6      	; 0xe02 <__divsf3_pse+0x6a>
     e08:	98 3e       	cpi	r25, 0xE8	; 232
     e0a:	dc f3       	brlt	.-10     	; 0xe02 <__divsf3_pse+0x6a>
     e0c:	86 95       	lsr	r24
     e0e:	77 95       	ror	r23
     e10:	67 95       	ror	r22
     e12:	b7 95       	ror	r27
     e14:	f7 95       	ror	r31
     e16:	9f 5f       	subi	r25, 0xFF	; 255
     e18:	c9 f7       	brne	.-14     	; 0xe0c <__divsf3_pse+0x74>
     e1a:	88 0f       	add	r24, r24
     e1c:	91 1d       	adc	r25, r1
     e1e:	96 95       	lsr	r25
     e20:	87 95       	ror	r24
     e22:	97 f9       	bld	r25, 7
     e24:	08 95       	ret
     e26:	e1 e0       	ldi	r30, 0x01	; 1
     e28:	66 0f       	add	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	88 1f       	adc	r24, r24
     e2e:	bb 1f       	adc	r27, r27
     e30:	62 17       	cp	r22, r18
     e32:	73 07       	cpc	r23, r19
     e34:	84 07       	cpc	r24, r20
     e36:	ba 07       	cpc	r27, r26
     e38:	20 f0       	brcs	.+8      	; 0xe42 <__divsf3_pse+0xaa>
     e3a:	62 1b       	sub	r22, r18
     e3c:	73 0b       	sbc	r23, r19
     e3e:	84 0b       	sbc	r24, r20
     e40:	ba 0b       	sbc	r27, r26
     e42:	ee 1f       	adc	r30, r30
     e44:	88 f7       	brcc	.-30     	; 0xe28 <__divsf3_pse+0x90>
     e46:	e0 95       	com	r30
     e48:	08 95       	ret

00000e4a <__fixsfsi>:
     e4a:	04 d0       	rcall	.+8      	; 0xe54 <__fixunssfsi>
     e4c:	68 94       	set
     e4e:	b1 11       	cpse	r27, r1
     e50:	b5 c0       	rjmp	.+362    	; 0xfbc <__fp_szero>
     e52:	08 95       	ret

00000e54 <__fixunssfsi>:
     e54:	98 d0       	rcall	.+304    	; 0xf86 <__fp_splitA>
     e56:	88 f0       	brcs	.+34     	; 0xe7a <__fixunssfsi+0x26>
     e58:	9f 57       	subi	r25, 0x7F	; 127
     e5a:	90 f0       	brcs	.+36     	; 0xe80 <__fixunssfsi+0x2c>
     e5c:	b9 2f       	mov	r27, r25
     e5e:	99 27       	eor	r25, r25
     e60:	b7 51       	subi	r27, 0x17	; 23
     e62:	a0 f0       	brcs	.+40     	; 0xe8c <__fixunssfsi+0x38>
     e64:	d1 f0       	breq	.+52     	; 0xe9a <__fixunssfsi+0x46>
     e66:	66 0f       	add	r22, r22
     e68:	77 1f       	adc	r23, r23
     e6a:	88 1f       	adc	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	1a f0       	brmi	.+6      	; 0xe76 <__fixunssfsi+0x22>
     e70:	ba 95       	dec	r27
     e72:	c9 f7       	brne	.-14     	; 0xe66 <__fixunssfsi+0x12>
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__fixunssfsi+0x46>
     e76:	b1 30       	cpi	r27, 0x01	; 1
     e78:	81 f0       	breq	.+32     	; 0xe9a <__fixunssfsi+0x46>
     e7a:	9f d0       	rcall	.+318    	; 0xfba <__fp_zero>
     e7c:	b1 e0       	ldi	r27, 0x01	; 1
     e7e:	08 95       	ret
     e80:	9c c0       	rjmp	.+312    	; 0xfba <__fp_zero>
     e82:	67 2f       	mov	r22, r23
     e84:	78 2f       	mov	r23, r24
     e86:	88 27       	eor	r24, r24
     e88:	b8 5f       	subi	r27, 0xF8	; 248
     e8a:	39 f0       	breq	.+14     	; 0xe9a <__fixunssfsi+0x46>
     e8c:	b9 3f       	cpi	r27, 0xF9	; 249
     e8e:	cc f3       	brlt	.-14     	; 0xe82 <__fixunssfsi+0x2e>
     e90:	86 95       	lsr	r24
     e92:	77 95       	ror	r23
     e94:	67 95       	ror	r22
     e96:	b3 95       	inc	r27
     e98:	d9 f7       	brne	.-10     	; 0xe90 <__fixunssfsi+0x3c>
     e9a:	3e f4       	brtc	.+14     	; 0xeaa <__fixunssfsi+0x56>
     e9c:	90 95       	com	r25
     e9e:	80 95       	com	r24
     ea0:	70 95       	com	r23
     ea2:	61 95       	neg	r22
     ea4:	7f 4f       	sbci	r23, 0xFF	; 255
     ea6:	8f 4f       	sbci	r24, 0xFF	; 255
     ea8:	9f 4f       	sbci	r25, 0xFF	; 255
     eaa:	08 95       	ret

00000eac <__floatunsisf>:
     eac:	e8 94       	clt
     eae:	09 c0       	rjmp	.+18     	; 0xec2 <__floatsisf+0x12>

00000eb0 <__floatsisf>:
     eb0:	97 fb       	bst	r25, 7
     eb2:	3e f4       	brtc	.+14     	; 0xec2 <__floatsisf+0x12>
     eb4:	90 95       	com	r25
     eb6:	80 95       	com	r24
     eb8:	70 95       	com	r23
     eba:	61 95       	neg	r22
     ebc:	7f 4f       	sbci	r23, 0xFF	; 255
     ebe:	8f 4f       	sbci	r24, 0xFF	; 255
     ec0:	9f 4f       	sbci	r25, 0xFF	; 255
     ec2:	99 23       	and	r25, r25
     ec4:	a9 f0       	breq	.+42     	; 0xef0 <__floatsisf+0x40>
     ec6:	f9 2f       	mov	r31, r25
     ec8:	96 e9       	ldi	r25, 0x96	; 150
     eca:	bb 27       	eor	r27, r27
     ecc:	93 95       	inc	r25
     ece:	f6 95       	lsr	r31
     ed0:	87 95       	ror	r24
     ed2:	77 95       	ror	r23
     ed4:	67 95       	ror	r22
     ed6:	b7 95       	ror	r27
     ed8:	f1 11       	cpse	r31, r1
     eda:	f8 cf       	rjmp	.-16     	; 0xecc <__floatsisf+0x1c>
     edc:	fa f4       	brpl	.+62     	; 0xf1c <__floatsisf+0x6c>
     ede:	bb 0f       	add	r27, r27
     ee0:	11 f4       	brne	.+4      	; 0xee6 <__floatsisf+0x36>
     ee2:	60 ff       	sbrs	r22, 0
     ee4:	1b c0       	rjmp	.+54     	; 0xf1c <__floatsisf+0x6c>
     ee6:	6f 5f       	subi	r22, 0xFF	; 255
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	8f 4f       	sbci	r24, 0xFF	; 255
     eec:	9f 4f       	sbci	r25, 0xFF	; 255
     eee:	16 c0       	rjmp	.+44     	; 0xf1c <__floatsisf+0x6c>
     ef0:	88 23       	and	r24, r24
     ef2:	11 f0       	breq	.+4      	; 0xef8 <__floatsisf+0x48>
     ef4:	96 e9       	ldi	r25, 0x96	; 150
     ef6:	11 c0       	rjmp	.+34     	; 0xf1a <__floatsisf+0x6a>
     ef8:	77 23       	and	r23, r23
     efa:	21 f0       	breq	.+8      	; 0xf04 <__floatsisf+0x54>
     efc:	9e e8       	ldi	r25, 0x8E	; 142
     efe:	87 2f       	mov	r24, r23
     f00:	76 2f       	mov	r23, r22
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <__floatsisf+0x5e>
     f04:	66 23       	and	r22, r22
     f06:	71 f0       	breq	.+28     	; 0xf24 <__floatsisf+0x74>
     f08:	96 e8       	ldi	r25, 0x86	; 134
     f0a:	86 2f       	mov	r24, r22
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	2a f0       	brmi	.+10     	; 0xf1c <__floatsisf+0x6c>
     f12:	9a 95       	dec	r25
     f14:	66 0f       	add	r22, r22
     f16:	77 1f       	adc	r23, r23
     f18:	88 1f       	adc	r24, r24
     f1a:	da f7       	brpl	.-10     	; 0xf12 <__floatsisf+0x62>
     f1c:	88 0f       	add	r24, r24
     f1e:	96 95       	lsr	r25
     f20:	87 95       	ror	r24
     f22:	97 f9       	bld	r25, 7
     f24:	08 95       	ret

00000f26 <__fp_inf>:
     f26:	97 f9       	bld	r25, 7
     f28:	9f 67       	ori	r25, 0x7F	; 127
     f2a:	80 e8       	ldi	r24, 0x80	; 128
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	08 95       	ret

00000f32 <__fp_nan>:
     f32:	9f ef       	ldi	r25, 0xFF	; 255
     f34:	80 ec       	ldi	r24, 0xC0	; 192
     f36:	08 95       	ret

00000f38 <__fp_pscA>:
     f38:	00 24       	eor	r0, r0
     f3a:	0a 94       	dec	r0
     f3c:	16 16       	cp	r1, r22
     f3e:	17 06       	cpc	r1, r23
     f40:	18 06       	cpc	r1, r24
     f42:	09 06       	cpc	r0, r25
     f44:	08 95       	ret

00000f46 <__fp_pscB>:
     f46:	00 24       	eor	r0, r0
     f48:	0a 94       	dec	r0
     f4a:	12 16       	cp	r1, r18
     f4c:	13 06       	cpc	r1, r19
     f4e:	14 06       	cpc	r1, r20
     f50:	05 06       	cpc	r0, r21
     f52:	08 95       	ret

00000f54 <__fp_round>:
     f54:	09 2e       	mov	r0, r25
     f56:	03 94       	inc	r0
     f58:	00 0c       	add	r0, r0
     f5a:	11 f4       	brne	.+4      	; 0xf60 <__fp_round+0xc>
     f5c:	88 23       	and	r24, r24
     f5e:	52 f0       	brmi	.+20     	; 0xf74 <__fp_round+0x20>
     f60:	bb 0f       	add	r27, r27
     f62:	40 f4       	brcc	.+16     	; 0xf74 <__fp_round+0x20>
     f64:	bf 2b       	or	r27, r31
     f66:	11 f4       	brne	.+4      	; 0xf6c <__fp_round+0x18>
     f68:	60 ff       	sbrs	r22, 0
     f6a:	04 c0       	rjmp	.+8      	; 0xf74 <__fp_round+0x20>
     f6c:	6f 5f       	subi	r22, 0xFF	; 255
     f6e:	7f 4f       	sbci	r23, 0xFF	; 255
     f70:	8f 4f       	sbci	r24, 0xFF	; 255
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	08 95       	ret

00000f76 <__fp_split3>:
     f76:	57 fd       	sbrc	r21, 7
     f78:	90 58       	subi	r25, 0x80	; 128
     f7a:	44 0f       	add	r20, r20
     f7c:	55 1f       	adc	r21, r21
     f7e:	59 f0       	breq	.+22     	; 0xf96 <__fp_splitA+0x10>
     f80:	5f 3f       	cpi	r21, 0xFF	; 255
     f82:	71 f0       	breq	.+28     	; 0xfa0 <__fp_splitA+0x1a>
     f84:	47 95       	ror	r20

00000f86 <__fp_splitA>:
     f86:	88 0f       	add	r24, r24
     f88:	97 fb       	bst	r25, 7
     f8a:	99 1f       	adc	r25, r25
     f8c:	61 f0       	breq	.+24     	; 0xfa6 <__fp_splitA+0x20>
     f8e:	9f 3f       	cpi	r25, 0xFF	; 255
     f90:	79 f0       	breq	.+30     	; 0xfb0 <__fp_splitA+0x2a>
     f92:	87 95       	ror	r24
     f94:	08 95       	ret
     f96:	12 16       	cp	r1, r18
     f98:	13 06       	cpc	r1, r19
     f9a:	14 06       	cpc	r1, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	f2 cf       	rjmp	.-28     	; 0xf84 <__fp_split3+0xe>
     fa0:	46 95       	lsr	r20
     fa2:	f1 df       	rcall	.-30     	; 0xf86 <__fp_splitA>
     fa4:	08 c0       	rjmp	.+16     	; 0xfb6 <__fp_splitA+0x30>
     fa6:	16 16       	cp	r1, r22
     fa8:	17 06       	cpc	r1, r23
     faa:	18 06       	cpc	r1, r24
     fac:	99 1f       	adc	r25, r25
     fae:	f1 cf       	rjmp	.-30     	; 0xf92 <__fp_splitA+0xc>
     fb0:	86 95       	lsr	r24
     fb2:	71 05       	cpc	r23, r1
     fb4:	61 05       	cpc	r22, r1
     fb6:	08 94       	sec
     fb8:	08 95       	ret

00000fba <__fp_zero>:
     fba:	e8 94       	clt

00000fbc <__fp_szero>:
     fbc:	bb 27       	eor	r27, r27
     fbe:	66 27       	eor	r22, r22
     fc0:	77 27       	eor	r23, r23
     fc2:	cb 01       	movw	r24, r22
     fc4:	97 f9       	bld	r25, 7
     fc6:	08 95       	ret

00000fc8 <__mulsf3>:
     fc8:	0b d0       	rcall	.+22     	; 0xfe0 <__mulsf3x>
     fca:	c4 cf       	rjmp	.-120    	; 0xf54 <__fp_round>
     fcc:	b5 df       	rcall	.-150    	; 0xf38 <__fp_pscA>
     fce:	28 f0       	brcs	.+10     	; 0xfda <__mulsf3+0x12>
     fd0:	ba df       	rcall	.-140    	; 0xf46 <__fp_pscB>
     fd2:	18 f0       	brcs	.+6      	; 0xfda <__mulsf3+0x12>
     fd4:	95 23       	and	r25, r21
     fd6:	09 f0       	breq	.+2      	; 0xfda <__mulsf3+0x12>
     fd8:	a6 cf       	rjmp	.-180    	; 0xf26 <__fp_inf>
     fda:	ab cf       	rjmp	.-170    	; 0xf32 <__fp_nan>
     fdc:	11 24       	eor	r1, r1
     fde:	ee cf       	rjmp	.-36     	; 0xfbc <__fp_szero>

00000fe0 <__mulsf3x>:
     fe0:	ca df       	rcall	.-108    	; 0xf76 <__fp_split3>
     fe2:	a0 f3       	brcs	.-24     	; 0xfcc <__mulsf3+0x4>

00000fe4 <__mulsf3_pse>:
     fe4:	95 9f       	mul	r25, r21
     fe6:	d1 f3       	breq	.-12     	; 0xfdc <__mulsf3+0x14>
     fe8:	95 0f       	add	r25, r21
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	55 1f       	adc	r21, r21
     fee:	62 9f       	mul	r22, r18
     ff0:	f0 01       	movw	r30, r0
     ff2:	72 9f       	mul	r23, r18
     ff4:	bb 27       	eor	r27, r27
     ff6:	f0 0d       	add	r31, r0
     ff8:	b1 1d       	adc	r27, r1
     ffa:	63 9f       	mul	r22, r19
     ffc:	aa 27       	eor	r26, r26
     ffe:	f0 0d       	add	r31, r0
    1000:	b1 1d       	adc	r27, r1
    1002:	aa 1f       	adc	r26, r26
    1004:	64 9f       	mul	r22, r20
    1006:	66 27       	eor	r22, r22
    1008:	b0 0d       	add	r27, r0
    100a:	a1 1d       	adc	r26, r1
    100c:	66 1f       	adc	r22, r22
    100e:	82 9f       	mul	r24, r18
    1010:	22 27       	eor	r18, r18
    1012:	b0 0d       	add	r27, r0
    1014:	a1 1d       	adc	r26, r1
    1016:	62 1f       	adc	r22, r18
    1018:	73 9f       	mul	r23, r19
    101a:	b0 0d       	add	r27, r0
    101c:	a1 1d       	adc	r26, r1
    101e:	62 1f       	adc	r22, r18
    1020:	83 9f       	mul	r24, r19
    1022:	a0 0d       	add	r26, r0
    1024:	61 1d       	adc	r22, r1
    1026:	22 1f       	adc	r18, r18
    1028:	74 9f       	mul	r23, r20
    102a:	33 27       	eor	r19, r19
    102c:	a0 0d       	add	r26, r0
    102e:	61 1d       	adc	r22, r1
    1030:	23 1f       	adc	r18, r19
    1032:	84 9f       	mul	r24, r20
    1034:	60 0d       	add	r22, r0
    1036:	21 1d       	adc	r18, r1
    1038:	82 2f       	mov	r24, r18
    103a:	76 2f       	mov	r23, r22
    103c:	6a 2f       	mov	r22, r26
    103e:	11 24       	eor	r1, r1
    1040:	9f 57       	subi	r25, 0x7F	; 127
    1042:	50 40       	sbci	r21, 0x00	; 0
    1044:	8a f0       	brmi	.+34     	; 0x1068 <__DATA_REGION_LENGTH__+0x68>
    1046:	e1 f0       	breq	.+56     	; 0x1080 <__DATA_REGION_LENGTH__+0x80>
    1048:	88 23       	and	r24, r24
    104a:	4a f0       	brmi	.+18     	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	bb 1f       	adc	r27, r27
    1052:	66 1f       	adc	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	91 50       	subi	r25, 0x01	; 1
    105a:	50 40       	sbci	r21, 0x00	; 0
    105c:	a9 f7       	brne	.-22     	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
    105e:	9e 3f       	cpi	r25, 0xFE	; 254
    1060:	51 05       	cpc	r21, r1
    1062:	70 f0       	brcs	.+28     	; 0x1080 <__DATA_REGION_LENGTH__+0x80>
    1064:	60 cf       	rjmp	.-320    	; 0xf26 <__fp_inf>
    1066:	aa cf       	rjmp	.-172    	; 0xfbc <__fp_szero>
    1068:	5f 3f       	cpi	r21, 0xFF	; 255
    106a:	ec f3       	brlt	.-6      	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
    106c:	98 3e       	cpi	r25, 0xE8	; 232
    106e:	dc f3       	brlt	.-10     	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
    1070:	86 95       	lsr	r24
    1072:	77 95       	ror	r23
    1074:	67 95       	ror	r22
    1076:	b7 95       	ror	r27
    1078:	f7 95       	ror	r31
    107a:	e7 95       	ror	r30
    107c:	9f 5f       	subi	r25, 0xFF	; 255
    107e:	c1 f7       	brne	.-16     	; 0x1070 <__DATA_REGION_LENGTH__+0x70>
    1080:	fe 2b       	or	r31, r30
    1082:	88 0f       	add	r24, r24
    1084:	91 1d       	adc	r25, r1
    1086:	96 95       	lsr	r25
    1088:	87 95       	ror	r24
    108a:	97 f9       	bld	r25, 7
    108c:	08 95       	ret

0000108e <__divmodhi4>:
    108e:	97 fb       	bst	r25, 7
    1090:	07 2e       	mov	r0, r23
    1092:	16 f4       	brtc	.+4      	; 0x1098 <__divmodhi4+0xa>
    1094:	00 94       	com	r0
    1096:	06 d0       	rcall	.+12     	; 0x10a4 <__divmodhi4_neg1>
    1098:	77 fd       	sbrc	r23, 7
    109a:	08 d0       	rcall	.+16     	; 0x10ac <__divmodhi4_neg2>
    109c:	36 d0       	rcall	.+108    	; 0x110a <__udivmodhi4>
    109e:	07 fc       	sbrc	r0, 7
    10a0:	05 d0       	rcall	.+10     	; 0x10ac <__divmodhi4_neg2>
    10a2:	3e f4       	brtc	.+14     	; 0x10b2 <__divmodhi4_exit>

000010a4 <__divmodhi4_neg1>:
    10a4:	90 95       	com	r25
    10a6:	81 95       	neg	r24
    10a8:	9f 4f       	sbci	r25, 0xFF	; 255
    10aa:	08 95       	ret

000010ac <__divmodhi4_neg2>:
    10ac:	70 95       	com	r23
    10ae:	61 95       	neg	r22
    10b0:	7f 4f       	sbci	r23, 0xFF	; 255

000010b2 <__divmodhi4_exit>:
    10b2:	08 95       	ret

000010b4 <__udivmodsi4>:
    10b4:	a1 e2       	ldi	r26, 0x21	; 33
    10b6:	1a 2e       	mov	r1, r26
    10b8:	aa 1b       	sub	r26, r26
    10ba:	bb 1b       	sub	r27, r27
    10bc:	fd 01       	movw	r30, r26
    10be:	0d c0       	rjmp	.+26     	; 0x10da <__udivmodsi4_ep>

000010c0 <__udivmodsi4_loop>:
    10c0:	aa 1f       	adc	r26, r26
    10c2:	bb 1f       	adc	r27, r27
    10c4:	ee 1f       	adc	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	a2 17       	cp	r26, r18
    10ca:	b3 07       	cpc	r27, r19
    10cc:	e4 07       	cpc	r30, r20
    10ce:	f5 07       	cpc	r31, r21
    10d0:	20 f0       	brcs	.+8      	; 0x10da <__udivmodsi4_ep>
    10d2:	a2 1b       	sub	r26, r18
    10d4:	b3 0b       	sbc	r27, r19
    10d6:	e4 0b       	sbc	r30, r20
    10d8:	f5 0b       	sbc	r31, r21

000010da <__udivmodsi4_ep>:
    10da:	66 1f       	adc	r22, r22
    10dc:	77 1f       	adc	r23, r23
    10de:	88 1f       	adc	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	1a 94       	dec	r1
    10e4:	69 f7       	brne	.-38     	; 0x10c0 <__udivmodsi4_loop>
    10e6:	60 95       	com	r22
    10e8:	70 95       	com	r23
    10ea:	80 95       	com	r24
    10ec:	90 95       	com	r25
    10ee:	9b 01       	movw	r18, r22
    10f0:	ac 01       	movw	r20, r24
    10f2:	bd 01       	movw	r22, r26
    10f4:	cf 01       	movw	r24, r30
    10f6:	08 95       	ret

000010f8 <__tablejump2__>:
    10f8:	ee 0f       	add	r30, r30
    10fa:	ff 1f       	adc	r31, r31
    10fc:	00 24       	eor	r0, r0
    10fe:	00 1c       	adc	r0, r0
    1100:	0b be       	out	0x3b, r0	; 59
    1102:	07 90       	elpm	r0, Z+
    1104:	f6 91       	elpm	r31, Z
    1106:	e0 2d       	mov	r30, r0
    1108:	09 94       	ijmp

0000110a <__udivmodhi4>:
    110a:	aa 1b       	sub	r26, r26
    110c:	bb 1b       	sub	r27, r27
    110e:	51 e1       	ldi	r21, 0x11	; 17
    1110:	07 c0       	rjmp	.+14     	; 0x1120 <__udivmodhi4_ep>

00001112 <__udivmodhi4_loop>:
    1112:	aa 1f       	adc	r26, r26
    1114:	bb 1f       	adc	r27, r27
    1116:	a6 17       	cp	r26, r22
    1118:	b7 07       	cpc	r27, r23
    111a:	10 f0       	brcs	.+4      	; 0x1120 <__udivmodhi4_ep>
    111c:	a6 1b       	sub	r26, r22
    111e:	b7 0b       	sbc	r27, r23

00001120 <__udivmodhi4_ep>:
    1120:	88 1f       	adc	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	5a 95       	dec	r21
    1126:	a9 f7       	brne	.-22     	; 0x1112 <__udivmodhi4_loop>
    1128:	80 95       	com	r24
    112a:	90 95       	com	r25
    112c:	bc 01       	movw	r22, r24
    112e:	cd 01       	movw	r24, r26
    1130:	08 95       	ret

00001132 <printf>:
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	ae 01       	movw	r20, r28
    113c:	4b 5f       	subi	r20, 0xFB	; 251
    113e:	5f 4f       	sbci	r21, 0xFF	; 255
    1140:	fa 01       	movw	r30, r20
    1142:	61 91       	ld	r22, Z+
    1144:	71 91       	ld	r23, Z+
    1146:	af 01       	movw	r20, r30
    1148:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <__iob+0x2>
    114c:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <__iob+0x3>
    1150:	03 d0       	rcall	.+6      	; 0x1158 <vfprintf>
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	08 95       	ret

00001158 <vfprintf>:
    1158:	2f 92       	push	r2
    115a:	3f 92       	push	r3
    115c:	4f 92       	push	r4
    115e:	5f 92       	push	r5
    1160:	6f 92       	push	r6
    1162:	7f 92       	push	r7
    1164:	8f 92       	push	r8
    1166:	9f 92       	push	r9
    1168:	af 92       	push	r10
    116a:	bf 92       	push	r11
    116c:	cf 92       	push	r12
    116e:	df 92       	push	r13
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	2b 97       	sbiw	r28, 0x0b	; 11
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	6c 01       	movw	r12, r24
    118e:	7b 01       	movw	r14, r22
    1190:	8a 01       	movw	r16, r20
    1192:	fc 01       	movw	r30, r24
    1194:	17 82       	std	Z+7, r1	; 0x07
    1196:	16 82       	std	Z+6, r1	; 0x06
    1198:	83 81       	ldd	r24, Z+3	; 0x03
    119a:	81 ff       	sbrs	r24, 1
    119c:	bf c1       	rjmp	.+894    	; 0x151c <vfprintf+0x3c4>
    119e:	ce 01       	movw	r24, r28
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	3c 01       	movw	r6, r24
    11a4:	f6 01       	movw	r30, r12
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	f7 01       	movw	r30, r14
    11aa:	93 fd       	sbrc	r25, 3
    11ac:	85 91       	lpm	r24, Z+
    11ae:	93 ff       	sbrs	r25, 3
    11b0:	81 91       	ld	r24, Z+
    11b2:	7f 01       	movw	r14, r30
    11b4:	88 23       	and	r24, r24
    11b6:	09 f4       	brne	.+2      	; 0x11ba <vfprintf+0x62>
    11b8:	ad c1       	rjmp	.+858    	; 0x1514 <vfprintf+0x3bc>
    11ba:	85 32       	cpi	r24, 0x25	; 37
    11bc:	39 f4       	brne	.+14     	; 0x11cc <vfprintf+0x74>
    11be:	93 fd       	sbrc	r25, 3
    11c0:	85 91       	lpm	r24, Z+
    11c2:	93 ff       	sbrs	r25, 3
    11c4:	81 91       	ld	r24, Z+
    11c6:	7f 01       	movw	r14, r30
    11c8:	85 32       	cpi	r24, 0x25	; 37
    11ca:	21 f4       	brne	.+8      	; 0x11d4 <vfprintf+0x7c>
    11cc:	b6 01       	movw	r22, r12
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	d6 d1       	rcall	.+940    	; 0x157e <fputc>
    11d2:	e8 cf       	rjmp	.-48     	; 0x11a4 <vfprintf+0x4c>
    11d4:	91 2c       	mov	r9, r1
    11d6:	21 2c       	mov	r2, r1
    11d8:	31 2c       	mov	r3, r1
    11da:	ff e1       	ldi	r31, 0x1F	; 31
    11dc:	f3 15       	cp	r31, r3
    11de:	d8 f0       	brcs	.+54     	; 0x1216 <vfprintf+0xbe>
    11e0:	8b 32       	cpi	r24, 0x2B	; 43
    11e2:	79 f0       	breq	.+30     	; 0x1202 <vfprintf+0xaa>
    11e4:	38 f4       	brcc	.+14     	; 0x11f4 <vfprintf+0x9c>
    11e6:	80 32       	cpi	r24, 0x20	; 32
    11e8:	79 f0       	breq	.+30     	; 0x1208 <vfprintf+0xb0>
    11ea:	83 32       	cpi	r24, 0x23	; 35
    11ec:	a1 f4       	brne	.+40     	; 0x1216 <vfprintf+0xbe>
    11ee:	23 2d       	mov	r18, r3
    11f0:	20 61       	ori	r18, 0x10	; 16
    11f2:	1d c0       	rjmp	.+58     	; 0x122e <vfprintf+0xd6>
    11f4:	8d 32       	cpi	r24, 0x2D	; 45
    11f6:	61 f0       	breq	.+24     	; 0x1210 <vfprintf+0xb8>
    11f8:	80 33       	cpi	r24, 0x30	; 48
    11fa:	69 f4       	brne	.+26     	; 0x1216 <vfprintf+0xbe>
    11fc:	23 2d       	mov	r18, r3
    11fe:	21 60       	ori	r18, 0x01	; 1
    1200:	16 c0       	rjmp	.+44     	; 0x122e <vfprintf+0xd6>
    1202:	83 2d       	mov	r24, r3
    1204:	82 60       	ori	r24, 0x02	; 2
    1206:	38 2e       	mov	r3, r24
    1208:	e3 2d       	mov	r30, r3
    120a:	e4 60       	ori	r30, 0x04	; 4
    120c:	3e 2e       	mov	r3, r30
    120e:	2a c0       	rjmp	.+84     	; 0x1264 <vfprintf+0x10c>
    1210:	f3 2d       	mov	r31, r3
    1212:	f8 60       	ori	r31, 0x08	; 8
    1214:	1d c0       	rjmp	.+58     	; 0x1250 <vfprintf+0xf8>
    1216:	37 fc       	sbrc	r3, 7
    1218:	2d c0       	rjmp	.+90     	; 0x1274 <vfprintf+0x11c>
    121a:	20 ed       	ldi	r18, 0xD0	; 208
    121c:	28 0f       	add	r18, r24
    121e:	2a 30       	cpi	r18, 0x0A	; 10
    1220:	40 f0       	brcs	.+16     	; 0x1232 <vfprintf+0xda>
    1222:	8e 32       	cpi	r24, 0x2E	; 46
    1224:	b9 f4       	brne	.+46     	; 0x1254 <vfprintf+0xfc>
    1226:	36 fc       	sbrc	r3, 6
    1228:	75 c1       	rjmp	.+746    	; 0x1514 <vfprintf+0x3bc>
    122a:	23 2d       	mov	r18, r3
    122c:	20 64       	ori	r18, 0x40	; 64
    122e:	32 2e       	mov	r3, r18
    1230:	19 c0       	rjmp	.+50     	; 0x1264 <vfprintf+0x10c>
    1232:	36 fe       	sbrs	r3, 6
    1234:	06 c0       	rjmp	.+12     	; 0x1242 <vfprintf+0xea>
    1236:	8a e0       	ldi	r24, 0x0A	; 10
    1238:	98 9e       	mul	r9, r24
    123a:	20 0d       	add	r18, r0
    123c:	11 24       	eor	r1, r1
    123e:	92 2e       	mov	r9, r18
    1240:	11 c0       	rjmp	.+34     	; 0x1264 <vfprintf+0x10c>
    1242:	ea e0       	ldi	r30, 0x0A	; 10
    1244:	2e 9e       	mul	r2, r30
    1246:	20 0d       	add	r18, r0
    1248:	11 24       	eor	r1, r1
    124a:	22 2e       	mov	r2, r18
    124c:	f3 2d       	mov	r31, r3
    124e:	f0 62       	ori	r31, 0x20	; 32
    1250:	3f 2e       	mov	r3, r31
    1252:	08 c0       	rjmp	.+16     	; 0x1264 <vfprintf+0x10c>
    1254:	8c 36       	cpi	r24, 0x6C	; 108
    1256:	21 f4       	brne	.+8      	; 0x1260 <vfprintf+0x108>
    1258:	83 2d       	mov	r24, r3
    125a:	80 68       	ori	r24, 0x80	; 128
    125c:	38 2e       	mov	r3, r24
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <vfprintf+0x10c>
    1260:	88 36       	cpi	r24, 0x68	; 104
    1262:	41 f4       	brne	.+16     	; 0x1274 <vfprintf+0x11c>
    1264:	f7 01       	movw	r30, r14
    1266:	93 fd       	sbrc	r25, 3
    1268:	85 91       	lpm	r24, Z+
    126a:	93 ff       	sbrs	r25, 3
    126c:	81 91       	ld	r24, Z+
    126e:	7f 01       	movw	r14, r30
    1270:	81 11       	cpse	r24, r1
    1272:	b3 cf       	rjmp	.-154    	; 0x11da <vfprintf+0x82>
    1274:	98 2f       	mov	r25, r24
    1276:	9f 7d       	andi	r25, 0xDF	; 223
    1278:	95 54       	subi	r25, 0x45	; 69
    127a:	93 30       	cpi	r25, 0x03	; 3
    127c:	28 f4       	brcc	.+10     	; 0x1288 <vfprintf+0x130>
    127e:	0c 5f       	subi	r16, 0xFC	; 252
    1280:	1f 4f       	sbci	r17, 0xFF	; 255
    1282:	9f e3       	ldi	r25, 0x3F	; 63
    1284:	99 83       	std	Y+1, r25	; 0x01
    1286:	0d c0       	rjmp	.+26     	; 0x12a2 <vfprintf+0x14a>
    1288:	83 36       	cpi	r24, 0x63	; 99
    128a:	31 f0       	breq	.+12     	; 0x1298 <vfprintf+0x140>
    128c:	83 37       	cpi	r24, 0x73	; 115
    128e:	71 f0       	breq	.+28     	; 0x12ac <vfprintf+0x154>
    1290:	83 35       	cpi	r24, 0x53	; 83
    1292:	09 f0       	breq	.+2      	; 0x1296 <vfprintf+0x13e>
    1294:	55 c0       	rjmp	.+170    	; 0x1340 <vfprintf+0x1e8>
    1296:	20 c0       	rjmp	.+64     	; 0x12d8 <vfprintf+0x180>
    1298:	f8 01       	movw	r30, r16
    129a:	80 81       	ld	r24, Z
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	0e 5f       	subi	r16, 0xFE	; 254
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	88 24       	eor	r8, r8
    12a4:	83 94       	inc	r8
    12a6:	91 2c       	mov	r9, r1
    12a8:	53 01       	movw	r10, r6
    12aa:	12 c0       	rjmp	.+36     	; 0x12d0 <vfprintf+0x178>
    12ac:	28 01       	movw	r4, r16
    12ae:	f2 e0       	ldi	r31, 0x02	; 2
    12b0:	4f 0e       	add	r4, r31
    12b2:	51 1c       	adc	r5, r1
    12b4:	f8 01       	movw	r30, r16
    12b6:	a0 80       	ld	r10, Z
    12b8:	b1 80       	ldd	r11, Z+1	; 0x01
    12ba:	36 fe       	sbrs	r3, 6
    12bc:	03 c0       	rjmp	.+6      	; 0x12c4 <vfprintf+0x16c>
    12be:	69 2d       	mov	r22, r9
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <vfprintf+0x170>
    12c4:	6f ef       	ldi	r22, 0xFF	; 255
    12c6:	7f ef       	ldi	r23, 0xFF	; 255
    12c8:	c5 01       	movw	r24, r10
    12ca:	4e d1       	rcall	.+668    	; 0x1568 <strnlen>
    12cc:	4c 01       	movw	r8, r24
    12ce:	82 01       	movw	r16, r4
    12d0:	f3 2d       	mov	r31, r3
    12d2:	ff 77       	andi	r31, 0x7F	; 127
    12d4:	3f 2e       	mov	r3, r31
    12d6:	15 c0       	rjmp	.+42     	; 0x1302 <vfprintf+0x1aa>
    12d8:	28 01       	movw	r4, r16
    12da:	22 e0       	ldi	r18, 0x02	; 2
    12dc:	42 0e       	add	r4, r18
    12de:	51 1c       	adc	r5, r1
    12e0:	f8 01       	movw	r30, r16
    12e2:	a0 80       	ld	r10, Z
    12e4:	b1 80       	ldd	r11, Z+1	; 0x01
    12e6:	36 fe       	sbrs	r3, 6
    12e8:	03 c0       	rjmp	.+6      	; 0x12f0 <vfprintf+0x198>
    12ea:	69 2d       	mov	r22, r9
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <vfprintf+0x19c>
    12f0:	6f ef       	ldi	r22, 0xFF	; 255
    12f2:	7f ef       	ldi	r23, 0xFF	; 255
    12f4:	c5 01       	movw	r24, r10
    12f6:	2d d1       	rcall	.+602    	; 0x1552 <strnlen_P>
    12f8:	4c 01       	movw	r8, r24
    12fa:	f3 2d       	mov	r31, r3
    12fc:	f0 68       	ori	r31, 0x80	; 128
    12fe:	3f 2e       	mov	r3, r31
    1300:	82 01       	movw	r16, r4
    1302:	33 fc       	sbrc	r3, 3
    1304:	19 c0       	rjmp	.+50     	; 0x1338 <vfprintf+0x1e0>
    1306:	82 2d       	mov	r24, r2
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	88 16       	cp	r8, r24
    130c:	99 06       	cpc	r9, r25
    130e:	a0 f4       	brcc	.+40     	; 0x1338 <vfprintf+0x1e0>
    1310:	b6 01       	movw	r22, r12
    1312:	80 e2       	ldi	r24, 0x20	; 32
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	33 d1       	rcall	.+614    	; 0x157e <fputc>
    1318:	2a 94       	dec	r2
    131a:	f5 cf       	rjmp	.-22     	; 0x1306 <vfprintf+0x1ae>
    131c:	f5 01       	movw	r30, r10
    131e:	37 fc       	sbrc	r3, 7
    1320:	85 91       	lpm	r24, Z+
    1322:	37 fe       	sbrs	r3, 7
    1324:	81 91       	ld	r24, Z+
    1326:	5f 01       	movw	r10, r30
    1328:	b6 01       	movw	r22, r12
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	28 d1       	rcall	.+592    	; 0x157e <fputc>
    132e:	21 10       	cpse	r2, r1
    1330:	2a 94       	dec	r2
    1332:	21 e0       	ldi	r18, 0x01	; 1
    1334:	82 1a       	sub	r8, r18
    1336:	91 08       	sbc	r9, r1
    1338:	81 14       	cp	r8, r1
    133a:	91 04       	cpc	r9, r1
    133c:	79 f7       	brne	.-34     	; 0x131c <vfprintf+0x1c4>
    133e:	e1 c0       	rjmp	.+450    	; 0x1502 <vfprintf+0x3aa>
    1340:	84 36       	cpi	r24, 0x64	; 100
    1342:	11 f0       	breq	.+4      	; 0x1348 <vfprintf+0x1f0>
    1344:	89 36       	cpi	r24, 0x69	; 105
    1346:	39 f5       	brne	.+78     	; 0x1396 <vfprintf+0x23e>
    1348:	f8 01       	movw	r30, r16
    134a:	37 fe       	sbrs	r3, 7
    134c:	07 c0       	rjmp	.+14     	; 0x135c <vfprintf+0x204>
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	93 81       	ldd	r25, Z+3	; 0x03
    1356:	0c 5f       	subi	r16, 0xFC	; 252
    1358:	1f 4f       	sbci	r17, 0xFF	; 255
    135a:	08 c0       	rjmp	.+16     	; 0x136c <vfprintf+0x214>
    135c:	60 81       	ld	r22, Z
    135e:	71 81       	ldd	r23, Z+1	; 0x01
    1360:	07 2e       	mov	r0, r23
    1362:	00 0c       	add	r0, r0
    1364:	88 0b       	sbc	r24, r24
    1366:	99 0b       	sbc	r25, r25
    1368:	0e 5f       	subi	r16, 0xFE	; 254
    136a:	1f 4f       	sbci	r17, 0xFF	; 255
    136c:	f3 2d       	mov	r31, r3
    136e:	ff 76       	andi	r31, 0x6F	; 111
    1370:	3f 2e       	mov	r3, r31
    1372:	97 ff       	sbrs	r25, 7
    1374:	09 c0       	rjmp	.+18     	; 0x1388 <vfprintf+0x230>
    1376:	90 95       	com	r25
    1378:	80 95       	com	r24
    137a:	70 95       	com	r23
    137c:	61 95       	neg	r22
    137e:	7f 4f       	sbci	r23, 0xFF	; 255
    1380:	8f 4f       	sbci	r24, 0xFF	; 255
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	f0 68       	ori	r31, 0x80	; 128
    1386:	3f 2e       	mov	r3, r31
    1388:	2a e0       	ldi	r18, 0x0A	; 10
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	a3 01       	movw	r20, r6
    138e:	33 d1       	rcall	.+614    	; 0x15f6 <__ultoa_invert>
    1390:	88 2e       	mov	r8, r24
    1392:	86 18       	sub	r8, r6
    1394:	44 c0       	rjmp	.+136    	; 0x141e <vfprintf+0x2c6>
    1396:	85 37       	cpi	r24, 0x75	; 117
    1398:	31 f4       	brne	.+12     	; 0x13a6 <vfprintf+0x24e>
    139a:	23 2d       	mov	r18, r3
    139c:	2f 7e       	andi	r18, 0xEF	; 239
    139e:	b2 2e       	mov	r11, r18
    13a0:	2a e0       	ldi	r18, 0x0A	; 10
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	25 c0       	rjmp	.+74     	; 0x13f0 <vfprintf+0x298>
    13a6:	93 2d       	mov	r25, r3
    13a8:	99 7f       	andi	r25, 0xF9	; 249
    13aa:	b9 2e       	mov	r11, r25
    13ac:	8f 36       	cpi	r24, 0x6F	; 111
    13ae:	c1 f0       	breq	.+48     	; 0x13e0 <vfprintf+0x288>
    13b0:	18 f4       	brcc	.+6      	; 0x13b8 <vfprintf+0x260>
    13b2:	88 35       	cpi	r24, 0x58	; 88
    13b4:	79 f0       	breq	.+30     	; 0x13d4 <vfprintf+0x27c>
    13b6:	ae c0       	rjmp	.+348    	; 0x1514 <vfprintf+0x3bc>
    13b8:	80 37       	cpi	r24, 0x70	; 112
    13ba:	19 f0       	breq	.+6      	; 0x13c2 <vfprintf+0x26a>
    13bc:	88 37       	cpi	r24, 0x78	; 120
    13be:	21 f0       	breq	.+8      	; 0x13c8 <vfprintf+0x270>
    13c0:	a9 c0       	rjmp	.+338    	; 0x1514 <vfprintf+0x3bc>
    13c2:	e9 2f       	mov	r30, r25
    13c4:	e0 61       	ori	r30, 0x10	; 16
    13c6:	be 2e       	mov	r11, r30
    13c8:	b4 fe       	sbrs	r11, 4
    13ca:	0d c0       	rjmp	.+26     	; 0x13e6 <vfprintf+0x28e>
    13cc:	fb 2d       	mov	r31, r11
    13ce:	f4 60       	ori	r31, 0x04	; 4
    13d0:	bf 2e       	mov	r11, r31
    13d2:	09 c0       	rjmp	.+18     	; 0x13e6 <vfprintf+0x28e>
    13d4:	34 fe       	sbrs	r3, 4
    13d6:	0a c0       	rjmp	.+20     	; 0x13ec <vfprintf+0x294>
    13d8:	29 2f       	mov	r18, r25
    13da:	26 60       	ori	r18, 0x06	; 6
    13dc:	b2 2e       	mov	r11, r18
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <vfprintf+0x294>
    13e0:	28 e0       	ldi	r18, 0x08	; 8
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	05 c0       	rjmp	.+10     	; 0x13f0 <vfprintf+0x298>
    13e6:	20 e1       	ldi	r18, 0x10	; 16
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <vfprintf+0x298>
    13ec:	20 e1       	ldi	r18, 0x10	; 16
    13ee:	32 e0       	ldi	r19, 0x02	; 2
    13f0:	f8 01       	movw	r30, r16
    13f2:	b7 fe       	sbrs	r11, 7
    13f4:	07 c0       	rjmp	.+14     	; 0x1404 <vfprintf+0x2ac>
    13f6:	60 81       	ld	r22, Z
    13f8:	71 81       	ldd	r23, Z+1	; 0x01
    13fa:	82 81       	ldd	r24, Z+2	; 0x02
    13fc:	93 81       	ldd	r25, Z+3	; 0x03
    13fe:	0c 5f       	subi	r16, 0xFC	; 252
    1400:	1f 4f       	sbci	r17, 0xFF	; 255
    1402:	06 c0       	rjmp	.+12     	; 0x1410 <vfprintf+0x2b8>
    1404:	60 81       	ld	r22, Z
    1406:	71 81       	ldd	r23, Z+1	; 0x01
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 5f       	subi	r16, 0xFE	; 254
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	a3 01       	movw	r20, r6
    1412:	f1 d0       	rcall	.+482    	; 0x15f6 <__ultoa_invert>
    1414:	88 2e       	mov	r8, r24
    1416:	86 18       	sub	r8, r6
    1418:	fb 2d       	mov	r31, r11
    141a:	ff 77       	andi	r31, 0x7F	; 127
    141c:	3f 2e       	mov	r3, r31
    141e:	36 fe       	sbrs	r3, 6
    1420:	0d c0       	rjmp	.+26     	; 0x143c <vfprintf+0x2e4>
    1422:	23 2d       	mov	r18, r3
    1424:	2e 7f       	andi	r18, 0xFE	; 254
    1426:	a2 2e       	mov	r10, r18
    1428:	89 14       	cp	r8, r9
    142a:	58 f4       	brcc	.+22     	; 0x1442 <vfprintf+0x2ea>
    142c:	34 fe       	sbrs	r3, 4
    142e:	0b c0       	rjmp	.+22     	; 0x1446 <vfprintf+0x2ee>
    1430:	32 fc       	sbrc	r3, 2
    1432:	09 c0       	rjmp	.+18     	; 0x1446 <vfprintf+0x2ee>
    1434:	83 2d       	mov	r24, r3
    1436:	8e 7e       	andi	r24, 0xEE	; 238
    1438:	a8 2e       	mov	r10, r24
    143a:	05 c0       	rjmp	.+10     	; 0x1446 <vfprintf+0x2ee>
    143c:	b8 2c       	mov	r11, r8
    143e:	a3 2c       	mov	r10, r3
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <vfprintf+0x2f0>
    1442:	b8 2c       	mov	r11, r8
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <vfprintf+0x2f0>
    1446:	b9 2c       	mov	r11, r9
    1448:	a4 fe       	sbrs	r10, 4
    144a:	0f c0       	rjmp	.+30     	; 0x146a <vfprintf+0x312>
    144c:	fe 01       	movw	r30, r28
    144e:	e8 0d       	add	r30, r8
    1450:	f1 1d       	adc	r31, r1
    1452:	80 81       	ld	r24, Z
    1454:	80 33       	cpi	r24, 0x30	; 48
    1456:	21 f4       	brne	.+8      	; 0x1460 <vfprintf+0x308>
    1458:	9a 2d       	mov	r25, r10
    145a:	99 7e       	andi	r25, 0xE9	; 233
    145c:	a9 2e       	mov	r10, r25
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <vfprintf+0x31a>
    1460:	a2 fe       	sbrs	r10, 2
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <vfprintf+0x318>
    1464:	b3 94       	inc	r11
    1466:	b3 94       	inc	r11
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <vfprintf+0x31a>
    146a:	8a 2d       	mov	r24, r10
    146c:	86 78       	andi	r24, 0x86	; 134
    146e:	09 f0       	breq	.+2      	; 0x1472 <vfprintf+0x31a>
    1470:	b3 94       	inc	r11
    1472:	a3 fc       	sbrc	r10, 3
    1474:	10 c0       	rjmp	.+32     	; 0x1496 <vfprintf+0x33e>
    1476:	a0 fe       	sbrs	r10, 0
    1478:	06 c0       	rjmp	.+12     	; 0x1486 <vfprintf+0x32e>
    147a:	b2 14       	cp	r11, r2
    147c:	80 f4       	brcc	.+32     	; 0x149e <vfprintf+0x346>
    147e:	28 0c       	add	r2, r8
    1480:	92 2c       	mov	r9, r2
    1482:	9b 18       	sub	r9, r11
    1484:	0d c0       	rjmp	.+26     	; 0x14a0 <vfprintf+0x348>
    1486:	b2 14       	cp	r11, r2
    1488:	58 f4       	brcc	.+22     	; 0x14a0 <vfprintf+0x348>
    148a:	b6 01       	movw	r22, r12
    148c:	80 e2       	ldi	r24, 0x20	; 32
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	76 d0       	rcall	.+236    	; 0x157e <fputc>
    1492:	b3 94       	inc	r11
    1494:	f8 cf       	rjmp	.-16     	; 0x1486 <vfprintf+0x32e>
    1496:	b2 14       	cp	r11, r2
    1498:	18 f4       	brcc	.+6      	; 0x14a0 <vfprintf+0x348>
    149a:	2b 18       	sub	r2, r11
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <vfprintf+0x34a>
    149e:	98 2c       	mov	r9, r8
    14a0:	21 2c       	mov	r2, r1
    14a2:	a4 fe       	sbrs	r10, 4
    14a4:	0f c0       	rjmp	.+30     	; 0x14c4 <vfprintf+0x36c>
    14a6:	b6 01       	movw	r22, r12
    14a8:	80 e3       	ldi	r24, 0x30	; 48
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	68 d0       	rcall	.+208    	; 0x157e <fputc>
    14ae:	a2 fe       	sbrs	r10, 2
    14b0:	16 c0       	rjmp	.+44     	; 0x14de <vfprintf+0x386>
    14b2:	a1 fc       	sbrc	r10, 1
    14b4:	03 c0       	rjmp	.+6      	; 0x14bc <vfprintf+0x364>
    14b6:	88 e7       	ldi	r24, 0x78	; 120
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <vfprintf+0x368>
    14bc:	88 e5       	ldi	r24, 0x58	; 88
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	b6 01       	movw	r22, r12
    14c2:	0c c0       	rjmp	.+24     	; 0x14dc <vfprintf+0x384>
    14c4:	8a 2d       	mov	r24, r10
    14c6:	86 78       	andi	r24, 0x86	; 134
    14c8:	51 f0       	breq	.+20     	; 0x14de <vfprintf+0x386>
    14ca:	a1 fe       	sbrs	r10, 1
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <vfprintf+0x37a>
    14ce:	8b e2       	ldi	r24, 0x2B	; 43
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <vfprintf+0x37c>
    14d2:	80 e2       	ldi	r24, 0x20	; 32
    14d4:	a7 fc       	sbrc	r10, 7
    14d6:	8d e2       	ldi	r24, 0x2D	; 45
    14d8:	b6 01       	movw	r22, r12
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	50 d0       	rcall	.+160    	; 0x157e <fputc>
    14de:	89 14       	cp	r8, r9
    14e0:	30 f4       	brcc	.+12     	; 0x14ee <vfprintf+0x396>
    14e2:	b6 01       	movw	r22, r12
    14e4:	80 e3       	ldi	r24, 0x30	; 48
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	4a d0       	rcall	.+148    	; 0x157e <fputc>
    14ea:	9a 94       	dec	r9
    14ec:	f8 cf       	rjmp	.-16     	; 0x14de <vfprintf+0x386>
    14ee:	8a 94       	dec	r8
    14f0:	f3 01       	movw	r30, r6
    14f2:	e8 0d       	add	r30, r8
    14f4:	f1 1d       	adc	r31, r1
    14f6:	80 81       	ld	r24, Z
    14f8:	b6 01       	movw	r22, r12
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	40 d0       	rcall	.+128    	; 0x157e <fputc>
    14fe:	81 10       	cpse	r8, r1
    1500:	f6 cf       	rjmp	.-20     	; 0x14ee <vfprintf+0x396>
    1502:	22 20       	and	r2, r2
    1504:	09 f4       	brne	.+2      	; 0x1508 <vfprintf+0x3b0>
    1506:	4e ce       	rjmp	.-868    	; 0x11a4 <vfprintf+0x4c>
    1508:	b6 01       	movw	r22, r12
    150a:	80 e2       	ldi	r24, 0x20	; 32
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	37 d0       	rcall	.+110    	; 0x157e <fputc>
    1510:	2a 94       	dec	r2
    1512:	f7 cf       	rjmp	.-18     	; 0x1502 <vfprintf+0x3aa>
    1514:	f6 01       	movw	r30, r12
    1516:	86 81       	ldd	r24, Z+6	; 0x06
    1518:	97 81       	ldd	r25, Z+7	; 0x07
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <vfprintf+0x3c8>
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	9f ef       	ldi	r25, 0xFF	; 255
    1520:	2b 96       	adiw	r28, 0x0b	; 11
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	ff 90       	pop	r15
    1536:	ef 90       	pop	r14
    1538:	df 90       	pop	r13
    153a:	cf 90       	pop	r12
    153c:	bf 90       	pop	r11
    153e:	af 90       	pop	r10
    1540:	9f 90       	pop	r9
    1542:	8f 90       	pop	r8
    1544:	7f 90       	pop	r7
    1546:	6f 90       	pop	r6
    1548:	5f 90       	pop	r5
    154a:	4f 90       	pop	r4
    154c:	3f 90       	pop	r3
    154e:	2f 90       	pop	r2
    1550:	08 95       	ret

00001552 <strnlen_P>:
    1552:	fc 01       	movw	r30, r24
    1554:	05 90       	lpm	r0, Z+
    1556:	61 50       	subi	r22, 0x01	; 1
    1558:	70 40       	sbci	r23, 0x00	; 0
    155a:	01 10       	cpse	r0, r1
    155c:	d8 f7       	brcc	.-10     	; 0x1554 <strnlen_P+0x2>
    155e:	80 95       	com	r24
    1560:	90 95       	com	r25
    1562:	8e 0f       	add	r24, r30
    1564:	9f 1f       	adc	r25, r31
    1566:	08 95       	ret

00001568 <strnlen>:
    1568:	fc 01       	movw	r30, r24
    156a:	61 50       	subi	r22, 0x01	; 1
    156c:	70 40       	sbci	r23, 0x00	; 0
    156e:	01 90       	ld	r0, Z+
    1570:	01 10       	cpse	r0, r1
    1572:	d8 f7       	brcc	.-10     	; 0x156a <strnlen+0x2>
    1574:	80 95       	com	r24
    1576:	90 95       	com	r25
    1578:	8e 0f       	add	r24, r30
    157a:	9f 1f       	adc	r25, r31
    157c:	08 95       	ret

0000157e <fputc>:
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	fb 01       	movw	r30, r22
    1588:	23 81       	ldd	r18, Z+3	; 0x03
    158a:	21 fd       	sbrc	r18, 1
    158c:	03 c0       	rjmp	.+6      	; 0x1594 <fputc+0x16>
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	9f ef       	ldi	r25, 0xFF	; 255
    1592:	2c c0       	rjmp	.+88     	; 0x15ec <fputc+0x6e>
    1594:	22 ff       	sbrs	r18, 2
    1596:	16 c0       	rjmp	.+44     	; 0x15c4 <fputc+0x46>
    1598:	46 81       	ldd	r20, Z+6	; 0x06
    159a:	57 81       	ldd	r21, Z+7	; 0x07
    159c:	24 81       	ldd	r18, Z+4	; 0x04
    159e:	35 81       	ldd	r19, Z+5	; 0x05
    15a0:	42 17       	cp	r20, r18
    15a2:	53 07       	cpc	r21, r19
    15a4:	44 f4       	brge	.+16     	; 0x15b6 <fputc+0x38>
    15a6:	a0 81       	ld	r26, Z
    15a8:	b1 81       	ldd	r27, Z+1	; 0x01
    15aa:	9d 01       	movw	r18, r26
    15ac:	2f 5f       	subi	r18, 0xFF	; 255
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	31 83       	std	Z+1, r19	; 0x01
    15b2:	20 83       	st	Z, r18
    15b4:	8c 93       	st	X, r24
    15b6:	26 81       	ldd	r18, Z+6	; 0x06
    15b8:	37 81       	ldd	r19, Z+7	; 0x07
    15ba:	2f 5f       	subi	r18, 0xFF	; 255
    15bc:	3f 4f       	sbci	r19, 0xFF	; 255
    15be:	37 83       	std	Z+7, r19	; 0x07
    15c0:	26 83       	std	Z+6, r18	; 0x06
    15c2:	14 c0       	rjmp	.+40     	; 0x15ec <fputc+0x6e>
    15c4:	8b 01       	movw	r16, r22
    15c6:	ec 01       	movw	r28, r24
    15c8:	fb 01       	movw	r30, r22
    15ca:	00 84       	ldd	r0, Z+8	; 0x08
    15cc:	f1 85       	ldd	r31, Z+9	; 0x09
    15ce:	e0 2d       	mov	r30, r0
    15d0:	09 95       	icall
    15d2:	89 2b       	or	r24, r25
    15d4:	e1 f6       	brne	.-72     	; 0x158e <fputc+0x10>
    15d6:	d8 01       	movw	r26, r16
    15d8:	16 96       	adiw	r26, 0x06	; 6
    15da:	8d 91       	ld	r24, X+
    15dc:	9c 91       	ld	r25, X
    15de:	17 97       	sbiw	r26, 0x07	; 7
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	17 96       	adiw	r26, 0x07	; 7
    15e4:	9c 93       	st	X, r25
    15e6:	8e 93       	st	-X, r24
    15e8:	16 97       	sbiw	r26, 0x06	; 6
    15ea:	ce 01       	movw	r24, r28
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	08 95       	ret

000015f6 <__ultoa_invert>:
    15f6:	fa 01       	movw	r30, r20
    15f8:	aa 27       	eor	r26, r26
    15fa:	28 30       	cpi	r18, 0x08	; 8
    15fc:	51 f1       	breq	.+84     	; 0x1652 <__ultoa_invert+0x5c>
    15fe:	20 31       	cpi	r18, 0x10	; 16
    1600:	81 f1       	breq	.+96     	; 0x1662 <__ultoa_invert+0x6c>
    1602:	e8 94       	clt
    1604:	6f 93       	push	r22
    1606:	6e 7f       	andi	r22, 0xFE	; 254
    1608:	6e 5f       	subi	r22, 0xFE	; 254
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	8f 4f       	sbci	r24, 0xFF	; 255
    160e:	9f 4f       	sbci	r25, 0xFF	; 255
    1610:	af 4f       	sbci	r26, 0xFF	; 255
    1612:	b1 e0       	ldi	r27, 0x01	; 1
    1614:	3e d0       	rcall	.+124    	; 0x1692 <__ultoa_invert+0x9c>
    1616:	b4 e0       	ldi	r27, 0x04	; 4
    1618:	3c d0       	rcall	.+120    	; 0x1692 <__ultoa_invert+0x9c>
    161a:	67 0f       	add	r22, r23
    161c:	78 1f       	adc	r23, r24
    161e:	89 1f       	adc	r24, r25
    1620:	9a 1f       	adc	r25, r26
    1622:	a1 1d       	adc	r26, r1
    1624:	68 0f       	add	r22, r24
    1626:	79 1f       	adc	r23, r25
    1628:	8a 1f       	adc	r24, r26
    162a:	91 1d       	adc	r25, r1
    162c:	a1 1d       	adc	r26, r1
    162e:	6a 0f       	add	r22, r26
    1630:	71 1d       	adc	r23, r1
    1632:	81 1d       	adc	r24, r1
    1634:	91 1d       	adc	r25, r1
    1636:	a1 1d       	adc	r26, r1
    1638:	20 d0       	rcall	.+64     	; 0x167a <__ultoa_invert+0x84>
    163a:	09 f4       	brne	.+2      	; 0x163e <__ultoa_invert+0x48>
    163c:	68 94       	set
    163e:	3f 91       	pop	r19
    1640:	2a e0       	ldi	r18, 0x0A	; 10
    1642:	26 9f       	mul	r18, r22
    1644:	11 24       	eor	r1, r1
    1646:	30 19       	sub	r19, r0
    1648:	30 5d       	subi	r19, 0xD0	; 208
    164a:	31 93       	st	Z+, r19
    164c:	de f6       	brtc	.-74     	; 0x1604 <__ultoa_invert+0xe>
    164e:	cf 01       	movw	r24, r30
    1650:	08 95       	ret
    1652:	46 2f       	mov	r20, r22
    1654:	47 70       	andi	r20, 0x07	; 7
    1656:	40 5d       	subi	r20, 0xD0	; 208
    1658:	41 93       	st	Z+, r20
    165a:	b3 e0       	ldi	r27, 0x03	; 3
    165c:	0f d0       	rcall	.+30     	; 0x167c <__ultoa_invert+0x86>
    165e:	c9 f7       	brne	.-14     	; 0x1652 <__ultoa_invert+0x5c>
    1660:	f6 cf       	rjmp	.-20     	; 0x164e <__ultoa_invert+0x58>
    1662:	46 2f       	mov	r20, r22
    1664:	4f 70       	andi	r20, 0x0F	; 15
    1666:	40 5d       	subi	r20, 0xD0	; 208
    1668:	4a 33       	cpi	r20, 0x3A	; 58
    166a:	18 f0       	brcs	.+6      	; 0x1672 <__ultoa_invert+0x7c>
    166c:	49 5d       	subi	r20, 0xD9	; 217
    166e:	31 fd       	sbrc	r19, 1
    1670:	40 52       	subi	r20, 0x20	; 32
    1672:	41 93       	st	Z+, r20
    1674:	02 d0       	rcall	.+4      	; 0x167a <__ultoa_invert+0x84>
    1676:	a9 f7       	brne	.-22     	; 0x1662 <__ultoa_invert+0x6c>
    1678:	ea cf       	rjmp	.-44     	; 0x164e <__ultoa_invert+0x58>
    167a:	b4 e0       	ldi	r27, 0x04	; 4
    167c:	a6 95       	lsr	r26
    167e:	97 95       	ror	r25
    1680:	87 95       	ror	r24
    1682:	77 95       	ror	r23
    1684:	67 95       	ror	r22
    1686:	ba 95       	dec	r27
    1688:	c9 f7       	brne	.-14     	; 0x167c <__ultoa_invert+0x86>
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	61 05       	cpc	r22, r1
    168e:	71 05       	cpc	r23, r1
    1690:	08 95       	ret
    1692:	9b 01       	movw	r18, r22
    1694:	ac 01       	movw	r20, r24
    1696:	0a 2e       	mov	r0, r26
    1698:	06 94       	lsr	r0
    169a:	57 95       	ror	r21
    169c:	47 95       	ror	r20
    169e:	37 95       	ror	r19
    16a0:	27 95       	ror	r18
    16a2:	ba 95       	dec	r27
    16a4:	c9 f7       	brne	.-14     	; 0x1698 <__ultoa_invert+0xa2>
    16a6:	62 0f       	add	r22, r18
    16a8:	73 1f       	adc	r23, r19
    16aa:	84 1f       	adc	r24, r20
    16ac:	95 1f       	adc	r25, r21
    16ae:	a0 1d       	adc	r26, r0
    16b0:	08 95       	ret

000016b2 <_exit>:
    16b2:	f8 94       	cli

000016b4 <__stop_program>:
    16b4:	ff cf       	rjmp	.-2      	; 0x16b4 <__stop_program>
