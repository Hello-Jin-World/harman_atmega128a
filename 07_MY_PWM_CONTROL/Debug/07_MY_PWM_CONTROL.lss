
07_MY_PWM_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00001250  000012e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000696  00800130  00800130  00001314  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001814  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107a  00000000  00000000  00002d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d32  00000000  00000000  00003dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00004ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070f  00000000  00000000  00004e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ab  00000000  00000000  00005567  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005c12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	ff c3       	rjmp	.+2046   	; 0x814 <__vector_5>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	48 c1       	rjmp	.+656    	; 0x2d2 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	bf c2       	rjmp	.+1406   	; 0x5c8 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	39 c3       	rjmp	.+1650   	; 0x6ec <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e5       	ldi	r30, 0x50	; 80
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 33       	cpi	r26, 0x30	; 48
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a0 e3       	ldi	r26, 0x30	; 48
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 3c       	cpi	r26, 0xC6	; 198
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	4a d1       	rcall	.+660    	; 0x358 <main>
      c4:	0c 94 26 09 	jmp	0x124c	; 0x124c <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <init_button>:
// 00001111
// DDRD &= 0x0f; // 4, 5, 6, 7을 input. PORTD.4 가독성이 떨어진다.

void init_button(void)
{
	BUTTON_DDR &= ~(1 << BUTTON0PIN | 1 << BUTTON1PIN | 1 << BUTTON2PIN | 1 << BUTTON3PIN);
      ca:	81 b3       	in	r24, 0x11	; 17
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	81 bb       	out	0x11, r24	; 17
      d0:	08 95       	ret

000000d2 <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
      d2:	20 b3       	in	r18, 0x10	; 16
      d4:	42 2f       	mov	r20, r18
      d6:	50 e0       	ldi	r21, 0x00	; 0
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <get_button+0x10>
      de:	22 0f       	add	r18, r18
      e0:	33 1f       	adc	r19, r19
      e2:	6a 95       	dec	r22
      e4:	e2 f7       	brpl	.-8      	; 0xde <get_button+0xc>
      e6:	24 23       	and	r18, r20
      e8:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
      ea:	21 15       	cp	r18, r1
      ec:	31 05       	cpc	r19, r1
      ee:	b9 f0       	breq	.+46     	; 0x11e <get_button+0x4c>
      f0:	fc 01       	movw	r30, r24
      f2:	e0 5d       	subi	r30, 0xD0	; 208
      f4:	fe 4f       	sbci	r31, 0xFE	; 254
      f6:	40 81       	ld	r20, Z
      f8:	41 11       	cpse	r20, r1
      fa:	11 c0       	rjmp	.+34     	; 0x11e <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fc:	2f ef       	ldi	r18, 0xFF	; 255
      fe:	3d ee       	ldi	r19, 0xED	; 237
     100:	42 e0       	ldi	r20, 0x02	; 2
     102:	21 50       	subi	r18, 0x01	; 1
     104:	30 40       	sbci	r19, 0x00	; 0
     106:	40 40       	sbci	r20, 0x00	; 0
     108:	e1 f7       	brne	.-8      	; 0x102 <get_button+0x30>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <get_button+0x3a>
     10c:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     10e:	fc 01       	movw	r30, r24
     110:	e0 5d       	subi	r30, 0xD0	; 208
     112:	fe 4f       	sbci	r31, 0xFE	; 254
     114:	21 e0       	ldi	r18, 0x01	; 1
     116:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     11e:	fc 01       	movw	r30, r24
     120:	e0 5d       	subi	r30, 0xD0	; 208
     122:	fe 4f       	sbci	r31, 0xFE	; 254
     124:	40 81       	ld	r20, Z
     126:	41 30       	cpi	r20, 0x01	; 1
     128:	91 f4       	brne	.+36     	; 0x14e <get_button+0x7c>
     12a:	23 2b       	or	r18, r19
     12c:	99 f4       	brne	.+38     	; 0x154 <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     12e:	fc 01       	movw	r30, r24
     130:	e0 5d       	subi	r30, 0xD0	; 208
     132:	fe 4f       	sbci	r31, 0xFE	; 254
     134:	10 82       	st	Z, r1
     136:	8f ef       	ldi	r24, 0xFF	; 255
     138:	9d ee       	ldi	r25, 0xED	; 237
     13a:	22 e0       	ldi	r18, 0x02	; 2
     13c:	81 50       	subi	r24, 0x01	; 1
     13e:	90 40       	sbci	r25, 0x00	; 0
     140:	20 40       	sbci	r18, 0x00	; 0
     142:	e1 f7       	brne	.-8      	; 0x13c <get_button+0x6a>
     144:	00 c0       	rjmp	.+0      	; 0x146 <get_button+0x74>
     146:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	08 95       	ret
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	08 95       	ret

0000015a <init_fnd>:
{
}

void init_fnd(void)
{
	FND_DATA_DDR = 0xff; // 출력모드로 설정
     15a:	8f ef       	ldi	r24, 0xFF	; 255
     15c:	84 bb       	out	0x14, r24	; 20
	//FND_DIGIT_DDR |= 0xf0; //자리 수 선택 핀 4 5 6 7
	FND_DIGIT_DDR |= 1 << FND_DIGIT_D1 | 1 << FND_DIGIT_D2 |
     15e:	87 b3       	in	r24, 0x17	; 23
     160:	80 6f       	ori	r24, 0xF0	; 240
     162:	87 bb       	out	0x17, r24	; 23
					 1 << FND_DIGIT_D3 | 1 << FND_DIGIT_D4;

	FND_DATA_PORT = 0x00; // FND를 all off
     164:	15 ba       	out	0x15, r1	; 21
     166:	08 95       	ret

00000168 <fan_time_fnd_display>:
}

//////////선풍기 시각 설정 함수//////////////
void fan_time_fnd_display(void)
{
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
     170:	2b 97       	sbiw	r28, 0x0b	; 11
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	f8 94       	cli
     176:	de bf       	out	0x3e, r29	; 62
     178:	0f be       	out	0x3f, r0	; 63
     17a:	cd bf       	out	0x3d, r28	; 61
						  // 0      1      2      3      4      5      6      7      8      9      .
	uint8_t fnd_font[] = {~0xc0, ~0xf9, ~0xa4, ~0xb0, ~0x99, ~0x92, ~0x82, ~0xd8, ~0x80, ~0x90, ~0x7f};
     17c:	8b e0       	ldi	r24, 0x0B	; 11
     17e:	e6 e1       	ldi	r30, 0x16	; 22
     180:	f1 e0       	ldi	r31, 0x01	; 1
     182:	de 01       	movw	r26, r28
     184:	11 96       	adiw	r26, 0x01	; 1
     186:	01 90       	ld	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	8a 95       	dec	r24
     18c:	e1 f7       	brne	.-8      	; 0x186 <fan_time_fnd_display+0x1e>

	static int digit_select = 0; // 자리수 선택 변수 0~3   static : 전역변수처럼 작동

	switch(digit_select)
     18e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <digit_select.1757>
     192:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <digit_select.1757+0x1>
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	91 05       	cpc	r25, r1
     19a:	19 f1       	breq	.+70     	; 0x1e2 <fan_time_fnd_display+0x7a>
     19c:	1c f4       	brge	.+6      	; 0x1a4 <fan_time_fnd_display+0x3c>
     19e:	89 2b       	or	r24, r25
     1a0:	41 f0       	breq	.+16     	; 0x1b2 <fan_time_fnd_display+0x4a>
     1a2:	7d c0       	rjmp	.+250    	; 0x29e <fan_time_fnd_display+0x136>
     1a4:	82 30       	cpi	r24, 0x02	; 2
     1a6:	91 05       	cpc	r25, r1
     1a8:	d9 f1       	breq	.+118    	; 0x220 <fan_time_fnd_display+0xb8>
     1aa:	03 97       	sbiw	r24, 0x03	; 3
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <fan_time_fnd_display+0x48>
     1ae:	59 c0       	rjmp	.+178    	; 0x262 <fan_time_fnd_display+0xfa>
     1b0:	76 c0       	rjmp	.+236    	; 0x29e <fan_time_fnd_display+0x136>
	{
		case 0 :
		FND_DIGIT_PORT = ~0x80;
     1b2:	8f e7       	ldi	r24, 0x7F	; 127
     1b4:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count % 10];   // 0~9초
     1b6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <sec_count>
     1ba:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <sec_count+0x1>
     1be:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <sec_count+0x2>
     1c2:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <sec_count+0x3>
     1c6:	2a e0       	ldi	r18, 0x0A	; 10
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e0       	ldi	r20, 0x00	; 0
     1cc:	50 e0       	ldi	r21, 0x00	; 0
     1ce:	2d d5       	rcall	.+2650   	; 0xc2a <__udivmodsi4>
     1d0:	e1 e0       	ldi	r30, 0x01	; 1
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	ec 0f       	add	r30, r28
     1d6:	fd 1f       	adc	r31, r29
     1d8:	e6 0f       	add	r30, r22
     1da:	f7 1f       	adc	r31, r23
     1dc:	80 81       	ld	r24, Z
     1de:	85 bb       	out	0x15, r24	; 21
		break;
     1e0:	5e c0       	rjmp	.+188    	; 0x29e <fan_time_fnd_display+0x136>

		case 1 :
		FND_DIGIT_PORT = ~0x40;
     1e2:	8f eb       	ldi	r24, 0xBF	; 191
     1e4:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count / 10 % 6]; // 10단위 초
     1e6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <sec_count>
     1ea:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <sec_count+0x1>
     1ee:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <sec_count+0x2>
     1f2:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <sec_count+0x3>
     1f6:	2a e0       	ldi	r18, 0x0A	; 10
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	15 d5       	rcall	.+2602   	; 0xc2a <__udivmodsi4>
     200:	ca 01       	movw	r24, r20
     202:	b9 01       	movw	r22, r18
     204:	26 e0       	ldi	r18, 0x06	; 6
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	40 e0       	ldi	r20, 0x00	; 0
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	0e d5       	rcall	.+2588   	; 0xc2a <__udivmodsi4>
     20e:	e1 e0       	ldi	r30, 0x01	; 1
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	ec 0f       	add	r30, r28
     214:	fd 1f       	adc	r31, r29
     216:	e6 0f       	add	r30, r22
     218:	f7 1f       	adc	r31, r23
     21a:	80 81       	ld	r24, Z
     21c:	85 bb       	out	0x15, r24	; 21
		break;
     21e:	3f c0       	rjmp	.+126    	; 0x29e <fan_time_fnd_display+0x136>

		case 2 :
		FND_DIGIT_PORT = ~0x20;
     220:	8f ed       	ldi	r24, 0xDF	; 223
     222:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count / 60 % 10] | fnd_font[10]; // 1단위 분
     224:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <sec_count>
     228:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <sec_count+0x1>
     22c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <sec_count+0x2>
     230:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <sec_count+0x3>
     234:	2c e3       	ldi	r18, 0x3C	; 60
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	f6 d4       	rcall	.+2540   	; 0xc2a <__udivmodsi4>
     23e:	ca 01       	movw	r24, r20
     240:	b9 01       	movw	r22, r18
     242:	2a e0       	ldi	r18, 0x0A	; 10
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	50 e0       	ldi	r21, 0x00	; 0
     24a:	ef d4       	rcall	.+2526   	; 0xc2a <__udivmodsi4>
     24c:	e1 e0       	ldi	r30, 0x01	; 1
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	ec 0f       	add	r30, r28
     252:	fd 1f       	adc	r31, r29
     254:	e6 0f       	add	r30, r22
     256:	f7 1f       	adc	r31, r23
     258:	90 81       	ld	r25, Z
     25a:	8b 85       	ldd	r24, Y+11	; 0x0b
     25c:	89 2b       	or	r24, r25
     25e:	85 bb       	out	0x15, r24	; 21
		break;
     260:	1e c0       	rjmp	.+60     	; 0x29e <fan_time_fnd_display+0x136>

		case 3 :
		FND_DIGIT_PORT = ~0x10;
     262:	8f ee       	ldi	r24, 0xEF	; 239
     264:	88 bb       	out	0x18, r24	; 24
		FND_DATA_PORT = fnd_font[sec_count / 600 % 10]; // 10단위 분
     266:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <sec_count>
     26a:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <sec_count+0x1>
     26e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <sec_count+0x2>
     272:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <sec_count+0x3>
     276:	28 e5       	ldi	r18, 0x58	; 88
     278:	32 e0       	ldi	r19, 0x02	; 2
     27a:	40 e0       	ldi	r20, 0x00	; 0
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	d5 d4       	rcall	.+2474   	; 0xc2a <__udivmodsi4>
     280:	ca 01       	movw	r24, r20
     282:	b9 01       	movw	r22, r18
     284:	2a e0       	ldi	r18, 0x0A	; 10
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	ce d4       	rcall	.+2460   	; 0xc2a <__udivmodsi4>
     28e:	e1 e0       	ldi	r30, 0x01	; 1
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	ec 0f       	add	r30, r28
     294:	fd 1f       	adc	r31, r29
     296:	e6 0f       	add	r30, r22
     298:	f7 1f       	adc	r31, r23
     29a:	80 81       	ld	r24, Z
     29c:	85 bb       	out	0x15, r24	; 21
		break;
	}
	digit_select++;
     29e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <digit_select.1757>
     2a2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <digit_select.1757+0x1>
     2a6:	01 96       	adiw	r24, 0x01	; 1
	digit_select %= 4; //다음 표시할 자리수 선택
     2a8:	83 70       	andi	r24, 0x03	; 3
     2aa:	90 78       	andi	r25, 0x80	; 128
     2ac:	99 23       	and	r25, r25
     2ae:	24 f4       	brge	.+8      	; 0x2b8 <fan_time_fnd_display+0x150>
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	8c 6f       	ori	r24, 0xFC	; 252
     2b4:	9f 6f       	ori	r25, 0xFF	; 255
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <digit_select.1757+0x1>
     2bc:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <digit_select.1757>
}
     2c0:	2b 96       	adiw	r28, 0x0b	; 11
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	f8 94       	cli
     2c6:	de bf       	out	0x3e, r29	; 62
     2c8:	0f be       	out	0x3f, r0	; 63
     2ca:	cd bf       	out	0x3d, r28	; 61
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     2d2:	1f 92       	push	r1
     2d4:	0f 92       	push	r0
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	0f 92       	push	r0
     2da:	11 24       	eor	r1, r1
     2dc:	8f 93       	push	r24
     2de:	9f 93       	push	r25
     2e0:	af 93       	push	r26
     2e2:	bf 93       	push	r27
	TCNT0=6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
     2e4:	86 e0       	ldi	r24, 0x06	; 6
     2e6:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 감소
     2e8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <msec_count>
     2ec:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <msec_count+0x1>
     2f0:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <msec_count+0x2>
     2f4:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <msec_count+0x3>
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	a1 1d       	adc	r26, r1
     2fc:	b1 1d       	adc	r27, r1
     2fe:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <msec_count>
     302:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <msec_count+0x1>
     306:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <msec_count+0x2>
     30a:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <msec_count+0x3>
	fnd_refreshrate++;
     30e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <fnd_refreshrate>
     312:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <fnd_refreshrate+0x1>
     316:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <fnd_refreshrate+0x2>
     31a:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <fnd_refreshrate+0x3>
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	a1 1d       	adc	r26, r1
     322:	b1 1d       	adc	r27, r1
     324:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <fnd_refreshrate>
     328:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <fnd_refreshrate+0x1>
     32c:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <fnd_refreshrate+0x2>
     330:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <fnd_refreshrate+0x3>
}
     334:	bf 91       	pop	r27
     336:	af 91       	pop	r26
     338:	9f 91       	pop	r25
     33a:	8f 91       	pop	r24
     33c:	0f 90       	pop	r0
     33e:	0f be       	out	0x3f, r0	; 63
     340:	0f 90       	pop	r0
     342:	1f 90       	pop	r1
     344:	18 95       	reti

00000346 <init_timer0>:
	// 1. 분주비 계산
	// 16000000HZ/64 ==> 250,000HZ
	// 2. T(주기) 1가 잡아 먹는 시간 : 1/f = 1/250,000 ==> 0.000004sec(4us) : 0.004ms
	// 3. 8bit timer OV(OVflow) : 0.004ms x 256 = 0.001024sec --> 1.024ms
	// 그러면 정확히 1ms 를 재고 싶다면 0.004ms x 250개 = 0.001sec ==> 1ms
	TCNT0 = 6;   // TCNT : 0~256 ==> 1ms마다 TIMER0_OVF_vect로 진입한다.
     346:	86 e0       	ldi	r24, 0x06	; 6
     348:	82 bf       	out	0x32, r24	; 50
	// TCNT0 = 6로 설정을 한이유: 6~256 : 250개를 count(정확히 1MS를맞추기 위해서)
	//
	// 4 분주비를 설정 (250khz)
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;
     34a:	83 b7       	in	r24, 0x33	; 51
     34c:	84 60       	ori	r24, 0x04	; 4
     34e:	83 bf       	out	0x33, r24	; 51
	// 5. TIMER0 OVERFLOW를 허용(enable)
	TIMSK |= 1 << TOIE0;  // TIMSK |= 0x01;
     350:	87 b7       	in	r24, 0x37	; 55
     352:	81 60       	ori	r24, 0x01	; 1
     354:	87 bf       	out	0x37, r24	; 55
     356:	08 95       	ret

00000358 <main>:
	fnd_refreshrate++;
}

int main(void)
{
	init_timer0();
     358:	f6 df       	rcall	.-20     	; 0x346 <init_timer0>
	init_uart0();
     35a:	b4 d1       	rcall	.+872    	; 0x6c4 <init_uart0>
	init_uart1();
     35c:	46 d2       	rcall	.+1164   	; 0x7ea <init_uart1>
	init_ultrasonic();
     35e:	b6 d2       	rcall	.+1388   	; 0x8cc <init_ultrasonic>
     360:	fc de       	rcall	.-520    	; 0x15a <init_fnd>
	init_fnd();
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	91 e0       	ldi	r25, 0x01	; 1
	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT파일 포인터 assign
     366:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <__iob+0x3>
     36a:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <__iob+0x2>
     36e:	8f ef       	ldi	r24, 0xFF	; 255
	
	DDRA=0xff;   // led를 출력 모드로
     370:	8a bb       	out	0x1a, r24	; 26
     372:	78 94       	sei
	sei();     // 전역적으로 interrupt 허용
     374:	c2 d0       	rcall	.+388    	; 0x4fa <hw_pwm_fan_control>
	
	hw_pwm_fan_control();
     376:	ff cf       	rjmp	.-2      	; 0x376 <main+0x1e>

00000378 <fan_start>:
     378:	8f e7       	ldi	r24, 0x7F	; 127
     37a:	90 e0       	ldi	r25, 0x00	; 0
	}
}

void fan_start(void)
{
	OCR3C = 127;
     37c:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     380:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	if (sec_count == 0)
     384:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sec_count>
     388:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <sec_count+0x1>
     38c:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <sec_count+0x2>
     390:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <sec_count+0x3>
     394:	89 2b       	or	r24, r25
     396:	8a 2b       	or	r24, r26
     398:	8b 2b       	or	r24, r27
     39a:	41 f4       	brne	.+16     	; 0x3ac <fan_start+0x34>
	{
		fan_state=STOP;
     39c:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <fan_state+0x1>
     3a0:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <fan_state>
		OCR3C=0;
     3a4:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     3a8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	}
	if (msec_count >= 1000)
     3ac:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <msec_count>
     3b0:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <msec_count+0x1>
     3b4:	a0 91 40 01 	lds	r26, 0x0140	; 0x800140 <msec_count+0x2>
     3b8:	b0 91 41 01 	lds	r27, 0x0141	; 0x800141 <msec_count+0x3>
     3bc:	88 3e       	cpi	r24, 0xE8	; 232
     3be:	93 40       	sbci	r25, 0x03	; 3
     3c0:	a1 05       	cpc	r26, r1
     3c2:	b1 05       	cpc	r27, r1
     3c4:	d8 f0       	brcs	.+54     	; 0x3fc <fan_start+0x84>
	{
		msec_count = 0;
     3c6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <msec_count>
     3ca:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <msec_count+0x1>
     3ce:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <msec_count+0x2>
     3d2:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <msec_count+0x3>
		sec_count--;	
     3d6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sec_count>
     3da:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <sec_count+0x1>
     3de:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <sec_count+0x2>
     3e2:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <sec_count+0x3>
     3e6:	01 97       	sbiw	r24, 0x01	; 1
     3e8:	a1 09       	sbc	r26, r1
     3ea:	b1 09       	sbc	r27, r1
     3ec:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <sec_count>
     3f0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <sec_count+0x1>
     3f4:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <sec_count+0x2>
     3f8:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <sec_count+0x3>
     3fc:	08 95       	ret

000003fe <fan_stop>:

}

void fan_stop(void)
{
	OCR3C = 0; // 중지
     3fe:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     402:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     406:	08 95       	ret

00000408 <time_setting_mode>:
}

void time_setting_mode(void)
{
	while(return_enable)
     408:	58 c0       	rjmp	.+176    	; 0x4ba <time_setting_mode+0xb2>
	{
		if (get_button(BUTTON0, BUTTON0PIN))
     40a:	64 e0       	ldi	r22, 0x04	; 4
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	5f de       	rcall	.-834    	; 0xd2 <get_button>
     414:	89 2b       	or	r24, r25
     416:	99 f0       	breq	.+38     	; 0x43e <time_setting_mode+0x36>
		{
			sec_count++;
     418:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sec_count>
     41c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <sec_count+0x1>
     420:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <sec_count+0x2>
     424:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <sec_count+0x3>
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	a1 1d       	adc	r26, r1
     42c:	b1 1d       	adc	r27, r1
     42e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <sec_count>
     432:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <sec_count+0x1>
     436:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <sec_count+0x2>
     43a:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <sec_count+0x3>
		}
		if (get_button(BUTTON1, BUTTON1PIN))
     43e:	65 e0       	ldi	r22, 0x05	; 5
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	45 de       	rcall	.-886    	; 0xd2 <get_button>
     448:	89 2b       	or	r24, r25
     44a:	99 f0       	breq	.+38     	; 0x472 <time_setting_mode+0x6a>
		{
			sec_count += 60;
     44c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <sec_count>
     450:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <sec_count+0x1>
     454:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <sec_count+0x2>
     458:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <sec_count+0x3>
     45c:	cc 96       	adiw	r24, 0x3c	; 60
     45e:	a1 1d       	adc	r26, r1
     460:	b1 1d       	adc	r27, r1
     462:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <sec_count>
     466:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <sec_count+0x1>
     46a:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <sec_count+0x2>
     46e:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <sec_count+0x3>
		}
		if (get_button(BUTTON3, BUTTON3PIN))
     472:	67 e0       	ldi	r22, 0x07	; 7
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	2b de       	rcall	.-938    	; 0xd2 <get_button>
     47c:	89 2b       	or	r24, r25
     47e:	41 f0       	breq	.+16     	; 0x490 <time_setting_mode+0x88>
		{
			return_enable = 0;
     480:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <return_enable+0x1>
     484:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <return_enable>
			fan_state = STOP;
     488:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <fan_state+0x1>
     48c:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <fan_state>
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     490:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <fnd_refreshrate>
     494:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <fnd_refreshrate+0x1>
     498:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <fnd_refreshrate+0x2>
     49c:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <fnd_refreshrate+0x3>
     4a0:	02 97       	sbiw	r24, 0x02	; 2
     4a2:	a1 05       	cpc	r26, r1
     4a4:	b1 05       	cpc	r27, r1
     4a6:	48 f0       	brcs	.+18     	; 0x4ba <time_setting_mode+0xb2>
		{
			fnd_refreshrate = 0;
     4a8:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <fnd_refreshrate>
     4ac:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <fnd_refreshrate+0x1>
     4b0:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <fnd_refreshrate+0x2>
     4b4:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <fnd_refreshrate+0x3>
			fan_time_fnd_display();
     4b8:	57 de       	rcall	.-850    	; 0x168 <fan_time_fnd_display>
	OCR3C = 0; // 중지
}

void time_setting_mode(void)
{
	while(return_enable)
     4ba:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <return_enable>
     4be:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <return_enable+0x1>
     4c2:	89 2b       	or	r24, r25
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <time_setting_mode+0xc0>
     4c6:	a1 cf       	rjmp	.-190    	; 0x40a <time_setting_mode+0x2>
		{
			fnd_refreshrate = 0;
			fan_time_fnd_display();
		}
	}
     4c8:	08 95       	ret

000004ca <init_timer3_pwm>:
int return_enable = 1;

void init_timer3_pwm(void)
{
	// DDRE |= 1 << 3 | 1 << 4 | 1 << 5; 현재 4번에 초음파가 연결되어 있다.
	DDRE |= 1 << 3 | 1 << 5;
     4ca:	82 b1       	in	r24, 0x02	; 2
     4cc:	88 62       	ori	r24, 0x28	; 40
     4ce:	82 b9       	out	0x02, r24	; 2
	// 모드 5 : 8비트 고속 pwm    TCCR3A레지스터 WGM30과 TCCR3B레지스터 WGM32를 1로 만든다.
	TCCR3A |= 1 << WGM30;
     4d0:	ab e8       	ldi	r26, 0x8B	; 139
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	8c 91       	ld	r24, X
     4d6:	81 60       	ori	r24, 0x01	; 1
     4d8:	8c 93       	st	X, r24
	TCCR3B |= 1 << WGM32;
     4da:	ea e8       	ldi	r30, 0x8A	; 138
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	88 60       	ori	r24, 0x08	; 8
     4e2:	80 83       	st	Z, r24
	// 비반전모드 top : 0x00ff  비교일치값(pwm)지정 : OCR3C
	// TCCR3A레지스터의 COM3C1을 1로 set
	// 비교일치 발생시 OC3C의 출력 핀은 LOw로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR3A |= 1 << COM3C1;
     4e4:	8c 91       	ld	r24, X
     4e6:	88 60       	ori	r24, 0x08	; 8
     4e8:	8c 93       	st	X, r24
	// 분주비 : 64   16,000,000hz -> 250,000hz         TCCR3B의 CS30, CS31을 1로 set
	// 주기 : 1 / 250,000 -> 4us
	// 250000hz에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//			    127개의 펄스를 count하면 소요시간 : 0.51ms
	TCCR3B |= 1 << CS31 | 1 << CS30;
     4ea:	80 81       	ld	r24, Z
     4ec:	83 60       	ori	r24, 0x03	; 3
     4ee:	80 83       	st	Z, r24
	OCR3C = 0; // 비교일치값 (Output Compare Register : PWM 값
     4f0:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     4f4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     4f8:	08 95       	ret

000004fa <hw_pwm_fan_control>:
}

void hw_pwm_fan_control(void)
{
	init_button(); // button 초기화
     4fa:	e7 dd       	rcall	.-1074   	; 0xca <init_button>
	
	int button0_state = 0;
	int button3_state = 0;

	init_timer3_pwm();
     4fc:	e6 df       	rcall	.-52     	; 0x4ca <init_timer3_pwm>
     4fe:	c0 e0       	ldi	r28, 0x00	; 0

void hw_pwm_fan_control(void)
{
	init_button(); // button 초기화
	
	int button0_state = 0;
     500:	d0 e0       	ldi	r29, 0x00	; 0
     502:	64 e0       	ldi	r22, 0x04	; 4

	init_timer3_pwm();
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // start/stop
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	e3 dd       	rcall	.-1082   	; 0xd2 <get_button>
     50c:	89 2b       	or	r24, r25
     50e:	c1 f0       	breq	.+48     	; 0x540 <hw_pwm_fan_control+0x46>
     510:	81 e0       	ldi	r24, 0x01	; 1
		{
			button0_state = !button0_state; // 반전 toggle
     512:	20 97       	sbiw	r28, 0x00	; 0
     514:	09 f0       	breq	.+2      	; 0x518 <hw_pwm_fan_control+0x1e>
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	cd 2b       	or	r28, r29
			if (button0_state)
     51c:	61 f4       	brne	.+24     	; 0x536 <hw_pwm_fan_control+0x3c>
     51e:	21 e0       	ldi	r18, 0x01	; 1
			{
				fan_state = START;
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <fan_state+0x1>
     526:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <fan_state>
     52a:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <return_enable+0x1>
				return_enable = 1;
     52e:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <return_enable>
     532:	ec 01       	movw	r28, r24
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // start/stop
		{
			button0_state = !button0_state; // 반전 toggle
     534:	05 c0       	rjmp	.+10     	; 0x540 <hw_pwm_fan_control+0x46>
     536:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <fan_state+0x1>
				fan_state = START;
				return_enable = 1;
			}
			else
			{
				fan_state = STOP;
     53a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <fan_state>
     53e:	ec 01       	movw	r28, r24
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // start/stop
		{
			button0_state = !button0_state; // 반전 toggle
     540:	66 e0       	ldi	r22, 0x06	; 6
			else
			{
				fan_state = STOP;
			}
		}
		if (get_button(BUTTON2, BUTTON2PIN)) // reset
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	c4 dd       	rcall	.-1144   	; 0xd2 <get_button>
     54a:	89 2b       	or	r24, r25
     54c:	61 f0       	breq	.+24     	; 0x566 <hw_pwm_fan_control+0x6c>
     54e:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <sec_count>
		{
			sec_count = 0;
     552:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <sec_count+0x1>
     556:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <sec_count+0x2>
     55a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <sec_count+0x3>
     55e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <fan_state+0x1>
			fan_state = STOP;
     562:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <fan_state>
     566:	67 e0       	ldi	r22, 0x07	; 7
		}
		if (get_button(BUTTON3, BUTTON3PIN))
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	b1 dd       	rcall	.-1182   	; 0xd2 <get_button>
     570:	89 2b       	or	r24, r25
     572:	41 f0       	breq	.+16     	; 0x584 <hw_pwm_fan_control+0x8a>
     574:	82 e0       	ldi	r24, 0x02	; 2
		{
			button0_state = 0;
			fan_state = SETTING;
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <fan_state+0x1>
     57c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <fan_state>
     580:	c0 e0       	ldi	r28, 0x00	; 0
			sec_count = 0;
			fan_state = STOP;
		}
		if (get_button(BUTTON3, BUTTON3PIN))
		{
			button0_state = 0;
     582:	d0 e0       	ldi	r29, 0x00	; 0
     584:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <fnd_refreshrate>
			fan_state = SETTING;
		}
		if (fnd_refreshrate >= 2) // 2ms 주기로 fnd를 display
     588:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <fnd_refreshrate+0x1>
     58c:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <fnd_refreshrate+0x2>
     590:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <fnd_refreshrate+0x3>
     594:	02 97       	sbiw	r24, 0x02	; 2
     596:	a1 05       	cpc	r26, r1
     598:	b1 05       	cpc	r27, r1
     59a:	48 f0       	brcs	.+18     	; 0x5ae <hw_pwm_fan_control+0xb4>
     59c:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <fnd_refreshrate>
		{
			fnd_refreshrate = 0;
     5a0:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <fnd_refreshrate+0x1>
     5a4:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <fnd_refreshrate+0x2>
     5a8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <fnd_refreshrate+0x3>
			fan_time_fnd_display();
     5ac:	dd dd       	rcall	.-1094   	; 0x168 <fan_time_fnd_display>
     5ae:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <fan_state>
		}
		(*fan_fp[fan_state])();
     5b2:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <fan_state+0x1>
     5b6:	ee 0f       	add	r30, r30
     5b8:	ff 1f       	adc	r31, r31
     5ba:	e0 5f       	subi	r30, 0xF0	; 240
     5bc:	fe 4f       	sbci	r31, 0xFE	; 254
     5be:	01 90       	ld	r0, Z+
     5c0:	f0 81       	ld	r31, Z
     5c2:	e0 2d       	mov	r30, r0
     5c4:	09 95       	icall
     5c6:	9d cf       	rjmp	.-198    	; 0x502 <hw_pwm_fan_control+0x8>

000005c8 <__vector_18>:
	}
     5c8:	1f 92       	push	r1

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     5ca:	0f 92       	push	r0
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	0f 92       	push	r0
     5d0:	11 24       	eor	r1, r1
     5d2:	0b b6       	in	r0, 0x3b	; 59
     5d4:	0f 92       	push	r0
     5d6:	2f 93       	push	r18
     5d8:	3f 93       	push	r19
     5da:	4f 93       	push	r20
     5dc:	5f 93       	push	r21
     5de:	6f 93       	push	r22
     5e0:	7f 93       	push	r23
     5e2:	8f 93       	push	r24
     5e4:	9f 93       	push	r25
     5e6:	af 93       	push	r26
     5e8:	bf 93       	push	r27
     5ea:	ef 93       	push	r30
     5ec:	ff 93       	push	r31
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	1f 92       	push	r1
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     5f8:	8c b1       	in	r24, 0x0c	; 12
     5fa:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	8d 30       	cpi	r24, 0x0D	; 13
     600:	19 f0       	breq	.+6      	; 0x608 <__vector_18+0x40>
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	8a 30       	cpi	r24, 0x0A	; 10
     606:	61 f5       	brne	.+88     	; 0x660 <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     608:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <rear>
     60c:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <rear+0x1>
     610:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <i.1894>
     614:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <i.1894+0x1>
     618:	40 e5       	ldi	r20, 0x50	; 80
     61a:	42 9f       	mul	r20, r18
     61c:	f0 01       	movw	r30, r0
     61e:	43 9f       	mul	r20, r19
     620:	f0 0d       	add	r31, r0
     622:	11 24       	eor	r1, r1
     624:	e2 5b       	subi	r30, 0xB2	; 178
     626:	fe 4f       	sbci	r31, 0xFE	; 254
     628:	e8 0f       	add	r30, r24
     62a:	f9 1f       	adc	r31, r25
     62c:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     62e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <i.1894+0x1>
     632:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <i.1894>
		rear++;
     636:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <rear>
     63a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <rear+0x1>
     63e:	01 96       	adiw	r24, 0x01	; 1
     640:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <rear+0x1>
     644:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
     648:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <rear>
     64c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <rear+0x1>
     650:	6a e0       	ldi	r22, 0x0A	; 10
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	d7 d2       	rcall	.+1454   	; 0xc04 <__divmodhi4>
     656:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <rear+0x1>
     65a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <rear>
     65e:	1c c0       	rjmp	.+56     	; 0x698 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
     660:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <rear>
     664:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <rear+0x1>
     668:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <i.1894>
     66c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <i.1894+0x1>
     670:	9c 01       	movw	r18, r24
     672:	2f 5f       	subi	r18, 0xFF	; 255
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <i.1894+0x1>
     67a:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <i.1894>
     67e:	49 81       	ldd	r20, Y+1	; 0x01
     680:	50 e5       	ldi	r21, 0x50	; 80
     682:	56 9f       	mul	r21, r22
     684:	90 01       	movw	r18, r0
     686:	57 9f       	mul	r21, r23
     688:	30 0d       	add	r19, r0
     68a:	11 24       	eor	r1, r1
     68c:	22 5b       	subi	r18, 0xB2	; 178
     68e:	3e 4f       	sbci	r19, 0xFE	; 254
     690:	f9 01       	movw	r30, r18
     692:	e8 0f       	add	r30, r24
     694:	f9 1f       	adc	r31, r25
     696:	40 83       	st	Z, r20
	}
		  
}
     698:	0f 90       	pop	r0
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	ff 91       	pop	r31
     6a0:	ef 91       	pop	r30
     6a2:	bf 91       	pop	r27
     6a4:	af 91       	pop	r26
     6a6:	9f 91       	pop	r25
     6a8:	8f 91       	pop	r24
     6aa:	7f 91       	pop	r23
     6ac:	6f 91       	pop	r22
     6ae:	5f 91       	pop	r21
     6b0:	4f 91       	pop	r20
     6b2:	3f 91       	pop	r19
     6b4:	2f 91       	pop	r18
     6b6:	0f 90       	pop	r0
     6b8:	0b be       	out	0x3b, r0	; 59
     6ba:	0f 90       	pop	r0
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	0f 90       	pop	r0
     6c0:	1f 90       	pop	r1
     6c2:	18 95       	reti

000006c4 <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
     6c4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
     6c8:	8f ec       	ldi	r24, 0xCF	; 207
     6ca:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
     6cc:	8b b1       	in	r24, 0x0b	; 11
     6ce:	82 60       	ori	r24, 0x02	; 2
     6d0:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     6d2:	e5 e9       	ldi	r30, 0x95	; 149
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	86 60       	ori	r24, 0x06	; 6
     6da:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     6dc:	8a b1       	in	r24, 0x0a	; 10
     6de:	88 69       	ori	r24, 0x98	; 152
     6e0:	8a b9       	out	0x0a, r24	; 10
     6e2:	08 95       	ret

000006e4 <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
     6e4:	5d 9b       	sbis	0x0b, 5	; 11
     6e6:	fe cf       	rjmp	.-4      	; 0x6e4 <UART0_transmit>
		;   // no operation NOP
	
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
     6e8:	8c b9       	out	0x0c, r24	; 12
     6ea:	08 95       	ret

000006ec <__vector_30>:

// BT로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART1_RX_vect)
{
     6ec:	1f 92       	push	r1
     6ee:	0f 92       	push	r0
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	0f 92       	push	r0
     6f4:	11 24       	eor	r1, r1
     6f6:	0b b6       	in	r0, 0x3b	; 59
     6f8:	0f 92       	push	r0
     6fa:	2f 93       	push	r18
     6fc:	3f 93       	push	r19
     6fe:	4f 93       	push	r20
     700:	5f 93       	push	r21
     702:	6f 93       	push	r22
     704:	7f 93       	push	r23
     706:	8f 93       	push	r24
     708:	9f 93       	push	r25
     70a:	af 93       	push	r26
     70c:	bf 93       	push	r27
     70e:	ef 93       	push	r30
     710:	ff 93       	push	r31
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	1f 92       	push	r1
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR1;  // uart0의 H/W register(UDR1)로 부터 1 byte를 읽어 간다. 
     71c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     720:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR1를 실행 하면 UDR1의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	8d 30       	cpi	r24, 0x0D	; 13
     726:	19 f0       	breq	.+6      	; 0x72e <__vector_30+0x42>
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	8a 30       	cpi	r24, 0x0A	; 10
     72c:	61 f5       	brne	.+88     	; 0x786 <__vector_30+0x9a>
	{
		rx1_buff[rear1][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     72e:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <rear1>
     732:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <rear1+0x1>
     736:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <i.1896>
     73a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <i.1896+0x1>
     73e:	40 e5       	ldi	r20, 0x50	; 80
     740:	42 9f       	mul	r20, r18
     742:	f0 01       	movw	r30, r0
     744:	43 9f       	mul	r20, r19
     746:	f0 0d       	add	r31, r0
     748:	11 24       	eor	r1, r1
     74a:	e2 59       	subi	r30, 0x92	; 146
     74c:	fb 4f       	sbci	r31, 0xFB	; 251
     74e:	e8 0f       	add	r30, r24
     750:	f9 1f       	adc	r31, r25
     752:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     754:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <i.1896+0x1>
     758:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <i.1896>
		rear1++;
     75c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <rear1>
     760:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <rear1+0x1>
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <rear1+0x1>
     76a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <rear1>
		rear1 %= COMMAND_NUMBER;   // 0 ~ 9 if (rear1 >= 9) rear1 =0;
     76e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <rear1>
     772:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <rear1+0x1>
     776:	6a e0       	ldi	r22, 0x0A	; 10
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	44 d2       	rcall	.+1160   	; 0xc04 <__divmodhi4>
     77c:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <rear1+0x1>
     780:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <rear1>
     784:	1c c0       	rjmp	.+56     	; 0x7be <__vector_30+0xd2>
		// !!!! 이곳에 queue full (rx1_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx1_buff[rear1][i++] = data;
     786:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <rear1>
     78a:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <rear1+0x1>
     78e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <i.1896>
     792:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <i.1896+0x1>
     796:	9c 01       	movw	r18, r24
     798:	2f 5f       	subi	r18, 0xFF	; 255
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	30 93 49 01 	sts	0x0149, r19	; 0x800149 <i.1896+0x1>
     7a0:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <i.1896>
     7a4:	49 81       	ldd	r20, Y+1	; 0x01
     7a6:	50 e5       	ldi	r21, 0x50	; 80
     7a8:	56 9f       	mul	r21, r22
     7aa:	90 01       	movw	r18, r0
     7ac:	57 9f       	mul	r21, r23
     7ae:	30 0d       	add	r19, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	22 59       	subi	r18, 0x92	; 146
     7b4:	3b 4f       	sbci	r19, 0xFB	; 251
     7b6:	f9 01       	movw	r30, r18
     7b8:	e8 0f       	add	r30, r24
     7ba:	f9 1f       	adc	r31, r25
     7bc:	40 83       	st	Z, r20
	}
		  
}
     7be:	0f 90       	pop	r0
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	ff 91       	pop	r31
     7c6:	ef 91       	pop	r30
     7c8:	bf 91       	pop	r27
     7ca:	af 91       	pop	r26
     7cc:	9f 91       	pop	r25
     7ce:	8f 91       	pop	r24
     7d0:	7f 91       	pop	r23
     7d2:	6f 91       	pop	r22
     7d4:	5f 91       	pop	r21
     7d6:	4f 91       	pop	r20
     7d8:	3f 91       	pop	r19
     7da:	2f 91       	pop	r18
     7dc:	0f 90       	pop	r0
     7de:	0b be       	out	0x3b, r0	; 59
     7e0:	0f 90       	pop	r0
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	0f 90       	pop	r0
     7e6:	1f 90       	pop	r1
     7e8:	18 95       	reti

000007ea <init_uart1>:
3. RX(수신) : interrupt 방식 
*/
void init_uart1(void)
{
	// 1. 9600bps 설정
	UBRR1H = 0x00;
     7ea:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 207;   // 9600bps 표9-9
     7ee:	8f ec       	ldi	r24, 0xCF	; 207
     7f0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	// 2배속 통신
	UCSR1A |= 1 << U2X1; // 2배속 통신
     7f4:	eb e9       	ldi	r30, 0x9B	; 155
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	82 60       	ori	r24, 0x02	; 2
     7fc:	80 83       	st	Z, r24
	UCSR1C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     7fe:	ed e9       	ldi	r30, 0x9D	; 157
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	86 60       	ori	r24, 0x06	; 6
     806:	80 83       	st	Z, r24
	// RXEN1 : UART1으로 부터 수신이 가능 하도록
	// TXEN1 : UART1으로 부터 송신이 가능 하도록 한다. 
	// RXCIE1 : UART1로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR1B |= 1 << RXEN1 | 1 << TXEN1 | 1 << RXCIE1;
     808:	ea e9       	ldi	r30, 0x9A	; 154
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z
     80e:	88 69       	ori	r24, 0x98	; 152
     810:	80 83       	st	Z, r24
     812:	08 95       	ret

00000814 <__vector_5>:
char scm[50];

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect)
{
     814:	1f 92       	push	r1
     816:	0f 92       	push	r0
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	0f 92       	push	r0
     81c:	11 24       	eor	r1, r1
     81e:	0b b6       	in	r0, 0x3b	; 59
     820:	0f 92       	push	r0
     822:	2f 93       	push	r18
     824:	3f 93       	push	r19
     826:	4f 93       	push	r20
     828:	5f 93       	push	r21
     82a:	6f 93       	push	r22
     82c:	7f 93       	push	r23
     82e:	8f 93       	push	r24
     830:	9f 93       	push	r25
     832:	af 93       	push	r26
     834:	bf 93       	push	r27
     836:	ef 93       	push	r30
     838:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN & (1 << ECHO))
     83a:	0c 9b       	sbis	0x01, 4	; 1
     83c:	03 c0       	rjmp	.+6      	; 0x844 <__vector_5+0x30>
	{
		TCNT1 = 0;
     83e:	1d bc       	out	0x2d, r1	; 45
     840:	1c bc       	out	0x2c, r1	; 44
     842:	31 c0       	rjmp	.+98     	; 0x8a6 <__vector_5+0x92>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
     844:	6c b5       	in	r22, 0x2c	; 44
     846:	7d b5       	in	r23, 0x2d	; 45
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	ea d0       	rcall	.+468    	; 0xa22 <__floatunsisf>
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	34 e2       	ldi	r19, 0x24	; 36
     852:	44 e7       	ldi	r20, 0x74	; 116
     854:	59 e4       	ldi	r21, 0x49	; 73
     856:	73 d1       	rcall	.+742    	; 0xb3e <__mulsf3>
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	40 e8       	ldi	r20, 0x80	; 128
     85e:	54 e4       	ldi	r21, 0x44	; 68
     860:	6e d1       	rcall	.+732    	; 0xb3e <__mulsf3>
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	34 e2       	ldi	r19, 0x24	; 36
     866:	44 e7       	ldi	r20, 0x74	; 116
     868:	5b e4       	ldi	r21, 0x4B	; 75
     86a:	42 d0       	rcall	.+132    	; 0x8f0 <__divsf3>
     86c:	a9 d0       	rcall	.+338    	; 0x9c0 <__fixsfsi>
     86e:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <ultrasonic_distance+0x1>
     872:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <ultrasonic_distance>
		
		// 예) TCNT1에 10이 들어 있다고 가정하자
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
		sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
     876:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <ultrasonic_distance>
     87a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <ultrasonic_distance+0x1>
     87e:	6a e3       	ldi	r22, 0x3A	; 58
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	c0 d1       	rcall	.+896    	; 0xc04 <__divmodhi4>
     884:	7f 93       	push	r23
     886:	6f 93       	push	r22
     888:	81 e2       	ldi	r24, 0x21	; 33
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	9f 93       	push	r25
     88e:	8f 93       	push	r24
     890:	8e e8       	ldi	r24, 0x8E	; 142
     892:	97 e0       	ldi	r25, 0x07	; 7
     894:	9f 93       	push	r25
     896:	8f 93       	push	r24
     898:	fe d1       	rcall	.+1020   	; 0xc96 <sprintf>
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
	}
}
     8a6:	ff 91       	pop	r31
     8a8:	ef 91       	pop	r30
     8aa:	bf 91       	pop	r27
     8ac:	af 91       	pop	r26
     8ae:	9f 91       	pop	r25
     8b0:	8f 91       	pop	r24
     8b2:	7f 91       	pop	r23
     8b4:	6f 91       	pop	r22
     8b6:	5f 91       	pop	r21
     8b8:	4f 91       	pop	r20
     8ba:	3f 91       	pop	r19
     8bc:	2f 91       	pop	r18
     8be:	0f 90       	pop	r0
     8c0:	0b be       	out	0x3b, r0	; 59
     8c2:	0f 90       	pop	r0
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	0f 90       	pop	r0
     8c8:	1f 90       	pop	r1
     8ca:	18 95       	reti

000008cc <init_ultrasonic>:

void init_ultrasonic()
{
	TRIG_DDR |= 1 << TRIG; // output mode로 설정
     8cc:	e4 e6       	ldi	r30, 0x64	; 100
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	80 81       	ld	r24, Z
     8d2:	80 61       	ori	r24, 0x10	; 16
     8d4:	80 83       	st	Z, r24
	ECHO_DDR &= ~(1 << ECHO); // input mode로 설정
     8d6:	82 b1       	in	r24, 0x02	; 2
     8d8:	8f 7e       	andi	r24, 0xEF	; 239
     8da:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
     8dc:	8a b7       	in	r24, 0x3a	; 58
     8de:	81 60       	ori	r24, 0x01	; 1
     8e0:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us	
	TCCR1B |=  1 << CS12 | 1 << CS10; // 1024로 분주
     8e2:	8e b5       	in	r24, 0x2e	; 46
     8e4:	85 60       	ori	r24, 0x05	; 5
     8e6:	8e bd       	out	0x2e, r24	; 46
	EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
     8e8:	89 b7       	in	r24, 0x39	; 57
     8ea:	80 61       	ori	r24, 0x10	; 16
     8ec:	89 bf       	out	0x39, r24	; 57
     8ee:	08 95       	ret

000008f0 <__divsf3>:
     8f0:	0c d0       	rcall	.+24     	; 0x90a <__divsf3x>
     8f2:	eb c0       	rjmp	.+470    	; 0xaca <__fp_round>
     8f4:	e3 d0       	rcall	.+454    	; 0xabc <__fp_pscB>
     8f6:	40 f0       	brcs	.+16     	; 0x908 <__divsf3+0x18>
     8f8:	da d0       	rcall	.+436    	; 0xaae <__fp_pscA>
     8fa:	30 f0       	brcs	.+12     	; 0x908 <__divsf3+0x18>
     8fc:	21 f4       	brne	.+8      	; 0x906 <__divsf3+0x16>
     8fe:	5f 3f       	cpi	r21, 0xFF	; 255
     900:	19 f0       	breq	.+6      	; 0x908 <__divsf3+0x18>
     902:	cc c0       	rjmp	.+408    	; 0xa9c <__fp_inf>
     904:	51 11       	cpse	r21, r1
     906:	15 c1       	rjmp	.+554    	; 0xb32 <__fp_szero>
     908:	cf c0       	rjmp	.+414    	; 0xaa8 <__fp_nan>

0000090a <__divsf3x>:
     90a:	f0 d0       	rcall	.+480    	; 0xaec <__fp_split3>
     90c:	98 f3       	brcs	.-26     	; 0x8f4 <__divsf3+0x4>

0000090e <__divsf3_pse>:
     90e:	99 23       	and	r25, r25
     910:	c9 f3       	breq	.-14     	; 0x904 <__divsf3+0x14>
     912:	55 23       	and	r21, r21
     914:	b1 f3       	breq	.-20     	; 0x902 <__divsf3+0x12>
     916:	95 1b       	sub	r25, r21
     918:	55 0b       	sbc	r21, r21
     91a:	bb 27       	eor	r27, r27
     91c:	aa 27       	eor	r26, r26
     91e:	62 17       	cp	r22, r18
     920:	73 07       	cpc	r23, r19
     922:	84 07       	cpc	r24, r20
     924:	38 f0       	brcs	.+14     	; 0x934 <__divsf3_pse+0x26>
     926:	9f 5f       	subi	r25, 0xFF	; 255
     928:	5f 4f       	sbci	r21, 0xFF	; 255
     92a:	22 0f       	add	r18, r18
     92c:	33 1f       	adc	r19, r19
     92e:	44 1f       	adc	r20, r20
     930:	aa 1f       	adc	r26, r26
     932:	a9 f3       	breq	.-22     	; 0x91e <__divsf3_pse+0x10>
     934:	33 d0       	rcall	.+102    	; 0x99c <__divsf3_pse+0x8e>
     936:	0e 2e       	mov	r0, r30
     938:	3a f0       	brmi	.+14     	; 0x948 <__divsf3_pse+0x3a>
     93a:	e0 e8       	ldi	r30, 0x80	; 128
     93c:	30 d0       	rcall	.+96     	; 0x99e <__divsf3_pse+0x90>
     93e:	91 50       	subi	r25, 0x01	; 1
     940:	50 40       	sbci	r21, 0x00	; 0
     942:	e6 95       	lsr	r30
     944:	00 1c       	adc	r0, r0
     946:	ca f7       	brpl	.-14     	; 0x93a <__divsf3_pse+0x2c>
     948:	29 d0       	rcall	.+82     	; 0x99c <__divsf3_pse+0x8e>
     94a:	fe 2f       	mov	r31, r30
     94c:	27 d0       	rcall	.+78     	; 0x99c <__divsf3_pse+0x8e>
     94e:	66 0f       	add	r22, r22
     950:	77 1f       	adc	r23, r23
     952:	88 1f       	adc	r24, r24
     954:	bb 1f       	adc	r27, r27
     956:	26 17       	cp	r18, r22
     958:	37 07       	cpc	r19, r23
     95a:	48 07       	cpc	r20, r24
     95c:	ab 07       	cpc	r26, r27
     95e:	b0 e8       	ldi	r27, 0x80	; 128
     960:	09 f0       	breq	.+2      	; 0x964 <__divsf3_pse+0x56>
     962:	bb 0b       	sbc	r27, r27
     964:	80 2d       	mov	r24, r0
     966:	bf 01       	movw	r22, r30
     968:	ff 27       	eor	r31, r31
     96a:	93 58       	subi	r25, 0x83	; 131
     96c:	5f 4f       	sbci	r21, 0xFF	; 255
     96e:	2a f0       	brmi	.+10     	; 0x97a <__divsf3_pse+0x6c>
     970:	9e 3f       	cpi	r25, 0xFE	; 254
     972:	51 05       	cpc	r21, r1
     974:	68 f0       	brcs	.+26     	; 0x990 <__divsf3_pse+0x82>
     976:	92 c0       	rjmp	.+292    	; 0xa9c <__fp_inf>
     978:	dc c0       	rjmp	.+440    	; 0xb32 <__fp_szero>
     97a:	5f 3f       	cpi	r21, 0xFF	; 255
     97c:	ec f3       	brlt	.-6      	; 0x978 <__divsf3_pse+0x6a>
     97e:	98 3e       	cpi	r25, 0xE8	; 232
     980:	dc f3       	brlt	.-10     	; 0x978 <__divsf3_pse+0x6a>
     982:	86 95       	lsr	r24
     984:	77 95       	ror	r23
     986:	67 95       	ror	r22
     988:	b7 95       	ror	r27
     98a:	f7 95       	ror	r31
     98c:	9f 5f       	subi	r25, 0xFF	; 255
     98e:	c9 f7       	brne	.-14     	; 0x982 <__divsf3_pse+0x74>
     990:	88 0f       	add	r24, r24
     992:	91 1d       	adc	r25, r1
     994:	96 95       	lsr	r25
     996:	87 95       	ror	r24
     998:	97 f9       	bld	r25, 7
     99a:	08 95       	ret
     99c:	e1 e0       	ldi	r30, 0x01	; 1
     99e:	66 0f       	add	r22, r22
     9a0:	77 1f       	adc	r23, r23
     9a2:	88 1f       	adc	r24, r24
     9a4:	bb 1f       	adc	r27, r27
     9a6:	62 17       	cp	r22, r18
     9a8:	73 07       	cpc	r23, r19
     9aa:	84 07       	cpc	r24, r20
     9ac:	ba 07       	cpc	r27, r26
     9ae:	20 f0       	brcs	.+8      	; 0x9b8 <__divsf3_pse+0xaa>
     9b0:	62 1b       	sub	r22, r18
     9b2:	73 0b       	sbc	r23, r19
     9b4:	84 0b       	sbc	r24, r20
     9b6:	ba 0b       	sbc	r27, r26
     9b8:	ee 1f       	adc	r30, r30
     9ba:	88 f7       	brcc	.-30     	; 0x99e <__divsf3_pse+0x90>
     9bc:	e0 95       	com	r30
     9be:	08 95       	ret

000009c0 <__fixsfsi>:
     9c0:	04 d0       	rcall	.+8      	; 0x9ca <__fixunssfsi>
     9c2:	68 94       	set
     9c4:	b1 11       	cpse	r27, r1
     9c6:	b5 c0       	rjmp	.+362    	; 0xb32 <__fp_szero>
     9c8:	08 95       	ret

000009ca <__fixunssfsi>:
     9ca:	98 d0       	rcall	.+304    	; 0xafc <__fp_splitA>
     9cc:	88 f0       	brcs	.+34     	; 0x9f0 <__fixunssfsi+0x26>
     9ce:	9f 57       	subi	r25, 0x7F	; 127
     9d0:	90 f0       	brcs	.+36     	; 0x9f6 <__fixunssfsi+0x2c>
     9d2:	b9 2f       	mov	r27, r25
     9d4:	99 27       	eor	r25, r25
     9d6:	b7 51       	subi	r27, 0x17	; 23
     9d8:	a0 f0       	brcs	.+40     	; 0xa02 <__fixunssfsi+0x38>
     9da:	d1 f0       	breq	.+52     	; 0xa10 <__fixunssfsi+0x46>
     9dc:	66 0f       	add	r22, r22
     9de:	77 1f       	adc	r23, r23
     9e0:	88 1f       	adc	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	1a f0       	brmi	.+6      	; 0x9ec <__fixunssfsi+0x22>
     9e6:	ba 95       	dec	r27
     9e8:	c9 f7       	brne	.-14     	; 0x9dc <__fixunssfsi+0x12>
     9ea:	12 c0       	rjmp	.+36     	; 0xa10 <__fixunssfsi+0x46>
     9ec:	b1 30       	cpi	r27, 0x01	; 1
     9ee:	81 f0       	breq	.+32     	; 0xa10 <__fixunssfsi+0x46>
     9f0:	9f d0       	rcall	.+318    	; 0xb30 <__fp_zero>
     9f2:	b1 e0       	ldi	r27, 0x01	; 1
     9f4:	08 95       	ret
     9f6:	9c c0       	rjmp	.+312    	; 0xb30 <__fp_zero>
     9f8:	67 2f       	mov	r22, r23
     9fa:	78 2f       	mov	r23, r24
     9fc:	88 27       	eor	r24, r24
     9fe:	b8 5f       	subi	r27, 0xF8	; 248
     a00:	39 f0       	breq	.+14     	; 0xa10 <__fixunssfsi+0x46>
     a02:	b9 3f       	cpi	r27, 0xF9	; 249
     a04:	cc f3       	brlt	.-14     	; 0x9f8 <__fixunssfsi+0x2e>
     a06:	86 95       	lsr	r24
     a08:	77 95       	ror	r23
     a0a:	67 95       	ror	r22
     a0c:	b3 95       	inc	r27
     a0e:	d9 f7       	brne	.-10     	; 0xa06 <__fixunssfsi+0x3c>
     a10:	3e f4       	brtc	.+14     	; 0xa20 <__fixunssfsi+0x56>
     a12:	90 95       	com	r25
     a14:	80 95       	com	r24
     a16:	70 95       	com	r23
     a18:	61 95       	neg	r22
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
     a1c:	8f 4f       	sbci	r24, 0xFF	; 255
     a1e:	9f 4f       	sbci	r25, 0xFF	; 255
     a20:	08 95       	ret

00000a22 <__floatunsisf>:
     a22:	e8 94       	clt
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__floatsisf+0x12>

00000a26 <__floatsisf>:
     a26:	97 fb       	bst	r25, 7
     a28:	3e f4       	brtc	.+14     	; 0xa38 <__floatsisf+0x12>
     a2a:	90 95       	com	r25
     a2c:	80 95       	com	r24
     a2e:	70 95       	com	r23
     a30:	61 95       	neg	r22
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	8f 4f       	sbci	r24, 0xFF	; 255
     a36:	9f 4f       	sbci	r25, 0xFF	; 255
     a38:	99 23       	and	r25, r25
     a3a:	a9 f0       	breq	.+42     	; 0xa66 <__floatsisf+0x40>
     a3c:	f9 2f       	mov	r31, r25
     a3e:	96 e9       	ldi	r25, 0x96	; 150
     a40:	bb 27       	eor	r27, r27
     a42:	93 95       	inc	r25
     a44:	f6 95       	lsr	r31
     a46:	87 95       	ror	r24
     a48:	77 95       	ror	r23
     a4a:	67 95       	ror	r22
     a4c:	b7 95       	ror	r27
     a4e:	f1 11       	cpse	r31, r1
     a50:	f8 cf       	rjmp	.-16     	; 0xa42 <__floatsisf+0x1c>
     a52:	fa f4       	brpl	.+62     	; 0xa92 <__floatsisf+0x6c>
     a54:	bb 0f       	add	r27, r27
     a56:	11 f4       	brne	.+4      	; 0xa5c <__floatsisf+0x36>
     a58:	60 ff       	sbrs	r22, 0
     a5a:	1b c0       	rjmp	.+54     	; 0xa92 <__floatsisf+0x6c>
     a5c:	6f 5f       	subi	r22, 0xFF	; 255
     a5e:	7f 4f       	sbci	r23, 0xFF	; 255
     a60:	8f 4f       	sbci	r24, 0xFF	; 255
     a62:	9f 4f       	sbci	r25, 0xFF	; 255
     a64:	16 c0       	rjmp	.+44     	; 0xa92 <__floatsisf+0x6c>
     a66:	88 23       	and	r24, r24
     a68:	11 f0       	breq	.+4      	; 0xa6e <__floatsisf+0x48>
     a6a:	96 e9       	ldi	r25, 0x96	; 150
     a6c:	11 c0       	rjmp	.+34     	; 0xa90 <__floatsisf+0x6a>
     a6e:	77 23       	and	r23, r23
     a70:	21 f0       	breq	.+8      	; 0xa7a <__floatsisf+0x54>
     a72:	9e e8       	ldi	r25, 0x8E	; 142
     a74:	87 2f       	mov	r24, r23
     a76:	76 2f       	mov	r23, r22
     a78:	05 c0       	rjmp	.+10     	; 0xa84 <__floatsisf+0x5e>
     a7a:	66 23       	and	r22, r22
     a7c:	71 f0       	breq	.+28     	; 0xa9a <__floatsisf+0x74>
     a7e:	96 e8       	ldi	r25, 0x86	; 134
     a80:	86 2f       	mov	r24, r22
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	2a f0       	brmi	.+10     	; 0xa92 <__floatsisf+0x6c>
     a88:	9a 95       	dec	r25
     a8a:	66 0f       	add	r22, r22
     a8c:	77 1f       	adc	r23, r23
     a8e:	88 1f       	adc	r24, r24
     a90:	da f7       	brpl	.-10     	; 0xa88 <__floatsisf+0x62>
     a92:	88 0f       	add	r24, r24
     a94:	96 95       	lsr	r25
     a96:	87 95       	ror	r24
     a98:	97 f9       	bld	r25, 7
     a9a:	08 95       	ret

00000a9c <__fp_inf>:
     a9c:	97 f9       	bld	r25, 7
     a9e:	9f 67       	ori	r25, 0x7F	; 127
     aa0:	80 e8       	ldi	r24, 0x80	; 128
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	08 95       	ret

00000aa8 <__fp_nan>:
     aa8:	9f ef       	ldi	r25, 0xFF	; 255
     aaa:	80 ec       	ldi	r24, 0xC0	; 192
     aac:	08 95       	ret

00000aae <__fp_pscA>:
     aae:	00 24       	eor	r0, r0
     ab0:	0a 94       	dec	r0
     ab2:	16 16       	cp	r1, r22
     ab4:	17 06       	cpc	r1, r23
     ab6:	18 06       	cpc	r1, r24
     ab8:	09 06       	cpc	r0, r25
     aba:	08 95       	ret

00000abc <__fp_pscB>:
     abc:	00 24       	eor	r0, r0
     abe:	0a 94       	dec	r0
     ac0:	12 16       	cp	r1, r18
     ac2:	13 06       	cpc	r1, r19
     ac4:	14 06       	cpc	r1, r20
     ac6:	05 06       	cpc	r0, r21
     ac8:	08 95       	ret

00000aca <__fp_round>:
     aca:	09 2e       	mov	r0, r25
     acc:	03 94       	inc	r0
     ace:	00 0c       	add	r0, r0
     ad0:	11 f4       	brne	.+4      	; 0xad6 <__fp_round+0xc>
     ad2:	88 23       	and	r24, r24
     ad4:	52 f0       	brmi	.+20     	; 0xaea <__fp_round+0x20>
     ad6:	bb 0f       	add	r27, r27
     ad8:	40 f4       	brcc	.+16     	; 0xaea <__fp_round+0x20>
     ada:	bf 2b       	or	r27, r31
     adc:	11 f4       	brne	.+4      	; 0xae2 <__fp_round+0x18>
     ade:	60 ff       	sbrs	r22, 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__fp_round+0x20>
     ae2:	6f 5f       	subi	r22, 0xFF	; 255
     ae4:	7f 4f       	sbci	r23, 0xFF	; 255
     ae6:	8f 4f       	sbci	r24, 0xFF	; 255
     ae8:	9f 4f       	sbci	r25, 0xFF	; 255
     aea:	08 95       	ret

00000aec <__fp_split3>:
     aec:	57 fd       	sbrc	r21, 7
     aee:	90 58       	subi	r25, 0x80	; 128
     af0:	44 0f       	add	r20, r20
     af2:	55 1f       	adc	r21, r21
     af4:	59 f0       	breq	.+22     	; 0xb0c <__fp_splitA+0x10>
     af6:	5f 3f       	cpi	r21, 0xFF	; 255
     af8:	71 f0       	breq	.+28     	; 0xb16 <__fp_splitA+0x1a>
     afa:	47 95       	ror	r20

00000afc <__fp_splitA>:
     afc:	88 0f       	add	r24, r24
     afe:	97 fb       	bst	r25, 7
     b00:	99 1f       	adc	r25, r25
     b02:	61 f0       	breq	.+24     	; 0xb1c <__fp_splitA+0x20>
     b04:	9f 3f       	cpi	r25, 0xFF	; 255
     b06:	79 f0       	breq	.+30     	; 0xb26 <__fp_splitA+0x2a>
     b08:	87 95       	ror	r24
     b0a:	08 95       	ret
     b0c:	12 16       	cp	r1, r18
     b0e:	13 06       	cpc	r1, r19
     b10:	14 06       	cpc	r1, r20
     b12:	55 1f       	adc	r21, r21
     b14:	f2 cf       	rjmp	.-28     	; 0xafa <__fp_split3+0xe>
     b16:	46 95       	lsr	r20
     b18:	f1 df       	rcall	.-30     	; 0xafc <__fp_splitA>
     b1a:	08 c0       	rjmp	.+16     	; 0xb2c <__fp_splitA+0x30>
     b1c:	16 16       	cp	r1, r22
     b1e:	17 06       	cpc	r1, r23
     b20:	18 06       	cpc	r1, r24
     b22:	99 1f       	adc	r25, r25
     b24:	f1 cf       	rjmp	.-30     	; 0xb08 <__fp_splitA+0xc>
     b26:	86 95       	lsr	r24
     b28:	71 05       	cpc	r23, r1
     b2a:	61 05       	cpc	r22, r1
     b2c:	08 94       	sec
     b2e:	08 95       	ret

00000b30 <__fp_zero>:
     b30:	e8 94       	clt

00000b32 <__fp_szero>:
     b32:	bb 27       	eor	r27, r27
     b34:	66 27       	eor	r22, r22
     b36:	77 27       	eor	r23, r23
     b38:	cb 01       	movw	r24, r22
     b3a:	97 f9       	bld	r25, 7
     b3c:	08 95       	ret

00000b3e <__mulsf3>:
     b3e:	0b d0       	rcall	.+22     	; 0xb56 <__mulsf3x>
     b40:	c4 cf       	rjmp	.-120    	; 0xaca <__fp_round>
     b42:	b5 df       	rcall	.-150    	; 0xaae <__fp_pscA>
     b44:	28 f0       	brcs	.+10     	; 0xb50 <__mulsf3+0x12>
     b46:	ba df       	rcall	.-140    	; 0xabc <__fp_pscB>
     b48:	18 f0       	brcs	.+6      	; 0xb50 <__mulsf3+0x12>
     b4a:	95 23       	and	r25, r21
     b4c:	09 f0       	breq	.+2      	; 0xb50 <__mulsf3+0x12>
     b4e:	a6 cf       	rjmp	.-180    	; 0xa9c <__fp_inf>
     b50:	ab cf       	rjmp	.-170    	; 0xaa8 <__fp_nan>
     b52:	11 24       	eor	r1, r1
     b54:	ee cf       	rjmp	.-36     	; 0xb32 <__fp_szero>

00000b56 <__mulsf3x>:
     b56:	ca df       	rcall	.-108    	; 0xaec <__fp_split3>
     b58:	a0 f3       	brcs	.-24     	; 0xb42 <__mulsf3+0x4>

00000b5a <__mulsf3_pse>:
     b5a:	95 9f       	mul	r25, r21
     b5c:	d1 f3       	breq	.-12     	; 0xb52 <__mulsf3+0x14>
     b5e:	95 0f       	add	r25, r21
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	55 1f       	adc	r21, r21
     b64:	62 9f       	mul	r22, r18
     b66:	f0 01       	movw	r30, r0
     b68:	72 9f       	mul	r23, r18
     b6a:	bb 27       	eor	r27, r27
     b6c:	f0 0d       	add	r31, r0
     b6e:	b1 1d       	adc	r27, r1
     b70:	63 9f       	mul	r22, r19
     b72:	aa 27       	eor	r26, r26
     b74:	f0 0d       	add	r31, r0
     b76:	b1 1d       	adc	r27, r1
     b78:	aa 1f       	adc	r26, r26
     b7a:	64 9f       	mul	r22, r20
     b7c:	66 27       	eor	r22, r22
     b7e:	b0 0d       	add	r27, r0
     b80:	a1 1d       	adc	r26, r1
     b82:	66 1f       	adc	r22, r22
     b84:	82 9f       	mul	r24, r18
     b86:	22 27       	eor	r18, r18
     b88:	b0 0d       	add	r27, r0
     b8a:	a1 1d       	adc	r26, r1
     b8c:	62 1f       	adc	r22, r18
     b8e:	73 9f       	mul	r23, r19
     b90:	b0 0d       	add	r27, r0
     b92:	a1 1d       	adc	r26, r1
     b94:	62 1f       	adc	r22, r18
     b96:	83 9f       	mul	r24, r19
     b98:	a0 0d       	add	r26, r0
     b9a:	61 1d       	adc	r22, r1
     b9c:	22 1f       	adc	r18, r18
     b9e:	74 9f       	mul	r23, r20
     ba0:	33 27       	eor	r19, r19
     ba2:	a0 0d       	add	r26, r0
     ba4:	61 1d       	adc	r22, r1
     ba6:	23 1f       	adc	r18, r19
     ba8:	84 9f       	mul	r24, r20
     baa:	60 0d       	add	r22, r0
     bac:	21 1d       	adc	r18, r1
     bae:	82 2f       	mov	r24, r18
     bb0:	76 2f       	mov	r23, r22
     bb2:	6a 2f       	mov	r22, r26
     bb4:	11 24       	eor	r1, r1
     bb6:	9f 57       	subi	r25, 0x7F	; 127
     bb8:	50 40       	sbci	r21, 0x00	; 0
     bba:	8a f0       	brmi	.+34     	; 0xbde <__mulsf3_pse+0x84>
     bbc:	e1 f0       	breq	.+56     	; 0xbf6 <__mulsf3_pse+0x9c>
     bbe:	88 23       	and	r24, r24
     bc0:	4a f0       	brmi	.+18     	; 0xbd4 <__mulsf3_pse+0x7a>
     bc2:	ee 0f       	add	r30, r30
     bc4:	ff 1f       	adc	r31, r31
     bc6:	bb 1f       	adc	r27, r27
     bc8:	66 1f       	adc	r22, r22
     bca:	77 1f       	adc	r23, r23
     bcc:	88 1f       	adc	r24, r24
     bce:	91 50       	subi	r25, 0x01	; 1
     bd0:	50 40       	sbci	r21, 0x00	; 0
     bd2:	a9 f7       	brne	.-22     	; 0xbbe <__mulsf3_pse+0x64>
     bd4:	9e 3f       	cpi	r25, 0xFE	; 254
     bd6:	51 05       	cpc	r21, r1
     bd8:	70 f0       	brcs	.+28     	; 0xbf6 <__mulsf3_pse+0x9c>
     bda:	60 cf       	rjmp	.-320    	; 0xa9c <__fp_inf>
     bdc:	aa cf       	rjmp	.-172    	; 0xb32 <__fp_szero>
     bde:	5f 3f       	cpi	r21, 0xFF	; 255
     be0:	ec f3       	brlt	.-6      	; 0xbdc <__mulsf3_pse+0x82>
     be2:	98 3e       	cpi	r25, 0xE8	; 232
     be4:	dc f3       	brlt	.-10     	; 0xbdc <__mulsf3_pse+0x82>
     be6:	86 95       	lsr	r24
     be8:	77 95       	ror	r23
     bea:	67 95       	ror	r22
     bec:	b7 95       	ror	r27
     bee:	f7 95       	ror	r31
     bf0:	e7 95       	ror	r30
     bf2:	9f 5f       	subi	r25, 0xFF	; 255
     bf4:	c1 f7       	brne	.-16     	; 0xbe6 <__mulsf3_pse+0x8c>
     bf6:	fe 2b       	or	r31, r30
     bf8:	88 0f       	add	r24, r24
     bfa:	91 1d       	adc	r25, r1
     bfc:	96 95       	lsr	r25
     bfe:	87 95       	ror	r24
     c00:	97 f9       	bld	r25, 7
     c02:	08 95       	ret

00000c04 <__divmodhi4>:
     c04:	97 fb       	bst	r25, 7
     c06:	07 2e       	mov	r0, r23
     c08:	16 f4       	brtc	.+4      	; 0xc0e <__divmodhi4+0xa>
     c0a:	00 94       	com	r0
     c0c:	06 d0       	rcall	.+12     	; 0xc1a <__divmodhi4_neg1>
     c0e:	77 fd       	sbrc	r23, 7
     c10:	08 d0       	rcall	.+16     	; 0xc22 <__divmodhi4_neg2>
     c12:	2d d0       	rcall	.+90     	; 0xc6e <__udivmodhi4>
     c14:	07 fc       	sbrc	r0, 7
     c16:	05 d0       	rcall	.+10     	; 0xc22 <__divmodhi4_neg2>
     c18:	3e f4       	brtc	.+14     	; 0xc28 <__divmodhi4_exit>

00000c1a <__divmodhi4_neg1>:
     c1a:	90 95       	com	r25
     c1c:	81 95       	neg	r24
     c1e:	9f 4f       	sbci	r25, 0xFF	; 255
     c20:	08 95       	ret

00000c22 <__divmodhi4_neg2>:
     c22:	70 95       	com	r23
     c24:	61 95       	neg	r22
     c26:	7f 4f       	sbci	r23, 0xFF	; 255

00000c28 <__divmodhi4_exit>:
     c28:	08 95       	ret

00000c2a <__udivmodsi4>:
     c2a:	a1 e2       	ldi	r26, 0x21	; 33
     c2c:	1a 2e       	mov	r1, r26
     c2e:	aa 1b       	sub	r26, r26
     c30:	bb 1b       	sub	r27, r27
     c32:	fd 01       	movw	r30, r26
     c34:	0d c0       	rjmp	.+26     	; 0xc50 <__udivmodsi4_ep>

00000c36 <__udivmodsi4_loop>:
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	ee 1f       	adc	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	a2 17       	cp	r26, r18
     c40:	b3 07       	cpc	r27, r19
     c42:	e4 07       	cpc	r30, r20
     c44:	f5 07       	cpc	r31, r21
     c46:	20 f0       	brcs	.+8      	; 0xc50 <__udivmodsi4_ep>
     c48:	a2 1b       	sub	r26, r18
     c4a:	b3 0b       	sbc	r27, r19
     c4c:	e4 0b       	sbc	r30, r20
     c4e:	f5 0b       	sbc	r31, r21

00000c50 <__udivmodsi4_ep>:
     c50:	66 1f       	adc	r22, r22
     c52:	77 1f       	adc	r23, r23
     c54:	88 1f       	adc	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	1a 94       	dec	r1
     c5a:	69 f7       	brne	.-38     	; 0xc36 <__udivmodsi4_loop>
     c5c:	60 95       	com	r22
     c5e:	70 95       	com	r23
     c60:	80 95       	com	r24
     c62:	90 95       	com	r25
     c64:	9b 01       	movw	r18, r22
     c66:	ac 01       	movw	r20, r24
     c68:	bd 01       	movw	r22, r26
     c6a:	cf 01       	movw	r24, r30
     c6c:	08 95       	ret

00000c6e <__udivmodhi4>:
     c6e:	aa 1b       	sub	r26, r26
     c70:	bb 1b       	sub	r27, r27
     c72:	51 e1       	ldi	r21, 0x11	; 17
     c74:	07 c0       	rjmp	.+14     	; 0xc84 <__udivmodhi4_ep>

00000c76 <__udivmodhi4_loop>:
     c76:	aa 1f       	adc	r26, r26
     c78:	bb 1f       	adc	r27, r27
     c7a:	a6 17       	cp	r26, r22
     c7c:	b7 07       	cpc	r27, r23
     c7e:	10 f0       	brcs	.+4      	; 0xc84 <__udivmodhi4_ep>
     c80:	a6 1b       	sub	r26, r22
     c82:	b7 0b       	sbc	r27, r23

00000c84 <__udivmodhi4_ep>:
     c84:	88 1f       	adc	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	5a 95       	dec	r21
     c8a:	a9 f7       	brne	.-22     	; 0xc76 <__udivmodhi4_loop>
     c8c:	80 95       	com	r24
     c8e:	90 95       	com	r25
     c90:	bc 01       	movw	r22, r24
     c92:	cd 01       	movw	r24, r26
     c94:	08 95       	ret

00000c96 <sprintf>:
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	2e 97       	sbiw	r28, 0x0e	; 14
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	0d 89       	ldd	r16, Y+21	; 0x15
     cb0:	1e 89       	ldd	r17, Y+22	; 0x16
     cb2:	86 e0       	ldi	r24, 0x06	; 6
     cb4:	8c 83       	std	Y+4, r24	; 0x04
     cb6:	1a 83       	std	Y+2, r17	; 0x02
     cb8:	09 83       	std	Y+1, r16	; 0x01
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	9f e7       	ldi	r25, 0x7F	; 127
     cbe:	9e 83       	std	Y+6, r25	; 0x06
     cc0:	8d 83       	std	Y+5, r24	; 0x05
     cc2:	ae 01       	movw	r20, r28
     cc4:	47 5e       	subi	r20, 0xE7	; 231
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	6f 89       	ldd	r22, Y+23	; 0x17
     cca:	78 8d       	ldd	r23, Y+24	; 0x18
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	10 d0       	rcall	.+32     	; 0xcf2 <vfprintf>
     cd2:	ef 81       	ldd	r30, Y+7	; 0x07
     cd4:	f8 85       	ldd	r31, Y+8	; 0x08
     cd6:	e0 0f       	add	r30, r16
     cd8:	f1 1f       	adc	r31, r17
     cda:	10 82       	st	Z, r1
     cdc:	2e 96       	adiw	r28, 0x0e	; 14
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	08 95       	ret

00000cf2 <vfprintf>:
     cf2:	2f 92       	push	r2
     cf4:	3f 92       	push	r3
     cf6:	4f 92       	push	r4
     cf8:	5f 92       	push	r5
     cfa:	6f 92       	push	r6
     cfc:	7f 92       	push	r7
     cfe:	8f 92       	push	r8
     d00:	9f 92       	push	r9
     d02:	af 92       	push	r10
     d04:	bf 92       	push	r11
     d06:	cf 92       	push	r12
     d08:	df 92       	push	r13
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	2b 97       	sbiw	r28, 0x0b	; 11
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	6c 01       	movw	r12, r24
     d28:	7b 01       	movw	r14, r22
     d2a:	8a 01       	movw	r16, r20
     d2c:	fc 01       	movw	r30, r24
     d2e:	17 82       	std	Z+7, r1	; 0x07
     d30:	16 82       	std	Z+6, r1	; 0x06
     d32:	83 81       	ldd	r24, Z+3	; 0x03
     d34:	81 ff       	sbrs	r24, 1
     d36:	bf c1       	rjmp	.+894    	; 0x10b6 <__DATA_REGION_LENGTH__+0xb6>
     d38:	ce 01       	movw	r24, r28
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	3c 01       	movw	r6, r24
     d3e:	f6 01       	movw	r30, r12
     d40:	93 81       	ldd	r25, Z+3	; 0x03
     d42:	f7 01       	movw	r30, r14
     d44:	93 fd       	sbrc	r25, 3
     d46:	85 91       	lpm	r24, Z+
     d48:	93 ff       	sbrs	r25, 3
     d4a:	81 91       	ld	r24, Z+
     d4c:	7f 01       	movw	r14, r30
     d4e:	88 23       	and	r24, r24
     d50:	09 f4       	brne	.+2      	; 0xd54 <vfprintf+0x62>
     d52:	ad c1       	rjmp	.+858    	; 0x10ae <__DATA_REGION_LENGTH__+0xae>
     d54:	85 32       	cpi	r24, 0x25	; 37
     d56:	39 f4       	brne	.+14     	; 0xd66 <vfprintf+0x74>
     d58:	93 fd       	sbrc	r25, 3
     d5a:	85 91       	lpm	r24, Z+
     d5c:	93 ff       	sbrs	r25, 3
     d5e:	81 91       	ld	r24, Z+
     d60:	7f 01       	movw	r14, r30
     d62:	85 32       	cpi	r24, 0x25	; 37
     d64:	21 f4       	brne	.+8      	; 0xd6e <vfprintf+0x7c>
     d66:	b6 01       	movw	r22, r12
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	d6 d1       	rcall	.+940    	; 0x1118 <fputc>
     d6c:	e8 cf       	rjmp	.-48     	; 0xd3e <vfprintf+0x4c>
     d6e:	91 2c       	mov	r9, r1
     d70:	21 2c       	mov	r2, r1
     d72:	31 2c       	mov	r3, r1
     d74:	ff e1       	ldi	r31, 0x1F	; 31
     d76:	f3 15       	cp	r31, r3
     d78:	d8 f0       	brcs	.+54     	; 0xdb0 <vfprintf+0xbe>
     d7a:	8b 32       	cpi	r24, 0x2B	; 43
     d7c:	79 f0       	breq	.+30     	; 0xd9c <vfprintf+0xaa>
     d7e:	38 f4       	brcc	.+14     	; 0xd8e <vfprintf+0x9c>
     d80:	80 32       	cpi	r24, 0x20	; 32
     d82:	79 f0       	breq	.+30     	; 0xda2 <vfprintf+0xb0>
     d84:	83 32       	cpi	r24, 0x23	; 35
     d86:	a1 f4       	brne	.+40     	; 0xdb0 <vfprintf+0xbe>
     d88:	23 2d       	mov	r18, r3
     d8a:	20 61       	ori	r18, 0x10	; 16
     d8c:	1d c0       	rjmp	.+58     	; 0xdc8 <vfprintf+0xd6>
     d8e:	8d 32       	cpi	r24, 0x2D	; 45
     d90:	61 f0       	breq	.+24     	; 0xdaa <vfprintf+0xb8>
     d92:	80 33       	cpi	r24, 0x30	; 48
     d94:	69 f4       	brne	.+26     	; 0xdb0 <vfprintf+0xbe>
     d96:	23 2d       	mov	r18, r3
     d98:	21 60       	ori	r18, 0x01	; 1
     d9a:	16 c0       	rjmp	.+44     	; 0xdc8 <vfprintf+0xd6>
     d9c:	83 2d       	mov	r24, r3
     d9e:	82 60       	ori	r24, 0x02	; 2
     da0:	38 2e       	mov	r3, r24
     da2:	e3 2d       	mov	r30, r3
     da4:	e4 60       	ori	r30, 0x04	; 4
     da6:	3e 2e       	mov	r3, r30
     da8:	2a c0       	rjmp	.+84     	; 0xdfe <vfprintf+0x10c>
     daa:	f3 2d       	mov	r31, r3
     dac:	f8 60       	ori	r31, 0x08	; 8
     dae:	1d c0       	rjmp	.+58     	; 0xdea <vfprintf+0xf8>
     db0:	37 fc       	sbrc	r3, 7
     db2:	2d c0       	rjmp	.+90     	; 0xe0e <vfprintf+0x11c>
     db4:	20 ed       	ldi	r18, 0xD0	; 208
     db6:	28 0f       	add	r18, r24
     db8:	2a 30       	cpi	r18, 0x0A	; 10
     dba:	40 f0       	brcs	.+16     	; 0xdcc <vfprintf+0xda>
     dbc:	8e 32       	cpi	r24, 0x2E	; 46
     dbe:	b9 f4       	brne	.+46     	; 0xdee <vfprintf+0xfc>
     dc0:	36 fc       	sbrc	r3, 6
     dc2:	75 c1       	rjmp	.+746    	; 0x10ae <__DATA_REGION_LENGTH__+0xae>
     dc4:	23 2d       	mov	r18, r3
     dc6:	20 64       	ori	r18, 0x40	; 64
     dc8:	32 2e       	mov	r3, r18
     dca:	19 c0       	rjmp	.+50     	; 0xdfe <vfprintf+0x10c>
     dcc:	36 fe       	sbrs	r3, 6
     dce:	06 c0       	rjmp	.+12     	; 0xddc <vfprintf+0xea>
     dd0:	8a e0       	ldi	r24, 0x0A	; 10
     dd2:	98 9e       	mul	r9, r24
     dd4:	20 0d       	add	r18, r0
     dd6:	11 24       	eor	r1, r1
     dd8:	92 2e       	mov	r9, r18
     dda:	11 c0       	rjmp	.+34     	; 0xdfe <vfprintf+0x10c>
     ddc:	ea e0       	ldi	r30, 0x0A	; 10
     dde:	2e 9e       	mul	r2, r30
     de0:	20 0d       	add	r18, r0
     de2:	11 24       	eor	r1, r1
     de4:	22 2e       	mov	r2, r18
     de6:	f3 2d       	mov	r31, r3
     de8:	f0 62       	ori	r31, 0x20	; 32
     dea:	3f 2e       	mov	r3, r31
     dec:	08 c0       	rjmp	.+16     	; 0xdfe <vfprintf+0x10c>
     dee:	8c 36       	cpi	r24, 0x6C	; 108
     df0:	21 f4       	brne	.+8      	; 0xdfa <vfprintf+0x108>
     df2:	83 2d       	mov	r24, r3
     df4:	80 68       	ori	r24, 0x80	; 128
     df6:	38 2e       	mov	r3, r24
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <vfprintf+0x10c>
     dfa:	88 36       	cpi	r24, 0x68	; 104
     dfc:	41 f4       	brne	.+16     	; 0xe0e <vfprintf+0x11c>
     dfe:	f7 01       	movw	r30, r14
     e00:	93 fd       	sbrc	r25, 3
     e02:	85 91       	lpm	r24, Z+
     e04:	93 ff       	sbrs	r25, 3
     e06:	81 91       	ld	r24, Z+
     e08:	7f 01       	movw	r14, r30
     e0a:	81 11       	cpse	r24, r1
     e0c:	b3 cf       	rjmp	.-154    	; 0xd74 <vfprintf+0x82>
     e0e:	98 2f       	mov	r25, r24
     e10:	9f 7d       	andi	r25, 0xDF	; 223
     e12:	95 54       	subi	r25, 0x45	; 69
     e14:	93 30       	cpi	r25, 0x03	; 3
     e16:	28 f4       	brcc	.+10     	; 0xe22 <vfprintf+0x130>
     e18:	0c 5f       	subi	r16, 0xFC	; 252
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	9f e3       	ldi	r25, 0x3F	; 63
     e1e:	99 83       	std	Y+1, r25	; 0x01
     e20:	0d c0       	rjmp	.+26     	; 0xe3c <vfprintf+0x14a>
     e22:	83 36       	cpi	r24, 0x63	; 99
     e24:	31 f0       	breq	.+12     	; 0xe32 <vfprintf+0x140>
     e26:	83 37       	cpi	r24, 0x73	; 115
     e28:	71 f0       	breq	.+28     	; 0xe46 <vfprintf+0x154>
     e2a:	83 35       	cpi	r24, 0x53	; 83
     e2c:	09 f0       	breq	.+2      	; 0xe30 <vfprintf+0x13e>
     e2e:	55 c0       	rjmp	.+170    	; 0xeda <vfprintf+0x1e8>
     e30:	20 c0       	rjmp	.+64     	; 0xe72 <vfprintf+0x180>
     e32:	f8 01       	movw	r30, r16
     e34:	80 81       	ld	r24, Z
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	0e 5f       	subi	r16, 0xFE	; 254
     e3a:	1f 4f       	sbci	r17, 0xFF	; 255
     e3c:	88 24       	eor	r8, r8
     e3e:	83 94       	inc	r8
     e40:	91 2c       	mov	r9, r1
     e42:	53 01       	movw	r10, r6
     e44:	12 c0       	rjmp	.+36     	; 0xe6a <vfprintf+0x178>
     e46:	28 01       	movw	r4, r16
     e48:	f2 e0       	ldi	r31, 0x02	; 2
     e4a:	4f 0e       	add	r4, r31
     e4c:	51 1c       	adc	r5, r1
     e4e:	f8 01       	movw	r30, r16
     e50:	a0 80       	ld	r10, Z
     e52:	b1 80       	ldd	r11, Z+1	; 0x01
     e54:	36 fe       	sbrs	r3, 6
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <vfprintf+0x16c>
     e58:	69 2d       	mov	r22, r9
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <vfprintf+0x170>
     e5e:	6f ef       	ldi	r22, 0xFF	; 255
     e60:	7f ef       	ldi	r23, 0xFF	; 255
     e62:	c5 01       	movw	r24, r10
     e64:	4e d1       	rcall	.+668    	; 0x1102 <strnlen>
     e66:	4c 01       	movw	r8, r24
     e68:	82 01       	movw	r16, r4
     e6a:	f3 2d       	mov	r31, r3
     e6c:	ff 77       	andi	r31, 0x7F	; 127
     e6e:	3f 2e       	mov	r3, r31
     e70:	15 c0       	rjmp	.+42     	; 0xe9c <vfprintf+0x1aa>
     e72:	28 01       	movw	r4, r16
     e74:	22 e0       	ldi	r18, 0x02	; 2
     e76:	42 0e       	add	r4, r18
     e78:	51 1c       	adc	r5, r1
     e7a:	f8 01       	movw	r30, r16
     e7c:	a0 80       	ld	r10, Z
     e7e:	b1 80       	ldd	r11, Z+1	; 0x01
     e80:	36 fe       	sbrs	r3, 6
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <vfprintf+0x198>
     e84:	69 2d       	mov	r22, r9
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <vfprintf+0x19c>
     e8a:	6f ef       	ldi	r22, 0xFF	; 255
     e8c:	7f ef       	ldi	r23, 0xFF	; 255
     e8e:	c5 01       	movw	r24, r10
     e90:	2d d1       	rcall	.+602    	; 0x10ec <strnlen_P>
     e92:	4c 01       	movw	r8, r24
     e94:	f3 2d       	mov	r31, r3
     e96:	f0 68       	ori	r31, 0x80	; 128
     e98:	3f 2e       	mov	r3, r31
     e9a:	82 01       	movw	r16, r4
     e9c:	33 fc       	sbrc	r3, 3
     e9e:	19 c0       	rjmp	.+50     	; 0xed2 <vfprintf+0x1e0>
     ea0:	82 2d       	mov	r24, r2
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	88 16       	cp	r8, r24
     ea6:	99 06       	cpc	r9, r25
     ea8:	a0 f4       	brcc	.+40     	; 0xed2 <vfprintf+0x1e0>
     eaa:	b6 01       	movw	r22, r12
     eac:	80 e2       	ldi	r24, 0x20	; 32
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	33 d1       	rcall	.+614    	; 0x1118 <fputc>
     eb2:	2a 94       	dec	r2
     eb4:	f5 cf       	rjmp	.-22     	; 0xea0 <vfprintf+0x1ae>
     eb6:	f5 01       	movw	r30, r10
     eb8:	37 fc       	sbrc	r3, 7
     eba:	85 91       	lpm	r24, Z+
     ebc:	37 fe       	sbrs	r3, 7
     ebe:	81 91       	ld	r24, Z+
     ec0:	5f 01       	movw	r10, r30
     ec2:	b6 01       	movw	r22, r12
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	28 d1       	rcall	.+592    	; 0x1118 <fputc>
     ec8:	21 10       	cpse	r2, r1
     eca:	2a 94       	dec	r2
     ecc:	21 e0       	ldi	r18, 0x01	; 1
     ece:	82 1a       	sub	r8, r18
     ed0:	91 08       	sbc	r9, r1
     ed2:	81 14       	cp	r8, r1
     ed4:	91 04       	cpc	r9, r1
     ed6:	79 f7       	brne	.-34     	; 0xeb6 <vfprintf+0x1c4>
     ed8:	e1 c0       	rjmp	.+450    	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
     eda:	84 36       	cpi	r24, 0x64	; 100
     edc:	11 f0       	breq	.+4      	; 0xee2 <vfprintf+0x1f0>
     ede:	89 36       	cpi	r24, 0x69	; 105
     ee0:	39 f5       	brne	.+78     	; 0xf30 <vfprintf+0x23e>
     ee2:	f8 01       	movw	r30, r16
     ee4:	37 fe       	sbrs	r3, 7
     ee6:	07 c0       	rjmp	.+14     	; 0xef6 <vfprintf+0x204>
     ee8:	60 81       	ld	r22, Z
     eea:	71 81       	ldd	r23, Z+1	; 0x01
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	93 81       	ldd	r25, Z+3	; 0x03
     ef0:	0c 5f       	subi	r16, 0xFC	; 252
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
     ef4:	08 c0       	rjmp	.+16     	; 0xf06 <vfprintf+0x214>
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	07 2e       	mov	r0, r23
     efc:	00 0c       	add	r0, r0
     efe:	88 0b       	sbc	r24, r24
     f00:	99 0b       	sbc	r25, r25
     f02:	0e 5f       	subi	r16, 0xFE	; 254
     f04:	1f 4f       	sbci	r17, 0xFF	; 255
     f06:	f3 2d       	mov	r31, r3
     f08:	ff 76       	andi	r31, 0x6F	; 111
     f0a:	3f 2e       	mov	r3, r31
     f0c:	97 ff       	sbrs	r25, 7
     f0e:	09 c0       	rjmp	.+18     	; 0xf22 <vfprintf+0x230>
     f10:	90 95       	com	r25
     f12:	80 95       	com	r24
     f14:	70 95       	com	r23
     f16:	61 95       	neg	r22
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	8f 4f       	sbci	r24, 0xFF	; 255
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	f0 68       	ori	r31, 0x80	; 128
     f20:	3f 2e       	mov	r3, r31
     f22:	2a e0       	ldi	r18, 0x0A	; 10
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	a3 01       	movw	r20, r6
     f28:	33 d1       	rcall	.+614    	; 0x1190 <__ultoa_invert>
     f2a:	88 2e       	mov	r8, r24
     f2c:	86 18       	sub	r8, r6
     f2e:	44 c0       	rjmp	.+136    	; 0xfb8 <vfprintf+0x2c6>
     f30:	85 37       	cpi	r24, 0x75	; 117
     f32:	31 f4       	brne	.+12     	; 0xf40 <vfprintf+0x24e>
     f34:	23 2d       	mov	r18, r3
     f36:	2f 7e       	andi	r18, 0xEF	; 239
     f38:	b2 2e       	mov	r11, r18
     f3a:	2a e0       	ldi	r18, 0x0A	; 10
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	25 c0       	rjmp	.+74     	; 0xf8a <vfprintf+0x298>
     f40:	93 2d       	mov	r25, r3
     f42:	99 7f       	andi	r25, 0xF9	; 249
     f44:	b9 2e       	mov	r11, r25
     f46:	8f 36       	cpi	r24, 0x6F	; 111
     f48:	c1 f0       	breq	.+48     	; 0xf7a <vfprintf+0x288>
     f4a:	18 f4       	brcc	.+6      	; 0xf52 <vfprintf+0x260>
     f4c:	88 35       	cpi	r24, 0x58	; 88
     f4e:	79 f0       	breq	.+30     	; 0xf6e <vfprintf+0x27c>
     f50:	ae c0       	rjmp	.+348    	; 0x10ae <__DATA_REGION_LENGTH__+0xae>
     f52:	80 37       	cpi	r24, 0x70	; 112
     f54:	19 f0       	breq	.+6      	; 0xf5c <vfprintf+0x26a>
     f56:	88 37       	cpi	r24, 0x78	; 120
     f58:	21 f0       	breq	.+8      	; 0xf62 <vfprintf+0x270>
     f5a:	a9 c0       	rjmp	.+338    	; 0x10ae <__DATA_REGION_LENGTH__+0xae>
     f5c:	e9 2f       	mov	r30, r25
     f5e:	e0 61       	ori	r30, 0x10	; 16
     f60:	be 2e       	mov	r11, r30
     f62:	b4 fe       	sbrs	r11, 4
     f64:	0d c0       	rjmp	.+26     	; 0xf80 <vfprintf+0x28e>
     f66:	fb 2d       	mov	r31, r11
     f68:	f4 60       	ori	r31, 0x04	; 4
     f6a:	bf 2e       	mov	r11, r31
     f6c:	09 c0       	rjmp	.+18     	; 0xf80 <vfprintf+0x28e>
     f6e:	34 fe       	sbrs	r3, 4
     f70:	0a c0       	rjmp	.+20     	; 0xf86 <vfprintf+0x294>
     f72:	29 2f       	mov	r18, r25
     f74:	26 60       	ori	r18, 0x06	; 6
     f76:	b2 2e       	mov	r11, r18
     f78:	06 c0       	rjmp	.+12     	; 0xf86 <vfprintf+0x294>
     f7a:	28 e0       	ldi	r18, 0x08	; 8
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <vfprintf+0x298>
     f80:	20 e1       	ldi	r18, 0x10	; 16
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <vfprintf+0x298>
     f86:	20 e1       	ldi	r18, 0x10	; 16
     f88:	32 e0       	ldi	r19, 0x02	; 2
     f8a:	f8 01       	movw	r30, r16
     f8c:	b7 fe       	sbrs	r11, 7
     f8e:	07 c0       	rjmp	.+14     	; 0xf9e <vfprintf+0x2ac>
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	0c 5f       	subi	r16, 0xFC	; 252
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <vfprintf+0x2b8>
     f9e:	60 81       	ld	r22, Z
     fa0:	71 81       	ldd	r23, Z+1	; 0x01
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 5f       	subi	r16, 0xFE	; 254
     fa8:	1f 4f       	sbci	r17, 0xFF	; 255
     faa:	a3 01       	movw	r20, r6
     fac:	f1 d0       	rcall	.+482    	; 0x1190 <__ultoa_invert>
     fae:	88 2e       	mov	r8, r24
     fb0:	86 18       	sub	r8, r6
     fb2:	fb 2d       	mov	r31, r11
     fb4:	ff 77       	andi	r31, 0x7F	; 127
     fb6:	3f 2e       	mov	r3, r31
     fb8:	36 fe       	sbrs	r3, 6
     fba:	0d c0       	rjmp	.+26     	; 0xfd6 <vfprintf+0x2e4>
     fbc:	23 2d       	mov	r18, r3
     fbe:	2e 7f       	andi	r18, 0xFE	; 254
     fc0:	a2 2e       	mov	r10, r18
     fc2:	89 14       	cp	r8, r9
     fc4:	58 f4       	brcc	.+22     	; 0xfdc <vfprintf+0x2ea>
     fc6:	34 fe       	sbrs	r3, 4
     fc8:	0b c0       	rjmp	.+22     	; 0xfe0 <vfprintf+0x2ee>
     fca:	32 fc       	sbrc	r3, 2
     fcc:	09 c0       	rjmp	.+18     	; 0xfe0 <vfprintf+0x2ee>
     fce:	83 2d       	mov	r24, r3
     fd0:	8e 7e       	andi	r24, 0xEE	; 238
     fd2:	a8 2e       	mov	r10, r24
     fd4:	05 c0       	rjmp	.+10     	; 0xfe0 <vfprintf+0x2ee>
     fd6:	b8 2c       	mov	r11, r8
     fd8:	a3 2c       	mov	r10, r3
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <vfprintf+0x2f0>
     fdc:	b8 2c       	mov	r11, r8
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <vfprintf+0x2f0>
     fe0:	b9 2c       	mov	r11, r9
     fe2:	a4 fe       	sbrs	r10, 4
     fe4:	0f c0       	rjmp	.+30     	; 0x1004 <__DATA_REGION_LENGTH__+0x4>
     fe6:	fe 01       	movw	r30, r28
     fe8:	e8 0d       	add	r30, r8
     fea:	f1 1d       	adc	r31, r1
     fec:	80 81       	ld	r24, Z
     fee:	80 33       	cpi	r24, 0x30	; 48
     ff0:	21 f4       	brne	.+8      	; 0xffa <vfprintf+0x308>
     ff2:	9a 2d       	mov	r25, r10
     ff4:	99 7e       	andi	r25, 0xE9	; 233
     ff6:	a9 2e       	mov	r10, r25
     ff8:	09 c0       	rjmp	.+18     	; 0x100c <__DATA_REGION_LENGTH__+0xc>
     ffa:	a2 fe       	sbrs	r10, 2
     ffc:	06 c0       	rjmp	.+12     	; 0x100a <__DATA_REGION_LENGTH__+0xa>
     ffe:	b3 94       	inc	r11
    1000:	b3 94       	inc	r11
    1002:	04 c0       	rjmp	.+8      	; 0x100c <__DATA_REGION_LENGTH__+0xc>
    1004:	8a 2d       	mov	r24, r10
    1006:	86 78       	andi	r24, 0x86	; 134
    1008:	09 f0       	breq	.+2      	; 0x100c <__DATA_REGION_LENGTH__+0xc>
    100a:	b3 94       	inc	r11
    100c:	a3 fc       	sbrc	r10, 3
    100e:	10 c0       	rjmp	.+32     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
    1010:	a0 fe       	sbrs	r10, 0
    1012:	06 c0       	rjmp	.+12     	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
    1014:	b2 14       	cp	r11, r2
    1016:	80 f4       	brcc	.+32     	; 0x1038 <__DATA_REGION_LENGTH__+0x38>
    1018:	28 0c       	add	r2, r8
    101a:	92 2c       	mov	r9, r2
    101c:	9b 18       	sub	r9, r11
    101e:	0d c0       	rjmp	.+26     	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
    1020:	b2 14       	cp	r11, r2
    1022:	58 f4       	brcc	.+22     	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
    1024:	b6 01       	movw	r22, r12
    1026:	80 e2       	ldi	r24, 0x20	; 32
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	76 d0       	rcall	.+236    	; 0x1118 <fputc>
    102c:	b3 94       	inc	r11
    102e:	f8 cf       	rjmp	.-16     	; 0x1020 <__DATA_REGION_LENGTH__+0x20>
    1030:	b2 14       	cp	r11, r2
    1032:	18 f4       	brcc	.+6      	; 0x103a <__DATA_REGION_LENGTH__+0x3a>
    1034:	2b 18       	sub	r2, r11
    1036:	02 c0       	rjmp	.+4      	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    1038:	98 2c       	mov	r9, r8
    103a:	21 2c       	mov	r2, r1
    103c:	a4 fe       	sbrs	r10, 4
    103e:	0f c0       	rjmp	.+30     	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
    1040:	b6 01       	movw	r22, r12
    1042:	80 e3       	ldi	r24, 0x30	; 48
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	68 d0       	rcall	.+208    	; 0x1118 <fputc>
    1048:	a2 fe       	sbrs	r10, 2
    104a:	16 c0       	rjmp	.+44     	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
    104c:	a1 fc       	sbrc	r10, 1
    104e:	03 c0       	rjmp	.+6      	; 0x1056 <__DATA_REGION_LENGTH__+0x56>
    1050:	88 e7       	ldi	r24, 0x78	; 120
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <__DATA_REGION_LENGTH__+0x5a>
    1056:	88 e5       	ldi	r24, 0x58	; 88
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	b6 01       	movw	r22, r12
    105c:	0c c0       	rjmp	.+24     	; 0x1076 <__DATA_REGION_LENGTH__+0x76>
    105e:	8a 2d       	mov	r24, r10
    1060:	86 78       	andi	r24, 0x86	; 134
    1062:	51 f0       	breq	.+20     	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
    1064:	a1 fe       	sbrs	r10, 1
    1066:	02 c0       	rjmp	.+4      	; 0x106c <__DATA_REGION_LENGTH__+0x6c>
    1068:	8b e2       	ldi	r24, 0x2B	; 43
    106a:	01 c0       	rjmp	.+2      	; 0x106e <__DATA_REGION_LENGTH__+0x6e>
    106c:	80 e2       	ldi	r24, 0x20	; 32
    106e:	a7 fc       	sbrc	r10, 7
    1070:	8d e2       	ldi	r24, 0x2D	; 45
    1072:	b6 01       	movw	r22, r12
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	50 d0       	rcall	.+160    	; 0x1118 <fputc>
    1078:	89 14       	cp	r8, r9
    107a:	30 f4       	brcc	.+12     	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
    107c:	b6 01       	movw	r22, r12
    107e:	80 e3       	ldi	r24, 0x30	; 48
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	4a d0       	rcall	.+148    	; 0x1118 <fputc>
    1084:	9a 94       	dec	r9
    1086:	f8 cf       	rjmp	.-16     	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
    1088:	8a 94       	dec	r8
    108a:	f3 01       	movw	r30, r6
    108c:	e8 0d       	add	r30, r8
    108e:	f1 1d       	adc	r31, r1
    1090:	80 81       	ld	r24, Z
    1092:	b6 01       	movw	r22, r12
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	40 d0       	rcall	.+128    	; 0x1118 <fputc>
    1098:	81 10       	cpse	r8, r1
    109a:	f6 cf       	rjmp	.-20     	; 0x1088 <__DATA_REGION_LENGTH__+0x88>
    109c:	22 20       	and	r2, r2
    109e:	09 f4       	brne	.+2      	; 0x10a2 <__DATA_REGION_LENGTH__+0xa2>
    10a0:	4e ce       	rjmp	.-868    	; 0xd3e <vfprintf+0x4c>
    10a2:	b6 01       	movw	r22, r12
    10a4:	80 e2       	ldi	r24, 0x20	; 32
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	37 d0       	rcall	.+110    	; 0x1118 <fputc>
    10aa:	2a 94       	dec	r2
    10ac:	f7 cf       	rjmp	.-18     	; 0x109c <__DATA_REGION_LENGTH__+0x9c>
    10ae:	f6 01       	movw	r30, r12
    10b0:	86 81       	ldd	r24, Z+6	; 0x06
    10b2:	97 81       	ldd	r25, Z+7	; 0x07
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <__DATA_REGION_LENGTH__+0xba>
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	9f ef       	ldi	r25, 0xFF	; 255
    10ba:	2b 96       	adiw	r28, 0x0b	; 11
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	df 90       	pop	r13
    10d4:	cf 90       	pop	r12
    10d6:	bf 90       	pop	r11
    10d8:	af 90       	pop	r10
    10da:	9f 90       	pop	r9
    10dc:	8f 90       	pop	r8
    10de:	7f 90       	pop	r7
    10e0:	6f 90       	pop	r6
    10e2:	5f 90       	pop	r5
    10e4:	4f 90       	pop	r4
    10e6:	3f 90       	pop	r3
    10e8:	2f 90       	pop	r2
    10ea:	08 95       	ret

000010ec <strnlen_P>:
    10ec:	fc 01       	movw	r30, r24
    10ee:	05 90       	lpm	r0, Z+
    10f0:	61 50       	subi	r22, 0x01	; 1
    10f2:	70 40       	sbci	r23, 0x00	; 0
    10f4:	01 10       	cpse	r0, r1
    10f6:	d8 f7       	brcc	.-10     	; 0x10ee <strnlen_P+0x2>
    10f8:	80 95       	com	r24
    10fa:	90 95       	com	r25
    10fc:	8e 0f       	add	r24, r30
    10fe:	9f 1f       	adc	r25, r31
    1100:	08 95       	ret

00001102 <strnlen>:
    1102:	fc 01       	movw	r30, r24
    1104:	61 50       	subi	r22, 0x01	; 1
    1106:	70 40       	sbci	r23, 0x00	; 0
    1108:	01 90       	ld	r0, Z+
    110a:	01 10       	cpse	r0, r1
    110c:	d8 f7       	brcc	.-10     	; 0x1104 <strnlen+0x2>
    110e:	80 95       	com	r24
    1110:	90 95       	com	r25
    1112:	8e 0f       	add	r24, r30
    1114:	9f 1f       	adc	r25, r31
    1116:	08 95       	ret

00001118 <fputc>:
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	fb 01       	movw	r30, r22
    1122:	23 81       	ldd	r18, Z+3	; 0x03
    1124:	21 fd       	sbrc	r18, 1
    1126:	03 c0       	rjmp	.+6      	; 0x112e <fputc+0x16>
    1128:	8f ef       	ldi	r24, 0xFF	; 255
    112a:	9f ef       	ldi	r25, 0xFF	; 255
    112c:	2c c0       	rjmp	.+88     	; 0x1186 <fputc+0x6e>
    112e:	22 ff       	sbrs	r18, 2
    1130:	16 c0       	rjmp	.+44     	; 0x115e <fputc+0x46>
    1132:	46 81       	ldd	r20, Z+6	; 0x06
    1134:	57 81       	ldd	r21, Z+7	; 0x07
    1136:	24 81       	ldd	r18, Z+4	; 0x04
    1138:	35 81       	ldd	r19, Z+5	; 0x05
    113a:	42 17       	cp	r20, r18
    113c:	53 07       	cpc	r21, r19
    113e:	44 f4       	brge	.+16     	; 0x1150 <fputc+0x38>
    1140:	a0 81       	ld	r26, Z
    1142:	b1 81       	ldd	r27, Z+1	; 0x01
    1144:	9d 01       	movw	r18, r26
    1146:	2f 5f       	subi	r18, 0xFF	; 255
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	31 83       	std	Z+1, r19	; 0x01
    114c:	20 83       	st	Z, r18
    114e:	8c 93       	st	X, r24
    1150:	26 81       	ldd	r18, Z+6	; 0x06
    1152:	37 81       	ldd	r19, Z+7	; 0x07
    1154:	2f 5f       	subi	r18, 0xFF	; 255
    1156:	3f 4f       	sbci	r19, 0xFF	; 255
    1158:	37 83       	std	Z+7, r19	; 0x07
    115a:	26 83       	std	Z+6, r18	; 0x06
    115c:	14 c0       	rjmp	.+40     	; 0x1186 <fputc+0x6e>
    115e:	8b 01       	movw	r16, r22
    1160:	ec 01       	movw	r28, r24
    1162:	fb 01       	movw	r30, r22
    1164:	00 84       	ldd	r0, Z+8	; 0x08
    1166:	f1 85       	ldd	r31, Z+9	; 0x09
    1168:	e0 2d       	mov	r30, r0
    116a:	09 95       	icall
    116c:	89 2b       	or	r24, r25
    116e:	e1 f6       	brne	.-72     	; 0x1128 <fputc+0x10>
    1170:	d8 01       	movw	r26, r16
    1172:	16 96       	adiw	r26, 0x06	; 6
    1174:	8d 91       	ld	r24, X+
    1176:	9c 91       	ld	r25, X
    1178:	17 97       	sbiw	r26, 0x07	; 7
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	17 96       	adiw	r26, 0x07	; 7
    117e:	9c 93       	st	X, r25
    1180:	8e 93       	st	-X, r24
    1182:	16 97       	sbiw	r26, 0x06	; 6
    1184:	ce 01       	movw	r24, r28
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	08 95       	ret

00001190 <__ultoa_invert>:
    1190:	fa 01       	movw	r30, r20
    1192:	aa 27       	eor	r26, r26
    1194:	28 30       	cpi	r18, 0x08	; 8
    1196:	51 f1       	breq	.+84     	; 0x11ec <__ultoa_invert+0x5c>
    1198:	20 31       	cpi	r18, 0x10	; 16
    119a:	81 f1       	breq	.+96     	; 0x11fc <__ultoa_invert+0x6c>
    119c:	e8 94       	clt
    119e:	6f 93       	push	r22
    11a0:	6e 7f       	andi	r22, 0xFE	; 254
    11a2:	6e 5f       	subi	r22, 0xFE	; 254
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	8f 4f       	sbci	r24, 0xFF	; 255
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
    11aa:	af 4f       	sbci	r26, 0xFF	; 255
    11ac:	b1 e0       	ldi	r27, 0x01	; 1
    11ae:	3e d0       	rcall	.+124    	; 0x122c <__ultoa_invert+0x9c>
    11b0:	b4 e0       	ldi	r27, 0x04	; 4
    11b2:	3c d0       	rcall	.+120    	; 0x122c <__ultoa_invert+0x9c>
    11b4:	67 0f       	add	r22, r23
    11b6:	78 1f       	adc	r23, r24
    11b8:	89 1f       	adc	r24, r25
    11ba:	9a 1f       	adc	r25, r26
    11bc:	a1 1d       	adc	r26, r1
    11be:	68 0f       	add	r22, r24
    11c0:	79 1f       	adc	r23, r25
    11c2:	8a 1f       	adc	r24, r26
    11c4:	91 1d       	adc	r25, r1
    11c6:	a1 1d       	adc	r26, r1
    11c8:	6a 0f       	add	r22, r26
    11ca:	71 1d       	adc	r23, r1
    11cc:	81 1d       	adc	r24, r1
    11ce:	91 1d       	adc	r25, r1
    11d0:	a1 1d       	adc	r26, r1
    11d2:	20 d0       	rcall	.+64     	; 0x1214 <__ultoa_invert+0x84>
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <__ultoa_invert+0x48>
    11d6:	68 94       	set
    11d8:	3f 91       	pop	r19
    11da:	2a e0       	ldi	r18, 0x0A	; 10
    11dc:	26 9f       	mul	r18, r22
    11de:	11 24       	eor	r1, r1
    11e0:	30 19       	sub	r19, r0
    11e2:	30 5d       	subi	r19, 0xD0	; 208
    11e4:	31 93       	st	Z+, r19
    11e6:	de f6       	brtc	.-74     	; 0x119e <__ultoa_invert+0xe>
    11e8:	cf 01       	movw	r24, r30
    11ea:	08 95       	ret
    11ec:	46 2f       	mov	r20, r22
    11ee:	47 70       	andi	r20, 0x07	; 7
    11f0:	40 5d       	subi	r20, 0xD0	; 208
    11f2:	41 93       	st	Z+, r20
    11f4:	b3 e0       	ldi	r27, 0x03	; 3
    11f6:	0f d0       	rcall	.+30     	; 0x1216 <__ultoa_invert+0x86>
    11f8:	c9 f7       	brne	.-14     	; 0x11ec <__ultoa_invert+0x5c>
    11fa:	f6 cf       	rjmp	.-20     	; 0x11e8 <__ultoa_invert+0x58>
    11fc:	46 2f       	mov	r20, r22
    11fe:	4f 70       	andi	r20, 0x0F	; 15
    1200:	40 5d       	subi	r20, 0xD0	; 208
    1202:	4a 33       	cpi	r20, 0x3A	; 58
    1204:	18 f0       	brcs	.+6      	; 0x120c <__ultoa_invert+0x7c>
    1206:	49 5d       	subi	r20, 0xD9	; 217
    1208:	31 fd       	sbrc	r19, 1
    120a:	40 52       	subi	r20, 0x20	; 32
    120c:	41 93       	st	Z+, r20
    120e:	02 d0       	rcall	.+4      	; 0x1214 <__ultoa_invert+0x84>
    1210:	a9 f7       	brne	.-22     	; 0x11fc <__ultoa_invert+0x6c>
    1212:	ea cf       	rjmp	.-44     	; 0x11e8 <__ultoa_invert+0x58>
    1214:	b4 e0       	ldi	r27, 0x04	; 4
    1216:	a6 95       	lsr	r26
    1218:	97 95       	ror	r25
    121a:	87 95       	ror	r24
    121c:	77 95       	ror	r23
    121e:	67 95       	ror	r22
    1220:	ba 95       	dec	r27
    1222:	c9 f7       	brne	.-14     	; 0x1216 <__ultoa_invert+0x86>
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	61 05       	cpc	r22, r1
    1228:	71 05       	cpc	r23, r1
    122a:	08 95       	ret
    122c:	9b 01       	movw	r18, r22
    122e:	ac 01       	movw	r20, r24
    1230:	0a 2e       	mov	r0, r26
    1232:	06 94       	lsr	r0
    1234:	57 95       	ror	r21
    1236:	47 95       	ror	r20
    1238:	37 95       	ror	r19
    123a:	27 95       	ror	r18
    123c:	ba 95       	dec	r27
    123e:	c9 f7       	brne	.-14     	; 0x1232 <__ultoa_invert+0xa2>
    1240:	62 0f       	add	r22, r18
    1242:	73 1f       	adc	r23, r19
    1244:	84 1f       	adc	r24, r20
    1246:	95 1f       	adc	r25, r21
    1248:	a0 1d       	adc	r26, r0
    124a:	08 95       	ret

0000124c <_exit>:
    124c:	f8 94       	cli

0000124e <__stop_program>:
    124e:	ff cf       	rjmp	.-2      	; 0x124e <__stop_program>
