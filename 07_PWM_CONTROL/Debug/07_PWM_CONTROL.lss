
07_PWM_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  0000184c  000018e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000184c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006a6  008001a8  008001a8  00001988  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000190e  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001166  00000000  00000000  000034d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eaa  00000000  00000000  00004638  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  000054e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000733  00000000  00000000  000058ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b2  00000000  00000000  00005fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00006691  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	97 c6       	rjmp	.+3374   	; 0xd44 <__vector_5>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	09 c2       	rjmp	.+1042   	; 0x454 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	df c2       	rjmp	.+1470   	; 0x608 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c4       	rjmp	.+2346   	; 0x9a4 <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e4       	ldi	r30, 0x4C	; 76
      a0:	f8 e1       	ldi	r31, 0x18	; 24
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 3a       	cpi	r26, 0xA8	; 168
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	a8 ea       	ldi	r26, 0xA8	; 168
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 34       	cpi	r26, 0x4E	; 78
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	1e d2       	rcall	.+1084   	; 0x500 <main>
      c4:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <get_button>:

	static unsigned char button_status[BUTTON_NUMBER] =
	{BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE}; // 지역변수에 static을 선언하면 전역변수처럼 활용가능
	//
	
	current_state = BUTTON_PIN & (1 << button_pin); // 버튼을 읽는다.
      ca:	20 b3       	in	r18, 0x10	; 16
      cc:	42 2f       	mov	r20, r18
      ce:	50 e0       	ldi	r21, 0x00	; 0
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	02 c0       	rjmp	.+4      	; 0xda <get_button+0x10>
      d6:	22 0f       	add	r18, r18
      d8:	33 1f       	adc	r19, r19
      da:	6a 95       	dec	r22
      dc:	e2 f7       	brpl	.-8      	; 0xd6 <get_button+0xc>
      de:	24 23       	and	r18, r20
      e0:	35 23       	and	r19, r21
	if (current_state && button_status[button_num] == BUTTON_RELEASE) // 버튼이 처음 눌려진 상태.
      e2:	21 15       	cp	r18, r1
      e4:	31 05       	cpc	r19, r1
      e6:	b9 f0       	breq	.+46     	; 0x116 <get_button+0x4c>
      e8:	fc 01       	movw	r30, r24
      ea:	e8 55       	subi	r30, 0x58	; 88
      ec:	fe 4f       	sbci	r31, 0xFE	; 254
      ee:	40 81       	ld	r20, Z
      f0:	41 11       	cpse	r20, r1
      f2:	11 c0       	rjmp	.+34     	; 0x116 <get_button+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f4:	2f ef       	ldi	r18, 0xFF	; 255
      f6:	3d ee       	ldi	r19, 0xED	; 237
      f8:	42 e0       	ldi	r20, 0x02	; 2
      fa:	21 50       	subi	r18, 0x01	; 1
      fc:	30 40       	sbci	r19, 0x00	; 0
      fe:	40 40       	sbci	r20, 0x00	; 0
     100:	e1 f7       	brne	.-8      	; 0xfa <get_button+0x30>
     102:	00 c0       	rjmp	.+0      	; 0x104 <get_button+0x3a>
     104:	00 00       	nop
	{
		_delay_ms(60); // noise가 지나가기를 기다린다.
		button_status[button_num] = BUTTON_PRESS; // 처음 눌려진 상태가 아니다
     106:	fc 01       	movw	r30, r24
     108:	e8 55       	subi	r30, 0x58	; 88
     10a:	fe 4f       	sbci	r31, 0xFE	; 254
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	20 83       	st	Z, r18
		return 0; // 아직은 완전히 눌렀다 땐 상태가 아니다.
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	08 95       	ret
		
	}
	else if (button_status[button_num] == BUTTON_PRESS && current_state == BUTTON_RELEASE)
     116:	fc 01       	movw	r30, r24
     118:	e8 55       	subi	r30, 0x58	; 88
     11a:	fe 4f       	sbci	r31, 0xFE	; 254
     11c:	40 81       	ld	r20, Z
     11e:	41 30       	cpi	r20, 0x01	; 1
     120:	91 f4       	brne	.+36     	; 0x146 <get_button+0x7c>
     122:	23 2b       	or	r18, r19
     124:	99 f4       	brne	.+38     	; 0x14c <get_button+0x82>
	{	// 버튼이 이전에 눌려진 상태였으며 현재는 떼어진 상태이면
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼을 체크 하기위해서 초기화
     126:	fc 01       	movw	r30, r24
     128:	e8 55       	subi	r30, 0x58	; 88
     12a:	fe 4f       	sbci	r31, 0xFE	; 254
     12c:	10 82       	st	Z, r1
     12e:	8f ef       	ldi	r24, 0xFF	; 255
     130:	9d ee       	ldi	r25, 0xED	; 237
     132:	22 e0       	ldi	r18, 0x02	; 2
     134:	81 50       	subi	r24, 0x01	; 1
     136:	90 40       	sbci	r25, 0x00	; 0
     138:	20 40       	sbci	r18, 0x00	; 0
     13a:	e1 f7       	brne	.-8      	; 0x134 <get_button+0x6a>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <get_button+0x74>
     13e:	00 00       	nop
		_delay_ms(60); // 뗀 상태의 noise가 지나가기를 기다린다.
		return 1; // 완전히 1번 눌렀다 땐 상태로 인정
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	08 95       	ret
	}
	
	return 0; // 버튼이 open 상태
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	08 95       	ret
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	08 95       	ret

00000152 <shift_left_keep_ledon>:
void shift_left_keep_ledon(void)
{
	#if 1
	static int i = 0;

	if (msec_count >= 100)
     152:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <msec_count>
     156:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <msec_count+0x1>
     15a:	a0 91 c6 01 	lds	r26, 0x01C6	; 0x8001c6 <msec_count+0x2>
     15e:	b0 91 c7 01 	lds	r27, 0x01C7	; 0x8001c7 <msec_count+0x3>
     162:	84 36       	cpi	r24, 0x64	; 100
     164:	91 05       	cpc	r25, r1
     166:	a1 05       	cpc	r26, r1
     168:	b1 05       	cpc	r27, r1
     16a:	70 f1       	brcs	.+92     	; 0x1c8 <shift_left_keep_ledon+0x76>
	{
		msec_count = 0;
     16c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <msec_count>
     170:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <msec_count+0x1>
     174:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <msec_count+0x2>
     178:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <msec_count+0x3>
		if (i >= 8)
     17c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <i.1752>
     180:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <i.1752+0x1>
     184:	28 30       	cpi	r18, 0x08	; 8
     186:	31 05       	cpc	r19, r1
     188:	7c f0       	brlt	.+30     	; 0x1a8 <shift_left_keep_ledon+0x56>
		{
			i = 0;
     18a:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <i.1752+0x1>
     18e:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <i.1752>
			PORTA = 0x00;
     192:	1b ba       	out	0x1b, r1	; 27
			state++; // state를 천이(transition)
     194:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <state>
     198:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <state+0x1>
     19c:	01 96       	adiw	r24, 0x01	; 1
     19e:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     1a2:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     1a6:	08 95       	ret
		}
		else
		{
			PORTA |= 0b00000001 << i++;
     1a8:	c9 01       	movw	r24, r18
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <i.1752+0x1>
     1b0:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <i.1752>
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <shift_left_keep_ledon+0x6c>
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	2a 95       	dec	r18
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <shift_left_keep_ledon+0x68>
     1c2:	9b b3       	in	r25, 0x1b	; 27
     1c4:	89 2b       	or	r24, r25
     1c6:	8b bb       	out	0x1b, r24	; 27
     1c8:	08 95       	ret

000001ca <shift_right_keep_ledon>:
void shift_right_keep_ledon(void)
{
	#if 1
	static int i = 0;

	if (msec_count >= 100)
     1ca:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <msec_count>
     1ce:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <msec_count+0x1>
     1d2:	a0 91 c6 01 	lds	r26, 0x01C6	; 0x8001c6 <msec_count+0x2>
     1d6:	b0 91 c7 01 	lds	r27, 0x01C7	; 0x8001c7 <msec_count+0x3>
     1da:	84 36       	cpi	r24, 0x64	; 100
     1dc:	91 05       	cpc	r25, r1
     1de:	a1 05       	cpc	r26, r1
     1e0:	b1 05       	cpc	r27, r1
     1e2:	70 f1       	brcs	.+92     	; 0x240 <shift_right_keep_ledon+0x76>
	{
		msec_count = 0;
     1e4:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <msec_count>
     1e8:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <msec_count+0x1>
     1ec:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <msec_count+0x2>
     1f0:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <msec_count+0x3>
		if (i >= 8)
     1f4:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <i.1756>
     1f8:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <i.1756+0x1>
     1fc:	28 30       	cpi	r18, 0x08	; 8
     1fe:	31 05       	cpc	r19, r1
     200:	7c f0       	brlt	.+30     	; 0x220 <shift_right_keep_ledon+0x56>
		{
			i = 0;
     202:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <i.1756+0x1>
     206:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <i.1756>
			PORTA = 0x00;
     20a:	1b ba       	out	0x1b, r1	; 27
			state++; // state를 천이(transition)
     20c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <state>
     210:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <state+0x1>
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     21a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     21e:	08 95       	ret
		}
		else
		{
			PORTA |= 0b10000000 >> i++;
     220:	c9 01       	movw	r24, r18
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <i.1756+0x1>
     228:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <i.1756>
     22c:	80 e8       	ldi	r24, 0x80	; 128
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	02 c0       	rjmp	.+4      	; 0x236 <shift_right_keep_ledon+0x6c>
     232:	95 95       	asr	r25
     234:	87 95       	ror	r24
     236:	2a 95       	dec	r18
     238:	e2 f7       	brpl	.-8      	; 0x232 <shift_right_keep_ledon+0x68>
     23a:	9b b3       	in	r25, 0x1b	; 27
     23c:	89 2b       	or	r24, r25
     23e:	8b bb       	out	0x1b, r24	; 27
     240:	08 95       	ret

00000242 <shift_left_ledon>:
void shift_left_ledon(void)
{
	#if 1 // for문 제거, _delay_ms 제거
	static int i = 0;
	
	if (msec_count >= 100)
     242:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <msec_count>
     246:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <msec_count+0x1>
     24a:	a0 91 c6 01 	lds	r26, 0x01C6	; 0x8001c6 <msec_count+0x2>
     24e:	b0 91 c7 01 	lds	r27, 0x01C7	; 0x8001c7 <msec_count+0x3>
     252:	84 36       	cpi	r24, 0x64	; 100
     254:	91 05       	cpc	r25, r1
     256:	a1 05       	cpc	r26, r1
     258:	b1 05       	cpc	r27, r1
     25a:	70 f1       	brcs	.+92     	; 0x2b8 <shift_left_ledon+0x76>
	{
		msec_count = 0;
     25c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <msec_count>
     260:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <msec_count+0x1>
     264:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <msec_count+0x2>
     268:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <msec_count+0x3>
		if (i >= 8)
     26c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <i.1760>
     270:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <i.1760+0x1>
     274:	88 30       	cpi	r24, 0x08	; 8
     276:	91 05       	cpc	r25, r1
     278:	7c f0       	brlt	.+30     	; 0x298 <shift_left_ledon+0x56>
		{
			i = 0;
     27a:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <i.1760+0x1>
     27e:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <i.1760>
			PORTA = 0x00;
     282:	1b ba       	out	0x1b, r1	; 27
			state++; // state를 천이(transition)
     284:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <state>
     288:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <state+0x1>
     28c:	01 96       	adiw	r24, 0x01	; 1
     28e:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     292:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     296:	08 95       	ret
		}
		else
		{
			PORTA = 0b00000001 << i++;
     298:	9c 01       	movw	r18, r24
     29a:	2f 5f       	subi	r18, 0xFF	; 255
     29c:	3f 4f       	sbci	r19, 0xFF	; 255
     29e:	30 93 b3 01 	sts	0x01B3, r19	; 0x8001b3 <i.1760+0x1>
     2a2:	20 93 b2 01 	sts	0x01B2, r18	; 0x8001b2 <i.1760>
     2a6:	21 e0       	ldi	r18, 0x01	; 1
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	a9 01       	movw	r20, r18
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <shift_left_ledon+0x70>
     2ae:	44 0f       	add	r20, r20
     2b0:	55 1f       	adc	r21, r21
     2b2:	8a 95       	dec	r24
     2b4:	e2 f7       	brpl	.-8      	; 0x2ae <shift_left_ledon+0x6c>
     2b6:	4b bb       	out	0x1b, r20	; 27
     2b8:	08 95       	ret

000002ba <shift_right_ledon>:
void shift_right_ledon(void)
{
	#if 1
	static int i = 0;

	if (msec_count >= 100)
     2ba:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <msec_count>
     2be:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <msec_count+0x1>
     2c2:	a0 91 c6 01 	lds	r26, 0x01C6	; 0x8001c6 <msec_count+0x2>
     2c6:	b0 91 c7 01 	lds	r27, 0x01C7	; 0x8001c7 <msec_count+0x3>
     2ca:	84 36       	cpi	r24, 0x64	; 100
     2cc:	91 05       	cpc	r25, r1
     2ce:	a1 05       	cpc	r26, r1
     2d0:	b1 05       	cpc	r27, r1
     2d2:	70 f1       	brcs	.+92     	; 0x330 <shift_right_ledon+0x76>
	{
		msec_count = 0;
     2d4:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <msec_count>
     2d8:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <msec_count+0x1>
     2dc:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <msec_count+0x2>
     2e0:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <msec_count+0x3>
		if (i >= 8)
     2e4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <i.1764>
     2e8:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <i.1764+0x1>
     2ec:	88 30       	cpi	r24, 0x08	; 8
     2ee:	91 05       	cpc	r25, r1
     2f0:	7c f0       	brlt	.+30     	; 0x310 <shift_right_ledon+0x56>
		{
			i = 0;
     2f2:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <i.1764+0x1>
     2f6:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <i.1764>
			PORTA = 0x00;
     2fa:	1b ba       	out	0x1b, r1	; 27
			state++; // state를 천이(transition)
     2fc:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <state>
     300:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <state+0x1>
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     30a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     30e:	08 95       	ret
		}
		else
		{
			PORTA = 0b10000000 >> i++;
     310:	9c 01       	movw	r18, r24
     312:	2f 5f       	subi	r18, 0xFF	; 255
     314:	3f 4f       	sbci	r19, 0xFF	; 255
     316:	30 93 b1 01 	sts	0x01B1, r19	; 0x8001b1 <i.1764+0x1>
     31a:	20 93 b0 01 	sts	0x01B0, r18	; 0x8001b0 <i.1764>
     31e:	20 e8       	ldi	r18, 0x80	; 128
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	a9 01       	movw	r20, r18
     324:	02 c0       	rjmp	.+4      	; 0x32a <shift_right_ledon+0x70>
     326:	55 95       	asr	r21
     328:	47 95       	ror	r20
     32a:	8a 95       	dec	r24
     32c:	e2 f7       	brpl	.-8      	; 0x326 <shift_right_ledon+0x6c>
     32e:	4b bb       	out	0x1b, r20	; 27
     330:	08 95       	ret

00000332 <led_all_on>:
	}
}

void led_all_on(void)
{
	PORTA = 0xff;
     332:	8f ef       	ldi	r24, 0xFF	; 255
     334:	8b bb       	out	0x1b, r24	; 27
     336:	08 95       	ret

00000338 <led_all_off>:
}

void led_all_off(void)
{
	PORTA = 0x00;
     338:	1b ba       	out	0x1b, r1	; 27
     33a:	08 95       	ret

0000033c <floweron>:
{

	#if 1
	static int i = 0;

	if (msec_count >= 100)
     33c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <msec_count>
     340:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <msec_count+0x1>
     344:	a0 91 c6 01 	lds	r26, 0x01C6	; 0x8001c6 <msec_count+0x2>
     348:	b0 91 c7 01 	lds	r27, 0x01C7	; 0x8001c7 <msec_count+0x3>
     34c:	84 36       	cpi	r24, 0x64	; 100
     34e:	91 05       	cpc	r25, r1
     350:	a1 05       	cpc	r26, r1
     352:	b1 05       	cpc	r27, r1
     354:	d8 f1       	brcs	.+118    	; 0x3cc <floweron+0x90>
	{
		msec_count = 0;
     356:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <msec_count>
     35a:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <msec_count+0x1>
     35e:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <msec_count+0x2>
     362:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <msec_count+0x3>
		if (i >= 4)
     366:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <i.1778>
     36a:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <i.1778+0x1>
     36e:	24 30       	cpi	r18, 0x04	; 4
     370:	31 05       	cpc	r19, r1
     372:	7c f0       	brlt	.+30     	; 0x392 <floweron+0x56>
		{
			i = 0;
     374:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <i.1778+0x1>
     378:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <i.1778>
			PORTA = 0x00;
     37c:	1b ba       	out	0x1b, r1	; 27
			state++; // state를 천이(transition)
     37e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <state>
     382:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <state+0x1>
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     38c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     390:	08 95       	ret
		}
		else
		{
			PORTA |= 0x10 << i | 0x08 >> i;
     392:	3b b3       	in	r19, 0x1b	; 27
     394:	80 e1       	ldi	r24, 0x10	; 16
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	ac 01       	movw	r20, r24
     39a:	02 2e       	mov	r0, r18
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <floweron+0x66>
     39e:	44 0f       	add	r20, r20
     3a0:	55 1f       	adc	r21, r21
     3a2:	0a 94       	dec	r0
     3a4:	e2 f7       	brpl	.-8      	; 0x39e <floweron+0x62>
     3a6:	88 e0       	ldi	r24, 0x08	; 8
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <floweron+0x74>
     3ac:	95 95       	asr	r25
     3ae:	87 95       	ror	r24
     3b0:	2a 95       	dec	r18
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <floweron+0x70>
     3b4:	84 2b       	or	r24, r20
     3b6:	83 2b       	or	r24, r19
     3b8:	8b bb       	out	0x1b, r24	; 27
			i++;
     3ba:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <i.1778>
     3be:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <i.1778+0x1>
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <i.1778+0x1>
     3c8:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <i.1778>
     3cc:	08 95       	ret

000003ce <floweroff>:
	unsigned char h=0xf0;
	unsigned char l=0x0f;
	#if 1
	static int i = 0;

	if (msec_count >= 100)
     3ce:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <msec_count>
     3d2:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <msec_count+0x1>
     3d6:	a0 91 c6 01 	lds	r26, 0x01C6	; 0x8001c6 <msec_count+0x2>
     3da:	b0 91 c7 01 	lds	r27, 0x01C7	; 0x8001c7 <msec_count+0x3>
     3de:	84 36       	cpi	r24, 0x64	; 100
     3e0:	91 05       	cpc	r25, r1
     3e2:	a1 05       	cpc	r26, r1
     3e4:	b1 05       	cpc	r27, r1
     3e6:	a8 f1       	brcs	.+106    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	{
		msec_count = 0;
     3e8:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <msec_count>
     3ec:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <msec_count+0x1>
     3f0:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <msec_count+0x2>
     3f4:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <msec_count+0x3>
		if (i >= 4)
     3f8:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <i.1784>
     3fc:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <i.1784+0x1>
     400:	44 30       	cpi	r20, 0x04	; 4
     402:	51 05       	cpc	r21, r1
     404:	54 f0       	brlt	.+20     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		{
			i = 0;
     406:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <i.1784+0x1>
     40a:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <i.1784>
			PORTA = 0x00;
     40e:	1b ba       	out	0x1b, r1	; 27
			state = 0; // state를 천이(transition)
     410:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <state+0x1>
     414:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <state>
     418:	08 95       	ret
		}
		else
		{
			PORTA = ( ((h >> i) & 0xf0) | ((l << i) & 0x0f));
     41a:	20 ef       	ldi	r18, 0xF0	; 240
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	04 2e       	mov	r0, r20
     420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     422:	35 95       	asr	r19
     424:	27 95       	ror	r18
     426:	0a 94       	dec	r0
     428:	e2 f7       	brpl	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     42a:	8f e0       	ldi	r24, 0x0F	; 15
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	4a 95       	dec	r20
     436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     438:	20 7f       	andi	r18, 0xF0	; 240
     43a:	8f 70       	andi	r24, 0x0F	; 15
     43c:	82 2b       	or	r24, r18
     43e:	8b bb       	out	0x1b, r24	; 27
			i++;
     440:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <i.1784>
     444:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <i.1784+0x1>
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <i.1784+0x1>
     44e:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <i.1784>
     452:	08 95       	ret

00000454 <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     454:	1f 92       	push	r1
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	0f 92       	push	r0
     45c:	11 24       	eor	r1, r1
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
     462:	af 93       	push	r26
     464:	bf 93       	push	r27
	TCNT0=6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
     466:	86 e0       	ldi	r24, 0x06	; 6
     468:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
     46a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <msec_count>
     46e:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <msec_count+0x1>
     472:	a0 91 c6 01 	lds	r26, 0x01C6	; 0x8001c6 <msec_count+0x2>
     476:	b0 91 c7 01 	lds	r27, 0x01C7	; 0x8001c7 <msec_count+0x3>
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	a1 1d       	adc	r26, r1
     47e:	b1 1d       	adc	r27, r1
     480:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <msec_count>
     484:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <msec_count+0x1>
     488:	a0 93 c6 01 	sts	0x01C6, r26	; 0x8001c6 <msec_count+0x2>
     48c:	b0 93 c7 01 	sts	0x01C7, r27	; 0x8001c7 <msec_count+0x3>
	fnd_dis++;   // fnd 잔상효과 유지 하기 위한 timer 2ms  	
     490:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <fnd_dis>
     494:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <fnd_dis+0x1>
     498:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <fnd_dis+0x2>
     49c:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <fnd_dis+0x3>
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	a1 1d       	adc	r26, r1
     4a4:	b1 1d       	adc	r27, r1
     4a6:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <fnd_dis>
     4aa:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <fnd_dis+0x1>
     4ae:	a0 93 c2 01 	sts	0x01C2, r26	; 0x8001c2 <fnd_dis+0x2>
     4b2:	b0 93 c3 01 	sts	0x01C3, r27	; 0x8001c3 <fnd_dis+0x3>
	ultrasonic_check_timer++;
     4b6:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ultrasonic_check_timer>
     4ba:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ultrasonic_check_timer+0x1>
     4be:	a0 91 be 01 	lds	r26, 0x01BE	; 0x8001be <ultrasonic_check_timer+0x2>
     4c2:	b0 91 bf 01 	lds	r27, 0x01BF	; 0x8001bf <ultrasonic_check_timer+0x3>
     4c6:	01 96       	adiw	r24, 0x01	; 1
     4c8:	a1 1d       	adc	r26, r1
     4ca:	b1 1d       	adc	r27, r1
     4cc:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <ultrasonic_check_timer>
     4d0:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <ultrasonic_check_timer+0x1>
     4d4:	a0 93 be 01 	sts	0x01BE, r26	; 0x8001be <ultrasonic_check_timer+0x2>
     4d8:	b0 93 bf 01 	sts	0x01BF, r27	; 0x8001bf <ultrasonic_check_timer+0x3>
}
     4dc:	bf 91       	pop	r27
     4de:	af 91       	pop	r26
     4e0:	9f 91       	pop	r25
     4e2:	8f 91       	pop	r24
     4e4:	0f 90       	pop	r0
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	0f 90       	pop	r0
     4ea:	1f 90       	pop	r1
     4ec:	18 95       	reti

000004ee <init_timer0>:
// 1. 분주비 계산 
// 16000000HZ/64 ==> 250,000HZ
// 2. T(주기) 1가 잡아 먹는 시간 : 1/f = 1/250,000 ==> 0.000004sec(4us) : 0.004ms
// 3. 8bit timer OV(OVflow) : 0.004ms x 256 = 0.001024sec --> 1.024ms
// 그러면 정확히 1ms 를 재고 싶다면 0.004ms x 250개 = 0.001sec ==> 1ms
	TCNT0 = 6;   // TCNT : 0~256 ==> 1ms마다 TIMER0_OVF_vect로 진입한다.
     4ee:	86 e0       	ldi	r24, 0x06	; 6
     4f0:	82 bf       	out	0x32, r24	; 50
	             // TCNT0 = 6로 설정을 한이유: 6~256 : 250개를 count(정확히 1MS를맞추기 위해서)
	             //
// 4 분주비를 설정 (250khz)
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;	
     4f2:	83 b7       	in	r24, 0x33	; 51
     4f4:	84 60       	ori	r24, 0x04	; 4
     4f6:	83 bf       	out	0x33, r24	; 51
// 5. TIMER0 OVERFLOW를 허용(enable)
	TIMSK |= 1 << TOIE0;  // TIMSK |= 0x01;
     4f8:	87 b7       	in	r24, 0x37	; 55
     4fa:	81 60       	ori	r24, 0x01	; 1
     4fc:	87 bf       	out	0x37, r24	; 55
     4fe:	08 95       	ret

00000500 <main>:
	ultrasonic_check_timer++;
}

int main(void)
{
    init_timer0();
     500:	f6 df       	rcall	.-20     	; 0x4ee <init_timer0>
	init_uart0();
     502:	00 d1       	rcall	.+512    	; 0x704 <init_uart0>
	init_uart1();
     504:	ce d2       	rcall	.+1436   	; 0xaa2 <init_uart1>
     506:	7a d4       	rcall	.+2292   	; 0xdfc <init_ultrasonic>
	init_ultrasonic();
     508:	80 e1       	ldi	r24, 0x10	; 16
     50a:	91 e0       	ldi	r25, 0x01	; 1
	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     50c:	90 93 4b 08 	sts	0x084B, r25	; 0x80084b <__iob+0x3>
     510:	80 93 4a 08 	sts	0x084A, r24	; 0x80084a <__iob+0x2>
     514:	8f ef       	ldi	r24, 0xFF	; 255
	                 				 
	DDRA=0xff;   // led를 출력 모드로 
     516:	8a bb       	out	0x1a, r24	; 26
    sei();     // 전역적으로 interrupt 허용
	
	hw_pwm_fan_control();
     518:	78 94       	sei
     51a:	1c d0       	rcall	.+56     	; 0x554 <hw_pwm_fan_control>
	
	//make_pwm_led_control();

    while (1) 
    {
		pc_command_processing();
     51c:	07 d1       	rcall	.+526    	; 0x72c <pc_command_processing>
     51e:	d6 d2       	rcall	.+1452   	; 0xacc <bt_command_processing>
		bt_command_processing();
     520:	92 d4       	rcall	.+2340   	; 0xe46 <ultrasonic_distance_check>
     522:	fc cf       	rjmp	.-8      	; 0x51c <main+0x1c>

00000524 <init_timer3_pwm>:
		ultrasonic_distance_check();
     524:	82 b1       	in	r24, 0x02	; 2
     526:	88 62       	ori	r24, 0x28	; 40
     528:	82 b9       	out	0x02, r24	; 2
void init_timer3_pwm(void)
{
	// DDRE |= 1 << 3 | 1 << 4 | 1 << 5; 현재 4번에 초음파가 연결되어 있다.
	DDRE |= 1 << 3 | 1 << 5;
	// 모드 5 : 8비트 고속 pwm    TCCR3A레지스터 WGM30과 TCCR3B레지스터 WGM32를 1로 만든다.
	TCCR3A |= 1 << WGM30;
     52a:	ab e8       	ldi	r26, 0x8B	; 139
     52c:	b0 e0       	ldi	r27, 0x00	; 0
     52e:	8c 91       	ld	r24, X
     530:	81 60       	ori	r24, 0x01	; 1
     532:	8c 93       	st	X, r24
	TCCR3B |= 1 << WGM32;
     534:	ea e8       	ldi	r30, 0x8A	; 138
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	88 60       	ori	r24, 0x08	; 8
     53c:	80 83       	st	Z, r24
	// 비반전모드 top : 0x00ff  비교일치값(pwm)지정 : OCR3C
	// TCCR3A레지스터의 COM3C1을 1로 set
	// 비교일치 발생시 OC3C의 출력 핀은 LOw로 바뀌고 BOTTOM에서 HIGH로 바뀐다.
	TCCR3A |= 1 << COM3C1;
     53e:	8c 91       	ld	r24, X
     540:	88 60       	ori	r24, 0x08	; 8
     542:	8c 93       	st	X, r24
	// 분주비 : 64   16,000,000hz -> 250,000hz         TCCR3B의 CS30, CS31을 1로 set
	// 주기 : 1 / 250,000 -> 4us
	// 250000hz에서 256개의 펄스를 count하면 소요시간 : 1.02ms
	//			    127개의 펄스를 count하면 소요시간 : 0.51ms
	TCCR3B |= 1 << CS31 | 1 << CS30;
     544:	80 81       	ld	r24, Z
     546:	83 60       	ori	r24, 0x03	; 3
     548:	80 83       	st	Z, r24
	OCR3C = 0; // 비교일치값 (Output Compare Register : PWM 값
     54a:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     54e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     552:	08 95       	ret

00000554 <hw_pwm_fan_control>:

void hw_pwm_fan_control(void)
{
	int start_button = 0;
	
	init_timer3_pwm();
     554:	e7 df       	rcall	.-50     	; 0x524 <init_timer3_pwm>
	OCR3C = 0; // 비교일치값 (Output Compare Register : PWM 값
}

void hw_pwm_fan_control(void)
{
	int start_button = 0;
     556:	c0 e0       	ldi	r28, 0x00	; 0
     558:	d0 e0       	ldi	r29, 0x00	; 0
	
	init_timer3_pwm();
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // start/stop
     55a:	64 e0       	ldi	r22, 0x04	; 4
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	b3 dd       	rcall	.-1178   	; 0xca <get_button>
     564:	89 2b       	or	r24, r25
     566:	a9 f0       	breq	.+42     	; 0x592 <hw_pwm_fan_control+0x3e>
		{
			start_button = !start_button; // 반전 toggle
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	20 97       	sbiw	r28, 0x00	; 0
     56c:	09 f0       	breq	.+2      	; 0x570 <hw_pwm_fan_control+0x1c>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
			if (start_button)
     572:	cd 2b       	or	r28, r29
     574:	41 f4       	brne	.+16     	; 0x586 <hw_pwm_fan_control+0x32>
			{
				OCR3C = 127; // 시작
     576:	2f e7       	ldi	r18, 0x7F	; 127
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	30 93 83 00 	sts	0x0083, r19	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     57e:	20 93 82 00 	sts	0x0082, r18	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // start/stop
		{
			start_button = !start_button; // 반전 toggle
     582:	ec 01       	movw	r28, r24
     584:	ea cf       	rjmp	.-44     	; 0x55a <hw_pwm_fan_control+0x6>
			{
				OCR3C = 127; // 시작
			}
			else
			{
				OCR3C = 0; // 중지
     586:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     58a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	
	while(1)
	{
		if (get_button(BUTTON0, BUTTON0PIN)) // start/stop
		{
			start_button = !start_button; // 반전 toggle
     58e:	ec 01       	movw	r28, r24
     590:	e4 cf       	rjmp	.-56     	; 0x55a <hw_pwm_fan_control+0x6>
			else
			{
				OCR3C = 0; // 중지
			}
		}
		else if (get_button(BUTTON1, BUTTON1PIN)) // speed up
     592:	65 e0       	ldi	r22, 0x05	; 5
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	97 dd       	rcall	.-1234   	; 0xca <get_button>
     59c:	89 2b       	or	r24, r25
     59e:	b1 f0       	breq	.+44     	; 0x5cc <hw_pwm_fan_control+0x78>
		{
			if (OCR3C >= 250)
     5a0:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     5a4:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     5a8:	8a 3f       	cpi	r24, 0xFA	; 250
     5aa:	91 05       	cpc	r25, r1
     5ac:	38 f0       	brcs	.+14     	; 0x5bc <hw_pwm_fan_control+0x68>
			{
				OCR3C = 250;
     5ae:	8a ef       	ldi	r24, 0xFA	; 250
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     5b6:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     5ba:	cf cf       	rjmp	.-98     	; 0x55a <hw_pwm_fan_control+0x6>
			}
			else
			{
				OCR3C += 20; // 20씩 증가
     5bc:	e2 e8       	ldi	r30, 0x82	; 130
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	91 81       	ldd	r25, Z+1	; 0x01
     5c4:	44 96       	adiw	r24, 0x14	; 20
     5c6:	91 83       	std	Z+1, r25	; 0x01
     5c8:	80 83       	st	Z, r24
     5ca:	c7 cf       	rjmp	.-114    	; 0x55a <hw_pwm_fan_control+0x6>
			}
		}
		else if (get_button(BUTTON2, BUTTON2PIN)) // spead down
     5cc:	66 e0       	ldi	r22, 0x06	; 6
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	7a dd       	rcall	.-1292   	; 0xca <get_button>
     5d6:	89 2b       	or	r24, r25
     5d8:	09 f4       	brne	.+2      	; 0x5dc <hw_pwm_fan_control+0x88>
     5da:	bf cf       	rjmp	.-130    	; 0x55a <hw_pwm_fan_control+0x6>
		{
			if (OCR3C <= 70)
     5dc:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     5e0:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     5e4:	87 34       	cpi	r24, 0x47	; 71
     5e6:	91 05       	cpc	r25, r1
     5e8:	38 f4       	brcc	.+14     	; 0x5f8 <hw_pwm_fan_control+0xa4>
			{
				OCR3C = 70;
     5ea:	86 e4       	ldi	r24, 0x46	; 70
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     5f2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     5f6:	b1 cf       	rjmp	.-158    	; 0x55a <hw_pwm_fan_control+0x6>
			}
			else
			{
				OCR3C -= 20; // 20씩 감소
     5f8:	e2 e8       	ldi	r30, 0x82	; 130
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	91 81       	ldd	r25, Z+1	; 0x01
     600:	44 97       	sbiw	r24, 0x14	; 20
     602:	91 83       	std	Z+1, r25	; 0x01
     604:	80 83       	st	Z, r24
     606:	a9 cf       	rjmp	.-174    	; 0x55a <hw_pwm_fan_control+0x6>

00000608 <__vector_18>:

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     608:	1f 92       	push	r1
     60a:	0f 92       	push	r0
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	0f 92       	push	r0
     610:	11 24       	eor	r1, r1
     612:	0b b6       	in	r0, 0x3b	; 59
     614:	0f 92       	push	r0
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	1f 92       	push	r1
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     638:	8c b1       	in	r24, 0x0c	; 12
     63a:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     63c:	89 81       	ldd	r24, Y+1	; 0x01
     63e:	8d 30       	cpi	r24, 0x0D	; 13
     640:	19 f0       	breq	.+6      	; 0x648 <__vector_18+0x40>
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	8a 30       	cpi	r24, 0x0A	; 10
     646:	61 f5       	brne	.+88     	; 0x6a0 <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     648:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <rear>
     64c:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <rear+0x1>
     650:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <i.1894>
     654:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <i.1894+0x1>
     658:	40 e5       	ldi	r20, 0x50	; 80
     65a:	42 9f       	mul	r20, r18
     65c:	f0 01       	movw	r30, r0
     65e:	43 9f       	mul	r20, r19
     660:	f0 0d       	add	r31, r0
     662:	11 24       	eor	r1, r1
     664:	ea 52       	subi	r30, 0x2A	; 42
     666:	fe 4f       	sbci	r31, 0xFE	; 254
     668:	e8 0f       	add	r30, r24
     66a:	f9 1f       	adc	r31, r25
     66c:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     66e:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <i.1894+0x1>
     672:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <i.1894>
		rear++;
     676:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <rear>
     67a:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <rear+0x1>
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <rear+0x1>
     684:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
     688:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <rear>
     68c:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <rear+0x1>
     690:	6a e0       	ldi	r22, 0x0A	; 10
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	86 d5       	rcall	.+2828   	; 0x11a2 <__divmodhi4>
     696:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <rear+0x1>
     69a:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <rear>
     69e:	1c c0       	rjmp	.+56     	; 0x6d8 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
     6a0:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <rear>
     6a4:	70 91 cd 01 	lds	r23, 0x01CD	; 0x8001cd <rear+0x1>
     6a8:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <i.1894>
     6ac:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <i.1894+0x1>
     6b0:	9c 01       	movw	r18, r24
     6b2:	2f 5f       	subi	r18, 0xFF	; 255
     6b4:	3f 4f       	sbci	r19, 0xFF	; 255
     6b6:	30 93 c9 01 	sts	0x01C9, r19	; 0x8001c9 <i.1894+0x1>
     6ba:	20 93 c8 01 	sts	0x01C8, r18	; 0x8001c8 <i.1894>
     6be:	49 81       	ldd	r20, Y+1	; 0x01
     6c0:	50 e5       	ldi	r21, 0x50	; 80
     6c2:	56 9f       	mul	r21, r22
     6c4:	90 01       	movw	r18, r0
     6c6:	57 9f       	mul	r21, r23
     6c8:	30 0d       	add	r19, r0
     6ca:	11 24       	eor	r1, r1
     6cc:	2a 52       	subi	r18, 0x2A	; 42
     6ce:	3e 4f       	sbci	r19, 0xFE	; 254
     6d0:	f9 01       	movw	r30, r18
     6d2:	e8 0f       	add	r30, r24
     6d4:	f9 1f       	adc	r31, r25
     6d6:	40 83       	st	Z, r20
	}
		  
}
     6d8:	0f 90       	pop	r0
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	ff 91       	pop	r31
     6e0:	ef 91       	pop	r30
     6e2:	bf 91       	pop	r27
     6e4:	af 91       	pop	r26
     6e6:	9f 91       	pop	r25
     6e8:	8f 91       	pop	r24
     6ea:	7f 91       	pop	r23
     6ec:	6f 91       	pop	r22
     6ee:	5f 91       	pop	r21
     6f0:	4f 91       	pop	r20
     6f2:	3f 91       	pop	r19
     6f4:	2f 91       	pop	r18
     6f6:	0f 90       	pop	r0
     6f8:	0b be       	out	0x3b, r0	; 59
     6fa:	0f 90       	pop	r0
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	0f 90       	pop	r0
     700:	1f 90       	pop	r1
     702:	18 95       	reti

00000704 <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
     704:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
     708:	8f ec       	ldi	r24, 0xCF	; 207
     70a:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
     70c:	8b b1       	in	r24, 0x0b	; 11
     70e:	82 60       	ori	r24, 0x02	; 2
     710:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     712:	e5 e9       	ldi	r30, 0x95	; 149
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
     718:	86 60       	ori	r24, 0x06	; 6
     71a:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     71c:	8a b1       	in	r24, 0x0a	; 10
     71e:	88 69       	ori	r24, 0x98	; 152
     720:	8a b9       	out	0x0a, r24	; 10
     722:	08 95       	ret

00000724 <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
     724:	5d 9b       	sbis	0x0b, 5	; 11
     726:	fe cf       	rjmp	.-4      	; 0x724 <UART0_transmit>
		;   // no operation NOP
	
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
     728:	8c b9       	out	0x0c, r24	; 12
     72a:	08 95       	ret

0000072c <pc_command_processing>:
}

void pc_command_processing(void)
{
     72c:	cf 93       	push	r28
	if (front != rear) // data가 rx_buff에 존재한다. front와 rear 비교
     72e:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <front>
     732:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <front+0x1>
     736:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <rear>
     73a:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <rear+0x1>
     73e:	28 17       	cp	r18, r24
     740:	39 07       	cpc	r19, r25
     742:	09 f4       	brne	.+2      	; 0x746 <pc_command_processing+0x1a>
     744:	1b c1       	rjmp	.+566    	; 0x97c <pc_command_processing+0x250>
	{
		printf("%s\n", rx_buff[front]); // rx_buff[front] ==> &rx_buff[front][0]
     746:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <front>
     74a:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <front+0x1>
     74e:	c0 e5       	ldi	r28, 0x50	; 80
     750:	c2 9f       	mul	r28, r18
     752:	c0 01       	movw	r24, r0
     754:	c3 9f       	mul	r28, r19
     756:	90 0d       	add	r25, r0
     758:	11 24       	eor	r1, r1
     75a:	8a 52       	subi	r24, 0x2A	; 42
     75c:	9e 4f       	sbci	r25, 0xFE	; 254
     75e:	69 d5       	rcall	.+2770   	; 0x1232 <puts>
		
		if (strncmp(rx_buff[front], "led_all_on", strlen("led_all_on")) == 0)
     760:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <front>
     764:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <front+0x1>
     768:	c2 9f       	mul	r28, r18
     76a:	c0 01       	movw	r24, r0
     76c:	c3 9f       	mul	r28, r19
     76e:	90 0d       	add	r25, r0
     770:	11 24       	eor	r1, r1
     772:	4a e0       	ldi	r20, 0x0A	; 10
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	6e e1       	ldi	r22, 0x1E	; 30
     778:	71 e0       	ldi	r23, 0x01	; 1
     77a:	8a 52       	subi	r24, 0x2A	; 42
     77c:	9e 4f       	sbci	r25, 0xFE	; 254
     77e:	38 d5       	rcall	.+2672   	; 0x11f0 <strncmp>
     780:	89 2b       	or	r24, r25
     782:	59 f4       	brne	.+22     	; 0x79a <pc_command_processing+0x6e>
		{
			command_type = PC_COMMAND;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     78c:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = LED_ALL_ON;
     790:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <state+0x1>
     794:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <state>
     798:	dd c0       	rjmp	.+442    	; 0x954 <pc_command_processing+0x228>
		}
		else if (strncmp(rx_buff[front], "led_all_off", strlen("led_all_off")) == 0)
     79a:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <front>
     79e:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <front+0x1>
     7a2:	40 e5       	ldi	r20, 0x50	; 80
     7a4:	42 9f       	mul	r20, r18
     7a6:	c0 01       	movw	r24, r0
     7a8:	43 9f       	mul	r20, r19
     7aa:	90 0d       	add	r25, r0
     7ac:	11 24       	eor	r1, r1
     7ae:	4b e0       	ldi	r20, 0x0B	; 11
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	69 e2       	ldi	r22, 0x29	; 41
     7b4:	71 e0       	ldi	r23, 0x01	; 1
     7b6:	8a 52       	subi	r24, 0x2A	; 42
     7b8:	9e 4f       	sbci	r25, 0xFE	; 254
     7ba:	1a d5       	rcall	.+2612   	; 0x11f0 <strncmp>
     7bc:	89 2b       	or	r24, r25
     7be:	59 f4       	brne	.+22     	; 0x7d6 <pc_command_processing+0xaa>
		{
			command_type = PC_COMMAND;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     7c8:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = LED_ALL_OFF;
     7cc:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     7d0:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     7d4:	bf c0       	rjmp	.+382    	; 0x954 <pc_command_processing+0x228>
		}
		else if (strncmp(rx_buff[front], "shift_left_ledon", strlen("floweron")) == 0)
     7d6:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <front>
     7da:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <front+0x1>
     7de:	40 e5       	ldi	r20, 0x50	; 80
     7e0:	42 9f       	mul	r20, r18
     7e2:	c0 01       	movw	r24, r0
     7e4:	43 9f       	mul	r20, r19
     7e6:	90 0d       	add	r25, r0
     7e8:	11 24       	eor	r1, r1
     7ea:	48 e0       	ldi	r20, 0x08	; 8
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	65 e3       	ldi	r22, 0x35	; 53
     7f0:	71 e0       	ldi	r23, 0x01	; 1
     7f2:	8a 52       	subi	r24, 0x2A	; 42
     7f4:	9e 4f       	sbci	r25, 0xFE	; 254
     7f6:	fc d4       	rcall	.+2552   	; 0x11f0 <strncmp>
     7f8:	89 2b       	or	r24, r25
     7fa:	69 f4       	brne	.+26     	; 0x816 <pc_command_processing+0xea>
		{
			command_type = PC_COMMAND;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     804:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = SHIFT_LEFT_LEDON;
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     810:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     814:	9f c0       	rjmp	.+318    	; 0x954 <pc_command_processing+0x228>
		}
		else if (strncmp(rx_buff[front], "shift_right_ledon", strlen("floweroff")) == 0)
     816:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <front>
     81a:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <front+0x1>
     81e:	40 e5       	ldi	r20, 0x50	; 80
     820:	42 9f       	mul	r20, r18
     822:	c0 01       	movw	r24, r0
     824:	43 9f       	mul	r20, r19
     826:	90 0d       	add	r25, r0
     828:	11 24       	eor	r1, r1
     82a:	49 e0       	ldi	r20, 0x09	; 9
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	66 e4       	ldi	r22, 0x46	; 70
     830:	71 e0       	ldi	r23, 0x01	; 1
     832:	8a 52       	subi	r24, 0x2A	; 42
     834:	9e 4f       	sbci	r25, 0xFE	; 254
     836:	dc d4       	rcall	.+2488   	; 0x11f0 <strncmp>
     838:	89 2b       	or	r24, r25
     83a:	69 f4       	brne	.+26     	; 0x856 <pc_command_processing+0x12a>
		{
			command_type = PC_COMMAND;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     844:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = SHIFT_RIGHT_LEDON;
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     850:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     854:	7f c0       	rjmp	.+254    	; 0x954 <pc_command_processing+0x228>
		}
		else if (strncmp(rx_buff[front], "shift_left_keep_ledon", strlen("shift_left_ledon")) == 0)
     856:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <front>
     85a:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <front+0x1>
     85e:	40 e5       	ldi	r20, 0x50	; 80
     860:	42 9f       	mul	r20, r18
     862:	c0 01       	movw	r24, r0
     864:	43 9f       	mul	r20, r19
     866:	90 0d       	add	r25, r0
     868:	11 24       	eor	r1, r1
     86a:	40 e1       	ldi	r20, 0x10	; 16
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	68 e5       	ldi	r22, 0x58	; 88
     870:	71 e0       	ldi	r23, 0x01	; 1
     872:	8a 52       	subi	r24, 0x2A	; 42
     874:	9e 4f       	sbci	r25, 0xFE	; 254
     876:	bc d4       	rcall	.+2424   	; 0x11f0 <strncmp>
     878:	89 2b       	or	r24, r25
     87a:	69 f4       	brne	.+26     	; 0x896 <pc_command_processing+0x16a>
		{
			command_type = PC_COMMAND;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     884:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = SHIFT_LEFT_KEEP_LEDON;
     888:	84 e0       	ldi	r24, 0x04	; 4
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     890:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     894:	5f c0       	rjmp	.+190    	; 0x954 <pc_command_processing+0x228>
		}
		else if (strncmp(rx_buff[front], "shift_right_keep_ledon", strlen("shift_right_ledon")) == 0)
     896:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <front>
     89a:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <front+0x1>
     89e:	40 e5       	ldi	r20, 0x50	; 80
     8a0:	42 9f       	mul	r20, r18
     8a2:	c0 01       	movw	r24, r0
     8a4:	43 9f       	mul	r20, r19
     8a6:	90 0d       	add	r25, r0
     8a8:	11 24       	eor	r1, r1
     8aa:	41 e1       	ldi	r20, 0x11	; 17
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	6e e6       	ldi	r22, 0x6E	; 110
     8b0:	71 e0       	ldi	r23, 0x01	; 1
     8b2:	8a 52       	subi	r24, 0x2A	; 42
     8b4:	9e 4f       	sbci	r25, 0xFE	; 254
     8b6:	9c d4       	rcall	.+2360   	; 0x11f0 <strncmp>
     8b8:	89 2b       	or	r24, r25
     8ba:	69 f4       	brne	.+26     	; 0x8d6 <pc_command_processing+0x1aa>
		{
			command_type = PC_COMMAND;
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     8c4:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = SHIFT_RIGHT_KEEP_LEDON;
     8c8:	85 e0       	ldi	r24, 0x05	; 5
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     8d0:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     8d4:	3f c0       	rjmp	.+126    	; 0x954 <pc_command_processing+0x228>
		}
		else if (strncmp(rx_buff[front], "floweron", strlen("shift_left_keep_ledon")) == 0)
     8d6:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <front>
     8da:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <front+0x1>
     8de:	40 e5       	ldi	r20, 0x50	; 80
     8e0:	42 9f       	mul	r20, r18
     8e2:	c0 01       	movw	r24, r0
     8e4:	43 9f       	mul	r20, r19
     8e6:	90 0d       	add	r25, r0
     8e8:	11 24       	eor	r1, r1
     8ea:	45 e1       	ldi	r20, 0x15	; 21
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	65 e8       	ldi	r22, 0x85	; 133
     8f0:	71 e0       	ldi	r23, 0x01	; 1
     8f2:	8a 52       	subi	r24, 0x2A	; 42
     8f4:	9e 4f       	sbci	r25, 0xFE	; 254
     8f6:	7c d4       	rcall	.+2296   	; 0x11f0 <strncmp>
     8f8:	89 2b       	or	r24, r25
     8fa:	69 f4       	brne	.+26     	; 0x916 <pc_command_processing+0x1ea>
		{
			command_type = PC_COMMAND;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     904:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = FLOWERON;
     908:	86 e0       	ldi	r24, 0x06	; 6
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     910:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     914:	1f c0       	rjmp	.+62     	; 0x954 <pc_command_processing+0x228>
		}
		else if (strncmp(rx_buff[front], "floweroff", strlen("shift_right_keep_ledon")) == 0)
     916:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <front>
     91a:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <front+0x1>
     91e:	40 e5       	ldi	r20, 0x50	; 80
     920:	42 9f       	mul	r20, r18
     922:	c0 01       	movw	r24, r0
     924:	43 9f       	mul	r20, r19
     926:	90 0d       	add	r25, r0
     928:	11 24       	eor	r1, r1
     92a:	46 e1       	ldi	r20, 0x16	; 22
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	6e e8       	ldi	r22, 0x8E	; 142
     930:	71 e0       	ldi	r23, 0x01	; 1
     932:	8a 52       	subi	r24, 0x2A	; 42
     934:	9e 4f       	sbci	r25, 0xFE	; 254
     936:	5c d4       	rcall	.+2232   	; 0x11f0 <strncmp>
     938:	89 2b       	or	r24, r25
     93a:	61 f4       	brne	.+24     	; 0x954 <pc_command_processing+0x228>
		{
			command_type = PC_COMMAND;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     944:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = FLOWEROFF;
     948:	87 e0       	ldi	r24, 0x07	; 7
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     950:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
		}
		front++;
     954:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <front>
     958:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <front+0x1>
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <front+0x1>
     962:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <front>
		front %= COMMAND_NUMBER;
     966:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <front>
     96a:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <front+0x1>
     96e:	6a e0       	ldi	r22, 0x0A	; 10
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	17 d4       	rcall	.+2094   	; 0x11a2 <__divmodhi4>
     974:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <front+0x1>
     978:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <front>
	}
	 if (command_type == PC_COMMAND)
     97c:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <command_type>
     980:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <command_type+0x1>
     984:	01 97       	sbiw	r24, 0x01	; 1
     986:	61 f4       	brne	.+24     	; 0x9a0 <pc_command_processing+0x274>
	 {
		 (*fp[state])();
     988:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <state>
     98c:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <state+0x1>
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	e0 50       	subi	r30, 0x00	; 0
     996:	ff 4f       	sbci	r31, 0xFF	; 255
     998:	01 90       	ld	r0, Z+
     99a:	f0 81       	ld	r31, Z
     99c:	e0 2d       	mov	r30, r0
     99e:	09 95       	icall
	 }
	// !!!! queue full check하는 logic이 들어가야 한다.
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <__vector_30>:
void UART1_transmit(uint8_t data)
{
	while( !(UCSR1A & 1 << UDRE1) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
		;   // no operation NOP
	
	UDR1 = data;   // HW전송 register(UDR1)에 data를 쏴준다.  
     9a4:	1f 92       	push	r1
     9a6:	0f 92       	push	r0
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	0f 92       	push	r0
     9ac:	11 24       	eor	r1, r1
     9ae:	0b b6       	in	r0, 0x3b	; 59
     9b0:	0f 92       	push	r0
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	4f 93       	push	r20
     9b8:	5f 93       	push	r21
     9ba:	6f 93       	push	r22
     9bc:	7f 93       	push	r23
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	af 93       	push	r26
     9c4:	bf 93       	push	r27
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	1f 92       	push	r1
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     9d8:	89 83       	std	Y+1, r24	; 0x01
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	8d 30       	cpi	r24, 0x0D	; 13
     9de:	19 f0       	breq	.+6      	; 0x9e6 <__vector_30+0x42>
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	8a 30       	cpi	r24, 0x0A	; 10
     9e4:	61 f5       	brne	.+88     	; 0xa3e <__vector_30+0x9a>
     9e6:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <rear1>
     9ea:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <rear1+0x1>
     9ee:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <i.1896>
     9f2:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <i.1896+0x1>
     9f6:	40 e5       	ldi	r20, 0x50	; 80
     9f8:	42 9f       	mul	r20, r18
     9fa:	f0 01       	movw	r30, r0
     9fc:	43 9f       	mul	r20, r19
     9fe:	f0 0d       	add	r31, r0
     a00:	11 24       	eor	r1, r1
     a02:	ea 50       	subi	r30, 0x0A	; 10
     a04:	fb 4f       	sbci	r31, 0xFB	; 251
     a06:	e8 0f       	add	r30, r24
     a08:	f9 1f       	adc	r31, r25
     a0a:	10 82       	st	Z, r1
     a0c:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <i.1896+0x1>
     a10:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <i.1896>
     a14:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <rear1>
     a18:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <rear1+0x1>
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <rear1+0x1>
     a22:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <rear1>
     a26:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <rear1>
     a2a:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <rear1+0x1>
     a2e:	6a e0       	ldi	r22, 0x0A	; 10
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	b7 d3       	rcall	.+1902   	; 0x11a2 <__divmodhi4>
     a34:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <rear1+0x1>
     a38:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <rear1>
     a3c:	1c c0       	rjmp	.+56     	; 0xa76 <__vector_30+0xd2>
     a3e:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <rear1>
     a42:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <rear1+0x1>
     a46:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <i.1896>
     a4a:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <i.1896+0x1>
     a4e:	9c 01       	movw	r18, r24
     a50:	2f 5f       	subi	r18, 0xFF	; 255
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	30 93 cf 01 	sts	0x01CF, r19	; 0x8001cf <i.1896+0x1>
     a58:	20 93 ce 01 	sts	0x01CE, r18	; 0x8001ce <i.1896>
     a5c:	49 81       	ldd	r20, Y+1	; 0x01
     a5e:	50 e5       	ldi	r21, 0x50	; 80
     a60:	56 9f       	mul	r21, r22
     a62:	90 01       	movw	r18, r0
     a64:	57 9f       	mul	r21, r23
     a66:	30 0d       	add	r19, r0
     a68:	11 24       	eor	r1, r1
     a6a:	2a 50       	subi	r18, 0x0A	; 10
     a6c:	3b 4f       	sbci	r19, 0xFB	; 251
     a6e:	f9 01       	movw	r30, r18
     a70:	e8 0f       	add	r30, r24
     a72:	f9 1f       	adc	r31, r25
     a74:	40 83       	st	Z, r20
     a76:	0f 90       	pop	r0
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	ff 91       	pop	r31
     a7e:	ef 91       	pop	r30
     a80:	bf 91       	pop	r27
     a82:	af 91       	pop	r26
     a84:	9f 91       	pop	r25
     a86:	8f 91       	pop	r24
     a88:	7f 91       	pop	r23
     a8a:	6f 91       	pop	r22
     a8c:	5f 91       	pop	r21
     a8e:	4f 91       	pop	r20
     a90:	3f 91       	pop	r19
     a92:	2f 91       	pop	r18
     a94:	0f 90       	pop	r0
     a96:	0b be       	out	0x3b, r0	; 59
     a98:	0f 90       	pop	r0
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	0f 90       	pop	r0
     a9e:	1f 90       	pop	r1
     aa0:	18 95       	reti

00000aa2 <init_uart1>:
     aa2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     aa6:	8f ec       	ldi	r24, 0xCF	; 207
     aa8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     aac:	eb e9       	ldi	r30, 0x9B	; 155
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	82 60       	ori	r24, 0x02	; 2
     ab4:	80 83       	st	Z, r24
     ab6:	ed e9       	ldi	r30, 0x9D	; 157
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	86 60       	ori	r24, 0x06	; 6
     abe:	80 83       	st	Z, r24
     ac0:	ea e9       	ldi	r30, 0x9A	; 154
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	88 69       	ori	r24, 0x98	; 152
     ac8:	80 83       	st	Z, r24
     aca:	08 95       	ret

00000acc <bt_command_processing>:
}


void bt_command_processing(void)
{
     acc:	cf 93       	push	r28
	if (front1 != rear1) // data가 rx_buff에 존재한다. front와 rear 비교
     ace:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <front1>
     ad2:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <front1+0x1>
     ad6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <rear1>
     ada:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <rear1+0x1>
     ade:	28 17       	cp	r18, r24
     ae0:	39 07       	cpc	r19, r25
     ae2:	09 f4       	brne	.+2      	; 0xae6 <bt_command_processing+0x1a>
     ae4:	1b c1       	rjmp	.+566    	; 0xd1c <bt_command_processing+0x250>
	{
		printf("%s\n", rx1_buff[front1]); // rx_buff[front] ==> &rx_buff[front][0]
     ae6:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <front1>
     aea:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <front1+0x1>
     aee:	c0 e5       	ldi	r28, 0x50	; 80
     af0:	c2 9f       	mul	r28, r18
     af2:	c0 01       	movw	r24, r0
     af4:	c3 9f       	mul	r28, r19
     af6:	90 0d       	add	r25, r0
     af8:	11 24       	eor	r1, r1
     afa:	8a 50       	subi	r24, 0x0A	; 10
     afc:	9b 4f       	sbci	r25, 0xFB	; 251
     afe:	99 d3       	rcall	.+1842   	; 0x1232 <puts>
		
		if (strncmp(rx1_buff[front1], "led_all_on", strlen("led_all_on")) == 0)
     b00:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <front1>
     b04:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <front1+0x1>
     b08:	c2 9f       	mul	r28, r18
     b0a:	c0 01       	movw	r24, r0
     b0c:	c3 9f       	mul	r28, r19
     b0e:	90 0d       	add	r25, r0
     b10:	11 24       	eor	r1, r1
     b12:	4a e0       	ldi	r20, 0x0A	; 10
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	6e e1       	ldi	r22, 0x1E	; 30
     b18:	71 e0       	ldi	r23, 0x01	; 1
     b1a:	8a 50       	subi	r24, 0x0A	; 10
     b1c:	9b 4f       	sbci	r25, 0xFB	; 251
     b1e:	68 d3       	rcall	.+1744   	; 0x11f0 <strncmp>
     b20:	89 2b       	or	r24, r25
     b22:	59 f4       	brne	.+22     	; 0xb3a <bt_command_processing+0x6e>
		{
			command_type = BT_COMMAND;
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     b2c:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = LED_ALL_ON;
     b30:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <state+0x1>
     b34:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <state>
     b38:	dd c0       	rjmp	.+442    	; 0xcf4 <bt_command_processing+0x228>
		}
		else if (strncmp(rx1_buff[front1], "led_all_off", strlen("led_all_off")) == 0)
     b3a:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <front1>
     b3e:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <front1+0x1>
     b42:	40 e5       	ldi	r20, 0x50	; 80
     b44:	42 9f       	mul	r20, r18
     b46:	c0 01       	movw	r24, r0
     b48:	43 9f       	mul	r20, r19
     b4a:	90 0d       	add	r25, r0
     b4c:	11 24       	eor	r1, r1
     b4e:	4b e0       	ldi	r20, 0x0B	; 11
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	69 e2       	ldi	r22, 0x29	; 41
     b54:	71 e0       	ldi	r23, 0x01	; 1
     b56:	8a 50       	subi	r24, 0x0A	; 10
     b58:	9b 4f       	sbci	r25, 0xFB	; 251
     b5a:	4a d3       	rcall	.+1684   	; 0x11f0 <strncmp>
     b5c:	89 2b       	or	r24, r25
     b5e:	69 f4       	brne	.+26     	; 0xb7a <bt_command_processing+0xae>
		{
			command_type = BT_COMMAND;
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     b68:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = LED_ALL_OFF;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     b74:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     b78:	bd c0       	rjmp	.+378    	; 0xcf4 <bt_command_processing+0x228>
		}
		else if (strncmp(rx1_buff[front1], "shift_left_ledon", strlen("floweron")) == 0)
     b7a:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <front1>
     b7e:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <front1+0x1>
     b82:	40 e5       	ldi	r20, 0x50	; 80
     b84:	42 9f       	mul	r20, r18
     b86:	c0 01       	movw	r24, r0
     b88:	43 9f       	mul	r20, r19
     b8a:	90 0d       	add	r25, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	48 e0       	ldi	r20, 0x08	; 8
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	65 e3       	ldi	r22, 0x35	; 53
     b94:	71 e0       	ldi	r23, 0x01	; 1
     b96:	8a 50       	subi	r24, 0x0A	; 10
     b98:	9b 4f       	sbci	r25, 0xFB	; 251
     b9a:	2a d3       	rcall	.+1620   	; 0x11f0 <strncmp>
     b9c:	89 2b       	or	r24, r25
     b9e:	59 f4       	brne	.+22     	; 0xbb6 <bt_command_processing+0xea>
		{
			command_type = BT_COMMAND;
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     ba8:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = SHIFT_LEFT_LEDON;
     bac:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     bb0:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     bb4:	9f c0       	rjmp	.+318    	; 0xcf4 <bt_command_processing+0x228>
		}
		else if (strncmp(rx1_buff[front1], "shift_right_ledon", strlen("floweroff")) == 0)
     bb6:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <front1>
     bba:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <front1+0x1>
     bbe:	40 e5       	ldi	r20, 0x50	; 80
     bc0:	42 9f       	mul	r20, r18
     bc2:	c0 01       	movw	r24, r0
     bc4:	43 9f       	mul	r20, r19
     bc6:	90 0d       	add	r25, r0
     bc8:	11 24       	eor	r1, r1
     bca:	49 e0       	ldi	r20, 0x09	; 9
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	66 e4       	ldi	r22, 0x46	; 70
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	8a 50       	subi	r24, 0x0A	; 10
     bd4:	9b 4f       	sbci	r25, 0xFB	; 251
     bd6:	0c d3       	rcall	.+1560   	; 0x11f0 <strncmp>
     bd8:	89 2b       	or	r24, r25
     bda:	69 f4       	brne	.+26     	; 0xbf6 <bt_command_processing+0x12a>
		{
			command_type = BT_COMMAND;
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     be4:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = SHIFT_RIGHT_LEDON;
     be8:	83 e0       	ldi	r24, 0x03	; 3
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     bf0:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     bf4:	7f c0       	rjmp	.+254    	; 0xcf4 <bt_command_processing+0x228>
		}
		else if (strncmp(rx1_buff[front1], "shift_left_keep_ledon", strlen("shift_left_ledon")) == 0)
     bf6:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <front1>
     bfa:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <front1+0x1>
     bfe:	40 e5       	ldi	r20, 0x50	; 80
     c00:	42 9f       	mul	r20, r18
     c02:	c0 01       	movw	r24, r0
     c04:	43 9f       	mul	r20, r19
     c06:	90 0d       	add	r25, r0
     c08:	11 24       	eor	r1, r1
     c0a:	40 e1       	ldi	r20, 0x10	; 16
     c0c:	50 e0       	ldi	r21, 0x00	; 0
     c0e:	68 e5       	ldi	r22, 0x58	; 88
     c10:	71 e0       	ldi	r23, 0x01	; 1
     c12:	8a 50       	subi	r24, 0x0A	; 10
     c14:	9b 4f       	sbci	r25, 0xFB	; 251
     c16:	ec d2       	rcall	.+1496   	; 0x11f0 <strncmp>
     c18:	89 2b       	or	r24, r25
     c1a:	69 f4       	brne	.+26     	; 0xc36 <bt_command_processing+0x16a>
		{
			command_type = BT_COMMAND;
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     c24:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = SHIFT_LEFT_KEEP_LEDON;
     c28:	84 e0       	ldi	r24, 0x04	; 4
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     c30:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     c34:	5f c0       	rjmp	.+190    	; 0xcf4 <bt_command_processing+0x228>
		}
		else if (strncmp(rx1_buff[front1], "shift_right_keep_ledon", strlen("shift_right_ledon")) == 0)
     c36:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <front1>
     c3a:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <front1+0x1>
     c3e:	40 e5       	ldi	r20, 0x50	; 80
     c40:	42 9f       	mul	r20, r18
     c42:	c0 01       	movw	r24, r0
     c44:	43 9f       	mul	r20, r19
     c46:	90 0d       	add	r25, r0
     c48:	11 24       	eor	r1, r1
     c4a:	41 e1       	ldi	r20, 0x11	; 17
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	6e e6       	ldi	r22, 0x6E	; 110
     c50:	71 e0       	ldi	r23, 0x01	; 1
     c52:	8a 50       	subi	r24, 0x0A	; 10
     c54:	9b 4f       	sbci	r25, 0xFB	; 251
     c56:	cc d2       	rcall	.+1432   	; 0x11f0 <strncmp>
     c58:	89 2b       	or	r24, r25
     c5a:	69 f4       	brne	.+26     	; 0xc76 <bt_command_processing+0x1aa>
		{
			command_type = BT_COMMAND;
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     c64:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = SHIFT_RIGHT_KEEP_LEDON;
     c68:	85 e0       	ldi	r24, 0x05	; 5
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     c70:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     c74:	3f c0       	rjmp	.+126    	; 0xcf4 <bt_command_processing+0x228>
		}
		else if (strncmp(rx1_buff[front1], "floweron", strlen("shift_left_keep_ledon")) == 0)
     c76:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <front1>
     c7a:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <front1+0x1>
     c7e:	40 e5       	ldi	r20, 0x50	; 80
     c80:	42 9f       	mul	r20, r18
     c82:	c0 01       	movw	r24, r0
     c84:	43 9f       	mul	r20, r19
     c86:	90 0d       	add	r25, r0
     c88:	11 24       	eor	r1, r1
     c8a:	45 e1       	ldi	r20, 0x15	; 21
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	65 e8       	ldi	r22, 0x85	; 133
     c90:	71 e0       	ldi	r23, 0x01	; 1
     c92:	8a 50       	subi	r24, 0x0A	; 10
     c94:	9b 4f       	sbci	r25, 0xFB	; 251
     c96:	ac d2       	rcall	.+1368   	; 0x11f0 <strncmp>
     c98:	89 2b       	or	r24, r25
     c9a:	69 f4       	brne	.+26     	; 0xcb6 <bt_command_processing+0x1ea>
		{
			command_type = BT_COMMAND;
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     ca4:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = FLOWERON;
     ca8:	86 e0       	ldi	r24, 0x06	; 6
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     cb0:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
     cb4:	1f c0       	rjmp	.+62     	; 0xcf4 <bt_command_processing+0x228>
		}
		else if (strncmp(rx1_buff[front1], "floweroff", strlen("shift_right_keep_ledon")) == 0)
     cb6:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <front1>
     cba:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <front1+0x1>
     cbe:	40 e5       	ldi	r20, 0x50	; 80
     cc0:	42 9f       	mul	r20, r18
     cc2:	c0 01       	movw	r24, r0
     cc4:	43 9f       	mul	r20, r19
     cc6:	90 0d       	add	r25, r0
     cc8:	11 24       	eor	r1, r1
     cca:	46 e1       	ldi	r20, 0x16	; 22
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	6e e8       	ldi	r22, 0x8E	; 142
     cd0:	71 e0       	ldi	r23, 0x01	; 1
     cd2:	8a 50       	subi	r24, 0x0A	; 10
     cd4:	9b 4f       	sbci	r25, 0xFB	; 251
     cd6:	8c d2       	rcall	.+1304   	; 0x11f0 <strncmp>
     cd8:	89 2b       	or	r24, r25
     cda:	61 f4       	brne	.+24     	; 0xcf4 <bt_command_processing+0x228>
		{
			command_type = BT_COMMAND;
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <command_type+0x1>
     ce4:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <command_type>
			state = FLOWEROFF;
     ce8:	87 e0       	ldi	r24, 0x07	; 7
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <state+0x1>
     cf0:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
		}
		front1++;
     cf4:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <front1>
     cf8:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <front1+0x1>
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <front1+0x1>
     d02:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <front1>
		front1 %= COMMAND_NUMBER;
     d06:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <front1>
     d0a:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <front1+0x1>
     d0e:	6a e0       	ldi	r22, 0x0A	; 10
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	47 d2       	rcall	.+1166   	; 0x11a2 <__divmodhi4>
     d14:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <front1+0x1>
     d18:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <front1>
	}
	 if (command_type == BT_COMMAND)
     d1c:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <command_type>
     d20:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <command_type+0x1>
     d24:	02 97       	sbiw	r24, 0x02	; 2
     d26:	61 f4       	brne	.+24     	; 0xd40 <bt_command_processing+0x274>
	 {
		 (*fp[state])();
     d28:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <state>
     d2c:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <state+0x1>
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	e0 50       	subi	r30, 0x00	; 0
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	01 90       	ld	r0, Z+
     d3a:	f0 81       	ld	r31, Z
     d3c:	e0 2d       	mov	r30, r0
     d3e:	09 95       	icall
	 }
	// !!!! queue full check하는 logic이 들어가야 한다.
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <__vector_5>:
char scm[50];

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect)
{
     d44:	1f 92       	push	r1
     d46:	0f 92       	push	r0
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	0f 92       	push	r0
     d4c:	11 24       	eor	r1, r1
     d4e:	0b b6       	in	r0, 0x3b	; 59
     d50:	0f 92       	push	r0
     d52:	2f 93       	push	r18
     d54:	3f 93       	push	r19
     d56:	4f 93       	push	r20
     d58:	5f 93       	push	r21
     d5a:	6f 93       	push	r22
     d5c:	7f 93       	push	r23
     d5e:	8f 93       	push	r24
     d60:	9f 93       	push	r25
     d62:	af 93       	push	r26
     d64:	bf 93       	push	r27
     d66:	ef 93       	push	r30
     d68:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN & (1 << ECHO))
     d6a:	0c 9b       	sbis	0x01, 4	; 1
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <__vector_5+0x30>
	{
		TCNT1 = 0;
     d6e:	1d bc       	out	0x2d, r1	; 45
     d70:	1c bc       	out	0x2c, r1	; 44
     d72:	31 c0       	rjmp	.+98     	; 0xdd6 <__vector_5+0x92>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
     d74:	6c b5       	in	r22, 0x2c	; 44
     d76:	7d b5       	in	r23, 0x2d	; 45
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	21 d1       	rcall	.+578    	; 0xfc0 <__floatunsisf>
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	34 e2       	ldi	r19, 0x24	; 36
     d82:	44 e7       	ldi	r20, 0x74	; 116
     d84:	59 e4       	ldi	r21, 0x49	; 73
     d86:	aa d1       	rcall	.+852    	; 0x10dc <__mulsf3>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e8       	ldi	r20, 0x80	; 128
     d8e:	54 e4       	ldi	r21, 0x44	; 68
     d90:	a5 d1       	rcall	.+842    	; 0x10dc <__mulsf3>
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	34 e2       	ldi	r19, 0x24	; 36
     d96:	44 e7       	ldi	r20, 0x74	; 116
     d98:	5b e4       	ldi	r21, 0x4B	; 75
     d9a:	79 d0       	rcall	.+242    	; 0xe8e <__divsf3>
     d9c:	e0 d0       	rcall	.+448    	; 0xf5e <__fixsfsi>
     d9e:	70 93 d5 01 	sts	0x01D5, r23	; 0x8001d5 <ultrasonic_distance+0x1>
     da2:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <ultrasonic_distance>
		
		// 예) TCNT1에 10이 들어 있다고 가정하자
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
		sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
     da6:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <ultrasonic_distance>
     daa:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <ultrasonic_distance+0x1>
     dae:	6a e3       	ldi	r22, 0x3A	; 58
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	f7 d1       	rcall	.+1006   	; 0x11a2 <__divmodhi4>
     db4:	7f 93       	push	r23
     db6:	6f 93       	push	r22
     db8:	88 e9       	ldi	r24, 0x98	; 152
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	9f 93       	push	r25
     dbe:	8f 93       	push	r24
     dc0:	86 e1       	ldi	r24, 0x16	; 22
     dc2:	98 e0       	ldi	r25, 0x08	; 8
     dc4:	9f 93       	push	r25
     dc6:	8f 93       	push	r24
     dc8:	64 d2       	rcall	.+1224   	; 0x1292 <sprintf>
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
	}
}
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	7f 91       	pop	r23
     de4:	6f 91       	pop	r22
     de6:	5f 91       	pop	r21
     de8:	4f 91       	pop	r20
     dea:	3f 91       	pop	r19
     dec:	2f 91       	pop	r18
     dee:	0f 90       	pop	r0
     df0:	0b be       	out	0x3b, r0	; 59
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	1f 90       	pop	r1
     dfa:	18 95       	reti

00000dfc <init_ultrasonic>:

void init_ultrasonic()
{
	TRIG_DDR |= 1 << TRIG; // output mode로 설정
     dfc:	e4 e6       	ldi	r30, 0x64	; 100
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	80 61       	ori	r24, 0x10	; 16
     e04:	80 83       	st	Z, r24
	ECHO_DDR &= ~(1 << ECHO); // input mode로 설정
     e06:	82 b1       	in	r24, 0x02	; 2
     e08:	8f 7e       	andi	r24, 0xEF	; 239
     e0a:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
     e0c:	8a b7       	in	r24, 0x3a	; 58
     e0e:	81 60       	ori	r24, 0x01	; 1
     e10:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us	
	TCCR1B |=  1 << CS12 | 1 << CS10; // 1024로 분주
     e12:	8e b5       	in	r24, 0x2e	; 46
     e14:	85 60       	ori	r24, 0x05	; 5
     e16:	8e bd       	out	0x2e, r24	; 46
	EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
     e18:	89 b7       	in	r24, 0x39	; 57
     e1a:	80 61       	ori	r24, 0x10	; 16
     e1c:	89 bf       	out	0x39, r24	; 57
     e1e:	08 95       	ret

00000e20 <ultrasonic_trigger>:
}

void ultrasonic_trigger()
{
	TRIG_PORT &= ~(1 << TRIG); // 해당되는 포트만 LOW로 만듦
     e20:	e5 e6       	ldi	r30, 0x65	; 101
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	8f 7e       	andi	r24, 0xEF	; 239
     e28:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e2a:	85 e0       	ldi	r24, 0x05	; 5
     e2c:	8a 95       	dec	r24
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <ultrasonic_trigger+0xc>
     e30:	00 00       	nop
	_delay_us(1);
	TRIG_PORT |= 1 << TRIG; // HIGH
     e32:	80 81       	ld	r24, Z
     e34:	80 61       	ori	r24, 0x10	; 16
     e36:	80 83       	st	Z, r24
     e38:	80 e5       	ldi	r24, 0x50	; 80
     e3a:	8a 95       	dec	r24
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <ultrasonic_trigger+0x1a>
	_delay_us(15); // 규격에는 10us인데 reduance
	TRIG_PORT &= ~(1 << TRIG); // LOW
     e3e:	80 81       	ld	r24, Z
     e40:	8f 7e       	andi	r24, 0xEF	; 239
     e42:	80 83       	st	Z, r24
     e44:	08 95       	ret

00000e46 <ultrasonic_distance_check>:
}

void ultrasonic_distance_check()
{
	if (ultrasonic_check_timer >= 1000) // 1초가 되면
     e46:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <ultrasonic_check_timer>
     e4a:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <ultrasonic_check_timer+0x1>
     e4e:	a0 91 be 01 	lds	r26, 0x01BE	; 0x8001be <ultrasonic_check_timer+0x2>
     e52:	b0 91 bf 01 	lds	r27, 0x01BF	; 0x8001bf <ultrasonic_check_timer+0x3>
     e56:	88 3e       	cpi	r24, 0xE8	; 232
     e58:	93 40       	sbci	r25, 0x03	; 3
     e5a:	a1 05       	cpc	r26, r1
     e5c:	b1 05       	cpc	r27, r1
     e5e:	b0 f0       	brcs	.+44     	; 0xe8c <ultrasonic_distance_check+0x46>
	{
		ultrasonic_check_timer = 0;
     e60:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <ultrasonic_check_timer>
     e64:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <ultrasonic_check_timer+0x1>
     e68:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <ultrasonic_check_timer+0x2>
     e6c:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <ultrasonic_check_timer+0x3>
		printf("%s", scm);
     e70:	86 e1       	ldi	r24, 0x16	; 22
     e72:	98 e0       	ldi	r25, 0x08	; 8
     e74:	9f 93       	push	r25
     e76:	8f 93       	push	r24
     e78:	84 ea       	ldi	r24, 0xA4	; 164
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	9f 93       	push	r25
     e7e:	8f 93       	push	r24
     e80:	c5 d1       	rcall	.+906    	; 0x120c <printf>
		ultrasonic_trigger();
     e82:	ce df       	rcall	.-100    	; 0xe20 <ultrasonic_trigger>
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	08 95       	ret

00000e8e <__divsf3>:
     e8e:	0c d0       	rcall	.+24     	; 0xea8 <__divsf3x>
     e90:	eb c0       	rjmp	.+470    	; 0x1068 <__fp_round>
     e92:	e3 d0       	rcall	.+454    	; 0x105a <__fp_pscB>
     e94:	40 f0       	brcs	.+16     	; 0xea6 <__divsf3+0x18>
     e96:	da d0       	rcall	.+436    	; 0x104c <__fp_pscA>
     e98:	30 f0       	brcs	.+12     	; 0xea6 <__divsf3+0x18>
     e9a:	21 f4       	brne	.+8      	; 0xea4 <__divsf3+0x16>
     e9c:	5f 3f       	cpi	r21, 0xFF	; 255
     e9e:	19 f0       	breq	.+6      	; 0xea6 <__divsf3+0x18>
     ea0:	cc c0       	rjmp	.+408    	; 0x103a <__fp_inf>
     ea2:	51 11       	cpse	r21, r1
     ea4:	15 c1       	rjmp	.+554    	; 0x10d0 <__fp_szero>
     ea6:	cf c0       	rjmp	.+414    	; 0x1046 <__fp_nan>

00000ea8 <__divsf3x>:
     ea8:	f0 d0       	rcall	.+480    	; 0x108a <__fp_split3>
     eaa:	98 f3       	brcs	.-26     	; 0xe92 <__divsf3+0x4>

00000eac <__divsf3_pse>:
     eac:	99 23       	and	r25, r25
     eae:	c9 f3       	breq	.-14     	; 0xea2 <__divsf3+0x14>
     eb0:	55 23       	and	r21, r21
     eb2:	b1 f3       	breq	.-20     	; 0xea0 <__divsf3+0x12>
     eb4:	95 1b       	sub	r25, r21
     eb6:	55 0b       	sbc	r21, r21
     eb8:	bb 27       	eor	r27, r27
     eba:	aa 27       	eor	r26, r26
     ebc:	62 17       	cp	r22, r18
     ebe:	73 07       	cpc	r23, r19
     ec0:	84 07       	cpc	r24, r20
     ec2:	38 f0       	brcs	.+14     	; 0xed2 <__divsf3_pse+0x26>
     ec4:	9f 5f       	subi	r25, 0xFF	; 255
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
     ec8:	22 0f       	add	r18, r18
     eca:	33 1f       	adc	r19, r19
     ecc:	44 1f       	adc	r20, r20
     ece:	aa 1f       	adc	r26, r26
     ed0:	a9 f3       	breq	.-22     	; 0xebc <__divsf3_pse+0x10>
     ed2:	33 d0       	rcall	.+102    	; 0xf3a <__divsf3_pse+0x8e>
     ed4:	0e 2e       	mov	r0, r30
     ed6:	3a f0       	brmi	.+14     	; 0xee6 <__divsf3_pse+0x3a>
     ed8:	e0 e8       	ldi	r30, 0x80	; 128
     eda:	30 d0       	rcall	.+96     	; 0xf3c <__divsf3_pse+0x90>
     edc:	91 50       	subi	r25, 0x01	; 1
     ede:	50 40       	sbci	r21, 0x00	; 0
     ee0:	e6 95       	lsr	r30
     ee2:	00 1c       	adc	r0, r0
     ee4:	ca f7       	brpl	.-14     	; 0xed8 <__divsf3_pse+0x2c>
     ee6:	29 d0       	rcall	.+82     	; 0xf3a <__divsf3_pse+0x8e>
     ee8:	fe 2f       	mov	r31, r30
     eea:	27 d0       	rcall	.+78     	; 0xf3a <__divsf3_pse+0x8e>
     eec:	66 0f       	add	r22, r22
     eee:	77 1f       	adc	r23, r23
     ef0:	88 1f       	adc	r24, r24
     ef2:	bb 1f       	adc	r27, r27
     ef4:	26 17       	cp	r18, r22
     ef6:	37 07       	cpc	r19, r23
     ef8:	48 07       	cpc	r20, r24
     efa:	ab 07       	cpc	r26, r27
     efc:	b0 e8       	ldi	r27, 0x80	; 128
     efe:	09 f0       	breq	.+2      	; 0xf02 <__divsf3_pse+0x56>
     f00:	bb 0b       	sbc	r27, r27
     f02:	80 2d       	mov	r24, r0
     f04:	bf 01       	movw	r22, r30
     f06:	ff 27       	eor	r31, r31
     f08:	93 58       	subi	r25, 0x83	; 131
     f0a:	5f 4f       	sbci	r21, 0xFF	; 255
     f0c:	2a f0       	brmi	.+10     	; 0xf18 <__divsf3_pse+0x6c>
     f0e:	9e 3f       	cpi	r25, 0xFE	; 254
     f10:	51 05       	cpc	r21, r1
     f12:	68 f0       	brcs	.+26     	; 0xf2e <__divsf3_pse+0x82>
     f14:	92 c0       	rjmp	.+292    	; 0x103a <__fp_inf>
     f16:	dc c0       	rjmp	.+440    	; 0x10d0 <__fp_szero>
     f18:	5f 3f       	cpi	r21, 0xFF	; 255
     f1a:	ec f3       	brlt	.-6      	; 0xf16 <__divsf3_pse+0x6a>
     f1c:	98 3e       	cpi	r25, 0xE8	; 232
     f1e:	dc f3       	brlt	.-10     	; 0xf16 <__divsf3_pse+0x6a>
     f20:	86 95       	lsr	r24
     f22:	77 95       	ror	r23
     f24:	67 95       	ror	r22
     f26:	b7 95       	ror	r27
     f28:	f7 95       	ror	r31
     f2a:	9f 5f       	subi	r25, 0xFF	; 255
     f2c:	c9 f7       	brne	.-14     	; 0xf20 <__divsf3_pse+0x74>
     f2e:	88 0f       	add	r24, r24
     f30:	91 1d       	adc	r25, r1
     f32:	96 95       	lsr	r25
     f34:	87 95       	ror	r24
     f36:	97 f9       	bld	r25, 7
     f38:	08 95       	ret
     f3a:	e1 e0       	ldi	r30, 0x01	; 1
     f3c:	66 0f       	add	r22, r22
     f3e:	77 1f       	adc	r23, r23
     f40:	88 1f       	adc	r24, r24
     f42:	bb 1f       	adc	r27, r27
     f44:	62 17       	cp	r22, r18
     f46:	73 07       	cpc	r23, r19
     f48:	84 07       	cpc	r24, r20
     f4a:	ba 07       	cpc	r27, r26
     f4c:	20 f0       	brcs	.+8      	; 0xf56 <__divsf3_pse+0xaa>
     f4e:	62 1b       	sub	r22, r18
     f50:	73 0b       	sbc	r23, r19
     f52:	84 0b       	sbc	r24, r20
     f54:	ba 0b       	sbc	r27, r26
     f56:	ee 1f       	adc	r30, r30
     f58:	88 f7       	brcc	.-30     	; 0xf3c <__divsf3_pse+0x90>
     f5a:	e0 95       	com	r30
     f5c:	08 95       	ret

00000f5e <__fixsfsi>:
     f5e:	04 d0       	rcall	.+8      	; 0xf68 <__fixunssfsi>
     f60:	68 94       	set
     f62:	b1 11       	cpse	r27, r1
     f64:	b5 c0       	rjmp	.+362    	; 0x10d0 <__fp_szero>
     f66:	08 95       	ret

00000f68 <__fixunssfsi>:
     f68:	98 d0       	rcall	.+304    	; 0x109a <__fp_splitA>
     f6a:	88 f0       	brcs	.+34     	; 0xf8e <__fixunssfsi+0x26>
     f6c:	9f 57       	subi	r25, 0x7F	; 127
     f6e:	90 f0       	brcs	.+36     	; 0xf94 <__fixunssfsi+0x2c>
     f70:	b9 2f       	mov	r27, r25
     f72:	99 27       	eor	r25, r25
     f74:	b7 51       	subi	r27, 0x17	; 23
     f76:	a0 f0       	brcs	.+40     	; 0xfa0 <__fixunssfsi+0x38>
     f78:	d1 f0       	breq	.+52     	; 0xfae <__fixunssfsi+0x46>
     f7a:	66 0f       	add	r22, r22
     f7c:	77 1f       	adc	r23, r23
     f7e:	88 1f       	adc	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	1a f0       	brmi	.+6      	; 0xf8a <__fixunssfsi+0x22>
     f84:	ba 95       	dec	r27
     f86:	c9 f7       	brne	.-14     	; 0xf7a <__fixunssfsi+0x12>
     f88:	12 c0       	rjmp	.+36     	; 0xfae <__fixunssfsi+0x46>
     f8a:	b1 30       	cpi	r27, 0x01	; 1
     f8c:	81 f0       	breq	.+32     	; 0xfae <__fixunssfsi+0x46>
     f8e:	9f d0       	rcall	.+318    	; 0x10ce <__fp_zero>
     f90:	b1 e0       	ldi	r27, 0x01	; 1
     f92:	08 95       	ret
     f94:	9c c0       	rjmp	.+312    	; 0x10ce <__fp_zero>
     f96:	67 2f       	mov	r22, r23
     f98:	78 2f       	mov	r23, r24
     f9a:	88 27       	eor	r24, r24
     f9c:	b8 5f       	subi	r27, 0xF8	; 248
     f9e:	39 f0       	breq	.+14     	; 0xfae <__fixunssfsi+0x46>
     fa0:	b9 3f       	cpi	r27, 0xF9	; 249
     fa2:	cc f3       	brlt	.-14     	; 0xf96 <__fixunssfsi+0x2e>
     fa4:	86 95       	lsr	r24
     fa6:	77 95       	ror	r23
     fa8:	67 95       	ror	r22
     faa:	b3 95       	inc	r27
     fac:	d9 f7       	brne	.-10     	; 0xfa4 <__fixunssfsi+0x3c>
     fae:	3e f4       	brtc	.+14     	; 0xfbe <__fixunssfsi+0x56>
     fb0:	90 95       	com	r25
     fb2:	80 95       	com	r24
     fb4:	70 95       	com	r23
     fb6:	61 95       	neg	r22
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	8f 4f       	sbci	r24, 0xFF	; 255
     fbc:	9f 4f       	sbci	r25, 0xFF	; 255
     fbe:	08 95       	ret

00000fc0 <__floatunsisf>:
     fc0:	e8 94       	clt
     fc2:	09 c0       	rjmp	.+18     	; 0xfd6 <__floatsisf+0x12>

00000fc4 <__floatsisf>:
     fc4:	97 fb       	bst	r25, 7
     fc6:	3e f4       	brtc	.+14     	; 0xfd6 <__floatsisf+0x12>
     fc8:	90 95       	com	r25
     fca:	80 95       	com	r24
     fcc:	70 95       	com	r23
     fce:	61 95       	neg	r22
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	8f 4f       	sbci	r24, 0xFF	; 255
     fd4:	9f 4f       	sbci	r25, 0xFF	; 255
     fd6:	99 23       	and	r25, r25
     fd8:	a9 f0       	breq	.+42     	; 0x1004 <__DATA_REGION_LENGTH__+0x4>
     fda:	f9 2f       	mov	r31, r25
     fdc:	96 e9       	ldi	r25, 0x96	; 150
     fde:	bb 27       	eor	r27, r27
     fe0:	93 95       	inc	r25
     fe2:	f6 95       	lsr	r31
     fe4:	87 95       	ror	r24
     fe6:	77 95       	ror	r23
     fe8:	67 95       	ror	r22
     fea:	b7 95       	ror	r27
     fec:	f1 11       	cpse	r31, r1
     fee:	f8 cf       	rjmp	.-16     	; 0xfe0 <__floatsisf+0x1c>
     ff0:	fa f4       	brpl	.+62     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
     ff2:	bb 0f       	add	r27, r27
     ff4:	11 f4       	brne	.+4      	; 0xffa <__floatsisf+0x36>
     ff6:	60 ff       	sbrs	r22, 0
     ff8:	1b c0       	rjmp	.+54     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
     ffa:	6f 5f       	subi	r22, 0xFF	; 255
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	16 c0       	rjmp	.+44     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
    1004:	88 23       	and	r24, r24
    1006:	11 f0       	breq	.+4      	; 0x100c <__DATA_REGION_LENGTH__+0xc>
    1008:	96 e9       	ldi	r25, 0x96	; 150
    100a:	11 c0       	rjmp	.+34     	; 0x102e <__DATA_REGION_LENGTH__+0x2e>
    100c:	77 23       	and	r23, r23
    100e:	21 f0       	breq	.+8      	; 0x1018 <__DATA_REGION_LENGTH__+0x18>
    1010:	9e e8       	ldi	r25, 0x8E	; 142
    1012:	87 2f       	mov	r24, r23
    1014:	76 2f       	mov	r23, r22
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    1018:	66 23       	and	r22, r22
    101a:	71 f0       	breq	.+28     	; 0x1038 <__DATA_REGION_LENGTH__+0x38>
    101c:	96 e8       	ldi	r25, 0x86	; 134
    101e:	86 2f       	mov	r24, r22
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	2a f0       	brmi	.+10     	; 0x1030 <__DATA_REGION_LENGTH__+0x30>
    1026:	9a 95       	dec	r25
    1028:	66 0f       	add	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	88 1f       	adc	r24, r24
    102e:	da f7       	brpl	.-10     	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    1030:	88 0f       	add	r24, r24
    1032:	96 95       	lsr	r25
    1034:	87 95       	ror	r24
    1036:	97 f9       	bld	r25, 7
    1038:	08 95       	ret

0000103a <__fp_inf>:
    103a:	97 f9       	bld	r25, 7
    103c:	9f 67       	ori	r25, 0x7F	; 127
    103e:	80 e8       	ldi	r24, 0x80	; 128
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	08 95       	ret

00001046 <__fp_nan>:
    1046:	9f ef       	ldi	r25, 0xFF	; 255
    1048:	80 ec       	ldi	r24, 0xC0	; 192
    104a:	08 95       	ret

0000104c <__fp_pscA>:
    104c:	00 24       	eor	r0, r0
    104e:	0a 94       	dec	r0
    1050:	16 16       	cp	r1, r22
    1052:	17 06       	cpc	r1, r23
    1054:	18 06       	cpc	r1, r24
    1056:	09 06       	cpc	r0, r25
    1058:	08 95       	ret

0000105a <__fp_pscB>:
    105a:	00 24       	eor	r0, r0
    105c:	0a 94       	dec	r0
    105e:	12 16       	cp	r1, r18
    1060:	13 06       	cpc	r1, r19
    1062:	14 06       	cpc	r1, r20
    1064:	05 06       	cpc	r0, r21
    1066:	08 95       	ret

00001068 <__fp_round>:
    1068:	09 2e       	mov	r0, r25
    106a:	03 94       	inc	r0
    106c:	00 0c       	add	r0, r0
    106e:	11 f4       	brne	.+4      	; 0x1074 <__fp_round+0xc>
    1070:	88 23       	and	r24, r24
    1072:	52 f0       	brmi	.+20     	; 0x1088 <__fp_round+0x20>
    1074:	bb 0f       	add	r27, r27
    1076:	40 f4       	brcc	.+16     	; 0x1088 <__fp_round+0x20>
    1078:	bf 2b       	or	r27, r31
    107a:	11 f4       	brne	.+4      	; 0x1080 <__fp_round+0x18>
    107c:	60 ff       	sbrs	r22, 0
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <__fp_round+0x20>
    1080:	6f 5f       	subi	r22, 0xFF	; 255
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	8f 4f       	sbci	r24, 0xFF	; 255
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	08 95       	ret

0000108a <__fp_split3>:
    108a:	57 fd       	sbrc	r21, 7
    108c:	90 58       	subi	r25, 0x80	; 128
    108e:	44 0f       	add	r20, r20
    1090:	55 1f       	adc	r21, r21
    1092:	59 f0       	breq	.+22     	; 0x10aa <__fp_splitA+0x10>
    1094:	5f 3f       	cpi	r21, 0xFF	; 255
    1096:	71 f0       	breq	.+28     	; 0x10b4 <__fp_splitA+0x1a>
    1098:	47 95       	ror	r20

0000109a <__fp_splitA>:
    109a:	88 0f       	add	r24, r24
    109c:	97 fb       	bst	r25, 7
    109e:	99 1f       	adc	r25, r25
    10a0:	61 f0       	breq	.+24     	; 0x10ba <__fp_splitA+0x20>
    10a2:	9f 3f       	cpi	r25, 0xFF	; 255
    10a4:	79 f0       	breq	.+30     	; 0x10c4 <__fp_splitA+0x2a>
    10a6:	87 95       	ror	r24
    10a8:	08 95       	ret
    10aa:	12 16       	cp	r1, r18
    10ac:	13 06       	cpc	r1, r19
    10ae:	14 06       	cpc	r1, r20
    10b0:	55 1f       	adc	r21, r21
    10b2:	f2 cf       	rjmp	.-28     	; 0x1098 <__fp_split3+0xe>
    10b4:	46 95       	lsr	r20
    10b6:	f1 df       	rcall	.-30     	; 0x109a <__fp_splitA>
    10b8:	08 c0       	rjmp	.+16     	; 0x10ca <__fp_splitA+0x30>
    10ba:	16 16       	cp	r1, r22
    10bc:	17 06       	cpc	r1, r23
    10be:	18 06       	cpc	r1, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	f1 cf       	rjmp	.-30     	; 0x10a6 <__fp_splitA+0xc>
    10c4:	86 95       	lsr	r24
    10c6:	71 05       	cpc	r23, r1
    10c8:	61 05       	cpc	r22, r1
    10ca:	08 94       	sec
    10cc:	08 95       	ret

000010ce <__fp_zero>:
    10ce:	e8 94       	clt

000010d0 <__fp_szero>:
    10d0:	bb 27       	eor	r27, r27
    10d2:	66 27       	eor	r22, r22
    10d4:	77 27       	eor	r23, r23
    10d6:	cb 01       	movw	r24, r22
    10d8:	97 f9       	bld	r25, 7
    10da:	08 95       	ret

000010dc <__mulsf3>:
    10dc:	0b d0       	rcall	.+22     	; 0x10f4 <__mulsf3x>
    10de:	c4 cf       	rjmp	.-120    	; 0x1068 <__fp_round>
    10e0:	b5 df       	rcall	.-150    	; 0x104c <__fp_pscA>
    10e2:	28 f0       	brcs	.+10     	; 0x10ee <__mulsf3+0x12>
    10e4:	ba df       	rcall	.-140    	; 0x105a <__fp_pscB>
    10e6:	18 f0       	brcs	.+6      	; 0x10ee <__mulsf3+0x12>
    10e8:	95 23       	and	r25, r21
    10ea:	09 f0       	breq	.+2      	; 0x10ee <__mulsf3+0x12>
    10ec:	a6 cf       	rjmp	.-180    	; 0x103a <__fp_inf>
    10ee:	ab cf       	rjmp	.-170    	; 0x1046 <__fp_nan>
    10f0:	11 24       	eor	r1, r1
    10f2:	ee cf       	rjmp	.-36     	; 0x10d0 <__fp_szero>

000010f4 <__mulsf3x>:
    10f4:	ca df       	rcall	.-108    	; 0x108a <__fp_split3>
    10f6:	a0 f3       	brcs	.-24     	; 0x10e0 <__mulsf3+0x4>

000010f8 <__mulsf3_pse>:
    10f8:	95 9f       	mul	r25, r21
    10fa:	d1 f3       	breq	.-12     	; 0x10f0 <__mulsf3+0x14>
    10fc:	95 0f       	add	r25, r21
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	55 1f       	adc	r21, r21
    1102:	62 9f       	mul	r22, r18
    1104:	f0 01       	movw	r30, r0
    1106:	72 9f       	mul	r23, r18
    1108:	bb 27       	eor	r27, r27
    110a:	f0 0d       	add	r31, r0
    110c:	b1 1d       	adc	r27, r1
    110e:	63 9f       	mul	r22, r19
    1110:	aa 27       	eor	r26, r26
    1112:	f0 0d       	add	r31, r0
    1114:	b1 1d       	adc	r27, r1
    1116:	aa 1f       	adc	r26, r26
    1118:	64 9f       	mul	r22, r20
    111a:	66 27       	eor	r22, r22
    111c:	b0 0d       	add	r27, r0
    111e:	a1 1d       	adc	r26, r1
    1120:	66 1f       	adc	r22, r22
    1122:	82 9f       	mul	r24, r18
    1124:	22 27       	eor	r18, r18
    1126:	b0 0d       	add	r27, r0
    1128:	a1 1d       	adc	r26, r1
    112a:	62 1f       	adc	r22, r18
    112c:	73 9f       	mul	r23, r19
    112e:	b0 0d       	add	r27, r0
    1130:	a1 1d       	adc	r26, r1
    1132:	62 1f       	adc	r22, r18
    1134:	83 9f       	mul	r24, r19
    1136:	a0 0d       	add	r26, r0
    1138:	61 1d       	adc	r22, r1
    113a:	22 1f       	adc	r18, r18
    113c:	74 9f       	mul	r23, r20
    113e:	33 27       	eor	r19, r19
    1140:	a0 0d       	add	r26, r0
    1142:	61 1d       	adc	r22, r1
    1144:	23 1f       	adc	r18, r19
    1146:	84 9f       	mul	r24, r20
    1148:	60 0d       	add	r22, r0
    114a:	21 1d       	adc	r18, r1
    114c:	82 2f       	mov	r24, r18
    114e:	76 2f       	mov	r23, r22
    1150:	6a 2f       	mov	r22, r26
    1152:	11 24       	eor	r1, r1
    1154:	9f 57       	subi	r25, 0x7F	; 127
    1156:	50 40       	sbci	r21, 0x00	; 0
    1158:	8a f0       	brmi	.+34     	; 0x117c <__stack+0x7d>
    115a:	e1 f0       	breq	.+56     	; 0x1194 <__stack+0x95>
    115c:	88 23       	and	r24, r24
    115e:	4a f0       	brmi	.+18     	; 0x1172 <__stack+0x73>
    1160:	ee 0f       	add	r30, r30
    1162:	ff 1f       	adc	r31, r31
    1164:	bb 1f       	adc	r27, r27
    1166:	66 1f       	adc	r22, r22
    1168:	77 1f       	adc	r23, r23
    116a:	88 1f       	adc	r24, r24
    116c:	91 50       	subi	r25, 0x01	; 1
    116e:	50 40       	sbci	r21, 0x00	; 0
    1170:	a9 f7       	brne	.-22     	; 0x115c <__stack+0x5d>
    1172:	9e 3f       	cpi	r25, 0xFE	; 254
    1174:	51 05       	cpc	r21, r1
    1176:	70 f0       	brcs	.+28     	; 0x1194 <__stack+0x95>
    1178:	60 cf       	rjmp	.-320    	; 0x103a <__fp_inf>
    117a:	aa cf       	rjmp	.-172    	; 0x10d0 <__fp_szero>
    117c:	5f 3f       	cpi	r21, 0xFF	; 255
    117e:	ec f3       	brlt	.-6      	; 0x117a <__stack+0x7b>
    1180:	98 3e       	cpi	r25, 0xE8	; 232
    1182:	dc f3       	brlt	.-10     	; 0x117a <__stack+0x7b>
    1184:	86 95       	lsr	r24
    1186:	77 95       	ror	r23
    1188:	67 95       	ror	r22
    118a:	b7 95       	ror	r27
    118c:	f7 95       	ror	r31
    118e:	e7 95       	ror	r30
    1190:	9f 5f       	subi	r25, 0xFF	; 255
    1192:	c1 f7       	brne	.-16     	; 0x1184 <__stack+0x85>
    1194:	fe 2b       	or	r31, r30
    1196:	88 0f       	add	r24, r24
    1198:	91 1d       	adc	r25, r1
    119a:	96 95       	lsr	r25
    119c:	87 95       	ror	r24
    119e:	97 f9       	bld	r25, 7
    11a0:	08 95       	ret

000011a2 <__divmodhi4>:
    11a2:	97 fb       	bst	r25, 7
    11a4:	07 2e       	mov	r0, r23
    11a6:	16 f4       	brtc	.+4      	; 0x11ac <__divmodhi4+0xa>
    11a8:	00 94       	com	r0
    11aa:	06 d0       	rcall	.+12     	; 0x11b8 <__divmodhi4_neg1>
    11ac:	77 fd       	sbrc	r23, 7
    11ae:	08 d0       	rcall	.+16     	; 0x11c0 <__divmodhi4_neg2>
    11b0:	0b d0       	rcall	.+22     	; 0x11c8 <__udivmodhi4>
    11b2:	07 fc       	sbrc	r0, 7
    11b4:	05 d0       	rcall	.+10     	; 0x11c0 <__divmodhi4_neg2>
    11b6:	3e f4       	brtc	.+14     	; 0x11c6 <__divmodhi4_exit>

000011b8 <__divmodhi4_neg1>:
    11b8:	90 95       	com	r25
    11ba:	81 95       	neg	r24
    11bc:	9f 4f       	sbci	r25, 0xFF	; 255
    11be:	08 95       	ret

000011c0 <__divmodhi4_neg2>:
    11c0:	70 95       	com	r23
    11c2:	61 95       	neg	r22
    11c4:	7f 4f       	sbci	r23, 0xFF	; 255

000011c6 <__divmodhi4_exit>:
    11c6:	08 95       	ret

000011c8 <__udivmodhi4>:
    11c8:	aa 1b       	sub	r26, r26
    11ca:	bb 1b       	sub	r27, r27
    11cc:	51 e1       	ldi	r21, 0x11	; 17
    11ce:	07 c0       	rjmp	.+14     	; 0x11de <__udivmodhi4_ep>

000011d0 <__udivmodhi4_loop>:
    11d0:	aa 1f       	adc	r26, r26
    11d2:	bb 1f       	adc	r27, r27
    11d4:	a6 17       	cp	r26, r22
    11d6:	b7 07       	cpc	r27, r23
    11d8:	10 f0       	brcs	.+4      	; 0x11de <__udivmodhi4_ep>
    11da:	a6 1b       	sub	r26, r22
    11dc:	b7 0b       	sbc	r27, r23

000011de <__udivmodhi4_ep>:
    11de:	88 1f       	adc	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	5a 95       	dec	r21
    11e4:	a9 f7       	brne	.-22     	; 0x11d0 <__udivmodhi4_loop>
    11e6:	80 95       	com	r24
    11e8:	90 95       	com	r25
    11ea:	bc 01       	movw	r22, r24
    11ec:	cd 01       	movw	r24, r26
    11ee:	08 95       	ret

000011f0 <strncmp>:
    11f0:	fb 01       	movw	r30, r22
    11f2:	dc 01       	movw	r26, r24
    11f4:	41 50       	subi	r20, 0x01	; 1
    11f6:	50 40       	sbci	r21, 0x00	; 0
    11f8:	30 f0       	brcs	.+12     	; 0x1206 <strncmp+0x16>
    11fa:	8d 91       	ld	r24, X+
    11fc:	01 90       	ld	r0, Z+
    11fe:	80 19       	sub	r24, r0
    1200:	19 f4       	brne	.+6      	; 0x1208 <strncmp+0x18>
    1202:	00 20       	and	r0, r0
    1204:	b9 f7       	brne	.-18     	; 0x11f4 <strncmp+0x4>
    1206:	88 1b       	sub	r24, r24
    1208:	99 0b       	sbc	r25, r25
    120a:	08 95       	ret

0000120c <printf>:
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	ae 01       	movw	r20, r28
    1216:	4b 5f       	subi	r20, 0xFB	; 251
    1218:	5f 4f       	sbci	r21, 0xFF	; 255
    121a:	fa 01       	movw	r30, r20
    121c:	61 91       	ld	r22, Z+
    121e:	71 91       	ld	r23, Z+
    1220:	af 01       	movw	r20, r30
    1222:	80 91 4a 08 	lds	r24, 0x084A	; 0x80084a <__iob+0x2>
    1226:	90 91 4b 08 	lds	r25, 0x084B	; 0x80084b <__iob+0x3>
    122a:	61 d0       	rcall	.+194    	; 0x12ee <vfprintf>
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	08 95       	ret

00001232 <puts>:
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	e0 91 4a 08 	lds	r30, 0x084A	; 0x80084a <__iob+0x2>
    123e:	f0 91 4b 08 	lds	r31, 0x084B	; 0x80084b <__iob+0x3>
    1242:	23 81       	ldd	r18, Z+3	; 0x03
    1244:	21 ff       	sbrs	r18, 1
    1246:	1b c0       	rjmp	.+54     	; 0x127e <puts+0x4c>
    1248:	8c 01       	movw	r16, r24
    124a:	d0 e0       	ldi	r29, 0x00	; 0
    124c:	c0 e0       	ldi	r28, 0x00	; 0
    124e:	f8 01       	movw	r30, r16
    1250:	81 91       	ld	r24, Z+
    1252:	8f 01       	movw	r16, r30
    1254:	60 91 4a 08 	lds	r22, 0x084A	; 0x80084a <__iob+0x2>
    1258:	70 91 4b 08 	lds	r23, 0x084B	; 0x80084b <__iob+0x3>
    125c:	db 01       	movw	r26, r22
    125e:	18 96       	adiw	r26, 0x08	; 8
    1260:	ed 91       	ld	r30, X+
    1262:	fc 91       	ld	r31, X
    1264:	19 97       	sbiw	r26, 0x09	; 9
    1266:	88 23       	and	r24, r24
    1268:	31 f0       	breq	.+12     	; 0x1276 <puts+0x44>
    126a:	09 95       	icall
    126c:	89 2b       	or	r24, r25
    126e:	79 f3       	breq	.-34     	; 0x124e <puts+0x1c>
    1270:	df ef       	ldi	r29, 0xFF	; 255
    1272:	cf ef       	ldi	r28, 0xFF	; 255
    1274:	ec cf       	rjmp	.-40     	; 0x124e <puts+0x1c>
    1276:	8a e0       	ldi	r24, 0x0A	; 10
    1278:	09 95       	icall
    127a:	89 2b       	or	r24, r25
    127c:	19 f0       	breq	.+6      	; 0x1284 <puts+0x52>
    127e:	8f ef       	ldi	r24, 0xFF	; 255
    1280:	9f ef       	ldi	r25, 0xFF	; 255
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <puts+0x56>
    1284:	8d 2f       	mov	r24, r29
    1286:	9c 2f       	mov	r25, r28
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	08 95       	ret

00001292 <sprintf>:
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	2e 97       	sbiw	r28, 0x0e	; 14
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	0d 89       	ldd	r16, Y+21	; 0x15
    12ac:	1e 89       	ldd	r17, Y+22	; 0x16
    12ae:	86 e0       	ldi	r24, 0x06	; 6
    12b0:	8c 83       	std	Y+4, r24	; 0x04
    12b2:	1a 83       	std	Y+2, r17	; 0x02
    12b4:	09 83       	std	Y+1, r16	; 0x01
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
    12b8:	9f e7       	ldi	r25, 0x7F	; 127
    12ba:	9e 83       	std	Y+6, r25	; 0x06
    12bc:	8d 83       	std	Y+5, r24	; 0x05
    12be:	ae 01       	movw	r20, r28
    12c0:	47 5e       	subi	r20, 0xE7	; 231
    12c2:	5f 4f       	sbci	r21, 0xFF	; 255
    12c4:	6f 89       	ldd	r22, Y+23	; 0x17
    12c6:	78 8d       	ldd	r23, Y+24	; 0x18
    12c8:	ce 01       	movw	r24, r28
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	10 d0       	rcall	.+32     	; 0x12ee <vfprintf>
    12ce:	ef 81       	ldd	r30, Y+7	; 0x07
    12d0:	f8 85       	ldd	r31, Y+8	; 0x08
    12d2:	e0 0f       	add	r30, r16
    12d4:	f1 1f       	adc	r31, r17
    12d6:	10 82       	st	Z, r1
    12d8:	2e 96       	adiw	r28, 0x0e	; 14
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	08 95       	ret

000012ee <vfprintf>:
    12ee:	2f 92       	push	r2
    12f0:	3f 92       	push	r3
    12f2:	4f 92       	push	r4
    12f4:	5f 92       	push	r5
    12f6:	6f 92       	push	r6
    12f8:	7f 92       	push	r7
    12fa:	8f 92       	push	r8
    12fc:	9f 92       	push	r9
    12fe:	af 92       	push	r10
    1300:	bf 92       	push	r11
    1302:	cf 92       	push	r12
    1304:	df 92       	push	r13
    1306:	ef 92       	push	r14
    1308:	ff 92       	push	r15
    130a:	0f 93       	push	r16
    130c:	1f 93       	push	r17
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	2b 97       	sbiw	r28, 0x0b	; 11
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	6c 01       	movw	r12, r24
    1324:	7b 01       	movw	r14, r22
    1326:	8a 01       	movw	r16, r20
    1328:	fc 01       	movw	r30, r24
    132a:	17 82       	std	Z+7, r1	; 0x07
    132c:	16 82       	std	Z+6, r1	; 0x06
    132e:	83 81       	ldd	r24, Z+3	; 0x03
    1330:	81 ff       	sbrs	r24, 1
    1332:	bf c1       	rjmp	.+894    	; 0x16b2 <vfprintf+0x3c4>
    1334:	ce 01       	movw	r24, r28
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	3c 01       	movw	r6, r24
    133a:	f6 01       	movw	r30, r12
    133c:	93 81       	ldd	r25, Z+3	; 0x03
    133e:	f7 01       	movw	r30, r14
    1340:	93 fd       	sbrc	r25, 3
    1342:	85 91       	lpm	r24, Z+
    1344:	93 ff       	sbrs	r25, 3
    1346:	81 91       	ld	r24, Z+
    1348:	7f 01       	movw	r14, r30
    134a:	88 23       	and	r24, r24
    134c:	09 f4       	brne	.+2      	; 0x1350 <vfprintf+0x62>
    134e:	ad c1       	rjmp	.+858    	; 0x16aa <vfprintf+0x3bc>
    1350:	85 32       	cpi	r24, 0x25	; 37
    1352:	39 f4       	brne	.+14     	; 0x1362 <vfprintf+0x74>
    1354:	93 fd       	sbrc	r25, 3
    1356:	85 91       	lpm	r24, Z+
    1358:	93 ff       	sbrs	r25, 3
    135a:	81 91       	ld	r24, Z+
    135c:	7f 01       	movw	r14, r30
    135e:	85 32       	cpi	r24, 0x25	; 37
    1360:	21 f4       	brne	.+8      	; 0x136a <vfprintf+0x7c>
    1362:	b6 01       	movw	r22, r12
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	d6 d1       	rcall	.+940    	; 0x1714 <fputc>
    1368:	e8 cf       	rjmp	.-48     	; 0x133a <vfprintf+0x4c>
    136a:	91 2c       	mov	r9, r1
    136c:	21 2c       	mov	r2, r1
    136e:	31 2c       	mov	r3, r1
    1370:	ff e1       	ldi	r31, 0x1F	; 31
    1372:	f3 15       	cp	r31, r3
    1374:	d8 f0       	brcs	.+54     	; 0x13ac <vfprintf+0xbe>
    1376:	8b 32       	cpi	r24, 0x2B	; 43
    1378:	79 f0       	breq	.+30     	; 0x1398 <vfprintf+0xaa>
    137a:	38 f4       	brcc	.+14     	; 0x138a <vfprintf+0x9c>
    137c:	80 32       	cpi	r24, 0x20	; 32
    137e:	79 f0       	breq	.+30     	; 0x139e <vfprintf+0xb0>
    1380:	83 32       	cpi	r24, 0x23	; 35
    1382:	a1 f4       	brne	.+40     	; 0x13ac <vfprintf+0xbe>
    1384:	23 2d       	mov	r18, r3
    1386:	20 61       	ori	r18, 0x10	; 16
    1388:	1d c0       	rjmp	.+58     	; 0x13c4 <vfprintf+0xd6>
    138a:	8d 32       	cpi	r24, 0x2D	; 45
    138c:	61 f0       	breq	.+24     	; 0x13a6 <vfprintf+0xb8>
    138e:	80 33       	cpi	r24, 0x30	; 48
    1390:	69 f4       	brne	.+26     	; 0x13ac <vfprintf+0xbe>
    1392:	23 2d       	mov	r18, r3
    1394:	21 60       	ori	r18, 0x01	; 1
    1396:	16 c0       	rjmp	.+44     	; 0x13c4 <vfprintf+0xd6>
    1398:	83 2d       	mov	r24, r3
    139a:	82 60       	ori	r24, 0x02	; 2
    139c:	38 2e       	mov	r3, r24
    139e:	e3 2d       	mov	r30, r3
    13a0:	e4 60       	ori	r30, 0x04	; 4
    13a2:	3e 2e       	mov	r3, r30
    13a4:	2a c0       	rjmp	.+84     	; 0x13fa <vfprintf+0x10c>
    13a6:	f3 2d       	mov	r31, r3
    13a8:	f8 60       	ori	r31, 0x08	; 8
    13aa:	1d c0       	rjmp	.+58     	; 0x13e6 <vfprintf+0xf8>
    13ac:	37 fc       	sbrc	r3, 7
    13ae:	2d c0       	rjmp	.+90     	; 0x140a <vfprintf+0x11c>
    13b0:	20 ed       	ldi	r18, 0xD0	; 208
    13b2:	28 0f       	add	r18, r24
    13b4:	2a 30       	cpi	r18, 0x0A	; 10
    13b6:	40 f0       	brcs	.+16     	; 0x13c8 <vfprintf+0xda>
    13b8:	8e 32       	cpi	r24, 0x2E	; 46
    13ba:	b9 f4       	brne	.+46     	; 0x13ea <vfprintf+0xfc>
    13bc:	36 fc       	sbrc	r3, 6
    13be:	75 c1       	rjmp	.+746    	; 0x16aa <vfprintf+0x3bc>
    13c0:	23 2d       	mov	r18, r3
    13c2:	20 64       	ori	r18, 0x40	; 64
    13c4:	32 2e       	mov	r3, r18
    13c6:	19 c0       	rjmp	.+50     	; 0x13fa <vfprintf+0x10c>
    13c8:	36 fe       	sbrs	r3, 6
    13ca:	06 c0       	rjmp	.+12     	; 0x13d8 <vfprintf+0xea>
    13cc:	8a e0       	ldi	r24, 0x0A	; 10
    13ce:	98 9e       	mul	r9, r24
    13d0:	20 0d       	add	r18, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	92 2e       	mov	r9, r18
    13d6:	11 c0       	rjmp	.+34     	; 0x13fa <vfprintf+0x10c>
    13d8:	ea e0       	ldi	r30, 0x0A	; 10
    13da:	2e 9e       	mul	r2, r30
    13dc:	20 0d       	add	r18, r0
    13de:	11 24       	eor	r1, r1
    13e0:	22 2e       	mov	r2, r18
    13e2:	f3 2d       	mov	r31, r3
    13e4:	f0 62       	ori	r31, 0x20	; 32
    13e6:	3f 2e       	mov	r3, r31
    13e8:	08 c0       	rjmp	.+16     	; 0x13fa <vfprintf+0x10c>
    13ea:	8c 36       	cpi	r24, 0x6C	; 108
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <vfprintf+0x108>
    13ee:	83 2d       	mov	r24, r3
    13f0:	80 68       	ori	r24, 0x80	; 128
    13f2:	38 2e       	mov	r3, r24
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <vfprintf+0x10c>
    13f6:	88 36       	cpi	r24, 0x68	; 104
    13f8:	41 f4       	brne	.+16     	; 0x140a <vfprintf+0x11c>
    13fa:	f7 01       	movw	r30, r14
    13fc:	93 fd       	sbrc	r25, 3
    13fe:	85 91       	lpm	r24, Z+
    1400:	93 ff       	sbrs	r25, 3
    1402:	81 91       	ld	r24, Z+
    1404:	7f 01       	movw	r14, r30
    1406:	81 11       	cpse	r24, r1
    1408:	b3 cf       	rjmp	.-154    	; 0x1370 <vfprintf+0x82>
    140a:	98 2f       	mov	r25, r24
    140c:	9f 7d       	andi	r25, 0xDF	; 223
    140e:	95 54       	subi	r25, 0x45	; 69
    1410:	93 30       	cpi	r25, 0x03	; 3
    1412:	28 f4       	brcc	.+10     	; 0x141e <vfprintf+0x130>
    1414:	0c 5f       	subi	r16, 0xFC	; 252
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	9f e3       	ldi	r25, 0x3F	; 63
    141a:	99 83       	std	Y+1, r25	; 0x01
    141c:	0d c0       	rjmp	.+26     	; 0x1438 <vfprintf+0x14a>
    141e:	83 36       	cpi	r24, 0x63	; 99
    1420:	31 f0       	breq	.+12     	; 0x142e <vfprintf+0x140>
    1422:	83 37       	cpi	r24, 0x73	; 115
    1424:	71 f0       	breq	.+28     	; 0x1442 <vfprintf+0x154>
    1426:	83 35       	cpi	r24, 0x53	; 83
    1428:	09 f0       	breq	.+2      	; 0x142c <vfprintf+0x13e>
    142a:	55 c0       	rjmp	.+170    	; 0x14d6 <vfprintf+0x1e8>
    142c:	20 c0       	rjmp	.+64     	; 0x146e <vfprintf+0x180>
    142e:	f8 01       	movw	r30, r16
    1430:	80 81       	ld	r24, Z
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	0e 5f       	subi	r16, 0xFE	; 254
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	88 24       	eor	r8, r8
    143a:	83 94       	inc	r8
    143c:	91 2c       	mov	r9, r1
    143e:	53 01       	movw	r10, r6
    1440:	12 c0       	rjmp	.+36     	; 0x1466 <vfprintf+0x178>
    1442:	28 01       	movw	r4, r16
    1444:	f2 e0       	ldi	r31, 0x02	; 2
    1446:	4f 0e       	add	r4, r31
    1448:	51 1c       	adc	r5, r1
    144a:	f8 01       	movw	r30, r16
    144c:	a0 80       	ld	r10, Z
    144e:	b1 80       	ldd	r11, Z+1	; 0x01
    1450:	36 fe       	sbrs	r3, 6
    1452:	03 c0       	rjmp	.+6      	; 0x145a <vfprintf+0x16c>
    1454:	69 2d       	mov	r22, r9
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	02 c0       	rjmp	.+4      	; 0x145e <vfprintf+0x170>
    145a:	6f ef       	ldi	r22, 0xFF	; 255
    145c:	7f ef       	ldi	r23, 0xFF	; 255
    145e:	c5 01       	movw	r24, r10
    1460:	4e d1       	rcall	.+668    	; 0x16fe <strnlen>
    1462:	4c 01       	movw	r8, r24
    1464:	82 01       	movw	r16, r4
    1466:	f3 2d       	mov	r31, r3
    1468:	ff 77       	andi	r31, 0x7F	; 127
    146a:	3f 2e       	mov	r3, r31
    146c:	15 c0       	rjmp	.+42     	; 0x1498 <vfprintf+0x1aa>
    146e:	28 01       	movw	r4, r16
    1470:	22 e0       	ldi	r18, 0x02	; 2
    1472:	42 0e       	add	r4, r18
    1474:	51 1c       	adc	r5, r1
    1476:	f8 01       	movw	r30, r16
    1478:	a0 80       	ld	r10, Z
    147a:	b1 80       	ldd	r11, Z+1	; 0x01
    147c:	36 fe       	sbrs	r3, 6
    147e:	03 c0       	rjmp	.+6      	; 0x1486 <vfprintf+0x198>
    1480:	69 2d       	mov	r22, r9
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	02 c0       	rjmp	.+4      	; 0x148a <vfprintf+0x19c>
    1486:	6f ef       	ldi	r22, 0xFF	; 255
    1488:	7f ef       	ldi	r23, 0xFF	; 255
    148a:	c5 01       	movw	r24, r10
    148c:	2d d1       	rcall	.+602    	; 0x16e8 <strnlen_P>
    148e:	4c 01       	movw	r8, r24
    1490:	f3 2d       	mov	r31, r3
    1492:	f0 68       	ori	r31, 0x80	; 128
    1494:	3f 2e       	mov	r3, r31
    1496:	82 01       	movw	r16, r4
    1498:	33 fc       	sbrc	r3, 3
    149a:	19 c0       	rjmp	.+50     	; 0x14ce <vfprintf+0x1e0>
    149c:	82 2d       	mov	r24, r2
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	88 16       	cp	r8, r24
    14a2:	99 06       	cpc	r9, r25
    14a4:	a0 f4       	brcc	.+40     	; 0x14ce <vfprintf+0x1e0>
    14a6:	b6 01       	movw	r22, r12
    14a8:	80 e2       	ldi	r24, 0x20	; 32
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	33 d1       	rcall	.+614    	; 0x1714 <fputc>
    14ae:	2a 94       	dec	r2
    14b0:	f5 cf       	rjmp	.-22     	; 0x149c <vfprintf+0x1ae>
    14b2:	f5 01       	movw	r30, r10
    14b4:	37 fc       	sbrc	r3, 7
    14b6:	85 91       	lpm	r24, Z+
    14b8:	37 fe       	sbrs	r3, 7
    14ba:	81 91       	ld	r24, Z+
    14bc:	5f 01       	movw	r10, r30
    14be:	b6 01       	movw	r22, r12
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	28 d1       	rcall	.+592    	; 0x1714 <fputc>
    14c4:	21 10       	cpse	r2, r1
    14c6:	2a 94       	dec	r2
    14c8:	21 e0       	ldi	r18, 0x01	; 1
    14ca:	82 1a       	sub	r8, r18
    14cc:	91 08       	sbc	r9, r1
    14ce:	81 14       	cp	r8, r1
    14d0:	91 04       	cpc	r9, r1
    14d2:	79 f7       	brne	.-34     	; 0x14b2 <vfprintf+0x1c4>
    14d4:	e1 c0       	rjmp	.+450    	; 0x1698 <vfprintf+0x3aa>
    14d6:	84 36       	cpi	r24, 0x64	; 100
    14d8:	11 f0       	breq	.+4      	; 0x14de <vfprintf+0x1f0>
    14da:	89 36       	cpi	r24, 0x69	; 105
    14dc:	39 f5       	brne	.+78     	; 0x152c <vfprintf+0x23e>
    14de:	f8 01       	movw	r30, r16
    14e0:	37 fe       	sbrs	r3, 7
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <vfprintf+0x204>
    14e4:	60 81       	ld	r22, Z
    14e6:	71 81       	ldd	r23, Z+1	; 0x01
    14e8:	82 81       	ldd	r24, Z+2	; 0x02
    14ea:	93 81       	ldd	r25, Z+3	; 0x03
    14ec:	0c 5f       	subi	r16, 0xFC	; 252
    14ee:	1f 4f       	sbci	r17, 0xFF	; 255
    14f0:	08 c0       	rjmp	.+16     	; 0x1502 <vfprintf+0x214>
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	07 2e       	mov	r0, r23
    14f8:	00 0c       	add	r0, r0
    14fa:	88 0b       	sbc	r24, r24
    14fc:	99 0b       	sbc	r25, r25
    14fe:	0e 5f       	subi	r16, 0xFE	; 254
    1500:	1f 4f       	sbci	r17, 0xFF	; 255
    1502:	f3 2d       	mov	r31, r3
    1504:	ff 76       	andi	r31, 0x6F	; 111
    1506:	3f 2e       	mov	r3, r31
    1508:	97 ff       	sbrs	r25, 7
    150a:	09 c0       	rjmp	.+18     	; 0x151e <vfprintf+0x230>
    150c:	90 95       	com	r25
    150e:	80 95       	com	r24
    1510:	70 95       	com	r23
    1512:	61 95       	neg	r22
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	8f 4f       	sbci	r24, 0xFF	; 255
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	f0 68       	ori	r31, 0x80	; 128
    151c:	3f 2e       	mov	r3, r31
    151e:	2a e0       	ldi	r18, 0x0A	; 10
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	a3 01       	movw	r20, r6
    1524:	33 d1       	rcall	.+614    	; 0x178c <__ultoa_invert>
    1526:	88 2e       	mov	r8, r24
    1528:	86 18       	sub	r8, r6
    152a:	44 c0       	rjmp	.+136    	; 0x15b4 <vfprintf+0x2c6>
    152c:	85 37       	cpi	r24, 0x75	; 117
    152e:	31 f4       	brne	.+12     	; 0x153c <vfprintf+0x24e>
    1530:	23 2d       	mov	r18, r3
    1532:	2f 7e       	andi	r18, 0xEF	; 239
    1534:	b2 2e       	mov	r11, r18
    1536:	2a e0       	ldi	r18, 0x0A	; 10
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	25 c0       	rjmp	.+74     	; 0x1586 <vfprintf+0x298>
    153c:	93 2d       	mov	r25, r3
    153e:	99 7f       	andi	r25, 0xF9	; 249
    1540:	b9 2e       	mov	r11, r25
    1542:	8f 36       	cpi	r24, 0x6F	; 111
    1544:	c1 f0       	breq	.+48     	; 0x1576 <vfprintf+0x288>
    1546:	18 f4       	brcc	.+6      	; 0x154e <vfprintf+0x260>
    1548:	88 35       	cpi	r24, 0x58	; 88
    154a:	79 f0       	breq	.+30     	; 0x156a <vfprintf+0x27c>
    154c:	ae c0       	rjmp	.+348    	; 0x16aa <vfprintf+0x3bc>
    154e:	80 37       	cpi	r24, 0x70	; 112
    1550:	19 f0       	breq	.+6      	; 0x1558 <vfprintf+0x26a>
    1552:	88 37       	cpi	r24, 0x78	; 120
    1554:	21 f0       	breq	.+8      	; 0x155e <vfprintf+0x270>
    1556:	a9 c0       	rjmp	.+338    	; 0x16aa <vfprintf+0x3bc>
    1558:	e9 2f       	mov	r30, r25
    155a:	e0 61       	ori	r30, 0x10	; 16
    155c:	be 2e       	mov	r11, r30
    155e:	b4 fe       	sbrs	r11, 4
    1560:	0d c0       	rjmp	.+26     	; 0x157c <vfprintf+0x28e>
    1562:	fb 2d       	mov	r31, r11
    1564:	f4 60       	ori	r31, 0x04	; 4
    1566:	bf 2e       	mov	r11, r31
    1568:	09 c0       	rjmp	.+18     	; 0x157c <vfprintf+0x28e>
    156a:	34 fe       	sbrs	r3, 4
    156c:	0a c0       	rjmp	.+20     	; 0x1582 <vfprintf+0x294>
    156e:	29 2f       	mov	r18, r25
    1570:	26 60       	ori	r18, 0x06	; 6
    1572:	b2 2e       	mov	r11, r18
    1574:	06 c0       	rjmp	.+12     	; 0x1582 <vfprintf+0x294>
    1576:	28 e0       	ldi	r18, 0x08	; 8
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <vfprintf+0x298>
    157c:	20 e1       	ldi	r18, 0x10	; 16
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <vfprintf+0x298>
    1582:	20 e1       	ldi	r18, 0x10	; 16
    1584:	32 e0       	ldi	r19, 0x02	; 2
    1586:	f8 01       	movw	r30, r16
    1588:	b7 fe       	sbrs	r11, 7
    158a:	07 c0       	rjmp	.+14     	; 0x159a <vfprintf+0x2ac>
    158c:	60 81       	ld	r22, Z
    158e:	71 81       	ldd	r23, Z+1	; 0x01
    1590:	82 81       	ldd	r24, Z+2	; 0x02
    1592:	93 81       	ldd	r25, Z+3	; 0x03
    1594:	0c 5f       	subi	r16, 0xFC	; 252
    1596:	1f 4f       	sbci	r17, 0xFF	; 255
    1598:	06 c0       	rjmp	.+12     	; 0x15a6 <vfprintf+0x2b8>
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 5f       	subi	r16, 0xFE	; 254
    15a4:	1f 4f       	sbci	r17, 0xFF	; 255
    15a6:	a3 01       	movw	r20, r6
    15a8:	f1 d0       	rcall	.+482    	; 0x178c <__ultoa_invert>
    15aa:	88 2e       	mov	r8, r24
    15ac:	86 18       	sub	r8, r6
    15ae:	fb 2d       	mov	r31, r11
    15b0:	ff 77       	andi	r31, 0x7F	; 127
    15b2:	3f 2e       	mov	r3, r31
    15b4:	36 fe       	sbrs	r3, 6
    15b6:	0d c0       	rjmp	.+26     	; 0x15d2 <vfprintf+0x2e4>
    15b8:	23 2d       	mov	r18, r3
    15ba:	2e 7f       	andi	r18, 0xFE	; 254
    15bc:	a2 2e       	mov	r10, r18
    15be:	89 14       	cp	r8, r9
    15c0:	58 f4       	brcc	.+22     	; 0x15d8 <vfprintf+0x2ea>
    15c2:	34 fe       	sbrs	r3, 4
    15c4:	0b c0       	rjmp	.+22     	; 0x15dc <vfprintf+0x2ee>
    15c6:	32 fc       	sbrc	r3, 2
    15c8:	09 c0       	rjmp	.+18     	; 0x15dc <vfprintf+0x2ee>
    15ca:	83 2d       	mov	r24, r3
    15cc:	8e 7e       	andi	r24, 0xEE	; 238
    15ce:	a8 2e       	mov	r10, r24
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <vfprintf+0x2ee>
    15d2:	b8 2c       	mov	r11, r8
    15d4:	a3 2c       	mov	r10, r3
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <vfprintf+0x2f0>
    15d8:	b8 2c       	mov	r11, r8
    15da:	01 c0       	rjmp	.+2      	; 0x15de <vfprintf+0x2f0>
    15dc:	b9 2c       	mov	r11, r9
    15de:	a4 fe       	sbrs	r10, 4
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <vfprintf+0x312>
    15e2:	fe 01       	movw	r30, r28
    15e4:	e8 0d       	add	r30, r8
    15e6:	f1 1d       	adc	r31, r1
    15e8:	80 81       	ld	r24, Z
    15ea:	80 33       	cpi	r24, 0x30	; 48
    15ec:	21 f4       	brne	.+8      	; 0x15f6 <vfprintf+0x308>
    15ee:	9a 2d       	mov	r25, r10
    15f0:	99 7e       	andi	r25, 0xE9	; 233
    15f2:	a9 2e       	mov	r10, r25
    15f4:	09 c0       	rjmp	.+18     	; 0x1608 <vfprintf+0x31a>
    15f6:	a2 fe       	sbrs	r10, 2
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <vfprintf+0x318>
    15fa:	b3 94       	inc	r11
    15fc:	b3 94       	inc	r11
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <vfprintf+0x31a>
    1600:	8a 2d       	mov	r24, r10
    1602:	86 78       	andi	r24, 0x86	; 134
    1604:	09 f0       	breq	.+2      	; 0x1608 <vfprintf+0x31a>
    1606:	b3 94       	inc	r11
    1608:	a3 fc       	sbrc	r10, 3
    160a:	10 c0       	rjmp	.+32     	; 0x162c <vfprintf+0x33e>
    160c:	a0 fe       	sbrs	r10, 0
    160e:	06 c0       	rjmp	.+12     	; 0x161c <vfprintf+0x32e>
    1610:	b2 14       	cp	r11, r2
    1612:	80 f4       	brcc	.+32     	; 0x1634 <vfprintf+0x346>
    1614:	28 0c       	add	r2, r8
    1616:	92 2c       	mov	r9, r2
    1618:	9b 18       	sub	r9, r11
    161a:	0d c0       	rjmp	.+26     	; 0x1636 <vfprintf+0x348>
    161c:	b2 14       	cp	r11, r2
    161e:	58 f4       	brcc	.+22     	; 0x1636 <vfprintf+0x348>
    1620:	b6 01       	movw	r22, r12
    1622:	80 e2       	ldi	r24, 0x20	; 32
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	76 d0       	rcall	.+236    	; 0x1714 <fputc>
    1628:	b3 94       	inc	r11
    162a:	f8 cf       	rjmp	.-16     	; 0x161c <vfprintf+0x32e>
    162c:	b2 14       	cp	r11, r2
    162e:	18 f4       	brcc	.+6      	; 0x1636 <vfprintf+0x348>
    1630:	2b 18       	sub	r2, r11
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <vfprintf+0x34a>
    1634:	98 2c       	mov	r9, r8
    1636:	21 2c       	mov	r2, r1
    1638:	a4 fe       	sbrs	r10, 4
    163a:	0f c0       	rjmp	.+30     	; 0x165a <vfprintf+0x36c>
    163c:	b6 01       	movw	r22, r12
    163e:	80 e3       	ldi	r24, 0x30	; 48
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	68 d0       	rcall	.+208    	; 0x1714 <fputc>
    1644:	a2 fe       	sbrs	r10, 2
    1646:	16 c0       	rjmp	.+44     	; 0x1674 <vfprintf+0x386>
    1648:	a1 fc       	sbrc	r10, 1
    164a:	03 c0       	rjmp	.+6      	; 0x1652 <vfprintf+0x364>
    164c:	88 e7       	ldi	r24, 0x78	; 120
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <vfprintf+0x368>
    1652:	88 e5       	ldi	r24, 0x58	; 88
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	b6 01       	movw	r22, r12
    1658:	0c c0       	rjmp	.+24     	; 0x1672 <vfprintf+0x384>
    165a:	8a 2d       	mov	r24, r10
    165c:	86 78       	andi	r24, 0x86	; 134
    165e:	51 f0       	breq	.+20     	; 0x1674 <vfprintf+0x386>
    1660:	a1 fe       	sbrs	r10, 1
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <vfprintf+0x37a>
    1664:	8b e2       	ldi	r24, 0x2B	; 43
    1666:	01 c0       	rjmp	.+2      	; 0x166a <vfprintf+0x37c>
    1668:	80 e2       	ldi	r24, 0x20	; 32
    166a:	a7 fc       	sbrc	r10, 7
    166c:	8d e2       	ldi	r24, 0x2D	; 45
    166e:	b6 01       	movw	r22, r12
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	50 d0       	rcall	.+160    	; 0x1714 <fputc>
    1674:	89 14       	cp	r8, r9
    1676:	30 f4       	brcc	.+12     	; 0x1684 <vfprintf+0x396>
    1678:	b6 01       	movw	r22, r12
    167a:	80 e3       	ldi	r24, 0x30	; 48
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	4a d0       	rcall	.+148    	; 0x1714 <fputc>
    1680:	9a 94       	dec	r9
    1682:	f8 cf       	rjmp	.-16     	; 0x1674 <vfprintf+0x386>
    1684:	8a 94       	dec	r8
    1686:	f3 01       	movw	r30, r6
    1688:	e8 0d       	add	r30, r8
    168a:	f1 1d       	adc	r31, r1
    168c:	80 81       	ld	r24, Z
    168e:	b6 01       	movw	r22, r12
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	40 d0       	rcall	.+128    	; 0x1714 <fputc>
    1694:	81 10       	cpse	r8, r1
    1696:	f6 cf       	rjmp	.-20     	; 0x1684 <vfprintf+0x396>
    1698:	22 20       	and	r2, r2
    169a:	09 f4       	brne	.+2      	; 0x169e <vfprintf+0x3b0>
    169c:	4e ce       	rjmp	.-868    	; 0x133a <vfprintf+0x4c>
    169e:	b6 01       	movw	r22, r12
    16a0:	80 e2       	ldi	r24, 0x20	; 32
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	37 d0       	rcall	.+110    	; 0x1714 <fputc>
    16a6:	2a 94       	dec	r2
    16a8:	f7 cf       	rjmp	.-18     	; 0x1698 <vfprintf+0x3aa>
    16aa:	f6 01       	movw	r30, r12
    16ac:	86 81       	ldd	r24, Z+6	; 0x06
    16ae:	97 81       	ldd	r25, Z+7	; 0x07
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <vfprintf+0x3c8>
    16b2:	8f ef       	ldi	r24, 0xFF	; 255
    16b4:	9f ef       	ldi	r25, 0xFF	; 255
    16b6:	2b 96       	adiw	r28, 0x0b	; 11
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	df 90       	pop	r13
    16d0:	cf 90       	pop	r12
    16d2:	bf 90       	pop	r11
    16d4:	af 90       	pop	r10
    16d6:	9f 90       	pop	r9
    16d8:	8f 90       	pop	r8
    16da:	7f 90       	pop	r7
    16dc:	6f 90       	pop	r6
    16de:	5f 90       	pop	r5
    16e0:	4f 90       	pop	r4
    16e2:	3f 90       	pop	r3
    16e4:	2f 90       	pop	r2
    16e6:	08 95       	ret

000016e8 <strnlen_P>:
    16e8:	fc 01       	movw	r30, r24
    16ea:	05 90       	lpm	r0, Z+
    16ec:	61 50       	subi	r22, 0x01	; 1
    16ee:	70 40       	sbci	r23, 0x00	; 0
    16f0:	01 10       	cpse	r0, r1
    16f2:	d8 f7       	brcc	.-10     	; 0x16ea <strnlen_P+0x2>
    16f4:	80 95       	com	r24
    16f6:	90 95       	com	r25
    16f8:	8e 0f       	add	r24, r30
    16fa:	9f 1f       	adc	r25, r31
    16fc:	08 95       	ret

000016fe <strnlen>:
    16fe:	fc 01       	movw	r30, r24
    1700:	61 50       	subi	r22, 0x01	; 1
    1702:	70 40       	sbci	r23, 0x00	; 0
    1704:	01 90       	ld	r0, Z+
    1706:	01 10       	cpse	r0, r1
    1708:	d8 f7       	brcc	.-10     	; 0x1700 <strnlen+0x2>
    170a:	80 95       	com	r24
    170c:	90 95       	com	r25
    170e:	8e 0f       	add	r24, r30
    1710:	9f 1f       	adc	r25, r31
    1712:	08 95       	ret

00001714 <fputc>:
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	fb 01       	movw	r30, r22
    171e:	23 81       	ldd	r18, Z+3	; 0x03
    1720:	21 fd       	sbrc	r18, 1
    1722:	03 c0       	rjmp	.+6      	; 0x172a <fputc+0x16>
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	9f ef       	ldi	r25, 0xFF	; 255
    1728:	2c c0       	rjmp	.+88     	; 0x1782 <fputc+0x6e>
    172a:	22 ff       	sbrs	r18, 2
    172c:	16 c0       	rjmp	.+44     	; 0x175a <fputc+0x46>
    172e:	46 81       	ldd	r20, Z+6	; 0x06
    1730:	57 81       	ldd	r21, Z+7	; 0x07
    1732:	24 81       	ldd	r18, Z+4	; 0x04
    1734:	35 81       	ldd	r19, Z+5	; 0x05
    1736:	42 17       	cp	r20, r18
    1738:	53 07       	cpc	r21, r19
    173a:	44 f4       	brge	.+16     	; 0x174c <fputc+0x38>
    173c:	a0 81       	ld	r26, Z
    173e:	b1 81       	ldd	r27, Z+1	; 0x01
    1740:	9d 01       	movw	r18, r26
    1742:	2f 5f       	subi	r18, 0xFF	; 255
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	31 83       	std	Z+1, r19	; 0x01
    1748:	20 83       	st	Z, r18
    174a:	8c 93       	st	X, r24
    174c:	26 81       	ldd	r18, Z+6	; 0x06
    174e:	37 81       	ldd	r19, Z+7	; 0x07
    1750:	2f 5f       	subi	r18, 0xFF	; 255
    1752:	3f 4f       	sbci	r19, 0xFF	; 255
    1754:	37 83       	std	Z+7, r19	; 0x07
    1756:	26 83       	std	Z+6, r18	; 0x06
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <fputc+0x6e>
    175a:	8b 01       	movw	r16, r22
    175c:	ec 01       	movw	r28, r24
    175e:	fb 01       	movw	r30, r22
    1760:	00 84       	ldd	r0, Z+8	; 0x08
    1762:	f1 85       	ldd	r31, Z+9	; 0x09
    1764:	e0 2d       	mov	r30, r0
    1766:	09 95       	icall
    1768:	89 2b       	or	r24, r25
    176a:	e1 f6       	brne	.-72     	; 0x1724 <fputc+0x10>
    176c:	d8 01       	movw	r26, r16
    176e:	16 96       	adiw	r26, 0x06	; 6
    1770:	8d 91       	ld	r24, X+
    1772:	9c 91       	ld	r25, X
    1774:	17 97       	sbiw	r26, 0x07	; 7
    1776:	01 96       	adiw	r24, 0x01	; 1
    1778:	17 96       	adiw	r26, 0x07	; 7
    177a:	9c 93       	st	X, r25
    177c:	8e 93       	st	-X, r24
    177e:	16 97       	sbiw	r26, 0x06	; 6
    1780:	ce 01       	movw	r24, r28
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	1f 91       	pop	r17
    1788:	0f 91       	pop	r16
    178a:	08 95       	ret

0000178c <__ultoa_invert>:
    178c:	fa 01       	movw	r30, r20
    178e:	aa 27       	eor	r26, r26
    1790:	28 30       	cpi	r18, 0x08	; 8
    1792:	51 f1       	breq	.+84     	; 0x17e8 <__ultoa_invert+0x5c>
    1794:	20 31       	cpi	r18, 0x10	; 16
    1796:	81 f1       	breq	.+96     	; 0x17f8 <__ultoa_invert+0x6c>
    1798:	e8 94       	clt
    179a:	6f 93       	push	r22
    179c:	6e 7f       	andi	r22, 0xFE	; 254
    179e:	6e 5f       	subi	r22, 0xFE	; 254
    17a0:	7f 4f       	sbci	r23, 0xFF	; 255
    17a2:	8f 4f       	sbci	r24, 0xFF	; 255
    17a4:	9f 4f       	sbci	r25, 0xFF	; 255
    17a6:	af 4f       	sbci	r26, 0xFF	; 255
    17a8:	b1 e0       	ldi	r27, 0x01	; 1
    17aa:	3e d0       	rcall	.+124    	; 0x1828 <__ultoa_invert+0x9c>
    17ac:	b4 e0       	ldi	r27, 0x04	; 4
    17ae:	3c d0       	rcall	.+120    	; 0x1828 <__ultoa_invert+0x9c>
    17b0:	67 0f       	add	r22, r23
    17b2:	78 1f       	adc	r23, r24
    17b4:	89 1f       	adc	r24, r25
    17b6:	9a 1f       	adc	r25, r26
    17b8:	a1 1d       	adc	r26, r1
    17ba:	68 0f       	add	r22, r24
    17bc:	79 1f       	adc	r23, r25
    17be:	8a 1f       	adc	r24, r26
    17c0:	91 1d       	adc	r25, r1
    17c2:	a1 1d       	adc	r26, r1
    17c4:	6a 0f       	add	r22, r26
    17c6:	71 1d       	adc	r23, r1
    17c8:	81 1d       	adc	r24, r1
    17ca:	91 1d       	adc	r25, r1
    17cc:	a1 1d       	adc	r26, r1
    17ce:	20 d0       	rcall	.+64     	; 0x1810 <__ultoa_invert+0x84>
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <__ultoa_invert+0x48>
    17d2:	68 94       	set
    17d4:	3f 91       	pop	r19
    17d6:	2a e0       	ldi	r18, 0x0A	; 10
    17d8:	26 9f       	mul	r18, r22
    17da:	11 24       	eor	r1, r1
    17dc:	30 19       	sub	r19, r0
    17de:	30 5d       	subi	r19, 0xD0	; 208
    17e0:	31 93       	st	Z+, r19
    17e2:	de f6       	brtc	.-74     	; 0x179a <__ultoa_invert+0xe>
    17e4:	cf 01       	movw	r24, r30
    17e6:	08 95       	ret
    17e8:	46 2f       	mov	r20, r22
    17ea:	47 70       	andi	r20, 0x07	; 7
    17ec:	40 5d       	subi	r20, 0xD0	; 208
    17ee:	41 93       	st	Z+, r20
    17f0:	b3 e0       	ldi	r27, 0x03	; 3
    17f2:	0f d0       	rcall	.+30     	; 0x1812 <__ultoa_invert+0x86>
    17f4:	c9 f7       	brne	.-14     	; 0x17e8 <__ultoa_invert+0x5c>
    17f6:	f6 cf       	rjmp	.-20     	; 0x17e4 <__ultoa_invert+0x58>
    17f8:	46 2f       	mov	r20, r22
    17fa:	4f 70       	andi	r20, 0x0F	; 15
    17fc:	40 5d       	subi	r20, 0xD0	; 208
    17fe:	4a 33       	cpi	r20, 0x3A	; 58
    1800:	18 f0       	brcs	.+6      	; 0x1808 <__ultoa_invert+0x7c>
    1802:	49 5d       	subi	r20, 0xD9	; 217
    1804:	31 fd       	sbrc	r19, 1
    1806:	40 52       	subi	r20, 0x20	; 32
    1808:	41 93       	st	Z+, r20
    180a:	02 d0       	rcall	.+4      	; 0x1810 <__ultoa_invert+0x84>
    180c:	a9 f7       	brne	.-22     	; 0x17f8 <__ultoa_invert+0x6c>
    180e:	ea cf       	rjmp	.-44     	; 0x17e4 <__ultoa_invert+0x58>
    1810:	b4 e0       	ldi	r27, 0x04	; 4
    1812:	a6 95       	lsr	r26
    1814:	97 95       	ror	r25
    1816:	87 95       	ror	r24
    1818:	77 95       	ror	r23
    181a:	67 95       	ror	r22
    181c:	ba 95       	dec	r27
    181e:	c9 f7       	brne	.-14     	; 0x1812 <__ultoa_invert+0x86>
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	61 05       	cpc	r22, r1
    1824:	71 05       	cpc	r23, r1
    1826:	08 95       	ret
    1828:	9b 01       	movw	r18, r22
    182a:	ac 01       	movw	r20, r24
    182c:	0a 2e       	mov	r0, r26
    182e:	06 94       	lsr	r0
    1830:	57 95       	ror	r21
    1832:	47 95       	ror	r20
    1834:	37 95       	ror	r19
    1836:	27 95       	ror	r18
    1838:	ba 95       	dec	r27
    183a:	c9 f7       	brne	.-14     	; 0x182e <__ultoa_invert+0xa2>
    183c:	62 0f       	add	r22, r18
    183e:	73 1f       	adc	r23, r19
    1840:	84 1f       	adc	r24, r20
    1842:	95 1f       	adc	r25, r21
    1844:	a0 1d       	adc	r26, r0
    1846:	08 95       	ret

00001848 <_exit>:
    1848:	f8 94       	cli

0000184a <__stop_program>:
    184a:	ff cf       	rjmp	.-2      	; 0x184a <__stop_program>
