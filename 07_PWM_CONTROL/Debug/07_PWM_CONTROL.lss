
07_PWM_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  00001716  000017aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001716  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006a2  008001a8  008001a8  00001852  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001852  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000162a  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f76  00000000  00000000  0000306a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf6  00000000  00000000  00003fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  00004bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000698  00000000  00000000  00004f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000512  00000000  00000000  000055d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005ae2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c5       	rjmp	.+3064   	; 0xc0e <__vector_5>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e0 c1       	rjmp	.+960    	; 0x402 <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	44 c2       	rjmp	.+1160   	; 0x4d2 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	fa c3       	rjmp	.+2036   	; 0x86e <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e1       	ldi	r30, 0x16	; 22
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 3a       	cpi	r26, 0xA8	; 168
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	a8 ea       	ldi	r26, 0xA8	; 168
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 34       	cpi	r26, 0x4A	; 74
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	f5 d1       	rcall	.+1002   	; 0x4ae <main>
      c4:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <shift_left_keep_ledon>:
		msec_count = 0; // 다음 500ms를 만나기 위해 0으로
		led_toggle = !led_toggle;
		if (led_toggle)
		led_all_on();
		else
		led_all_off();
      ca:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <msec_count>
      ce:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <msec_count+0x1>
      d2:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <msec_count+0x2>
      d6:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <msec_count+0x3>
      da:	84 36       	cpi	r24, 0x64	; 100
      dc:	91 05       	cpc	r25, r1
      de:	a1 05       	cpc	r26, r1
      e0:	b1 05       	cpc	r27, r1
      e2:	70 f1       	brcs	.+92     	; 0x140 <shift_left_keep_ledon+0x76>
      e4:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <msec_count>
      e8:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <msec_count+0x1>
      ec:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <msec_count+0x2>
      f0:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <msec_count+0x3>
      f4:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <i.1752>
      f8:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <i.1752+0x1>
      fc:	28 30       	cpi	r18, 0x08	; 8
      fe:	31 05       	cpc	r19, r1
     100:	7c f0       	brlt	.+30     	; 0x120 <shift_left_keep_ledon+0x56>
     102:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <i.1752+0x1>
     106:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <i.1752>
     10a:	1b ba       	out	0x1b, r1	; 27
     10c:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <state>
     110:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <state+0x1>
     114:	01 96       	adiw	r24, 0x01	; 1
     116:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     11a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     11e:	08 95       	ret
     120:	c9 01       	movw	r24, r18
     122:	01 96       	adiw	r24, 0x01	; 1
     124:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <i.1752+0x1>
     128:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <i.1752>
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	02 c0       	rjmp	.+4      	; 0x136 <shift_left_keep_ledon+0x6c>
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	2a 95       	dec	r18
     138:	e2 f7       	brpl	.-8      	; 0x132 <shift_left_keep_ledon+0x68>
     13a:	9b b3       	in	r25, 0x1b	; 27
     13c:	89 2b       	or	r24, r25
     13e:	8b bb       	out	0x1b, r24	; 27
     140:	08 95       	ret

00000142 <shift_right_keep_ledon>:
     142:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <msec_count>
     146:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <msec_count+0x1>
     14a:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <msec_count+0x2>
     14e:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <msec_count+0x3>
     152:	84 36       	cpi	r24, 0x64	; 100
     154:	91 05       	cpc	r25, r1
     156:	a1 05       	cpc	r26, r1
     158:	b1 05       	cpc	r27, r1
     15a:	70 f1       	brcs	.+92     	; 0x1b8 <shift_right_keep_ledon+0x76>
     15c:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <msec_count>
     160:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <msec_count+0x1>
     164:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <msec_count+0x2>
     168:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <msec_count+0x3>
     16c:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <i.1756>
     170:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <i.1756+0x1>
     174:	28 30       	cpi	r18, 0x08	; 8
     176:	31 05       	cpc	r19, r1
     178:	7c f0       	brlt	.+30     	; 0x198 <shift_right_keep_ledon+0x56>
     17a:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <i.1756+0x1>
     17e:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <i.1756>
     182:	1b ba       	out	0x1b, r1	; 27
     184:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <state>
     188:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <state+0x1>
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     192:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     196:	08 95       	ret
     198:	c9 01       	movw	r24, r18
     19a:	01 96       	adiw	r24, 0x01	; 1
     19c:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <i.1756+0x1>
     1a0:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <i.1756>
     1a4:	80 e8       	ldi	r24, 0x80	; 128
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <shift_right_keep_ledon+0x6c>
     1aa:	95 95       	asr	r25
     1ac:	87 95       	ror	r24
     1ae:	2a 95       	dec	r18
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <shift_right_keep_ledon+0x68>
     1b2:	9b b3       	in	r25, 0x1b	; 27
     1b4:	89 2b       	or	r24, r25
     1b6:	8b bb       	out	0x1b, r24	; 27
     1b8:	08 95       	ret

000001ba <shift_left_ledon>:
     1ba:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <msec_count>
     1be:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <msec_count+0x1>
     1c2:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <msec_count+0x2>
     1c6:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <msec_count+0x3>
     1ca:	84 36       	cpi	r24, 0x64	; 100
     1cc:	91 05       	cpc	r25, r1
     1ce:	a1 05       	cpc	r26, r1
     1d0:	b1 05       	cpc	r27, r1
     1d2:	70 f1       	brcs	.+92     	; 0x230 <shift_left_ledon+0x76>
     1d4:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <msec_count>
     1d8:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <msec_count+0x1>
     1dc:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <msec_count+0x2>
     1e0:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <msec_count+0x3>
     1e4:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <i.1760>
     1e8:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <i.1760+0x1>
     1ec:	88 30       	cpi	r24, 0x08	; 8
     1ee:	91 05       	cpc	r25, r1
     1f0:	7c f0       	brlt	.+30     	; 0x210 <shift_left_ledon+0x56>
     1f2:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <i.1760+0x1>
     1f6:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <i.1760>
     1fa:	1b ba       	out	0x1b, r1	; 27
     1fc:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <state>
     200:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <state+0x1>
     204:	01 96       	adiw	r24, 0x01	; 1
     206:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     20a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     20e:	08 95       	ret
     210:	9c 01       	movw	r18, r24
     212:	2f 5f       	subi	r18, 0xFF	; 255
     214:	3f 4f       	sbci	r19, 0xFF	; 255
     216:	30 93 af 01 	sts	0x01AF, r19	; 0x8001af <i.1760+0x1>
     21a:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <i.1760>
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	a9 01       	movw	r20, r18
     224:	02 c0       	rjmp	.+4      	; 0x22a <shift_left_ledon+0x70>
     226:	44 0f       	add	r20, r20
     228:	55 1f       	adc	r21, r21
     22a:	8a 95       	dec	r24
     22c:	e2 f7       	brpl	.-8      	; 0x226 <shift_left_ledon+0x6c>
     22e:	4b bb       	out	0x1b, r20	; 27
     230:	08 95       	ret

00000232 <shift_right_ledon>:
     232:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <msec_count>
     236:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <msec_count+0x1>
     23a:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <msec_count+0x2>
     23e:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <msec_count+0x3>
     242:	84 36       	cpi	r24, 0x64	; 100
     244:	91 05       	cpc	r25, r1
     246:	a1 05       	cpc	r26, r1
     248:	b1 05       	cpc	r27, r1
     24a:	70 f1       	brcs	.+92     	; 0x2a8 <shift_right_ledon+0x76>
     24c:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <msec_count>
     250:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <msec_count+0x1>
     254:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <msec_count+0x2>
     258:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <msec_count+0x3>
     25c:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <i.1764>
     260:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <i.1764+0x1>
     264:	88 30       	cpi	r24, 0x08	; 8
     266:	91 05       	cpc	r25, r1
     268:	7c f0       	brlt	.+30     	; 0x288 <shift_right_ledon+0x56>
     26a:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <i.1764+0x1>
     26e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <i.1764>
     272:	1b ba       	out	0x1b, r1	; 27
     274:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <state>
     278:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <state+0x1>
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     282:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     286:	08 95       	ret
     288:	9c 01       	movw	r18, r24
     28a:	2f 5f       	subi	r18, 0xFF	; 255
     28c:	3f 4f       	sbci	r19, 0xFF	; 255
     28e:	30 93 ad 01 	sts	0x01AD, r19	; 0x8001ad <i.1764+0x1>
     292:	20 93 ac 01 	sts	0x01AC, r18	; 0x8001ac <i.1764>
     296:	20 e8       	ldi	r18, 0x80	; 128
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	a9 01       	movw	r20, r18
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <shift_right_ledon+0x70>
     29e:	55 95       	asr	r21
     2a0:	47 95       	ror	r20
     2a2:	8a 95       	dec	r24
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <shift_right_ledon+0x6c>
     2a6:	4b bb       	out	0x1b, r20	; 27
     2a8:	08 95       	ret

000002aa <led_all_on>:
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	8b bb       	out	0x1b, r24	; 27
     2ae:	08 95       	ret

000002b0 <led_all_off>:
     2b0:	1b ba       	out	0x1b, r1	; 27
     2b2:	08 95       	ret

000002b4 <floweron>:
     2b4:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <msec_count>
     2b8:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <msec_count+0x1>
     2bc:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <msec_count+0x2>
     2c0:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <msec_count+0x3>
     2c4:	84 36       	cpi	r24, 0x64	; 100
     2c6:	91 05       	cpc	r25, r1
     2c8:	a1 05       	cpc	r26, r1
     2ca:	b1 05       	cpc	r27, r1
     2cc:	d8 f1       	brcs	.+118    	; 0x344 <floweron+0x90>
     2ce:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <msec_count>
     2d2:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <msec_count+0x1>
     2d6:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <msec_count+0x2>
     2da:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <msec_count+0x3>
     2de:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <i.1778>
     2e2:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <i.1778+0x1>
     2e6:	24 30       	cpi	r18, 0x04	; 4
     2e8:	31 05       	cpc	r19, r1
     2ea:	7c f0       	brlt	.+30     	; 0x30a <floweron+0x56>
     2ec:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <i.1778+0x1>
     2f0:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <i.1778>
     2f4:	1b ba       	out	0x1b, r1	; 27
     2f6:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <state>
     2fa:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <state+0x1>
     2fe:	01 96       	adiw	r24, 0x01	; 1
     300:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     304:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     308:	08 95       	ret
     30a:	3b b3       	in	r19, 0x1b	; 27
     30c:	80 e1       	ldi	r24, 0x10	; 16
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	ac 01       	movw	r20, r24
     312:	02 2e       	mov	r0, r18
     314:	02 c0       	rjmp	.+4      	; 0x31a <floweron+0x66>
     316:	44 0f       	add	r20, r20
     318:	55 1f       	adc	r21, r21
     31a:	0a 94       	dec	r0
     31c:	e2 f7       	brpl	.-8      	; 0x316 <floweron+0x62>
     31e:	88 e0       	ldi	r24, 0x08	; 8
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	02 c0       	rjmp	.+4      	; 0x328 <floweron+0x74>
     324:	95 95       	asr	r25
     326:	87 95       	ror	r24
     328:	2a 95       	dec	r18
     32a:	e2 f7       	brpl	.-8      	; 0x324 <floweron+0x70>
     32c:	84 2b       	or	r24, r20
     32e:	83 2b       	or	r24, r19
     330:	8b bb       	out	0x1b, r24	; 27
     332:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <i.1778>
     336:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <i.1778+0x1>
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <i.1778+0x1>
     340:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <i.1778>
     344:	08 95       	ret

00000346 <floweroff>:
     346:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <msec_count>
     34a:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <msec_count+0x1>
     34e:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <msec_count+0x2>
     352:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <msec_count+0x3>
     356:	84 36       	cpi	r24, 0x64	; 100
     358:	91 05       	cpc	r25, r1
     35a:	a1 05       	cpc	r26, r1
     35c:	b1 05       	cpc	r27, r1
     35e:	a8 f1       	brcs	.+106    	; 0x3ca <floweroff+0x84>
     360:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <msec_count>
     364:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <msec_count+0x1>
     368:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <msec_count+0x2>
     36c:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <msec_count+0x3>
     370:	40 91 a8 01 	lds	r20, 0x01A8	; 0x8001a8 <__data_end>
     374:	50 91 a9 01 	lds	r21, 0x01A9	; 0x8001a9 <__data_end+0x1>
     378:	44 30       	cpi	r20, 0x04	; 4
     37a:	51 05       	cpc	r21, r1
     37c:	54 f0       	brlt	.+20     	; 0x392 <floweroff+0x4c>
     37e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__data_end+0x1>
     382:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <__data_end>
     386:	1b ba       	out	0x1b, r1	; 27
     388:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <state+0x1>
     38c:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <state>
     390:	08 95       	ret
     392:	20 ef       	ldi	r18, 0xF0	; 240
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	04 2e       	mov	r0, r20
     398:	02 c0       	rjmp	.+4      	; 0x39e <floweroff+0x58>
     39a:	35 95       	asr	r19
     39c:	27 95       	ror	r18
     39e:	0a 94       	dec	r0
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <floweroff+0x54>
     3a2:	8f e0       	ldi	r24, 0x0F	; 15
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <floweroff+0x66>
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	4a 95       	dec	r20
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <floweroff+0x62>
     3b0:	20 7f       	andi	r18, 0xF0	; 240
     3b2:	8f 70       	andi	r24, 0x0F	; 15
     3b4:	82 2b       	or	r24, r18
     3b6:	8b bb       	out	0x1b, r24	; 27
     3b8:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
     3bc:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <__data_end+0x1>
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <__data_end+0x1>
     3c6:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
     3ca:	08 95       	ret

000003cc <led_on_pwm>:
	}
}

void led_on_pwm(int dim) // dim의 반복을 이용해서 밝기를 제어 (PWM의 HIGH 비율을 제어)
{
	PORTA = 0xff;
     3cc:	2f ef       	ldi	r18, 0xFF	; 255
     3ce:	2b bb       	out	0x1b, r18	; 27
	
	for (int i = 0; i < 256; i++)
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	0a c0       	rjmp	.+20     	; 0x3ea <led_on_pwm+0x1e>
	{
		if (i > dim)
     3d6:	82 17       	cp	r24, r18
     3d8:	93 07       	cpc	r25, r19
     3da:	0c f4       	brge	.+2      	; 0x3de <led_on_pwm+0x12>
		{
			PORTA = 0; // duty cycle이 넘어가면 LED all off
     3dc:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3de:	4a e6       	ldi	r20, 0x6A	; 106
     3e0:	4a 95       	dec	r20
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <led_on_pwm+0x14>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <led_on_pwm+0x1a>

void led_on_pwm(int dim) // dim의 반복을 이용해서 밝기를 제어 (PWM의 HIGH 비율을 제어)
{
	PORTA = 0xff;
	
	for (int i = 0; i < 256; i++)
     3e6:	2f 5f       	subi	r18, 0xFF	; 255
     3e8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ea:	2f 3f       	cpi	r18, 0xFF	; 255
     3ec:	31 05       	cpc	r19, r1
     3ee:	99 f3       	breq	.-26     	; 0x3d6 <led_on_pwm+0xa>
     3f0:	94 f3       	brlt	.-28     	; 0x3d6 <led_on_pwm+0xa>
		{
			PORTA = 0; // duty cycle이 넘어가면 LED all off
		}
		_delay_us(20);
	}
     3f2:	08 95       	ret

000003f4 <make_pwm_led_control>:
void make_pwm_led_control(void)
{
	int dim = 70; // LED 밝기 조절 변수
	int direction = 1; // 1: 밝기 증가 모드, -1: 밝기 감소 모드
	
	DDRA = 0xff; // led 모두 출력 모드
     3f4:	8f ef       	ldi	r24, 0xFF	; 255
     3f6:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xff; // led all on
     3f8:	8b bb       	out	0x1b, r24	; 27
	
	// dark --> bright --> dark 순서로 진행되는 코드
	while (1)
	{
 		led_on_pwm(dim);
     3fa:	86 e4       	ldi	r24, 0x46	; 70
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	e6 df       	rcall	.-52     	; 0x3cc <led_on_pwm>
     400:	fc cf       	rjmp	.-8      	; 0x3fa <make_pwm_led_control+0x6>

00000402 <__vector_16>:

// for printf
FILE OUTPUT = FDEV_SETUP_STREAM(UART0_transmit, NULL, _FDEV_SETUP_WRITE);

ISR(TIMER0_OVF_vect)
{
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	9f 93       	push	r25
     410:	af 93       	push	r26
     412:	bf 93       	push	r27
	TCNT0=6;  // 6~256 : 250(1ms) 그래서 TCNT0를 6으로 설정
     414:	86 e0       	ldi	r24, 0x06	; 6
     416:	82 bf       	out	0x32, r24	; 50
	msec_count++;  // 1ms마다 ms_count가 1씩 증가
     418:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <msec_count>
     41c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <msec_count+0x1>
     420:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <msec_count+0x2>
     424:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <msec_count+0x3>
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	a1 1d       	adc	r26, r1
     42c:	b1 1d       	adc	r27, r1
     42e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <msec_count>
     432:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <msec_count+0x1>
     436:	a0 93 c2 01 	sts	0x01C2, r26	; 0x8001c2 <msec_count+0x2>
     43a:	b0 93 c3 01 	sts	0x01C3, r27	; 0x8001c3 <msec_count+0x3>
	fnd_dis++;   // fnd 잔상효과 유지 하기 위한 timer 2ms  	
     43e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <fnd_dis>
     442:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <fnd_dis+0x1>
     446:	a0 91 be 01 	lds	r26, 0x01BE	; 0x8001be <fnd_dis+0x2>
     44a:	b0 91 bf 01 	lds	r27, 0x01BF	; 0x8001bf <fnd_dis+0x3>
     44e:	01 96       	adiw	r24, 0x01	; 1
     450:	a1 1d       	adc	r26, r1
     452:	b1 1d       	adc	r27, r1
     454:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <fnd_dis>
     458:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <fnd_dis+0x1>
     45c:	a0 93 be 01 	sts	0x01BE, r26	; 0x8001be <fnd_dis+0x2>
     460:	b0 93 bf 01 	sts	0x01BF, r27	; 0x8001bf <fnd_dis+0x3>
	ultrasonic_check_timer++;
     464:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <ultrasonic_check_timer>
     468:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <ultrasonic_check_timer+0x1>
     46c:	a0 91 ba 01 	lds	r26, 0x01BA	; 0x8001ba <ultrasonic_check_timer+0x2>
     470:	b0 91 bb 01 	lds	r27, 0x01BB	; 0x8001bb <ultrasonic_check_timer+0x3>
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	a1 1d       	adc	r26, r1
     478:	b1 1d       	adc	r27, r1
     47a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <ultrasonic_check_timer>
     47e:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <ultrasonic_check_timer+0x1>
     482:	a0 93 ba 01 	sts	0x01BA, r26	; 0x8001ba <ultrasonic_check_timer+0x2>
     486:	b0 93 bb 01 	sts	0x01BB, r27	; 0x8001bb <ultrasonic_check_timer+0x3>
}
     48a:	bf 91       	pop	r27
     48c:	af 91       	pop	r26
     48e:	9f 91       	pop	r25
     490:	8f 91       	pop	r24
     492:	0f 90       	pop	r0
     494:	0f be       	out	0x3f, r0	; 63
     496:	0f 90       	pop	r0
     498:	1f 90       	pop	r1
     49a:	18 95       	reti

0000049c <init_timer0>:
// 1. 분주비 계산 
// 16000000HZ/64 ==> 250,000HZ
// 2. T(주기) 1가 잡아 먹는 시간 : 1/f = 1/250,000 ==> 0.000004sec(4us) : 0.004ms
// 3. 8bit timer OV(OVflow) : 0.004ms x 256 = 0.001024sec --> 1.024ms
// 그러면 정확히 1ms 를 재고 싶다면 0.004ms x 250개 = 0.001sec ==> 1ms
	TCNT0 = 6;   // TCNT : 0~256 ==> 1ms마다 TIMER0_OVF_vect로 진입한다.
     49c:	86 e0       	ldi	r24, 0x06	; 6
     49e:	82 bf       	out	0x32, r24	; 50
	             // TCNT0 = 6로 설정을 한이유: 6~256 : 250개를 count(정확히 1MS를맞추기 위해서)
	             //
// 4 분주비를 설정 (250khz)
	TCCR0 |= 1 << CS02 | 0 << CS01 | 0 << CS00;	
     4a0:	83 b7       	in	r24, 0x33	; 51
     4a2:	84 60       	ori	r24, 0x04	; 4
     4a4:	83 bf       	out	0x33, r24	; 51
// 5. TIMER0 OVERFLOW를 허용(enable)
	TIMSK |= 1 << TOIE0;  // TIMSK |= 0x01;
     4a6:	87 b7       	in	r24, 0x37	; 55
     4a8:	81 60       	ori	r24, 0x01	; 1
     4aa:	87 bf       	out	0x37, r24	; 55
     4ac:	08 95       	ret

000004ae <main>:
	ultrasonic_check_timer++;
}

int main(void)
{
    init_timer0();
     4ae:	f6 df       	rcall	.-20     	; 0x49c <init_timer0>
	init_uart0();
     4b0:	8e d0       	rcall	.+284    	; 0x5ce <init_uart0>
	init_uart1();
     4b2:	5c d2       	rcall	.+1208   	; 0x96c <init_uart1>
     4b4:	08 d4       	rcall	.+2064   	; 0xcc6 <init_ultrasonic>
	init_ultrasonic();
     4b6:	80 e1       	ldi	r24, 0x10	; 16
     4b8:	91 e0       	ldi	r25, 0x01	; 1
	stdout = &OUTPUT;  // printf가 동작 될 수 있도록 stdout에 OUTPUT화일 포인터 assign
     4ba:	90 93 47 08 	sts	0x0847, r25	; 0x800847 <__iob+0x3>
     4be:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <__iob+0x2>
     4c2:	8f ef       	ldi	r24, 0xFF	; 255
	                 				 
	DDRA=0xff;   // led를 출력 모드로 
     4c4:	8a bb       	out	0x1a, r24	; 26
    sei();     // 전역적으로 interrupt 허용
	
	make_pwm_led_control();
     4c6:	78 94       	sei
     4c8:	95 df       	rcall	.-214    	; 0x3f4 <make_pwm_led_control>

    while (1) 
    {
		pc_command_processing();
     4ca:	95 d0       	rcall	.+298    	; 0x5f6 <pc_command_processing>
     4cc:	64 d2       	rcall	.+1224   	; 0x996 <bt_command_processing>
		bt_command_processing();
     4ce:	20 d4       	rcall	.+2112   	; 0xd10 <ultrasonic_distance_check>
     4d0:	fc cf       	rjmp	.-8      	; 0x4ca <main+0x1c>

000004d2 <__vector_18>:
		ultrasonic_distance_check();
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63

// PC로 부터 1 byte가 들어올때 마다 이곳으로 들어온다 (RX INT)
// 예) led_all_on\n --> 이곳 11번이 들어온다 
//     led_all_off\n
ISR(USART0_RX_vect)
{
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	0b b6       	in	r0, 0x3b	; 59
     4de:	0f 92       	push	r0
     4e0:	2f 93       	push	r18
     4e2:	3f 93       	push	r19
     4e4:	4f 93       	push	r20
     4e6:	5f 93       	push	r21
     4e8:	6f 93       	push	r22
     4ea:	7f 93       	push	r23
     4ec:	8f 93       	push	r24
     4ee:	9f 93       	push	r25
     4f0:	af 93       	push	r26
     4f2:	bf 93       	push	r27
     4f4:	ef 93       	push	r30
     4f6:	ff 93       	push	r31
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	1f 92       	push	r1
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
	volatile static int i=0;
	volatile uint8_t data;
	
	data = UDR0;  // uart0의 H/W register(UDR0)로 부터 1 byte를 읽어 간다. 
     502:	8c b1       	in	r24, 0x0c	; 12
     504:	89 83       	std	Y+1, r24	; 0x01
	              // data = UDR0를 실행 하면 UDR0의 내용이 빈다(empty)
	if (data == '\r' || data == '\n')
     506:	89 81       	ldd	r24, Y+1	; 0x01
     508:	8d 30       	cpi	r24, 0x0D	; 13
     50a:	19 f0       	breq	.+6      	; 0x512 <__vector_18+0x40>
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	8a 30       	cpi	r24, 0x0A	; 10
     510:	61 f5       	brne	.+88     	; 0x56a <__vector_18+0x98>
	{
		rx_buff[rear][i] = '\0';   // \n --> \0(문장의 끝을 알리는 indicator)
     512:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <rear>
     516:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <rear+0x1>
     51a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <i.1894>
     51e:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <i.1894+0x1>
     522:	40 e5       	ldi	r20, 0x50	; 80
     524:	42 9f       	mul	r20, r18
     526:	f0 01       	movw	r30, r0
     528:	43 9f       	mul	r20, r19
     52a:	f0 0d       	add	r31, r0
     52c:	11 24       	eor	r1, r1
     52e:	ee 52       	subi	r30, 0x2E	; 46
     530:	fe 4f       	sbci	r31, 0xFE	; 254
     532:	e8 0f       	add	r30, r24
     534:	f9 1f       	adc	r31, r25
     536:	10 82       	st	Z, r1
		i=0;   // 다음 string을 저장 하기 위해 index값을 0으로 만든다. 
     538:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <i.1894+0x1>
     53c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <i.1894>
		rear++;
     540:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <rear>
     544:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <rear+0x1>
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <rear+0x1>
     54e:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <rear>
		rear %= COMMAND_NUMBER;   // 0 ~ 9 if (rear >= 9) rear =0;
     552:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <rear>
     556:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <rear+0x1>
     55a:	6a e0       	ldi	r22, 0x0A	; 10
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	86 d5       	rcall	.+2828   	; 0x106c <__divmodhi4>
     560:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <rear+0x1>
     564:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <rear>
     568:	1c c0       	rjmp	.+56     	; 0x5a2 <__vector_18+0xd0>
		// !!!! 이곳에 queue full (rx_buff) 상태를 check하는 로직이 들어 가야 한다. !!!!!
	}
	else
	{
		// !!!!! COMMAND_LENGTH를 check 하는 로직 추가 !!!!
		rx_buff[rear][i++] = data;
     56a:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <rear>
     56e:	70 91 c9 01 	lds	r23, 0x01C9	; 0x8001c9 <rear+0x1>
     572:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <i.1894>
     576:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <i.1894+0x1>
     57a:	9c 01       	movw	r18, r24
     57c:	2f 5f       	subi	r18, 0xFF	; 255
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	30 93 c5 01 	sts	0x01C5, r19	; 0x8001c5 <i.1894+0x1>
     584:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <i.1894>
     588:	49 81       	ldd	r20, Y+1	; 0x01
     58a:	50 e5       	ldi	r21, 0x50	; 80
     58c:	56 9f       	mul	r21, r22
     58e:	90 01       	movw	r18, r0
     590:	57 9f       	mul	r21, r23
     592:	30 0d       	add	r19, r0
     594:	11 24       	eor	r1, r1
     596:	2e 52       	subi	r18, 0x2E	; 46
     598:	3e 4f       	sbci	r19, 0xFE	; 254
     59a:	f9 01       	movw	r30, r18
     59c:	e8 0f       	add	r30, r24
     59e:	f9 1f       	adc	r31, r25
     5a0:	40 83       	st	Z, r20
	}
		  
}
     5a2:	0f 90       	pop	r0
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	ff 91       	pop	r31
     5aa:	ef 91       	pop	r30
     5ac:	bf 91       	pop	r27
     5ae:	af 91       	pop	r26
     5b0:	9f 91       	pop	r25
     5b2:	8f 91       	pop	r24
     5b4:	7f 91       	pop	r23
     5b6:	6f 91       	pop	r22
     5b8:	5f 91       	pop	r21
     5ba:	4f 91       	pop	r20
     5bc:	3f 91       	pop	r19
     5be:	2f 91       	pop	r18
     5c0:	0f 90       	pop	r0
     5c2:	0b be       	out	0x3b, r0	; 59
     5c4:	0f 90       	pop	r0
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	0f 90       	pop	r0
     5ca:	1f 90       	pop	r1
     5cc:	18 95       	reti

000005ce <init_uart0>:
3. RX(수신) : interrupt 방식 
*/
void init_uart0(void)
{
	// 1. 9600bps 설정
	UBRR0H = 0x00;
     5ce:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 207;   // 9600bps 표9-9
     5d2:	8f ec       	ldi	r24, 0xCF	; 207
     5d4:	89 b9       	out	0x09, r24	; 9
	// 2배속 통신
	UCSR0A |= 1 << U2X0; // 2배속 통신
     5d6:	8b b1       	in	r24, 0x0b	; 11
     5d8:	82 60       	ori	r24, 0x02	; 2
     5da:	8b b9       	out	0x0b, r24	; 11
	UCSR0C |= 0x06; // 비동기(ASYNC)/data8bits/none parity
     5dc:	e5 e9       	ldi	r30, 0x95	; 149
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	86 60       	ori	r24, 0x06	; 6
     5e4:	80 83       	st	Z, r24
	// RXEN0 : UART0으로 부터 수신이 가능 하도록
	// TXEN0 : UART0으로 부터 송신이 가능 하도록 한다. 
	// RXCIE0 : UART0로 부터 1byte가 들어 오면(stop bit가 들어오면) rx interrupt를 발생 시켜라 
    UCSR0B |= 1 << RXEN0 | 1 << TXEN0 | 1 << RXCIE0;
     5e6:	8a b1       	in	r24, 0x0a	; 10
     5e8:	88 69       	ori	r24, 0x98	; 152
     5ea:	8a b9       	out	0x0a, r24	; 10
     5ec:	08 95       	ret

000005ee <UART0_transmit>:
}

// UART0로 1byte를 전송 하는 함수
void UART0_transmit(uint8_t data)
{
	while( !(UCSR0A & 1 << UDRE0) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
     5ee:	5d 9b       	sbis	0x0b, 5	; 11
     5f0:	fe cf       	rjmp	.-4      	; 0x5ee <UART0_transmit>
		;   // no operation NOP
	
	UDR0 = data;   // HW전송 register(UDR0)에 data를 쏴준다.  
     5f2:	8c b9       	out	0x0c, r24	; 12
     5f4:	08 95       	ret

000005f6 <pc_command_processing>:
}

void pc_command_processing(void)
{
     5f6:	cf 93       	push	r28
	if (front != rear) // data가 rx_buff에 존재한다. front와 rear 비교
     5f8:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <front>
     5fc:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <front+0x1>
     600:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <rear>
     604:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <rear+0x1>
     608:	28 17       	cp	r18, r24
     60a:	39 07       	cpc	r19, r25
     60c:	09 f4       	brne	.+2      	; 0x610 <pc_command_processing+0x1a>
     60e:	1b c1       	rjmp	.+566    	; 0x846 <pc_command_processing+0x250>
	{
		printf("%s\n", rx_buff[front]); // rx_buff[front] ==> &rx_buff[front][0]
     610:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <front>
     614:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <front+0x1>
     618:	c0 e5       	ldi	r28, 0x50	; 80
     61a:	c2 9f       	mul	r28, r18
     61c:	c0 01       	movw	r24, r0
     61e:	c3 9f       	mul	r28, r19
     620:	90 0d       	add	r25, r0
     622:	11 24       	eor	r1, r1
     624:	8e 52       	subi	r24, 0x2E	; 46
     626:	9e 4f       	sbci	r25, 0xFE	; 254
     628:	69 d5       	rcall	.+2770   	; 0x10fc <puts>
		
		if (strncmp(rx_buff[front], "led_all_on", strlen("led_all_on")) == 0)
     62a:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <front>
     62e:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <front+0x1>
     632:	c2 9f       	mul	r28, r18
     634:	c0 01       	movw	r24, r0
     636:	c3 9f       	mul	r28, r19
     638:	90 0d       	add	r25, r0
     63a:	11 24       	eor	r1, r1
     63c:	4a e0       	ldi	r20, 0x0A	; 10
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	6e e1       	ldi	r22, 0x1E	; 30
     642:	71 e0       	ldi	r23, 0x01	; 1
     644:	8e 52       	subi	r24, 0x2E	; 46
     646:	9e 4f       	sbci	r25, 0xFE	; 254
     648:	38 d5       	rcall	.+2672   	; 0x10ba <strncmp>
     64a:	89 2b       	or	r24, r25
     64c:	59 f4       	brne	.+22     	; 0x664 <pc_command_processing+0x6e>
		{
			command_type = PC_COMMAND;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     656:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = LED_ALL_ON;
     65a:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <state+0x1>
     65e:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <state>
     662:	dd c0       	rjmp	.+442    	; 0x81e <pc_command_processing+0x228>
		}
		else if (strncmp(rx_buff[front], "led_all_off", strlen("led_all_off")) == 0)
     664:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <front>
     668:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <front+0x1>
     66c:	40 e5       	ldi	r20, 0x50	; 80
     66e:	42 9f       	mul	r20, r18
     670:	c0 01       	movw	r24, r0
     672:	43 9f       	mul	r20, r19
     674:	90 0d       	add	r25, r0
     676:	11 24       	eor	r1, r1
     678:	4b e0       	ldi	r20, 0x0B	; 11
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	69 e2       	ldi	r22, 0x29	; 41
     67e:	71 e0       	ldi	r23, 0x01	; 1
     680:	8e 52       	subi	r24, 0x2E	; 46
     682:	9e 4f       	sbci	r25, 0xFE	; 254
     684:	1a d5       	rcall	.+2612   	; 0x10ba <strncmp>
     686:	89 2b       	or	r24, r25
     688:	59 f4       	brne	.+22     	; 0x6a0 <pc_command_processing+0xaa>
		{
			command_type = PC_COMMAND;
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     692:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = LED_ALL_OFF;
     696:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     69a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     69e:	bf c0       	rjmp	.+382    	; 0x81e <pc_command_processing+0x228>
		}
		else if (strncmp(rx_buff[front], "shift_left_ledon", strlen("floweron")) == 0)
     6a0:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <front>
     6a4:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <front+0x1>
     6a8:	40 e5       	ldi	r20, 0x50	; 80
     6aa:	42 9f       	mul	r20, r18
     6ac:	c0 01       	movw	r24, r0
     6ae:	43 9f       	mul	r20, r19
     6b0:	90 0d       	add	r25, r0
     6b2:	11 24       	eor	r1, r1
     6b4:	48 e0       	ldi	r20, 0x08	; 8
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	65 e3       	ldi	r22, 0x35	; 53
     6ba:	71 e0       	ldi	r23, 0x01	; 1
     6bc:	8e 52       	subi	r24, 0x2E	; 46
     6be:	9e 4f       	sbci	r25, 0xFE	; 254
     6c0:	fc d4       	rcall	.+2552   	; 0x10ba <strncmp>
     6c2:	89 2b       	or	r24, r25
     6c4:	69 f4       	brne	.+26     	; 0x6e0 <pc_command_processing+0xea>
		{
			command_type = PC_COMMAND;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     6ce:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = SHIFT_LEFT_LEDON;
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     6da:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     6de:	9f c0       	rjmp	.+318    	; 0x81e <pc_command_processing+0x228>
		}
		else if (strncmp(rx_buff[front], "shift_right_ledon", strlen("floweroff")) == 0)
     6e0:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <front>
     6e4:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <front+0x1>
     6e8:	40 e5       	ldi	r20, 0x50	; 80
     6ea:	42 9f       	mul	r20, r18
     6ec:	c0 01       	movw	r24, r0
     6ee:	43 9f       	mul	r20, r19
     6f0:	90 0d       	add	r25, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	49 e0       	ldi	r20, 0x09	; 9
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	66 e4       	ldi	r22, 0x46	; 70
     6fa:	71 e0       	ldi	r23, 0x01	; 1
     6fc:	8e 52       	subi	r24, 0x2E	; 46
     6fe:	9e 4f       	sbci	r25, 0xFE	; 254
     700:	dc d4       	rcall	.+2488   	; 0x10ba <strncmp>
     702:	89 2b       	or	r24, r25
     704:	69 f4       	brne	.+26     	; 0x720 <pc_command_processing+0x12a>
		{
			command_type = PC_COMMAND;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     70e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = SHIFT_RIGHT_LEDON;
     712:	83 e0       	ldi	r24, 0x03	; 3
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     71a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     71e:	7f c0       	rjmp	.+254    	; 0x81e <pc_command_processing+0x228>
		}
		else if (strncmp(rx_buff[front], "shift_left_keep_ledon", strlen("shift_left_ledon")) == 0)
     720:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <front>
     724:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <front+0x1>
     728:	40 e5       	ldi	r20, 0x50	; 80
     72a:	42 9f       	mul	r20, r18
     72c:	c0 01       	movw	r24, r0
     72e:	43 9f       	mul	r20, r19
     730:	90 0d       	add	r25, r0
     732:	11 24       	eor	r1, r1
     734:	40 e1       	ldi	r20, 0x10	; 16
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	68 e5       	ldi	r22, 0x58	; 88
     73a:	71 e0       	ldi	r23, 0x01	; 1
     73c:	8e 52       	subi	r24, 0x2E	; 46
     73e:	9e 4f       	sbci	r25, 0xFE	; 254
     740:	bc d4       	rcall	.+2424   	; 0x10ba <strncmp>
     742:	89 2b       	or	r24, r25
     744:	69 f4       	brne	.+26     	; 0x760 <pc_command_processing+0x16a>
		{
			command_type = PC_COMMAND;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     74e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = SHIFT_LEFT_KEEP_LEDON;
     752:	84 e0       	ldi	r24, 0x04	; 4
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     75a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     75e:	5f c0       	rjmp	.+190    	; 0x81e <pc_command_processing+0x228>
		}
		else if (strncmp(rx_buff[front], "shift_right_keep_ledon", strlen("shift_right_ledon")) == 0)
     760:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <front>
     764:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <front+0x1>
     768:	40 e5       	ldi	r20, 0x50	; 80
     76a:	42 9f       	mul	r20, r18
     76c:	c0 01       	movw	r24, r0
     76e:	43 9f       	mul	r20, r19
     770:	90 0d       	add	r25, r0
     772:	11 24       	eor	r1, r1
     774:	41 e1       	ldi	r20, 0x11	; 17
     776:	50 e0       	ldi	r21, 0x00	; 0
     778:	6e e6       	ldi	r22, 0x6E	; 110
     77a:	71 e0       	ldi	r23, 0x01	; 1
     77c:	8e 52       	subi	r24, 0x2E	; 46
     77e:	9e 4f       	sbci	r25, 0xFE	; 254
     780:	9c d4       	rcall	.+2360   	; 0x10ba <strncmp>
     782:	89 2b       	or	r24, r25
     784:	69 f4       	brne	.+26     	; 0x7a0 <pc_command_processing+0x1aa>
		{
			command_type = PC_COMMAND;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     78e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = SHIFT_RIGHT_KEEP_LEDON;
     792:	85 e0       	ldi	r24, 0x05	; 5
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     79a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     79e:	3f c0       	rjmp	.+126    	; 0x81e <pc_command_processing+0x228>
		}
		else if (strncmp(rx_buff[front], "floweron", strlen("shift_left_keep_ledon")) == 0)
     7a0:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <front>
     7a4:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <front+0x1>
     7a8:	40 e5       	ldi	r20, 0x50	; 80
     7aa:	42 9f       	mul	r20, r18
     7ac:	c0 01       	movw	r24, r0
     7ae:	43 9f       	mul	r20, r19
     7b0:	90 0d       	add	r25, r0
     7b2:	11 24       	eor	r1, r1
     7b4:	45 e1       	ldi	r20, 0x15	; 21
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	65 e8       	ldi	r22, 0x85	; 133
     7ba:	71 e0       	ldi	r23, 0x01	; 1
     7bc:	8e 52       	subi	r24, 0x2E	; 46
     7be:	9e 4f       	sbci	r25, 0xFE	; 254
     7c0:	7c d4       	rcall	.+2296   	; 0x10ba <strncmp>
     7c2:	89 2b       	or	r24, r25
     7c4:	69 f4       	brne	.+26     	; 0x7e0 <pc_command_processing+0x1ea>
		{
			command_type = PC_COMMAND;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     7ce:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = FLOWERON;
     7d2:	86 e0       	ldi	r24, 0x06	; 6
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     7da:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     7de:	1f c0       	rjmp	.+62     	; 0x81e <pc_command_processing+0x228>
		}
		else if (strncmp(rx_buff[front], "floweroff", strlen("shift_right_keep_ledon")) == 0)
     7e0:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <front>
     7e4:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <front+0x1>
     7e8:	40 e5       	ldi	r20, 0x50	; 80
     7ea:	42 9f       	mul	r20, r18
     7ec:	c0 01       	movw	r24, r0
     7ee:	43 9f       	mul	r20, r19
     7f0:	90 0d       	add	r25, r0
     7f2:	11 24       	eor	r1, r1
     7f4:	46 e1       	ldi	r20, 0x16	; 22
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	6e e8       	ldi	r22, 0x8E	; 142
     7fa:	71 e0       	ldi	r23, 0x01	; 1
     7fc:	8e 52       	subi	r24, 0x2E	; 46
     7fe:	9e 4f       	sbci	r25, 0xFE	; 254
     800:	5c d4       	rcall	.+2232   	; 0x10ba <strncmp>
     802:	89 2b       	or	r24, r25
     804:	61 f4       	brne	.+24     	; 0x81e <pc_command_processing+0x228>
		{
			command_type = PC_COMMAND;
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     80e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = FLOWEROFF;
     812:	87 e0       	ldi	r24, 0x07	; 7
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     81a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
		}
		front++;
     81e:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <front>
     822:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <front+0x1>
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <front+0x1>
     82c:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <front>
		front %= COMMAND_NUMBER;
     830:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <front>
     834:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <front+0x1>
     838:	6a e0       	ldi	r22, 0x0A	; 10
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	17 d4       	rcall	.+2094   	; 0x106c <__divmodhi4>
     83e:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <front+0x1>
     842:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <front>
	}
	 if (command_type == PC_COMMAND)
     846:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <command_type>
     84a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <command_type+0x1>
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	61 f4       	brne	.+24     	; 0x86a <pc_command_processing+0x274>
	 {
		 (*fp[state])();
     852:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <state>
     856:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <state+0x1>
     85a:	ee 0f       	add	r30, r30
     85c:	ff 1f       	adc	r31, r31
     85e:	e0 50       	subi	r30, 0x00	; 0
     860:	ff 4f       	sbci	r31, 0xFF	; 255
     862:	01 90       	ld	r0, Z+
     864:	f0 81       	ld	r31, Z
     866:	e0 2d       	mov	r30, r0
     868:	09 95       	icall
	 }
	// !!!! queue full check하는 logic이 들어가야 한다.
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <__vector_30>:
void UART1_transmit(uint8_t data)
{
	while( !(UCSR1A & 1 << UDRE1) )   // 데이터가 전송 중이면 전송이 끝날떄 까지 기다린다. 
		;   // no operation NOP
	
	UDR1 = data;   // HW전송 register(UDR1)에 data를 쏴준다.  
     86e:	1f 92       	push	r1
     870:	0f 92       	push	r0
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	0f 92       	push	r0
     876:	11 24       	eor	r1, r1
     878:	0b b6       	in	r0, 0x3b	; 59
     87a:	0f 92       	push	r0
     87c:	2f 93       	push	r18
     87e:	3f 93       	push	r19
     880:	4f 93       	push	r20
     882:	5f 93       	push	r21
     884:	6f 93       	push	r22
     886:	7f 93       	push	r23
     888:	8f 93       	push	r24
     88a:	9f 93       	push	r25
     88c:	af 93       	push	r26
     88e:	bf 93       	push	r27
     890:	ef 93       	push	r30
     892:	ff 93       	push	r31
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	1f 92       	push	r1
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     8a2:	89 83       	std	Y+1, r24	; 0x01
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	8d 30       	cpi	r24, 0x0D	; 13
     8a8:	19 f0       	breq	.+6      	; 0x8b0 <__vector_30+0x42>
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	8a 30       	cpi	r24, 0x0A	; 10
     8ae:	61 f5       	brne	.+88     	; 0x908 <__vector_30+0x9a>
     8b0:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <rear1>
     8b4:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <rear1+0x1>
     8b8:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <i.1896>
     8bc:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <i.1896+0x1>
     8c0:	40 e5       	ldi	r20, 0x50	; 80
     8c2:	42 9f       	mul	r20, r18
     8c4:	f0 01       	movw	r30, r0
     8c6:	43 9f       	mul	r20, r19
     8c8:	f0 0d       	add	r31, r0
     8ca:	11 24       	eor	r1, r1
     8cc:	ee 50       	subi	r30, 0x0E	; 14
     8ce:	fb 4f       	sbci	r31, 0xFB	; 251
     8d0:	e8 0f       	add	r30, r24
     8d2:	f9 1f       	adc	r31, r25
     8d4:	10 82       	st	Z, r1
     8d6:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <i.1896+0x1>
     8da:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <i.1896>
     8de:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <rear1>
     8e2:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <rear1+0x1>
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <rear1+0x1>
     8ec:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <rear1>
     8f0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <rear1>
     8f4:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <rear1+0x1>
     8f8:	6a e0       	ldi	r22, 0x0A	; 10
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	b7 d3       	rcall	.+1902   	; 0x106c <__divmodhi4>
     8fe:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <rear1+0x1>
     902:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <rear1>
     906:	1c c0       	rjmp	.+56     	; 0x940 <__vector_30+0xd2>
     908:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <rear1>
     90c:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <rear1+0x1>
     910:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <i.1896>
     914:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <i.1896+0x1>
     918:	9c 01       	movw	r18, r24
     91a:	2f 5f       	subi	r18, 0xFF	; 255
     91c:	3f 4f       	sbci	r19, 0xFF	; 255
     91e:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <i.1896+0x1>
     922:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <i.1896>
     926:	49 81       	ldd	r20, Y+1	; 0x01
     928:	50 e5       	ldi	r21, 0x50	; 80
     92a:	56 9f       	mul	r21, r22
     92c:	90 01       	movw	r18, r0
     92e:	57 9f       	mul	r21, r23
     930:	30 0d       	add	r19, r0
     932:	11 24       	eor	r1, r1
     934:	2e 50       	subi	r18, 0x0E	; 14
     936:	3b 4f       	sbci	r19, 0xFB	; 251
     938:	f9 01       	movw	r30, r18
     93a:	e8 0f       	add	r30, r24
     93c:	f9 1f       	adc	r31, r25
     93e:	40 83       	st	Z, r20
     940:	0f 90       	pop	r0
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	ff 91       	pop	r31
     948:	ef 91       	pop	r30
     94a:	bf 91       	pop	r27
     94c:	af 91       	pop	r26
     94e:	9f 91       	pop	r25
     950:	8f 91       	pop	r24
     952:	7f 91       	pop	r23
     954:	6f 91       	pop	r22
     956:	5f 91       	pop	r21
     958:	4f 91       	pop	r20
     95a:	3f 91       	pop	r19
     95c:	2f 91       	pop	r18
     95e:	0f 90       	pop	r0
     960:	0b be       	out	0x3b, r0	; 59
     962:	0f 90       	pop	r0
     964:	0f be       	out	0x3f, r0	; 63
     966:	0f 90       	pop	r0
     968:	1f 90       	pop	r1
     96a:	18 95       	reti

0000096c <init_uart1>:
     96c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     970:	8f ec       	ldi	r24, 0xCF	; 207
     972:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     976:	eb e9       	ldi	r30, 0x9B	; 155
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	82 60       	ori	r24, 0x02	; 2
     97e:	80 83       	st	Z, r24
     980:	ed e9       	ldi	r30, 0x9D	; 157
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	86 60       	ori	r24, 0x06	; 6
     988:	80 83       	st	Z, r24
     98a:	ea e9       	ldi	r30, 0x9A	; 154
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	88 69       	ori	r24, 0x98	; 152
     992:	80 83       	st	Z, r24
     994:	08 95       	ret

00000996 <bt_command_processing>:
}


void bt_command_processing(void)
{
     996:	cf 93       	push	r28
	if (front1 != rear1) // data가 rx_buff에 존재한다. front와 rear 비교
     998:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <front1>
     99c:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <front1+0x1>
     9a0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <rear1>
     9a4:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <rear1+0x1>
     9a8:	28 17       	cp	r18, r24
     9aa:	39 07       	cpc	r19, r25
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <bt_command_processing+0x1a>
     9ae:	1b c1       	rjmp	.+566    	; 0xbe6 <bt_command_processing+0x250>
	{
		printf("%s\n", rx1_buff[front1]); // rx_buff[front] ==> &rx_buff[front][0]
     9b0:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <front1>
     9b4:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <front1+0x1>
     9b8:	c0 e5       	ldi	r28, 0x50	; 80
     9ba:	c2 9f       	mul	r28, r18
     9bc:	c0 01       	movw	r24, r0
     9be:	c3 9f       	mul	r28, r19
     9c0:	90 0d       	add	r25, r0
     9c2:	11 24       	eor	r1, r1
     9c4:	8e 50       	subi	r24, 0x0E	; 14
     9c6:	9b 4f       	sbci	r25, 0xFB	; 251
     9c8:	99 d3       	rcall	.+1842   	; 0x10fc <puts>
		
		if (strncmp(rx1_buff[front1], "led_all_on", strlen("led_all_on")) == 0)
     9ca:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <front1>
     9ce:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <front1+0x1>
     9d2:	c2 9f       	mul	r28, r18
     9d4:	c0 01       	movw	r24, r0
     9d6:	c3 9f       	mul	r28, r19
     9d8:	90 0d       	add	r25, r0
     9da:	11 24       	eor	r1, r1
     9dc:	4a e0       	ldi	r20, 0x0A	; 10
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	6e e1       	ldi	r22, 0x1E	; 30
     9e2:	71 e0       	ldi	r23, 0x01	; 1
     9e4:	8e 50       	subi	r24, 0x0E	; 14
     9e6:	9b 4f       	sbci	r25, 0xFB	; 251
     9e8:	68 d3       	rcall	.+1744   	; 0x10ba <strncmp>
     9ea:	89 2b       	or	r24, r25
     9ec:	59 f4       	brne	.+22     	; 0xa04 <bt_command_processing+0x6e>
		{
			command_type = BT_COMMAND;
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     9f6:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = LED_ALL_ON;
     9fa:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <state+0x1>
     9fe:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <state>
     a02:	dd c0       	rjmp	.+442    	; 0xbbe <bt_command_processing+0x228>
		}
		else if (strncmp(rx1_buff[front1], "led_all_off", strlen("led_all_off")) == 0)
     a04:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <front1>
     a08:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <front1+0x1>
     a0c:	40 e5       	ldi	r20, 0x50	; 80
     a0e:	42 9f       	mul	r20, r18
     a10:	c0 01       	movw	r24, r0
     a12:	43 9f       	mul	r20, r19
     a14:	90 0d       	add	r25, r0
     a16:	11 24       	eor	r1, r1
     a18:	4b e0       	ldi	r20, 0x0B	; 11
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	69 e2       	ldi	r22, 0x29	; 41
     a1e:	71 e0       	ldi	r23, 0x01	; 1
     a20:	8e 50       	subi	r24, 0x0E	; 14
     a22:	9b 4f       	sbci	r25, 0xFB	; 251
     a24:	4a d3       	rcall	.+1684   	; 0x10ba <strncmp>
     a26:	89 2b       	or	r24, r25
     a28:	69 f4       	brne	.+26     	; 0xa44 <bt_command_processing+0xae>
		{
			command_type = BT_COMMAND;
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     a32:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = LED_ALL_OFF;
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     a3e:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     a42:	bd c0       	rjmp	.+378    	; 0xbbe <bt_command_processing+0x228>
		}
		else if (strncmp(rx1_buff[front1], "shift_left_ledon", strlen("floweron")) == 0)
     a44:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <front1>
     a48:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <front1+0x1>
     a4c:	40 e5       	ldi	r20, 0x50	; 80
     a4e:	42 9f       	mul	r20, r18
     a50:	c0 01       	movw	r24, r0
     a52:	43 9f       	mul	r20, r19
     a54:	90 0d       	add	r25, r0
     a56:	11 24       	eor	r1, r1
     a58:	48 e0       	ldi	r20, 0x08	; 8
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	65 e3       	ldi	r22, 0x35	; 53
     a5e:	71 e0       	ldi	r23, 0x01	; 1
     a60:	8e 50       	subi	r24, 0x0E	; 14
     a62:	9b 4f       	sbci	r25, 0xFB	; 251
     a64:	2a d3       	rcall	.+1620   	; 0x10ba <strncmp>
     a66:	89 2b       	or	r24, r25
     a68:	59 f4       	brne	.+22     	; 0xa80 <bt_command_processing+0xea>
		{
			command_type = BT_COMMAND;
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     a72:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = SHIFT_LEFT_LEDON;
     a76:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     a7a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     a7e:	9f c0       	rjmp	.+318    	; 0xbbe <bt_command_processing+0x228>
		}
		else if (strncmp(rx1_buff[front1], "shift_right_ledon", strlen("floweroff")) == 0)
     a80:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <front1>
     a84:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <front1+0x1>
     a88:	40 e5       	ldi	r20, 0x50	; 80
     a8a:	42 9f       	mul	r20, r18
     a8c:	c0 01       	movw	r24, r0
     a8e:	43 9f       	mul	r20, r19
     a90:	90 0d       	add	r25, r0
     a92:	11 24       	eor	r1, r1
     a94:	49 e0       	ldi	r20, 0x09	; 9
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	66 e4       	ldi	r22, 0x46	; 70
     a9a:	71 e0       	ldi	r23, 0x01	; 1
     a9c:	8e 50       	subi	r24, 0x0E	; 14
     a9e:	9b 4f       	sbci	r25, 0xFB	; 251
     aa0:	0c d3       	rcall	.+1560   	; 0x10ba <strncmp>
     aa2:	89 2b       	or	r24, r25
     aa4:	69 f4       	brne	.+26     	; 0xac0 <bt_command_processing+0x12a>
		{
			command_type = BT_COMMAND;
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     aae:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = SHIFT_RIGHT_LEDON;
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     aba:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     abe:	7f c0       	rjmp	.+254    	; 0xbbe <bt_command_processing+0x228>
		}
		else if (strncmp(rx1_buff[front1], "shift_left_keep_ledon", strlen("shift_left_ledon")) == 0)
     ac0:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <front1>
     ac4:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <front1+0x1>
     ac8:	40 e5       	ldi	r20, 0x50	; 80
     aca:	42 9f       	mul	r20, r18
     acc:	c0 01       	movw	r24, r0
     ace:	43 9f       	mul	r20, r19
     ad0:	90 0d       	add	r25, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	40 e1       	ldi	r20, 0x10	; 16
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	68 e5       	ldi	r22, 0x58	; 88
     ada:	71 e0       	ldi	r23, 0x01	; 1
     adc:	8e 50       	subi	r24, 0x0E	; 14
     ade:	9b 4f       	sbci	r25, 0xFB	; 251
     ae0:	ec d2       	rcall	.+1496   	; 0x10ba <strncmp>
     ae2:	89 2b       	or	r24, r25
     ae4:	69 f4       	brne	.+26     	; 0xb00 <bt_command_processing+0x16a>
		{
			command_type = BT_COMMAND;
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     aee:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = SHIFT_LEFT_KEEP_LEDON;
     af2:	84 e0       	ldi	r24, 0x04	; 4
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     afa:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     afe:	5f c0       	rjmp	.+190    	; 0xbbe <bt_command_processing+0x228>
		}
		else if (strncmp(rx1_buff[front1], "shift_right_keep_ledon", strlen("shift_right_ledon")) == 0)
     b00:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <front1>
     b04:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <front1+0x1>
     b08:	40 e5       	ldi	r20, 0x50	; 80
     b0a:	42 9f       	mul	r20, r18
     b0c:	c0 01       	movw	r24, r0
     b0e:	43 9f       	mul	r20, r19
     b10:	90 0d       	add	r25, r0
     b12:	11 24       	eor	r1, r1
     b14:	41 e1       	ldi	r20, 0x11	; 17
     b16:	50 e0       	ldi	r21, 0x00	; 0
     b18:	6e e6       	ldi	r22, 0x6E	; 110
     b1a:	71 e0       	ldi	r23, 0x01	; 1
     b1c:	8e 50       	subi	r24, 0x0E	; 14
     b1e:	9b 4f       	sbci	r25, 0xFB	; 251
     b20:	cc d2       	rcall	.+1432   	; 0x10ba <strncmp>
     b22:	89 2b       	or	r24, r25
     b24:	69 f4       	brne	.+26     	; 0xb40 <bt_command_processing+0x1aa>
		{
			command_type = BT_COMMAND;
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     b2e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = SHIFT_RIGHT_KEEP_LEDON;
     b32:	85 e0       	ldi	r24, 0x05	; 5
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     b3a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     b3e:	3f c0       	rjmp	.+126    	; 0xbbe <bt_command_processing+0x228>
		}
		else if (strncmp(rx1_buff[front1], "floweron", strlen("shift_left_keep_ledon")) == 0)
     b40:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <front1>
     b44:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <front1+0x1>
     b48:	40 e5       	ldi	r20, 0x50	; 80
     b4a:	42 9f       	mul	r20, r18
     b4c:	c0 01       	movw	r24, r0
     b4e:	43 9f       	mul	r20, r19
     b50:	90 0d       	add	r25, r0
     b52:	11 24       	eor	r1, r1
     b54:	45 e1       	ldi	r20, 0x15	; 21
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	65 e8       	ldi	r22, 0x85	; 133
     b5a:	71 e0       	ldi	r23, 0x01	; 1
     b5c:	8e 50       	subi	r24, 0x0E	; 14
     b5e:	9b 4f       	sbci	r25, 0xFB	; 251
     b60:	ac d2       	rcall	.+1368   	; 0x10ba <strncmp>
     b62:	89 2b       	or	r24, r25
     b64:	69 f4       	brne	.+26     	; 0xb80 <bt_command_processing+0x1ea>
		{
			command_type = BT_COMMAND;
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     b6e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = FLOWERON;
     b72:	86 e0       	ldi	r24, 0x06	; 6
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     b7a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
     b7e:	1f c0       	rjmp	.+62     	; 0xbbe <bt_command_processing+0x228>
		}
		else if (strncmp(rx1_buff[front1], "floweroff", strlen("shift_right_keep_ledon")) == 0)
     b80:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <front1>
     b84:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <front1+0x1>
     b88:	40 e5       	ldi	r20, 0x50	; 80
     b8a:	42 9f       	mul	r20, r18
     b8c:	c0 01       	movw	r24, r0
     b8e:	43 9f       	mul	r20, r19
     b90:	90 0d       	add	r25, r0
     b92:	11 24       	eor	r1, r1
     b94:	46 e1       	ldi	r20, 0x16	; 22
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	6e e8       	ldi	r22, 0x8E	; 142
     b9a:	71 e0       	ldi	r23, 0x01	; 1
     b9c:	8e 50       	subi	r24, 0x0E	; 14
     b9e:	9b 4f       	sbci	r25, 0xFB	; 251
     ba0:	8c d2       	rcall	.+1304   	; 0x10ba <strncmp>
     ba2:	89 2b       	or	r24, r25
     ba4:	61 f4       	brne	.+24     	; 0xbbe <bt_command_processing+0x228>
		{
			command_type = BT_COMMAND;
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <command_type+0x1>
     bae:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <command_type>
			state = FLOWEROFF;
     bb2:	87 e0       	ldi	r24, 0x07	; 7
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <state+0x1>
     bba:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <state>
		}
		front1++;
     bbe:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <front1>
     bc2:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <front1+0x1>
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <front1+0x1>
     bcc:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <front1>
		front1 %= COMMAND_NUMBER;
     bd0:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <front1>
     bd4:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <front1+0x1>
     bd8:	6a e0       	ldi	r22, 0x0A	; 10
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	47 d2       	rcall	.+1166   	; 0x106c <__divmodhi4>
     bde:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <front1+0x1>
     be2:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <front1>
	}
	 if (command_type == BT_COMMAND)
     be6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <command_type>
     bea:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <command_type+0x1>
     bee:	02 97       	sbiw	r24, 0x02	; 2
     bf0:	61 f4       	brne	.+24     	; 0xc0a <bt_command_processing+0x274>
	 {
		 (*fp[state])();
     bf2:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <state>
     bf6:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <state+0x1>
     bfa:	ee 0f       	add	r30, r30
     bfc:	ff 1f       	adc	r31, r31
     bfe:	e0 50       	subi	r30, 0x00	; 0
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	01 90       	ld	r0, Z+
     c04:	f0 81       	ld	r31, Z
     c06:	e0 2d       	mov	r30, r0
     c08:	09 95       	icall
	 }
	// !!!! queue full check하는 logic이 들어가야 한다.
     c0a:	cf 91       	pop	r28
     c0c:	08 95       	ret

00000c0e <__vector_5>:
char scm[50];

// PE4 : 외부 INT4 초음파 센서 상승, 하강 edge 둘 다 이곳으로 들어온다.
//결국은 상승edge에서 1번, 하강edge에서 1번씩 이곳으로 들어온다.
ISR(INT4_vect)
{
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	0b b6       	in	r0, 0x3b	; 59
     c1a:	0f 92       	push	r0
     c1c:	2f 93       	push	r18
     c1e:	3f 93       	push	r19
     c20:	4f 93       	push	r20
     c22:	5f 93       	push	r21
     c24:	6f 93       	push	r22
     c26:	7f 93       	push	r23
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	af 93       	push	r26
     c2e:	bf 93       	push	r27
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
	// 1. 상승 edge
	if (ECHO_PIN & (1 << ECHO))
     c34:	0c 9b       	sbis	0x01, 4	; 1
     c36:	03 c0       	rjmp	.+6      	; 0xc3e <__vector_5+0x30>
	{
		TCNT1 = 0;
     c38:	1d bc       	out	0x2d, r1	; 45
     c3a:	1c bc       	out	0x2c, r1	; 44
     c3c:	31 c0       	rjmp	.+98     	; 0xca0 <__vector_5+0x92>
	}
	// 2. 하강 edge
	else
	{
		// ECHO 핀에 들어온 펄스 길이를 us로 환산
		ultrasonic_distance = 1000000.0 * TCNT1 * 1024 / F_CPU;
     c3e:	6c b5       	in	r22, 0x2c	; 44
     c40:	7d b5       	in	r23, 0x2d	; 45
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	21 d1       	rcall	.+578    	; 0xe8a <__floatunsisf>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	34 e2       	ldi	r19, 0x24	; 36
     c4c:	44 e7       	ldi	r20, 0x74	; 116
     c4e:	59 e4       	ldi	r21, 0x49	; 73
     c50:	aa d1       	rcall	.+852    	; 0xfa6 <__mulsf3>
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	40 e8       	ldi	r20, 0x80	; 128
     c58:	54 e4       	ldi	r21, 0x44	; 68
     c5a:	a5 d1       	rcall	.+842    	; 0xfa6 <__mulsf3>
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	34 e2       	ldi	r19, 0x24	; 36
     c60:	44 e7       	ldi	r20, 0x74	; 116
     c62:	5b e4       	ldi	r21, 0x4B	; 75
     c64:	79 d0       	rcall	.+242    	; 0xd58 <__divsf3>
     c66:	e0 d0       	rcall	.+448    	; 0xe28 <__fixsfsi>
     c68:	70 93 d1 01 	sts	0x01D1, r23	; 0x8001d1 <ultrasonic_distance+0x1>
     c6c:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <ultrasonic_distance>
		
		// 예) TCNT1에 10이 들어 있다고 가정하자
		// 15.625khz의 1주기가 64us이다.
		// 64us * 10 == 640us
		// 640us / 58us (58us는 초음파 센서에서 1cm이동하는데 58us가 소요됨). ==> 11cm 
		sprintf(scm, "dis : %dcm\n", ultrasonic_distance / 58); // sprintf는 버퍼에 찍는 것
     c70:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <ultrasonic_distance>
     c74:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <ultrasonic_distance+0x1>
     c78:	6a e3       	ldi	r22, 0x3A	; 58
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	f7 d1       	rcall	.+1006   	; 0x106c <__divmodhi4>
     c7e:	7f 93       	push	r23
     c80:	6f 93       	push	r22
     c82:	88 e9       	ldi	r24, 0x98	; 152
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	9f 93       	push	r25
     c88:	8f 93       	push	r24
     c8a:	82 e1       	ldi	r24, 0x12	; 18
     c8c:	98 e0       	ldi	r25, 0x08	; 8
     c8e:	9f 93       	push	r25
     c90:	8f 93       	push	r24
     c92:	64 d2       	rcall	.+1224   	; 0x115c <sprintf>
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
	}
}
     ca0:	ff 91       	pop	r31
     ca2:	ef 91       	pop	r30
     ca4:	bf 91       	pop	r27
     ca6:	af 91       	pop	r26
     ca8:	9f 91       	pop	r25
     caa:	8f 91       	pop	r24
     cac:	7f 91       	pop	r23
     cae:	6f 91       	pop	r22
     cb0:	5f 91       	pop	r21
     cb2:	4f 91       	pop	r20
     cb4:	3f 91       	pop	r19
     cb6:	2f 91       	pop	r18
     cb8:	0f 90       	pop	r0
     cba:	0b be       	out	0x3b, r0	; 59
     cbc:	0f 90       	pop	r0
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	0f 90       	pop	r0
     cc2:	1f 90       	pop	r1
     cc4:	18 95       	reti

00000cc6 <init_ultrasonic>:

void init_ultrasonic()
{
	TRIG_DDR |= 1 << TRIG; // output mode로 설정
     cc6:	e4 e6       	ldi	r30, 0x64	; 100
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	80 61       	ori	r24, 0x10	; 16
     cce:	80 83       	st	Z, r24
	ECHO_DDR &= ~(1 << ECHO); // input mode로 설정
     cd0:	82 b1       	in	r24, 0x02	; 2
     cd2:	8f 7e       	andi	r24, 0xEF	; 239
     cd4:	82 b9       	out	0x02, r24	; 2
	
	// 0 1 : 상승, 하강 edge에 둘 다 INT를 띄우도록 설정
	// INT0~3은 EICRA, INT4~7은 EICRB 레지스터
	EICRB |= 0 << ISC41 | 1 << ISC40; // INT4니까 EICRB에서 ISC41, 40
     cd6:	8a b7       	in	r24, 0x3a	; 58
     cd8:	81 60       	ori	r24, 0x01	; 1
     cda:	8a bf       	out	0x3a, r24	; 58
	
	// 16bit timer1을 설정해서 사용 16비트는 0~65535(0xffff)가 최대
	// 16Mhz를 1024로 분주 16000000/1024 --> 15625hz --> 15.625khz
	// 1주기 (1개의 펄스 소요시간) 1/15625 = 0.000064sec = 64us	
	TCCR1B |=  1 << CS12 | 1 << CS10; // 1024로 분주
     cdc:	8e b5       	in	r24, 0x2e	; 46
     cde:	85 60       	ori	r24, 0x05	; 5
     ce0:	8e bd       	out	0x2e, r24	; 46
	EIMSK |= 1 << INT4; // 외부 인터럽트4번 (ECHO) 사용
     ce2:	89 b7       	in	r24, 0x39	; 57
     ce4:	80 61       	ori	r24, 0x10	; 16
     ce6:	89 bf       	out	0x39, r24	; 57
     ce8:	08 95       	ret

00000cea <ultrasonic_trigger>:
}

void ultrasonic_trigger()
{
	TRIG_PORT &= ~(1 << TRIG); // 해당되는 포트만 LOW로 만듦
     cea:	e5 e6       	ldi	r30, 0x65	; 101
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	8f 7e       	andi	r24, 0xEF	; 239
     cf2:	80 83       	st	Z, r24
     cf4:	85 e0       	ldi	r24, 0x05	; 5
     cf6:	8a 95       	dec	r24
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <ultrasonic_trigger+0xc>
     cfa:	00 00       	nop
	_delay_us(1);
	TRIG_PORT |= 1 << TRIG; // HIGH
     cfc:	80 81       	ld	r24, Z
     cfe:	80 61       	ori	r24, 0x10	; 16
     d00:	80 83       	st	Z, r24
     d02:	80 e5       	ldi	r24, 0x50	; 80
     d04:	8a 95       	dec	r24
     d06:	f1 f7       	brne	.-4      	; 0xd04 <ultrasonic_trigger+0x1a>
	_delay_us(15); // 규격에는 10us인데 reduance
	TRIG_PORT &= ~(1 << TRIG); // LOW
     d08:	80 81       	ld	r24, Z
     d0a:	8f 7e       	andi	r24, 0xEF	; 239
     d0c:	80 83       	st	Z, r24
     d0e:	08 95       	ret

00000d10 <ultrasonic_distance_check>:
}

void ultrasonic_distance_check()
{
	if (ultrasonic_check_timer >= 1000) // 1초가 되면
     d10:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <ultrasonic_check_timer>
     d14:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <ultrasonic_check_timer+0x1>
     d18:	a0 91 ba 01 	lds	r26, 0x01BA	; 0x8001ba <ultrasonic_check_timer+0x2>
     d1c:	b0 91 bb 01 	lds	r27, 0x01BB	; 0x8001bb <ultrasonic_check_timer+0x3>
     d20:	88 3e       	cpi	r24, 0xE8	; 232
     d22:	93 40       	sbci	r25, 0x03	; 3
     d24:	a1 05       	cpc	r26, r1
     d26:	b1 05       	cpc	r27, r1
     d28:	b0 f0       	brcs	.+44     	; 0xd56 <ultrasonic_distance_check+0x46>
	{
		ultrasonic_check_timer = 0;
     d2a:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <ultrasonic_check_timer>
     d2e:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <ultrasonic_check_timer+0x1>
     d32:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <ultrasonic_check_timer+0x2>
     d36:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <ultrasonic_check_timer+0x3>
		printf("%s", scm);
     d3a:	82 e1       	ldi	r24, 0x12	; 18
     d3c:	98 e0       	ldi	r25, 0x08	; 8
     d3e:	9f 93       	push	r25
     d40:	8f 93       	push	r24
     d42:	84 ea       	ldi	r24, 0xA4	; 164
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	9f 93       	push	r25
     d48:	8f 93       	push	r24
     d4a:	c5 d1       	rcall	.+906    	; 0x10d6 <printf>
		ultrasonic_trigger();
     d4c:	ce df       	rcall	.-100    	; 0xcea <ultrasonic_trigger>
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	08 95       	ret

00000d58 <__divsf3>:
     d58:	0c d0       	rcall	.+24     	; 0xd72 <__divsf3x>
     d5a:	eb c0       	rjmp	.+470    	; 0xf32 <__fp_round>
     d5c:	e3 d0       	rcall	.+454    	; 0xf24 <__fp_pscB>
     d5e:	40 f0       	brcs	.+16     	; 0xd70 <__divsf3+0x18>
     d60:	da d0       	rcall	.+436    	; 0xf16 <__fp_pscA>
     d62:	30 f0       	brcs	.+12     	; 0xd70 <__divsf3+0x18>
     d64:	21 f4       	brne	.+8      	; 0xd6e <__divsf3+0x16>
     d66:	5f 3f       	cpi	r21, 0xFF	; 255
     d68:	19 f0       	breq	.+6      	; 0xd70 <__divsf3+0x18>
     d6a:	cc c0       	rjmp	.+408    	; 0xf04 <__fp_inf>
     d6c:	51 11       	cpse	r21, r1
     d6e:	15 c1       	rjmp	.+554    	; 0xf9a <__fp_szero>
     d70:	cf c0       	rjmp	.+414    	; 0xf10 <__fp_nan>

00000d72 <__divsf3x>:
     d72:	f0 d0       	rcall	.+480    	; 0xf54 <__fp_split3>
     d74:	98 f3       	brcs	.-26     	; 0xd5c <__divsf3+0x4>

00000d76 <__divsf3_pse>:
     d76:	99 23       	and	r25, r25
     d78:	c9 f3       	breq	.-14     	; 0xd6c <__divsf3+0x14>
     d7a:	55 23       	and	r21, r21
     d7c:	b1 f3       	breq	.-20     	; 0xd6a <__divsf3+0x12>
     d7e:	95 1b       	sub	r25, r21
     d80:	55 0b       	sbc	r21, r21
     d82:	bb 27       	eor	r27, r27
     d84:	aa 27       	eor	r26, r26
     d86:	62 17       	cp	r22, r18
     d88:	73 07       	cpc	r23, r19
     d8a:	84 07       	cpc	r24, r20
     d8c:	38 f0       	brcs	.+14     	; 0xd9c <__divsf3_pse+0x26>
     d8e:	9f 5f       	subi	r25, 0xFF	; 255
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	22 0f       	add	r18, r18
     d94:	33 1f       	adc	r19, r19
     d96:	44 1f       	adc	r20, r20
     d98:	aa 1f       	adc	r26, r26
     d9a:	a9 f3       	breq	.-22     	; 0xd86 <__divsf3_pse+0x10>
     d9c:	33 d0       	rcall	.+102    	; 0xe04 <__divsf3_pse+0x8e>
     d9e:	0e 2e       	mov	r0, r30
     da0:	3a f0       	brmi	.+14     	; 0xdb0 <__divsf3_pse+0x3a>
     da2:	e0 e8       	ldi	r30, 0x80	; 128
     da4:	30 d0       	rcall	.+96     	; 0xe06 <__divsf3_pse+0x90>
     da6:	91 50       	subi	r25, 0x01	; 1
     da8:	50 40       	sbci	r21, 0x00	; 0
     daa:	e6 95       	lsr	r30
     dac:	00 1c       	adc	r0, r0
     dae:	ca f7       	brpl	.-14     	; 0xda2 <__divsf3_pse+0x2c>
     db0:	29 d0       	rcall	.+82     	; 0xe04 <__divsf3_pse+0x8e>
     db2:	fe 2f       	mov	r31, r30
     db4:	27 d0       	rcall	.+78     	; 0xe04 <__divsf3_pse+0x8e>
     db6:	66 0f       	add	r22, r22
     db8:	77 1f       	adc	r23, r23
     dba:	88 1f       	adc	r24, r24
     dbc:	bb 1f       	adc	r27, r27
     dbe:	26 17       	cp	r18, r22
     dc0:	37 07       	cpc	r19, r23
     dc2:	48 07       	cpc	r20, r24
     dc4:	ab 07       	cpc	r26, r27
     dc6:	b0 e8       	ldi	r27, 0x80	; 128
     dc8:	09 f0       	breq	.+2      	; 0xdcc <__divsf3_pse+0x56>
     dca:	bb 0b       	sbc	r27, r27
     dcc:	80 2d       	mov	r24, r0
     dce:	bf 01       	movw	r22, r30
     dd0:	ff 27       	eor	r31, r31
     dd2:	93 58       	subi	r25, 0x83	; 131
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	2a f0       	brmi	.+10     	; 0xde2 <__divsf3_pse+0x6c>
     dd8:	9e 3f       	cpi	r25, 0xFE	; 254
     dda:	51 05       	cpc	r21, r1
     ddc:	68 f0       	brcs	.+26     	; 0xdf8 <__divsf3_pse+0x82>
     dde:	92 c0       	rjmp	.+292    	; 0xf04 <__fp_inf>
     de0:	dc c0       	rjmp	.+440    	; 0xf9a <__fp_szero>
     de2:	5f 3f       	cpi	r21, 0xFF	; 255
     de4:	ec f3       	brlt	.-6      	; 0xde0 <__divsf3_pse+0x6a>
     de6:	98 3e       	cpi	r25, 0xE8	; 232
     de8:	dc f3       	brlt	.-10     	; 0xde0 <__divsf3_pse+0x6a>
     dea:	86 95       	lsr	r24
     dec:	77 95       	ror	r23
     dee:	67 95       	ror	r22
     df0:	b7 95       	ror	r27
     df2:	f7 95       	ror	r31
     df4:	9f 5f       	subi	r25, 0xFF	; 255
     df6:	c9 f7       	brne	.-14     	; 0xdea <__divsf3_pse+0x74>
     df8:	88 0f       	add	r24, r24
     dfa:	91 1d       	adc	r25, r1
     dfc:	96 95       	lsr	r25
     dfe:	87 95       	ror	r24
     e00:	97 f9       	bld	r25, 7
     e02:	08 95       	ret
     e04:	e1 e0       	ldi	r30, 0x01	; 1
     e06:	66 0f       	add	r22, r22
     e08:	77 1f       	adc	r23, r23
     e0a:	88 1f       	adc	r24, r24
     e0c:	bb 1f       	adc	r27, r27
     e0e:	62 17       	cp	r22, r18
     e10:	73 07       	cpc	r23, r19
     e12:	84 07       	cpc	r24, r20
     e14:	ba 07       	cpc	r27, r26
     e16:	20 f0       	brcs	.+8      	; 0xe20 <__divsf3_pse+0xaa>
     e18:	62 1b       	sub	r22, r18
     e1a:	73 0b       	sbc	r23, r19
     e1c:	84 0b       	sbc	r24, r20
     e1e:	ba 0b       	sbc	r27, r26
     e20:	ee 1f       	adc	r30, r30
     e22:	88 f7       	brcc	.-30     	; 0xe06 <__divsf3_pse+0x90>
     e24:	e0 95       	com	r30
     e26:	08 95       	ret

00000e28 <__fixsfsi>:
     e28:	04 d0       	rcall	.+8      	; 0xe32 <__fixunssfsi>
     e2a:	68 94       	set
     e2c:	b1 11       	cpse	r27, r1
     e2e:	b5 c0       	rjmp	.+362    	; 0xf9a <__fp_szero>
     e30:	08 95       	ret

00000e32 <__fixunssfsi>:
     e32:	98 d0       	rcall	.+304    	; 0xf64 <__fp_splitA>
     e34:	88 f0       	brcs	.+34     	; 0xe58 <__fixunssfsi+0x26>
     e36:	9f 57       	subi	r25, 0x7F	; 127
     e38:	90 f0       	brcs	.+36     	; 0xe5e <__fixunssfsi+0x2c>
     e3a:	b9 2f       	mov	r27, r25
     e3c:	99 27       	eor	r25, r25
     e3e:	b7 51       	subi	r27, 0x17	; 23
     e40:	a0 f0       	brcs	.+40     	; 0xe6a <__fixunssfsi+0x38>
     e42:	d1 f0       	breq	.+52     	; 0xe78 <__fixunssfsi+0x46>
     e44:	66 0f       	add	r22, r22
     e46:	77 1f       	adc	r23, r23
     e48:	88 1f       	adc	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	1a f0       	brmi	.+6      	; 0xe54 <__fixunssfsi+0x22>
     e4e:	ba 95       	dec	r27
     e50:	c9 f7       	brne	.-14     	; 0xe44 <__fixunssfsi+0x12>
     e52:	12 c0       	rjmp	.+36     	; 0xe78 <__fixunssfsi+0x46>
     e54:	b1 30       	cpi	r27, 0x01	; 1
     e56:	81 f0       	breq	.+32     	; 0xe78 <__fixunssfsi+0x46>
     e58:	9f d0       	rcall	.+318    	; 0xf98 <__fp_zero>
     e5a:	b1 e0       	ldi	r27, 0x01	; 1
     e5c:	08 95       	ret
     e5e:	9c c0       	rjmp	.+312    	; 0xf98 <__fp_zero>
     e60:	67 2f       	mov	r22, r23
     e62:	78 2f       	mov	r23, r24
     e64:	88 27       	eor	r24, r24
     e66:	b8 5f       	subi	r27, 0xF8	; 248
     e68:	39 f0       	breq	.+14     	; 0xe78 <__fixunssfsi+0x46>
     e6a:	b9 3f       	cpi	r27, 0xF9	; 249
     e6c:	cc f3       	brlt	.-14     	; 0xe60 <__fixunssfsi+0x2e>
     e6e:	86 95       	lsr	r24
     e70:	77 95       	ror	r23
     e72:	67 95       	ror	r22
     e74:	b3 95       	inc	r27
     e76:	d9 f7       	brne	.-10     	; 0xe6e <__fixunssfsi+0x3c>
     e78:	3e f4       	brtc	.+14     	; 0xe88 <__fixunssfsi+0x56>
     e7a:	90 95       	com	r25
     e7c:	80 95       	com	r24
     e7e:	70 95       	com	r23
     e80:	61 95       	neg	r22
     e82:	7f 4f       	sbci	r23, 0xFF	; 255
     e84:	8f 4f       	sbci	r24, 0xFF	; 255
     e86:	9f 4f       	sbci	r25, 0xFF	; 255
     e88:	08 95       	ret

00000e8a <__floatunsisf>:
     e8a:	e8 94       	clt
     e8c:	09 c0       	rjmp	.+18     	; 0xea0 <__floatsisf+0x12>

00000e8e <__floatsisf>:
     e8e:	97 fb       	bst	r25, 7
     e90:	3e f4       	brtc	.+14     	; 0xea0 <__floatsisf+0x12>
     e92:	90 95       	com	r25
     e94:	80 95       	com	r24
     e96:	70 95       	com	r23
     e98:	61 95       	neg	r22
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	8f 4f       	sbci	r24, 0xFF	; 255
     e9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ea0:	99 23       	and	r25, r25
     ea2:	a9 f0       	breq	.+42     	; 0xece <__floatsisf+0x40>
     ea4:	f9 2f       	mov	r31, r25
     ea6:	96 e9       	ldi	r25, 0x96	; 150
     ea8:	bb 27       	eor	r27, r27
     eaa:	93 95       	inc	r25
     eac:	f6 95       	lsr	r31
     eae:	87 95       	ror	r24
     eb0:	77 95       	ror	r23
     eb2:	67 95       	ror	r22
     eb4:	b7 95       	ror	r27
     eb6:	f1 11       	cpse	r31, r1
     eb8:	f8 cf       	rjmp	.-16     	; 0xeaa <__floatsisf+0x1c>
     eba:	fa f4       	brpl	.+62     	; 0xefa <__floatsisf+0x6c>
     ebc:	bb 0f       	add	r27, r27
     ebe:	11 f4       	brne	.+4      	; 0xec4 <__floatsisf+0x36>
     ec0:	60 ff       	sbrs	r22, 0
     ec2:	1b c0       	rjmp	.+54     	; 0xefa <__floatsisf+0x6c>
     ec4:	6f 5f       	subi	r22, 0xFF	; 255
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	8f 4f       	sbci	r24, 0xFF	; 255
     eca:	9f 4f       	sbci	r25, 0xFF	; 255
     ecc:	16 c0       	rjmp	.+44     	; 0xefa <__floatsisf+0x6c>
     ece:	88 23       	and	r24, r24
     ed0:	11 f0       	breq	.+4      	; 0xed6 <__floatsisf+0x48>
     ed2:	96 e9       	ldi	r25, 0x96	; 150
     ed4:	11 c0       	rjmp	.+34     	; 0xef8 <__floatsisf+0x6a>
     ed6:	77 23       	and	r23, r23
     ed8:	21 f0       	breq	.+8      	; 0xee2 <__floatsisf+0x54>
     eda:	9e e8       	ldi	r25, 0x8E	; 142
     edc:	87 2f       	mov	r24, r23
     ede:	76 2f       	mov	r23, r22
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__floatsisf+0x5e>
     ee2:	66 23       	and	r22, r22
     ee4:	71 f0       	breq	.+28     	; 0xf02 <__floatsisf+0x74>
     ee6:	96 e8       	ldi	r25, 0x86	; 134
     ee8:	86 2f       	mov	r24, r22
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	2a f0       	brmi	.+10     	; 0xefa <__floatsisf+0x6c>
     ef0:	9a 95       	dec	r25
     ef2:	66 0f       	add	r22, r22
     ef4:	77 1f       	adc	r23, r23
     ef6:	88 1f       	adc	r24, r24
     ef8:	da f7       	brpl	.-10     	; 0xef0 <__floatsisf+0x62>
     efa:	88 0f       	add	r24, r24
     efc:	96 95       	lsr	r25
     efe:	87 95       	ror	r24
     f00:	97 f9       	bld	r25, 7
     f02:	08 95       	ret

00000f04 <__fp_inf>:
     f04:	97 f9       	bld	r25, 7
     f06:	9f 67       	ori	r25, 0x7F	; 127
     f08:	80 e8       	ldi	r24, 0x80	; 128
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	08 95       	ret

00000f10 <__fp_nan>:
     f10:	9f ef       	ldi	r25, 0xFF	; 255
     f12:	80 ec       	ldi	r24, 0xC0	; 192
     f14:	08 95       	ret

00000f16 <__fp_pscA>:
     f16:	00 24       	eor	r0, r0
     f18:	0a 94       	dec	r0
     f1a:	16 16       	cp	r1, r22
     f1c:	17 06       	cpc	r1, r23
     f1e:	18 06       	cpc	r1, r24
     f20:	09 06       	cpc	r0, r25
     f22:	08 95       	ret

00000f24 <__fp_pscB>:
     f24:	00 24       	eor	r0, r0
     f26:	0a 94       	dec	r0
     f28:	12 16       	cp	r1, r18
     f2a:	13 06       	cpc	r1, r19
     f2c:	14 06       	cpc	r1, r20
     f2e:	05 06       	cpc	r0, r21
     f30:	08 95       	ret

00000f32 <__fp_round>:
     f32:	09 2e       	mov	r0, r25
     f34:	03 94       	inc	r0
     f36:	00 0c       	add	r0, r0
     f38:	11 f4       	brne	.+4      	; 0xf3e <__fp_round+0xc>
     f3a:	88 23       	and	r24, r24
     f3c:	52 f0       	brmi	.+20     	; 0xf52 <__fp_round+0x20>
     f3e:	bb 0f       	add	r27, r27
     f40:	40 f4       	brcc	.+16     	; 0xf52 <__fp_round+0x20>
     f42:	bf 2b       	or	r27, r31
     f44:	11 f4       	brne	.+4      	; 0xf4a <__fp_round+0x18>
     f46:	60 ff       	sbrs	r22, 0
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <__fp_round+0x20>
     f4a:	6f 5f       	subi	r22, 0xFF	; 255
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	8f 4f       	sbci	r24, 0xFF	; 255
     f50:	9f 4f       	sbci	r25, 0xFF	; 255
     f52:	08 95       	ret

00000f54 <__fp_split3>:
     f54:	57 fd       	sbrc	r21, 7
     f56:	90 58       	subi	r25, 0x80	; 128
     f58:	44 0f       	add	r20, r20
     f5a:	55 1f       	adc	r21, r21
     f5c:	59 f0       	breq	.+22     	; 0xf74 <__fp_splitA+0x10>
     f5e:	5f 3f       	cpi	r21, 0xFF	; 255
     f60:	71 f0       	breq	.+28     	; 0xf7e <__fp_splitA+0x1a>
     f62:	47 95       	ror	r20

00000f64 <__fp_splitA>:
     f64:	88 0f       	add	r24, r24
     f66:	97 fb       	bst	r25, 7
     f68:	99 1f       	adc	r25, r25
     f6a:	61 f0       	breq	.+24     	; 0xf84 <__fp_splitA+0x20>
     f6c:	9f 3f       	cpi	r25, 0xFF	; 255
     f6e:	79 f0       	breq	.+30     	; 0xf8e <__fp_splitA+0x2a>
     f70:	87 95       	ror	r24
     f72:	08 95       	ret
     f74:	12 16       	cp	r1, r18
     f76:	13 06       	cpc	r1, r19
     f78:	14 06       	cpc	r1, r20
     f7a:	55 1f       	adc	r21, r21
     f7c:	f2 cf       	rjmp	.-28     	; 0xf62 <__fp_split3+0xe>
     f7e:	46 95       	lsr	r20
     f80:	f1 df       	rcall	.-30     	; 0xf64 <__fp_splitA>
     f82:	08 c0       	rjmp	.+16     	; 0xf94 <__fp_splitA+0x30>
     f84:	16 16       	cp	r1, r22
     f86:	17 06       	cpc	r1, r23
     f88:	18 06       	cpc	r1, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	f1 cf       	rjmp	.-30     	; 0xf70 <__fp_splitA+0xc>
     f8e:	86 95       	lsr	r24
     f90:	71 05       	cpc	r23, r1
     f92:	61 05       	cpc	r22, r1
     f94:	08 94       	sec
     f96:	08 95       	ret

00000f98 <__fp_zero>:
     f98:	e8 94       	clt

00000f9a <__fp_szero>:
     f9a:	bb 27       	eor	r27, r27
     f9c:	66 27       	eor	r22, r22
     f9e:	77 27       	eor	r23, r23
     fa0:	cb 01       	movw	r24, r22
     fa2:	97 f9       	bld	r25, 7
     fa4:	08 95       	ret

00000fa6 <__mulsf3>:
     fa6:	0b d0       	rcall	.+22     	; 0xfbe <__mulsf3x>
     fa8:	c4 cf       	rjmp	.-120    	; 0xf32 <__fp_round>
     faa:	b5 df       	rcall	.-150    	; 0xf16 <__fp_pscA>
     fac:	28 f0       	brcs	.+10     	; 0xfb8 <__mulsf3+0x12>
     fae:	ba df       	rcall	.-140    	; 0xf24 <__fp_pscB>
     fb0:	18 f0       	brcs	.+6      	; 0xfb8 <__mulsf3+0x12>
     fb2:	95 23       	and	r25, r21
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <__mulsf3+0x12>
     fb6:	a6 cf       	rjmp	.-180    	; 0xf04 <__fp_inf>
     fb8:	ab cf       	rjmp	.-170    	; 0xf10 <__fp_nan>
     fba:	11 24       	eor	r1, r1
     fbc:	ee cf       	rjmp	.-36     	; 0xf9a <__fp_szero>

00000fbe <__mulsf3x>:
     fbe:	ca df       	rcall	.-108    	; 0xf54 <__fp_split3>
     fc0:	a0 f3       	brcs	.-24     	; 0xfaa <__mulsf3+0x4>

00000fc2 <__mulsf3_pse>:
     fc2:	95 9f       	mul	r25, r21
     fc4:	d1 f3       	breq	.-12     	; 0xfba <__mulsf3+0x14>
     fc6:	95 0f       	add	r25, r21
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	55 1f       	adc	r21, r21
     fcc:	62 9f       	mul	r22, r18
     fce:	f0 01       	movw	r30, r0
     fd0:	72 9f       	mul	r23, r18
     fd2:	bb 27       	eor	r27, r27
     fd4:	f0 0d       	add	r31, r0
     fd6:	b1 1d       	adc	r27, r1
     fd8:	63 9f       	mul	r22, r19
     fda:	aa 27       	eor	r26, r26
     fdc:	f0 0d       	add	r31, r0
     fde:	b1 1d       	adc	r27, r1
     fe0:	aa 1f       	adc	r26, r26
     fe2:	64 9f       	mul	r22, r20
     fe4:	66 27       	eor	r22, r22
     fe6:	b0 0d       	add	r27, r0
     fe8:	a1 1d       	adc	r26, r1
     fea:	66 1f       	adc	r22, r22
     fec:	82 9f       	mul	r24, r18
     fee:	22 27       	eor	r18, r18
     ff0:	b0 0d       	add	r27, r0
     ff2:	a1 1d       	adc	r26, r1
     ff4:	62 1f       	adc	r22, r18
     ff6:	73 9f       	mul	r23, r19
     ff8:	b0 0d       	add	r27, r0
     ffa:	a1 1d       	adc	r26, r1
     ffc:	62 1f       	adc	r22, r18
     ffe:	83 9f       	mul	r24, r19
    1000:	a0 0d       	add	r26, r0
    1002:	61 1d       	adc	r22, r1
    1004:	22 1f       	adc	r18, r18
    1006:	74 9f       	mul	r23, r20
    1008:	33 27       	eor	r19, r19
    100a:	a0 0d       	add	r26, r0
    100c:	61 1d       	adc	r22, r1
    100e:	23 1f       	adc	r18, r19
    1010:	84 9f       	mul	r24, r20
    1012:	60 0d       	add	r22, r0
    1014:	21 1d       	adc	r18, r1
    1016:	82 2f       	mov	r24, r18
    1018:	76 2f       	mov	r23, r22
    101a:	6a 2f       	mov	r22, r26
    101c:	11 24       	eor	r1, r1
    101e:	9f 57       	subi	r25, 0x7F	; 127
    1020:	50 40       	sbci	r21, 0x00	; 0
    1022:	8a f0       	brmi	.+34     	; 0x1046 <__DATA_REGION_LENGTH__+0x46>
    1024:	e1 f0       	breq	.+56     	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
    1026:	88 23       	and	r24, r24
    1028:	4a f0       	brmi	.+18     	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	bb 1f       	adc	r27, r27
    1030:	66 1f       	adc	r22, r22
    1032:	77 1f       	adc	r23, r23
    1034:	88 1f       	adc	r24, r24
    1036:	91 50       	subi	r25, 0x01	; 1
    1038:	50 40       	sbci	r21, 0x00	; 0
    103a:	a9 f7       	brne	.-22     	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    103c:	9e 3f       	cpi	r25, 0xFE	; 254
    103e:	51 05       	cpc	r21, r1
    1040:	70 f0       	brcs	.+28     	; 0x105e <__DATA_REGION_LENGTH__+0x5e>
    1042:	60 cf       	rjmp	.-320    	; 0xf04 <__fp_inf>
    1044:	aa cf       	rjmp	.-172    	; 0xf9a <__fp_szero>
    1046:	5f 3f       	cpi	r21, 0xFF	; 255
    1048:	ec f3       	brlt	.-6      	; 0x1044 <__DATA_REGION_LENGTH__+0x44>
    104a:	98 3e       	cpi	r25, 0xE8	; 232
    104c:	dc f3       	brlt	.-10     	; 0x1044 <__DATA_REGION_LENGTH__+0x44>
    104e:	86 95       	lsr	r24
    1050:	77 95       	ror	r23
    1052:	67 95       	ror	r22
    1054:	b7 95       	ror	r27
    1056:	f7 95       	ror	r31
    1058:	e7 95       	ror	r30
    105a:	9f 5f       	subi	r25, 0xFF	; 255
    105c:	c1 f7       	brne	.-16     	; 0x104e <__DATA_REGION_LENGTH__+0x4e>
    105e:	fe 2b       	or	r31, r30
    1060:	88 0f       	add	r24, r24
    1062:	91 1d       	adc	r25, r1
    1064:	96 95       	lsr	r25
    1066:	87 95       	ror	r24
    1068:	97 f9       	bld	r25, 7
    106a:	08 95       	ret

0000106c <__divmodhi4>:
    106c:	97 fb       	bst	r25, 7
    106e:	07 2e       	mov	r0, r23
    1070:	16 f4       	brtc	.+4      	; 0x1076 <__divmodhi4+0xa>
    1072:	00 94       	com	r0
    1074:	06 d0       	rcall	.+12     	; 0x1082 <__divmodhi4_neg1>
    1076:	77 fd       	sbrc	r23, 7
    1078:	08 d0       	rcall	.+16     	; 0x108a <__divmodhi4_neg2>
    107a:	0b d0       	rcall	.+22     	; 0x1092 <__udivmodhi4>
    107c:	07 fc       	sbrc	r0, 7
    107e:	05 d0       	rcall	.+10     	; 0x108a <__divmodhi4_neg2>
    1080:	3e f4       	brtc	.+14     	; 0x1090 <__divmodhi4_exit>

00001082 <__divmodhi4_neg1>:
    1082:	90 95       	com	r25
    1084:	81 95       	neg	r24
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	08 95       	ret

0000108a <__divmodhi4_neg2>:
    108a:	70 95       	com	r23
    108c:	61 95       	neg	r22
    108e:	7f 4f       	sbci	r23, 0xFF	; 255

00001090 <__divmodhi4_exit>:
    1090:	08 95       	ret

00001092 <__udivmodhi4>:
    1092:	aa 1b       	sub	r26, r26
    1094:	bb 1b       	sub	r27, r27
    1096:	51 e1       	ldi	r21, 0x11	; 17
    1098:	07 c0       	rjmp	.+14     	; 0x10a8 <__udivmodhi4_ep>

0000109a <__udivmodhi4_loop>:
    109a:	aa 1f       	adc	r26, r26
    109c:	bb 1f       	adc	r27, r27
    109e:	a6 17       	cp	r26, r22
    10a0:	b7 07       	cpc	r27, r23
    10a2:	10 f0       	brcs	.+4      	; 0x10a8 <__udivmodhi4_ep>
    10a4:	a6 1b       	sub	r26, r22
    10a6:	b7 0b       	sbc	r27, r23

000010a8 <__udivmodhi4_ep>:
    10a8:	88 1f       	adc	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	5a 95       	dec	r21
    10ae:	a9 f7       	brne	.-22     	; 0x109a <__udivmodhi4_loop>
    10b0:	80 95       	com	r24
    10b2:	90 95       	com	r25
    10b4:	bc 01       	movw	r22, r24
    10b6:	cd 01       	movw	r24, r26
    10b8:	08 95       	ret

000010ba <strncmp>:
    10ba:	fb 01       	movw	r30, r22
    10bc:	dc 01       	movw	r26, r24
    10be:	41 50       	subi	r20, 0x01	; 1
    10c0:	50 40       	sbci	r21, 0x00	; 0
    10c2:	30 f0       	brcs	.+12     	; 0x10d0 <strncmp+0x16>
    10c4:	8d 91       	ld	r24, X+
    10c6:	01 90       	ld	r0, Z+
    10c8:	80 19       	sub	r24, r0
    10ca:	19 f4       	brne	.+6      	; 0x10d2 <strncmp+0x18>
    10cc:	00 20       	and	r0, r0
    10ce:	b9 f7       	brne	.-18     	; 0x10be <strncmp+0x4>
    10d0:	88 1b       	sub	r24, r24
    10d2:	99 0b       	sbc	r25, r25
    10d4:	08 95       	ret

000010d6 <printf>:
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	ae 01       	movw	r20, r28
    10e0:	4b 5f       	subi	r20, 0xFB	; 251
    10e2:	5f 4f       	sbci	r21, 0xFF	; 255
    10e4:	fa 01       	movw	r30, r20
    10e6:	61 91       	ld	r22, Z+
    10e8:	71 91       	ld	r23, Z+
    10ea:	af 01       	movw	r20, r30
    10ec:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <__iob+0x2>
    10f0:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <__iob+0x3>
    10f4:	61 d0       	rcall	.+194    	; 0x11b8 <vfprintf>
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	08 95       	ret

000010fc <puts>:
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	e0 91 46 08 	lds	r30, 0x0846	; 0x800846 <__iob+0x2>
    1108:	f0 91 47 08 	lds	r31, 0x0847	; 0x800847 <__iob+0x3>
    110c:	23 81       	ldd	r18, Z+3	; 0x03
    110e:	21 ff       	sbrs	r18, 1
    1110:	1b c0       	rjmp	.+54     	; 0x1148 <__stack+0x49>
    1112:	8c 01       	movw	r16, r24
    1114:	d0 e0       	ldi	r29, 0x00	; 0
    1116:	c0 e0       	ldi	r28, 0x00	; 0
    1118:	f8 01       	movw	r30, r16
    111a:	81 91       	ld	r24, Z+
    111c:	8f 01       	movw	r16, r30
    111e:	60 91 46 08 	lds	r22, 0x0846	; 0x800846 <__iob+0x2>
    1122:	70 91 47 08 	lds	r23, 0x0847	; 0x800847 <__iob+0x3>
    1126:	db 01       	movw	r26, r22
    1128:	18 96       	adiw	r26, 0x08	; 8
    112a:	ed 91       	ld	r30, X+
    112c:	fc 91       	ld	r31, X
    112e:	19 97       	sbiw	r26, 0x09	; 9
    1130:	88 23       	and	r24, r24
    1132:	31 f0       	breq	.+12     	; 0x1140 <__stack+0x41>
    1134:	09 95       	icall
    1136:	89 2b       	or	r24, r25
    1138:	79 f3       	breq	.-34     	; 0x1118 <__stack+0x19>
    113a:	df ef       	ldi	r29, 0xFF	; 255
    113c:	cf ef       	ldi	r28, 0xFF	; 255
    113e:	ec cf       	rjmp	.-40     	; 0x1118 <__stack+0x19>
    1140:	8a e0       	ldi	r24, 0x0A	; 10
    1142:	09 95       	icall
    1144:	89 2b       	or	r24, r25
    1146:	19 f0       	breq	.+6      	; 0x114e <__stack+0x4f>
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	9f ef       	ldi	r25, 0xFF	; 255
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <__stack+0x53>
    114e:	8d 2f       	mov	r24, r29
    1150:	9c 2f       	mov	r25, r28
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	08 95       	ret

0000115c <sprintf>:
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	2e 97       	sbiw	r28, 0x0e	; 14
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	0d 89       	ldd	r16, Y+21	; 0x15
    1176:	1e 89       	ldd	r17, Y+22	; 0x16
    1178:	86 e0       	ldi	r24, 0x06	; 6
    117a:	8c 83       	std	Y+4, r24	; 0x04
    117c:	1a 83       	std	Y+2, r17	; 0x02
    117e:	09 83       	std	Y+1, r16	; 0x01
    1180:	8f ef       	ldi	r24, 0xFF	; 255
    1182:	9f e7       	ldi	r25, 0x7F	; 127
    1184:	9e 83       	std	Y+6, r25	; 0x06
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	ae 01       	movw	r20, r28
    118a:	47 5e       	subi	r20, 0xE7	; 231
    118c:	5f 4f       	sbci	r21, 0xFF	; 255
    118e:	6f 89       	ldd	r22, Y+23	; 0x17
    1190:	78 8d       	ldd	r23, Y+24	; 0x18
    1192:	ce 01       	movw	r24, r28
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	10 d0       	rcall	.+32     	; 0x11b8 <vfprintf>
    1198:	ef 81       	ldd	r30, Y+7	; 0x07
    119a:	f8 85       	ldd	r31, Y+8	; 0x08
    119c:	e0 0f       	add	r30, r16
    119e:	f1 1f       	adc	r31, r17
    11a0:	10 82       	st	Z, r1
    11a2:	2e 96       	adiw	r28, 0x0e	; 14
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	08 95       	ret

000011b8 <vfprintf>:
    11b8:	2f 92       	push	r2
    11ba:	3f 92       	push	r3
    11bc:	4f 92       	push	r4
    11be:	5f 92       	push	r5
    11c0:	6f 92       	push	r6
    11c2:	7f 92       	push	r7
    11c4:	8f 92       	push	r8
    11c6:	9f 92       	push	r9
    11c8:	af 92       	push	r10
    11ca:	bf 92       	push	r11
    11cc:	cf 92       	push	r12
    11ce:	df 92       	push	r13
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	2b 97       	sbiw	r28, 0x0b	; 11
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	6c 01       	movw	r12, r24
    11ee:	7b 01       	movw	r14, r22
    11f0:	8a 01       	movw	r16, r20
    11f2:	fc 01       	movw	r30, r24
    11f4:	17 82       	std	Z+7, r1	; 0x07
    11f6:	16 82       	std	Z+6, r1	; 0x06
    11f8:	83 81       	ldd	r24, Z+3	; 0x03
    11fa:	81 ff       	sbrs	r24, 1
    11fc:	bf c1       	rjmp	.+894    	; 0x157c <vfprintf+0x3c4>
    11fe:	ce 01       	movw	r24, r28
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	3c 01       	movw	r6, r24
    1204:	f6 01       	movw	r30, r12
    1206:	93 81       	ldd	r25, Z+3	; 0x03
    1208:	f7 01       	movw	r30, r14
    120a:	93 fd       	sbrc	r25, 3
    120c:	85 91       	lpm	r24, Z+
    120e:	93 ff       	sbrs	r25, 3
    1210:	81 91       	ld	r24, Z+
    1212:	7f 01       	movw	r14, r30
    1214:	88 23       	and	r24, r24
    1216:	09 f4       	brne	.+2      	; 0x121a <vfprintf+0x62>
    1218:	ad c1       	rjmp	.+858    	; 0x1574 <vfprintf+0x3bc>
    121a:	85 32       	cpi	r24, 0x25	; 37
    121c:	39 f4       	brne	.+14     	; 0x122c <vfprintf+0x74>
    121e:	93 fd       	sbrc	r25, 3
    1220:	85 91       	lpm	r24, Z+
    1222:	93 ff       	sbrs	r25, 3
    1224:	81 91       	ld	r24, Z+
    1226:	7f 01       	movw	r14, r30
    1228:	85 32       	cpi	r24, 0x25	; 37
    122a:	21 f4       	brne	.+8      	; 0x1234 <vfprintf+0x7c>
    122c:	b6 01       	movw	r22, r12
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	d6 d1       	rcall	.+940    	; 0x15de <fputc>
    1232:	e8 cf       	rjmp	.-48     	; 0x1204 <vfprintf+0x4c>
    1234:	91 2c       	mov	r9, r1
    1236:	21 2c       	mov	r2, r1
    1238:	31 2c       	mov	r3, r1
    123a:	ff e1       	ldi	r31, 0x1F	; 31
    123c:	f3 15       	cp	r31, r3
    123e:	d8 f0       	brcs	.+54     	; 0x1276 <vfprintf+0xbe>
    1240:	8b 32       	cpi	r24, 0x2B	; 43
    1242:	79 f0       	breq	.+30     	; 0x1262 <vfprintf+0xaa>
    1244:	38 f4       	brcc	.+14     	; 0x1254 <vfprintf+0x9c>
    1246:	80 32       	cpi	r24, 0x20	; 32
    1248:	79 f0       	breq	.+30     	; 0x1268 <vfprintf+0xb0>
    124a:	83 32       	cpi	r24, 0x23	; 35
    124c:	a1 f4       	brne	.+40     	; 0x1276 <vfprintf+0xbe>
    124e:	23 2d       	mov	r18, r3
    1250:	20 61       	ori	r18, 0x10	; 16
    1252:	1d c0       	rjmp	.+58     	; 0x128e <vfprintf+0xd6>
    1254:	8d 32       	cpi	r24, 0x2D	; 45
    1256:	61 f0       	breq	.+24     	; 0x1270 <vfprintf+0xb8>
    1258:	80 33       	cpi	r24, 0x30	; 48
    125a:	69 f4       	brne	.+26     	; 0x1276 <vfprintf+0xbe>
    125c:	23 2d       	mov	r18, r3
    125e:	21 60       	ori	r18, 0x01	; 1
    1260:	16 c0       	rjmp	.+44     	; 0x128e <vfprintf+0xd6>
    1262:	83 2d       	mov	r24, r3
    1264:	82 60       	ori	r24, 0x02	; 2
    1266:	38 2e       	mov	r3, r24
    1268:	e3 2d       	mov	r30, r3
    126a:	e4 60       	ori	r30, 0x04	; 4
    126c:	3e 2e       	mov	r3, r30
    126e:	2a c0       	rjmp	.+84     	; 0x12c4 <vfprintf+0x10c>
    1270:	f3 2d       	mov	r31, r3
    1272:	f8 60       	ori	r31, 0x08	; 8
    1274:	1d c0       	rjmp	.+58     	; 0x12b0 <vfprintf+0xf8>
    1276:	37 fc       	sbrc	r3, 7
    1278:	2d c0       	rjmp	.+90     	; 0x12d4 <vfprintf+0x11c>
    127a:	20 ed       	ldi	r18, 0xD0	; 208
    127c:	28 0f       	add	r18, r24
    127e:	2a 30       	cpi	r18, 0x0A	; 10
    1280:	40 f0       	brcs	.+16     	; 0x1292 <vfprintf+0xda>
    1282:	8e 32       	cpi	r24, 0x2E	; 46
    1284:	b9 f4       	brne	.+46     	; 0x12b4 <vfprintf+0xfc>
    1286:	36 fc       	sbrc	r3, 6
    1288:	75 c1       	rjmp	.+746    	; 0x1574 <vfprintf+0x3bc>
    128a:	23 2d       	mov	r18, r3
    128c:	20 64       	ori	r18, 0x40	; 64
    128e:	32 2e       	mov	r3, r18
    1290:	19 c0       	rjmp	.+50     	; 0x12c4 <vfprintf+0x10c>
    1292:	36 fe       	sbrs	r3, 6
    1294:	06 c0       	rjmp	.+12     	; 0x12a2 <vfprintf+0xea>
    1296:	8a e0       	ldi	r24, 0x0A	; 10
    1298:	98 9e       	mul	r9, r24
    129a:	20 0d       	add	r18, r0
    129c:	11 24       	eor	r1, r1
    129e:	92 2e       	mov	r9, r18
    12a0:	11 c0       	rjmp	.+34     	; 0x12c4 <vfprintf+0x10c>
    12a2:	ea e0       	ldi	r30, 0x0A	; 10
    12a4:	2e 9e       	mul	r2, r30
    12a6:	20 0d       	add	r18, r0
    12a8:	11 24       	eor	r1, r1
    12aa:	22 2e       	mov	r2, r18
    12ac:	f3 2d       	mov	r31, r3
    12ae:	f0 62       	ori	r31, 0x20	; 32
    12b0:	3f 2e       	mov	r3, r31
    12b2:	08 c0       	rjmp	.+16     	; 0x12c4 <vfprintf+0x10c>
    12b4:	8c 36       	cpi	r24, 0x6C	; 108
    12b6:	21 f4       	brne	.+8      	; 0x12c0 <vfprintf+0x108>
    12b8:	83 2d       	mov	r24, r3
    12ba:	80 68       	ori	r24, 0x80	; 128
    12bc:	38 2e       	mov	r3, r24
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <vfprintf+0x10c>
    12c0:	88 36       	cpi	r24, 0x68	; 104
    12c2:	41 f4       	brne	.+16     	; 0x12d4 <vfprintf+0x11c>
    12c4:	f7 01       	movw	r30, r14
    12c6:	93 fd       	sbrc	r25, 3
    12c8:	85 91       	lpm	r24, Z+
    12ca:	93 ff       	sbrs	r25, 3
    12cc:	81 91       	ld	r24, Z+
    12ce:	7f 01       	movw	r14, r30
    12d0:	81 11       	cpse	r24, r1
    12d2:	b3 cf       	rjmp	.-154    	; 0x123a <vfprintf+0x82>
    12d4:	98 2f       	mov	r25, r24
    12d6:	9f 7d       	andi	r25, 0xDF	; 223
    12d8:	95 54       	subi	r25, 0x45	; 69
    12da:	93 30       	cpi	r25, 0x03	; 3
    12dc:	28 f4       	brcc	.+10     	; 0x12e8 <vfprintf+0x130>
    12de:	0c 5f       	subi	r16, 0xFC	; 252
    12e0:	1f 4f       	sbci	r17, 0xFF	; 255
    12e2:	9f e3       	ldi	r25, 0x3F	; 63
    12e4:	99 83       	std	Y+1, r25	; 0x01
    12e6:	0d c0       	rjmp	.+26     	; 0x1302 <vfprintf+0x14a>
    12e8:	83 36       	cpi	r24, 0x63	; 99
    12ea:	31 f0       	breq	.+12     	; 0x12f8 <vfprintf+0x140>
    12ec:	83 37       	cpi	r24, 0x73	; 115
    12ee:	71 f0       	breq	.+28     	; 0x130c <vfprintf+0x154>
    12f0:	83 35       	cpi	r24, 0x53	; 83
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <vfprintf+0x13e>
    12f4:	55 c0       	rjmp	.+170    	; 0x13a0 <vfprintf+0x1e8>
    12f6:	20 c0       	rjmp	.+64     	; 0x1338 <vfprintf+0x180>
    12f8:	f8 01       	movw	r30, r16
    12fa:	80 81       	ld	r24, Z
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	0e 5f       	subi	r16, 0xFE	; 254
    1300:	1f 4f       	sbci	r17, 0xFF	; 255
    1302:	88 24       	eor	r8, r8
    1304:	83 94       	inc	r8
    1306:	91 2c       	mov	r9, r1
    1308:	53 01       	movw	r10, r6
    130a:	12 c0       	rjmp	.+36     	; 0x1330 <vfprintf+0x178>
    130c:	28 01       	movw	r4, r16
    130e:	f2 e0       	ldi	r31, 0x02	; 2
    1310:	4f 0e       	add	r4, r31
    1312:	51 1c       	adc	r5, r1
    1314:	f8 01       	movw	r30, r16
    1316:	a0 80       	ld	r10, Z
    1318:	b1 80       	ldd	r11, Z+1	; 0x01
    131a:	36 fe       	sbrs	r3, 6
    131c:	03 c0       	rjmp	.+6      	; 0x1324 <vfprintf+0x16c>
    131e:	69 2d       	mov	r22, r9
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <vfprintf+0x170>
    1324:	6f ef       	ldi	r22, 0xFF	; 255
    1326:	7f ef       	ldi	r23, 0xFF	; 255
    1328:	c5 01       	movw	r24, r10
    132a:	4e d1       	rcall	.+668    	; 0x15c8 <strnlen>
    132c:	4c 01       	movw	r8, r24
    132e:	82 01       	movw	r16, r4
    1330:	f3 2d       	mov	r31, r3
    1332:	ff 77       	andi	r31, 0x7F	; 127
    1334:	3f 2e       	mov	r3, r31
    1336:	15 c0       	rjmp	.+42     	; 0x1362 <vfprintf+0x1aa>
    1338:	28 01       	movw	r4, r16
    133a:	22 e0       	ldi	r18, 0x02	; 2
    133c:	42 0e       	add	r4, r18
    133e:	51 1c       	adc	r5, r1
    1340:	f8 01       	movw	r30, r16
    1342:	a0 80       	ld	r10, Z
    1344:	b1 80       	ldd	r11, Z+1	; 0x01
    1346:	36 fe       	sbrs	r3, 6
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <vfprintf+0x198>
    134a:	69 2d       	mov	r22, r9
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <vfprintf+0x19c>
    1350:	6f ef       	ldi	r22, 0xFF	; 255
    1352:	7f ef       	ldi	r23, 0xFF	; 255
    1354:	c5 01       	movw	r24, r10
    1356:	2d d1       	rcall	.+602    	; 0x15b2 <strnlen_P>
    1358:	4c 01       	movw	r8, r24
    135a:	f3 2d       	mov	r31, r3
    135c:	f0 68       	ori	r31, 0x80	; 128
    135e:	3f 2e       	mov	r3, r31
    1360:	82 01       	movw	r16, r4
    1362:	33 fc       	sbrc	r3, 3
    1364:	19 c0       	rjmp	.+50     	; 0x1398 <vfprintf+0x1e0>
    1366:	82 2d       	mov	r24, r2
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	88 16       	cp	r8, r24
    136c:	99 06       	cpc	r9, r25
    136e:	a0 f4       	brcc	.+40     	; 0x1398 <vfprintf+0x1e0>
    1370:	b6 01       	movw	r22, r12
    1372:	80 e2       	ldi	r24, 0x20	; 32
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	33 d1       	rcall	.+614    	; 0x15de <fputc>
    1378:	2a 94       	dec	r2
    137a:	f5 cf       	rjmp	.-22     	; 0x1366 <vfprintf+0x1ae>
    137c:	f5 01       	movw	r30, r10
    137e:	37 fc       	sbrc	r3, 7
    1380:	85 91       	lpm	r24, Z+
    1382:	37 fe       	sbrs	r3, 7
    1384:	81 91       	ld	r24, Z+
    1386:	5f 01       	movw	r10, r30
    1388:	b6 01       	movw	r22, r12
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	28 d1       	rcall	.+592    	; 0x15de <fputc>
    138e:	21 10       	cpse	r2, r1
    1390:	2a 94       	dec	r2
    1392:	21 e0       	ldi	r18, 0x01	; 1
    1394:	82 1a       	sub	r8, r18
    1396:	91 08       	sbc	r9, r1
    1398:	81 14       	cp	r8, r1
    139a:	91 04       	cpc	r9, r1
    139c:	79 f7       	brne	.-34     	; 0x137c <vfprintf+0x1c4>
    139e:	e1 c0       	rjmp	.+450    	; 0x1562 <vfprintf+0x3aa>
    13a0:	84 36       	cpi	r24, 0x64	; 100
    13a2:	11 f0       	breq	.+4      	; 0x13a8 <vfprintf+0x1f0>
    13a4:	89 36       	cpi	r24, 0x69	; 105
    13a6:	39 f5       	brne	.+78     	; 0x13f6 <vfprintf+0x23e>
    13a8:	f8 01       	movw	r30, r16
    13aa:	37 fe       	sbrs	r3, 7
    13ac:	07 c0       	rjmp	.+14     	; 0x13bc <vfprintf+0x204>
    13ae:	60 81       	ld	r22, Z
    13b0:	71 81       	ldd	r23, Z+1	; 0x01
    13b2:	82 81       	ldd	r24, Z+2	; 0x02
    13b4:	93 81       	ldd	r25, Z+3	; 0x03
    13b6:	0c 5f       	subi	r16, 0xFC	; 252
    13b8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ba:	08 c0       	rjmp	.+16     	; 0x13cc <vfprintf+0x214>
    13bc:	60 81       	ld	r22, Z
    13be:	71 81       	ldd	r23, Z+1	; 0x01
    13c0:	07 2e       	mov	r0, r23
    13c2:	00 0c       	add	r0, r0
    13c4:	88 0b       	sbc	r24, r24
    13c6:	99 0b       	sbc	r25, r25
    13c8:	0e 5f       	subi	r16, 0xFE	; 254
    13ca:	1f 4f       	sbci	r17, 0xFF	; 255
    13cc:	f3 2d       	mov	r31, r3
    13ce:	ff 76       	andi	r31, 0x6F	; 111
    13d0:	3f 2e       	mov	r3, r31
    13d2:	97 ff       	sbrs	r25, 7
    13d4:	09 c0       	rjmp	.+18     	; 0x13e8 <vfprintf+0x230>
    13d6:	90 95       	com	r25
    13d8:	80 95       	com	r24
    13da:	70 95       	com	r23
    13dc:	61 95       	neg	r22
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	8f 4f       	sbci	r24, 0xFF	; 255
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	f0 68       	ori	r31, 0x80	; 128
    13e6:	3f 2e       	mov	r3, r31
    13e8:	2a e0       	ldi	r18, 0x0A	; 10
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	a3 01       	movw	r20, r6
    13ee:	33 d1       	rcall	.+614    	; 0x1656 <__ultoa_invert>
    13f0:	88 2e       	mov	r8, r24
    13f2:	86 18       	sub	r8, r6
    13f4:	44 c0       	rjmp	.+136    	; 0x147e <vfprintf+0x2c6>
    13f6:	85 37       	cpi	r24, 0x75	; 117
    13f8:	31 f4       	brne	.+12     	; 0x1406 <vfprintf+0x24e>
    13fa:	23 2d       	mov	r18, r3
    13fc:	2f 7e       	andi	r18, 0xEF	; 239
    13fe:	b2 2e       	mov	r11, r18
    1400:	2a e0       	ldi	r18, 0x0A	; 10
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	25 c0       	rjmp	.+74     	; 0x1450 <vfprintf+0x298>
    1406:	93 2d       	mov	r25, r3
    1408:	99 7f       	andi	r25, 0xF9	; 249
    140a:	b9 2e       	mov	r11, r25
    140c:	8f 36       	cpi	r24, 0x6F	; 111
    140e:	c1 f0       	breq	.+48     	; 0x1440 <vfprintf+0x288>
    1410:	18 f4       	brcc	.+6      	; 0x1418 <vfprintf+0x260>
    1412:	88 35       	cpi	r24, 0x58	; 88
    1414:	79 f0       	breq	.+30     	; 0x1434 <vfprintf+0x27c>
    1416:	ae c0       	rjmp	.+348    	; 0x1574 <vfprintf+0x3bc>
    1418:	80 37       	cpi	r24, 0x70	; 112
    141a:	19 f0       	breq	.+6      	; 0x1422 <vfprintf+0x26a>
    141c:	88 37       	cpi	r24, 0x78	; 120
    141e:	21 f0       	breq	.+8      	; 0x1428 <vfprintf+0x270>
    1420:	a9 c0       	rjmp	.+338    	; 0x1574 <vfprintf+0x3bc>
    1422:	e9 2f       	mov	r30, r25
    1424:	e0 61       	ori	r30, 0x10	; 16
    1426:	be 2e       	mov	r11, r30
    1428:	b4 fe       	sbrs	r11, 4
    142a:	0d c0       	rjmp	.+26     	; 0x1446 <vfprintf+0x28e>
    142c:	fb 2d       	mov	r31, r11
    142e:	f4 60       	ori	r31, 0x04	; 4
    1430:	bf 2e       	mov	r11, r31
    1432:	09 c0       	rjmp	.+18     	; 0x1446 <vfprintf+0x28e>
    1434:	34 fe       	sbrs	r3, 4
    1436:	0a c0       	rjmp	.+20     	; 0x144c <vfprintf+0x294>
    1438:	29 2f       	mov	r18, r25
    143a:	26 60       	ori	r18, 0x06	; 6
    143c:	b2 2e       	mov	r11, r18
    143e:	06 c0       	rjmp	.+12     	; 0x144c <vfprintf+0x294>
    1440:	28 e0       	ldi	r18, 0x08	; 8
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	05 c0       	rjmp	.+10     	; 0x1450 <vfprintf+0x298>
    1446:	20 e1       	ldi	r18, 0x10	; 16
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <vfprintf+0x298>
    144c:	20 e1       	ldi	r18, 0x10	; 16
    144e:	32 e0       	ldi	r19, 0x02	; 2
    1450:	f8 01       	movw	r30, r16
    1452:	b7 fe       	sbrs	r11, 7
    1454:	07 c0       	rjmp	.+14     	; 0x1464 <vfprintf+0x2ac>
    1456:	60 81       	ld	r22, Z
    1458:	71 81       	ldd	r23, Z+1	; 0x01
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	93 81       	ldd	r25, Z+3	; 0x03
    145e:	0c 5f       	subi	r16, 0xFC	; 252
    1460:	1f 4f       	sbci	r17, 0xFF	; 255
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <vfprintf+0x2b8>
    1464:	60 81       	ld	r22, Z
    1466:	71 81       	ldd	r23, Z+1	; 0x01
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 5f       	subi	r16, 0xFE	; 254
    146e:	1f 4f       	sbci	r17, 0xFF	; 255
    1470:	a3 01       	movw	r20, r6
    1472:	f1 d0       	rcall	.+482    	; 0x1656 <__ultoa_invert>
    1474:	88 2e       	mov	r8, r24
    1476:	86 18       	sub	r8, r6
    1478:	fb 2d       	mov	r31, r11
    147a:	ff 77       	andi	r31, 0x7F	; 127
    147c:	3f 2e       	mov	r3, r31
    147e:	36 fe       	sbrs	r3, 6
    1480:	0d c0       	rjmp	.+26     	; 0x149c <vfprintf+0x2e4>
    1482:	23 2d       	mov	r18, r3
    1484:	2e 7f       	andi	r18, 0xFE	; 254
    1486:	a2 2e       	mov	r10, r18
    1488:	89 14       	cp	r8, r9
    148a:	58 f4       	brcc	.+22     	; 0x14a2 <vfprintf+0x2ea>
    148c:	34 fe       	sbrs	r3, 4
    148e:	0b c0       	rjmp	.+22     	; 0x14a6 <vfprintf+0x2ee>
    1490:	32 fc       	sbrc	r3, 2
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <vfprintf+0x2ee>
    1494:	83 2d       	mov	r24, r3
    1496:	8e 7e       	andi	r24, 0xEE	; 238
    1498:	a8 2e       	mov	r10, r24
    149a:	05 c0       	rjmp	.+10     	; 0x14a6 <vfprintf+0x2ee>
    149c:	b8 2c       	mov	r11, r8
    149e:	a3 2c       	mov	r10, r3
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <vfprintf+0x2f0>
    14a2:	b8 2c       	mov	r11, r8
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <vfprintf+0x2f0>
    14a6:	b9 2c       	mov	r11, r9
    14a8:	a4 fe       	sbrs	r10, 4
    14aa:	0f c0       	rjmp	.+30     	; 0x14ca <vfprintf+0x312>
    14ac:	fe 01       	movw	r30, r28
    14ae:	e8 0d       	add	r30, r8
    14b0:	f1 1d       	adc	r31, r1
    14b2:	80 81       	ld	r24, Z
    14b4:	80 33       	cpi	r24, 0x30	; 48
    14b6:	21 f4       	brne	.+8      	; 0x14c0 <vfprintf+0x308>
    14b8:	9a 2d       	mov	r25, r10
    14ba:	99 7e       	andi	r25, 0xE9	; 233
    14bc:	a9 2e       	mov	r10, r25
    14be:	09 c0       	rjmp	.+18     	; 0x14d2 <vfprintf+0x31a>
    14c0:	a2 fe       	sbrs	r10, 2
    14c2:	06 c0       	rjmp	.+12     	; 0x14d0 <vfprintf+0x318>
    14c4:	b3 94       	inc	r11
    14c6:	b3 94       	inc	r11
    14c8:	04 c0       	rjmp	.+8      	; 0x14d2 <vfprintf+0x31a>
    14ca:	8a 2d       	mov	r24, r10
    14cc:	86 78       	andi	r24, 0x86	; 134
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <vfprintf+0x31a>
    14d0:	b3 94       	inc	r11
    14d2:	a3 fc       	sbrc	r10, 3
    14d4:	10 c0       	rjmp	.+32     	; 0x14f6 <vfprintf+0x33e>
    14d6:	a0 fe       	sbrs	r10, 0
    14d8:	06 c0       	rjmp	.+12     	; 0x14e6 <vfprintf+0x32e>
    14da:	b2 14       	cp	r11, r2
    14dc:	80 f4       	brcc	.+32     	; 0x14fe <vfprintf+0x346>
    14de:	28 0c       	add	r2, r8
    14e0:	92 2c       	mov	r9, r2
    14e2:	9b 18       	sub	r9, r11
    14e4:	0d c0       	rjmp	.+26     	; 0x1500 <vfprintf+0x348>
    14e6:	b2 14       	cp	r11, r2
    14e8:	58 f4       	brcc	.+22     	; 0x1500 <vfprintf+0x348>
    14ea:	b6 01       	movw	r22, r12
    14ec:	80 e2       	ldi	r24, 0x20	; 32
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	76 d0       	rcall	.+236    	; 0x15de <fputc>
    14f2:	b3 94       	inc	r11
    14f4:	f8 cf       	rjmp	.-16     	; 0x14e6 <vfprintf+0x32e>
    14f6:	b2 14       	cp	r11, r2
    14f8:	18 f4       	brcc	.+6      	; 0x1500 <vfprintf+0x348>
    14fa:	2b 18       	sub	r2, r11
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <vfprintf+0x34a>
    14fe:	98 2c       	mov	r9, r8
    1500:	21 2c       	mov	r2, r1
    1502:	a4 fe       	sbrs	r10, 4
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <vfprintf+0x36c>
    1506:	b6 01       	movw	r22, r12
    1508:	80 e3       	ldi	r24, 0x30	; 48
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	68 d0       	rcall	.+208    	; 0x15de <fputc>
    150e:	a2 fe       	sbrs	r10, 2
    1510:	16 c0       	rjmp	.+44     	; 0x153e <vfprintf+0x386>
    1512:	a1 fc       	sbrc	r10, 1
    1514:	03 c0       	rjmp	.+6      	; 0x151c <vfprintf+0x364>
    1516:	88 e7       	ldi	r24, 0x78	; 120
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <vfprintf+0x368>
    151c:	88 e5       	ldi	r24, 0x58	; 88
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	b6 01       	movw	r22, r12
    1522:	0c c0       	rjmp	.+24     	; 0x153c <vfprintf+0x384>
    1524:	8a 2d       	mov	r24, r10
    1526:	86 78       	andi	r24, 0x86	; 134
    1528:	51 f0       	breq	.+20     	; 0x153e <vfprintf+0x386>
    152a:	a1 fe       	sbrs	r10, 1
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <vfprintf+0x37a>
    152e:	8b e2       	ldi	r24, 0x2B	; 43
    1530:	01 c0       	rjmp	.+2      	; 0x1534 <vfprintf+0x37c>
    1532:	80 e2       	ldi	r24, 0x20	; 32
    1534:	a7 fc       	sbrc	r10, 7
    1536:	8d e2       	ldi	r24, 0x2D	; 45
    1538:	b6 01       	movw	r22, r12
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	50 d0       	rcall	.+160    	; 0x15de <fputc>
    153e:	89 14       	cp	r8, r9
    1540:	30 f4       	brcc	.+12     	; 0x154e <vfprintf+0x396>
    1542:	b6 01       	movw	r22, r12
    1544:	80 e3       	ldi	r24, 0x30	; 48
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	4a d0       	rcall	.+148    	; 0x15de <fputc>
    154a:	9a 94       	dec	r9
    154c:	f8 cf       	rjmp	.-16     	; 0x153e <vfprintf+0x386>
    154e:	8a 94       	dec	r8
    1550:	f3 01       	movw	r30, r6
    1552:	e8 0d       	add	r30, r8
    1554:	f1 1d       	adc	r31, r1
    1556:	80 81       	ld	r24, Z
    1558:	b6 01       	movw	r22, r12
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	40 d0       	rcall	.+128    	; 0x15de <fputc>
    155e:	81 10       	cpse	r8, r1
    1560:	f6 cf       	rjmp	.-20     	; 0x154e <vfprintf+0x396>
    1562:	22 20       	and	r2, r2
    1564:	09 f4       	brne	.+2      	; 0x1568 <vfprintf+0x3b0>
    1566:	4e ce       	rjmp	.-868    	; 0x1204 <vfprintf+0x4c>
    1568:	b6 01       	movw	r22, r12
    156a:	80 e2       	ldi	r24, 0x20	; 32
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	37 d0       	rcall	.+110    	; 0x15de <fputc>
    1570:	2a 94       	dec	r2
    1572:	f7 cf       	rjmp	.-18     	; 0x1562 <vfprintf+0x3aa>
    1574:	f6 01       	movw	r30, r12
    1576:	86 81       	ldd	r24, Z+6	; 0x06
    1578:	97 81       	ldd	r25, Z+7	; 0x07
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <vfprintf+0x3c8>
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	9f ef       	ldi	r25, 0xFF	; 255
    1580:	2b 96       	adiw	r28, 0x0b	; 11
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	df 90       	pop	r13
    159a:	cf 90       	pop	r12
    159c:	bf 90       	pop	r11
    159e:	af 90       	pop	r10
    15a0:	9f 90       	pop	r9
    15a2:	8f 90       	pop	r8
    15a4:	7f 90       	pop	r7
    15a6:	6f 90       	pop	r6
    15a8:	5f 90       	pop	r5
    15aa:	4f 90       	pop	r4
    15ac:	3f 90       	pop	r3
    15ae:	2f 90       	pop	r2
    15b0:	08 95       	ret

000015b2 <strnlen_P>:
    15b2:	fc 01       	movw	r30, r24
    15b4:	05 90       	lpm	r0, Z+
    15b6:	61 50       	subi	r22, 0x01	; 1
    15b8:	70 40       	sbci	r23, 0x00	; 0
    15ba:	01 10       	cpse	r0, r1
    15bc:	d8 f7       	brcc	.-10     	; 0x15b4 <strnlen_P+0x2>
    15be:	80 95       	com	r24
    15c0:	90 95       	com	r25
    15c2:	8e 0f       	add	r24, r30
    15c4:	9f 1f       	adc	r25, r31
    15c6:	08 95       	ret

000015c8 <strnlen>:
    15c8:	fc 01       	movw	r30, r24
    15ca:	61 50       	subi	r22, 0x01	; 1
    15cc:	70 40       	sbci	r23, 0x00	; 0
    15ce:	01 90       	ld	r0, Z+
    15d0:	01 10       	cpse	r0, r1
    15d2:	d8 f7       	brcc	.-10     	; 0x15ca <strnlen+0x2>
    15d4:	80 95       	com	r24
    15d6:	90 95       	com	r25
    15d8:	8e 0f       	add	r24, r30
    15da:	9f 1f       	adc	r25, r31
    15dc:	08 95       	ret

000015de <fputc>:
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	fb 01       	movw	r30, r22
    15e8:	23 81       	ldd	r18, Z+3	; 0x03
    15ea:	21 fd       	sbrc	r18, 1
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <fputc+0x16>
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	9f ef       	ldi	r25, 0xFF	; 255
    15f2:	2c c0       	rjmp	.+88     	; 0x164c <fputc+0x6e>
    15f4:	22 ff       	sbrs	r18, 2
    15f6:	16 c0       	rjmp	.+44     	; 0x1624 <fputc+0x46>
    15f8:	46 81       	ldd	r20, Z+6	; 0x06
    15fa:	57 81       	ldd	r21, Z+7	; 0x07
    15fc:	24 81       	ldd	r18, Z+4	; 0x04
    15fe:	35 81       	ldd	r19, Z+5	; 0x05
    1600:	42 17       	cp	r20, r18
    1602:	53 07       	cpc	r21, r19
    1604:	44 f4       	brge	.+16     	; 0x1616 <fputc+0x38>
    1606:	a0 81       	ld	r26, Z
    1608:	b1 81       	ldd	r27, Z+1	; 0x01
    160a:	9d 01       	movw	r18, r26
    160c:	2f 5f       	subi	r18, 0xFF	; 255
    160e:	3f 4f       	sbci	r19, 0xFF	; 255
    1610:	31 83       	std	Z+1, r19	; 0x01
    1612:	20 83       	st	Z, r18
    1614:	8c 93       	st	X, r24
    1616:	26 81       	ldd	r18, Z+6	; 0x06
    1618:	37 81       	ldd	r19, Z+7	; 0x07
    161a:	2f 5f       	subi	r18, 0xFF	; 255
    161c:	3f 4f       	sbci	r19, 0xFF	; 255
    161e:	37 83       	std	Z+7, r19	; 0x07
    1620:	26 83       	std	Z+6, r18	; 0x06
    1622:	14 c0       	rjmp	.+40     	; 0x164c <fputc+0x6e>
    1624:	8b 01       	movw	r16, r22
    1626:	ec 01       	movw	r28, r24
    1628:	fb 01       	movw	r30, r22
    162a:	00 84       	ldd	r0, Z+8	; 0x08
    162c:	f1 85       	ldd	r31, Z+9	; 0x09
    162e:	e0 2d       	mov	r30, r0
    1630:	09 95       	icall
    1632:	89 2b       	or	r24, r25
    1634:	e1 f6       	brne	.-72     	; 0x15ee <fputc+0x10>
    1636:	d8 01       	movw	r26, r16
    1638:	16 96       	adiw	r26, 0x06	; 6
    163a:	8d 91       	ld	r24, X+
    163c:	9c 91       	ld	r25, X
    163e:	17 97       	sbiw	r26, 0x07	; 7
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	17 96       	adiw	r26, 0x07	; 7
    1644:	9c 93       	st	X, r25
    1646:	8e 93       	st	-X, r24
    1648:	16 97       	sbiw	r26, 0x06	; 6
    164a:	ce 01       	movw	r24, r28
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	08 95       	ret

00001656 <__ultoa_invert>:
    1656:	fa 01       	movw	r30, r20
    1658:	aa 27       	eor	r26, r26
    165a:	28 30       	cpi	r18, 0x08	; 8
    165c:	51 f1       	breq	.+84     	; 0x16b2 <__ultoa_invert+0x5c>
    165e:	20 31       	cpi	r18, 0x10	; 16
    1660:	81 f1       	breq	.+96     	; 0x16c2 <__ultoa_invert+0x6c>
    1662:	e8 94       	clt
    1664:	6f 93       	push	r22
    1666:	6e 7f       	andi	r22, 0xFE	; 254
    1668:	6e 5f       	subi	r22, 0xFE	; 254
    166a:	7f 4f       	sbci	r23, 0xFF	; 255
    166c:	8f 4f       	sbci	r24, 0xFF	; 255
    166e:	9f 4f       	sbci	r25, 0xFF	; 255
    1670:	af 4f       	sbci	r26, 0xFF	; 255
    1672:	b1 e0       	ldi	r27, 0x01	; 1
    1674:	3e d0       	rcall	.+124    	; 0x16f2 <__ultoa_invert+0x9c>
    1676:	b4 e0       	ldi	r27, 0x04	; 4
    1678:	3c d0       	rcall	.+120    	; 0x16f2 <__ultoa_invert+0x9c>
    167a:	67 0f       	add	r22, r23
    167c:	78 1f       	adc	r23, r24
    167e:	89 1f       	adc	r24, r25
    1680:	9a 1f       	adc	r25, r26
    1682:	a1 1d       	adc	r26, r1
    1684:	68 0f       	add	r22, r24
    1686:	79 1f       	adc	r23, r25
    1688:	8a 1f       	adc	r24, r26
    168a:	91 1d       	adc	r25, r1
    168c:	a1 1d       	adc	r26, r1
    168e:	6a 0f       	add	r22, r26
    1690:	71 1d       	adc	r23, r1
    1692:	81 1d       	adc	r24, r1
    1694:	91 1d       	adc	r25, r1
    1696:	a1 1d       	adc	r26, r1
    1698:	20 d0       	rcall	.+64     	; 0x16da <__ultoa_invert+0x84>
    169a:	09 f4       	brne	.+2      	; 0x169e <__ultoa_invert+0x48>
    169c:	68 94       	set
    169e:	3f 91       	pop	r19
    16a0:	2a e0       	ldi	r18, 0x0A	; 10
    16a2:	26 9f       	mul	r18, r22
    16a4:	11 24       	eor	r1, r1
    16a6:	30 19       	sub	r19, r0
    16a8:	30 5d       	subi	r19, 0xD0	; 208
    16aa:	31 93       	st	Z+, r19
    16ac:	de f6       	brtc	.-74     	; 0x1664 <__ultoa_invert+0xe>
    16ae:	cf 01       	movw	r24, r30
    16b0:	08 95       	ret
    16b2:	46 2f       	mov	r20, r22
    16b4:	47 70       	andi	r20, 0x07	; 7
    16b6:	40 5d       	subi	r20, 0xD0	; 208
    16b8:	41 93       	st	Z+, r20
    16ba:	b3 e0       	ldi	r27, 0x03	; 3
    16bc:	0f d0       	rcall	.+30     	; 0x16dc <__ultoa_invert+0x86>
    16be:	c9 f7       	brne	.-14     	; 0x16b2 <__ultoa_invert+0x5c>
    16c0:	f6 cf       	rjmp	.-20     	; 0x16ae <__ultoa_invert+0x58>
    16c2:	46 2f       	mov	r20, r22
    16c4:	4f 70       	andi	r20, 0x0F	; 15
    16c6:	40 5d       	subi	r20, 0xD0	; 208
    16c8:	4a 33       	cpi	r20, 0x3A	; 58
    16ca:	18 f0       	brcs	.+6      	; 0x16d2 <__ultoa_invert+0x7c>
    16cc:	49 5d       	subi	r20, 0xD9	; 217
    16ce:	31 fd       	sbrc	r19, 1
    16d0:	40 52       	subi	r20, 0x20	; 32
    16d2:	41 93       	st	Z+, r20
    16d4:	02 d0       	rcall	.+4      	; 0x16da <__ultoa_invert+0x84>
    16d6:	a9 f7       	brne	.-22     	; 0x16c2 <__ultoa_invert+0x6c>
    16d8:	ea cf       	rjmp	.-44     	; 0x16ae <__ultoa_invert+0x58>
    16da:	b4 e0       	ldi	r27, 0x04	; 4
    16dc:	a6 95       	lsr	r26
    16de:	97 95       	ror	r25
    16e0:	87 95       	ror	r24
    16e2:	77 95       	ror	r23
    16e4:	67 95       	ror	r22
    16e6:	ba 95       	dec	r27
    16e8:	c9 f7       	brne	.-14     	; 0x16dc <__ultoa_invert+0x86>
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	61 05       	cpc	r22, r1
    16ee:	71 05       	cpc	r23, r1
    16f0:	08 95       	ret
    16f2:	9b 01       	movw	r18, r22
    16f4:	ac 01       	movw	r20, r24
    16f6:	0a 2e       	mov	r0, r26
    16f8:	06 94       	lsr	r0
    16fa:	57 95       	ror	r21
    16fc:	47 95       	ror	r20
    16fe:	37 95       	ror	r19
    1700:	27 95       	ror	r18
    1702:	ba 95       	dec	r27
    1704:	c9 f7       	brne	.-14     	; 0x16f8 <__ultoa_invert+0xa2>
    1706:	62 0f       	add	r22, r18
    1708:	73 1f       	adc	r23, r19
    170a:	84 1f       	adc	r24, r20
    170c:	95 1f       	adc	r25, r21
    170e:	a0 1d       	adc	r26, r0
    1710:	08 95       	ret

00001712 <_exit>:
    1712:	f8 94       	cli

00001714 <__stop_program>:
    1714:	ff cf       	rjmp	.-2      	; 0x1714 <__stop_program>
